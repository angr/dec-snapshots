{"4202496:_init": "extern struct_0 *g_40c1e8;\n
\n
int _init()\n
{\n
    if (g_40c1e8)\n
    {\n
        g_40c1e8();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 41215;\n
    v6 = v5 + 31;\n
    v7 = v5 + 31;\n
    if (v7 == v6)\n
        return v5 + 31;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 41151;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 31;\n
    v9 = (v6 + 31 - (v6 + 31) >> 31) + (31 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40c1e4;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40c1e4)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_bitset_init": "int cgc_bitset_init(unsigned int *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // ecx\n
\n
    v2 = a0;\n
    v3 = v1;\n
    *(v3) = v2;\n
    v0 = v2 + 7 >> 3;\n
    return cgc_memset(v3 + 1, 0);\n
}\n
", "4203028:sub_402214": null, "4203040:cgc_bitset_clear": "int cgc_bitset_clear(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int *v2;  // eax\n
\n
    v2 = v1;\n
    v0 = *(v2) + 7 >> 3;\n
    return cgc_memset(v2 + 1, 0);\n
}\n
", "4203088:cgc_bitset_set_bit": "int cgc_bitset_set_bit(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int *v2;  // esi\n
    unsigned int v3;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = -1;\n
    if (*(v2) >= v1)\n
    {\n
        *(4 + v2 + v1 / 8) = *(4 + v2 + v1 / 8) | (1 << (v1 & 7 & 31));\n
        v3 = 0;\n
    }\n
    return v3;\n
}\n
", "4203129:sub_402279": null, "4203136:cgc_bitset_clear_bit": "int cgc_bitset_clear_bit(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int *v2;  // esi\n
    unsigned int v3;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = -1;\n
    if (*(v2) >= v1)\n
    {\n
        *(4 + v2 + v1 / 8) = *(4 + v2 + v1 / 8) & ~((1 << (v1 & 7 & 31)));\n
        v3 = 0;\n
    }\n
    return v3;\n
}\n
", "4203179:sub_4022ab": null, "4203184:cgc_bitset_get_bit": "int cgc_bitset_get_bit(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = -1;\n
    if (*(v0) >= a0)\n
        v1 = *(4 + v0 + (a0 >> 3)) >> (a0 & 7 & 31) & 1;\n
    return v1;\n
}\n
", "4203220:sub_4022d4": null, "4203232:cgc_bitset_find_first": "int cgc_bitset_find_first(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // esi\n
    void* v3;  // ebx, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return -1;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if ((*(4 + v0 + (v3 >> 3)) >> (v3 & 7 & 31) & 1) != a0)\n
        {\n
            v3 += 1;\n
            if (v1 == v3)\n
                return -1;\n
        }\n
        else\n
        {\n
            return v3;\n
        }\n
    }\n
}\n
", "4203304:sub_402328": null, "4203312:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203328:cgc_ishexdigit": "int cgc_ishexdigit(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return (v1 & -33) - 65 < 6 | v1 - 48 < 10;\n
}\n
", "4203359:sub_40235f": null, "4203360:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203379:sub_402373": null, "4203392:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203408:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203424:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 - 32;\n
    return v1;\n
}\n
", "4203441:sub_4023b1": null, "4203456:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 + 32;\n
    return v1;\n
}\n
", "4203473:sub_4023d1": null, "4203488:cgc_todigit": "int cgc_todigit(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // edx\n
\n
    v1 = v0;\n
    v2 = a0;\n
    if (v1 >= v2)\n
    {\n
        return 0;\n
    }\n
    else if (v2 - 2 > 14)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        *(&v1) = (v1 <= 9 ? v1 + 87 : v1 + 48);\n
        return v1;\n
    }\n
}\n
", "4203526:sub_402406": null, "4203536:cgc_fromdigit": "int cgc_fromdigit(char v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
\n
    v1 = a0;\n
    v2 = -1;\n
    if (v1 - 17 >= -15)\n
    {\n
        v3 = v0;\n
        v5 = v3 * 0x1000000;\n
        v6 = (v3 - 91 < -26 ? v5 : v5 + 0x20000000);\n
        v7 = v6 >> 24;\n
        v8 = v7 - 48;\n
        v9 = (v8 < 10 ? v8 : v7 - 87);\n
        v2 = (v9 < 0 ? -1 : (v9 < v1 ? v9 : -1));\n
    }\n
    return v2;\n
}\n
", "4203614:sub_40245e": null, "4203616:cgc_utostr": "int cgc_utostr(unsigned int v1, unsigned int a0, unsigned int a1, char *a2, unsigned int a3)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    int tmp_2;  // tmp #2\n
    int tmp_3;  // tmp #3\n
    int tmp_0;  // tmp #0\n
    int tmp_6;  // tmp #6\n
    char *v2;  // eax\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // eax\n
    char *v7;  // edx, Other Possible Types: unsigned int\n
    char v8;  // bl\n
    char *v9;  // ebp, Other Possible Types: unsigned int\n
    char v10;  // bh\n
    void* v11;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    char *v14;  // edi\n
    unsigned int v15;  // edx\n
    char v16;  // cl\n
    void* v17;  // eax, Other Possible Types: unsigned int\n
    char *v18;  // ebx, Other Possible Types: unsigned int\n
    char *v19;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edx\n
    char v22;  // cl\n
    unsigned int v23;  // edx\n
    char v24;  // cl\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edx\n
    void* v28;  // eax, Other Possible Types: unsigned int\n
    void* v29;  // eax, Other Possible Types: unsigned int\n
    unsigned int v30;  // eax\n
    void* v31;  // edx, Other Possible Types: unsigned int\n
    unsigned int v32;  // eax\n
    void* v33;  // edx, Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    v3 = a0;\n
    if (v3 - 17 < -15)\n
        return -1;\n
    v4 = a3;\n
    if (v4)\n
    {\n
        v9 = a2;\n
        v5 = v1;\n
        if (v5 < v3)\n
        {\n
            tmp_2 = v4;\n
            if (tmp_2 < 2)\n
                return -1;\n
            v7 = 1;\n
        }\n
        else\n
        {\n
            v10 = 2;\n
            v11 = 0;\n
            v6 = v5;\n
            do\n
            {\n
                v8 = v10;\n
                v6 = (0 CONCAT v6) /m v3;\n
                v9 += 1;\n
                v10 += 1;\n
                v11 -= 1;\n
            } while (v6 >= v3);\n
            v7 = 1 - v11;\n
            if (v7 >= a3)\n
                return -1;\n
            v13 = 0;\n
            if (v11 == 1)\n
            {\n
LABEL_4025f1:\n
                a2[v13] = 0;\n
                return 0;\n
            }\n
            else if (v3 - 2 > 14)\n
            {\n
                v14 = v7;\n
                v15 = -(v11);\n
                v16 = 1 - v11;\n
                v17 = 0;\n
                if (a1)\n
                {\n
                    if (v15 >= 3)\n
                    {\n
                        v28 = 0;\n
                        do\n
                        {\n
                            *((v9 + v28 - 3)) = 0;\n
                            v28 -= 4;\n
                        } while (!(v14 & -0x4) != v28);\n
                        v17 = -(v28);\n
                    }\n
                    if ((v16 & 3))\n
                    {\n
                        v30 = -(v17);\n
                        v31 = 0;\n
                        do\n
                        {\n
                            *((v9 + v30 + v31)) = 0;\n
                            v31 -= 1;\n
                        } while (!(v8 & 3) != v31);\n
                    }\n
                }\n
                else\n
                {\n
                    if (v15 >= 3)\n
                    {\n
                        v29 = 0;\n
                        do\n
                        {\n
                            *((v9 + v29 - 3)) = 0;\n
                            v29 -= 4;\n
                        } while (!(v14 & -0x4) != v29);\n
                        v17 = -(v29);\n
                    }\n
                    if ((v16 & 3))\n
                    {\n
                        v32 = -(v17);\n
                        v33 = 0;\n
                        do\n
                        {\n
                            *((v9 + v32 + v33)) = 0;\n
                            v33 -= 1;\n
                        } while (!(v8 & 3) != v33);\n
                    }\n
                }\n
                v13 = v14;\n
                goto LABEL_4025f1;\n
            }\n
        }\n
        if (a1)\n
        {\n
            v0 = v7;\n
            v18 = v7;\n
            do\n
            {\n
                v20 = (0 CONCAT v5) /m v3;\n
                v21 = (0 CONCAT v5) /m v3 >> 32;\n
                v22 = (v21 < 10 ? 87 : 48);\n
                tmp_0 = v22 + v21;\n
                v23 = v22 + v21;\n
                v24 = tmp_0 - 32;\n
                if (v23 - 123 < -26)\n
                    v24 = v23;\n
                a2[1 + v18] = v24;\n
                v5 = v20;\n
                tmp_3 = v18;\n
                v18 -= 1;\n
            } while (tmp_3 != 1);\n
        }\n
        else\n
        {\n
            v0 = v7;\n
            v19 = v7;\n
            do\n
            {\n
                v25 = (0 CONCAT v5) /m v3;\n
                v26 = (0 CONCAT v5) /m v3 >> 32;\n
                *(&a2[1 + v19]) = (v26 < 10 ? 87 : 48) + v26;\n
                v5 = v25;\n
                tmp_6 = v19;\n
                v19 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v13 = v0;\n
        goto LABEL_4025f1;\n
    }\n
}\n
", "4204115:sub_402653": null, "4204128:cgc_itostr": "int cgc_itostr(unsigned int v0, unsigned int a0, unsigned int a1, char *a2, unsigned int a3)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // ecx\n
    char *v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // eax\n
\n
    v1 = a3;\n
    v2 = v0;\n
    if ((v2 >> 31) + 1 > v1)\n
        return -1;\n
    v3 = a2;\n
    if (v2 < 0)\n
    {\n
        *(v3) = 45;\n
        v3 += 1;\n
        v1 -= 1;\n
    }\n
    v4 = -(v2);\n
    if (!(v2) < 0)\n
        v4 = v2;\n
    v5 = cgc_utostr(v4, a0, a1, v3, v1);\n
    return v5;\n
}\n
", "4204230:sub_4026c6": null, "4204240:cgc_dtostr": null, "4204920:sub_402978": null, "4204928:cgc_strtou": "int cgc_strtou(char *v0, unsigned int a0, unsigned int *a1)\n
{\n
    int tmp_11;  // tmp #11\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // edi\n
    void* v2;  // esi, Other Possible Types: unsigned int\n
    char *v3;  // eax\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ebp\n
    unsigned int v15;  // ecx\n
    void* v16;  // eax, Other Possible Types: unsigned int\n
    void* v17;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v18;  // edx, Other Possible Types: char\n
\n
    v1 = a0;\n
    if (v1 - 17 < -15)\n
        return -1;\n
    v3 = v0;\n
    v18 = *(v3);\n
    if (!*(v3))\n
    {\n
        v2 = 0;\n
        v16 = 0;\n
    }\n
    else\n
    {\n
        v16 = 0;\n
        v17 = 0;\n
        v2 = 0;\n
        while (true)\n
        {\n
            v4 = v18;\n
            v6 = v4 * 0x1000000;\n
            v7 = (v4 - 91 < -26 ? v6 : v6 + 0x20000000);\n
            v8 = v7 >> 24;\n
            v9 = v8 - 48;\n
            v10 = (v9 < 10 ? v9 : v8 - 87);\n
            if (v10 < 0)\n
                break;\n
            if (v10 >= v1)\n
                break;\n
            v11 = v16 * v1 >> 32;\n
            v12 = v16 * v1;\n
            v13 = v1 * v17;\n
            tmp_11 = v13;\n
            if (tmp_11 + v11)\n
            {\n
LABEL_402a17:\n
                return -1;\n
            }\n
            v15 = ~(v10);\n
            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(ebp<4>, Conv(1->32, (ecx<4> < eax<4>))), Conv(1->32, (ecx<4> < eax<4>))))\n
                goto LABEL_402a17;\n
            tmp_2 = v12;\n
            v16 = v12 + v10;\n
            v17 = v13 + v11 + (tmp_2 + v10 < tmp_2);\n
            v18 = v0[1 + v2];\n
            v2 += 1;\n
            if (!v18)\n
                break;\n
        }\n
    }\n
    *(a1) = v16;\n
    return v2;\n
}\n
", "4205091:sub_402a23": null, "4205104:cgc_strtoi": "int cgc_strtoi(char *v2, unsigned int a0, unsigned int *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_11;  // tmp #11\n
    int tmp_2;  // tmp #2\n
    char *v1;  // [bp-0x14]\n
    unsigned int v3;  // ebp\n
    char *v4;  // eax\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // edx\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v17;  // edx\n
    void* v18;  // eax, Other Possible Types: unsigned int\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    void* v20;  // edi, Other Possible Types: unsigned int\n
    char v22;  // cl\n
    unsigned int v23;  // edx\n
\n
    v3 = a0;\n
    v4 = v2;\n
    v5 = 0;\n
    v11 = a0 - 17;\n
    if (v11 < -15)\n
        return -1;\n
    v0 = *(v4);\n
    *(&v5) = *(v4) == 45;\n
    *(&v11) = v4[v5];\n
    if (v4[v5])\n
    {\n
        v5 = v5;\n
        v1 = &v4[v5 + 1];\n
        v18 = 0;\n
        v19 = 0;\n
        v20 = 0;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        v18 = 0;\n
        *(&v11) = v0;\n
LABEL_402b01:\n
        v22 = v11;\n
        v23 = -(v18);\n
        if (v22 != 45)\n
            v23 = v18;\n
        *(a1) = v23;\n
        return v20 + v5;\n
    }\n
    while (true)\n
    {\n
        v6 = v11;\n
        v8 = v6 * 0x1000000;\n
        v9 = (v6 - 91 < -26 ? v8 : v8 + 0x20000000);\n
        v10 = v9 >> 24;\n
        v11 = v10 - 48;\n
        v12 = (v11 < 10 ? v11 : v10 - 87);\n
        if (v12 < 0)\n
        {\n
LABEL_402ad8:\n
            *(&v11) = v0;\n
            v5 = v5;\n
            if (v18 > (v0 == 45) + 2147483647)\n
                return -1;\n
            goto LABEL_402b01;\n
        }\n
        if (!(v12 < v3))\n
            goto LABEL_402ad8;\n
        v13 = v18 * v3 >> 32;\n
        v14 = v18 * v3;\n
        v15 = v3 * v19;\n
        tmp_11 = v15;\n
        if (tmp_11 + v13)\n
            break;\n
        v17 = ~(v12);\n
        if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(ecx<4>, Conv(1->32, (edx<4> < eax<4>))), Conv(1->32, (edx<4> < eax<4>))))\n
            break;\n
        tmp_2 = v14;\n
        v18 = v14 + v12;\n
        v19 = v15 + v13 + (tmp_2 + v12 < tmp_2);\n
        v11 = v1[v20];\n
        v20 += 1;\n
        if (!v11)\n
            goto LABEL_402ad8;\n
    }\n
}\n
", "4205345:sub_402b21": null, "4205360:cgc_strtod": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtod(struct struct_0 **v13, unsigned long long *a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    int tmp_38;  // tmp #38\n
    int tmp_12;  // tmp #12\n
    int tmp_2;  // tmp #2\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // [bp-0x44]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0x34]\n
    struct struct_0 **v4;  // [bp-0x30]\n
    struct struct_0 **v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    struct struct_0 **v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    char *v9;  // [bp-0x1c]\n
    void* v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // esi\n
    struct struct_0 **v16;  // esi\n
    char *v17;  // eax\n
    unsigned int v18;  // eax\n
    struct struct_0 **v19;  // eax, Other Possible Types: unsigned int\n
    void* v20;  // esi, Other Possible Types: unsigned int\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ebx\n
    unsigned int v26;  // ebx\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // esi\n
    unsigned int v33;  // edx\n
    struct struct_0 **v34;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v36;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v37;  // edi\n
    struct struct_0 **v38;  // ecx, Other Possible Types: unsigned int\n
    void* v39;  // esi, Other Possible Types: unsigned int, struct struct_0 **\n
    void* v40;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v41;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // ebp\n
    unsigned int v45;  // ebp\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // ebp\n
    char *v48;  // eax\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // eax\n
    unsigned int v51;  // ebx\n
    unsigned int v53;  // edx\n
    struct struct_0 **v54;  // esi\n
    unsigned int v55;  // esi\n
    struct struct_0 **v56;  // eax\n
\n
    v12 = v14;\n
    v11 = v15;\n
    v16 = v13;\n
    v0 = 46;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v17 = cgc_strrchr(v16);\n
    v21 = 0;\n
    v34 = 0;\n
    if (v17)\n
    {\n
        v34 = v17 + 1;\n
        *(v17) = 0;\n
    }\n
    v5 = v34;\n
    v18 = 0;\n
    *(&v3) = *(v16);\n
    *(&v18) = *(v16) == 45;\n
    v4 = v18;\n
    tmp_38 = *(v16 + v18);\n
    *(&v34) = *(v16 + v18);\n
    v19 = 0;\n
    if (tmp_38)\n
    {\n
        v19 = 0;\n
        v2 = v4 + v16 + 1;\n
        v20 = 0;\n
        v21 = 0;\n
        while (true)\n
        {\n
            v22 = v34;\n
            v24 = v22 * 0x1000000;\n
            v25 = (v22 - 91 < -26 ? v24 : v24 + 0x20000000);\n
            v26 = v25 >> 24;\n
            v27 = v26 - 48;\n
            v28 = (v27 < 10 ? v27 : v26 - 87);\n
            if (v28 > 9)\n
                break;\n
            v29 = v19 * 10 >> 32;\n
            v30 = v19 * 10;\n
            v31 = v20 * 10;\n
            tmp_12 = v31;\n
            if (tmp_12 + v29)\n
                return -1;\n
            v33 = v28 ^ -1;\n
            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(ebx<4>, Conv(1->32, (edx<4> < eax<4>))), Conv(1->32, (edx<4> < eax<4>))))\n
                return -1;\n
            tmp_2 = v30;\n
            v19 = v30 + v28;\n
            v20 = v31 + v29 + (tmp_2 + v28 < tmp_2);\n
            v34 = v2[v21];\n
            v21 += 1;\n
            if (!v34)\n
                break;\n
        }\n
        if (v19 > (v3 == 45) + 2147483647)\n
            return -1;\n
    }\n
    v36 = -(v19);\n
    if (v3 != 45)\n
        v36 = v19;\n
    v37 = v21 + v4;\n
    if (v37 == -1)\n
        return -1;\n
    v2 = 0;\n
    v38 = v5;\n
    if (!v38)\n
    {\n
        v39 = 0;\n
    }\n
    else\n
    {\n
        *(&v38) = *(v38);\n
        v39 = 0;\n
        if (*(&v38))\n
        {\n
            v3 = v36;\n
            v2 = 0;\n
            v40 = 0;\n
            v39 = 0;\n
            while (true)\n
            {\n
                v41 = v38;\n
                v43 = v41 * 0x1000000;\n
                v44 = (v41 - 91 < -26 ? v43 : v43 + 0x20000000);\n
                v45 = v44 >> 24;\n
                v46 = v45 - 48;\n
                v47 = (v46 < 10 ? v46 : v45 - 87);\n
                if (v47 > 9)\n
                    break;\n
                v48 = v2;\n
                v49 = v48 * 10 >> 32;\n
                v50 = v48 * 10;\n
                v51 = v40 * 10;\n
                tmp_13 = v51;\n
                if (tmp_13 + v49)\n
                    return -1;\n
                v4 = v39;\n
                v53 = v47 ^ -1;\n
                if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(ebx<4>, Conv(1->32, (edx<4> < eax<4>))), Conv(1->32, (edx<4> < eax<4>))))\n
                    return -1;\n
                v2 = v50 + v47;\n
                v40 = v51 + v49 + (v50 + v47 < v50);\n
                v54 = v4;\n
                v38 = *((v5 + v54 + 1));\n
                v39 = v54 + 1;\n
                if (!v38)\n
                    break;\n
            }\n
            v36 = v3;\n
        }\n
    }\n
    v9 = v2;\n
    v10 = 0;\n
    if ([D] GetI(136:I8x8)[t25,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t22,0] = t25\n
    [D] PutI(136:I8x8)[t22,0] = 0x01\n
    [D] PutI(72:F64x8)[t31,0] = t32\n
    [D] PutI(136:I8x8)[t31,0] = 0x01\n
    [D] PutI(72:F64x8)[t45,0] = t49\n
    [D] PutI(136:I8x8)[t45,0] = 0x01\n
    [D] PutI(72:F64x8)[t45,1] = t42\n
    [D] PutI(136:I8x8)[t45,1] = 0x01\n
    [D] PutI(72:F64x8)[t60,0] = t61\n
    [D] PutI(136:I8x8)[t60,0] = 0x01\n
    [D] PutI(72:F64x8)[t83,1] = t84\n
    [D] PutI(136:I8x8)[t83,1] = 0x01\n
    [D] PutI(136:I8x8)[t83,0] = 0x00\n
    *(a0) = ([D] GetI(136:I8x8)[t101,0] ? [D] GetI(72:F64x8)[t101,0] : nan);\n
    [D] PutI(136:I8x8)[t101,0] = 0x00\n
    v8 = v39;\n
    [D] PutI(72:F64x8)[t113,0] = t116\n
    [D] PutI(136:I8x8)[t113,0] = 0x01\n
    v1 = ([D] GetI(136:I8x8)[t129,0] ? [D] GetI(72:F64x8)[t129,0] : nan);\n
    [D] PutI(136:I8x8)[t129,0] = 0x00\n
    v0 = 0x40240000;\n
    cgc_pow();\n
    v55 = v39 + 1;\n
    [D] PutI(72:F64x8)[t20,0] = t21\n
    [D] PutI(136:I8x8)[t20,0] = 0x01\n
    v56 = v5;\n
    v7 = v36;\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    *(a0) = ([D] GetI(136:I8x8)[t54,0] ? [D] GetI(72:F64x8)[t54,0] : nan);\n
    [D] PutI(136:I8x8)[t54,0] = 0x00\n
    return (!v56 ? v56 : v55) + v37;\n
}\n
", "4205975:sub_402d97": null, "4205984:cgc_sign": "int cgc_sign()\n
{\n
    return;\n
}\n
", "4205996:sub_402dac": null, "4206000:cgc_exponent": "int cgc_exponent()\n
{\n
    return;\n
}\n
", "4206012:sub_402dbc": null, "4206016:cgc_mantissa": "int cgc_mantissa(unsigned int v0, unsigned int a0)\n
{\n
    return v0;\n
}\n
", "4206030:sub_402dce": null, "4206032:cgc_isnan": "int cgc_isnan(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = a0;\n
    return ((v1 & -1048577) || v0) & !(~(v1) & 0x7ff00000);\n
}\n
", "4206067:sub_402df3": null, "4206080:cgc_isinf": "int cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4206083:sub_402e03": null, "4206096:cgc_abs": null, "4206103:sub_402e17": null, "4206112:cgc_clamp": null, "4206141:sub_402e3d": null, "4206144:cgc_pool_init": "int cgc_pool_init(unsigned int v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int v3[2];  // eax\n
\n
    v1 = a0;\n
    v2 = -1;\n
    if (v1 <= 4075)\n
    {\n
        v3 = v0;\n
        v3[0] = v1;\n
        v3[1] = 0;\n
        v2 = 0;\n
    }\n
    return v2;\n
}\n
", "4206177:sub_402e61": null, "4206192:cgc_pool_destroy": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_pool_destroy(struct_1 *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_1 *v2;  // esi\n
    struct struct_0 **v3;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    v3 = v2->field_4;\n
    if (v3)\n
    {\n
        do\n
        {\n
            v0 = 0x1000;\n
            cgc_deallocate(v3);\n
            v3 = *(v3);\n
        } while (v3);\n
    }\n
    v2->field_4 = 0;\n
    v2->field_0 = 0;\n
    return v3;\n
}\n
", "4206266:sub_402eba": null, "4206272:cgc_pool_free_all": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_pool_free_all(struct_1 *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_1 *v2;  // esi\n
    struct struct_0 **v3;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    v3 = v2->field_4;\n
    if (v3)\n
    {\n
        do\n
        {\n
            v0 = 0x1000;\n
            cgc_deallocate(v3);\n
            v3 = *(v3);\n
        } while (v3);\n
    }\n
    v2->field_4 = 0;\n
    return v3;\n
}\n
", "4206340:sub_402f04": null, "4206352:cgc_pool_alloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_pool_alloc(struct_1 *v3)\n
{\n
    struct struct_2 **v0;  // [bp-0x24]\n
    unsigned int *v1;  // [bp-0x18]\n
    unsigned int *v2;  // [bp-0x14]\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    unsigned int v7[3];  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // ecx\n
    struct_0 *v13;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v14;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int v17[3];  // ecx\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // eax\n
    unsigned int v24[4];  // eax\n
\n
    v4 = v3;\n
    v5 = v3->field_4;\n
    if (!v5)\n
    {\n
        v0 = &v1;\n
        if (!(!cgc_allocate(0x1000, 0)))\n
            goto LABEL_403014;\n
        *(v1) = v4->field_4;\n
        v6 = v4->field_0;\n
        v7 = v1;\n
        v7[1] = v6;\n
        v8 = (0 CONCAT 4076) /m v6;\n
        do\n
        {\n
            v9 = v8;\n
            v10 = v8 + 7 >> 3;\n
            v11 = 4076 - v6 * v8;\n
            v8 -= 1;\n
        } while (v10 > v11);\n
        v7[2] = v9;\n
        cgc_bitset_init(&v7[1 + 1], v9);\n
        v5 = v1;\n
        v12 = *((v5 + 8));\n
        *((v5 + 12)) = (v12 + 7 >> 3) + v5 + 20;\n
        v4 = v3;\n
        v3->field_4 = v5;\n
        if (!v12)\n
        {\n
LABEL_402fd0:\n
            v13 = v5;\n
            while (true)\n
            {\n
                v14 = v13;\n
                v13 = *(v13);\n
                if (!v13)\n
                    break;\n
                if (*((v13 + 8)))\n
                {\n
                    v14->field_0 = *(v13);\n
                    *(v13) = v5;\n
                    goto LABEL_403085;\n
                }\n
            }\n
            v0 = &v2;\n
            if (!cgc_allocate(0x1000, 0))\n
            {\n
                *(v2) = *((v4 + 4));\n
                v16 = *(v4);\n
                v17 = v2;\n
                v17[1] = v16;\n
                v18 = (0 CONCAT 4076) /m v16;\n
                do\n
                {\n
                    v19 = v18;\n
                    v20 = v18 + 7 >> 3;\n
                    v21 = 4076 - v16 * v18;\n
                    v18 -= 1;\n
                } while (v20 > v21);\n
                v17[2] = v19;\n
                cgc_bitset_init(&v17[1 + 1], v19);\n
                v13 = v2;\n
                *((v13 + 12)) = (*((v13 + 8)) + 7 >> 3) + v13 + 20;\n
                v4 = v3;\n
LABEL_403085:\n
                *((v4 + 4)) = v13;\n
LABEL_403088:\n
                v22 = cgc_bitset_find_first(v13 + 16, 0);\n
                if (v22 == -1)\n
                    return 0;\n
                if (cgc_bitset_set_bit(*((v4 + 4)) + 16, v22) == -1)\n
                    return 0;\n
                v24 = *((v4 + 4));\n
                v24[2] = v24[2] - 1;\n
                return *(v4) * v22 + v24[3];\n
            }\n
LABEL_403014:\n
            return 0;\n
        }\n
    }\n
    else if (!v5->field_8)\n
    {\n
        goto LABEL_402fd0;\n
    }\n
    v13 = v5;\n
    goto LABEL_403088;\n
}\n
", "4206804:sub_4030d4": null, "4206816:cgc_pool_free": "int cgc_pool_free()\n
{\n
    int tmp_20;  // tmp #20\n
    char v1;  // [bp+0x8]\n
    unsigned int v2[4];  // eax\n
    unsigned int v3[4];  // ecx\n
    unsigned int v4;  // eax\n
\n
    v2 = *(&v1);\n
    v3 = v2 & 4095;\n
    v4 = v2 - v3[3];\n
    tmp_20 = (0 CONCAT v4) /m v3[1];\n
    if (!(tmp_20 >> 32))\n
    {\n
        cgc_bitset_clear_bit(v3 + 1, (0 CONCAT v4) /m v3[1]);\n
        return;\n
    }\n
    return;\n
}\n
", "4206879:sub_40311f": null, "4206880:cgc_read_all": "int cgc_read_all(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_5;  // tmp #5\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v3 = a1;\n
    if (v3 >= 0)\n
    {\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>))\n
            return 0;\n
        v4 = 0;\n
        while (true)\n
        {\n
            v0 = &v1;\n
            if (cgc_receive(v2, a0 + v4, v3))\n
                break;\n
            v5 = *(&v1);\n
            if (!v5)\n
                break;\n
            v4 += v5;\n
            tmp_5 = v3;\n
            v3 -= v5;\n
            if (tmp_5 == v5)\n
                return v4;\n
        }\n
    }\n
    return -1;\n
}\n
", "4206988:sub_40318c": null, "4206992:cgc_read_until": "int cgc_read_until(unsigned int v2, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    char *v6;  // eax\n
    char *v7;  // ebp\n
    unsigned int v8;  // eax\n
    char *v9;  // esi, Other Possible Types: unsigned int\n
\n
    v3 = a2;\n
    if (v3 <= 0)\n
        return -1;\n
    v9 = 0;\n
    if (v3 != 1)\n
    {\n
        v9 = 0;\n
        do\n
        {\n
            v6 = a0;\n
            v7 = &v6[v9];\n
            v0 = &v1;\n
            if (cgc_receive(v2, &v6[v9], 1))\n
            {\n
LABEL_403209:\n
                return -1;\n
            }\n
            v8 = *(&v1);\n
            if (!v8)\n
                goto LABEL_403209;\n
            if (*(v7) == a1)\n
                break;\n
            continue;\n
            v9 += v8;\n
        } while (v9 < v3 - 1);\n
    }\n
    *((a0 + v9)) = 0;\n
    return v9;\n
}\n
", "4207120:cgc_write_all": "int cgc_write_all(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_5;  // tmp #5\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v3 = a1;\n
    if (v3 >= 0)\n
    {\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>))\n
            return 0;\n
        v4 = 0;\n
        while (true)\n
        {\n
            v0 = &v1;\n
            if (cgc_transmit(v2, a0 + v4, v3))\n
                break;\n
            v5 = *(&v1);\n
            if (!v5)\n
                break;\n
            v4 += v5;\n
            tmp_5 = v3;\n
            v3 -= v5;\n
            if (tmp_5 == v5)\n
                return v4;\n
        }\n
    }\n
    return -1;\n
}\n
", "4207228:sub_40327c": null, "4207232:cgc_fdopen": "extern unsigned int file_pool;\n
\n
int cgc_fdopen(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!file_pool && cgc_pool_init(&file_pool, 20))\n
        return 0;\n
    v1 = cgc_pool_alloc(&file_pool);\n
    if (v1)\n
    {\n
        *(v1) = v0;\n
        *((v1 + 4)) = a0;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 16)) = 0;\n
        return v1;\n
    }\n
    return 0;\n
}\n
", "4207353:sub_4032f9": null, "4207360:cgc_fclose": "extern unsigned int file_pool;\n
\n
int cgc_fclose(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = *((*(&v0) + 8));\n
    if (v4)\n
    {\n
        v0 = 0x1000;\n
        cgc_deallocate(v4);\n
    }\n
    v0 = v2;\n
    return cgc_pool_free(&file_pool);\n
}\n
", "4207425:sub_403341": null, "4207440:cgc_fflush": "int cgc_fflush(unsigned int v3[5])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4[5];  // eax\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // ebp\n
    unsigned int v7[5];  // eax\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edi\n
    unsigned int v11[5];  // eax\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return -1;\n
    }\n
    else if (!v4[1])\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v6 = v4[2];\n
        if (!v4[2])\n
            return 0;\n
        v10 = v4[3];\n
        if (!v10)\n
            return 0;\n
        if ([D] x86g_calculate_condition(0x8<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>))\n
            return -1;\n
        v7 = v3;\n
        v1 = v7[0];\n
        v8 = v6 + v7[4];\n
        v5 = 0;\n
        while (true)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v1, v5 + v8, v10))\n
                break;\n
            v9 = *(&v2);\n
            if (!v9)\n
                break;\n
            v5 += v9;\n
            tmp_5 = v10;\n
            v10 -= v9;\n
            if (tmp_5 == v9)\n
            {\n
                v11 = v3;\n
                if (v5 < 0)\n
                    return v5;\n
                v11[3] = 0;\n
                v11[4] = 0;\n
                v5 = 0;\n
            }\n
        }\n
    }\n
}\n
", "4207601:sub_4033f1": null, "4207616:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fread(unsigned int v7, unsigned int a0, unsigned int a1[5])\n
{\n
    int tmp_6;  // tmp #6\n
    int tmp_7;  // tmp #7\n
    struct_0 *v0;  // [bp-0x30]\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    unsigned int v8;  // ebp\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12[5];  // ecx, Other Possible Types: unsigned int\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    unsigned int v19[5];  // eax\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // esi\n
    unsigned int v22;  // esi\n
    unsigned int v23[5];  // ecx\n
    unsigned int v24;  // eax\n
\n
    v8 = a0;\n
    if (a0 < 0)\n
        return -1;\n
    v12 = a1;\n
    if (v12[1])\n
        return -1;\n
    if (!v8)\n
        return 0;\n
    v11 = v7;\n
    v13 = v12[3];\n
    if (v13)\n
    {\n
        if (v13 > v8)\n
            v13 = v8;\n
        cgc_memcpy();\n
        v12 = a1;\n
        tmp_6 = *((v12 + 12));\n
        *((v12 + 12)) = *((v12 + 12)) - v13;\n
        if (tmp_6 != v13)\n
        {\n
            *((v12 + 16)) = *((v12 + 16)) + v13;\n
            tmp_7 = v8;\n
            v8 -= v13;\n
            v10 = v7;\n
            if (tmp_7 == v13)\n
                goto LABEL_4035c9;\n
        }\n
        else\n
        {\n
            *((v12 + 16)) = 0;\n
            tmp_6 = v8;\n
            v8 -= v13;\n
            v10 = v7;\n
            if (tmp_6 == v13)\n
                goto LABEL_4035c9;\n
        }\n
        v11 = v10 + v13;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 16)) = 0;\n
        if (!(v8 < 0x1000))\n
            goto LABEL_403552;\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        if (v8 >= 0x1000)\n
        {\n
LABEL_403552:\n
            v1 = v13;\n
            v3 = v8 & -0x1000;\n
            if ((v8 & -0x1000) < 0)\n
                return -1;\n
            if (!([D] x86g_calculate_condition(0x4<32>, 0xf<32>, And(ebp<4>, 0xfffff000<32>), 0x0<32>, 0x0<32>)))\n
            {\n
                v5 = *(v12);\n
                v14 = 0;\n
                v15 = v3;\n
                v2 = v8;\n
                while (true)\n
                {\n
                    v0 = &v6;\n
                    v8 = v2;\n
                    v12 = a1;\n
                    if (cgc_receive(v5, v11 + v14, v15))\n
                        break;\n
                    v16 = *(&v6);\n
                    if (!v16)\n
                        break;\n
                    v14 += v16;\n
                    tmp_5 = v15;\n
                    v15 -= v16;\n
                    if (tmp_5 == v16)\n
                        goto LABEL_4035d2;\n
                }\n
            }\n
            else\n
            {\n
                v14 = 0;\n
LABEL_4035d2:\n
                v4 = v14;\n
                v17 = v3;\n
                if (v14 != v17)\n
                    return -1;\n
                v13 = v1 + v17;\n
                v8 &= 4095;\n
                if (!v8)\n
                {\n
LABEL_4035c9:\n
                    return v13;\n
                }\n
                v2 = v11 + v17;\n
                if (!*((v12 + 8)))\n
                {\n
LABEL_403605:\n
                    if (cgc_allocate(0x1000, 0))\n
                        return -1;\n
                    v1 = v13;\n
                    v19 = a1;\n
                    v19[3] = 0;\n
                    v19[4] = 0;\n
                    v18 = 0;\n
                    v12 = v19;\n
                    for (; v18 < v8; *((v12 + 12)) = v18)\n
                    {\n
                        v20 = 0x1000 - v18;\n
                        v21 = v18 + *((v12 + 16)) + *((v12 + 8));\n
                        v0 = &v4;\n
                        if (cgc_receive(*(v12), v21, v20))\n
                            return -1;\n
                        v22 = v4;\n
                        if (!v22)\n
                            return -1;\n
                        v12 = a1;\n
                        v18 = v22 + *((v12 + 12));\n
                    }\n
                    if (v8 < v18)\n
                        v18 = v8;\n
                    cgc_memcpy();\n
                    v23 = a1;\n
                    tmp_6 = v23[3];\n
                    v23[3] = v23[3] - v18;\n
                    v24 = (tmp_6 == v18 ? v23[4] + v18 : 0);\n
                    v23[4] = v24;\n
                    v13 = v18 + v1;\n
                    goto LABEL_4035c9;\n
                }\n
LABEL_4034a2:\n
                v1 = v13;\n
                v18 = *((v12 + 12));\n
            }\n
        }\n
    }\n
    v2 = v11;\n
    if (!*((v12 + 8)))\n
        goto LABEL_403605;\n
    goto LABEL_4034a2;\n
}\n
", "4208194:sub_403642": null, "4208208:cgc_fread_until": "int cgc_fread_until(char *v8, char a0, unsigned int a1, unsigned int a2[5])\n
{\n
    int tmp_3;  // tmp #3\n
    int tmp_7;  // tmp #7\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    char v7;  // [bp-0x14]\n
    unsigned int v9;  // ebp\n
    unsigned int v10[5];  // esi, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // ecx\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    unsigned int v16;  // esi\n
    unsigned int v17[5];  // eax\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    unsigned int v21;  // eax\n
    void* v22;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    void* v26;  // eax, Other Possible Types: unsigned int\n
\n
    v9 = a1;\n
    if (a1 > 0)\n
    {\n
        v10 = a2;\n
        if (!v10[1])\n
        {\n
            if (v10[2])\n
            {\n
                v1 = v9;\n
                tmp_3 = v9;\n
                v11 = v9 - 1;\n
                if (!tmp_3 - 1)\n
                    goto LABEL_403675;\n
                goto LABEL_403697;\n
            }\n
            else if (!cgc_allocate(0x1000, 0))\n
            {\n
                v10[3] = 0;\n
                v10[4] = 0;\n
                v1 = v9;\n
                v11 = v9 - 1;\n
                if (!v9 - 1)\n
                    goto LABEL_403675;\n
LABEL_403697:\n
                v4 = &v10[2];\n
                v2 = v8;\n
                v5 = a0;\n
                v26 = 0;\n
                do\n
                {\n
                    v3 = v26;\n
                    v22 = *((v10 + 8));\n
                    v15 = *((v10 + 12));\n
                    if (!v22)\n
                    {\n
                        v22 = 0;\n
                        v13 = v1;\n
                        goto LABEL_403775;\n
                    }\n
                    if (!v15)\n
                    {\n
                        v15 = 0;\n
                        v13 = v1;\n
                        goto LABEL_403775;\n
                    }\n
                    v14 = v22 + *((v10 + 16));\n
                    v6 = cgc_memchr(v14, v5);\n
                    v16 = (!v6 ? v6 - *((v10 + 8)) - *((v10 + 16)) + 1 : *((v10 + 12)));\n
                    if (v11 < v16)\n
                        v16 = v11;\n
                    cgc_memcpy();\n
                    v17 = a2;\n
                    v18 = v17[3];\n
                    tmp_7 = v18;\n
                    v15 = v18 - v16;\n
                    v17[3] = v15;\n
                    v19 = (tmp_7 == v16 ? v17[4] + v16 : 0);\n
                    v17[4] = v19;\n
                    v13 = v1 - v16;\n
                    v2 = &v2[v16];\n
                    v21 = v3 + v16;\n
                    if (v1 - v16 == 1)\n
                    {\n
LABEL_403802:\n
                        *(v2) = 0;\n
                        return v3 + v16;\n
                    }\n
                    if (!(!v6))\n
                        goto LABEL_403802;\n
                    v3 = v21;\n
                    v22 = *(v4);\n
                    v10 = v17;\n
LABEL_403775:\n
                    v23 = 0x1000 - v15;\n
                    v24 = v15 + *((v10 + 16)) + v22;\n
                    v0 = &v7;\n
                    if (cgc_receive(*(v10), v24, v23))\n
                        break;\n
                    v25 = *(&v7);\n
                    if (!v25)\n
                        break;\n
                    continue;\n
                    *((v10 + 12)) = *((v10 + 12)) + v25;\n
                    v1 = v13;\n
                    v11 = v13 - 1;\n
                    v26 = v3;\n
                } while (v26 < v11);\n
                goto LABEL_403675;\n
            }\n
        }\n
    }\n
LABEL_403675:\n
    return -1;\n
}\n
", "4208367:sub_4036ef": null, "4208375:sub_4036f7": null, "4208654:sub_40380e": null, "4208656:cgc_fwrite": "int cgc_fwrite(unsigned int v8, unsigned int a0, unsigned int a1[5])\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c], Other Possible Types: char\n
    char v6;  // [bp-0x18]\n
    char v7;  // [bp-0x14]\n
    unsigned int v9;  // edi\n
    unsigned int v10[5];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    void* v16;  // esi, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // esi\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v9 = a0;\n
    if (v9 < 0)\n
    {\n
LABEL_403a4f:\n
        return -1;\n
    }\n
    v10 = a1;\n
    if (!(a1[1] == 1))\n
        goto LABEL_403a4f;\n
    if (!v9)\n
        return 0;\n
    v11 = v8;\n
    if (!v10[2])\n
    {\n
        v16 = 0;\n
        if (v9 < 0x1000)\n
            goto LABEL_4039ca;\n
        goto LABEL_40391d;\n
    }\n
    v16 = 0x1000 - (v10[3] + v10[4]);\n
    if (v16 > v9)\n
        v16 = v9;\n
    cgc_memcpy();\n
    v12 = v10[3] + v16;\n
    v10[3] = *(&v5);\n
    if (v9 == v16)\n
        return v16;\n
    v1 = v16;\n
    v3 = v9 - v16;\n
    v2 = v10[2] + v10[4];\n
    v13 = -1;\n
    v5 = v12;\n
    if (*(&v5) >= 0)\n
    {\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, Load(addr=stack_base-28, size=4, endness=Iend_LE), 0x0<32>, 0x0<32>))\n
        {\n
            v9 = v3;\n
            v10 = a1;\n
            goto LABEL_4039a7;\n
        }\n
        else\n
        {\n
            v4 = a1[0];\n
            v13 = 0;\n
            v14 = v5;\n
            do\n
            {\n
                v0 = &v6;\n
                if (cgc_transmit(v4, v2 + v13, v14))\n
                {\n
LABEL_403990:\n
                    v13 = -1;\n
                    break;\n
                }\n
                else\n
                {\n
                    v15 = *(&v6);\n
                    if (!v15)\n
                        goto LABEL_403990;\n
                }\n
                v13 += v15;\n
                tmp_5 = v14;\n
                v14 -= v15;\n
            } while (tmp_5 != v15);\n
        }\n
    }\n
    tmp_1 = v13;\n
    v9 = v3;\n
    v10 = a1;\n
    if (*(&v5) != tmp_1)\n
        return -1;\n
LABEL_4039a7:\n
    v16 = v1;\n
    v11 = v8 + v16;\n
    *((v10 + 12)) = 0;\n
    *((v10 + 16)) = 0;\n
    if (v9 < 0x1000)\n
    {\n
LABEL_4039ca:\n
        v17 = *((v10 + 8));\n
        if (!(!v17))\n
            goto LABEL_4039d3;\n
        goto LABEL_403a12;\n
    }\n
LABEL_40391d:\n
    v1 = v16;\n
    v3 = v9;\n
    v4 = v9 & -0x1000;\n
    if ((v9 & -0x1000) >= 0)\n
    {\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, Load(addr=stack_base-28, size=4, endness=Iend_LE), 0x0<32>, 0x0<32>))\n
        {\n
            v18 = 0;\n
        }\n
        else\n
        {\n
            v2 = a1[0];\n
            v18 = 0;\n
            v19 = v4;\n
            while (true)\n
            {\n
                v0 = &v7;\n
                if (cgc_transmit(v2, v11 + v18, v19))\n
                    break;\n
                v20 = *(&v7);\n
                if (!v20)\n
                    break;\n
                v18 += v20;\n
                tmp_5 = v19;\n
                v19 -= v20;\n
                if (tmp_5 == v20)\n
                    goto LABEL_4039ea;\n
            }\n
        }\n
LABEL_4039ea:\n
        v21 = v4;\n
        if (v18 == v21)\n
        {\n
            v16 = v1 + v21;\n
            v9 = v3 & 4095;\n
            if (!v9)\n
                return v1 + v21;\n
            v11 += v21;\n
            v10 = a1;\n
            v17 = a1[2];\n
            if (!(!v17))\n
                goto LABEL_4039d3;\n
LABEL_403a12:\n
            v2 = v11;\n
            v1 = v16;\n
            if (cgc_allocate(0x1000, 0))\n
                return -1;\n
            *((v10 + 12)) = 0;\n
            *((v10 + 16)) = 0;\n
            v17 = *((v10 + 8));\n
            v16 = v1;\n
            v11 = v2;\n
LABEL_4039d3:\n
            cgc_memcpy(v17, v11);\n
            *((v10 + 12)) = v9;\n
            v16 += v9;\n
            return v16;\n
        }\n
    }\n
    goto LABEL_403a4f;\n
}\n
", "4209246:sub_403a5e": null, "4209248:cgc_fgetc": "int cgc_fgetc(unsigned int v6[4])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x15]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int v10[4];  // eax\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // ecx\n
    void* v13;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // ecx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    if (v10[3])\n
    {\n
        v14 = cgc_fread(&v1, 1, v10);\n
    }\n
    else\n
    {\n
        v11 = v10[0];\n
        v15 = 1;\n
        v13 = 0;\n
        while (true)\n
        {\n
            v0 = &v2;\n
            v14 = -1;\n
            if (cgc_receive(v11, &(&v1)[v13], v15))\n
                break;\n
            v12 = *(&v2);\n
            if (!v12)\n
                break;\n
            v13 += v12;\n
            v14 = v13;\n
            v15 -= v12;\n
            if (v12 == 1)\n
                break;\n
        }\n
    }\n
    v16 = v1;\n
    if (v14 < 0)\n
        v16 = v14;\n
    return v16;\n
}\n
", "4209381:sub_403ae5": null, "4209392:cgc_fputc": "int cgc_fputc()\n
{\n
    unsigned int v0;  // [bp+0x4]\n
    char v1;  // [bp+0x8]\n
\n
    cgc_fwrite(&v0, 1, *(&v1));\n
    return;\n
}\n
", "4209432:sub_403b18": null, "4209440:cgc_vfprintf": "int cgc_vfprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = a1;\n
    return cgc_printf_core(v1);\n
}\n
", "4209487:sub_403b4f": null, "4209488:cgc_printf_core": null, "4210006:sub_403d56": null, "4210016:cgc_file_printer": "int cgc_file_printer(char v6, unsigned int a0[5])\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9[5];  // edi\n
    unsigned int v10;  // edi\n
    unsigned int v11[5];  // eax\n
    unsigned int v12;  // edi\n
    unsigned int v13[5];  // eax, Other Possible Types: unsigned int\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v9 = a0;\n
    v2 = v6;\n
    v13 = cgc_fwrite(&v2, 1, v9);\n
    if (v2 != 10)\n
        return v13;\n
    v13 = v9;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v9[1])\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v10 = v9[2];\n
        if (!v10)\n
            return v13;\n
        v15 = *((v13 + 12));\n
        if (!*((v13 + 12)))\n
        {\n
            return v13;\n
        }\n
        else if ([D] x86g_calculate_condition(0x8<32>, 0xf<32>, ebp<4>, 0x0<32>, 0x0<32>))\n
        {\n
            return v13;\n
        }\n
        else\n
        {\n
            v11 = a0;\n
            v1 = v11[0];\n
            v12 = v10 + v11[4];\n
            v14 = 0;\n
            do\n
            {\n
                v0 = &v3;\n
                v13 = cgc_transmit(v1, v12 + v14, v15);\n
                if (v13)\n
                    return v13;\n
                v13 = *(&v3);\n
                if (!v13)\n
                    return v13;\n
                v14 += v13;\n
                tmp_5 = v15;\n
                v15 -= v13;\n
            } while (tmp_5 != v13);\n
            v13 = a0;\n
            if (v14 < 0)\n
                return a0;\n
            *((v13 + 12)) = 0;\n
            *((v13 + 16)) = 0;\n
        }\n
    }\n
}\n
", "4210198:sub_403e16": null, "4210208:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_printf_core(cgc_stdout, a0);\n
}\n
", "4210257:sub_403e51": null, "4210272:cgc_vsnprintf": null, "4210727:sub_404027": null, "4210769:sub_404051": null, "4210824:sub_404088": null, "4210893:sub_4040cd": null, "4210896:cgc_vsprintf": "int cgc_vsprintf(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    return cgc_vsnprintf(v0, -1, a0, a1);\n
}\n
", "4210936:sub_4040f8": null, "4210944:cgc_fprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fprintf(unsigned int v1, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp+0xc]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v0 = &v2;\n
    return cgc_printf_core(v1, &v2);\n
}\n
", "4210996:sub_404134": null, "4211008:cgc_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_stdout;\n
\n
int cgc_printf(unsigned int v1)\n
{\n
    struct_0 *v0;  // [bp-0x8]\n
    char v2;  // [bp+0x8]\n
\n
    v0 = &v2;\n
    return cgc_printf_core(cgc_stdout, &v2);\n
}\n
", "4211062:sub_404176": null, "4211072:cgc_snprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_snprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp+0x10]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v0 = &v2;\n
    return cgc_vsnprintf(v1, a0, a1, &v2);\n
}\n
", "4211121:sub_4041b1": null, "4211136:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_sprintf(unsigned int v1, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x8]\n
    char v2;  // [bp+0xc]\n
\n
    v0 = &v2;\n
    return cgc_vsnprintf(v1, -1, a0, &v2);\n
}\n
", "4211183:sub_4041ef": null, "4211184:cgc_srand": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* g_40c26c;\n
extern unsigned int rand_seed;\n
\n
int cgc_srand(unsigned int v0)\n
{\n
    rand_seed = v0;\n
    g_40c26c = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4211217:sub_404211": null, "4211232:cgc_rand": "extern unsigned int g_40c26c;\n
extern unsigned int rand_seed;\n
\n
int cgc_rand()\n
{\n
    int tmp_27;  // tmp #27\n
    unsigned int v1;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = rand_seed * 1284865837;\n
    tmp_27 = v1;\n
    v3 = g_40c26c * 1284865837 + rand_seed * 1481765933 + (rand_seed * 1284865837 >> 32) + 335903614 + (tmp_27 - 144211633 < tmp_27);\n
    rand_seed = v1 - 144211633;\n
    g_40c26c = v3;\n
    return g_40c26c;\n
}\n
", "4211309:sub_40426d": null, "4211312:cgc_get_flag_byte": "typedef struct struct_0 {\n
    char padding_0[1128775680];\n
    struct struct_0 *field_4347c000;\n
} struct_0;\n
\n
int cgc_get_flag_byte(unsigned int v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = 1023 & v0;\n
    *(&v1) = *((v1 * 4 + 0x4347c000));\n
    return v1;\n
}\n
", "4211329:sub_404281": null, "4211344:cgc_get_flag_byte_unsafe": "typedef struct struct_0 {\n
    char padding_0[1128775680];\n
    struct struct_0 *field_4347c000;\n
} struct_0;\n
\n
int cgc_get_flag_byte_unsafe(unsigned int v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = 4095 & v0;\n
    *(&v1) = v1->field_4347c000;\n
    return v1;\n
}\n
", "4211360:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ebp\n
    char *v2;  // eax\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!a1)\n
        return v0;\n
    v5 = a0;\n
    v3 = v1 - 1;\n
    if (!(v1 & 7))\n
    {\n
        v6 = v2;\n
        if (v3 < 7)\n
            return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v2[v4] = *((v5 + v4));\n
            v4 += 1;\n
        } while ((v1 & 7) != v4);\n
        v5 += v4;\n
        v6 = &v2[v4];\n
        v1 -= v4;\n
        if (v3 < 7)\n
            return v0;\n
    }\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = *((v5 + v7));\n
        *((v6 + v7 + 1)) = *((v5 + v7 + 1));\n
        *((v6 + v7 + 2)) = *((v5 + v7 + 2));\n
        *((v6 + v7 + 3)) = *((v5 + v7 + 3));\n
        *((v6 + v7 + 4)) = *((v5 + v7 + 4));\n
        *((v6 + v7 + 5)) = *((v5 + v7 + 5));\n
        *((v6 + v7 + 6)) = *((v5 + v7 + 6));\n
        *((v6 + v7 + 7)) = *((v5 + v7 + 7));\n
        v7 += 8;\n
    } while (v1 != v7);\n
    return v0;\n
}\n
", "4211538:sub_404352": null, "4211552:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_7;  // tmp #7\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char *v3;  // edx\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edi\n
    char *v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // esi\n
    char *v11;  // edi\n
    unsigned int v12;  // edx\n
\n
    v1 = a1;\n
    v2 = v0;\n
    v3 = v1 - 1;\n
    if (v1 < 1)\n
        return v0;\n
    v9 = a0;\n
    if (v2 >= v9)\n
    {\n
        v5 = v3;\n
        v7 = v1 & 3;\n
        if (v7)\n
        {\n
            v5 = v3;\n
            do\n
            {\n
                v2[v5] = *((v9 + v5));\n
                v5 -= 1;\n
                tmp_7 = v7;\n
                v7 -= 1;\n
            } while (tmp_7 != 1);\n
        }\n
        if (v3 < 3)\n
            return v0;\n
        do\n
        {\n
            v2[v5] = *((v9 + v5));\n
            v2[1 + v5] = *((v9 + v5 - 1));\n
            v2[2 + v5] = *((v9 + v5 - 2));\n
            v2[3 + v5] = *((v9 + v5 - 3));\n
            v5 -= 4;\n
        } while (v5 != -1);\n
    }\n
    else\n
    {\n
        v4 = v1 & 7;\n
        if (!v4)\n
        {\n
            v8 = v3;\n
            v10 = v2;\n
            if (v3 < 7)\n
                return v0;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                v2[v6] = *((v9 + v6));\n
                v6 += 1;\n
            } while (v4 != v6);\n
            v8 = &v3[-1 * v6];\n
            v9 += v6;\n
            v10 = &v2[v6];\n
            if (v3 < 7)\n
                return v0;\n
        }\n
        v11 = v8 + 1;\n
        v12 = 0;\n
        do\n
        {\n
            *((v10 + v12)) = *((v9 + v12));\n
            *((v10 + v12 + 1)) = *((v9 + v12 + 1));\n
            *((v10 + v12 + 2)) = *((v9 + v12 + 2));\n
            *((v10 + v12 + 3)) = *((v9 + v12 + 3));\n
            *((v10 + v12 + 4)) = *((v9 + v12 + 4));\n
            *((v10 + v12 + 5)) = *((v9 + v12 + 5));\n
            *((v10 + v12 + 6)) = *((v9 + v12 + 6));\n
            *((v10 + v12 + 7)) = *((v9 + v12 + 7));\n
            v12 += 8;\n
        } while (v11 != v12);\n
        return v0;\n
    }\n
}\n
", "4211842:sub_404482": null, "4211856:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // ebx\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 - 1;\n
    if (!(v1 & 7))\n
    {\n
        v6 = v2;\n
        if (v4 < 7)\n
            return v0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v5 += 1;\n
        } while ((v1 & 7) != v5);\n
        v6 = &v2[v5];\n
        v1 -= v5;\n
        if (v4 < 7)\n
            return v0;\n
    }\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        *((v6 + v7 + 1)) = v3;\n
        *((v6 + v7 + 2)) = v3;\n
        *((v6 + v7 + 3)) = v3;\n
        *((v6 + v7 + 4)) = v3;\n
        *((v6 + v7 + 5)) = v3;\n
        *((v6 + v7 + 6)) = v3;\n
        *((v6 + v7 + 7)) = v3;\n
        v7 += 8;\n
    } while (v1 != v7);\n
    return v0;\n
}\n
", "4211962:sub_4044fa": null, "4211968:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212000:cgc_strnlen": "int cgc_strnlen(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (!*((v0 + v2)))\n
            return v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return v1;\n
    }\n
}\n
", "4212035:sub_404543": null, "4212048:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        do\n
        {\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4212101:sub_404585": null, "4212112:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            if (!v3)\n
                break;\n
            v2[v5] = v3;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4212250:sub_40461a": null, "4212256:cgc_strcat": "int cgc_strcat(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    void* v3;  // edi, Other Possible Types: unsigned int\n
    char v4;  // cc_dep1\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    char v7;  // bl\n
    char *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v8 = 0;\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v5 = v3 + 1;\n
            v4 = v2[1 + v3];\n
            v3 = v5;\n
        } while (v4);\n
    }\n
    v6 = &v2[v5];\n
    v7 = *(v1);\n
    if (*(v1))\n
    {\n
        v8 = 0;\n
        do\n
        {\n
            *((v6 + v8)) = v7;\n
            v7 = v1[1 + v8];\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    *((v6 + v8)) = 0;\n
    return v0;\n
}\n
", "4212343:sub_404677": null, "4212352:cgc_strncat": "int cgc_strncat(char *v0, unsigned int a0, char *a1)\n
{\n
    int tmp_6;  // tmp #6\n
    char *v1;  // ebp, Other Possible Types: unsigned int\n
    char *v2;  // esi\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
    char v4;  // cc_dep1\n
    void* v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edx\n
    char v8;  // cl\n
    char *v9;  // ecx\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // esi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    v7 = 0;\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v5 = v3 + 1;\n
            v4 = v2[1 + v3];\n
            v3 = v5;\n
        } while (v4);\n
    }\n
    v6 = &v2[v5];\n
    if (v1)\n
    {\n
        v7 = 0;\n
        while (true)\n
        {\n
            v8 = *((a0 + v7));\n
            if (!v8)\n
                break;\n
            *((v6 + v7)) = v8;\n
            v7 += 1;\n
            if (v1 == v7)\n
                goto LABEL_404727;\n
        }\n
    }\n
    if (v7 >= v1)\n
    {\n
LABEL_404727:\n
        *((v6 + v1)) = 0;\n
        return v6;\n
    }\n
    v9 = v1;\n
    v10 = &v1[-1 * v7];\n
    v11 = &v9[~(v7)];\n
    if ((v10 & 7))\n
    {\n
        do\n
        {\n
            *((v6 + v7)) = 0;\n
            v7 += 1;\n
            tmp_6 = v10;\n
            v10 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    v1 = a1;\n
    if (v11 >= 7)\n
    {\n
        v12 = &v2[v5 + 7];\n
        do\n
        {\n
            *((v12 + v7 - 7)) = 0;\n
            *((v12 + v7 - 3)) = 0;\n
            v7 += 8;\n
        } while (v1 != v7);\n
    }\n
}\n
", "4212528:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4212591:sub_40476f": null, "4212592:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (!(v5 == v3))\n
                break;\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
            if (!v5)\n
                goto LABEL_4047a8;\n
        }\n
    }\n
LABEL_4047a8:\n
    v5 = 0;\n
    v6 = *(v1);\n
    return v5 - v6;\n
}\n
", "4212660:sub_4047b4": null, "4212672:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_11;  // tmp #11\n
    int tmp_8;  // tmp #8\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // edx\n
    char *v4;  // esi\n
    char *v5;  // edi\n
    char v6;  // bl\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = a1;\n
    tmp_11 = v3;\n
    v7 = v3 - 1;\n
    if (tmp_11 != 1)\n
    {\n
        v4 = &v2[v7];\n
        v5 = &v1[v7];\n
        while (true)\n
        {\n
            v6 = *(v2);\n
            if (!v6)\n
                break;\n
            if (!*(v1))\n
                break;\n
            if (v6 != *(v1))\n
                break;\n
            v2 += 1;\n
            v1 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
            {\n
                v2 = v4;\n
                v1 = v5;\n
                break;\n
            }\n
        }\n
    }\n
    v8 = *(v2);\n
    v9 = *(v1);\n
    return v8 - v9;\n
}\n
", "4212748:sub_40480c": null, "4212752:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v1 -= 1;\n
        v2 += 1;\n
        if (!v1)\n
            return 0;\n
    }\n
}\n
", "4212804:sub_404844": null, "4212816:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    char v1[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v2;  // dl, Other Possible Types: char\n
\n
    v1 = v0;\n
    v2 = v1[0];\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (a0 == v2)\n
            return v1;\n
        v2 = *((v1 + 1));\n
        v1 += 1;\n
        if (!v2)\n
            return 0;\n
    }\n
}\n
", "4212874:sub_40488a": null, "4212880:cgc_strpbrk": "int cgc_strpbrk(char v0[2], char *a0)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_5;  // tmp #5\n
    char v1[2];  // ecx\n
    char *v3;  // esi\n
    char *v6;  // edi, Other Possible Types: unsigned int\n
    char v7;  // bl\n
    char v8;  // dl\n
    char *v9;  // ecx\n
    char *v10;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    v3 = a0;\n
    if (*(v3))\n
    {\n
        do\n
        {\n
            v6 = v3 + 1;\n
            v7 = *(v3);\n
            do\n
            {\n
                if (v1[0] == v7)\n
                    return v1;\n
                v7 = *(v6);\n
                v6 += 1;\n
            } while (v7);\n
            tmp_9 = v1[1];\n
            v8 = v1[1];\n
            v9 = &v1[1];\n
        } while (tmp_9);\n
        return 0;\n
    }\n
    else\n
    {\n
        v10 = &v1[1];\n
        do\n
        {\n
            tmp_5 = *(v10);\n
            v10 += 1;\n
        } while (tmp_5);\n
        return 0;\n
    }\n
}\n
", "4212972:sub_4048ec": null, "4212976:cgc_strrchr": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
int cgc_strrchr(char v0[4294967296], unsigned int a0)\n
{\n
    char v1[4294967296];  // ecx\n
    char v2[4294967296];  // eax, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
    unsigned int v4;  // esi\n
    struct_0 *v5;  // ecx, Other Possible Types: unsigned int\n
    char v6;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
    {\n
        v4 = -1;\n
        v6 = v1[-1];\n
        if (!v1[-1])\n
            return 0;\n
    }\n
    else\n
    {\n
        v2 = -1;\n
        do\n
        {\n
            v4 = v2 + 1;\n
            v3 = v1[2 + v2];\n
            v2 = v4;\n
        } while (v3);\n
        v6 = v1[v4];\n
        if (!v1[v4])\n
            return 0;\n
    }\n
    v5 = &v1[v4];\n
    while (true)\n
    {\n
        if (a0 == v6)\n
            return v5;\n
        v6 = *((v5 - 1));\n
        v5 -= 1;\n
        if (!v6)\n
            return 0;\n
    }\n
}\n
", "4213065:sub_404949": null, "4213072:cgc_strstr": "int cgc_strstr(char v1[2], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    unsigned int v2;  // eax\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4[2];  // esi, Other Possible Types: unsigned int\n
    char v5[3];  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    char v7;  // bl\n
    char v9[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // eax\n
    char v12;  // dl\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v9 = v1;\n
    if (!*(v3))\n
    {\n
        v7 = v9[0];\n
        if (!v9[0])\n
            return 0;\n
        v5 = v3 + 1;\n
        v6 = -1;\n
    }\n
    else\n
    {\n
        v5 = v3 + 1;\n
        v4 = 1;\n
        do\n
        {\n
            v4 -= 1;\n
            tmp_10 = *((v5 + 2));\n
            v5 += 1;\n
        } while (tmp_10);\n
        v7 = v9[0];\n
        if (!v9[0])\n
            return 0;\n
        if (v4)\n
        {\n
            v6 = -(v4);\n
        }\n
        else\n
        {\n
            while (v7 != *(v3))\n
            {\n
                v7 = *((v9 + 1));\n
                v9 += 1;\n
                if (!v7)\n
                    return 0;\n
            }\n
            goto LABEL_404a3c;\n
        }\n
    }\n
    v0 = v6 - 1;\n
    do\n
    {\n
        v10 = 0;\n
        if (!v7 && !(0 == *(v3)))\n
            continue;\n
        do\n
        {\n
            v11 = v3;\n
            v12 = *((v3 + v10));\n
            if (!v12)\n
            {\n
LABEL_404a20:\n
                v3 = v11;\n
                if (!(v7 == *((v10 + v11))))\n
                    goto LABEL_4049d9;\n
                goto LABEL_404a3c;\n
            }\n
            if (!(v7 == v12))\n
                goto LABEL_404a20;\n
            if (v0 == v10)\n
            {\n
                v3 = v11;\n
                if (!(v9[v6] == *(v5)))\n
                    goto LABEL_4049d9;\n
                goto LABEL_404a3c;\n
            }\n
            v7 = v9[1 + v10];\n
            v10 += 1;\n
            v3 = v11;\n
        } while (v7);\n
        if (0 == *((v10 + v11)))\n
            goto LABEL_404a3c;\n
LABEL_4049d9:\n
        tmp_9 = *((v9 + 1));\n
        v7 = *((v9 + 1));\n
        v9 += 1;\n
    } while (tmp_9);\n
LABEL_404a3c:\n
    return v9;\n
}\n
", "4213186:sub_4049c2": null, "4213276:sub_404a1c": null, "4213291:sub_404a2b": null, "4213324:sub_404a4c": null, "4213328:cgc_strcspn": "int cgc_strcspn(char v0[2], char *a0)\n
{\n
    int tmp_5;  // tmp #5\n
    char v1[2];  // ecx\n
    char *v3;  // esi\n
    char v6[2];  // eax\n
    char v7;  // bl\n
    char *v8;  // edi, Other Possible Types: unsigned int\n
    char v9;  // dl\n
    char *v10;  // eax\n
    char *v11;  // eax, Other Possible Types: unsigned int\n
    void* v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    char v14;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    v3 = a0;\n
    if (*(v3))\n
    {\n
        v6 = v1;\n
        do\n
        {\n
            v8 = v3 + 1;\n
            v7 = *(v3);\n
            do\n
            {\n
                if (v1[0] == v7)\n
                    return v6 - v1;\n
                v7 = *(v8);\n
                v8 += 1;\n
            } while (v7);\n
            v9 = v6[1];\n
            v10 = &v6[1];\n
        } while (v1[1]);\n
    }\n
    else\n
    {\n
        v11 = &v1[1];\n
        do\n
        {\n
            tmp_5 = *(v11);\n
            v11 += 1;\n
        } while (tmp_5);\n
    }\n
    v12 = 0;\n
    do\n
    {\n
        v13 = v12 + 1;\n
        v14 = v1[1 + v12];\n
        v12 = v13;\n
    } while (v14);\n
    return v13;\n
}\n
", "4213438:sub_404abe": null, "4213440:cgc_strspn": "int cgc_strspn(char *v0, char *a0)\n
{\n
    int tmp_19;  // tmp #19\n
    char *v1;  // eax\n
    char *v3;  // edx\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    char v7;  // bl\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v1 = v0;\n
    tmp_19 = *(v1);\n
    if (!tmp_19)\n
        return 0;\n
    v3 = a0;\n
    if (!*(v3))\n
        return 0;\n
    v9 = 0;\n
    while (true)\n
    {\n
        v6 = v3 + 1;\n
        v7 = *(v3);\n
        while (*(v1) != v7)\n
        {\n
            v7 = *(v6);\n
            v6 += 1;\n
            if (!v7)\n
                return v9;\n
        }\n
        v8 = v9 + 1;\n
    }\n
}\n
", "4213512:sub_404b08": null, "4213520:cgc_strtok": "extern struct_1 *cgc_strtok.last;\n
\n
int cgc_strtok(char v0[2], struct struct_0 **a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // esi\n
    char v2[2];  // edx, Other Possible Types: unsigned int\n
    char v4;  // cc_dep1\n
    struct struct_0 **v5;  // ebp\n
    void* v6;  // eax, Other Possible Types: unsigned int, char *\n
    char v7;  // cc_dep1\n
    char v8;  // bl\n
    struct struct_0 **v9;  // edi, Other Possible Types: unsigned int\n
    char *v10;  // bh, Other Possible Types: char\n
    char v11;  // bl\n
    char v12[2];  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_strtok.last;\n
    if (!v1)\n
    {\n
        if (!cgc_strtok.last)\n
        {\n
            return 0;\n
        }\n
        else if (!cgc_strtok.last->field_0)\n
        {\n
            return 0;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                v4 = (&cgc_strtok.last->field_1)[v6];\n
                v6 += 1;\n
            } while (v4);\n
            if (!v6)\n
                return 0;\n
        }\n
    }\n
    v5 = a0;\n
    if (cgc_strtok.last)\n
    {\n
        v8 = cgc_strtok.last->field_0;\n
        if (cgc_strtok.last->field_0)\n
        {\n
            v6 = 1;\n
            do\n
            {\n
                v7 = (&cgc_strtok.last->field_0)[v6];\n
                v6 += 1;\n
            } while (v7);\n
            if (!(v6 == 1))\n
                goto LABEL_404b68;\n
        }\n
    }\n
    cgc_strtok.last = &v1[0];\n
    v8 = v1[0];\n
    v2 = v1;\n
LABEL_404b68:\n
    *(&v6) = *(v5);\n
    if (!*(v5))\n
        if (!v8)\n
            goto LABEL_0x404c18;\n
        else\n
            goto LABEL_0x404c0a;\n
LABEL_404b8e:\n
    v9 = v5 + 1;\n
    v10 = v6;\n
    do\n
    {\n
        if (v8 == v10)\n
        {\n
            cgc_strtok.last = v2 + 1;\n
            v11 = *((v2 + 1));\n
            v12 = cgc_strtok.last;\n
            goto LABEL_404b8e;\n
        }\n
        tmp_7 = *(v9);\n
        v10 = *(v9);\n
        v9 += 1;\n
    } while (tmp_7);\n
    if (!v8)\n
        goto LABEL_0x404c18;\n
    else\n
        goto LABEL_0x404bb1;\n
}\n
", "4213624:sub_404b78": null, "4213815:sub_404c37": null, "4213824:cgc_seed_ai": "int cgc_seed_ai(unsigned int *v0)\n
{\n
    *(v0) = *(0x4347c000);\n
    return v0;\n
}\n
", "4213837:sub_404c4d": null, "4213840:cgc_init_bitboard": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[12];\n
    char field_e;\n
    char padding_f[1];\n
    char field_10;\n
    char padding_11[11];\n
    unsigned int field_1c;\n
    char field_20;\n
    char padding_21[11];\n
    unsigned int field_2c;\n
    char field_30;\n
    char padding_31[11];\n
    unsigned int field_3c;\n
    char field_40;\n
    char padding_41[14];\n
    char field_4f;\n
    char field_50;\n
    char padding_51[14];\n
    char field_5f;\n
    unsigned int field_60;\n
    unsigned int field_64;\n
    unsigned int field_68;\n
    unsigned int field_6c;\n
    unsigned int field_70;\n
    unsigned int field_74;\n
} struct_0;\n
\n
int cgc_init_bitboard(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v5 = v2;\n
    cgc_memset(v5, 0, 124);\n
    v5->field_68 = 1;\n
    v5->field_60 = 1;\n
    v5->field_6c = 1;\n
    v5->field_64 = 1;\n
    v5->field_74 = -1;\n
    v5->field_70 = -1;\n
    v5->field_40 = v5->field_40 | 8;\n
    v5->field_50 = v5->field_50 | 16;\n
    v5->field_30 = v5->field_30 | 36;\n
    v5->field_20 = v5->field_20 | 66;\n
    v5->field_10 = v5->field_10 | 129;\n
    v5->field_1 = 255;\n
    v5->field_4f = v5->field_4f | 8;\n
    v6 = 0x24000000 | v5->field_3c;\n
    v7 = 0x42000000 | v5->field_2c;\n
    v5->field_1c = v5->field_1c | 0x81000000;\n
    v5->field_5f = v5->field_5f | 16;\n
    v5->field_3c = v6;\n
    v5->field_2c = v7;\n
    v5->field_e = 255;\n
    return v6;\n
}\n
", "4213988:sub_404ce4": null, "4214000:cgc_set_piece": "int cgc_set_piece(unsigned int *v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int *a3)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v3;  // edx\n
    char v4;  // cl\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // edx\n
    unsigned int *v7;  // ecx\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    if (v1 > 7)\n
        return -1;\n
    v3 = a0;\n
    if (v3 > 7)\n
    {\n
        return -1;\n
    }\n
    else if ((v1 | v3) < 0)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v4 = v1 + v3 * 8;\n
        v5 = (0 CONCAT 1) << (v4 & 31) >> 32;\n
        v6 = 1 << (v4 & 31);\n
        if ((v4 & 32))\n
            v5 = v6;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v6 = 0;\n
        v7 = a3 * 2 | a2;\n
        v8 = v0;\n
        *((v8 + v7 * 8)) = *((v8 + v7 * 8)) | v6;\n
        *((v8 + v7 * 8 + 4)) = *((v8 + v7 * 8 + 4)) | v5;\n
        return 0;\n
    }\n
}\n
", "4214081:sub_404d41": null, "4214096:cgc_print_bitboard": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_bitboard(unsigned int v13[24], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // ebp\n
    unsigned int v19;  // esi\n
    void* v20;  // esi, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    unsigned int v22[24];  // ecx, Other Possible Types: unsigned int, char\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // ebp\n
    unsigned int v26[24];  // edx\n
    unsigned int v27[24];  // edx\n
    unsigned int v28;  // edx\n
    unsigned int v29[24];  // edx\n
    unsigned int v30;  // edx\n
    unsigned int v31[24];  // edx\n
    unsigned int v32;  // edx\n
    unsigned int v33[24];  // edx\n
    unsigned int v34;  // edx\n
    unsigned int v35[24];  // edx\n
    unsigned int v36;  // edx\n
    unsigned int v37[24];  // edx\n
    unsigned int v38;  // edx\n
    unsigned int v39[24];  // edx\n
    unsigned int v40;  // edx\n
    unsigned int v41[24];  // edx\n
    unsigned int v42;  // edx\n
    unsigned int v43[24];  // edx\n
    unsigned int v44;  // edx\n
    unsigned int v45[24];  // edx\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // ebp\n
    unsigned int v48;  // ebx\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // eax\n
    unsigned int v52;  // edx\n
    char v53;  // ebp\n
    void* v54;  // eax, Other Possible Types: unsigned int\n
    char *v55;  // ebp, Other Possible Types: unsigned int\n
\n
    v12 = v14;\n
    v15 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = !a0;\n
    v6 = a0;\n
    v54 = 0;\n
    v8 = \"%d \";\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v16 = 7 - v54;\n
        v9 = v54;\n
        if (!a0)\n
            v16 = v54;\n
        v0 = 8 - v16;\n
        cgc_printf(v8);\n
        v17 = 7 - v16;\n
        v22 = v16 - ((v16 >> 31) + v16 & -2);\n
        if (v17 > 7)\n
        {\n
            v3 = v22 + v6;\n
            v18 = v22;\n
            v19 = v15 - 11556;\n
            v1 = v15 - 11632;\n
            v0 = *((v15 + (v3 - (((v3 >> 7) + v3) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v22 += v7;\n
            v4 = v22;\n
            v1 = v1;\n
            v0 = *((v15 + (v4 - (((v4 >> 7) + v4) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v52 = v3;\n
            v53 = v52;\n
            v1 = v1;\n
            v0 = *((v15 + (v52 - ((v52 >> 7) + v52 & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v1 = v1;\n
            v0 = *((v15 + (v4 - (((v4 >> 7) + v4) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v1 = v1;\n
            v0 = *((v15 + (v53 - (((*(&v53) >> 7) + *(&v53)) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v1 = v1;\n
            v0 = *((v15 + (v4 - (((v4 >> 7) + v4) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v1 = v1;\n
            v0 = *((v15 + (v53 - (((*(&v53) >> 7) + *(&v53)) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
            v1 = v1;\n
            v0 = *((v15 + (v4 - (((v4 >> 7) + v4) & 254)) * 8 - 384));\n
            cgc_printf(v19);\n
        }\n
        else\n
        {\n
            v4 = v22;\n
            v10 = v17 * 8;\n
            v20 = 0;\n
            v21 = 7;\n
            v11 = v17;\n
            do\n
            {\n
                v23 = (!a0 ? v21 : v20);\n
                if ((v23 | v17) < 0)\n
                {\n
LABEL_405170:\n
                    v51 = v23 - (((v23 & 1) + v4 >> 7) + v23 & 254);\n
                    v15 = v5;\n
                    v50 = v15 - 11556;\n
                    v1 = v15 - 11632;\n
                    v0 = *((v15 + v51 * 8 - 384));\n
                }\n
                else\n
                {\n
                    v22 = v10 + v23;\n
                    v24 = (0 CONCAT 1) << (v22 & 31) >> 32;\n
                    v25 = 1 << (v22 & 31);\n
                    if ((v22 & 32))\n
                        v24 = v25;\n
                    v3 = 0;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v25 = 0;\n
                    v26 = v13;\n
                    if (!(v26[0] & v25) && !(v26[1] & v24))\n
                    {\n
                        v27 = v13;\n
                        v22 = v27[2] & v25;\n
                        v28 = v27[3] & v24;\n
                        v3 = 1;\n
                        if (!v28 && !v22)\n
                        {\n
                            v29 = v13;\n
                            v22 = v29[4] & v25;\n
                            v30 = v29[5] & v24;\n
                            v3 = 2;\n
                            if (!v30 && !v22)\n
                            {\n
                                v31 = v13;\n
                                v22 = v31[6] & v25;\n
                                v32 = v31[7] & v24;\n
                                v3 = 3;\n
                                if (!v32 && !v22)\n
                                {\n
                                    v33 = v13;\n
                                    v22 = v33[8] & v25;\n
                                    v34 = v33[9] & v24;\n
                                    v3 = 4;\n
                                    if (!v34 && !v22)\n
                                    {\n
                                        v35 = v13;\n
                                        v22 = v35[10] & v25;\n
                                        v36 = v35[11] & v24;\n
                                        v3 = 5;\n
                                        if (!v36 && !v22)\n
                                        {\n
                                            v37 = v13;\n
                                            v22 = v37[12] & v25;\n
                                            v38 = v37[13] & v24;\n
                                            v3 = 6;\n
                                            if (!v38 && !v22)\n
                                            {\n
                                                v39 = v13;\n
                                                v22 = v39[14] & v25;\n
                                                v40 = v39[15] & v24;\n
                                                v3 = 7;\n
                                                if (!v40 && !v22)\n
                                                {\n
                                                    v41 = v13;\n
                                                    v22 = v41[16] & v25;\n
                                                    v42 = v41[17] & v24;\n
                                                    v3 = 8;\n
                                                    if (!v42 && !v22)\n
                                                    {\n
                                                        v43 = v13;\n
                                                        v22 = v43[18] & v25;\n
                                                        v44 = v43[19] & v24;\n
                                                        v3 = 9;\n
                                                        if (!v44 && !v22)\n
                                                        {\n
                                                            v45 = v13;\n
                                                            v22 = v45[20] & v25;\n
                                                            v46 = v45[21] & v24;\n
                                                            v3 = 10;\n
                                                            if (!v46 && !v22)\n
                                                            {\n
                                                                v22 = v13;\n
                                                                v47 = v25 & v22[22];\n
                                                                v48 = v24 & v22[23];\n
                                                                v3 = 11;\n
                                                                if (!v48 && !v47)\n
                                                                    goto LABEL_405170;\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                    v49 = (v3 & 1) + (v23 - (((v23 & 1) + v4 >> 7) + v23 & 254)) * 2;\n
                    v15 = v5;\n
                    v50 = v15 - 11563;\n
                    v2 = v15 - 11632;\n
                    v1 = *((v15 + v3 * 4 - 368));\n
                    v0 = *((v15 + v49 * 4 - 384));\n
                    continue;\n
                }\n
                cgc_printf(v50);\n
                v20 += 1;\n
                v21 -= 1;\n
                v17 = v11;\n
            } while (v20 != 8);\n
        }\n
        cgc_printf(v15 - 11382);\n
        v54 = v9 + 1;\n
    } while (v54 != 8);\n
    cgc_printf(v15 - 11549);\n
    v22 = (!v22 ? 7 : a0);\n
    *(&v54) = *((v15 + v22 - 11546));\n
    v3 = -(0 < v22) | 1;\n
    v55 = v15 + v22 + v3 - 11546;\n
    do\n
    {\n
        v0 = v54;\n
        cgc_printf(v15 - 11537);\n
        v54 = *(v55);\n
        v55 += v3;\n
    } while (v54);\n
    return cgc_printf(v15 - 11382);\n
}\n
", "4214159:sub_404d8f": null, "4214629:sub_404f65": null, "4215325:sub_40521d": null, "4215328:cgc_get_piece": "int cgc_get_piece(unsigned int v0[24], unsigned int a0, unsigned int a1, unsigned int a2[2])\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v3;  // edx\n
    char v4;  // cl\n
    unsigned int v5;  // cc_dep1\n
    unsigned int v6;  // edx\n
    unsigned int v7[24];  // ecx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // edx\n
    unsigned int v12[2];  // ecx\n
\n
    v1 = a1;\n
    if (v1 > 7)\n
        return -1;\n
    v3 = a0;\n
    if (v3 > 7)\n
    {\n
        return -1;\n
    }\n
    else if ((v1 | v3) < 0)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v4 = v1 + v3 * 8;\n
        v6 = (0 CONCAT 1) << (v4 & 31) >> 32;\n
        v8 = 1 << (v4 & 31);\n
        v9 = 0;\n
        v5 = v4 & 32;\n
        if ((v4 & 32))\n
            v6 = v8;\n
        v7 = v0;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
            v8 = 0;\n
        if (!(v7[0] & v8) && !(v7[1] & v6))\n
        {\n
            v9 = 1;\n
            if (!(v7[3] & v6) && !(v7[2] & v8))\n
            {\n
                v9 = 2;\n
                if (!(v7[5] & v6) && !(v7[4] & v8))\n
                {\n
                    v9 = 3;\n
                    if (!(v7[7] & v6) && !(v7[6] & v8))\n
                    {\n
                        v9 = 4;\n
                        if (!(v7[9] & v6) && !(v7[8] & v8))\n
                        {\n
                            v9 = 5;\n
                            if (!(v7[11] & v6) && !(v7[10] & v8))\n
                            {\n
                                v9 = 6;\n
                                if (!(v7[13] & v6) && !(v7[12] & v8))\n
                                {\n
                                    v9 = 7;\n
                                    if (!(v7[15] & v6) && !(v7[14] & v8))\n
                                    {\n
                                        v9 = 8;\n
                                        if (!(v7[17] & v6) && !(v7[16] & v8))\n
                                        {\n
                                            v9 = 9;\n
                                            if (!(v7[19] & v6) && !(v7[18] & v8))\n
                                            {\n
                                                v9 = 10;\n
                                                if (!(v7[21] & v6) && !(v7[20] & v8))\n
                                                {\n
                                                    v10 = v8 & v7[22];\n
                                                    v11 = v6 & v7[23];\n
                                                    v9 = 11;\n
                                                    if (!v11 && !v10)\n
                                                        return 0;\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v12 = a2;\n
        v12[1] = v9 / 2;\n
        v12[0] = v9 & 1;\n
        return 1;\n
    }\n
}\n
", "4215671:sub_405377": null, "4215680:cgc_clear_piece": "int cgc_clear_piece(unsigned int v0[24], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v3;  // esi\n
    unsigned int v4[24];  // edx\n
    char v5;  // cl\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ecx\n
\n
    v1 = a1;\n
    if (v1 > 7)\n
        return -1;\n
    v3 = a0;\n
    if (v3 > 7)\n
    {\n
        return -1;\n
    }\n
    else if ((v1 | v3) < 0)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v4 = v0;\n
        v5 = v1 + v3 * 8;\n
        v6 = (0 CONCAT 1) << (v5 & 31) >> 32;\n
        v7 = 1 << (v5 & 31);\n
        if ((v5 & 32))\n
            v6 = v7;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v7 = 0;\n
        v8 = ~(v7);\n
        v4[0] = v4[0] & v8;\n
        v9 = ~(v6);\n
        v4[1] = v4[1] & v9;\n
        v4[2] = v4[2] & v8;\n
        v4[3] = v4[3] & v9;\n
        v4[4] = v4[4] & v8;\n
        v4[5] = v4[5] & v9;\n
        v4[6] = v4[6] & v8;\n
        v4[7] = v4[7] & v9;\n
        v4[8] = v4[8] & v8;\n
        v4[9] = v4[9] & v9;\n
        v4[10] = v4[10] & v8;\n
        v4[11] = v4[11] & v9;\n
        v4[12] = v4[12] & v8;\n
        v4[13] = v4[13] & v9;\n
        v4[14] = v4[14] & v8;\n
        v4[15] = v4[15] & v9;\n
        v4[16] = v4[16] & v8;\n
        v4[17] = v4[17] & v9;\n
        v10 = v4[18] & v8;\n
        v4[19] = v4[19] & v9;\n
        v4[18] = v10;\n
        v4[21] = v4[21] & v9;\n
        v4[20] = v4[20] & v8;\n
        v4[23] = v4[23] & v9;\n
        v4[22] = v4[22] & v8;\n
        return 0;\n
    }\n
}\n
", "4215824:cgc_make_move": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    struct struct_1 *field_28;\n
    unsigned int field_2c;\n
    struct struct_1 *field_30;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
    unsigned int field_5c;\n
    char padding_60[16];\n
    unsigned int field_70;\n
    unsigned int field_74;\n
    unsigned int field_78;\n
} struct_1;\n
\n
int cgc_make_move(unsigned int v12[31], struct_0 *a0)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_9;  // tmp #9\n
    int tmp_1;  // tmp #1\n
    int tmp_0;  // tmp #0\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1[31];  // [bp-0x44], Other Possible Types: unsigned int\n
    unsigned int v2[31];  // [bp-0x38]\n
    unsigned int v3[31];  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x30]\n
    void* v5;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7[2];  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x20], Other Possible Types: char\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    struct_0 *v13;  // edi, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edi\n
    struct_0 *v17;  // eax\n
    unsigned int v18[31];  // edx, Other Possible Types: unsigned int\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    char v21;  // cl\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // edi\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // edi\n
    void* v26;  // eax\n
    struct_0 *v27;  // edi\n
    unsigned int v28[31];  // edx\n
    char v29;  // al\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // cc_dep1\n
    unsigned int v33[31];  // edx\n
    unsigned int v35;  // esi\n
    unsigned int v36;  // edx\n
    unsigned int v37;  // cc_dep1\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // cc_dep1\n
    unsigned int v41;  // ebp\n
    char v42;  // cl\n
    unsigned int v43;  // ebp\n
    unsigned int v44;  // eax\n
    unsigned int v46;  // ebp\n
    unsigned int v70[31];  // ebp, Other Possible Types: unsigned int\n
    char v71;  // al\n
    unsigned int v72;  // edx\n
    unsigned int v73;  // esi\n
    unsigned int v74;  // eax\n
    unsigned int v75;  // edx\n
    unsigned int v76;  // ebp\n
    unsigned int v77;  // eax\n
    unsigned int v79;  // ebp\n
    char v103;  // al\n
    unsigned int v104;  // edx\n
    unsigned int v105;  // esi\n
    unsigned int v106;  // eax\n
    struct_0 *v107;  // edi, Other Possible Types: unsigned int\n
    unsigned int v108;  // eax\n
    unsigned int v109;  // edx\n
    unsigned int v110;  // ecx\n
    unsigned int v111;  // edx\n
    unsigned int v112[31];  // eax\n
    unsigned int v113;  // ecx\n
    char v114;  // cl\n
    unsigned int v115;  // ecx\n
    char v116;  // cl\n
    unsigned int v117;  // edx\n
    unsigned int v118;  // edi\n
    unsigned int v119[31];  // eax\n
    unsigned int v120;  // ecx\n
    char v121;  // cl\n
    char v122;  // cl\n
    unsigned int v123;  // edx\n
    unsigned int v124;  // edi\n
    char v125;  // cl\n
    unsigned int v126;  // eax\n
    unsigned int v127;  // edi\n
    unsigned int v128;  // eax\n
    unsigned int v129[31];  // eax, Other Possible Types: unsigned int\n
    unsigned int v130;  // eax\n
    unsigned int v131;  // ecx\n
    unsigned int v132;  // eax\n
    unsigned int v133;  // ecx\n
    unsigned int v134;  // ebp\n
    unsigned int v136;  // eax\n
    unsigned int v137;  // eax\n
    unsigned int v138[31];  // eax\n
    unsigned int v139;  // eax\n
    unsigned int v141;  // edx\n
    unsigned int v143;  // ecx\n
    unsigned int v144;  // ebp\n
    void* v145;  // esi, Other Possible Types: unsigned int\n
    unsigned int v146;  // eax\n
    unsigned int v147;  // edx\n
    unsigned int v148;  // cc_dep1\n
    unsigned int v150[31];  // eax\n
    unsigned int v151[31];  // ecx\n
    void* v153;  // esi, Other Possible Types: unsigned int\n
    unsigned int v154;  // eax\n
    unsigned int v155;  // edx\n
    unsigned int v156;  // cc_dep1\n
    unsigned int v158[31];  // eax\n
    unsigned int v159[31];  // ecx\n
    void* v161;  // esi, Other Possible Types: unsigned int\n
    unsigned int v162;  // eax\n
    unsigned int v163;  // edx\n
    unsigned int v164;  // cc_dep1\n
    unsigned int v166[31];  // eax\n
    unsigned int v167[31];  // ecx\n
    void* v169;  // esi, Other Possible Types: unsigned int\n
    unsigned int v170;  // eax\n
    unsigned int v171;  // edx\n
    unsigned int v172;  // cc_dep1\n
    unsigned int v174[31];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v175[31];  // eax\n
    void* v176;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v177;  // eax\n
    unsigned int v178;  // edx\n
    unsigned int v179;  // cc_dep1\n
    unsigned int v180;  // eax\n
    unsigned int v182[31];  // eax\n
    unsigned int v183;  // ebp\n
    void* v184;  // esi, Other Possible Types: unsigned int\n
    unsigned int v185;  // eax\n
    unsigned int v186;  // edx\n
    unsigned int v187;  // cc_dep1\n
    unsigned int v189;  // eax\n
    unsigned int v190[31];  // eax\n
    void* v191;  // ecx\n
    unsigned int v192;  // edi\n
    unsigned int v193;  // esi\n
    unsigned int v194;  // eax\n
    unsigned int v195;  // ebp\n
    unsigned int v196;  // edx\n
    unsigned int v197;  // cc_dep1\n
    unsigned int v198;  // ebp\n
    unsigned int v199;  // edx\n
    unsigned int v200;  // cc_dep1\n
    unsigned int v201;  // ebp\n
    unsigned int v202;  // edx\n
    unsigned int v203;  // cc_dep1\n
    unsigned int v204;  // ebp\n
    unsigned int v205;  // edx\n
    unsigned int v206;  // cc_dep1\n
    unsigned int v207;  // edx\n
    unsigned int v208;  // esi\n
    void* v209;  // edx, Other Possible Types: unsigned int\n
    unsigned int v210[31];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v211;  // eax\n
    unsigned int v212;  // edi\n
    unsigned int v213;  // ebp\n
    void* v214;  // esi, Other Possible Types: unsigned int\n
    unsigned int v215[31];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v216;  // eax\n
    unsigned int v217;  // edx\n
    unsigned int v218;  // cc_dep1\n
    unsigned int v219;  // eax\n
    unsigned int v220;  // edx\n
    unsigned int v221[31];  // ecx, Other Possible Types: unsigned int\n
    void* v222;  // edx, Other Possible Types: unsigned int\n
    unsigned int v223[31];  // eax\n
    unsigned int v224;  // ecx\n
    unsigned int v225;  // edi\n
    unsigned int v226;  // ebp\n
    void* v227;  // esi, Other Possible Types: unsigned int\n
    unsigned int v228[31];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v229;  // eax\n
    unsigned int v230;  // edx\n
    unsigned int v231;  // cc_dep1\n
    unsigned int v232;  // eax\n
    unsigned int v233[31];  // ecx, Other Possible Types: unsigned int\n
\n
    v13 = a0;\n
    v14 = v13->field_24;\n
    if (v14 == -1)\n
    {\n
LABEL_4061cd:\n
        return -1;\n
    }\n
    v15 = v13->field_28;\n
    if (v15 == -1)\n
        goto LABEL_4061cd;\n
    if (v13->field_2c == -1)\n
        goto LABEL_4061cd;\n
    if (v13->field_30 == -1)\n
        goto LABEL_4061cd;\n
    v70 = v12;\n
    if (!(cgc_get_piece(v12, v14, v15, v7) == 1))\n
        goto LABEL_4061cd;\n
    v18 = v13->field_0;\n
    if (!(v18 == v7[0]))\n
        goto LABEL_4061cd;\n
    v19 = v13->field_4;\n
    if (!(v19 == *(&v8)))\n
        goto LABEL_4061cd;\n
    if (v13->field_18)\n
    {\n
        if (!(!v19))\n
            goto LABEL_4061cd;\n
        v16 = (v18 ? 7 : 0);\n
        tmp_2 = v16;\n
        v13 = a0;\n
        if (!(a0->field_2c == tmp_2))\n
            goto LABEL_4061cd;\n
        if (*((v13 + 8)) - 1 < 3)\n
            goto LABEL_4061cd;\n
    }\n
    else\n
    {\n
        if (!v13->field_1c && !v13->field_20)\n
            goto LABEL_4054dd;\n
        if (v19 == 5)\n
            goto LABEL_4061cd;\n
    }\n
LABEL_4054dd:\n
    v17 = v13;\n
    if (!*((v13 + 12)) && !*((v13 + 16)))\n
    {\n
        if (!*((v13 + 20)))\n
        {\n
LABEL_406181:\n
            v20 = *(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v19])(v70, v18, *((v13 + 36)));\n
            v21 = *((v13 + 44)) * 8 + *((v13 + 48));\n
            v22 = (0 CONCAT 1) << (v21 & 31) >> 32;\n
            v23 = 1 << (v21 & 31);\n
            if ((v21 & 32))\n
                v22 = v23;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v23 = 0;\n
            v24 = v22 & v18;\n
            v25 = v23 & v20;\n
            v26 = 0;\n
            tmp_9 = v25 | v24;\n
            v70 = v12;\n
            *(&v26) = tmp_9;\n
            if (!v26)\n
                goto LABEL_4061cd;\n
LABEL_40550d:\n
            v27 = a0;\n
            if (!v27->field_4)\n
            {\n
LABEL_40553a:\n
                *((v70 + 120)) = 0;\n
            }\n
            else\n
            {\n
                if (cgc_get_piece(v70, v27->field_2c, v27->field_30, v7) == 1 && !(v7[0] == v27->field_0))\n
                    goto LABEL_40553a;\n
                *((v70 + 120)) = *((v70 + 120)) + 1;\n
            }\n
            if (v27->field_c)\n
            {\n
                v2[0] = v27->field_0;\n
                v28 = (!v2 ? 56 : v2);\n
                v29 = v28;\n
                v3[0] = v28;\n
                tmp_1 = v28 | 4;\n
                v30 = (0 CONCAT 1) << ((v28 | 4) & 31) >> 32;\n
                v31 = 1 << ((v28 | 4) & 31);\n
                v32 = tmp_1 & 32;\n
                if ((tmp_1 & 32))\n
                    v30 = v31;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v31 = 0;\n
                tmp_0 = v29 | 7;\n
                v38 = (0 CONCAT 1) << ((v29 | 7) & 31) >> 32;\n
                v39 = 1 << ((v29 | 7) & 31);\n
                v40 = tmp_0 & 32;\n
                if ((tmp_0 & 32))\n
                    v38 = v39;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v39 = 0;\n
                v43 = v38 | v30;\n
                v44 = ~(v39 | v31);\n
                v12[0] = v12[0] & v44;\n
                v46 = ~(v43);\n
                v12[1] = v12[1] & v46;\n
                v12[2] = v12[2] & v44;\n
                v12[3] = v12[3] & v46;\n
                v12[4] = v12[4] & v44;\n
                v12[5] = v12[5] & v46;\n
                v12[6] = v12[6] & v44;\n
                v12[7] = v12[7] & v46;\n
                v12[8] = v12[8] & v44;\n
                v12[9] = v12[9] & v46;\n
                v12[10] = v12[10] & v44;\n
                v12[11] = v12[11] & v46;\n
                v12[12] = v12[12] & v44;\n
                v12[13] = v12[13] & v46;\n
                v12[14] = v12[14] & v44;\n
                v12[15] = v12[15] & v46;\n
                v12[16] = v12[16] & v44;\n
                v12[17] = v12[17] & v46;\n
                v12[18] = v12[18] & v44;\n
                v12[19] = v12[19] & v46;\n
                v12[20] = v12[20] & v44;\n
                v12[21] = v12[21] & v46;\n
                v12[22] = v12[22] & v44;\n
                v12[23] = v12[23] & v46;\n
                v70 = v12;\n
                v71 = v3;\n
                v72 = (0 CONCAT 1) << ((v29 | 6) & 31) >> 32;\n
                v73 = 1 << ((v29 | 6) & 31);\n
                if (((v29 | 6) & 32))\n
                    v72 = v73;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v73 = 0;\n
                v112 = v2 * 8;\n
                v113 = v112 | 80;\n
                *((v70 + v113 + 4)) = *((v70 + v113 + 4)) | v72;\n
                *((v70 + v113)) = *((v70 + v113)) | v73;\n
                v114 = v3;\n
                v116 |= 5;\n
                v117 = (0 CONCAT 1) << (v116 & 31) >> 32;\n
                v118 = 1 << ((v116 | 5) & 31);\n
                if (((v116 | 5) & 32))\n
                    v117 = v118;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v118 = 0;\n
                v128 = v112 | 16;\n
                *((v70 + v128)) = *((v70 + v128)) | v118;\n
                *((v70 + v128 + 4)) = *((v70 + v128 + 4)) | v117;\n
                v129 = v2;\n
            }\n
            else if (v27->field_10)\n
            {\n
                v3[0] = v27->field_0;\n
                v33 = (!v3 ? 56 : v3);\n
                v2[0] = v33;\n
                tmp_1 = v33 | 4;\n
                v35 = (0 CONCAT 1) << ((v33 | 4) & 31) >> 32;\n
                v36 = 1 << ((v33 | 4) & 31);\n
                v37 = tmp_1 & 32;\n
                if ((tmp_1 & 32))\n
                    v35 = v36;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v36 = 0;\n
                v41 = (0 CONCAT 1) << (v33 & 31) >> 32;\n
                v74 = 1 << (v2 & 31);\n
                if ((v2 & 32))\n
                    v41 = v74;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v74 = 0;\n
                v76 = v41 | v35;\n
                v77 = ~(v74 | v36);\n
                v12[0] = v12[0] & v77;\n
                v79 = ~(v76);\n
                v12[1] = v12[1] & v79;\n
                v12[2] = v12[2] & v77;\n
                v12[3] = v12[3] & v79;\n
                v12[4] = v12[4] & v77;\n
                v12[5] = v12[5] & v79;\n
                v12[6] = v12[6] & v77;\n
                v12[7] = v12[7] & v79;\n
                v12[8] = v12[8] & v77;\n
                v12[9] = v12[9] & v79;\n
                v12[10] = v12[10] & v77;\n
                v12[11] = v12[11] & v79;\n
                v12[12] = v12[12] & v77;\n
                v12[13] = v12[13] & v79;\n
                v12[14] = v12[14] & v77;\n
                v12[15] = v12[15] & v79;\n
                v12[16] = v12[16] & v77;\n
                v12[17] = v12[17] & v79;\n
                v12[18] = v12[18] & v77;\n
                v12[19] = v12[19] & v79;\n
                v12[20] = v12[20] & v77;\n
                v12[21] = v12[21] & v79;\n
                v12[22] = v12[22] & v77;\n
                v12[23] = v12[23] & v79;\n
                v70 = v12;\n
                v103 = v2;\n
                v104 = (0 CONCAT 1) << ((v29 | 2) & 31) >> 32;\n
                v105 = 1 << ((v29 | 2) & 31);\n
                if (((v29 | 2) & 32))\n
                    v104 = v105;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v105 = 0;\n
                v119 = v3 * 8;\n
                v120 = v119 | 80;\n
                *((v70 + v120 + 4)) = *((v70 + v120 + 4)) | v104;\n
                *((v70 + v120)) = *((v70 + v120)) | v105;\n
                v121 = v2;\n
                v122 |= 3;\n
                v123 = (0 CONCAT 1) << (v122 & 31) >> 32;\n
                v124 = 1 << ((v122 | 3) & 31);\n
                if (((v122 | 3) & 32))\n
                    v123 = v124;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v124 = 0;\n
                v130 = v119 | 16;\n
                *((v70 + v130)) = *((v70 + v130)) | v124;\n
                *((v70 + v130 + 4)) = *((v70 + v130 + 4)) | v123;\n
                v129 = v3;\n
            }\n
            else\n
            {\n
                if (cgc_get_piece(v70, v27->field_2c, v27->field_30, v7) == 1 && v7[0] != a0->field_0 && *(&v8) == 5)\n
                    return 2;\n
                v107 = a0;\n
                v111 = v107->field_24;\n
                v2[0] = v107->field_28;\n
                v5 = v111;\n
                if (v2 <= 7 && v111 <= 7 && (v2 | v111) >= 0)\n
                {\n
                    v42 = &v2[2 * v111];\n
                    v75 = (0 CONCAT 1) << (v42 & 31) >> 32;\n
                    v106 = 1 << (v42 & 31);\n
                    if ((v42 & 32))\n
                        v75 = v106;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v106 = 0;\n
                    v107 = a0;\n
                    v108 = ~(v106);\n
                    *(v70) = *(v70) & v108;\n
                    v109 = ~(v75);\n
                    *((v70 + 4)) = *((v70 + 4)) & v109;\n
                    *((v70 + 8)) = *((v70 + 8)) & v108;\n
                    *((v70 + 12)) = *((v70 + 12)) & v109;\n
                    *((v70 + 16)) = *((v70 + 16)) & v108;\n
                    *((v70 + 20)) = *((v70 + 20)) & v109;\n
                    *((v70 + 24)) = *((v70 + 24)) & v108;\n
                    *((v70 + 28)) = *((v70 + 28)) & v109;\n
                    *((v70 + 32)) = *((v70 + 32)) & v108;\n
                    *((v70 + 36)) = *((v70 + 36)) & v109;\n
                    *((v70 + 40)) = *((v70 + 40)) & v108;\n
                    *((v70 + 44)) = *((v70 + 44)) & v109;\n
                    *((v70 + 48)) = *((v70 + 48)) & v108;\n
                    *((v70 + 52)) = *((v70 + 52)) & v109;\n
                    *((v70 + 56)) = *((v70 + 56)) & v108;\n
                    *((v70 + 60)) = *((v70 + 60)) & v109;\n
                    *((v70 + 64)) = *((v70 + 64)) & v108;\n
                    *((v70 + 68)) = *((v70 + 68)) & v109;\n
                    v110 = *((v70 + 72)) & v108;\n
                    *((v70 + 76)) = *((v70 + 76)) & v109;\n
                    *((v70 + 72)) = v110;\n
                    *((v70 + 84)) = *((v70 + 84)) & v109;\n
                    *((v70 + 80)) = *((v70 + 80)) & v108;\n
                    *((v70 + 92)) = *((v70 + 92)) & v109;\n
                    v111 = v5;\n
                    *((v70 + 88)) = *((v70 + 88)) & v108;\n
                }\n
                v115 = *((v107 + 44));\n
                v3[0] = *((v107 + 48));\n
                if (v3 <= 7 && v115 <= 7 && (v3 | v115) >= 0)\n
                {\n
                    v4 = v115;\n
                    v125 = v3 + v4 * 8;\n
                    v126 = (0 CONCAT 1) << (v125 & 31) >> 32;\n
                    v127 = 1 << (v125 & 31);\n
                    if ((v125 & 32))\n
                        v126 = v127;\n
                    v6 = v126;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v127 = 0;\n
                    v131 = v126;\n
                    v132 = ~(v127);\n
                    *(v70) = *(v70) & v132;\n
                    v133 = ~(v131);\n
                    *((v70 + 4)) = *((v70 + 4)) & v133;\n
                    *((v70 + 8)) = *((v70 + 8)) & v132;\n
                    *((v70 + 12)) = *((v70 + 12)) & v133;\n
                    *((v70 + 16)) = *((v70 + 16)) & v132;\n
                    *((v70 + 20)) = *((v70 + 20)) & v133;\n
                    *((v70 + 24)) = *((v70 + 24)) & v132;\n
                    *((v70 + 28)) = *((v70 + 28)) & v133;\n
                    *((v70 + 32)) = *((v70 + 32)) & v132;\n
                    *((v70 + 36)) = *((v70 + 36)) & v133;\n
                    *((v70 + 40)) = *((v70 + 40)) & v132;\n
                    *((v70 + 44)) = *((v70 + 44)) & v133;\n
                    *((v70 + 48)) = *((v70 + 48)) & v132;\n
                    *((v70 + 52)) = *((v70 + 52)) & v133;\n
                    *((v70 + 56)) = *((v70 + 56)) & v132;\n
                    *((v70 + 60)) = *((v70 + 60)) & v133;\n
                    *((v70 + 64)) = *((v70 + 64)) & v132;\n
                    *((v70 + 68)) = *((v70 + 68)) & v133;\n
                    v134 = v12[18] & v132;\n
                    v12[19] = v12[19] & v133;\n
                    v12[18] = v134;\n
                    v70 = v12;\n
                    v12[21] = v12[21] & v133;\n
                    v12[20] = v12[20] & v132;\n
                    v12[23] = v12[23] & v133;\n
                    v12[22] = v12[22] & v132;\n
                    v136 = (&a0->field_4)[a0->field_18] * 2 | a0->field_0;\n
                    v115 = v4;\n
                    v12[2 * v136] = v12[2 * v136] | v127;\n
                    v107 = a0;\n
                    v12[1 + 2 * v136] = v12[1 + 2 * v136] | v6;\n
                    v111 = v5;\n
                }\n
                v137 = *((v107 + 4));\n
                if (!v137)\n
                {\n
                    if (!(v115 == *((v70 + 112))))\n
                        goto LABEL_4062d7;\n
                    if (v3 == *((v70 + 116)))\n
                    {\n
                        if (v115 <= v111)\n
                        {\n
LABEL_406229:\n
                            v107 = a0;\n
                            v139 = *((v107 + 44));\n
                            v70 = v12;\n
                            if (*((v107 + 36)) <= v139)\n
                                goto LABEL_4062d1;\n
                            if (!(cgc_get_piece(v70, v139 + 1, *((v107 + 48)), v7) == 1))\n
                                goto LABEL_4062d1;\n
                            if (!(!*(&v8)))\n
                                goto LABEL_4062d1;\n
                            if (v7[0] == *(v107))\n
                                goto LABEL_4062d1;\n
                            v1 = *((v107 + 48));\n
                            v0 = *((v107 + 44)) + 1;\n
                            goto LABEL_4062c8;\n
                        }\n
                        else\n
                        {\n
                            if (!(cgc_get_piece(v12, v115 - 1, v3, v7) == 1))\n
                                goto LABEL_406229;\n
                            if (!(!*(&v8)))\n
                                goto LABEL_406229;\n
                            if (v7[0] == a0->field_0)\n
                                goto LABEL_406229;\n
                            v107 = a0;\n
                            v1[0] = v107->field_30;\n
                            v0 = v107->field_2c - 1;\n
                            v70 = v12;\n
LABEL_4062c8:\n
                            cgc_clear_piece(v70, v0, v1);\n
                            goto LABEL_4062d1;\n
                        }\n
                    }\n
                }\n
                else if (v137 == 1)\n
                {\n
                    v115 = (!v115 ? 7 : *(v107));\n
                    if (v111 == v115)\n
                    {\n
                        if (!v2)\n
                        {\n
                            v70 = v12;\n
                            v12[25 + 2 * v115] = 0;\n
                            v107 = a0;\n
                        }\n
                        else\n
                        {\n
                            v70 = v12;\n
                            v107 = a0;\n
                            if (v2 == 7)\n
                                v70[24 + 2 * v115] = 0;\n
                        }\n
                    }\n
LABEL_4062d1:\n
                    if (!(!*((v107 + 4))))\n
                        goto LABEL_406304;\n
LABEL_4062d7:\n
                    v141 = *((v107 + 44)) - *((v107 + 36));\n
                    if (v141 != 2 && !(v141 == -2))\n
                        goto LABEL_406304;\n
                    *((v70 + 112)) = (*((v107 + 36)) + *((v107 + 44)) >> 31) + *((v107 + 36)) + *((v107 + 44)) >> 1;\n
                    *((v70 + 116)) = *((v107 + 48));\n
                }\n
                else if (v137 == 5)\n
                {\n
                    v138 = *(v107);\n
                    *((v70 + v138 * 8 + 96)) = 0;\n
                    *((v70 + v138 * 8 + 100)) = 0;\n
                    goto LABEL_4062d1;\n
                }\n
                else\n
                {\n
LABEL_406304:\n
                    *((v70 + 116)) = -1;\n
                    *((v70 + 112)) = -1;\n
                }\n
LABEL_40584f:\n
                if (*((v70 + 120)) > 99)\n
                    return 3;\n
                v143 = 0;\n
                *(&v143) = !a0->field_0;\n
                v4 = *((v70 + v143 * 8));\n
                v2[0] = v143;\n
                v144 = *((v70 + v143 * 8 + 4));\n
                v3[0] = 0;\n
                v5 = 0;\n
                v145 = 0;\n
                do\n
                {\n
                    v146 = (0 CONCAT 1) << (v145 & 31) >> 32;\n
                    v147 = 1 << (v145 & 31);\n
                    v148 = v145 & 32;\n
                    if ((v145 & 32))\n
                        v146 = v147;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v147 = 0;\n
                    if (!(!(v147 & v4)) || !(!(v146 & v144)))\n
                    {\n
                        v5 |= v147;\n
                        v3 |= cgc_pawn_moves(v12, v2, v145 / 8);\n
                    }\n
                    v145 += 1;\n
                } while (v145 != 64);\n
                v150 = v12;\n
                v151 = v2;\n
                v4 = *((16 + &v150[0] + 0x8 * v151));\n
                v153 = 0;\n
                do\n
                {\n
                    v154 = (0 CONCAT 1) << (v153 & 31) >> 32;\n
                    v155 = 1 << (v153 & 31);\n
                    v156 = v153 & 32;\n
                    if ((v153 & 32))\n
                        v154 = v155;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v155 = 0;\n
                    if (!(!(v155 & v4)) || !(!(v154 & *((20 + &v150[0] + 0x8 * v151)))))\n
                    {\n
                        v5 |= v155;\n
                        v3 |= cgc_rook_moves(v12, v2, v153 / 8);\n
                    }\n
                    v153 += 1;\n
                } while (v153 != 64);\n
                v158 = v12;\n
                v159 = v2;\n
                v4 = *((32 + &v158[0] + 0x8 * v159));\n
                v161 = 0;\n
                do\n
                {\n
                    v162 = (0 CONCAT 1) << (v161 & 31) >> 32;\n
                    v163 = 1 << (v161 & 31);\n
                    v164 = v161 & 32;\n
                    if ((v161 & 32))\n
                        v162 = v163;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v163 = 0;\n
                    if (!(!(v163 & v4)) || !(!(v162 & *((36 + &v158[0] + 0x8 * v159)))))\n
                    {\n
                        v5 |= v163;\n
                        v3 |= cgc_knight_moves(v12, v2, v161 / 8);\n
                    }\n
                    v161 += 1;\n
                } while (v161 != 64);\n
                v166 = v12;\n
                v167 = v2;\n
                v4 = *((48 + &v166[0] + 0x8 * v167));\n
                v169 = 0;\n
                do\n
                {\n
                    v170 = (0 CONCAT 1) << (v169 & 31) >> 32;\n
                    v171 = 1 << (v169 & 31);\n
                    v172 = v169 & 32;\n
                    if ((v169 & 32))\n
                        v170 = v171;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v171 = 0;\n
                    if (!(!(v171 & v4)) || !(!(v170 & *((52 + &v166[0] + 0x8 * v167)))))\n
                    {\n
                        v5 |= v171;\n
                        v3 |= cgc_bishop_moves(v12, v2, v169 / 8);\n
                    }\n
                    v169 += 1;\n
                } while (v169 != 64);\n
                v174 = v12;\n
                v175 = v2;\n
                v11 = *((64 + &v12[0] + 0x8 * v175));\n
                v10 = *((68 + &v12[0] + 0x8 * v175));\n
                v176 = 0;\n
                do\n
                {\n
                    v177 = (0 CONCAT 1) << (v176 & 31) >> 32;\n
                    v178 = 1 << (v176 & 31);\n
                    v4 = v176;\n
                    v179 = v176 & 32;\n
                    if ((v176 & 32))\n
                        v177 = v178;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v178 = 0;\n
                    if (!(!(v178 & v11)) || !(!(v177 & v10)))\n
                    {\n
                        v180 = v4;\n
                        v6 = v180 / 8;\n
                        v9 = v180 & 7;\n
                        v3 = cgc_bishop_moves(v174, v2, v6) | v3 | cgc_rook_moves(v12, v2, v6);\n
                        v174 = v12;\n
                        v5 = v178 | v5 | v178;\n
                    }\n
                    v176 = v4 + 1;\n
                } while (v176 != 64);\n
                v182 = v2;\n
                v4 = *((v174 + v182 * 8 + 80));\n
                v183 = *((v174 + v182 * 8 + 84));\n
                v184 = 0;\n
                do\n
                {\n
                    v185 = (0 CONCAT 1) << (v184 & 31) >> 32;\n
                    v186 = 1 << (v184 & 31);\n
                    v187 = v184 & 32;\n
                    if ((v184 & 32))\n
                        v185 = v186;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v186 = 0;\n
                    if (!(!(v186 & v4)) || !(!(v185 & v183)))\n
                    {\n
                        v5 |= v186;\n
                        v3 |= cgc_king_moves(v12, v2, v184 / 8);\n
                    }\n
                    v184 += 1;\n
                } while (v184 != 64);\n
                v189 = v5;\n
                tmp_1 = v3 | v189;\n
                v3[0] = v3 | v189;\n
                v190 = v12;\n
                if (!tmp_1)\n
                    return 3;\n
                v191 = 0;\n
                v2[0] = a0->field_0;\n
                *(&v191) = !v2;\n
                v7 = v191;\n
                v8 = 5;\n
                v192 = *((80 + &v190[0] + 0x8 * v191));\n
                v11 = v191;\n
                v193 = *((84 + &v190[0] + 0x8 * v191));\n
                v194 = 0;\n
                do\n
                {\n
                    v195 = (0 CONCAT 1) << (v194 & 31) >> 32;\n
                    v196 = 1 << (v194 & 31);\n
                    v197 = v194 & 32;\n
                    if ((v194 & 32))\n
                        v195 = v196;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v196 = 0;\n
                    if (!(!(v196 & v192)) || !(!(v195 & v193)))\n
                    {\n
LABEL_405ecf:\n
                        v3[0] = v2;\n
                        v10 = v194 / 8;\n
                        v9 = v194 & 7;\n
                        v207 = (0 CONCAT 1) << (v194 & 31) >> 32;\n
                        v208 = 1 << (v194 & 31);\n
                        if ((v194 & 32))\n
                            v207 = v208;\n
                        v5 = v207;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v208 = 0;\n
                        v4 = v208;\n
                        v209 = 0;\n
                        v210 = v12;\n
                        while (true)\n
                        {\n
                            v211 = v3 + 2 * v209;\n
                            v212 = *((v210 + v211 * 8));\n
                            v213 = *((v210 + v211 * 8 + 4));\n
                            v6 = v209;\n
                            if (!v209)\n
                            {\n
                                v215 = 0;\n
                                do\n
                                {\n
                                    v2[0] = v215;\n
                                    v219 = (0 CONCAT 1) << (v2 & 31) >> 32;\n
                                    v220 = 1 << (v2 & 31);\n
                                    if ((v2 & 32))\n
                                        v219 = v220;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v220 = 0;\n
                                    v221 = v2;\n
                                    if (!(!(v220 & v212)) || !(!(v219 & v213)))\n
                                    {\n
                                        if ((v221 & 7) == v9)\n
                                            continue;\n
                                        v221 = v2;\n
                                        if (!(!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v6])(v12, v3, v2 >> 3) & v4)) || !(!(v220 & v5)))\n
                                            goto LABEL_406037;\n
                                    }\n
                                    v215 = v221 + 1;\n
                                } while (v215 != 64);\n
                            }\n
                            else\n
                            {\n
                                v214 = 0;\n
                                do\n
                                {\n
                                    v216 = (0 CONCAT 1) << (v214 & 31) >> 32;\n
                                    v217 = 1 << (v214 & 31);\n
                                    v218 = v214 & 32;\n
                                    if ((v214 & 32))\n
                                        v216 = v217;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v217 = 0;\n
                                    if ((!(!(v217 & v212)) || !(!(v216 & v213))) && (!(!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v6])(v12, v3, v214 >> 3) & v4)) || !(!(v217 & v5))))\n
                                        goto LABEL_406037;\n
                                    v214 += 1;\n
                                } while (v214 != 64);\n
                            }\n
                            v209 = v6 + 1;\n
                            v210 = v12;\n
                            if (v209 == 6)\n
                                return 0;\n
                        }\n
LABEL_406037:\n
                        v222 = 0;\n
                        do\n
                        {\n
                            v223 = v3 + 2 * v222;\n
                            v224 = v12;\n
                            v225 = *((v224 + v223 * 8));\n
                            v226 = *((v224 + v223 * 8 + 4));\n
                            v6 = v222;\n
                            if (!v222)\n
                            {\n
                                v228 = 0;\n
                                do\n
                                {\n
                                    v2[0] = v228;\n
                                    v232 = (0 CONCAT 1) << (v2 & 31) >> 32;\n
                                    v230 = 1 << (v2 & 31);\n
                                    if ((v2 & 32))\n
                                        v232 = v230;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v230 = 0;\n
                                    v233 = v2;\n
                                    if (!(!(v230 & v225)) || !(!(v232 & v226)))\n
                                    {\n
                                        if ((v233 & 7) == v9)\n
                                            continue;\n
                                        v233 = v2;\n
                                        if (!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v6])(v12, v3, v2 >> 3) & v4) && !(v230 & v5))\n
                                            goto LABEL_4060d5;\n
                                        else\n
                                            goto LABEL_0x406154;\n
                                    }\n
LABEL_4060d5:\n
                                    v228 = v233 + 1;\n
                                } while (v228 != 64);\n
                            }\n
                            else\n
                            {\n
                                v227 = 0;\n
                                do\n
                                {\n
                                    v229 = (0 CONCAT 1) << (v227 & 31) >> 32;\n
                                    v230 = 1 << (v227 & 31);\n
                                    v231 = v227 & 32;\n
                                    if ((v227 & 32))\n
                                        v229 = v230;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v230 = 0;\n
                                    if (!(!(v230 & v225)) || !(!(v229 & v226)))\n
                                        if (!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v6])(v12, v3, v227 >> 3) & v4) && !(v230 & v5))\n
                                            goto LABEL_406069;\n
                                        else\n
                                            goto LABEL_0x406154;\n
LABEL_406069:\n
                                    v227 += 1;\n
                                } while (v227 != 64);\n
                            }\n
                            v222 = v6 + 1;\n
                        } while (v222 != 6);\n
                        return 1;\n
                    }\n
                    v198 = (0 CONCAT 1) << (v194 + 1 & 31) >> 32;\n
                    v199 = 1 << (v194 + 1 & 31);\n
                    v200 = v194 + 1 & 32;\n
                    if ((v194 + 1 & 32))\n
                        v198 = v199;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v199 = 0;\n
                    if (!(!(v199 & v192)) || !(!(v198 & v193)))\n
                    {\n
                        v194 += 1;\n
                        goto LABEL_405ecf;\n
                    }\n
                    v201 = (0 CONCAT 1) << (v194 + 2 & 31) >> 32;\n
                    v202 = 1 << (v194 + 2 & 31);\n
                    v203 = v194 + 2 & 32;\n
                    if ((v194 + 2 & 32))\n
                        v201 = v202;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v202 = 0;\n
                    if (!(!(v202 & v192)) || !(!(v201 & v193)))\n
                    {\n
                        v194 += 2;\n
                        goto LABEL_405ecf;\n
                    }\n
                    v204 = (0 CONCAT 1) << (v194 + 3 & 31) >> 32;\n
                    v205 = 1 << (v194 + 3 & 31);\n
                    v206 = v194 + 3 & 32;\n
                    if ((v194 + 3 & 32))\n
                        v204 = v205;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-56, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v205 = 0;\n
                    if (!(!(v205 & v192)) || !(!(v204 & v193)))\n
                    {\n
                        v194 += 3;\n
                        goto LABEL_405ecf;\n
                    }\n
                    v194 += 4;\n
                } while (v194 != 64);\n
                v194 = 64;\n
                goto LABEL_405ecf;\n
            }\n
            *((v70 + v129 * 8 + 96)) = 0;\n
            *((v70 + v129 * 8 + 100)) = 0;\n
            goto LABEL_40584f;\n
        }\n
        else\n
        {\n
            if (cgc_get_piece(v70, v17->field_2c, v17->field_30, v7) == 1)\n
            {\n
                v18 = *(v13);\n
                if (v7[0] != v18)\n
                {\n
                    v19 = *((v13 + 4));\n
                    goto LABEL_406181;\n
                }\n
            }\n
            if (!*((v13 + 4)) && *((v13 + 44)) == v70[28] && *((v13 + 48)) == v70[29])\n
            {\n
                v18 = *(v13);\n
                v19 = 0;\n
                goto LABEL_406181;\n
            }\n
        }\n
    }\n
    if (!can_castle())\n
        goto LABEL_4061cd;\n
    goto LABEL_40550d;\n
}\n
", "4219671:sub_406317": null, "4219680:cgc_parse_san": null, "4221249:sub_406941": null, "4221264:can_castle": "int can_castle(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int *v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    unsigned int v6;  // [bp-0x30]\n
    unsigned int v7;  // [bp-0x2c]\n
    unsigned int v8;  // [bp-0x28]\n
    unsigned int v9[2];  // [bp-0x24]\n
    char v10;  // [bp-0x20]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int *v17;  // ecx\n
    unsigned int v18;  // edi\n
    void* v20;  // eax\n
    char v21;  // cl\n
    unsigned int v22;  // edx\n
    void* v23;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v24;  // eax\n
    unsigned int *v25;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    void* v29;  // ebp, Other Possible Types: unsigned int\n
    void* v30;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // cc_dep1\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // esi\n
    char v38;  // ebp\n
\n
    v14 = (!v13 ? 0 : 7);\n
    v16 = (!v15 ? 7 : v15);\n
    if (v17[24 + 2 * v15 + v13])\n
    {\n
        v5 = v16;\n
        v2 = v17;\n
        if (cgc_get_piece(v17, v16, 4, v9) == 1 && *(&v10) == 5)\n
        {\n
            v0 = v14;\n
            v18 = v5;\n
            if (cgc_get_piece(v2, v18, v0, v9) == 1)\n
            {\n
                if (*(&v10) != 1)\n
                    return 0;\n
                v3 = !v15;\n
                v20 = 0;\n
                *(&v20) = !v13;\n
                v37 = v20 * 3 + 2;\n
                v12 = v20 * 3 | 4;\n
                v38 = v18 * 8;\n
                v11 = v18 * 8;\n
                while (!cgc_get_piece(v2, v18, v37, v9))\n
                {\n
                    v6 = v37;\n
                    v21 = v37 + v38;\n
                    v22 = (0 CONCAT 1) << (v21 & 31) >> 32;\n
                    v23 = 0;\n
                    v24 = 1 << (v21 & 31);\n
                    if ((v21 & 32))\n
                        v22 = v24;\n
                    v8 = v22;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-68, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v24 = 0;\n
                    v7 = v24;\n
                    do\n
                    {\n
                        v25 = v3 + v23 * 2;\n
                        v26 = v2;\n
                        v27 = *((v26 + v25 * 8));\n
                        v28 = *((v26 + v25 * 8 + 4));\n
                        v4 = v23;\n
                        if (v23)\n
                        {\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v31 = (0 CONCAT 1) << (v29 & 31) >> 32;\n
                                v32 = 1 << (v29 & 31);\n
                                v33 = v29 & 32;\n
                                if ((v29 & 32))\n
                                    v31 = v32;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-68, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v32 = 0;\n
                                if (!(!(v32 & v27)) || !(!(v31 & v28)))\n
                                    if (!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v4])(v2, v3, v29 >> 3) & v7) && !(v32 & v8))\n
                                        goto LABEL_406a90;\n
                                    else\n
                                        goto LABEL_406ba1;\n
LABEL_406a90:\n
                                v29 += 1;\n
                            } while (v29 != 64);\n
                            goto LABEL_406ba1;\n
                        }\n
                        else\n
                        {\n
                            v30 = 0;\n
                            do\n
                            {\n
                                v1 = v30;\n
                                v34 = (0 CONCAT 1) << (v1 & 31) >> 32;\n
                                v35 = 1 << (v1 & 31);\n
                                if ((v1 & 32))\n
                                    v34 = v35;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-68, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v35 = 0;\n
                                v36 = v1;\n
                                if (!(!(v35 & v27)) || !(!(v34 & v28)))\n
                                {\n
                                    if ((v36 & 7) == v6)\n
                                        continue;\n
                                    v36 = v1;\n
                                    if (!(*(&(&_GLOBAL_OFFSET_TABLE_)[320 + 4 * v4])(v2, v3, v1 >> 3) & v7) && !(v35 & v8))\n
                                        goto LABEL_406b00;\n
                                    else\n
                                        goto LABEL_406ba1;\n
                                }\n
LABEL_406b00:\n
                                v30 = v36 + 1;\n
                            } while (v30 != 64);\n
                            goto LABEL_406ba1;\n
                        }\n
                        v23 = v4 + 1;\n
                    } while (v4 + 1 != 6);\n
                    v37 = v6 + 1;\n
                    v18 = v5;\n
                    v38 = v11;\n
                    if (v37 >= v12)\n
                        return 1;\n
                }\n
            }\n
        }\n
    }\n
LABEL_406ba1:\n
    return 0;\n
}\n
", "4221582:sub_406a8e": null, "4221692:sub_406afc": null, "4221867:sub_406bab": null, "4221872:cgc_pawn_moves": "int cgc_pawn_moves(unsigned int v10[30], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    int tmp_14;  // tmp #14\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5[2];  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ebp\n
    unsigned int v17;  // edi\n
    void* v18;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // edx\n
    unsigned int v22[30];  // esi, Other Possible Types: unsigned int\n
    char v23;  // cl\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // ebp\n
    char v26;  // dl\n
    void* v27;  // edx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // cc_dep1\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // cc_dep1\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // eax\n
    unsigned int v35[30];  // edx\n
    unsigned int v36;  // ebp\n
    unsigned int v37;  // eax\n
\n
    v9 = v11;\n
    v8 = v12;\n
    v13 = a2;\n
    v14 = cgc_get_piece(v10, *(&v2), v13, v5);\n
    v2 = (-(0 < a0) | 1) + a1;\n
    v15 = v13 + *(&v2) * 8;\n
    v16 = (0 CONCAT 1) << (v15 & 31) >> 32;\n
    v17 = 1 << (v15 & 31);\n
    v22 = v10;\n
    v6 = v15;\n
    if ((v15 & 32))\n
        v16 = v17;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
        v17 = 0;\n
    v18 = 0;\n
    v0 = 0;\n
    v19 = (!v14 ? 0 : v16);\n
    v20 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>) ? 0 : v17);\n
    v1 = v20;\n
    v21 = a2;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
    {\n
        v4 = v19;\n
        v19 = 0;\n
        *(&v19) = a0;\n
        if (v19 + (v19 << 2) + 1 != a1)\n
        {\n
            v18 = v17;\n
            v0 = v16;\n
            v22 = v10;\n
        }\n
        else\n
        {\n
            v3 = a1 + (!a0) * 4 - 2;\n
            v22 = v10;\n
            v19 = cgc_get_piece(v22, v3, v21, v5);\n
            v21 = a2;\n
            v18 = v17;\n
            v0 = v16;\n
            if (!v19)\n
            {\n
                v23 = v21 + v3 * 8;\n
                v24 = (0 CONCAT 1) << (v23 & 31) >> 32;\n
                v19 = 1 << (v23 & 31);\n
                if ((v23 & 32))\n
                    v24 = v19;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
                    v19 = 0;\n
                v25 = v4 | v24;\n
                v21 = a2;\n
                v18 = v1 | v19;\n
                v0 = v25;\n
            }\n
        }\n
    }\n
    v1 = v18;\n
    v4 = v21 - 1;\n
    v26 = v6;\n
    tmp_14 = v26 - 1;\n
    v27 = (0 CONCAT 1) << (v26 - 1 & 31) >> 32;\n
    v28 = 1 << (tmp_14 & 31);\n
    *(&v19) = v5[0] == a0 | cgc_get_piece(v22, v2, v4, v5) != 1;\n
    v29 = tmp_14 & 32;\n
    if ((tmp_14 & 32))\n
        v27 = v28;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
        v28 = 0;\n
    v7 = v27;\n
    if (v19)\n
        v27 = 0;\n
    v30 = ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, al<1>), 0x0<32>, 0x0<32>) ? v28 : 0);\n
    v1 = v30 | v1;\n
    v0 = v27 | v0;\n
    v3 = a2 + 1;\n
    *(&v30) = cgc_get_piece(v10, v2, v3, v5) != 1;\n
    *(&v18) = v6 + 1;\n
    v31 = 1 << (*(&v18) & 31);\n
    *(&v30) = v5[0] == a0 | *(&v30);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
        v31 = 0;\n
    v32 = v30;\n
    v33 = (v30 ? v31 : 0);\n
    v34 = v33 | v1;\n
    v35 = v10;\n
    if (v35[28] != v2)\n
        return v34;\n
    v2 = v35[29];\n
    if ([D] x86g_calculate_condition(0x5<32>, 0x6<32>, eax<4>, Load(addr=stack_base-44, size=4, endness=Iend_LE), 0x0<32>))\n
        v28 = 0;\n
    v36 = v28 | v34;\n
    v37 = v2;\n
    if (v37 == v3)\n
        return v31 | v36;\n
    v31 = 0;\n
}\n
", "4222462:sub_406dfe": null, "4222464:cgc_rook_moves": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_rook_moves(unsigned int v11[24], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v12;  // ecx\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
    unsigned int v18[24];  // edi\n
    unsigned int v19;  // edx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // esi\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // esi\n
\n
    v12 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v1 = 0;\n
    v14 = 0;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v15 = *((v12 + v14 * 8 - 0x2d00));\n
        v16 = a2 + *((v12 + v14 * 8 - 0x2d00));\n
        v10 = v14;\n
        v0 = v13;\n
        if (v16 <= 7)\n
        {\n
            v2 = *((v12 + v14 * 8 - 11524));\n
            v17 = a1 + v2;\n
            if (v17 <= 7 && (v16 | v17) >= 0)\n
            {\n
                v18 = v11;\n
                v29 = v18[0];\n
                v30 = v18[1];\n
                v4 = a2 + v15 * 2;\n
                v28 = v16 + v17 * 8;\n
                v19 = v2;\n
                v6 = v15 + v19 * 8;\n
                v3 = a1 + v19 * 2;\n
                v9 = v15;\n
                v8 = v29;\n
                v7 = v30;\n
                do\n
                {\n
                    v20 = (0 CONCAT 1) << (v28 & 31) >> 32;\n
                    v21 = 0;\n
                    v22 = 1 << (v28 & 31);\n
                    if ((v28 & 32))\n
                        v20 = v22;\n
                    if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
                        v22 = 0;\n
                    if (!(!(v29 & v22)) || !(!(v30 & v20)))\n
                    {\n
LABEL_406e2a:\n
                        v23 = v0;\n
                        goto LABEL_406e2d;\n
                    }\n
                    else\n
                    {\n
                        if (!(!(v18[3] & v20)) || !(!(v18[2] & v22)))\n
                        {\n
LABEL_406e25:\n
                            v21 = 1;\n
                            goto LABEL_406e2a;\n
                        }\n
                        if (!(!(v18[5] & v20)) || !(!(v18[4] & v22)))\n
                            goto LABEL_406e2a;\n
                        if (!(!(v18[7] & v20)) || !(!(v18[6] & v22)))\n
                            goto LABEL_406e25;\n
                        if (!(!(v18[9] & v20)) || !(!(v18[8] & v22)))\n
                            goto LABEL_406e2a;\n
                        if (!(!(v18[11] & v20)) || !(!(v18[10] & v22)))\n
                            goto LABEL_406e25;\n
                        if (!(!(v18[13] & v20)) || !(!(v18[12] & v22)))\n
                            goto LABEL_406e2a;\n
                        if (!(!(v18[15] & v20)) || !(!(v18[14] & v22)))\n
                            goto LABEL_406e25;\n
                        if (!(!(v18[17] & v20)) || !(!(v18[16] & v22)))\n
                            goto LABEL_406e2a;\n
                        if (!(!(v18[19] & v20)) || !(!(v18[18] & v22)))\n
                            goto LABEL_406e25;\n
                        v23 = v0;\n
                        if (!(!(v18[21] & v20)) || !(!(v18[20] & v22)))\n
                        {\n
LABEL_406e2d:\n
                            if (v21 == a0)\n
                                v22 = 0;\n
                            if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
                                v20 = 0;\n
                            v1 |= v20;\n
                            v0 = v23 | v22;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v21 = 1;\n
                            if (!(!(v18[23] & v20)) || !(!(v18[22] & v22)))\n
                                goto LABEL_406e2d;\n
                            v24 = v23 | v22;\n
                            v25 = v4;\n
                            v0 = v24;\n
                            v1 |= v20;\n
                            if (v25 > 7)\n
                                break;\n
                            v26 = v3;\n
                            if (v26 > 7)\n
                                break;\n
                            continue;\n
                        }\n
                    }\n
                    v4 = v25 + v9;\n
                    v28 += v6;\n
                    v3 = v26 + v2;\n
                    v29 = v8;\n
                    v30 = v7;\n
                } while ((v25 | v26) >= 0);\n
            }\n
        }\n
        v14 = v10 + 1;\n
        v12 = v5;\n
        v13 = v0;\n
    } while (v14 != 4);\n
    return v0;\n
}\n
", "4223015:sub_407027": null, "4223024:cgc_knight_moves": "int cgc_knight_moves(unsigned int v5[24], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0[2];  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ebp\n
    unsigned int v19;  // eax\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // ebp\n
    unsigned int v26;  // eax\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // eax\n
    char v33;  // cl\n
    unsigned int v34;  // eax\n
\n
    v6 = a1 + 2;\n
    v1 = a2 + 1;\n
    v7 = cgc_get_piece(v5, a1 + 2, v1, v0);\n
    if (v7)\n
    {\n
        v13 = 0;\n
        if (!(v7 == 1))\n
            goto LABEL_4070a4;\n
        v13 = 0;\n
        if (v0[0] == a0)\n
            goto LABEL_4070a4;\n
    }\n
    v13 = 1 << ((v1 + v6 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v13 = 0;\n
LABEL_4070a4:\n
    v2 = v6;\n
    v9 = a1 + 1;\n
    v4 = a2 + 2;\n
    v10 = cgc_get_piece(v5, a1 + 1, v4, v0);\n
    if (v10)\n
    {\n
        if (!(v10 == 1))\n
            goto LABEL_407102;\n
        if (v0[0] == a0)\n
            goto LABEL_407102;\n
    }\n
    v12 = 1 << ((v4 + v9 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v12 = 0;\n
    v13 |= v12;\n
LABEL_407102:\n
    v3 = a2 - 2;\n
    v14 = cgc_get_piece(v5, v9, v3, v0);\n
    if (v14)\n
    {\n
        if (!(v14 == 1))\n
            goto LABEL_407152;\n
        if (v0[0] == a0)\n
            goto LABEL_407152;\n
    }\n
    v16 = 1 << ((v3 + v9 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v16 = 0;\n
    v13 |= v16;\n
LABEL_407152:\n
    v17 = a1;\n
    v18 = v17 - 2;\n
    v19 = cgc_get_piece(v5, v17 - 2, v1, v0);\n
    if (v19)\n
    {\n
        if (!(v19 == 1))\n
            goto LABEL_4071a4;\n
        if (v0[0] == a0)\n
            goto LABEL_4071a4;\n
    }\n
    v21 = 1 << ((v1 + v18 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v21 = 0;\n
    v13 |= v21;\n
LABEL_4071a4:\n
    v1 = a2 - 1;\n
    v22 = cgc_get_piece(v5, v18, v1, v0);\n
    if (v22)\n
    {\n
        if (!(v22 == 1))\n
            goto LABEL_4071f4;\n
        if (v0[0] == a0)\n
            goto LABEL_4071f4;\n
    }\n
    v24 = 1 << ((v1 + v18 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v24 = 0;\n
    v13 |= v24;\n
LABEL_4071f4:\n
    v25 = a1 - 1;\n
    v26 = cgc_get_piece(v5, a1 - 1, v3, v0);\n
    if (v26)\n
    {\n
        if (!(v26 == 1))\n
            goto LABEL_407246;\n
        if (v0[0] == a0)\n
            goto LABEL_407246;\n
    }\n
    v28 = 1 << ((v3 + v25 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v28 = 0;\n
    v13 |= v28;\n
LABEL_407246:\n
    v29 = cgc_get_piece(v5, v25, v4, v0);\n
    if (v29)\n
    {\n
        if (!(v29 == 1))\n
            goto LABEL_40728e;\n
        if (v0[0] == a0)\n
            goto LABEL_40728e;\n
    }\n
    v31 = 1 << ((v4 + v25 * 8) & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v31 = 0;\n
    v13 |= v31;\n
LABEL_40728e:\n
    v32 = cgc_get_piece(v5, v2, v1, v0);\n
    if (v32)\n
    {\n
        if (v32 != 1)\n
        {\n
            return v13;\n
        }\n
        else if (v0[0] == a0)\n
        {\n
            return v13;\n
        }\n
    }\n
    v33 = v1 + v2 * 8;\n
    v34 = 1 << (v33 & 31);\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v34 = 0;\n
    v13 |= v34;\n
    return v13;\n
}\n
", "4223718:sub_4072e6": null, "4223728:cgc_bishop_moves": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_bishop_moves(unsigned int v11[24], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v12;  // ecx\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
    unsigned int v18[24];  // edi\n
    unsigned int v19;  // edx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // esi\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // esi\n
\n
    v12 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v1 = 0;\n
    v14 = 0;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v15 = *((v12 + v14 * 8 - 11488));\n
        v16 = a2 + *((v12 + v14 * 8 - 11488));\n
        v10 = v14;\n
        v0 = v13;\n
        if (v16 <= 7)\n
        {\n
            v2 = *((v12 + v14 * 8 - 11492));\n
            v17 = a1 + v2;\n
            if (v17 <= 7 && (v16 | v17) >= 0)\n
            {\n
                v18 = v11;\n
                v29 = v18[0];\n
                v30 = v18[1];\n
                v4 = a2 + v15 * 2;\n
                v28 = v16 + v17 * 8;\n
                v19 = v2;\n
                v6 = v15 + v19 * 8;\n
                v3 = a1 + v19 * 2;\n
                v9 = v15;\n
                v8 = v29;\n
                v7 = v30;\n
                do\n
                {\n
                    v20 = (0 CONCAT 1) << (v28 & 31) >> 32;\n
                    v21 = 0;\n
                    v22 = 1 << (v28 & 31);\n
                    if ((v28 & 32))\n
                        v20 = v22;\n
                    if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
                        v22 = 0;\n
                    if (!(!(v29 & v22)) || !(!(v30 & v20)))\n
                    {\n
LABEL_40731a:\n
                        v23 = v0;\n
                        goto LABEL_40731d;\n
                    }\n
                    else\n
                    {\n
                        if (!(!(v18[3] & v20)) || !(!(v18[2] & v22)))\n
                        {\n
LABEL_407315:\n
                            v21 = 1;\n
                            goto LABEL_40731a;\n
                        }\n
                        if (!(!(v18[5] & v20)) || !(!(v18[4] & v22)))\n
                            goto LABEL_40731a;\n
                        if (!(!(v18[7] & v20)) || !(!(v18[6] & v22)))\n
                            goto LABEL_407315;\n
                        if (!(!(v18[9] & v20)) || !(!(v18[8] & v22)))\n
                            goto LABEL_40731a;\n
                        if (!(!(v18[11] & v20)) || !(!(v18[10] & v22)))\n
                            goto LABEL_407315;\n
                        if (!(!(v18[13] & v20)) || !(!(v18[12] & v22)))\n
                            goto LABEL_40731a;\n
                        if (!(!(v18[15] & v20)) || !(!(v18[14] & v22)))\n
                            goto LABEL_407315;\n
                        if (!(!(v18[17] & v20)) || !(!(v18[16] & v22)))\n
                            goto LABEL_40731a;\n
                        if (!(!(v18[19] & v20)) || !(!(v18[18] & v22)))\n
                            goto LABEL_407315;\n
                        v23 = v0;\n
                        if (!(!(v18[21] & v20)) || !(!(v18[20] & v22)))\n
                        {\n
LABEL_40731d:\n
                            if (v21 == a0)\n
                                v22 = 0;\n
                            if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
                                v20 = 0;\n
                            v1 |= v20;\n
                            v0 = v23 | v22;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v21 = 1;\n
                            if (!(!(v18[23] & v20)) || !(!(v18[22] & v22)))\n
                                goto LABEL_40731d;\n
                            v24 = v23 | v22;\n
                            v25 = v4;\n
                            v0 = v24;\n
                            v1 |= v20;\n
                            if (v25 > 7)\n
                                break;\n
                            v26 = v3;\n
                            if (v26 > 7)\n
                                break;\n
                            continue;\n
                        }\n
                    }\n
                    v4 = v25 + v9;\n
                    v28 += v6;\n
                    v3 = v26 + v2;\n
                    v29 = v8;\n
                    v30 = v7;\n
                } while ((v25 | v26) >= 0);\n
            }\n
        }\n
        v14 = v10 + 1;\n
        v12 = v5;\n
        v13 = v0;\n
    } while (v14 != 4);\n
    return v0;\n
}\n
", "4224279:sub_407517": null, "4224288:cgc_queen_moves": "int cgc_queen_moves(unsigned int v0[24], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    return cgc_rook_moves(v0, a0, a1, a2) | cgc_bishop_moves(v0, a0, a1, a2);\n
}\n
", "4224369:sub_407571": null, "4224384:cgc_king_moves": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_king_moves(unsigned int v36[30], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    int tmp_19;  // tmp #19\n
    unsigned int v1;  // [bp-0xa0]\n
    void* v2;  // [bp-0x9c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x98]\n
    unsigned int v4;  // [bp-0x94], Other Possible Types: char\n
    unsigned int v5[30];  // [bp-0x90], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8c]\n
    unsigned int v7;  // [bp-0x88]\n
    unsigned int v8;  // [bp-0x84]\n
    unsigned int v9;  // [bp-0x80]\n
    unsigned int v10;  // [bp-0x7c]\n
    unsigned int v11;  // [bp-0x78]\n
    unsigned int v12;  // [bp-0x74]\n
    unsigned int v13;  // [bp-0x70]\n
    unsigned int v14;  // [bp-0x6c]\n
    unsigned int v15;  // [bp-0x68]\n
    unsigned int v16;  // [bp-0x64]\n
    unsigned int v17;  // [bp-0x60]\n
    unsigned int v18[2];  // [bp-0x5c], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x58]\n
    void* v20;  // [bp-0x54], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x50], Other Possible Types: unsigned int\n
    unsigned int v22;  // [bp-0x4c]\n
    unsigned int v23;  // [bp-0x48]\n
    unsigned int v24;  // [bp-0x44]\n
    unsigned int v25;  // [bp-0x40]\n
    unsigned int v26[30];  // [bp-0x3c]\n
    unsigned int v27[30];  // [bp-0x38]\n
    unsigned int v28[30];  // [bp-0x34]\n
    unsigned int v29[30];  // [bp-0x30]\n
    unsigned int v30;  // [bp-0x2c]\n
    unsigned int v31;  // [bp-0x28]\n
    unsigned int v32;  // [bp-0x24]\n
    unsigned int v33;  // [bp-0x20]\n
    unsigned int v34[2];  // [bp-0x1c]\n
    unsigned int v35;  // [bp-0x8]\n
    unsigned int v37;  // ebx\n
    unsigned int v38;  // ebx\n
    unsigned int v39;  // eax\n
    unsigned int v40[30];  // ecx\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // ebx, Other Possible Types: char\n
    unsigned int v45;  // edx\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // esi\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // cc_dep1\n
    unsigned int v50;  // edx\n
    void* v51;  // esi, Other Possible Types: unsigned int\n
    char v52;  // cl\n
    unsigned int v53;  // ebp\n
    unsigned int v54;  // ecx\n
    unsigned int v55;  // ecx, Other Possible Types: char\n
    unsigned int v56;  // edi\n
    unsigned int v57;  // ebx\n
    unsigned int v58;  // edx\n
    char v59;  // cl\n
    unsigned int v60;  // eax\n
    unsigned int v61;  // edx\n
    unsigned int v62;  // esi\n
    unsigned int v63;  // edi\n
    unsigned int v64;  // edx\n
    unsigned int v65[30];  // eax, Other Possible Types: unsigned int, char\n
    char v66;  // dl\n
    unsigned int v67;  // esi\n
    unsigned int v68;  // edx\n
    unsigned int v69;  // cc_dep1\n
    unsigned int v70;  // cc_dep1\n
    unsigned int v71;  // ecx\n
    unsigned int v72;  // ebp\n
    unsigned int v73;  // ebp\n
    unsigned int v74;  // eax\n
    char v75;  // cl\n
    unsigned int v76;  // eax\n
    unsigned int v77;  // edx\n
    unsigned int v78[30];  // esi\n
    unsigned int v79;  // ecx\n
    unsigned int v81;  // esi\n
    unsigned int v82[30];  // ecx\n
    unsigned int v83;  // esi\n
    void* v84;  // esi, Other Possible Types: unsigned int\n
    unsigned int v85;  // edi\n
    unsigned int v86;  // ecx\n
    unsigned int v87;  // eax\n
    unsigned int v88;  // ebp\n
    unsigned int v89;  // edx\n
    unsigned int v90[30];  // eax\n
    unsigned int v91;  // eax\n
    void* v92;  // ecx, Other Possible Types: unsigned int\n
    void* v93;  // edx, Other Possible Types: unsigned int\n
    unsigned int v94;  // edx\n
    unsigned int v95;  // ecx\n
    unsigned int v96;  // esi\n
    unsigned int v97[30];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v99;  // eax\n
    void* v100;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v101;  // eax\n
    unsigned int v102;  // edx\n
    unsigned int v103;  // cc_dep1\n
    void* v104;  // ebp, Other Possible Types: unsigned int\n
    void* v105;  // ebx, Other Possible Types: unsigned int\n
    void* v106;  // edx, Other Possible Types: unsigned int\n
    unsigned int v107;  // ecx\n
    unsigned int v108;  // edi\n
    unsigned int v109;  // eax\n
    unsigned int v110;  // ecx\n
    unsigned int v111[30];  // edx\n
    unsigned int v112;  // esi\n
    unsigned int v113;  // ecx\n
    unsigned int v114;  // edx\n
    unsigned int v116;  // edx\n
    void* v117;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v118;  // edi\n
    unsigned int v119[30];  // eax\n
    unsigned int v120;  // edx\n
    unsigned int v121;  // eax\n
    unsigned int v122;  // esi\n
    unsigned int v123;  // eax\n
    unsigned int v124;  // edi\n
    void* v125;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v126;  // eax\n
    unsigned int v127;  // edx\n
    unsigned int v128;  // cc_dep1\n
    unsigned int v129;  // eax\n
    unsigned int v130;  // edi\n
    void* v131;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v132;  // eax\n
    unsigned int v133;  // edx\n
    unsigned int v134;  // cc_dep1\n
    unsigned int v135;  // eax\n
    void* v136;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v137;  // eax\n
    unsigned int v138;  // edx\n
    unsigned int v139;  // cc_dep1\n
    unsigned int v140;  // esi\n
    unsigned int v141[30];  // edi\n
    unsigned int v142;  // eax\n
    unsigned int v143;  // eax\n
    void* v144;  // edx, Other Possible Types: unsigned int\n
    void* v145;  // ecx, Other Possible Types: unsigned int\n
    void* v146;  // eax, Other Possible Types: unsigned int\n
\n
    v35 = v37;\n
    v38 = &_GLOBAL_OFFSET_TABLE_;\n
    v39 = a0;\n
    v40 = 0;\n
    *(&v40[0]) = !v39;\n
    v97 = v36;\n
    v31 = -(v39 < 1) | 1;\n
    v29[0] = &v40[0] + 2;\n
    v28[0] = &v40[1];\n
    v27[0] = &v40[1] + 2;\n
    v26[0] = &v40[2];\n
    v25 = v40 * 5 + 1;\n
    v24 = &v40[0] + 3;\n
    v5[0] = v40;\n
    v23 = v40 * 8 + 24;\n
    v21 = 0;\n
    v20 = 0;\n
    v146 = 0;\n
    v9 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v30 = v146;\n
        v16 = *((v38 + v146 * 8 - 11736)) + a2;\n
        v22 = *((v38 + v146 * 8 - 11740)) + a1;\n
        v42 = cgc_get_piece(v97, v22, v16, v34);\n
        if (v42)\n
        {\n
            if (!(v42 == 1))\n
                continue;\n
            if (v34[0] == a0)\n
                continue;\n
        }\n
        v55 = v16 + v22 * 8;\n
        v45 = (0 CONCAT 1) << (v55 & 31) >> 32;\n
        v43 = 1 << (v55 & 31);\n
        v44 = 0;\n
        if ((v55 & 32))\n
            v45 = v43;\n
        v8 = v45;\n
        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
            v43 = 0;\n
        v7 = v43;\n
        v46 = v5;\n
        v47 = *((v97 + v46 * 8));\n
        v10 = *((v97 + v46 * 8 + 4));\n
        v13 = v47;\n
        do\n
        {\n
            v65 = (0 CONCAT 1) << (v44 & 31) >> 32;\n
            v48 = 1 << (v44 & 31);\n
            v49 = v44 & 32;\n
            if ((v44 & 32))\n
                v65 = v48;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                v48 = 0;\n
            if (!(!(v48 & v47)) || !(!(v65 & v10)))\n
            {\n
                v50 = v44 & 7;\n
                if (v50 == v16)\n
                    goto LABEL_40771f;\n
                v63 = *(&v4) + v31;\n
                v51 = 0;\n
                v3 = v50 + v63 * 8;\n
                v2 = 0;\n
                v0 = v63;\n
                v6 = v50;\n
                if (v63 > 7)\n
                {\n
LABEL_407920:\n
                    v4 = v51;\n
                    v15 = v63 * 8;\n
                    v1 = v50 - 1;\n
                    v65 = 1;\n
                    if (v63 <= 7)\n
                    {\n
                        v65 = 1;\n
                        if ((v1 | v63) >= 0)\n
                        {\n
                            v59 = v15 + v1;\n
                            v60 = (0 CONCAT 1) << (v59 & 31) >> 32;\n
                            v61 = 1 << (v59 & 31);\n
                            v62 = 0;\n
                            if ((v59 & 32))\n
                                v60 = v61;\n
                            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                v61 = 0;\n
                            v63 = v0;\n
                            if (!(*(v97) & v61) && !(*((v97 + 4)) & v60))\n
                            {\n
                                v62 = 1;\n
                                v63 = v0;\n
                                if (!(*((v97 + 12)) & v60) && !(*((v97 + 8)) & v61))\n
                                {\n
                                    v62 = 2;\n
                                    v63 = v0;\n
                                    if (!(*((v97 + 20)) & v60) && !(*((v97 + 16)) & v61))\n
                                    {\n
                                        v62 = 3;\n
                                        v63 = v0;\n
                                        if (!(*((v97 + 28)) & v60) && !(*((v97 + 24)) & v61))\n
                                        {\n
                                            v62 = 4;\n
                                            v63 = v0;\n
                                            if (!(*((v97 + 36)) & v60) && !(*((v97 + 32)) & v61))\n
                                            {\n
                                                v62 = 5;\n
                                                v63 = v0;\n
                                                if (!(*((v97 + 44)) & v60) && !(*((v97 + 40)) & v61))\n
                                                {\n
                                                    v62 = 6;\n
                                                    v63 = v0;\n
                                                    if (!(*((v97 + 52)) & v60) && !(*((v97 + 48)) & v61))\n
                                                    {\n
                                                        v62 = 7;\n
                                                        v63 = v0;\n
                                                        if (!(*((v97 + 60)) & v60) && !(*((v97 + 56)) & v61))\n
                                                        {\n
                                                            v62 = 8;\n
                                                            v63 = v0;\n
                                                            if (!(*((v97 + 68)) & v60) && !(*((v97 + 64)) & v61))\n
                                                            {\n
                                                                v62 = 9;\n
                                                                v63 = v0;\n
                                                                if (!(*((v97 + 76)) & v60) && !(*((v97 + 72)) & v61))\n
                                                                {\n
                                                                    v62 = 10;\n
                                                                    v63 = v0;\n
                                                                    if (!(*((v97 + 84)) & v60) && !(*((v97 + 80)) & v61))\n
                                                                    {\n
                                                                        v64 = v61 & *((v97 + 88));\n
                                                                        v65 = v60 & *((v97 + 92));\n
                                                                        v62 = 11;\n
                                                                        tmp_8 = v65 | v64;\n
                                                                        *(&v65) = 1;\n
                                                                        if (!tmp_8)\n
                                                                            goto LABEL_407aa7;\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                            v19 = v62 / 2;\n
                            v18 = v62 & 1;\n
                            v65 = 0;\n
                        }\n
                    }\n
LABEL_407aa7:\n
                    v11 = v18;\n
                    v66 = v3;\n
                    tmp_8 = v66 - 1;\n
                    v67 = (0 CONCAT 1) << (v66 - 1 & 31) >> 32;\n
                    v68 = 1 << (v66 - 1 & 31);\n
                    *(&v55) = v11 == v5 | v65;\n
                    v69 = tmp_8 & 32;\n
                    if ((tmp_8 & 32))\n
                        v67 = v68;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                        v68 = 0;\n
                    v70 = v55;\n
                    v71 = (v55 ? v68 : 0);\n
                    v72 = ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>) ? v67 : 0);\n
                    v73 = v72 | v2;\n
                    v2 = v71 | v4;\n
                    v74 = v6;\n
                    v4 = v74 + 1;\n
                    v12 = v44;\n
                    v17 = v67;\n
                    v14 = v68;\n
                    if (v74 != 7 && v63 <= 7)\n
                    {\n
                        v75 = v15 + v4;\n
                        v44 = (0 CONCAT 1) << (v75 & 31) >> 32;\n
                        v76 = 1 << (v75 & 31);\n
                        if ((v75 & 32))\n
                            v44 = v76;\n
                        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                            v76 = 0;\n
                        v78 = v36;\n
                        if (!(v78[0] & v76) && !(v78[1] & v44))\n
                        {\n
                            if (!(!(v78[3] & v44)) || !(!(v78[2] & v76)))\n
                            {\n
LABEL_407b6f:\n
                                v71 = 1;\n
                                goto LABEL_407b74;\n
                            }\n
                            else if (!(v78[5] & v44) && !(v78[4] & v76))\n
                            {\n
                                if (!(!(v78[7] & v44)) || !(!(v78[6] & v76)))\n
                                    goto LABEL_407b6f;\n
                                if (!(v78[9] & v44) && !(v78[8] & v76))\n
                                {\n
                                    if (!(!(v78[11] & v44)) || !(!(v78[10] & v76)))\n
                                        goto LABEL_407b6f;\n
                                    if (!(v78[13] & v44) && !(v78[12] & v76))\n
                                    {\n
                                        if (!(!(v78[15] & v44)) || !(!(v78[14] & v76)))\n
                                            goto LABEL_407b6f;\n
                                        if (!(v78[17] & v44) && !(v78[16] & v76) && !(v78[19] & v44) && !(v78[18] & v76))\n
                                        {\n
                                            v79 = v78[20] & v76;\n
                                            v81 = v44;\n
                                            tmp_8 = v78[21] & v44 | v79;\n
                                            *(&v44) = 1;\n
                                            v77 = v11;\n
                                            v71 = 0;\n
                                            if (!tmp_8)\n
                                            {\n
                                                v82 = v36;\n
                                                v83 = v81 & v82[23] | v76 & v82[22];\n
                                                v71 = 1;\n
                                                if (!v83)\n
                                                    goto LABEL_407b78;\n
                                            }\n
LABEL_407b74:\n
                                            v44 = 0;\n
                                            v77 = v71;\n
LABEL_407b78:\n
                                            *(&v71) = v3 + 1;\n
                                            v84 = (0 CONCAT 1) << (*(&v71) & 31) >> 32;\n
                                            v85 = 1 << (*(&v71) & 31);\n
                                            *(&v77) = v77 == v5 | v44;\n
                                            if ((*(&v71) & 32))\n
                                                v84 = v85;\n
                                            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                                v85 = 0;\n
                                            v86 = (v77 ? v85 : 0);\n
                                            v87 = ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, dl<1>), 0x0<32>, 0x0<32>) ? v84 : 0);\n
                                            v88 = v73 | v87;\n
                                            v89 = v2 | v86;\n
                                            v90 = v36;\n
                                            if (v90[28] == v0)\n
                                            {\n
                                                v91 = v90[29];\n
                                                v92 = v17;\n
                                                if (v91 != v1)\n
                                                    v92 = 0;\n
                                                v2 = v89;\n
                                                v93 = v14;\n
                                                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                                    v93 = 0;\n
                                                v94 = v93 | v2;\n
                                                v95 = v92 | v88;\n
                                                if (v91 != v4)\n
                                                    v85 = 0;\n
                                                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                                    v84 = 0;\n
                                                v96 = v84 | v95;\n
                                                v89 = v85 | v94;\n
                                                v88 = v96;\n
                                            }\n
                                            v44 = v12;\n
                                            v47 = v13;\n
                                            tmp_10 = v88 & v8 | v89 & v7;\n
                                            v97 = v36;\n
                                            if (tmp_10)\n
                                                goto LABEL_407640;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                        v71 = 0;\n
                        goto LABEL_407b74;\n
                    }\n
                    *(&v44) = 1;\n
                    v77 = v11;\n
                    goto LABEL_407b78;\n
                }\n
                v4 = v44 / 8;\n
                v65 = v97;\n
                v52 = v3;\n
                v53 = (0 CONCAT 1) << (v52 & 31) >> 32;\n
                v51 = 1 << (v52 & 31);\n
                if ((v52 & 32))\n
                    v53 = v51;\n
                v2 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                    v51 = 0;\n
                v1 = v53;\n
                v54 = v65[1] & v53;\n
                v97 = v65;\n
                tmp_9 = v65[0] & v51 | v54;\n
                v55 = 0;\n
                if (!tmp_9)\n
                {\n
                    v55 = 1;\n
                    v63 = v0;\n
                    if (!(v65[3] & v1) && !(v65[2] & v51))\n
                    {\n
                        v55 = 2;\n
                        v63 = v0;\n
                        if (!(v65[5] & v1) && !(v65[4] & v51))\n
                        {\n
                            v55 = 3;\n
                            v63 = v0;\n
                            if (!(v65[7] & v1) && !(v65[6] & v51))\n
                            {\n
                                v55 = 4;\n
                                v63 = v0;\n
                                if (!(v65[9] & v1) && !(v65[8] & v51))\n
                                {\n
                                    v55 = 5;\n
                                    v63 = v0;\n
                                    if (!(v65[11] & v1) && !(v65[10] & v51))\n
                                    {\n
                                        v55 = 6;\n
                                        v63 = v0;\n
                                        if (!(v65[13] & v1) && !(v65[12] & v51))\n
                                        {\n
                                            v55 = 7;\n
                                            v63 = v0;\n
                                            if (!(v65[15] & v1) && !(v65[14] & v51))\n
                                            {\n
                                                v55 = 8;\n
                                                v63 = v0;\n
                                                if (!(v65[17] & v1) && !(v65[16] & v51))\n
                                                {\n
                                                    v55 = 9;\n
                                                    v63 = v0;\n
                                                    if (!(v65[19] & v1) && !(v65[18] & v51))\n
                                                    {\n
                                                        v55 = 10;\n
                                                        v63 = v0;\n
                                                        if (!(v65[21] & v1) && !(v65[20] & v51))\n
                                                        {\n
                                                            v55 = 11;\n
                                                            v63 = v0;\n
                                                            if (!(v65[23] & v1) && !(v65[22] & v51))\n
                                                            {\n
                                                                v50 = v6;\n
                                                                if (v25 != v4)\n
                                                                {\n
                                                                    v2 = v1;\n
                                                                    goto LABEL_407920;\n
                                                                }\n
                                                                v56 = v44;\n
                                                                if (cgc_get_piece(v65, v24, v50, v18))\n
                                                                {\n
                                                                    v2 = v1;\n
                                                                    v63 = v0;\n
                                                                }\n
                                                                else\n
                                                                {\n
                                                                    v57 = v6;\n
                                                                    v55 = v23 | v57;\n
                                                                    v65 = (0 CONCAT 1) << (v55 & 31) >> 32;\n
                                                                    v58 = 1 << (v55 & 31);\n
                                                                    if ((v55 & 32))\n
                                                                        v65 = v58;\n
                                                                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                                                        v58 = 0;\n
                                                                    v51 |= v58;\n
                                                                    v50 = v57;\n
                                                                    v2 = v1 | v65;\n
                                                                    v44 = v56;\n
                                                                    v63 = v0;\n
                                                                    goto LABEL_407920;\n
                                                                }\n
LABEL_40791c:\n
                                                                v50 = v6;\n
                                                                goto LABEL_407920;\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                v19 = v55 / 2;\n
                *(v18) = v55 & 1;\n
                v51 = 0;\n
                goto LABEL_40791c;\n
            }\n
LABEL_40771f:\n
            v44 += 1;\n
        } while (v44 != 64);\n
        v99 = v29;\n
        v33 = *((v97 + v99 * 8));\n
        v32 = *((v97 + v99 * 8 + 4));\n
        v100 = 0;\n
        do\n
        {\n
            v101 = (0 CONCAT 1) << (v100 & 31) >> 32;\n
            v102 = 1 << (v100 & 31);\n
            v103 = v100 & 32;\n
            if ((v100 & 32))\n
                v101 = v102;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                v102 = 0;\n
            if (!(!(v102 & v33)) || !(!(v101 & v32)))\n
            {\n
                v4 = v100 & 7;\n
                v13 = v100;\n
                v14 = v100 / 8;\n
                v104 = 0;\n
                v105 = 0;\n
                v106 = 0;\n
                do\n
                {\n
                    v107 = v9;\n
                    v108 = *((v107 + v106 * 8 - 0x2d00));\n
                    v109 = v4 + v108;\n
                    v6 = v106;\n
                    if (v109 <= 7)\n
                    {\n
                        v1 = *((v107 + v106 * 8 - 11524));\n
                        v110 = v14 + v1;\n
                        if (v110 <= 7 && (v109 | v110) >= 0)\n
                        {\n
                            v111 = v36;\n
                            v112 = v111[0];\n
                            v12 = v111[1];\n
                            v0 = v4 + v108 * 2;\n
                            v113 = v109 + v110 * 8;\n
                            v114 = v1;\n
                            v17 = v108 + v114 * 8;\n
                            v116 = v12;\n
                            v2 = v14 + v114 * 2;\n
                            v15 = v108;\n
                            v11 = v112;\n
                            do\n
                            {\n
                                v10 = v105;\n
                                v3 = v104;\n
                                v117 = (0 CONCAT 1) << (v113 & 31) >> 32;\n
                                v118 = 1 << (v113 & 31);\n
                                if ((v113 & 32))\n
                                    v117 = v118;\n
                                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                    v118 = 0;\n
                                if (!(!(v118 & v112)) || !(!(v117 & v116)))\n
                                {\n
LABEL_407e00:\n
                                    v120 = 0;\n
                                    goto LABEL_407e02;\n
                                }\n
                                else\n
                                {\n
                                    v119 = v36;\n
                                    if (!(!(v119[3] & v117)) || !(!(v119[2] & v118)))\n
                                    {\n
LABEL_408007:\n
                                        v120 = 1;\n
LABEL_407e02:\n
                                        if (v120 == v5)\n
                                            v118 = 0;\n
                                        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                                            v117 = 0;\n
                                        v105 = v10 | v117;\n
                                        v104 = v3 | v118;\n
                                        break;\n
                                    }\n
                                    if (!(!(v119[5] & v117)) || !(!(v119[4] & v118)))\n
                                        goto LABEL_407e00;\n
                                    if (!(!(v119[7] & v117)) || !(!(v119[6] & v118)))\n
                                        goto LABEL_408007;\n
                                    if (!(!(v119[9] & v117)) || !(!(v119[8] & v118)))\n
                                        goto LABEL_407e00;\n
                                    if (!(!(v119[11] & v117)) || !(!(v119[10] & v118)))\n
                                        goto LABEL_408007;\n
                                    if (!(!(v119[13] & v117)) || !(!(v119[12] & v118)))\n
                                        goto LABEL_407e00;\n
                                    if (!(!(v119[15] & v117)) || !(!(v119[14] & v118)))\n
                                        goto LABEL_408007;\n
                                    if (!(!(v119[17] & v117)) || !(!(v119[16] & v118)))\n
                                        goto LABEL_407e00;\n
                                    if (!(!(v119[19] & v117)) || !(!(v119[18] & v118)))\n
                                        goto LABEL_408007;\n
                                    v120 = 0;\n
                                    if (!(!(v119[21] & v117)) || !(!(v119[20] & v118)))\n
                                        goto LABEL_407e02;\n
                                    v120 = 1;\n
                                    if (!(!(v119[23] & v117)) || !(!(v119[22] & v118)))\n
                                        goto LABEL_407e02;\n
                                    v104 = v3 | v118;\n
                                    v105 = v10 | v117;\n
                                    v121 = v0;\n
                                    if (v121 > 7)\n
                                        break;\n
                                    v122 = v2;\n
                                    if (v122 > 7)\n
                                        break;\n
                                    continue;\n
                                }\n
                                v0 = v121 + v15;\n
                                v113 += v17;\n
                                v2 = v122 + v1;\n
                                tmp_19 = v122 | v121;\n
                                v112 = v11;\n
                                v116 = v12;\n
                            } while (tmp_19 >= 0);\n
                        }\n
                    }\n
                    v106 = v6 + 1;\n
                } while (v106 != 4);\n
                tmp_8 = v105 & v8 | v104 & v7;\n
                v100 = v13;\n
                v97 = v36;\n
                if (tmp_8)\n
                    goto LABEL_407640;\n
            }\n
            v100 += 1;\n
        } while (v100 != 64);\n
        v123 = v28;\n
        v3 = *((v97 + v123 * 8));\n
        v124 = *((v97 + v123 * 8 + 4));\n
        v125 = 0;\n
        do\n
        {\n
            v126 = (0 CONCAT 1) << (v125 & 31) >> 32;\n
            v127 = 1 << (v125 & 31);\n
            v128 = v125 & 32;\n
            if ((v125 & 32))\n
                v126 = v127;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                v127 = 0;\n
            if ((!(!(v127 & v3)) || !(!(v126 & v124))) && (!(!(cgc_knight_moves(v97, v5, v125 >> 3, v125 & 7) & v7)) || !(!(v127 & v8))))\n
                goto LABEL_407640;\n
            v125 += 1;\n
        } while (v125 != 64);\n
        v129 = v27;\n
        v3 = *((v97 + v129 * 8));\n
        v130 = *((v97 + v129 * 8 + 4));\n
        v131 = 0;\n
        do\n
        {\n
            v132 = (0 CONCAT 1) << (v131 & 31) >> 32;\n
            v133 = 1 << (v131 & 31);\n
            v134 = v131 & 32;\n
            if ((v131 & 32))\n
                v132 = v133;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                v133 = 0;\n
            if ((!(!(v133 & v3)) || !(!(v132 & v130))) && (!(!(cgc_bishop_moves(v97, v5, v131 >> 3, v131 & 7) & v7)) || !(!(v133 & v8))))\n
                goto LABEL_407640;\n
            v131 += 1;\n
        } while (v131 != 64);\n
        v135 = v26;\n
        v2 = *((v97 + v135 * 8));\n
        v1 = *((v97 + v135 * 8 + 4));\n
        v136 = 0;\n
        do\n
        {\n
            v137 = (0 CONCAT 1) << (v136 & 31) >> 32;\n
            v138 = 1 << (v136 & 31);\n
            v139 = v136 & 32;\n
            if ((v136 & 32))\n
                v137 = v138;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
                v138 = 0;\n
            if (!(!(v138 & v2)) || !(!(v137 & v1)))\n
            {\n
                v140 = v136 / 8;\n
                v3 = v136;\n
                v141 = v5;\n
                v0 = cgc_bishop_moves(v36, v141, v140, v136 & 7);\n
                v10 = v138;\n
                v97 = v36;\n
                v142 = cgc_rook_moves(v36, v141, v140, v136 & 7);\n
                v136 = v3;\n
                if (!(!((v142 | v0) & v7)) || !(!((v138 | v10) & v8)))\n
                    goto LABEL_407640;\n
            }\n
            v136 += 1;\n
        } while (v136 != 64);\n
        v143 = v16 | v22;\n
        v144 = v7;\n
        if (v143 >= 8)\n
            v144 = 0;\n
        v145 = v8;\n
        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, eax<4>, 0x8<32>, 0x0<32>))\n
            v145 = 0;\n
        v20 |= v145;\n
        v21 |= v144;\n
LABEL_407640:\n
        v146 = v30 + 1;\n
        v38 = v9;\n
    } while (v146 != 8);\n
    return v21;\n
}\n
", "4224755:sub_4076f3": null, "4226430:sub_407d7e": null, "4226550:sub_407df6": null, "4227089:sub_408011": null, "4227124:sub_408034": null, "4227257:sub_4080b9": null, "4227389:sub_40813d": null, "4227568:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stdin;\n
extern unsigned int cgc_stdout;\n
extern char g_409484;\n
extern char g_409537;\n
extern char g_40953f;\n
extern unsigned int g_40955b;\n
extern char main.buf;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x104]\n
    unsigned int v1;  // [bp-0xf0]\n
    unsigned int v2;  // [bp-0xec]\n
    char *v3;  // [bp-0xe8]\n
    unsigned int *v4[5];  // [bp-0xe4]\n
    unsigned int *v5[5];  // [bp-0xe0]\n
    unsigned int v6;  // [bp-0xdc]\n
    unsigned int v7;  // [bp-0xd8]\n
    unsigned int v8;  // [bp-0xd4]\n
    unsigned int v9;  // [bp-0xd0]\n
    unsigned int v10;  // [bp-0xcc]\n
    char v11;  // [bp-0xc4]\n
    char v12;  // [bp-0x8c]\n
    unsigned int v14;  // esi\n
    struct_0 *v15;  // ebp, Other Possible Types: unsigned int\n
    char v16[2];  // esi\n
    char *v17;  // eax\n
    struct_0 *v18;  // esi\n
    unsigned int v19;  // ebp\n
    char *v20;  // edi\n
    void* v21;  // esi, Other Possible Types: unsigned int\n
    void* v23;  // edi, Other Possible Types: unsigned int\n
\n
    cgc_seed_ai(&v10);\n
    v14 = 1;\n
    v15 = &v12;\n
    v9 = &g_409537;\n
    v8 = &g_40953f;\n
    v7 = &g_409484;\n
    v6 = \"%s>%s \";\n
    v5 = &cgc_stdout;\n
    v4 = &cgc_stdin;\n
    v1 = &main.buf;\n
    v3 = \"quit\";\n
    while (true)\n
    {\n
        do\n
        {\n
            if (v14)\n
            {\n
                cgc_init_bitboard(v15);\n
                v23 = 0;\n
            }\n
            cgc_print_bitboard(v15, v23);\n
            cgc_printf(v6);\n
            cgc_fflush(*(v5));\n
            v16 = v1;\n
            cgc_fread_until(v16, 10, 0x1000, *(v4));\n
            v17 = cgc_strchr(v16, 10);\n
            v14 = 0;\n
        } while (!v17);\n
        v18 = v15;\n
        v19 = v23;\n
        *(v17) = 0;\n
        v20 = v1;\n
        if (!cgc_strcmp(v20, v3))\n
            return 0;\n
        v0 = v20;\n
        v23 = v19;\n
        v15 = esi<4>;\n
        if (!cgc_parse_san(v18, 0, v0))\n
        {\n
            v2 = cgc_make_move(esi<4>, &v11);\n
            if (v2 != -1)\n
            {\n
                cgc_printf(\"\\n
\");\n
                cgc_printf(v1);\n
                v21 = 0;\n
                while (true)\n
                {\n
                    v21 ^= cgc_get_flag_byte(0);\n
                }\n
            }\n
        }\n
        cgc_printf(\"INVALID MOVE!\\n
\");\n
        v14 = 0;\n
    }\n
}\n
", "4228100:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}