{"4202496:_init": "extern struct_0 *g_40a430;\n
\n
int _init()\n
{\n
    if (g_40a430)\n
    {\n
        g_40a430();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:sub_4020b0": "int sub_4020b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202678:sub_4020b6": null, "4202688:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202731:sub_4020eb": null, "4202732:sub_4020ec": "int sub_4020ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202736:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202740:sub_4020f4": null, "4202752:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 33591;\n
    v6 = v5 + 44;\n
    v7 = v5 + 44;\n
    if (v7 == v6)\n
        return v5 + 44;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202803:sub_402133": "int sub_402133()\n
{\n
}\n
", "4202809:sub_402139": "int sub_402139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202816:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 33527;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 44;\n
    v9 = (v6 + 44 - (v6 + 44) >> 31) + (44 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202887:sub_402187": "int sub_402187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202896:__do_global_dtors_aux": "extern unsigned int __dso_handle;\n
extern char completed.0;\n
extern unsigned int g_40a42c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (completed.0)\n
        return;\n
    if (g_40a42c)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020b0();\n
    }\n
    deregister_tm_clones();\n
    completed.0 = 1;\n
    return;\n
}\n
", "4202971:sub_4021db": "int sub_4021db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202976:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202985:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203071:sub_40223f": null, "4203072:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4203105:sub_402261": null, "4203120:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203139:sub_402283": null, "4203152:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203168:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203184:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203200:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203214:sub_4022ce": null, "4203216:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203238:sub_4022e6": null, "4203248:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203270:sub_402306": null, "4203280:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203302:sub_402326": null, "4203312:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203334:sub_402346": null, "4203344:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13364 + v0];\n
}\n
", "4203369:sub_402369": null, "4203376:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203401:sub_402389": null, "4203408:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13236 + v0];\n
}\n
", "4203433:sub_4023a9": null, "4203440:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203448:sub_4023b8": null, "4203456:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203475:sub_4023d3": null, "4203488:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203507:sub_4023f3": null, "4203520:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4203609:sub_402459": null, "4203616:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_40a570;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_402517;\n
            else\n
                goto LABEL_0x402530;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_40a570;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (true)\n
            {\n
LABEL_402517:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_402517;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4204042:sub_40260a": null, "4204048:cgc_get_size_class": "extern unsigned int g_40a470;\n
extern unsigned int g_40a474;\n
extern unsigned int g_40a478;\n
extern unsigned int g_40a47c;\n
extern unsigned int g_40a480;\n
extern unsigned int g_40a484;\n
extern unsigned int g_40a488;\n
extern unsigned int g_40a48c;\n
extern unsigned int g_40a490;\n
extern unsigned int g_40a494;\n
extern unsigned int g_40a498;\n
extern unsigned int g_40a49c;\n
extern unsigned int g_40a4a0;\n
extern unsigned int g_40a4a4;\n
extern unsigned int g_40a4a8;\n
extern unsigned int g_40a4ac;\n
extern unsigned int g_40a4b0;\n
extern unsigned int g_40a4b4;\n
extern unsigned int g_40a4b8;\n
extern unsigned int g_40a4bc;\n
extern unsigned int g_40a4c0;\n
extern unsigned int g_40a4c4;\n
extern unsigned int g_40a4c8;\n
extern unsigned int g_40a4cc;\n
extern unsigned int g_40a4d0;\n
extern unsigned int g_40a4d4;\n
extern unsigned int g_40a4d8;\n
extern unsigned int g_40a4dc;\n
extern unsigned int g_40a4e0;\n
extern unsigned int g_40a4e4;\n
extern unsigned int g_40a4e8;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_40a470 < v1)\n
    {\n
        v2 = 2;\n
        if (g_40a474 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40a478 < v1)\n
            {\n
                v2 = 4;\n
                if (g_40a47c < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_40a480 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_40a484 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40a488 < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_40a48c < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_40a490 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_40a494 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40a498 < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_40a49c < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_40a4a0 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_40a4a4 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_40a4a8 < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_40a4ac < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_40a4b0 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_40a4b4 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_40a4b8 < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_40a4bc < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_40a4c0 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_40a4c4 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_40a4c8 < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_40a4cc < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_40a4d0 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_40a4d4 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_40a4d8 < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_40a4dc < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_40a4e0 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_40a4e4 < v1)\n
                                                                                                                            v2 = 31 + (g_40a4e8 < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204567:sub_402817": null, "4204576:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4204669:sub_40287d": null, "4204672:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ecx\n
    struct_1 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[184 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4204767:sub_4028df": null, "4204768:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!*((v1 + 20)))\n
        return v34;\n
    v12 = *((v1 + 16));\n
    if (!*((v2 + 4)))\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!*((v12 + 4)))\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(*(v12));\n
            v6 = *((v12 + 12));\n
            if (v6)\n
                *((v6 + 8)) = *((v12 + 8));\n
            v10 = *((v12 + 8));\n
            if (v10)\n
                *((v10 + 12)) = v6;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[46 + v4] == v12)\n
                (&_GLOBAL_OFFSET_TABLE_)[46 + v4] = v10;\n
            *((v12 + 8)) = 0;\n
            *((v12 + 12)) = 0;\n
            *((v12 + 4)) = 0;\n
            v14 = *(v1);\n
            v15 = cgc_get_size_class(v14);\n
            v17 = *((v1 + 12));\n
            if (v17)\n
                *((v17 + 8)) = *((v1 + 8));\n
            v22 = *((v1 + 8));\n
            if (v22)\n
                *((v22 + 12)) = v17;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[46 + v15] == v1)\n
                (&_GLOBAL_OFFSET_TABLE_)[46 + v15] = v22;\n
            *((v1 + 8)) = 0;\n
            *((v1 + 12)) = 0;\n
            *((v1 + 4)) = 0;\n
            v26 = v14 + *(*((v1 + 16)));\n
            *(v1) = v26;\n
            v27 = cgc_get_size_class(v26);\n
            *((v1 + 4)) = 1;\n
            v29 = (&_GLOBAL_OFFSET_TABLE_)[46 + v27];\n
            if (v29)\n
            {\n
                *((v1 + 8)) = v29;\n
                *(((&_GLOBAL_OFFSET_TABLE_)[46 + v27] + 12)) = v1;\n
                (&_GLOBAL_OFFSET_TABLE_)[46 + v27] = v1;\n
                *((v1 + 12)) = 0;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c5a;\n
            }\n
            else\n
            {\n
                (&_GLOBAL_OFFSET_TABLE_)[46 + v27] = v1;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c5a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_402c5a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_402c61:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && *((v12 + 4)))\n
    {\n
        v3 = cgc_get_size_class(*(v2));\n
        v5 = *((v2 + 12));\n
        if (v5)\n
            *((v5 + 8)) = *((v2 + 8));\n
        v8 = *((v2 + 8));\n
        if (v8)\n
            *((v8 + 12)) = v5;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[46 + v3] == v2)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[46 + v3] = v8;\n
            v12 = *((v1 + 16));\n
        }\n
        *((v2 + 8)) = 0;\n
        *((v2 + 12)) = 0;\n
        *((v2 + 4)) = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            *((v16 + 8)) = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            *((v20 + 12)) = v16;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[46 + v13] == v12)\n
            (&_GLOBAL_OFFSET_TABLE_)[46 + v13] = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = *(v1);\n
        v25 = cgc_get_size_class(v24);\n
        v28 = *((v1 + 12));\n
        if (v28)\n
            *((v28 + 8)) = *((v1 + 8));\n
        v35 = *((v1 + 8));\n
        if (v35)\n
            *((v35 + 12)) = v28;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[46 + v25] == v1)\n
            (&_GLOBAL_OFFSET_TABLE_)[46 + v25] = v35;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 4)) = 0;\n
        v38 = *((v1 + 20));\n
        v39 = v24 + *(*((v1 + 20)));\n
        *(*((v1 + 20))) = v39;\n
        v40 = v39 + *(*((v1 + 16)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 4)) = 1;\n
        v42 = (&_GLOBAL_OFFSET_TABLE_)[46 + v41];\n
        if (v42)\n
        {\n
            *((v38 + 8)) = v42;\n
            *(((&_GLOBAL_OFFSET_TABLE_)[46 + v41] + 12)) = v38;\n
            (&_GLOBAL_OFFSET_TABLE_)[46 + v41] = v38;\n
            *((v38 + 12)) = 0;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a51;\n
        }\n
        else\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[46 + v41] = v38;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a51;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_402a51:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            *((v45 + 20)) = v44;\n
            v34 = *((v1 + 20));\n
            if (!v34)\n
                goto LABEL_402b60;\n
            goto LABEL_402b5a;\n
        }\n
    }\n
    v34 = *((v1 + 16));\n
    if (!v34)\n
        return *((v1 + 16));\n
    if (*((v34 + 4)))\n
        return *((v1 + 16));\n
    v7 = cgc_get_size_class(*(v2));\n
    v9 = *((v2 + 12));\n
    if (v9)\n
        *((v9 + 8)) = *((v2 + 8));\n
    v11 = *((v2 + 8));\n
    if (v11)\n
        *((v11 + 12)) = v9;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[46 + v7] == v2)\n
        (&_GLOBAL_OFFSET_TABLE_)[46 + v7] = v11;\n
    *((v2 + 8)) = 0;\n
    *((v2 + 12)) = 0;\n
    *((v2 + 4)) = 0;\n
    v18 = *(v1);\n
    v19 = cgc_get_size_class(v18);\n
    v21 = *((v1 + 12));\n
    if (v21)\n
        *((v21 + 8)) = *((v1 + 8));\n
    v23 = *((v1 + 8));\n
    if (v23)\n
        *((v23 + 12)) = v21;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[46 + v19] == v1)\n
        (&_GLOBAL_OFFSET_TABLE_)[46 + v19] = v23;\n
    *((v1 + 8)) = 0;\n
    *((v1 + 12)) = 0;\n
    *((v1 + 4)) = 0;\n
    v30 = *((v1 + 20));\n
    v31 = v18 + *(*((v1 + 20)));\n
    *(*((v1 + 20))) = v31;\n
    v32 = cgc_get_size_class(v31);\n
    *((v30 + 4)) = 1;\n
    v36 = (&_GLOBAL_OFFSET_TABLE_)[46 + v32];\n
    if (v36)\n
    {\n
        *((v30 + 8)) = v36;\n
        *(((&_GLOBAL_OFFSET_TABLE_)[46 + v32] + 12)) = v30;\n
        (&_GLOBAL_OFFSET_TABLE_)[46 + v32] = v30;\n
        *((v30 + 12)) = 0;\n
    }\n
    else\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[46 + v32] = v30;\n
        v34 = *((v1 + 20));\n
        if (!v34)\n
            goto LABEL_402b60;\n
LABEL_402b5a:\n
        *((v34 + 16)) = *((v1 + 16));\n
LABEL_402b60:\n
        v37 = *((v1 + 16));\n
        if (!v37)\n
            return v34;\n
        goto LABEL_402c61;\n
    }\n
    v34 = *((v1 + 20));\n
    if (!v34)\n
        goto LABEL_402b60;\n
    goto LABEL_402b5a;\n
}\n
", "4205744:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205801:sub_402ce9": null, "4205808:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205871:sub_402d2f": null, "4205872:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4206002:sub_402db2": null, "4206016:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4206272:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4206382:sub_402f2e": null, "4206384:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20], Other Possible Types: char\n
    char v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // edx, Other Possible Types: char\n
    void* v8;  // esi, Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
\n
    v7 = a3;\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = 0;\n
    if (*(&v2) < v9)\n
    {\n
        v2 = a0;\n
    }\n
    else\n
    {\n
        v2 = (0 CONCAT *(&v2)) /m v9 >> 32;\n
        v10 = cgc_output_number_printf(v6, (0 CONCAT *(&v2)) /m v9, v9, v8 - 1, a3);\n
        v7 = a3;\n
    }\n
    v5 = v10;\n
    v4 = v7 & 4;\n
    if (v8 <= 0)\n
    {\n
LABEL_402ff1:\n
        v12 = v2;\n
        if (!(!(v7 & 2)))\n
            goto LABEL_40300a;\n
        goto LABEL_402ffa;\n
    }\n
    else\n
    {\n
        if (!(!v10) || !(!v4))\n
            goto LABEL_402ff1;\n
        tmp_2 = v8;\n
        v13 = v8 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            v11 = v6;\n
            if (!(v7 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v3;\n
                    cgc_transmit(v11, &v1, 1);\n
                    tmp_5 = v13;\n
                    v13 -= 1;\n
                } while (tmp_5 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v3;\n
                    cgc_transmit(v11, &v1, 1);\n
                    tmp_5 = v13;\n
                    v13 -= 1;\n
                } while (tmp_5 != 1);\n
            }\n
            v8 = 0;\n
            v7 = a3;\n
            goto LABEL_402ff1;\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            v12 = v2;\n
            if (!(v7 & 2))\n
            {\n
LABEL_402ffa:\n
                v14 = v12 + 87;\n
            }\n
            else\n
            {\n
LABEL_40300a:\n
                v14 = v12 + 55;\n
            }\n
        }\n
    }\n
    if (v12 < 10)\n
        v14 = v12 + 48;\n
    v1 = v14;\n
    v0 = &v3;\n
    cgc_transmit();\n
    if (!v4)\n
    {\n
        return v5 + 1;\n
    }\n
    else if (v5)\n
    {\n
        return v5 + 1;\n
    }\n
    else if (v8 <= 0)\n
    {\n
        return v5 + 1;\n
    }\n
    else\n
    {\n
        tmp_2 = v8;\n
        v15 = v8 - 1;\n
        if (tmp_2 == 1)\n
            return v5 + 1;\n
        v16 = v6;\n
        if (!(a3 & 1))\n
        {\n
            do\n
            {\n
                v1 = 32;\n
                v0 = &v3;\n
                cgc_transmit(v16, &v1, 1);\n
                tmp_5 = v15;\n
                v15 -= 1;\n
            } while (tmp_5 != 1);\n
            return v5 + 1;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                v1 = 48;\n
                v0 = &v3;\n
                cgc_transmit(v16, &v1, 1);\n
                tmp_5 = v15;\n
                v15 -= 1;\n
            } while (tmp_5 != 1);\n
            return v5 + 1;\n
        }\n
    }\n
}\n
", "4206541:sub_402fcd": null, "4206717:sub_40307d": null, "4206762:sub_4030aa": null, "4206768:cgc_fdprintf": "int cgc_fdprintf(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    char v11;  // [bp+0xc]\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // edi\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v21 = v12 + 1;\n
        a0 = v21;\n
        *(&v12) = *(v12);\n
        if (v6 != 37)\n
        {\n
            v6 = v12;\n
            v5 = v14;\n
            cgc_transmit(v13, v15, 1);\n
            v29 = v13;\n
        }\n
        else\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = v21;\n
                while (true)\n
                {\n
                    v21 = v19 + 1;\n
                    a0 = v21;\n
                    v16 = *(v19);\n
                    v17 = v16;\n
                    if (v17 - 49 >= 9)\n
                        break;\n
                    v18 = cgc_strtol(v19, &a0);\n
                    v19 = a0;\n
                }\n
                switch (v17)\n
                {\n
                case 37:\n
                    v6 = 37;\n
                    break;\n
                case 45:\n
                    v9 |= 4;\n
                    continue;\n
                case 48:\n
                    v9 |= 1;\n
                    continue;\n
                case 88:\n
                    v22 = v9 | 2;\n
                    goto LABEL_403269;\n
                case 99:\n
                    v23 = v8;\n
                    v8 = v23 + 4;\n
                    v6 = *(v23);\n
                    break;\n
                case 100:\n
                    v24 = v8;\n
                    v8 = v24 + 4;\n
                    v25 = *(v24);\n
                    if (v25 >= 0)\n
                    {\n
                        v28 = v10;\n
                    }\n
                    else\n
                    {\n
LABEL_4032a6:\n
                        v6 = 45;\n
                        v5 = &v7;\n
                        v28 = v10;\n
                        cgc_transmit(v10, &v6, 1);\n
                        v25 = -(v25);\n
                    }\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    v0 = v25;\n
                    goto LABEL_4032d1;\n
                case 115:\n
                    v26 = v8;\n
                    v8 = v26 + 4;\n
                    v9 = *(v26);\n
                    v29 = v10;\n
                    v14 = &v7;\n
                    v15 = &v6;\n
                    if (cgc_strlen())\n
                    {\n
                        v30 = 0;\n
                        do\n
                        {\n
                            v6 = *((v9 + v30));\n
                            v5 = v14;\n
                            v4 = v15;\n
                            cgc_transmit(v29, v15, 1);\n
                            v30 += 1;\n
                            v15 = &v6;\n
                            v14 = &v7;\n
                        } while (v30 < cgc_strlen(v9, v4, 1));\n
                    }\n
                    goto LABEL_403107;\n
                case 117:\n
                    v27 = v8;\n
                    v8 = v27 + 4;\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    goto LABEL_40327b;\n
                case 120:\n
                    v22 = v9;\n
LABEL_403269:\n
                    v27 = v8;\n
                    v8 = v27 + 4;\n
                    v3 = v22;\n
                    v2 = v18;\n
                    v1 = 16;\n
LABEL_40327b:\n
                    v0 = *(v27);\n
                    v28 = v10;\n
LABEL_4032d1:\n
                    cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                    v29 = v28;\n
                    v14 = &v7;\n
                    v15 = &v6;\n
                default:\n
                    v6 = v16;\n
                    v5 = &v7;\n
                    v15 = &v6;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v29 = v10;\n
                    goto LABEL_4032a6;\n
                }\n
            }\n
            continue;\n
        }\n
        v14 = &v7;\n
LABEL_403107:\n
        v13 = v29;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4206822:sub_4030e6": null, "4207347:sub_4032f3": null, "4207360:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_403424;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_403424;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_403424:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4207706:sub_40345a": null, "4207712:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_sprintf(char v8[2], struct_0 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_1 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_0 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_0 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_0 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_1 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_1 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_1 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_403607;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_403587:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_403587;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_403607:\n
                        v8 = v20 + 1;\n
                        goto LABEL_4034ad;\n
                    }\n
                }\n
            }\n
LABEL_4034ad:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4207766:sub_403496": null, "4208165:sub_403625": null, "4208176:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40369a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40369a:\n
    return v5;\n
}\n
", "4208292:sub_4036a4": null, "4208304:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_40371a;\n
        }\n
    }\n
LABEL_40371a:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4208343:sub_4036d7": null, "4208448:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4208505:sub_403779": null, "4208512:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4208554:sub_4037aa": null, "4208560:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4208628:sub_4037f4": null, "4208640:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4208705:sub_403841": null, "4208720:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208796:sub_40389c": null, "4208800:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4208827:sub_4038bb": null, "4208832:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4208914:sub_403912": null, "4208983:sub_403957": null, "4208992:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(v0) - *(a0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v4);\n
        }\n
    }\n
}\n
", "4209074:sub_4039b2": null, "4209088:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4209226:sub_403a4a": null, "4209232:cgc_strsep": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strsep(struct struct_1 **v0, char a0[2])\n
{\n
    struct struct_1 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_403abd;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_403abd:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4209351:sub_403ac7": null, "4209360:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4209403:sub_403afb": null, "4209575:sub_403ba7": null, "4209671:sub_403c07": null, "4209680:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4209721:sub_403c39": null, "4209728:cgc_prand": "typedef struct struct_0 {\n
    char padding_0[316];\n
    unsigned int field_13c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_40a584;\n
extern unsigned int prng_s;\n
\n
int cgc_prand()\n
{\n
    int tmp_20;  // tmp #20\n
    unsigned int v2;  // eax\n
    unsigned int v4;  // esi\n
\n
    *(&_GLOBAL_OFFSET_TABLE_.padding_0[316]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[316]) + 1;\n
    v2 = 1103515245 * prng_s;\n
    tmp_20 = v2;\n
    v4 = g_40a584 * 1103515245 + (1103515245 * prng_s >> 32) + (tmp_20 + 12345 < tmp_20);\n
    prng_s = v2 + 12345;\n
    g_40a584 = v4;\n
    return (g_40a584 CONCAT prng_s) >> 16;\n
}\n
", "4209796:sub_403c84": null, "4209808:cgc_init_zobrist": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[316];\n
    unsigned int field_13c;\n
    char padding_140[4];\n
    unsigned int field_144;\n
    unsigned int field_148;\n
} struct_1;\n
\n
extern unsigned int g_40a584;\n
extern struct_0 g_40a590;\n
extern unsigned int pcnt;\n
extern unsigned int prng_s;\n
\n
int cgc_init_zobrist()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_9;  // tmp #9\n
    int tmp_35;  // tmp #35\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13[83];  // edx\n
    struct_0 *v14;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
\n
    v1 = v3;\n
    v0 = pcnt;\n
    v4 = g_40a584;\n
    v12 = prng_s;\n
    v14 = &g_40a590.field_-8;\n
    v15 = 361;\n
    do\n
    {\n
        v5 = v12 * 1103515245 >> 32;\n
        v6 = v12 * 1103515245;\n
        v7 = v4 * 1103515245;\n
        tmp_9 = v6;\n
        v8 = v6 + 12345;\n
        v9 = v7 + v5 + (tmp_9 + 12345 < tmp_9);\n
        *((v14 - 8)) = (v9 CONCAT v8) * 0x10000 >> 32;\n
        *((v14 - 4)) = 0;\n
        v11 = v8 * 1103515245;\n
        tmp_35 = v11;\n
        v12 = v11 + 12345;\n
        v4 = (v8 * 1103515245 >> 32) + v9 * 1103515245 + (tmp_35 + 12345 < tmp_35);\n
        v13 = ((v4 CONCAT v12) * 0x10000 >> 32);\n
        *(v14) = v13;\n
        *((v14 + 4)) = 0;\n
        v14 += 16;\n
        v15 -= 1;\n
    } while (true);\n
    v13[79] = v0 + 722;\n
    v13[81] = v12;\n
    v13[82] = v4;\n
    return 0;\n
}\n
", "4209982:sub_403d3e": null, "4209984:cgc_hash_zobrist": "extern unsigned int prng_s;\n
\n
int cgc_hash_zobrist(unsigned int v0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // ebx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
    void* v5;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v2 = &prng_s;\n
    v4 = 0;\n
    v5 = 0;\n
    do\n
    {\n
        v3 = *((v0 + v1));\n
        if (v3 != 3)\n
        {\n
            v4 ^= *((v2 + v3 * 8));\n
            v5 ^= *((v2 + v3 * 8 + 4));\n
        }\n
        v1 += 1;\n
        v2 += 16;\n
    } while (v1 != 361);\n
    return v4;\n
}\n
", "4210017:sub_403d61": null, "4210068:sub_403d94": null, "4210080:cgc_push_game_state": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[399];\n
    struct struct_0 *field_190;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_push_game_state(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v2;  // edx, Other Possible Types: unsigned int\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // ebp\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
    void* v6;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8[3];  // eax\n
\n
    v1 = 0;\n
    v2 = &prng_s;\n
    v3 = v0;\n
    v5 = 0;\n
    v6 = 0;\n
    do\n
    {\n
        v4 = *((v3 + v1));\n
        if (*((v3 + v1)) != 3)\n
        {\n
            v5 ^= *((v2 + v4 * 8));\n
            v6 ^= *((v2 + v4 * 8 + 4));\n
        }\n
        v1 += 1;\n
        v2 += 16;\n
    } while (v1 != 361);\n
    v7 = *((v3 + 400));\n
    v8 = cgc_calloc(1, 12);\n
    if (v8)\n
    {\n
        v8[2] = v8;\n
        v8[0] = v5;\n
        v8[1] = v6;\n
        *((v7 + 8)) = v8;\n
        return v8;\n
    }\n
    cgc__terminate();\n
    return cgc_ndigits();\n
}\n
", "4210117:sub_403dc5": null, "4210256:cgc_ndigits": "int cgc_ndigits(unsigned int v0)\n
{\n
    int tmp_31;  // tmp #31\n
    unsigned int v1;  // esi\n
    void* v2;  // ecx\n
    char v3;  // cl\n
    unsigned int v4;  // ecx\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        v3 = 1;\n
        return v4;\n
    }\n
    v2 = 0;\n
    do\n
    {\n
        *(&v2) = v2 + 1;\n
        tmp_31 = v1 + 9;\n
        v1 = (v1 * 1717986919 >> 32 >> 2) + (v1 * 1717986919 >> 32 >> 31);\n
    } while (tmp_31 > 18);\n
    return v2;\n
}\n
", "4210327:sub_403e97": null, "4210336:cgc_init_game": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[17];\n
    char field_12;\n
    char padding_13[345];\n
    unsigned int field_16c;\n
    unsigned int field_170;\n
    unsigned int field_174;\n
    unsigned int field_178;\n
    unsigned int field_17c;\n
    unsigned int field_180;\n
    unsigned int field_184;\n
    unsigned int field_188;\n
    char field_18c;\n
    char padding_18d[3];\n
    unsigned int field_190;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_init_game(struct_0 *v0)\n
{\n
    struct_0 *v1;  // eax\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // ecx, Other Possible Types: unsigned int\n
    void* v8;  // edi, Other Possible Types: unsigned int\n
    void* v9;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v10;  // edx\n
    unsigned int v11[3];  // eax\n
\n
    v1 = cgc_calloc(1, 404);\n
    if (!v1)\n
        return 0;\n
    v2 = v1;\n
    v3 = v0;\n
    if (v3)\n
    {\n
        v4 = 18;\n
        do\n
        {\n
            (&v2->field_12)[v4] = *((v3 + v4 - 18));\n
            v2->padding_1[16 + v4] = *((v3 + v4 - 17));\n
            v2->padding_1[15 + v4] = *((v3 + v4 - 16));\n
            v2->padding_1[14 + v4] = *((v3 + v4 - 15));\n
            v2->padding_1[13 + v4] = *((v3 + v4 - 14));\n
            v2->padding_1[12 + v4] = *((v3 + v4 - 13));\n
            v2->padding_1[11 + v4] = *((v3 + v4 - 12));\n
            v2->padding_1[10 + v4] = *((v3 + v4 - 11));\n
            v2->padding_1[9 + v4] = *((v3 + v4 - 10));\n
            v2->padding_1[8 + v4] = *((v3 + v4 - 9));\n
            v2->padding_1[7 + v4] = *((v3 + v4 - 8));\n
            v2->padding_1[6 + v4] = *((v3 + v4 - 7));\n
            v2->padding_1[5 + v4] = *((v3 + v4 - 6));\n
            v2->padding_1[4 + v4] = *((v3 + v4 - 5));\n
            v2->padding_1[3 + v4] = *((v3 + v4 - 4));\n
            v2->padding_1[2 + v4] = *((v3 + v4 - 3));\n
            v2->padding_1[1 + v4] = *((v3 + v4 - 2));\n
            v2->padding_1[v4] = *((v3 + v4 - 1));\n
            (&v2->field_0)[v4] = *((v3 + v4));\n
            v4 += 19;\n
        } while (v4 != 379);\n
    }\n
    else\n
    {\n
        v5 = 18;\n
        do\n
        {\n
            *(&(&v2->field_12)[v5]) = 50529027;\n
            *(&v2->padding_1[13 + v5]) = 50529027;\n
            *(&v2->padding_1[9 + v5]) = 50529027;\n
            *(&v2->padding_1[5 + v5]) = 50529027;\n
            *(&v2->padding_1[1 + v5]) = 771;\n
            (&v2->field_0)[v5] = 3;\n
            v5 += 19;\n
        } while (v5 != 379);\n
    }\n
    v2->field_16c = 0;\n
    v2->field_174 = 0;\n
    v2->field_17c = 0;\n
    v2->field_170 = 0;\n
    v2->field_178 = 0;\n
    v2->field_180 = 0;\n
    v2->field_190 = 0;\n
    v6 = 0;\n
    v7 = &prng_s;\n
    v8 = 0;\n
    v9 = 0;\n
    do\n
    {\n
        v10 = (&v2->field_0)[v6];\n
        if (v10 != 3)\n
        {\n
            v8 ^= *((v7 + v10 * 8));\n
            v9 ^= *((v7 + v10 * 8 + 4));\n
        }\n
        v6 += 1;\n
        v7 += 16;\n
    } while (v6 != 361);\n
    v11 = cgc_calloc(1, 12);\n
    v2->field_190 = v11;\n
    v11[1] = v9;\n
    v11[0] = v8;\n
    v11[2] = v11;\n
    v2->field_184 = 0;\n
    v2->field_188 = 0;\n
    v2->field_18c = 0;\n
    return v2;\n
}\n
", "4210745:sub_404039": null, "4210849:sub_4040a1": null, "4210864:cgc_copy_game": "int cgc_copy_game(char *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v3 = cgc_calloc(1, 404);\n
    if (!v3)\n
    {\n
        cgc__terminate();\n
        return cgc_get_color();\n
    }\n
    cgc_memcpy(v3, v1, 404);\n
    return v3;\n
}\n
", "4210944:cgc_get_color": "int cgc_get_color(unsigned int v0, char a0, char a1)\n
{\n
    char v1;  // cl\n
    struct struct_0 **v2;  // al, Other Possible Types: unsigned int, char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v1 = a0;\n
    v2 = 4;\n
    if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+8, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>) && [D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+8, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>))\n
    {\n
        v3 = a1;\n
        v2 = v3 + v3 * 18 + v0;\n
        *(&v2) = *(v4 + v2);\n
    }\n
    return v2;\n
}\n
", "4210984:sub_404128": null, "4210992:cgc_has_liberty": "int cgc_has_liberty(unsigned int v7, unsigned int a0, char a1, char a2, char *a3)\n
{\n
    struct struct_0 **v0;  // [bp-0x17], Other Possible Types: char\n
    int tmp_31;  // tmp #31\n
    int tmp_6;  // tmp #6\n
    struct struct_0 **v1;  // [bp-0x16], Other Possible Types: char\n
    struct struct_0 **v2;  // [bp-0x15], Other Possible Types: char\n
    char v3;  // [bp-0x14]\n
    char v4;  // [bp-0x13]\n
    struct struct_0 **v5;  // [bp-0x12]\n
    char v6;  // [bp-0x11]\n
    char v9;  // cl\n
    char v10;  // ebp\n
    struct struct_0 **v11;  // edi\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // esi\n
    struct struct_0 **v16;  // eax, Other Possible Types: unsigned int, char\n
    unsigned int v17;  // esi\n
    char *v18;  // ecx\n
    unsigned int v19;  // edi\n
\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        return 0;\n
    v9 = a2;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        return 0;\n
    v10 = v9;\n
    v11 = a1;\n
    v12 = v9 * 19;\n
    v13 = v7 + v12;\n
    if (*(v11 + v13) == 4)\n
        return 0;\n
    v14 = v12 + a0;\n
    if (*(v11 + v14) == 1)\n
        return 0;\n
    v6 = a2 + 1;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
    {\n
        v0 = 4;\n
        v16 = 17;\n
    }\n
    else\n
    {\n
        v15 = a2 + 1;\n
        v16 = v15 + v15 * 18 + v7;\n
        tmp_31 = *(v11 + v16);\n
        *(&v16) = *(v11 + v16);\n
        *(&v16) = a2 - 1;\n
        *(&v0) = tmp_31;\n
        if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        {\n
            *(&v2) = 4;\n
            v4 = 255;\n
            goto LABEL_4041f0;\n
        }\n
    }\n
    v4 = v16;\n
    v17 = v16;\n
    v16 = v17 + v17 * 18 + v7;\n
    v2 = *(v11 + v16);\n
LABEL_4041f0:\n
    v18 = v14 + v11;\n
    *(&v16) = a1 - 1;\n
    *(&v5) = a1 - 1;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
    {\n
        v1 = 4;\n
        *(&v16) = 1;\n
    }\n
    else\n
    {\n
        *(&v1) = *((v16 + v13));\n
        if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        {\n
            *(&v16) = 4;\n
            v3 = 19;\n
            goto LABEL_404230;\n
        }\n
        else\n
        {\n
            *(&v16) = a1 + 1;\n
        }\n
    }\n
    v3 = v16;\n
    *(&v16) = *((v16 + v13));\n
LABEL_404230:\n
    *(&v13) = v0;\n
    *(v18) = 1;\n
    if (v0 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v2 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v1 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v16 == 3)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        *(&v18) = a3;\n
        *(&v0) = v16;\n
        if (v13 == a3)\n
        {\n
            v16 = cgc_has_liberty(v7, a0, v11, v6, v18);\n
            *(&v18) = a3;\n
            tmp_6 = v16;\n
            *(&v16) = v0;\n
            if (tmp_6)\n
                return 1;\n
        }\n
        if (v2 == v18)\n
        {\n
            v16 = cgc_has_liberty(v7, a0, v11, v4, v18);\n
            *(&v18) = a3;\n
            tmp_6 = v16;\n
            *(&v16) = v0;\n
            if (tmp_6)\n
                return 1;\n
        }\n
        v19 = v7;\n
        if (v1 == v18)\n
        {\n
            v16 = cgc_has_liberty(v19, a0, v5, v10, v18);\n
            *(&v18) = a3;\n
            tmp_6 = v16;\n
            *(&v16) = v0;\n
            if (tmp_6)\n
                return 1;\n
        }\n
        if (!(v16 == v18 && cgc_has_liberty(v19, a0, v3, v10, v18)))\n
            return 0;\n
        return 1;\n
    }\n
}\n
", "4211501:sub_40432d": null, "4211504:cgc_surrounded_by": "int cgc_surrounded_by(unsigned int v4, unsigned int a0, char a1, char a2, char a3)\n
{\n
    char v0;  // [bp-0x17]\n
    char v1;  // [bp-0x16]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // al, Other Possible Types: char\n
    char v7;  // dl\n
    char v8;  // ebp\n
    char *v9;  // edi\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ecx\n
    char *v13;  // ecx\n
    char v14;  // dil\n
\n
    v5 = v4;\n
    if (!(v5 && a0))\n
    {\n
        cgc__terminate();\n
        return cgc_remove_captures();\n
    }\n
    v6 = 1;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        return v6;\n
    v7 = a2;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x12<32>, 0x0<32>)))\n
        return v6;\n
    v8 = v7;\n
    v9 = a1;\n
    v10 = v7 * 19;\n
    v11 = v9[v10 + v5];\n
    if (v11 == 4)\n
        return v6;\n
    v12 = v10 + a0;\n
    if (v9[v12] == 1)\n
        return v6;\n
    v13 = &v9[v12];\n
    if (v11 == a3)\n
    {\n
        *(v13) = 1;\n
        v6 = 2;\n
        return v6;\n
    }\n
    v3 = a3 == 2;\n
    if (2 - v3 == v11)\n
    {\n
        *(v13) = 1;\n
        return 0;\n
    }\n
    if (v11 == 3)\n
        *(v13) = 1;\n
    v3 = a3;\n
    v2 = cgc_surrounded_by(v5, a0, v9, a2 + 1, v3);\n
    v1 = cgc_surrounded_by(v5, a0, v9, a2 - 1, v3);\n
    v14 = v3;\n
    v0 = cgc_surrounded_by(v5, a0, a1 + 1, v8, v14);\n
    v6 = cgc_surrounded_by(v5, a0, a1 - 1, v8, v14) + v0 + v1 + v2;\n
    *(&v6) = !(v6 < 5) * 2;\n
    return v6;\n
}\n
", "4211888:cgc_remove_captures": "int cgc_remove_captures(char *v6, char a0)\n
{\n
    void* v0;  // [bp-0x190], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x18c], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x188]\n
    char *v3;  // [bp-0x184]\n
    char *v4;  // [bp-0x180]\n
    char v5[8];  // [bp-0x179]\n
    char *v7;  // eax\n
    char *v8;  // ebp\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // esi\n
\n
    v7 = cgc_calloc(1, 404);\n
    if (!v7)\n
    {\n
        cgc__terminate();\n
        return cgc_has_happened();\n
    }\n
    v8 = v7;\n
    v2 = v6;\n
    v9 = cgc_memcpy(v7, v2, 404);\n
    *(&v9) = a0;\n
    v3 = v8;\n
    if (a0 != 4)\n
    {\n
        v10 = v8;\n
        v0 = 0;\n
        v4 = v9;\n
        v1 = 0;\n
        do\n
        {\n
            v13 = 0;\n
            do\n
            {\n
                cgc_memset(v5, 0, 361);\n
                if (*((v10 + v13)) == a0 && !cgc_has_liberty(v3, v5, v13, v0, v4))\n
                {\n
                    v1 += 1;\n
                    *((v2 + v13)) = 3;\n
                }\n
                v13 += 1;\n
            } while (v13 != 19);\n
            v14 = v10 + 19;\n
            v2 += 19;\n
            v0 += 1;\n
        } while (v0 != 19);\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        v1 = 0;\n
        do\n
        {\n
            v11 = 0;\n
            do\n
            {\n
                cgc_memset(v5, 0, 361);\n
                if (v8[v11] == 4 && !cgc_has_liberty(v3, v5, v11, v0, 0x4))\n
                {\n
                    v1 += 1;\n
                    *((v2 + v11)) = 3;\n
                }\n
                v11 += 1;\n
            } while (v11 != 19);\n
            v12 = v8 + 19;\n
            v2 += 19;\n
            v0 += 1;\n
        } while (v0 != 19);\n
    }\n
    cgc_free(v3);\n
    return v1;\n
}\n
", "4212008:sub_404528": null, "4212162:sub_4045c2": null, "4212204:sub_4045ec": null, "4212352:cgc_has_happened": "typedef struct struct_1 {\n
    char padding_0[400];\n
    struct struct_0 *field_190;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_has_happened(char *v0, struct_1 *a0)\n
{\n
    int tmp_2;  // tmp #2\n
    char *v1;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebp\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
    void* v6;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v7;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v2 = &prng_s;\n
    v3 = v0;\n
    v5 = 0;\n
    v6 = 0;\n
    do\n
    {\n
        v4 = *((v3 + v1));\n
        if (*((v3 + v1)) != 3)\n
        {\n
            v5 ^= *((v2 + v4 * 8));\n
            v6 ^= *((v2 + v4 * 8 + 4));\n
        }\n
        v1 += 1;\n
        v2 += 16;\n
    } while (v1 != 361);\n
    v7 = a0->field_190;\n
    while (true)\n
    {\n
        if (!(*((v7 + 4)) ^ v6) && !(*(v7) ^ v5))\n
            return 1;\n
        tmp_2 = v7;\n
        v7 = *((v7 + 8));\n
        if (v7 == tmp_2)\n
            return 0;\n
    }\n
}\n
", "4212390:sub_4046a6": null, "4212484:sub_404704": null, "4212496:cgc_score": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[371];\n
    unsigned int field_174;\n
    unsigned int field_178;\n
} struct_0;\n
\n
int cgc_score(struct_0 *v2, unsigned int *a0, unsigned int *a1)\n
{\n
    void* v0;  // [bp-0x180], Other Possible Types: unsigned int\n
    char v1[8];  // [bp-0x179]\n
    struct_0 *v3;  // edi\n
    struct_0 *v4;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebp\n
    char v6;  // al\n
    char v7;  // sil\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int *v10;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
\n
    v3 = v2;\n
    *(a0) = v3->field_174;\n
    *(a1) = v3->field_178;\n
    v0 = 0;\n
    do\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v5 = v4;\n
            cgc_memset(v1, 0, 361);\n
            v6 = (&v3->field_0)[v4];\n
            v10 = a1;\n
            if (v6 != 2)\n
            {\n
                v10 = a0;\n
                if (v6 != 1)\n
                {\n
                    v7 = v0;\n
                    v8 = cgc_surrounded_by(v2, v1, v4, v7, 1);\n
                    v10 = a0;\n
                    if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, al<1>), 0x1<32>, 0x0<32>))\n
                    {\n
                        v9 = cgc_surrounded_by(v2, v1, v4, v7, 2);\n
                        v4 = v5;\n
                        v10 = a1;\n
                        if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, al<1>), 0x2<32>, 0x0<32>))\n
                            continue;\n
                    }\n
                }\n
            }\n
            *(v10) = *(v10) + 1;\n
            v4 += 1;\n
        } while (v4 != 19);\n
        v11 = &v3->padding_1[18];\n
        v0 += 1;\n
    } while (v0 != 19);\n
    return 0;\n
}\n
", "4212787:sub_404833": null, "4212800:cgc_check_and_play": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[399];\n
    struct struct_0 *field_190;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_check_and_play(struct struct_1 **v5, char a0, char a1, char a2, char a3)\n
{\n
    struct_1 *v0;  // [bp-0x24], Other Possible Types: char\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_1 *v6;  // edi\n
    unsigned int v7;  // ebp\n
    char *v9;  // eax\n
    char *v10;  // esi\n
    char v11;  // dl\n
    unsigned int v12;  // edi\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v17;  // eax, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
\n
    v6 = *(v5);\n
    v7 = a1;\n
    v1 = a2;\n
    if (v1 != 3 && (&v6->field_0)[16 * v7 + 2 * v7 + v7 + *(&v0)] != 3)\n
        return -1;\n
    v0 = a0;\n
    v9 = cgc_calloc(1, 404);\n
    if (!v9)\n
    {\n
        cgc__terminate();\n
        return cgc_print_rchar();\n
    }\n
    v10 = v9;\n
    cgc_memcpy(v9, v6, 404);\n
    v11 = v1;\n
    *((v0 + &v9[18 * v7 + v7])) = v11;\n
    v4 = 2 - (v11 == 2);\n
    v3 = cgc_remove_captures(v9, v4);\n
    v2 = cgc_remove_captures(v9, v11);\n
    v0 = *(v5);\n
    v15 = 0;\n
    v16 = &prng_s;\n
    v13 = 0;\n
    v14 = 0;\n
    do\n
    {\n
        v12 = v10[v15];\n
        if (v12 != 3)\n
        {\n
            v13 ^= *((v16 + v12 * 8));\n
            v14 ^= *((v16 + v12 * 8 + 4));\n
        }\n
        v15 += 1;\n
        v16 += 16;\n
    } while (v15 != 361);\n
    v17 = v0->field_190;\n
    do\n
    {\n
        if (!(*((v17 + 4)) ^ v14) && !(*(v17) ^ v13))\n
        {\n
            cgc_free(v10);\n
            return -1;\n
        }\n
        tmp_2 = v17;\n
        v17 = *((v17 + 8));\n
    } while (v17 != tmp_2);\n
    if (!a3)\n
    {\n
        cgc_free(v10);\n
    }\n
    else\n
    {\n
        cgc_free(v0);\n
        *(v5) = &v10;\n
        v18 = v1;\n
        *(&v10[376 + 4 * v18]) = *(&v10[376 + 4 * v18]) + 1;\n
        *(&v10[368 + 4 * v18]) = *(&v10[368 + 4 * v18]) + v3;\n
        *(&v10[368 + 4 * v4]) = *(&v10[368 + 4 * v4]) + v2;\n
    }\n
    return 0;\n
}\n
", "4213051:sub_40493b": null, "4213248:cgc_print_rchar": "int cgc_print_rchar(char v2, char a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_11;  // tmp #11\n
    char v1;  // [bp-0xd]\n
    unsigned int v3;  // al, Other Possible Types: char\n
\n
    v3 = a0;\n
    if (!a0)\n
        return v3;\n
    do\n
    {\n
        v1 = v3;\n
        v0 = v2;\n
        cgc_fdprintf(1, \"%c\");\n
        v3 = v1;\n
        tmp_11 = v3;\n
        *(&v3) = v3 - 1;\n
    } while (!([D] x86g_calculate_condition(0x4<32>, 0x1<32>, t11, 0xff<32>, 0x0<32>)));\n
    return v3;\n
}\n
", "4213331:sub_404a53": null, "4213344:cgc_print_player": "int cgc_print_player(unsigned int v3, char a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_31;  // tmp #31\n
    int tmp_11;  // tmp #11\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x11]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ecx\n
    char v9;  // bl, Other Possible Types: unsigned int\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
\n
    v4 = v3;\n
    v5 = a0;\n
    v6 = \"Black\";\n
    if (v5 == 2)\n
        v6 = \"White\";\n
    v1 = *((v4 + v5 * 4 + 360));\n
    v0 = v6;\n
    cgc_fdprintf(1, \"%s: %d\");\n
    v10 = *((v4 + v5 * 4 + 360));\n
    if (!v10)\n
    {\n
        v9 = 13;\n
    }\n
    else\n
    {\n
        v9 = 14;\n
        do\n
        {\n
            v11 = v10 * 1717986919 >> 32 >> 31;\n
            v7 = (v10 * 1717986919 >> 32 >> 2) + (v10 * 1717986919 >> 32 >> 31);\n
            v8 = v10 + 9;\n
            v9 -= 1;\n
            tmp_31 = v8;\n
            v10 = v7;\n
        } while (tmp_31 > 18);\n
        if (!v9)\n
            return v11;\n
    }\n
    do\n
    {\n
        v2 = v9;\n
        v0 = 32;\n
        v11 = cgc_fdprintf(1, \"%c\");\n
        v9 = v2;\n
        tmp_11 = v9;\n
        *(&v9) = v9 - 1;\n
    } while (!([D] x86g_calculate_condition(0x4<32>, 0x1<32>, t11, 0xff<32>, 0x0<32>)));\n
    return v11;\n
}\n
", "4213528:sub_404b18": null, "4213536:cgc_print_point": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_point(unsigned int v2, char a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0xc]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
    char v4;  // dl\n
\n
    v1 = v3;\n
    v4 = a0;\n
    if (a0)\n
    {\n
        v0 = 32;\n
        v3 = cgc_fdprintf(1, \"%c\");\n
        v4 = a0;\n
    }\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, dl<1>), 0x12<32>, 0x0<32>)))\n
        return v3;\n
    *(&v3) = a1;\n
    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, dl<1>), 0x12<32>, 0x0<32>)))\n
        return v3;\n
    v3 = v3 + v3 * 18 + v2;\n
    *(&v3) = *((v4 + v3)) - 1;\n
    if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, dl<1>), 0x12<32>, 0x0<32>))\n
    {\n
        v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[12236 + 4 * v3]);\n
        cgc_fdprintf(1, \"%c\");\n
        v0 = (a0 == 18 ? 32 : 10);\n
        return cgc_fdprintf(1, \"%c\");\n
    }\n
    return v3;\n
}\n
", "4213695:sub_404bbf": null, "4213696:cgc_draw_game": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[387];\n
    unsigned int field_184;\n
    unsigned int field_188;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_draw_game(struct_0 *v9)\n
{\n
    int tmp_31;  // tmp #31\n
    int tmp_11;  // tmp #11\n
    char v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    char v3;  // [bp-0x21]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v10;  // esi\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edi\n
    struct_0 *v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    char v18;  // bl, Other Possible Types: unsigned int\n
    char v19;  // bl, Other Possible Types: unsigned int\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // cc_op\n
    unsigned int v26;  // cc_dep1\n
    unsigned int v27;  // cc_dep2\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // cc_op\n
    struct_1 *v30;  // cc_dep1\n
    unsigned int v31;  // cc_dep2\n
\n
    v8 = v10;\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v5 = &v9->padding_1;\n
    v11 = 0;\n
    v7 = \"White\";\n
    v6 = \"Black\";\n
    do\n
    {\n
        v15 = v11 - 9;\n
        v12 = -(v15);\n
        if (!(v15) < 0)\n
            v12 = v15;\n
        v4 = v11;\n
        if (v12 == 3)\n
        {\n
            v13 = v11 < 9;\n
            v15 = v6;\n
            v15 = v7;\n
            v2 = *(&v9->padding_1[363 + 4 * v13]);\n
            v1 = v15;\n
            cgc_fdprintf(1, \"%s: %d\");\n
            v17 = *(&v9->padding_1[363 + 4 * v13]);\n
            if (!v17)\n
            {\n
                v19 = 13;\n
                v11 = v4;\n
            }\n
            else\n
            {\n
                v19 = 14;\n
                do\n
                {\n
                    v22 = (v17 * 1717986919 >> 32 >> 2) + (v17 * 1717986919 >> 32 >> 31);\n
                    v23 = v17 + 9;\n
                    v19 -= 1;\n
                    tmp_31 = v23;\n
                    v17 = v22;\n
                } while (tmp_31 > 18);\n
                v11 = v4;\n
                if (!v19)\n
                    continue;\n
            }\n
            do\n
            {\n
                v3 = v19;\n
                v1 = 32;\n
                cgc_fdprintf(1, \"%c\");\n
                v19 = v3;\n
                tmp_11 = v19;\n
                *(&v19) = v19 - 1;\n
            } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, 0xffffffef<32>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        }\n
        else if (v11 != 9)\n
        {\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            continue;\n
        }\n
        else\n
        {\n
            v14 = v9;\n
            v2 = v14->field_188;\n
            v1 = v14->field_184;\n
            cgc_fdprintf(1, \"Ticks: %u\");\n
            v16 = v14->field_184;\n
            if (!v16)\n
            {\n
                v18 = 13;\n
                v11 = v4;\n
            }\n
            else\n
            {\n
                v18 = 14;\n
                do\n
                {\n
                    v20 = (v16 * 1717986919 >> 32 >> 2) + (v16 * 1717986919 >> 32 >> 31);\n
                    v21 = v16 + 9;\n
                    v18 -= 1;\n
                    tmp_31 = v21;\n
                    v16 = v20;\n
                } while (tmp_31 > 18);\n
                v11 = v4;\n
                if (!v18)\n
                    continue;\n
            }\n
            do\n
            {\n
                v3 = v18;\n
                v1 = 32;\n
                cgc_fdprintf(1, \"%c\");\n
                v18 = v3;\n
                tmp_11 = v18;\n
                *(&v18) = v18 - 1;\n
            } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, 0xffffffef<32>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        }\n
        *(&v15) = (&v9->field_0)[18 * v11 + v11] - 1;\n
        if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, 0xffffffef<32>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>)))\n
        {\n
            v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[12236 + 4 * v15]);\n
            cgc_fdprintf(1, \"%c\");\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
        }\n
        v24 = -18;\n
        do\n
        {\n
            v1 = 32;\n
            cgc_fdprintf(1, \"%c\");\n
            *(&v15) = *((v5 + v24 + 18)) - 1;\n
            v25 = 4;\n
            v26 = *(&v15);\n
            v27 = 2;\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, 0xffffffef<32>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>)))\n
            {\n
                v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[12236 + 4 * v15]);\n
                cgc_fdprintf(1, \"%c\");\n
                v28 = (v24 == -1 ? 32 : 10);\n
                v1 = v28;\n
                cgc_fdprintf(1, \"%c\");\n
                v29 = 3;\n
                v30 = &v0;\n
                v31 = 16;\n
            }\n
            v24 += 1;\n
        } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, 0xffffffef<32>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        v11 = v4 + 1;\n
        v5 += 19;\n
    } while (v11 != 19);\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    cgc_fdprintf(1, \"%c\");\n
    v1 = 10;\n
    return cgc_fdprintf(1, \"%c\");\n
}\n
", "4213826:sub_404c42": null, "4214012:sub_404cfc": null, "4214124:sub_404d6c": null, "4214561:sub_404f21": null, "4214750:sub_404fde": null, "4214752:cgc_sleep": "int cgc_sleep(unsigned int v3, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = v3;\n
    v2 = a0;\n
    v0 = 0;\n
    return cgc_fdwait(0, 0, 0, &v1);\n
}\n
", "4214809:sub_405019": null, "4214816:cgc_read_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1, unsigned int a2, char a3)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ebp\n
    char *v6;  // edi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return -1;\n
    }\n
    else if (!a1)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        v4 = 0;\n
        if (!a2)\n
        {\n
            while (true)\n
            {\n
                v0 = &v1;\n
                if (cgc_receive(v2, a1 + v4, 1))\n
                    break;\n
                v8 = v1;\n
                if (!v8)\n
                    return v4;\n
                v4 += v8;\n
                if (v4 >= v3)\n
                    return v4;\n
            }\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v5 = v3;\n
                v6 = a1 + v4;\n
                v0 = &v1;\n
                if (cgc_receive(v2, v6, 1))\n
                    break;\n
                v7 = v1;\n
                if (!v7)\n
                {\n
                    return v4;\n
                }\n
                else if (*(v6) != a3)\n
                {\n
                    v4 += v7;\n
                    v3 = v5;\n
                    if (v4 >= v5)\n
                        return v4;\n
                }\n
                else\n
                {\n
                    *(v6) = 0;\n
                    return v4;\n
                }\n
            }\n
        }\n
        return -1;\n
    }\n
}\n
", "4215022:sub_4050ee": null, "4215024:cgc_read_move": "int cgc_read_move(char *v4, char *a0, char *a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x30]\n
    char v1[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x19]\n
    char v3;  // [bp-0x11]\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
    char *v6;  // edi\n
    char v7[2];  // eax\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ebp\n
    char v10[2];  // edx, Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    char v12[2];  // ecx\n
    unsigned int v13;  // ecx, Other Possible Types: char\n
    unsigned int v14;  // eax\n
\n
    *(a1) = 0;\n
    cgc_memset(&v2, 0, 8);\n
    *(&v1) = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v6 = &v2;\n
        v0 = &v1;\n
        if (cgc_receive(0, v6, 1))\n
            break;\n
        v7 = v1;\n
        if (!v7)\n
            break;\n
        if (*(v6) != 10)\n
        {\n
            v5 = &v7[v5];\n
            if (v5 >= 8)\n
                break;\n
        }\n
        else\n
        {\n
            *(v6) = 0;\n
            break;\n
        }\n
    }\n
    v3 = 0;\n
    *(&v1) = 0;\n
    if (!cgc_strncmp(\"pass\", &v2, cgc_strlen(\"pass\")))\n
    {\n
        *(a1) = 1;\n
    }\n
    else\n
    {\n
        v8 = cgc_strtol(&v2, v1, 10);\n
        v10 = v1;\n
        if (v10 == &v2)\n
            return -1;\n
        if (v10 >= &v3)\n
            return -1;\n
        if (!v10)\n
        {\n
            v9 = v8;\n
            v10 = 0;\n
        }\n
        else\n
        {\n
            v13 = v10[0];\n
            v9 = v8;\n
            if (v10[0])\n
            {\n
                while (v10 < &v3)\n
                {\n
                    v11 = cgc_isdigit(v13);\n
                    v12 = v1;\n
                    if (!v11)\n
                    {\n
                        v10 = &v12[1];\n
                        v1 = v10;\n
                        v13 = v12[1];\n
                        if (!v13)\n
                            break;\n
                    }\n
                    else\n
                    {\n
                        v10 = v12;\n
                        break;\n
                    }\n
                }\n
            }\n
        }\n
        v14 = cgc_strtol(v10, NULL, 10);\n
        if (v9 > 18)\n
            return -1;\n
        if (v14 < 0)\n
            return -1;\n
        if (v14 > 18)\n
            return -1;\n
        *(v4) = v9;\n
        *(a0) = v14;\n
    }\n
    return 0;\n
}\n
", "4215365:sub_405245": null, "4215376:cgc_end_game": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_end_game()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    unsigned int v3[93];  // [bp+0x4]\n
    char v4;  // [bp+0x8]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    unsigned int v11[93];  // edi\n
    unsigned int v13;  // ecx\n
\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = v3;\n
    cgc_free(v11);\n
    cgc_fdprintf(1, \"Game Over \");\n
    if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=stack_base+12, size=1, endness=Iend_LE)), 0x2<32>, 0x0<32>))\n
        cgc_fdprintf(1, *(&(&_GLOBAL_OFFSET_TABLE_)[312 + 4 * v5]));\n
    cgc_fdprintf(1, \"You are a \");\n
    v13 = \"Loser, \";\n
    if (v11[91] > v11[92])\n
        v13 = \"Winner, \";\n
    cgc_fdprintf(1, v13);\n
    cgc_fdprintf(1, *(&v4));\n
    cgc__terminate(0);\n
    cgc_prompt_move();\n
    return;\n
}\n
", "4215568:cgc_prompt_move": "int cgc_prompt_move(unsigned int v2[99], char a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3[99];  // eax\n
    unsigned int v4;  // eax\n
\n
    v3 = v2;\n
    v1 = v3[98];\n
    v0 = v3[97];\n
    v4 = cgc_fdprintf(1, \"%d \");\n
    *(&v4) = a0;\n
    if (a0 == 1)\n
    {\n
        return cgc_fdprintf(1, \"B >\");\n
    }\n
    else if (v4 != 2)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        return cgc_fdprintf(1, \"W >\");\n
    }\n
}\n
", "4215664:cgc_color_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_color_to_string(char v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Load(addr=stack_base+4, size=1, endness=Iend_LE) - 0x1<8>)), 0x4<32>, 0x0<32>)))\n
    {\n
        v0 = 1;\n
        cgc__terminate();\n
        return cgc_pass_for();\n
    }\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[300 + 4 * (v1 - 1)]);\n
}\n
", "4215728:cgc_pass_for": "typedef struct struct_0 {\n
    char padding_0[396];\n
    char field_18c;\n
} struct_0;\n
\n
int cgc_pass_for(struct_0 *v0, char a0)\n
{\n
    int tmp_3;  // tmp #3\n
    struct_0 *v1;  // ecx\n
\n
    v1 = v0;\n
    tmp_3 = v1->field_18c + 1;\n
    v1->field_18c = v1->field_18c + 1;\n
    return -([D] x86g_calculate_condition(0x3<32>, 0x4<32>, Conv(8->32, t3), 0x2<32>, 0x0<32>) & a0 == 2);\n
}\n
", "4215770:sub_4053da": null, "4215776:cgc_interact": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[391];\n
    unsigned int field_188;\n
    char field_18c;\n
    char padding_18d[3];\n
    struct struct_0 *field_190;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_interact(struct struct_1 **v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_1;  // tmp #1\n
    char v1;  // [bp-0x13]\n
    char v2;  // [bp-0x12]\n
    char v3;  // [bp-0x11]\n
    struct struct_1 **v5;  // edi\n
    unsigned int v6;  // eax\n
    struct_1 *v7;  // eax\n
    struct_1 *v8;  // eax\n
    void* v9;  // esi, Other Possible Types: unsigned int\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // ecx\n
    unsigned int *v13;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v15[3];  // eax\n
\n
    v5 = v4;\n
    v0 = *(v5)->field_188;\n
    cgc_fdprintf(1, \"%d \");\n
    if (a0 == 1)\n
    {\n
        v6 = \"B >\";\n
    }\n
    else\n
    {\n
        if (!(a0 == 2))\n
            goto LABEL_40543e;\n
        v6 = \"W >\";\n
    }\n
    cgc_fdprintf(1, v6);\n
LABEL_40543e:\n
    if (cgc_read_move(&v3, &v2, &v1) < 0)\n
        return -1;\n
    v7 = *(v5);\n
    if (v1)\n
    {\n
        tmp_1 = v7->field_18c + 1;\n
        v7->field_18c = v7->field_18c + 1;\n
        return [D] x86g_calculate_condition(0x3<32>, 0x4<32>, Conv(8->32, t1), 0x2<32>, 0x0<32>) & a0 == 2;\n
    }\n
    v7->field_18c = 0;\n
    if (cgc_check_and_play(v5, v3, v2, a0, 1) < 0)\n
        return -1;\n
    v8 = *(v5);\n
    v12 = 0;\n
    v13 = &prng_s;\n
    v9 = 0;\n
    v10 = 0;\n
    do\n
    {\n
        v11 = (&v8->field_0)[v12];\n
        if ((&v8->field_0)[v12] != 3)\n
        {\n
            v9 ^= *((v13 + v11 * 8));\n
            v10 ^= *((v13 + v11 * 8 + 4));\n
        }\n
        v12 += 1;\n
        v13 += 16;\n
    } while (v12 != 361);\n
    v14 = v8->field_190;\n
    v15 = cgc_calloc(1, 12);\n
    if (v15)\n
    {\n
        v15[2] = v15;\n
        v15[0] = v9;\n
        v15[1] = v10;\n
        *((v14 + 8)) = v15;\n
        return 0;\n
    }\n
    cgc__terminate();\n
    return cgc_calculate_move();\n
}\n
", "4216144:cgc_calculate_move": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_40a584;\n
extern char prng_s;\n
\n
int cgc_calculate_move(unsigned int v18, unsigned int a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x31c]\n
    int tmp_2;  // tmp #2\n
    int tmp_18;  // tmp #18\n
    char v1;  // [bp-0x315]\n
    unsigned int v2;  // [bp-0x314]\n
    char v3;  // [bp-0x30f]\n
    char v4;  // [bp-0x30e]\n
    char v5;  // [bp-0x30d]\n
    unsigned int v6;  // [bp-0x30c]\n
    unsigned int v7;  // [bp-0x308]\n
    unsigned int v8;  // [bp-0x304]\n
    unsigned int v9;  // [bp-0x300]\n
    unsigned int v10;  // [bp-0x2fc]\n
    unsigned int v11;  // [bp-0x2f8]\n
    unsigned int v12;  // [bp-0x2f4]\n
    unsigned int v13;  // [bp-0x2f0]\n
    unsigned int v14;  // [bp-0x2ec]\n
    unsigned int v15;  // [bp-0x2e8]\n
    char v16;  // [bp-0x2e2]\n
    char v17;  // [bp-0x179]\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // esi\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // esi\n
    char v24;  // dl\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ecx, Other Possible Types: char\n
    unsigned int v27;  // eax\n
    char v28;  // dl\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // ebp\n
    unsigned int v42;  // esi\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // ebp\n
    unsigned int v47;  // esi\n
    unsigned int v49;  // ebp\n
    unsigned int v50;  // ecx\n
    unsigned int v51;  // ecx\n
    unsigned int v52;  // ebp\n
    unsigned int v53;  // edi\n
    unsigned int v55;  // ecx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // edi\n
    unsigned int v59;  // eax\n
    unsigned int v60;  // ebp\n
    unsigned int v61;  // ecx\n
    unsigned int v62;  // ebp\n
    unsigned int v63;  // esi\n
    unsigned int v64;  // edi\n
    unsigned int v65;  // edx, Other Possible Types: char\n
    unsigned int v66;  // eax\n
    unsigned int v70;  // esi\n
    unsigned int v72;  // ecx\n
    unsigned int v73;  // eax\n
    unsigned int v74;  // ecx, Other Possible Types: char\n
\n
    v1 = 2 - (a2 == 2);\n
    v5 = a2 == 4;\n
    v20 = 0;\n
    v9 = 0;\n
    v10 = 0;\n
    while (true)\n
    {\n
        v11 = v20 + 1;\n
        v8 = v20;\n
        v12 = v20 - 1;\n
        v73 = 0;\n
        do\n
        {\n
            v21 = v73;\n
            cgc_memset(&v17, 0, 361);\n
            v22 = *(v18);\n
            v25 = v73 + 1;\n
            v13 = v25;\n
            v26 = 17;\n
            *(&v25) = v5;\n
            v2 = v21;\n
            v23 = v8;\n
            v25 = v23 + v23 * 18 + v22;\n
            *(&v25) = *((v13 + v25)) == a2;\n
            v26 = v2;\n
            *(&v26) = v26 - 1;\n
            v24 = 4;\n
            if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, cl<1>), 0x12<32>, 0x0<32>)))\n
                goto LABEL_405658;\n
            v24 = *((v26 + v23 + v23 * 18 + v22));\n
LABEL_405658:\n
            v27 = v25 + (v24 == a2);\n
            v28 = 4;\n
            if (v23 <= 17)\n
            {\n
                v26 = v11;\n
                v28 = *((v2 + v26 + v26 * 18 + v22));\n
            }\n
            v29 = v27 + (v28 == a2);\n
            *(&v26) = 4;\n
            if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, cl<1>), 0x5<32>, 0x0<32>))\n
            {\n
                v30 = v12;\n
                *(&v26) = *((v2 + v30 + v30 * 18 + v22));\n
            }\n
            v65 = 0;\n
            *(&v65) = v26 == a2;\n
            v31 = 0;\n
            if (v29 + v65 - 1 <= 3)\n
                v31 = (&_GLOBAL_OFFSET_TABLE_)[3057 + v65 + v29];\n
            if (v31 >= v10)\n
            {\n
                if (a2 != 3)\n
                {\n
                    v32 = v8;\n
                    if (!(*((v2 + v32 + (v32 + (v32 << 3) << 1) + v22)) == 3))\n
                        goto LABEL_4055e0;\n
                }\n
                v33 = cgc_calloc(1, 404);\n
                if (!v33)\n
                {\n
                    cgc__terminate();\n
                    return cgc_ai();\n
                }\n
                v34 = v33;\n
                v15 = v31;\n
                cgc_memcpy(v33, v22, 404);\n
                v35 = v8;\n
                *((v2 + v35 + v35 * 18 + v33)) = a2;\n
                v36 = cgc_calloc(1, 404);\n
                if (v36)\n
                {\n
                    v37 = v36;\n
                    cgc_memcpy(v36, v34, 404);\n
                    v38 = 0;\n
                    v6 = v36;\n
                    v7 = v34;\n
                    do\n
                    {\n
                        v39 = 0;\n
                        do\n
                        {\n
                            v0 = v39;\n
                            cgc_memset(&v16, 0, 361);\n
                            v40 = v0;\n
                            if (*((v37 + v40)) == v1)\n
                            {\n
                                v40 = v0;\n
                                if (!cgc_has_liberty(v6, &v16, v0, v38, v1))\n
                                    *((v34 + v40)) = 3;\n
                            }\n
                            v39 = v40 + 1;\n
                        } while (v39 != 19);\n
                        v41 = v34 + 19;\n
                        v42 = v37 + 19;\n
                    } while (v38 + 1 != 19);\n
                    cgc_free(v6);\n
                    v44 = cgc_calloc(1, 404);\n
                    if (v44)\n
                    {\n
                        v45 = v44;\n
                        v46 = v7;\n
                        cgc_memcpy(v44, v7, 404);\n
                        v6 = v44;\n
                        if (a2 != 4)\n
                        {\n
                            v49 = 0;\n
                            v14 = v46;\n
                            do\n
                            {\n
                                v55 = 0;\n
                                do\n
                                {\n
                                    v0 = v55;\n
                                    cgc_memset(&v16, 0, 361);\n
                                    v56 = v0;\n
                                    if (*((v45 + v56)) == a2)\n
                                    {\n
                                        v56 = v0;\n
                                        if (!cgc_has_liberty(v6, &v16, v0, v49, a2))\n
                                            *((v14 + v56)) = 3;\n
                                    }\n
                                    v55 = v56 + 1;\n
                                } while (v55 != 19);\n
                                v14 += 19;\n
                                v57 = v45 + 19;\n
                            } while (v49 + 1 != 19);\n
                        }\n
                        else\n
                        {\n
                            v47 = 0;\n
                            do\n
                            {\n
                                v50 = 0;\n
                                do\n
                                {\n
                                    v0 = v50;\n
                                    cgc_memset(&v16, 0, 361);\n
                                    v51 = v0;\n
                                    if (*((v45 + v51)) == 4)\n
                                    {\n
                                        v51 = v0;\n
                                        if (!cgc_has_liberty(v6, &v16, v0, v47, 0x4))\n
                                            *((v46 + v51)) = 3;\n
                                    }\n
                                    v50 = v51 + 1;\n
                                } while (v50 != 19);\n
                                v52 = v46 + 19;\n
                                v53 = v45 + 19;\n
                            } while (v47 + 1 != 19);\n
                        }\n
                        cgc_free(v6);\n
                        v63 = 0;\n
                        v64 = &prng_s;\n
                        v59 = 0;\n
                        v61 = 0;\n
                        v62 = v7;\n
                        do\n
                        {\n
                            v60 = *((v62 + v63));\n
                            if (v60 != 3)\n
                            {\n
                                v59 ^= *((v64 + v60 * 8));\n
                                v61 ^= *((v64 + v60 * 8 + 4));\n
                            }\n
                            v63 += 1;\n
                            v64 += 16;\n
                            v62 = v7;\n
                        } while (v63 != 361);\n
                        v65 = *((*(v18) + 400));\n
                        do\n
                        {\n
                            if (!(*((v65 + 4)) ^ v61) && !(*(v65) ^ v59))\n
                            {\n
                                cgc_free(v7);\n
                                goto LABEL_4055e0;\n
                            }\n
                            tmp_2 = v65;\n
                            v65 = *((v65 + 8));\n
                        } while (v65 != tmp_2);\n
                        cgc_free(v7);\n
                        (&_GLOBAL_OFFSET_TABLE_)[79] = (&_GLOBAL_OFFSET_TABLE_)[79] + 1;\n
                        v66 = 1103515245 * prng_s;\n
                        tmp_18 = v66;\n
                        g_40a584 = g_40a584 * 1103515245 + (1103515245 * prng_s >> 32) + (tmp_18 + 12345 < tmp_18);\n
                        prng_s = v66 + 12345;\n
                        v70 = v15;\n
                        if (((g_40a584 CONCAT prng_s) * 0x10000 >> 32) - (((g_40a584 CONCAT prng_s) * 0x10000 >> 32) * 1374389535 >> 32 >> 5) * 100 > (v70 == v10 ? 75 : 90))\n
                        {\n
                            v72 = v9;\n
                            *(&v72) = v72 + 1;\n
                            if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, cl<1>), 0x5<32>, 0x0<32>))\n
                            {\n
                                v9 = v72;\n
                                v10 = v70;\n
                                v3 = v2;\n
                                v4 = v8;\n
                                goto LABEL_4055e0;\n
                            }\n
                            else\n
                            {\n
                                v74 = v4;\n
                                v65 = v2;\n
                            }\n
LABEL_405acb:\n
                            *(a0) = v65;\n
                            v20 = a1;\n
                            *(v20) = v74;\n
                            *(&v20) = 1;\n
                            return v20;\n
                        }\n
                        goto LABEL_4055e0;\n
                    }\n
                }\n
            }\n
LABEL_4055e0:\n
            v73 = v13;\n
        } while (v73 != 19);\n
        v74 = v11;\n
        v20 = v74;\n
        if (v74 != 19)\n
            continue;\n
        *(&v74) = v4;\n
        *(&v65) = v3;\n
        if (!v9)\n
        {\n
            *(&v20) = 2;\n
            return v20;\n
        }\n
        goto LABEL_405acb;\n
    }\n
}\n
", "4216222:sub_40559e": null, "4216707:sub_405783": null, "4216742:sub_4057a6": null, "4216853:sub_405815": null, "4216948:sub_405874": null, "4216986:sub_40589a": null, "4217095:sub_405907": null, "4217132:sub_40592c": null, "4217243:sub_40599b": null, "4217290:sub_4059ca": null, "4217333:sub_4059f5": null, "4217616:cgc_ai": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[395];\n
    char field_18c;\n
    char padding_18d[3];\n
    struct struct_0 *field_190;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned int prng_s;\n
\n
int cgc_ai(struct struct_1 **v3, char a0)\n
{\n
    char v0;  // [bp-0x12]\n
    char v1;  // [bp-0x11]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v4;  // esi\n
    char v5;  // dl\n
    struct struct_1 **v6;  // esi\n
    unsigned int v7;  // eax\n
    struct_1 *v9;  // eax\n
    unsigned int v10;  // ebp\n
    void* v11;  // esi, Other Possible Types: unsigned int\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v15;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v16[3];  // eax\n
\n
    v2 = v4;\n
    v5 = a0;\n
    v6 = v3;\n
    v7 = cgc_calculate_move(v6, &v1, &v0, v5);\n
    if (v7 == 2)\n
    {\n
        *(v6)->field_18c = *(v6)->field_18c + 1;\n
        return 0;\n
    }\n
    if (v7 != 1)\n
    {\n
        cgc__terminate();\n
        return cgc_pb();\n
    }\n
    cgc_check_and_play(v6, v1, v0, v5, 1);\n
    v9 = *(v6);\n
    v13 = 0;\n
    v14 = &prng_s;\n
    v11 = 0;\n
    v12 = 0;\n
    do\n
    {\n
        v10 = (&v9->field_0)[v13];\n
        if ((&v9->field_0)[v13] != 3)\n
        {\n
            v11 ^= *((v14 + v10 * 8));\n
            v12 ^= *((v14 + v10 * 8 + 4));\n
        }\n
        v13 += 1;\n
        v14 += 16;\n
    } while (v13 != 361);\n
    v15 = v9->field_190;\n
    v16 = cgc_calloc(1, 12);\n
    if (v16)\n
    {\n
        v16[2] = v16;\n
        v16[0] = v11;\n
        v16[1] = v12;\n
        *((v15 + 8)) = v16;\n
        return 0;\n
    }\n
}\n
", "4217726:sub_405b7e": null, "4217872:cgc_pb": "extern unsigned int g_40744f;\n
\n
int cgc_pb(char v1[19])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v2[19];  // esi\n
    unsigned int v3;  // edi\n
\n
    v2 = v1;\n
    cgc_fdprintf(2, \"@@\");\n
    v3 = 18;\n
    do\n
    {\n
        v0 = v2[18 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[17 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[16 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[15 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[14 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[13 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[12 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[11 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[10 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[9 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[8 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[7 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[6 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[5 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[4 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[3 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[2 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[1 + v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v0 = v2[v3];\n
        cgc_fdprintf(2, \"%d\");\n
        v3 += 19;\n
    } while (v3 != 379);\n
    return cgc_fdprintf(2, &g_40744f);\n
}\n
", "4218355:sub_405df3": null, "4218368:main": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
    char padding_4[360];\n
    unsigned int field_16c;\n
    unsigned int field_170;\n
    unsigned int field_174;\n
    unsigned int field_178;\n
    unsigned int field_17c;\n
    unsigned int field_180;\n
    struct struct_1 *field_184;\n
    unsigned int field_188;\n
    char field_18c;\n
    char padding_18d[3];\n
    struct struct_0 *field_190;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_40a584;\n
extern struct_3 g_40a590;\n
extern unsigned int pcnt;\n
extern unsigned int prng_s;\n
\n
int main()\n
{\n
    struct_1 *v0;  // [bp-0x1c0]\n
    int tmp_9;  // tmp #9\n
    int tmp_35;  // tmp #35\n
    char <0x405e00[is_27]|Stack bp+0x38, 1 B>;  // [bp+0x38]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x1b4]\n
    struct_2 *v2;  // [bp-0x190]\n
    void* v3;  // [bp-0x17c]\n
    struct_2 *v4;  // [bp-0x20]\n
    struct_2 *v5;  // [bp-0x1c]\n
    struct_2 *v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    struct_2 *v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_2 *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_2 *v11;  // [bp-0x4], Other Possible Types: unsigned int\n
    struct_2 *v12;  // [bp+0x0], Other Possible Types: unsigned int, void*\n
    struct_2 *v13;  // [bp+0x4], Other Possible Types: unsigned int, struct_1 *\n
    char *v14;  // [bp+0x8], Other Possible Types: unsigned int\n
    struct_2 *v15;  // [bp+0xc], Other Possible Types: unsigned int\n
    struct_2 *v16;  // [bp+0x10]\n
    struct_2 *v17;  // [bp+0x14], Other Possible Types: char\n
    struct_2 *v18;  // [bp+0x18], Other Possible Types: unsigned int\n
    struct_2 *v19;  // [bp+0x1c], Other Possible Types: char\n
    char v20;  // [bp+0x20]\n
    struct_2 *v21;  // [bp+0x24], Other Possible Types: unsigned int\n
    struct_2 *v22;  // [bp+0x28], Other Possible Types: unsigned int\n
    struct_2 *v23;  // [bp+0x2c]\n
    char v24;  // [bp+0x33]\n
    struct_2 *v25;  // [bp+0x34], Other Possible Types: unsigned int\n
    void* v26;  // [bp+0x38]\n
    struct_2 *v27;  // [bp+0x3c]\n
    struct_2 *v28;  // [bp+0x40], Other Possible Types: char\n
    unsigned int v29;  // [bp+0x44]\n
    char v30;  // [bp+0x48]\n
    void* v31;  // [bp+0x50]\n
    char v32;  // [bp+0x58]\n
    struct_1 *v33;  // ebx\n
    struct_2 *v34;  // edi\n
    struct_2 *v35;  // esi\n
    void* v36;  // esi, Other Possible Types: unsigned int\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // edi\n
    struct_3 *v39;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // ecx\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // eax\n
    unsigned int v48;  // ecx\n
    struct_2 *v49;  // eax, Other Possible Types: unsigned int\n
    void* v50;  // esi, Other Possible Types: unsigned int\n
    unsigned int v51;  // eax\n
    struct_2 *v52;  // eax\n
    void* v53;  // esi, Other Possible Types: unsigned int\n
    unsigned int v54;  // eax\n
    char *v55;  // ebp\n
    struct_2 *v56;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v57;  // ecx\n
    unsigned int v58;  // eax\n
    struct_2 *v59;  // edx\n
    unsigned int v60;  // esi\n
    struct_2 *v61;  // eax\n
    struct_2 *v62;  // edi\n
    struct_2 *v63;  // eax\n
    unsigned int v64;  // esi\n
    unsigned int v65;  // ebp\n
    struct_2 *v66;  // esi\n
    struct_2 *v67;  // eax\n
    unsigned int v68;  // edi\n
    unsigned int v69;  // ebp\n
    struct_2 *v70;  // edi\n
    void* v71;  // eax, Other Possible Types: unsigned int\n
    void* v72;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v73;  // ebp\n
    unsigned int v74;  // edi\n
    unsigned int v75;  // edx\n
    unsigned int *v76;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v77;  // edx, Other Possible Types: unsigned int\n
    struct_2 *v78;  // edi, Other Possible Types: unsigned int\n
    struct_2 *v79;  // ebp\n
    unsigned int v80;  // eax\n
    unsigned int *v81;  // ecx, Other Possible Types: unsigned int\n
    void* v82;  // esi, Other Possible Types: unsigned int\n
    void* v83;  // edi, Other Possible Types: unsigned int\n
    unsigned int v84;  // edx\n
    struct_0 *v85;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v86[3];  // eax\n
    unsigned int v87;  // ecx\n
    struct_2 *v88;  // edx, Other Possible Types: unsigned int\n
    struct_2 *v89;  // ebp\n
    char v90;  // al\n
    struct_2 *v91;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v92;  // edi\n
    struct_2 *v93;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v94;  // eax\n
    unsigned int v95;  // eax\n
    unsigned int v96;  // esi\n
    struct_2 *v97;  // eax\n
    struct_2 *v98;  // edi\n
    struct_2 *v99;  // eax\n
    unsigned int v100;  // esi\n
    unsigned int v101;  // ebp\n
    struct_2 *v102;  // esi\n
    struct_2 *v103;  // eax\n
    unsigned int v104;  // edi\n
    unsigned int v105;  // ebp\n
    unsigned int v106;  // edi\n
    unsigned int v107;  // edx\n
    unsigned int *v108;  // esi, Other Possible Types: unsigned int\n
    void* v109;  // eax, Other Possible Types: unsigned int\n
    void* v110;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v111;  // edi\n
    struct_0 *v112;  // edx, Other Possible Types: unsigned int\n
    unsigned int v113;  // eax\n
    unsigned int *v114;  // ecx, Other Possible Types: unsigned int\n
    void* v115;  // esi, Other Possible Types: unsigned int\n
    void* v116;  // edi, Other Possible Types: unsigned int\n
    unsigned int v117;  // edx\n
    struct_0 *v118;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v119[3];  // eax\n
    struct_2 *v120;  // edi\n
    unsigned int v121;  // ecx\n
    struct_2 *v122;  // edx, Other Possible Types: unsigned int\n
    struct_2 *v123;  // ebp\n
    char v124;  // al\n
    struct_2 *v125;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v126;  // edi\n
    struct_2 *v127;  // esi, Other Possible Types: unsigned int\n
    unsigned int v128;  // eax\n
    unsigned int v129;  // eax\n
    unsigned int v130;  // ecx\n
    unsigned int v131;  // cc_dep2\n
    unsigned int v132;  // eax\n
    unsigned int v133;  // ecx\n
\n
    v10 = v33;\n
    v9 = v34;\n
    v8 = v35;\n
    v3 = 0;\n
    v36 = 0;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(0, &(&_GLOBAL_OFFSET_TABLE_)[v36 + 324], 1))\n
            break;\n
        v37 = v3;\n
        if (!v37)\n
            break;\n
        v36 += v37;\n
        if (v36 >= 8)\n
            break;\n
    }\n
    v1 = pcnt;\n
    v48 = g_40a584;\n
    v47 = prng_s;\n
    v38 = 361;\n
    v39 = &g_40a590.field_-8;\n
    do\n
    {\n
        v40 = v47 * 1103515245 >> 32;\n
        v41 = v47 * 1103515245;\n
        v42 = v48 * 1103515245;\n
        tmp_9 = v41;\n
        v43 = v41 + 12345;\n
        v44 = v42 + v40 + (tmp_9 + 12345 < tmp_9);\n
        *((v39 - 8)) = (v44 CONCAT v43) * 0x10000 >> 32;\n
        *((v39 - 4)) = 0;\n
        v46 = v43 * 1103515245;\n
        tmp_35 = v46;\n
        v47 = v46 + 12345;\n
        v48 = (v43 * 1103515245 >> 32) + v44 * 1103515245 + (tmp_35 + 12345 < tmp_35);\n
        *(v39) = (v48 CONCAT v47) * 0x10000 >> 32;\n
        *((v39 + 4)) = 0;\n
        v39 += 16;\n
        v38 -= 1;\n
    } while (true);\n
    pcnt = v1 + 722;\n
    prng_s = v47;\n
    g_40a584 = v48;\n
    v49 = cgc_init_game(NULL);\n
    v2 = v49;\n
    if (!(!v49))\n
        goto LABEL_405f0b;\n
    while (true)\n
    {\n
LABEL_405f01:\n
        v8 = 1;\n
        v49 = cgc__terminate();\n
LABEL_405f0b:\n
        v16 = v49;\n
        v9 = &\"What is your name?\\n
\";\n
        v8 = 1;\n
        cgc_fdprintf(v13, v14);\n
        v31 = 0;\n
        v50 = 0;\n
        do\n
        {\n
            v11 = &v31;\n
            v10 = 1;\n
            v9 = &(&<0x405e00[is_27]|Stack bp+0x38, 1 B>)[v50];\n
            v8 = 0;\n
            if (cgc_receive(v13, v14, v15))\n
            {\n
                v9 = \"Need a name, bro\\n
\";\n
                v8 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v12 = 1;\n
                cgc__terminate(1);\n
LABEL_405f8b:\n
                *(v9) = 0;\n
                goto LABEL_405f8e;\n
            }\n
            v51 = *(&v28);\n
            if (!v51)\n
                goto LABEL_405f8e;\n
            if (*(v9) == 10)\n
                goto LABEL_405f8b;\n
            v50 += v51;\n
        } while (v50 < 8);\n
LABEL_405f8e:\n
        v10 = &<0x405e00[is_27]|Stack bp+0x38, 1 B>;\n
        v9 = &\"Hi, %s\\n
\";\n
        v8 = 1;\n
        cgc_fdprintf(v13, v14);\n
        v127 = *(&v20);\n
        v12 = v127;\n
        cgc_draw_game(v127);\n
        v29 = \"%d \";\n
        v28 = &\"B >\";\n
        while (true)\n
        {\n
            v16 = v127;\n
            while (true)\n
            {\n
                v52 = v16;\n
                v11 = v52->field_188;\n
                v10 = v52->field_184;\n
                v9 = v25;\n
                v8 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v13 = v28;\n
                v12 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v14 = 8;\n
                v13 = 0;\n
                v12 = &v31;\n
                cgc_memset(v13, v14, v15);\n
                v23 = 0;\n
                v53 = 0;\n
                while (true)\n
                {\n
                    v11 = &v19;\n
                    v10 = 1;\n
                    v9 = &v28 + v53;\n
                    v8 = 0;\n
                    if (cgc_receive(v13, v14, v15))\n
                        break;\n
                    v54 = *(&v19);\n
                    if (!v54)\n
                        break;\n
                    if (v9->field_0 != 10)\n
                    {\n
                        v53 += v54;\n
                        if (v53 >= 8)\n
                            break;\n
                    }\n
                    else\n
                    {\n
                        *(&v9->field_0) = 0;\n
                        break;\n
                    }\n
                }\n
                v30 = 0;\n
                v19 = 0;\n
                v8 = &\"pass\";\n
                v14 = cgc_strlen(&v31);\n
                v13 = &v31;\n
                v12 = &\"pass\";\n
                if (!cgc_strncmp(v13, v14, v15))\n
                    break;\n
                v10 = 10;\n
                v9 = &v19;\n
                v8 = &v31;\n
                v55 = cgc_strtol(v13, v14, v15);\n
                v56 = v23;\n
                if (v56 != &v31 && v56 < &v32)\n
                {\n
                    if (!v56)\n
                    {\n
                        v56 = 0;\n
                    }\n
                    else\n
                    {\n
                        *(&v48) = v56->field_0;\n
                        if (v56->field_0)\n
                        {\n
                            do\n
                            {\n
                                v8 = v48;\n
                                v57 = v23;\n
                                if (!cgc_isdigit(\"pass\"))\n
                                {\n
                                    v56 = &v57->field_0 + 1;\n
                                    v19 = v56;\n
                                    if (v56 >= &v32)\n
                                        break;\n
                                    continue;\n
                                }\n
                                else\n
                                {\n
                                    v56 = v57;\n
                                    break;\n
                                }\n
                                v48 = *(&v57->field_0 + 1);\n
                            } while (v48);\n
                        }\n
                    }\n
                    v10 = 10;\n
                    v9 = 0;\n
                    v8 = v56;\n
                    v58 = cgc_strtol(v13, v14, v15);\n
                    if (v55 <= 18 && v58 >= 0 && v58 < 19)\n
                    {\n
                        v59 = v16;\n
                        v59->field_18c = 0;\n
                        v60 = v58 + v58 * 18;\n
                        if (*((v55 + v59 + v60)) == 3)\n
                        {\n
                            v9 = 404;\n
                            v8 = 1;\n
                            v61 = cgc_calloc(v13, v14);\n
                            if (!v61)\n
                                goto LABEL_405f01;\n
                            v62 = v61;\n
                            v10 = 404;\n
                            v9 = v16;\n
                            v8 = v61;\n
                            cgc_memcpy(v13, v14, v15);\n
                            *((v55 + v60 + v61)) = 1;\n
                            v13 = 404;\n
                            v12 = 1;\n
                            v63 = cgc_calloc(v13, v14);\n
                            if (!v63)\n
                                goto LABEL_405f01;\n
                            v64 = v63;\n
                            v10 = 404;\n
                            v9 = v62;\n
                            v8 = v63;\n
                            cgc_memcpy(v13, v14, v15);\n
                            v18 = 0;\n
                            v21 = v63;\n
                            v22 = v62;\n
                            v19 = v62;\n
                            v26 = 0;\n
                            do\n
                            {\n
                                v65 = 0;\n
                                do\n
                                {\n
                                    v10 = 361;\n
                                    v9 = 0;\n
                                    v8 = &v28;\n
                                    cgc_memset(v13, v14, v15);\n
                                    if (*((v64 + v65)) == 2)\n
                                    {\n
                                        v8 = 2;\n
                                        v7 = v14;\n
                                        v6 = v65;\n
                                        v5 = &v28;\n
                                        v4 = *(&v17);\n
                                        if (!cgc_has_liberty(v13, v14, v15, v16, *(&v17)))\n
                                        {\n
                                            v22 += 1;\n
                                            *(&v15->field_0 + v65) = 3;\n
                                        }\n
                                    }\n
                                    v65 += 1;\n
                                } while (v65 != 19);\n
                                v15 = &v15->padding_4[15];\n
                                v66 = v64 + 19;\n
                                v14 += 1;\n
                            } while (v14 != 19);\n
                            v8 = *(&v17);\n
                            cgc_free(0x1);\n
                            v13 = 404;\n
                            v12 = 1;\n
                            v67 = cgc_calloc(v13, v14);\n
                            if (!v67)\n
                                goto LABEL_405f01;\n
                            v68 = v67;\n
                            v10 = 404;\n
                            v9 = v18;\n
                            v8 = v67;\n
                            cgc_memcpy(v13, v14, v15);\n
                            v18 = 0;\n
                            v21 = v67;\n
                            v19 = v9;\n
                            v25 = 0;\n
                            do\n
                            {\n
                                v69 = 0;\n
                                do\n
                                {\n
                                    v10 = 361;\n
                                    v9 = 0;\n
                                    v8 = &v28;\n
                                    cgc_memset(v13, v14, v15);\n
                                    if (*((v68 + v69)) == 1)\n
                                    {\n
                                        v8 = 1;\n
                                        v7 = v14;\n
                                        v6 = v69;\n
                                        v5 = &v28;\n
                                        v4 = *(&v17);\n
                                        if (!cgc_has_liberty(v13, v14, v15, v16, *(&v17)))\n
                                        {\n
                                            v21 += 1;\n
                                            *(&v15->field_0 + v69) = 3;\n
                                        }\n
                                    }\n
                                    v69 += 1;\n
                                } while (v69 != 19);\n
                                v15 = &v15->padding_4[15];\n
                                v70 = v68 + 19;\n
                                v14 += 1;\n
                            } while (v14 != 19);\n
                            v8 = *(&v17);\n
                            cgc_free(0x1);\n
                            v75 = 0;\n
                            v76 = &prng_s;\n
                            v71 = 0;\n
                            v72 = 0;\n
                            v73 = *(&v20);\n
                            do\n
                            {\n
                                v74 = *(&v18->field_0 + v75);\n
                                if (v74 != 3)\n
                                {\n
                                    v71 ^= *((v76 + v74 * 8));\n
                                    v72 ^= *((v76 + v74 * 8 + 4));\n
                                }\n
                                v75 += 1;\n
                                v76 += 16;\n
                            } while (v75 != 361);\n
                            v77 = v73->field_190;\n
                            while (!(!(*((v77 + 4)) ^ v72)) || !(!(*(v77) ^ v71)))\n
                            {\n
                                tmp_2 = v77;\n
                                v77 = *((v77 + 8));\n
                                if (v77 == tmp_2)\n
                                {\n
                                    v8 = v73;\n
                                    cgc_free(0x1);\n
                                    v79 = v22;\n
                                    v27 = v22;\n
                                    *((v22 + 380)) = *((v22 + 380)) + 1;\n
                                    *((v22 + 372)) = *((v22 + 372)) + v26;\n
                                    *((v22 + 376)) = *((v22 + 376)) + v25;\n
                                    v80 = 0;\n
                                    v81 = &prng_s;\n
                                    v82 = 0;\n
                                    v83 = 0;\n
                                    do\n
                                    {\n
                                        v84 = *(&v79->field_0 + v80);\n
                                        if (v84 != 3)\n
                                        {\n
                                            v82 ^= *((v81 + v84 * 8));\n
                                            v83 ^= *((v81 + v84 * 8 + 4));\n
                                        }\n
                                        v80 += 1;\n
                                        v81 += 16;\n
                                    } while (v80 != 361);\n
                                    v85 = v79->field_190;\n
                                    v9 = 12;\n
                                    v8 = 1;\n
                                    v86 = cgc_calloc(v13, v14);\n
                                    if (!v86)\n
                                        goto LABEL_405f01;\n
                                    v86[2] = v86;\n
                                    v86[0] = v82;\n
                                    v86[1] = v83;\n
                                    *((v85 + 8)) = v86;\n
                                    v78 = v18;\n
                                    goto LABEL_40647f;\n
                                }\n
                            }\n
                            v8 = v18;\n
                            cgc_free(0x1);\n
                        }\n
                    }\n
                }\n
            }\n
            v78 = v16;\n
            v78->field_18c = v78->field_18c + 1;\n
LABEL_40647f:\n
            v17 = v78 + 364;\n
            v14 = v78 + 368;\n
            v87 = *((v78 + 376));\n
            *((v78 + 364)) = *((v78 + 372));\n
            *((v78 + 368)) = v87;\n
            v15 = 0;\n
            v16 = v78;\n
            do\n
            {\n
                v88 = 0;\n
                do\n
                {\n
                    v10 = 361;\n
                    v9 = 0;\n
                    v8 = &v28;\n
                    v89 = v88;\n
                    cgc_memset(v13, v14, v15);\n
                    v90 = *((v78 + v88));\n
                    v91 = v18;\n
                    if (v90 != 2)\n
                    {\n
                        v91 = v17;\n
                        if (v90 != 1)\n
                        {\n
                            v8 = 1;\n
                            v7 = v15;\n
                            v6 = v88;\n
                            v5 = &v28;\n
                            v4 = v16;\n
                            v91 = v25;\n
                            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ecx<4>, cc_dep2<4>, cc_dep2<4>))\n
                            {\n
                                v8 = 2;\n
                                v7 = v7;\n
                                v6 = v88;\n
                                v5 = &v28;\n
                                v4 = v16;\n
                                v88 = v89;\n
                                v91 = v22;\n
                                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Call (target: 0x404330<32>, prototype: (unsigned int (32 bits), unsigned int (32 bits), char, char, char) -> int (32 bits), args: [Load(addr=reg_24<4>, size=4, endness=Iend_LE), Load(addr=(reg_24<4> + 0x4<32>), size=4, endness=Iend_LE), Load(addr=(reg_24<4> + 0x8<32>), size=1, endness=Iend_LE), Load(addr=(reg_24<4> + 0xc<32>), size=1, endness=Iend_LE), Load(addr=(reg_24<4> + 0x10<32>), size=1, endness=Iend_LE)]), 0x2<32>, 0x0<32>))\n
                                    continue;\n
                            }\n
                        }\n
                    }\n
                    *(v91) = *(v91) + 1;\n
                    v88 += 1;\n
                } while (v88 != 19);\n
                v92 = v78 + 19;\n
                v15 = &v15->field_0 + 1;\n
            } while (v15 != 19);\n
            v93 = v16;\n
            v8 = v16;\n
            cgc_draw_game(v12);\n
            v15 = 2;\n
            v14 = &v24;\n
            v13 = &v23;\n
            v12 = &v27;\n
            v94 = cgc_calculate_move(v13, v14, v15, v16);\n
            if (v94 == 2)\n
            {\n
                v93->field_18c = v93->field_18c + 1;\n
                goto LABEL_40692f;\n
            }\n
            if (v94 != 1)\n
                break;\n
            v95 = (&v20)[3];\n
            v96 = v95 + v95 * 18;\n
            if (*(v14 + v96 + &v93->field_0) == 3)\n
            {\n
                v14 = v19;\n
                v9 = 404;\n
                v8 = 1;\n
                v97 = cgc_calloc(v13, v14);\n
                if (!v97)\n
                    break;\n
                v98 = v97;\n
                v10 = 404;\n
                v9 = v93;\n
                v8 = v97;\n
                cgc_memcpy(v13, v14, v15);\n
                *((v18 + v96 + v97)) = 2;\n
                v13 = 404;\n
                v12 = 1;\n
                v99 = cgc_calloc(v13, v14);\n
                if (!v99)\n
                    break;\n
                v100 = v99;\n
                v10 = 404;\n
                v9 = v98;\n
                v8 = v99;\n
                cgc_memcpy(v13, v14, v15);\n
                v18 = 0;\n
                v21 = v99;\n
                v22 = v98;\n
                v19 = v98;\n
                v26 = 0;\n
                do\n
                {\n
                    v101 = 0;\n
                    do\n
                    {\n
                        v10 = 361;\n
                        v9 = 0;\n
                        v8 = &v28;\n
                        cgc_memset(v13, v14, v15);\n
                        if (*((v100 + v101)) == 1)\n
                        {\n
                            v8 = 1;\n
                            v7 = v14;\n
                            v6 = v101;\n
                            v5 = &v28;\n
                            v4 = v17;\n
                            if (!cgc_has_liberty(v13, v14, v15, v16, v17))\n
                            {\n
                                v22 += 1;\n
                                *(&v15->field_0 + v101) = 3;\n
                            }\n
                        }\n
                        v101 += 1;\n
                    } while (v101 != 19);\n
                    v15 = &v15->padding_4[15];\n
                    v102 = v100 + 19;\n
                    v14 += 1;\n
                } while (v14 != 19);\n
                v8 = v17;\n
                cgc_free(0x1);\n
                v13 = 404;\n
                v12 = 1;\n
                v103 = cgc_calloc(v13, v14);\n
                if (!v103)\n
                    break;\n
                v104 = v103;\n
                v10 = 404;\n
                v9 = v18;\n
                v8 = v103;\n
                cgc_memcpy(v13, v14, v15);\n
                v18 = 0;\n
                v21 = v103;\n
                v19 = v9;\n
                v25 = 0;\n
                do\n
                {\n
                    v105 = 0;\n
                    do\n
                    {\n
                        v10 = 361;\n
                        v9 = 0;\n
                        v8 = &v28;\n
                        cgc_memset(v13, v14, v15);\n
                        if (*((v104 + v105)) == 2)\n
                        {\n
                            v8 = 2;\n
                            v7 = v14;\n
                            v6 = v105;\n
                            v5 = &v28;\n
                            v4 = v17;\n
                            if (!cgc_has_liberty(v13, v14, v15, v16, v17))\n
                            {\n
                                v21 += 1;\n
                                *(&v15->field_0 + v105) = 3;\n
                            }\n
                        }\n
                        v105 += 1;\n
                    } while (v105 != 19);\n
                    v15 = &v15->padding_4[15];\n
                    v106 = v104 + 19;\n
                    v14 += 1;\n
                } while (v14 != 19);\n
                v8 = v17;\n
                cgc_free(0x1);\n
                v107 = 0;\n
                v108 = &prng_s;\n
                v109 = 0;\n
                v110 = 0;\n
                v93 = *(&v20);\n
                do\n
                {\n
                    v111 = *(&v18->field_0 + v107);\n
                    if (v111 != 3)\n
                    {\n
                        v109 ^= *((v108 + v111 * 8));\n
                        v110 ^= *((v108 + v111 * 8 + 4));\n
                    }\n
                    v107 += 1;\n
                    v108 += 16;\n
                } while (v107 != 361);\n
                v112 = *((v93 + 400));\n
                do\n
                {\n
                    if (!(*((v112 + 4)) ^ v110) && !(*(v112) ^ v109))\n
                    {\n
                        v8 = v18;\n
                        cgc_free(0x1);\n
                        goto LABEL_406898;\n
                    }\n
                    tmp_2 = v112;\n
                    v112 = *((v112 + 8));\n
                } while (v112 != tmp_2);\n
                v8 = v93;\n
                cgc_free(0x1);\n
                v93 = v22;\n
                v27 = v22;\n
                *((v22 + 384)) = *((v22 + 384)) + 1;\n
                *((v22 + 376)) = *((v22 + 376)) + v26;\n
                *((v22 + 372)) = *((v22 + 372)) + v25;\n
            }\n
LABEL_406898:\n
            v113 = 0;\n
            v114 = &prng_s;\n
            v115 = 0;\n
            v116 = 0;\n
            do\n
            {\n
                v117 = *((v93 + v113));\n
                if (v117 != 3)\n
                {\n
                    v115 ^= *((v114 + v117 * 8));\n
                    v116 ^= *((v114 + v117 * 8 + 4));\n
                }\n
                v113 += 1;\n
                v114 += 16;\n
            } while (v113 != 361);\n
            v16 = v93;\n
            v118 = *((v93 + 400));\n
            v9 = 12;\n
            v8 = 1;\n
            v119 = cgc_calloc(v13, v14);\n
            if (!v119)\n
                break;\n
            v119[2] = v119;\n
            v119[0] = v115;\n
            v119[1] = v116;\n
            *((v118 + 8)) = v119;\n
            v93 = v16;\n
LABEL_40692f:\n
            v17 = v93 + 364;\n
            v120 = v93;\n
            v14 = v93 + 368;\n
            v121 = *((v93 + 376));\n
            *((v93 + 364)) = *((v93 + 372));\n
            *((v93 + 368)) = v121;\n
            v15 = 0;\n
            v16 = v93;\n
            do\n
            {\n
                v122 = 0;\n
                do\n
                {\n
                    v10 = 361;\n
                    v9 = 0;\n
                    v8 = &v28;\n
                    v123 = v122;\n
                    cgc_memset(v13, v14, v15);\n
                    v124 = *(&v120->field_0 + v122);\n
                    v125 = v18;\n
                    if (v124 != 2)\n
                    {\n
                        v125 = v17;\n
                        if (v124 != 1)\n
                        {\n
                            v8 = 1;\n
                            v7 = v15;\n
                            v6 = v122;\n
                            v5 = &v28;\n
                            v4 = v16;\n
                            v125 = v25;\n
                            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ecx<4>, cc_dep2<4>, cc_dep2<4>))\n
                            {\n
                                v8 = 2;\n
                                v7 = v7;\n
                                v6 = v122;\n
                                v5 = &v28;\n
                                v4 = v16;\n
                                v122 = v123;\n
                                v125 = v22;\n
                                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Call (target: 0x404330<32>, prototype: (unsigned int (32 bits), unsigned int (32 bits), char, char, char) -> int (32 bits), args: [Load(addr=reg_24<4>, size=4, endness=Iend_LE), Load(addr=(reg_24<4> + 0x4<32>), size=4, endness=Iend_LE), Load(addr=(reg_24<4> + 0x8<32>), size=1, endness=Iend_LE), Load(addr=(reg_24<4> + 0xc<32>), size=1, endness=Iend_LE), Load(addr=(reg_24<4> + 0x10<32>), size=1, endness=Iend_LE)]), 0x2<32>, 0x0<32>))\n
                                    continue;\n
                            }\n
                        }\n
                    }\n
                    *(v125) = *(v125) + 1;\n
                    v122 += 1;\n
                } while (v122 != 19);\n
                v126 = &v120->padding_4[15];\n
                v15 = &v15->field_0 + 1;\n
            } while (v15 != 19);\n
            v127 = v16;\n
            v128 = *((v127 + 388));\n
            tmp_5 = v128;\n
            v129 = v128 + 1;\n
            v130 = *((v127 + 392)) + (tmp_5 + 1 < tmp_5);\n
            *((v127 + 388)) = v129;\n
            *((v127 + 392)) = v130;\n
            v131 = v129 < 151;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ecx<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                v8 = v127;\n
                cgc_free(v12);\n
                v13 = &\"Game Over \";\n
                v12 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v132 = \"Game Time Exceeded\\n
\";\n
LABEL_406ab0:\n
                v11 = v132;\n
                v10 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v13 = &\"You are a \";\n
                v12 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v133 = \"Loser, \";\n
                if (*((v127 + 364)) > *((v127 + 368)))\n
                    v133 = \"Winner, \";\n
                v9 = v133;\n
                v8 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v13 = &v30;\n
                v12 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v12 = 0;\n
                cgc__terminate(0);\n
            }\n
            if (*((v127 + 380)) > 90)\n
            {\n
LABEL_406a68:\n
                v8 = v127;\n
                cgc_free(v12);\n
                v13 = \"Game Over \";\n
                v12 = 1;\n
                cgc_fdprintf(v13, v14);\n
                v132 = \"Stones Exhausted\\n
\";\n
                goto LABEL_406ab0;\n
            }\n
            else if (!(*((v127 + 384)) < 91))\n
            {\n
                goto LABEL_406a68;\n
            }\n
        }\n
    }\n
}\n
", "4218978:sub_406062": null, "4219373:sub_4061ed": null, "4219404:sub_40620c": null, "4219582:sub_4062be": null, "4219612:sub_4062dc": null, "4219735:sub_406357": null, "4219836:sub_4063bc": null, "4219903:sub_4063ff": null, "4219993:sub_406459": null, "4220013:sub_40646d": null, "4220500:sub_406654": null, "4220540:sub_40667c": null, "4220630:sub_4066d6": null, "4220652:sub_4066ec": null, "4220744:sub_406748": null, "4220780:sub_40676c": null, "4220870:sub_4067c6": null, "4220913:sub_4067f1": null, "4220964:sub_406824": null, "4221094:sub_4068a6": null, "4221209:sub_406919": null, "4221708:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_fdwait": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}