{"4202496:_init": "extern struct_0 *g_40a208;\n
\n
int _init()\n
{\n
    if (g_40a208)\n
    {\n
        g_40a208();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 33055;\n
    v6 = v5 + 84;\n
    v7 = v5 + 84;\n
    if (v7 == v6)\n
        return v5 + 84;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32991;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 84;\n
    v9 = (v6 + 84 - (v6 + 84) >> 31) + (84 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a204;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a204)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4203157:sub_402295": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203257:sub_4022f9": null, "4203264:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203449:sub_4023b9": null, "4203456:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4203483:sub_4023db": null, "4203488:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4203533:sub_40240d": null, "4203536:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4203581:sub_40243d": null, "4203584:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203661:sub_40248d": null, "4203664:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4203709:sub_4024bd": null, "4203712:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8716 + v0];\n
}\n
", "4203743:sub_4024df": null, "4203744:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4203799:sub_402517": null, "4203808:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8588 + v0];\n
}\n
", "4203839:sub_40253f": null, "4203840:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203854:sub_40254e": null, "4203856:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4203927:sub_402597": null, "4203936:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4204007:sub_4025e7": null, "4204016:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4204151:sub_402677": null, "4204160:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4204208:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        if (v7 >= 0x80000000)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 340 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4204641:sub_402861": null, "4204656:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4204818:sub_402912": null, "4204832:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 340 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205010:sub_4029d2": null, "4205024:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4205218:sub_402aa2": null, "4205232:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 44)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4205343:sub_402b1f": null, "4205344:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[21 + 1 + v1])\n
    {\n
        v5 = v0;\n
        v5[21 + 1 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[21 + 1 + v1];\n
    *((v6[21 + 1 + v1] + 12)) = v3;\n
    v6[21 + 1 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4205502:sub_402bbe": null, "4205504:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 340)) == v3)\n
        *((v0 + v1 * 4 + 340)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4205678:sub_402c6e": null, "4205680:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    unsigned int v6[2];  // eax, Other Possible Types: unsigned int, struct_0 *\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_402e5c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_402e5c:\n
    return v6;\n
}\n
", "4206188:sub_402e6c": null, "4206192:cgc_remove_from_blist": "int cgc_remove_from_blist(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (*((v0 + 20)))\n
        *((*((v0 + 20)) + 16)) = *((v0 + 16));\n
    v1 = v0;\n
    if (*((v1 + 16)))\n
    {\n
        v1 = *((v0 + 16));\n
        *((v1 + 20)) = *((v0 + 20));\n
    }\n
    return v1;\n
}\n
", "4206256:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[v2] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206352:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < a1)\n
        {\n
            if (*(v2) != *(a0))\n
            {\n
                v1 = *(v2) - *(a0);\n
                return v1;\n
            }\n
            v2 += 1;\n
            a0 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206480:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4206566:sub_402fe6": null, "4206576:cgc_memmove": "int cgc_memmove(char *v3, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v0 = v3;\n
    if (v0 >= v1)\n
    {\n
        if (v0 <= v1)\n
            return v3;\n
        for (v2 = a1; v2 > 0; v2 -= 1)\n
        {\n
            *((v0 + v2 - 1)) = v1[1 + v2];\n
        }\n
    }\n
    else\n
    {\n
        for (v2 = 0; v2 < a1; v2 += 1)\n
        {\n
            *((v0 + v2)) = v1[v2];\n
        }\n
        return v3;\n
    }\n
}\n
", "4206755:sub_4030a3": null, "4206768:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4206897:sub_403131": null, "4206912:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a0 >= a1)\n
    {\n
        v7 = cgc_output_number_printf(v8, (0 CONCAT a0) /m a1, a1, a2 - 1, a3);\n
        a0 = (0 CONCAT a0) /m a1 >> 32;\n
    }\n
    if (!v7 && a2 > 0)\n
    {\n
        while (true)\n
        {\n
            a2 -= 1;\n
            if (!a2)\n
                break;\n
            if ((a3 & 1))\n
            {\n
                v6 = 48;\n
                cgc_transmit(v8, &v6, 1);\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                cgc_transmit(v8, &v5, 1);\n
            }\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (a0 < 10)\n
            v1 = a0 + 48;\n
        else\n
            v1 = a0 + 55;\n
        v4 = v1;\n
        cgc_transmit(v8, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (a0 < 10)\n
            v0 = a0 + 48;\n
        else\n
            v0 = a0 + 87;\n
        v3 = v0;\n
        cgc_transmit(v8, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4207411:sub_403333": null, "4207424:cgc_fdprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fdprintf(unsigned int v20, char *a0)\n
{\n
    char *v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    char v4;  // [bp-0x61]\n
    char v5;  // [bp-0x59]\n
    char v6;  // [bp-0x51]\n
    char v7;  // [bp-0x49]\n
    char v8;  // [bp-0x41]\n
    char v9;  // [bp-0x39]\n
    char v10;  // [bp-0x31]\n
    struct struct_0 **v11;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v12;  // [bp-0x2c]\n
    void* v13;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    char *v17;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v18;  // [bp-0x11]\n
    char *v19;  // [bp-0x10]\n
    char v21;  // [bp+0xc]\n
    char *v22;  // eax\n
    char *v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = 0;\n
    v14 = 0;\n
    v13 = 0;\n
    v11 = &v21;\n
    while (*(a0))\n
    {\n
        v22 = a0;\n
        a0 = v22 + 1;\n
        v10 = *(v22);\n
        if (v10 != 37)\n
        {\n
            v4 = v10;\n
            cgc_transmit(v20, &v4, 1);\n
LABEL_403716:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v23 = a0;\n
                    a0 = v23 + 1;\n
                    v10 = *(v23);\n
                    v2 = v10;\n
                    if (v2 != 48)\n
                        break;\n
                    v14 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v10;\n
            if (v1 == 37)\n
            {\n
                v9 = 37;\n
                cgc_transmit(v20, &v9, 1);\n
                goto LABEL_4036cf;\n
            }\n
            if (v1 == 88)\n
            {\n
                v14 |= 2;\n
            }\n
            else if (v1 == 99)\n
            {\n
                v24 = v11;\n
                v11 = v24 + 1;\n
                v18 = *(v24);\n
                v6 = v18;\n
                cgc_transmit(v20, &v6, 1);\n
                goto LABEL_4036cf;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v25 = v11;\n
                    v11 = v25 + 1;\n
                    v17 = &*(v25)->field_0;\n
                    if (v17 < 0)\n
                    {\n
                        v7 = 45;\n
                        cgc_transmit(v20, &v7, 1);\n
                        v17 = -(v17);\n
                    }\n
                    cgc_output_number_printf(v20, v17, 10, v13, v14);\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v26 = v11;\n
                    v11 = v26 + 1;\n
                    v19 = &*(v26)->field_0;\n
                    v16 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v16;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v8 = v19[v16];\n
                        cgc_transmit(v20, &v8, 1);\n
                        v16 += 1;\n
                    }\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 == 117)\n
                {\n
                    v27 = v11;\n
                    v11 = v27 + 1;\n
                    v12 = &*(v27)->field_0;\n
                    cgc_output_number_printf(v20, v12, 10, v13, v14);\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v10;\n
                    cgc_transmit(v20, &v5, 1);\n
LABEL_4036cf:\n
                    v13 = 0;\n
                    v14 = 0;\n
                    goto LABEL_403716;\n
                }\n
            }\n
            v28 = v11;\n
            v11 = v28 + 1;\n
            v12 = &*(v28)->field_0;\n
            cgc_output_number_printf(v20, v12, 16, v13, v14);\n
            goto LABEL_4036cf;\n
        }\n
    }\n
    return v15;\n
}\n
", "4208424:sub_403728": null, "4208432:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v8, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    unsigned int *v10;  // eax\n
    struct struct_0 **v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a1 >= a2)\n
    {\n
        v7 = cgc_output_number_sprintf(v8, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (!v7 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v9 = a0;\n
            *(v9) = *(v9) + 1;\n
            v10 = v8;\n
            *(v10) = *(v10) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v11 = a0;\n
    *(v11) = *(v11) + 1;\n
    v12 = v8;\n
    *(v12) = *(v12) + 1;\n
    return v7 + 1;\n
}\n
", "4208917:sub_403915": null, "4208928:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    char *v16;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_403c2f:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_403bf2;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = &*(v22)->field_0;\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_403bf2;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_403bf2;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_403bf2:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403c2f;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = *(v24);\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_403bf2;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4209741:sub_403c4d": null, "4209744:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4210002:sub_403d52": null, "4210016:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v6, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v6;\n
    v4 = a0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v5))\n
            v2 = *(v4);\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    return v0 - cgc_tolower(*(v4));\n
}\n
", "4210255:sub_403e4f": null, "4210256:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    v0 = a0;\n
    cgc_strcpy(v2 + cgc_strlen());\n
    v6 = v3;\n
    return v4;\n
}\n
", "4210333:sub_403e9d": null, "4210336:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4210442:sub_403f0a": null, "4210448:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4210576:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4210660:sub_403fe4": null, "4210672:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen() + 1;\n
    v1 = cgc_malloc(v2);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4210796:sub_40406c": null, "4210800:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4210852:sub_4040a4": null, "4210864:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v7, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v7;\n
    v4 = a0;\n
    v8 = a1;\n
    a1 = v8 - 1;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (a1)\n
        {\n
            v2 = 0;\n
            if (*(v5))\n
                v2 = *(v4);\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    v6 = v0 - cgc_tolower(*(v4));\n
    return v6;\n
}\n
", "4211164:sub_4041dc": null, "4211168:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v3 = a1;\n
    a1 = v3 - 1;\n
    if (!v3)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        v0 = 0;\n
        if (v4)\n
        {\n
            v0 = 0;\n
            if (*(v2))\n
                v0 = *(a0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    v1 = *(v2) - *(a0);\n
    return v1;\n
}\n
", "4211369:sub_4042a9": null, "4211376:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
        if (!*((v1 + v0)))\n
            break;\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = 0;\n
    }\n
    return v1;\n
}\n
", "4211518:sub_40433e": null, "4211520:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4211736:sub_404418": null, "4211744:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_404468:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_404468;\n
        if (a1 < 0)\n
            goto LABEL_404468;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_40455f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_40455f;\n
                v6 += 1;\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_4045d4;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_4045d4:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_404732;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4046f2;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4046f2:\n
                if (v8 >= a1)\n
                    goto LABEL_404732;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4046e9;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4046e9:\n
                v8 += 10;\n
                goto LABEL_4046f2;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_404668;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_404668:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_404732:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4212606:sub_40477e": null, "4212608:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4212667:sub_4047bb": null, "4212672:cgc_run_admin_mode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_admin_mode()\n
{\n
    unsigned int v0;  // [bp-0x418]\n
    unsigned int v1;  // [bp-0x414]\n
    unsigned int v2;  // [bp-0x410]\n
    char v3;  // [bp-0x40c]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int *v6;  // [bp+0x4]\n
    unsigned int v8;  // ebx\n
\n
    v5 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_fdprintf(1, \"1. Add movie\\n
\");\n
    cgc_fdprintf(1, v1 - 8419);\n
    cgc_fdprintf(1, v1 - 8402);\n
    cgc_fdprintf(1, v1 - 8385);\n
    cgc_fdprintf(1, v1 - 8364);\n
    if (cgc_readline(0, &v3) < 0)\n
    {\n
        v4 = -1;\n
        return;\n
    }\n
    v2 = cgc_strtol(&v3, NULL, 10);\n
    v0 = v2 - 1;\n
    if (v0 <= 3)\n
    {\n
        goto *(((stack_base)[1044] + (stack_base)[1048] * 4 - 8460)) + (stack_base)[1044];\n
    }\n
    else if (!cgc_memcmp(&v3, v1 - 8444, 11))\n
    {\n
        *(v6) = 0;\n
    }\n
    else\n
    {\n
        cgc_fdprintf(1, v1 - 8355);\n
    }\n
}\n
", "4213159:sub_4049a7": null, "4213168:cgc_add_new_movie": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_new_movie()\n
{\n
    unsigned int v0;  // [bp-0xc38]\n
    char v1;  // [bp-0xc2a]\n
    char v2;  // [bp-0xc29]\n
    unsigned int v3;  // [bp-0xc28]\n
    unsigned int v4;  // [bp-0xc24]\n
    void* v5;  // [bp-0xc20], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0xc18], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc14], Other Possible Types: unsigned int\n
    char v9[2];  // [bp-0xc10]\n
    char v10;  // [bp-0x810]\n
    char v11;  // [bp-0x410]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v13;  // [bp+0x4]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v12 = v14;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 1000;\n
    cgc_fdprintf(1, \"Add a movie\\n
\");\n
    cgc_fdprintf(1, v3 - 8298);\n
    cgc_fdprintf(1, v3 - 8282);\n
    cgc_readline(0, &v11);\n
    cgc_fdprintf(1, v3 - 8264);\n
    cgc_readline(0, &v10);\n
    while (true)\n
    {\n
        v2 = 1;\n
        if (v5 >= 1800)\n
            v2 = !(v5 <= 2015);\n
        if (!(v2 & 1))\n
        {\n
            while (true)\n
            {\n
                v1 = 1;\n
                if (v4 >= 0)\n
                    v1 = !(v4 <= 100);\n
                if (!(v1 & 1))\n
                {\n
                    while (true)\n
                    {\n
                        if (((v8 ^ 255) & 1))\n
                        {\n
                            cgc_fdprintf(1, v3 - 8128);\n
                            cgc_print_genres(v13);\n
                            cgc_fdprintf(1, v3 - 8364);\n
                            v15 = cgc_readline(0, v9);\n
                            if (v15 < 0)\n
                                return v15;\n
                            v6 = cgc_strtol(v9, NULL, 10);\n
                            v8 = cgc_get_genre(v6, 0);\n
                            if (!v8)\n
                                cgc_fdprintf(1, v3 - 8111);\n
                        }\n
                        else\n
                        {\n
                            while (true)\n
                            {\n
                                if (((v7 ^ 255) & 1))\n
                                {\n
                                    cgc_fdprintf(1, v3 - 8084);\n
                                    cgc_print_ratings(v13);\n
                                    cgc_fdprintf(1, v3 - 8364);\n
                                    v15 = cgc_readline(0, v9);\n
                                    if (v15 < 0)\n
                                        return v15;\n
                                    v6 = cgc_strtol(v9, NULL, 10);\n
                                    v7 = cgc_get_rating(v6, 0);\n
                                    if (!v7)\n
                                        cgc_fdprintf(1, v3 - 8061);\n
                                }\n
                                else\n
                                {\n
                                    v0 = v7;\n
                                    v15 = cgc_add_movie(&v11, &v10, v5, v4, v8);\n
                                    return v15;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                cgc_fdprintf(1, v3 - 8189);\n
                v15 = cgc_readline(0, v9);\n
                if (v15 < 0)\n
                    return v15;\n
                v4 = cgc_strtol(v9, NULL, 10);\n
                if (v4 >= 0 && v4 <= 100)\n
                    goto LABEL_404ca0;\n
                cgc_fdprintf(1, v3 - 8164);\n
LABEL_404ca0:\n
            }\n
        }\n
        cgc_fdprintf(1, v3 - 8240);\n
        v15 = cgc_readline(0, v9);\n
        if (v15 < 0)\n
            return v15;\n
        v5 = cgc_strtol(v9, NULL, 10);\n
        if (v5 >= 1800 && v5 <= 2015)\n
            goto LABEL_404bac;\n
        cgc_fdprintf(1, v3 - 8223);\n
LABEL_404bac:\n
    }\n
}\n
", "4214547:sub_404f13": null, "4214560:cgc_remove_movie": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_movie()\n
{\n
    char v0;  // [bp-0x415]\n
    unsigned int v1;  // [bp-0x414]\n
    unsigned int v2;  // [bp-0x410]\n
    void* v3;  // [bp-0x40c], Other Possible Types: unsigned int\n
    char v4[2];  // [bp-0x408]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = cgc_get_list_length();\n
    cgc_list_owned_movies();\n
    if (!v2)\n
    {\n
        v8 = cgc_fdprintf(1, v1 - 8028);\n
        return v8;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v3)\n
            v0 = !(v3 <= v2);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, v1 - 7999);\n
        cgc_readline(0, v4);\n
        v3 = cgc_strtol(v4, NULL, 10);\n
        if (v3 && v3 <= v2)\n
            goto LABEL_405075;\n
        cgc_fdprintf(1, v1 - 7982);\n
LABEL_405075:\n
    }\n
    v8 = cgc_delete_entry();\n
    return v8;\n
}\n
", "4214935:sub_405097": null, "4214944:cgc_update_movie": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0[2];\n
    unsigned int field_4[2];\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_update_movie()\n
{\n
    char v0;  // [bp-0xc2b]\n
    char v1;  // [bp-0xc2a]\n
    char v2;  // [bp-0xc29]\n
    unsigned int v3;  // [bp-0xc28]\n
    unsigned int v4;  // [bp-0xc24]\n
    void* v5;  // [bp-0xc20], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc1c]\n
    void* v7;  // [bp-0xc18], Other Possible Types: unsigned int\n
    struct_0 *v8;  // [bp-0xc14], Other Possible Types: struct_1 *\n
    void* v9;  // [bp-0xc10], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0xc0c], Other Possible Types: unsigned int\n
    char v11;  // [bp-0xc08]\n
    char v12;  // [bp-0x808]\n
    char v13;  // [bp-0x408]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v15;  // [bp+0x4]\n
    unsigned int v16;  // [bp+0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // eax\n
\n
    v14 = v17;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = cgc_get_list_length();\n
    v5 = 0;\n
    v4 = 1000;\n
    cgc_list_owned_movies();\n
    if (!v6)\n
    {\n
        v18 = cgc_fdprintf(1, v3 - 7944);\n
        return v18;\n
    }\n
    while (true)\n
    {\n
        v2 = 1;\n
        if (v7 > 0)\n
            v2 = !(v7 <= v6);\n
        if (!(v2 & 1))\n
            break;\n
        cgc_fdprintf(1, v3 - 7999);\n
        cgc_readline(0, &v11);\n
        v7 = cgc_strtol(&v11, NULL, 10);\n
        if (v7 && v7 <= v6)\n
            goto LABEL_405227;\n
        cgc_fdprintf(1, v3 - 7982);\n
LABEL_405227:\n
    }\n
    v8 = cgc_get_entry();\n
    cgc_fdprintf(1, v3 - 7916);\n
    cgc_fdprintf(1, v3 - 7872);\n
    cgc_readline(0, &v13);\n
    if (cgc_strlen(&v13))\n
    {\n
        cgc_free(v8->field_0);\n
        v8->field_0 = cgc_strdup(&v13);\n
    }\n
    cgc_fdprintf(1, v3 - 7838);\n
    cgc_readline(0, &v12);\n
    if (cgc_strlen(&v12))\n
    {\n
        cgc_free(v8->field_4);\n
        v8->field_4 = cgc_strdup(&v12);\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v5 >= 1800)\n
            v1 = !(v5 <= 2015);\n
        if (!(v1 & 1))\n
            break;\n
        cgc_fdprintf(1, v3 - 7798);\n
        v18 = cgc_readline(0, &v11);\n
        if (v18 < 0)\n
            return v18;\n
        if (!cgc_strlen(&v11))\n
            break;\n
        v5 = cgc_strtol(&v11, NULL, 10);\n
        if (v5 < 1800)\n
        {\n
LABEL_4054b2:\n
            cgc_fdprintf(1, v3 - 8223);\n
            goto LABEL_4054e6;\n
        }\n
        else\n
        {\n
            if (!(v5 <= 2015))\n
                goto LABEL_4054b2;\n
            v8->field_8 = v5;\n
LABEL_4054e6:\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v4 >= 0)\n
            v0 = !(v4 <= 100);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, v3 - 7765);\n
        v18 = cgc_readline(0, &v11);\n
        if (v18 < 0)\n
            return v18;\n
        if (!cgc_strlen(&v11))\n
            break;\n
        v4 = cgc_strtol(&v11, NULL, 10);\n
        if (v4 < 0)\n
        {\n
LABEL_4055ee:\n
            cgc_fdprintf(1, v3 - 8164);\n
            goto LABEL_405620;\n
        }\n
        else\n
        {\n
            if (!(v4 <= 100))\n
                goto LABEL_4055ee;\n
            v8->field_a = v4;\n
LABEL_405620:\n
        }\n
    }\n
    while (((v10 ^ 255) & 1))\n
    {\n
        cgc_fdprintf(1, v3 - 7720);\n
        cgc_print_genres(v15, v16);\n
        cgc_fdprintf(1, v3 - 8364);\n
        v18 = cgc_readline(0, &v11);\n
        if (v18 < 0)\n
            return v18;\n
        if (!cgc_strlen(&v11))\n
            break;\n
        v7 = cgc_strtol(&v11, NULL, 10);\n
        v10 = cgc_get_genre(v7, 0);\n
        if (!v10)\n
            cgc_fdprintf(1, v3 - 8111);\n
        else\n
            v8->field_c = v10;\n
    }\n
    while (((v9 ^ 255) & 1))\n
    {\n
        cgc_fdprintf(1, v3 - 7687);\n
        cgc_print_ratings(v15, v16);\n
        cgc_fdprintf(1, v3 - 8364);\n
        v18 = cgc_readline(0, &v11);\n
        if (v18 < 0)\n
            return v18;\n
        if (!cgc_strlen(&v11))\n
            break;\n
        v7 = cgc_strtol(&v11, NULL, 10);\n
        v9 = cgc_get_rating(v7, 0);\n
        if (v9)\n
            v8->field_10 = v9;\n
        else\n
            cgc_fdprintf(1, v3 - 8061);\n
    }\n
    v18 = cgc_fdprintf(1, v3 - 7648);\n
    return v18;\n
}\n
", "4217058:sub_4058e2": null, "4217072:cgc_init_movies": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_40a008;\n
\n
int cgc_init_movies()\n
{\n
    unsigned int v0;  // [bp-0x118]\n
    unsigned int v1;  // [bp-0x110]\n
    struct_0 *v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0x108], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x104]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = memcpy(&v4, &g_40a008, 240);\n
    for (v3 = 0; v3 < 10; v3 = v8)\n
    {\n
        v2 = &(&v4)[24 * v3];\n
        v0 = v2->field_10;\n
        cgc_add_movie(v2->field_0, v2->field_4, v2->field_8, v2->field_a, v2->field_c);\n
        v8 = v3 + 1;\n
    }\n
    return v8;\n
}\n
", "4217303:sub_4059d7": null, "4217312:cgc_rent_movie": "int cgc_rent_movie(unsigned int v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_rent_entry(v1, *(&v0));\n
}\n
", "4217349:sub_405a05": null, "4217360:cgc_return_movie": "int cgc_return_movie(unsigned int v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_return_entry(v1, *(&v0));\n
}\n
", "4217397:sub_405a35": null, "4217408:cgc_list_all_movies": "int cgc_list_all_movies()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_print_movies(0, *(&v0));\n
}\n
", "4217445:sub_405a65": null, "4217456:cgc_list_owned_movies": "int cgc_list_owned_movies()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_print_movies(1, *(&v0));\n
}\n
", "4217491:sub_405a93": null, "4217504:cgc_list_rented_movies": "int cgc_list_rented_movies()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_print_movies(2, *(&v0));\n
}\n
", "4217539:sub_405ac3": null, "4217552:cgc_get_num_owned_movies": "int cgc_get_num_owned_movies()\n
{\n
    char v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    return cgc_get_list_length(v2, *(&v0));\n
}\n
", "4217580:sub_405aec": null, "4217584:cgc_get_num_rented_movies": "int cgc_get_num_rented_movies()\n
{\n
    char v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    return cgc_get_num_rented(v2, *(&v0));\n
}\n
", "4217612:sub_405b0c": null, "4217616:cgc_get_genre": "typedef struct struct_0 {\n
    char padding_0[172];\n
    unsigned int field_ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_genre(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v2 >= 1 && v2 <= v0->field_ac)\n
    {\n
        v1 = (&v0->field_ac)[v2];\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4217707:sub_405b6b": null, "4217712:cgc_get_rating": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_rating(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v2 >= 1 && v2 <= v0->field_d8)\n
    {\n
        v1 = (&v0->field_d8)[v2];\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4217803:sub_405bcb": null, "4217808:cgc_get_list_length": "extern unsigned int g_list_length;\n
\n
int cgc_get_list_length()\n
{\n
    return g_list_length;\n
}\n
", "4217831:sub_405be7": null, "4217840:cgc_get_num_rented": "extern unsigned int g_num_rented;\n
\n
int cgc_get_num_rented()\n
{\n
    return g_num_rented;\n
}\n
", "4217863:sub_405c07": null, "4217872:cgc_add_movie": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    char field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_movie(char *v6, char *a0, unsigned short a1, char a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_check_genre();\n
    v2 = cgc_check_rating();\n
    if (v3 && v2)\n
    {\n
        if (a1 >= 1800 && a1 <= 2015)\n
        {\n
            if (a2 >= 0 && a2 <= 100)\n
            {\n
                v1 = cgc_malloc(24);\n
                if (!v1)\n
                {\n
                    v4 = -1;\n
                    return v4;\n
                }\n
                v1->field_0 = cgc_strdup(v6);\n
                v1->field_4 = cgc_strdup(a0);\n
                v1->field_8 = a1;\n
                v1->field_a = a2;\n
                v1->field_c = v3;\n
                v1->field_10 = v2;\n
                v1->field_14 = 0;\n
                if (!cgc_add_entry())\n
                {\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                cgc_free(v1);\n
                v4 = -1;\n
                return v4;\n
            }\n
            v4 = -1;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4218249:sub_405d89": null, "4218256:cgc_check_genre": "typedef struct struct_0 {\n
    char padding_0[172];\n
    unsigned int field_ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_check_genre(char *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_ac)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strcmp(v3, *(&v0[1].padding_0[4 * v1])))\n
        {\n
            v2 = *(&v0[1].padding_0[4 * v1]);\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4218406:sub_405e26": null, "4218416:cgc_check_rating": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_check_rating(char *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_d8)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v3, *(&v0[1].padding_0[4 * v1])))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = *(&v0[1].padding_0[4 * v1]);\n
            return v2;\n
        }\n
    }\n
}\n
", "4218566:sub_405ec6": null, "4218576:cgc_add_entry": "typedef struct struct_0 {\n
    char padding_0[468];\n
    unsigned int field_1d4;\n
    char padding_1d8[4];\n
    unsigned int field_1dc;\n
    char *field_1e0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
extern unsigned int g_list_size;\n
\n
int cgc_add_entry(char *v3)\n
{\n
    unsigned int v0[121];  // [bp-0x18]\n
    unsigned int v1[2];  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[121];  // ecx\n
    unsigned int v5[121];  // eax\n
    unsigned int v6[121];  // ebx\n
    unsigned int v7[121];  // eax\n
    struct_0 *v8;  // ebx\n
    unsigned int v9[121];  // ebx\n
    unsigned int v10[121];  // ebx\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // eax\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (g_list_size)\n
    {\n
        v4 = v0;\n
        if (v4[119] == v4[117])\n
        {\n
            v6 = v0;\n
            v1[0] = v6[120];\n
            v7 = v0;\n
            v7[120] = cgc_malloc(v6[119] * 48);\n
            if (!v7[120])\n
            {\n
                v0[120] = v1;\n
                v2 = -1;\n
                return v2;\n
            }\n
            v8 = v0;\n
            cgc_memcpy(v8->field_1e0, v1, v8->field_1dc * 24);\n
            v9 = v0;\n
            v9[119] = v9[119] * 2;\n
            cgc_free(v1);\n
        }\n
    }\n
    else\n
    {\n
        v5 = v0;\n
        v5[120] = cgc_malloc(384);\n
        if (!v5[120])\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v0[119] = 16;\n
    }\n
    v10 = v0;\n
    v11 = v10[120];\n
    v12 = v10[117];\n
    v10[117] = v12 + 1;\n
    cgc_memcpy(v11 + v12 * 24, v3, 24);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4218921:sub_406029": null, "4218928:cgc_delete_entry": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
extern unsigned int g_list_length;\n
\n
int cgc_delete_entry(unsigned int *v2)\n
{\n
    unsigned int v0[121];  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3[121];  // ebx\n
    unsigned int v4[121];  // ebx\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (!g_list_length)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (v2 >= 1 && v2 <= v0[117])\n
    {\n
        v2 = v2 + 1;\n
        cgc_free(*((v0[120] + v2 * 24)));\n
        cgc_free(*((v0[120] + v2 * 24 + 4)));\n
        if (v2 + 1 < v0[117])\n
        {\n
            v3 = v0;\n
            cgc_memcpy(v3[120] + v2 * 24, v3[120] + (v2 + 1) * 24, (-1 + v3[117] - v2) * 24);\n
        }\n
        v4 = v0;\n
        v4[117] = v4[117] - 1;\n
        cgc_fdprintf(1, &v4[12 + 43] + 1);\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4219222:sub_406156": null, "4219232:cgc_rent_entry": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
\n
int cgc_rent_entry(unsigned int *v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[121];  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[121];  // ebx\n
    unsigned int v5[121];  // ebx\n
\n
    v1[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (v3 >= 1 && v3 <= v1[117])\n
    {\n
        v3 = v3 + 1;\n
        if (!*((v1[120] + v3 * 24 + 20)))\n
        {\n
            v5 = v1;\n
            *((v5[120] + v3 * 24 + 20)) = 1;\n
            v5[118] = v5[118] + 1;\n
            v0 = *((v5[120] + v3 * 24));\n
            cgc_fdprintf(1, &v5[12 + 17] + 3);\n
            v2 = 0;\n
            return v2;\n
        }\n
        v4 = v1;\n
        v0 = *((v4[120] + v3 * 24));\n
        cgc_fdprintf(1, &v4[12 + 35]);\n
        v2 = 1;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4219476:sub_406254": null, "4219488:cgc_return_entry": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
\n
int cgc_return_entry(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[121];  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6[121];  // ebx\n
\n
    v1[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (v5 >= 1 && v5 <= v1[118])\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
        v3 = 0;\n
        while (true)\n
        {\n
            if (v3 >= v1[117])\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            if (*((v1[120] + v3 * 24 + 20)))\n
            {\n
                v2 += 1;\n
                if (v2 == v5)\n
                {\n
                    v6 = v1;\n
                    *((v6[120] + v3 * 24 + 20)) = 0;\n
                    v6[118] = v6[118] - 1;\n
                    v0 = *((v6[120] + v3 * 24));\n
                    cgc_fdprintf(1, &v6[12 + 9] + 1);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
            v3 += 1;\n
        }\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4219769:sub_406379": null, "4219776:cgc_find_entry": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
\n
int cgc_find_entry(char *v3)\n
{\n
    unsigned int v0[121];  // [bp-0x14]\n
    char **v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0[117])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(*((v0[120] + v1 * 24)), v3))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v0[120] + v1 * 24;\n
            return v2;\n
        }\n
    }\n
}\n
", "4219925:sub_406415": null, "4219936:cgc_get_entry": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
\n
int cgc_get_entry(unsigned int v2)\n
{\n
    unsigned int v0[121];  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (v2 >= 1 && v2 <= v0[117])\n
    {\n
        v2 -= 1;\n
        v1 = v0[120] + v2 * 24;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4220034:sub_406482": null, "4220048:cgc_print_entry": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_entry(struct_0 *v9)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v9->field_0;\n
    v1 = v9->field_8;\n
    v2 = v9->field_10;\n
    v3 = v9->field_c;\n
    v4 = v9->field_a;\n
    cgc_fdprintf(1, \"%s (%d, %s) - %s [%d/100]\\n
\");\n
    v0 = v9->field_4;\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return cgc_fdprintf(1, v5 - 5778);\n
}\n
", "4220194:sub_406522": null, "4220208:cgc_print_movies": "extern unsigned int _GLOBAL_OFFSET_TABLE_[121];\n
\n
int cgc_print_movies(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2[121];  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7[121];  // ebx\n
    unsigned int v8[121];  // ebx\n
\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v6 = v5;\n
    if (v5 && !(v5 == 1))\n
        goto LABEL_40662c;\n
    cgc_fdprintf(1, &v2[11 + 111] + 1);\n
    cgc_fdprintf(1, &v2[17 + 17] + 2);\n
    for (v4 = 0; v4 < v2[117]; v4 += 1)\n
    {\n
        v0 = v4 + 1;\n
        cgc_fdprintf(1, &v2[11 + 107] + 1);\n
        cgc_print_entry(v2[120] + v4 * 24);\n
    }\n
    cgc_fdprintf(1, &v2[17 + 17] + 2);\n
    v7 = v2;\n
    v0 = v7[117];\n
    v6 = cgc_fdprintf(1, &v7[11 + 105] + 3);\n
LABEL_40662c:\n
    if (v5 && v5 != 2)\n
        return v6;\n
    v3 = 0;\n
    cgc_fdprintf(1, &v2[11 + 102] + 2);\n
    cgc_fdprintf(1, &v2[17 + 17] + 2);\n
    v4 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v4 < v2[117])\n
            v1 = v2[118];\n
        if (!(v1 & 1))\n
            break;\n
        if (*((v2[120] + v4 * 24 + 20)))\n
        {\n
            v3 += 1;\n
            v0 = v3;\n
            cgc_fdprintf(1, &v2[11 + 107] + 1);\n
            cgc_print_entry(v2[120] + v4 * 24);\n
        }\n
        v4 += 1;\n
    }\n
    cgc_fdprintf(1, &v2[17 + 17] + 2);\n
    v8 = v2;\n
    v0 = v8[118];\n
    v6 = cgc_fdprintf(1, &v8[11 + 105] + 3);\n
    return v6;\n
}\n
", "4220770:sub_406762": null, "4220784:cgc_print_genres": "typedef struct struct_0 {\n
    char padding_0[172];\n
    unsigned int field_ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_genres()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v3 = 0; v3 < v2->field_ac; v3 += 1)\n
    {\n
        v5 = v2;\n
        v0 = v3 + 1;\n
        v1 = *(&v5[1].padding_0[4 * v3]);\n
        cgc_fdprintf(1, &v5[32].padding_0[84]);\n
    }\n
    return cgc_fdprintf(1, &v2[47].padding_0[94]);\n
}\n
", "4220925:sub_4067fd": null, "4220928:cgc_print_ratings": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_ratings()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v3 = 0; v3 < v2->field_d8; v3 += 1)\n
    {\n
        v5 = v2;\n
        v0 = v3 + 1;\n
        v1 = *(&v5[1].padding_0[4 * v3]);\n
        cgc_fdprintf(1, &v5[25].field_d8);\n
    }\n
    return cgc_fdprintf(1, &v2[38].padding_0[6]);\n
}\n
", "4221069:sub_40688d": null, "4221072:cgc_dag": "typedef struct struct_0 {\n
    char padding_0[172];\n
    unsigned int field_ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dag(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v1)\n
        return v1;\n
    v2 = v0;\n
    if (*((v2 + 172)) < 10)\n
    {\n
        v2 = v0;\n
        v3 = *((v2 + 172));\n
        *((v2 + 172)) = v3 + 1;\n
        *((v2 + v3 * 4 + 176)) = cgc_strdup(v1);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4221179:sub_4068fb": null, "4221184:cgc_dar": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dar(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v1)\n
        return v1;\n
    v2 = v0;\n
    if (*((v2 + 216)) < 10)\n
    {\n
        v2 = v0;\n
        v3 = *((v2 + 216));\n
        *((v2 + 216)) = v3 + 1;\n
        *((v2 + v3 * 4 + 220)) = cgc_strdup(v1);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4221291:sub_40696b": null, "4221296:cgc_run_debug_mode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_debug_mode(unsigned int *v7)\n
{\n
    unsigned int v0;  // [bp-0x224]\n
    unsigned int v1;  // [bp-0x214]\n
    unsigned int v2;  // [bp-0x210]\n
    void* v3;  // [bp-0x20c], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x208]\n
    char v5;  // [bp-0x204]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    cgc_fdprintf(1, \"##: \");\n
    v0 = 0x200;\n
    cgc_readline(0, &v4);\n
    v3 = __buildin_bswap32(*(&v4));\n
    v2 = v3;\n
    if (v2 == 388502)\n
    {\n
        cgc_dar(&v5);\n
        return 0;\n
    }\n
    else if (v2 == 1294579383)\n
    {\n
        cgc_dag(&v5);\n
        return 0;\n
    }\n
    else\n
    {\n
        *(v7) = 1;\n
        return 0;\n
    }\n
}\n
", "4221534:sub_406a5e": null, "4221536:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 2;\n
    cgc_init_movies();\n
    cgc_fdprintf(1, v0 - 5702);\n
    cgc_fdprintf(1, v0 - 5655);\n
    cgc_fdprintf(1, v0 - 5612);\n
    cgc_fdprintf(1, v0 - 5575);\n
    while (((v2 ^ 255) & 1))\n
    {\n
        if (v1 == 2)\n
        {\n
            v2 = cgc_run_user_mode();\n
        }\n
        else if (v1 == 1)\n
        {\n
            if (cgc_run_admin_mode() < 0)\n
                v2 = 1;\n
        }\n
        else\n
        {\n
            if (!v1)\n
                cgc_run_debug_mode(&v1);\n
        }\n
        if (!v2)\n
            cgc_fdprintf(1, v0 - 8366);\n
    }\n
    cgc_fdprintf(1, v0 - 5528);\n
    v7 = v4;\n
    return v3;\n
}\n
", "4221897:sub_406bc9": null, "4221904:cgc_readline": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readline(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a1)\n
        {\n
            *((a0 + v3 - 1)) = 0;\n
            v4 = 1;\n
            return v4;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(v5, a0 + v3, 1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        if (*((a0 + v3)) == 10)\n
        {\n
            *((a0 + v3)) = 0;\n
            v4 = 0;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4222113:sub_406ca1": null, "4222128:cgc_run_user_mode": "typedef struct struct_0 {\n
    char padding_0[484];\n
    unsigned int field_1e4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int admin_password;\n
\n
int cgc_run_user_mode()\n
{\n
    struct_1 *v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    struct_0 *v2;  // [bp-0x414]\n
    unsigned int v3;  // [bp-0x410]\n
    char v4;  // [bp-0x40c]\n
    void* v5;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!admin_password)\n
        v2->field_1e4 = cgc_random_password();\n
    cgc_fdprintf(1, &v2[11].padding_0[132]);\n
    cgc_fdprintf(1, &v2[11].padding_0[116]);\n
    cgc_fdprintf(1, &v2[11].padding_0[101]);\n
    cgc_fdprintf(1, &v2[11].padding_0[84]);\n
    cgc_fdprintf(1, &v2[11].padding_0[69]);\n
    cgc_fdprintf(1, &v2[17].padding_0[68]);\n
    v0 = &v4;\n
    cgc_readline(0, &v4, 0x400);\n
    v3 = cgc_strtol(v0, NULL, 10);\n
    v1 = v3 - 1;\n
    if (v1 <= 4)\n
        goto *(((stack_base)[1044] + (stack_base)[1048] * 4 - 5520)) + (stack_base)[1044];\n
    else\n
        cgc_fdprintf(1, &v2[17].padding_0[59]);\n
    v5 = 0;\n
    return;\n
}\n
", "4222635:sub_406eab": null, "4222640:cgc_random_password": "typedef struct struct_0 {\n
    char padding_0[316];\n
    struct struct_1 *field_13c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[6];\n
    char field_7;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_password()\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    char v1[8];  // [bp-0x14], Other Possible Types: unsigned int\n
    char v2[8];  // [bp-0x10]\n
    char v3[8];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    *(&v2[0]) = cgc_malloc(8);\n
    if (!v2)\n
    {\n
        *(&v2[0]) = v0->field_13c;\n
        *(&v3[0]) = v2;\n
        return v3;\n
    }\n
    v2[7] = 0;\n
    *(&v1[0]) = 0;\n
    for (v1 = 0; v1 < 7; v1 += 1)\n
    {\n
        if (!(0 CONCAT cgc_rng()) /m 5 >> 32)\n
        {\n
            v2[v1] = ((0 CONCAT cgc_rng()) /m 17 >> 32) + 48;\n
        }\n
        else if ((cgc_rng() & 1))\n
        {\n
            v2[v1] = ((0 CONCAT cgc_rng()) /m 26 >> 32) + 65;\n
        }\n
        else\n
        {\n
            v2[v1] = ((0 CONCAT cgc_rng()) /m 26 >> 32) + 97;\n
        }\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4222918:sub_406fc6": null, "4222928:cgc_rng": "extern unsigned int a;\n
extern unsigned int b;\n
extern unsigned int c;\n
extern unsigned int d;\n
\n
int cgc_rng()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v0 = a ^ a * 128;\n
    a = b;\n
    b = c;\n
    c = d;\n
    d = d ^ d >> 8 ^ v0 ^ v0 >> 19;\n
    v5 = v1;\n
    return d;\n
}\n
", "4223043:sub_407043": null, "4223056:cgc_list_movies": "int cgc_list_movies()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    return cgc_list_all_movies();\n
}\n
", "4223084:sub_40706c": null, "4223088:cgc_user_rent_movie": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_user_rent_movie()\n
{\n
    char v0;  // [bp-0x415]\n
    unsigned int v1;  // [bp-0x414]\n
    char v2[2];  // [bp-0x410]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = cgc_get_num_owned_movies();\n
    cgc_list_owned_movies();\n
    if (!v3)\n
    {\n
        v8 = cgc_fdprintf(1, v1 - 5422);\n
        return v8;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v4)\n
            v0 = !(v4 <= v3);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, v1 - 7999);\n
        cgc_readline(0, v2, 0x400);\n
        v4 = cgc_strtol(v2, NULL, 10);\n
        if (v4 && v4 <= v3)\n
            goto LABEL_4071a7;\n
        cgc_fdprintf(1, v1 - 7982);\n
LABEL_4071a7:\n
    }\n
    v8 = cgc_rent_movie(v4);\n
    return v8;\n
}\n
", "4223430:sub_4071c6": null, "4223440:cgc_user_return_movie": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_user_return_movie()\n
{\n
    char v0;  // [bp-0x415]\n
    unsigned int v1;  // [bp-0x414]\n
    char v2[2];  // [bp-0x410]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = cgc_get_num_rented_movies();\n
    cgc_list_rented_movies();\n
    if (!v3)\n
    {\n
        v8 = cgc_fdprintf(1, v1 - 5368);\n
        return v8;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v4)\n
            v0 = !(v4 <= v3);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, v1 - 7999);\n
        cgc_readline(0, v2, 0x400);\n
        v4 = cgc_strtol(v2, NULL, 10);\n
        if (v4 && v4 <= v3)\n
            goto LABEL_407307;\n
        cgc_fdprintf(1, v1 - 7982);\n
LABEL_407307:\n
    }\n
    v8 = cgc_return_movie(v4);\n
    return v8;\n
}\n
", "4223782:sub_407326": null, "4223792:cgc_admin_login": "extern unsigned int _GLOBAL_OFFSET_TABLE_[122];\n
\n
int cgc_admin_login()\n
{\n
    char *v0[122];  // [bp-0x410]\n
    char v1;  // [bp-0x40c]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    cgc_fdprintf(1, \"username: \");\n
    cgc_readline(0, &v1, 0x400);\n
    if (cgc_strcmp(&v1, v0[79]))\n
    {\n
        cgc_fdprintf(1, &v0[10 + 107] + 3);\n
        v2 = -1;\n
        return v2;\n
    }\n
    cgc_fdprintf(1, &v0[10 + 96] + 1);\n
    cgc_readline(0, &v1, 0x400);\n
    if (!cgc_strcmp(&v1, v0[121]))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_fdprintf(1, &v0[10 + 107] + 3);\n
    v2 = -1;\n
    return v2;\n
}\n
", "4224124:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:memcpy": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}