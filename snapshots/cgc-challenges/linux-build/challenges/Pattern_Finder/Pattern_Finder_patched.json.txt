{"4202496:_init": "extern struct_0 *g_40a138;\n
\n
int _init()\n
{\n
    if (g_40a138)\n
    {\n
        g_40a138();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 32847;\n
    v6 = v5 + 797;\n
    v7 = v5 + 797;\n
    if (v7 == v6)\n
        return v5 + 797;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32783;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 797;\n
    v9 = (v6 + 797 - (v6 + 797) >> 31) + (797 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a134;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a134)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203066:sub_40223a": null, "4203072:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 1;\n
}\n
", "4203101:sub_40225d": null, "4203104:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 2;\n
}\n
", "4203133:sub_40227d": null, "4203136:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 16;\n
}\n
", "4203165:sub_40229d": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 14;\n
}\n
", "4203197:sub_4022bd": null, "4203200:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 12;\n
}\n
", "4203229:sub_4022dd": null, "4203232:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 4;\n
}\n
", "4203261:sub_4022fd": null, "4203264:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 8;\n
}\n
", "4203293:sub_40231d": null, "4203296:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 64;\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 32;\n
}\n
", "4203357:sub_40235d": null, "4203360:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[12604 + v0] & 4294967168;\n
}\n
", "4203389:sub_40237d": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[12604 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[12604 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[12604 + v1] & 2) >> 1);\n
}\n
", "4203451:sub_4023bb": null, "4203456:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[12604 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203490:sub_4023e2": null, "4203504:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[12604 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[12604 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203566:sub_40242e": null, "4203568:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[12604 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203602:sub_402452": null, "4203616:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203648:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
    char *v7;  // edi\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ebp\n
    void* v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v4 = v3;\n
    v5 = v3->field_8;\n
    if (v5 == -1)\n
        return 0;\n
    if (v4->field_4 == 1)\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        v7 = v4->field_10;\n
        if (v7)\n
        {\n
            v8 = v4->field_c;\n
            if (v8 != v5)\n
            {\n
                do\n
                {\n
                    *(24 + &v4->field_0 + v5) = v7[*(24 + &v4->field_0 + v5)];\n
                    v5 += 1;\n
                } while (v8 != v5);\n
            }\n
        }\n
        v1 = v4->field_0;\n
        v9 = v4->field_8;\n
        v10 = 24 + v9 + v4;\n
        v11 = v4->field_c - v9;\n
        v12 = 0;\n
        while (true)\n
        {\n
            v13 = v12;\n
            v14 = v11 - v12;\n
            if (v11 <= v12)\n
                break;\n
            v15 = v10 + v12;\n
            v0 = &v2;\n
            v16 = cgc_transmit(v1, v15, v14);\n
            v17 = 0;\n
            if (!v16)\n
                v17 = *(&v2);\n
            v12 = v17 + v13;\n
            if (v16)\n
                break;\n
        }\n
        v6 = -(v13 < v11);\n
        v4 = v3;\n
    }\n
    *((v4 + 12)) = 0;\n
    *((v4 + 8)) = 0;\n
    return v6;\n
}\n
", "4203757:sub_4024ed": null, "4203838:sub_40253e": null, "4203840:cgc_fbuffered": "int cgc_fbuffered(unsigned int v4[5], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // ecx\n
    unsigned int v6[5];  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // edi, Other Possible Types: unsigned int\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v6[2];\n
    if (v7 == -1)\n
    {\n
        v6[2] = -(v5 < 1);\n
        v6[3] = 0;\n
        return -(v5 < 1);\n
    }\n
    if (v6[1] != 1)\n
    {\n
        if (v6[4])\n
        {\n
            v8 = v6[3];\n
            if (v8 != v7)\n
            {\n
                do\n
                {\n
                    *(24 + &v6[0] + v7) = *((v6[4] + *(24 + &v6[0] + v7)));\n
                    v7 += 1;\n
                } while (v8 != v7);\n
            }\n
        }\n
        v2 = v6[0];\n
        v9 = v6[2];\n
        v1 = 24 + v6 + v9;\n
        v10 = v6[3] - v9;\n
        v13 = 0;\n
        while (v10 > v13)\n
        {\n
            v0 = &v3;\n
            v11 = cgc_transmit(v2, v1 + v13, v10 - v13);\n
            v12 = 0;\n
            if (!v11)\n
                v12 = *(&v3);\n
            v13 += v12;\n
            if (v11)\n
                break;\n
        }\n
    }\n
    v6[3] = 0;\n
    v6[2] = 0;\n
    v5 = a0;\n
}\n
", "4204052:sub_402614": null, "4204064:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204157:sub_40267d": null, "4204160:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v5, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // ebp\n
    char *v8;  // ecx\n
    void* v9;  // edx, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    char *v16;  // edi\n
    unsigned int v17;  // ebp\n
    char *v18;  // eax\n
    unsigned int v19;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = a1;\n
    if (v6->field_8 == v6->field_c)\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (!cgc_receive(v6->field_0, v6 + 1, 0x400))\n
        {\n
            v7 = *(&v4);\n
            if (*(&v4))\n
            {\n
                v6->field_c = v7;\n
                v8 = v6->field_14;\n
                if (v8)\n
                {\n
                    v9 = 0;\n
                    do\n
                    {\n
                        *(24 + &v6->field_0 + v9) = v8[*(24 + &v6->field_0 + v9)];\n
                        v9 += 1;\n
                    } while (v7 != v9);\n
                }\n
            }\n
        }\n
    }\n
    v10 = a0;\n
    v11 = v6->field_8;\n
    if (v11 != -1)\n
    {\n
        v12 = v6->field_c - v11;\n
        if (v12 > v10)\n
            v12 = v10;\n
        v2 = v12;\n
        cgc_memcpy();\n
        v13 = v2;\n
        v14 = v6->field_8 + v13;\n
        v6->field_8 = v14;\n
        if (v14 == v6->field_c)\n
        {\n
            v6->field_c = 0;\n
            v6->field_8 = 0;\n
        }\n
        if (v13 < v10)\n
            goto LABEL_402780;\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        if (0 < v10)\n
        {\n
            while (true)\n
            {\n
LABEL_402780:\n
                v16 = v5 + v13;\n
                v3 = v13;\n
                v0 = &v2;\n
                if (cgc_receive(v6->field_0, v16, a0 - v13))\n
                    return -1;\n
                v17 = v2;\n
                if (!v2)\n
                    return -1;\n
                v18 = v6->field_14;\n
                if (v18)\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v16[v19] = v18[v16[v19]];\n
                        v19 += 1;\n
                    } while (v17 != v19);\n
                }\n
                v13 = v3 + v17;\n
                if (v13 >= a0)\n
                    return v13;\n
            }\n
        }\n
    }\n
    return v13;\n
}\n
", "4204397:sub_40276d": null, "4204516:sub_4027e4": null, "4204528:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v6 = 0;\n
    tmp_21 = v1;\n
    v3 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
            {\n
                v5 = 1;\n
            }\n
            else\n
            {\n
                v5 = 2;\n
                if (v4 != v2)\n
                {\n
                    *((v0 + v6)) = v4;\n
                    v5 = 0;\n
                }\n
            }\n
            if (v5)\n
                break;\n
            v6 += 1;\n
            if (v3 == v6)\n
                goto LABEL_402867;\n
        }\n
        if (!(v5 == 2))\n
            goto LABEL_40288c;\n
    }\n
LABEL_402867:\n
    if (v6 != v3)\n
    {\n
LABEL_402882:\n
        *((v0 + v6)) = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v7 = cgc__getc();\n
        if (v7 == -1)\n
            break;\n
        if (v7 == v2)\n
            goto LABEL_402882;\n
    }\n
LABEL_40288c:\n
    return -1;\n
}\n
", "4204610:sub_402842": null, "4204699:sub_40289b": null, "4204704:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x15]\n
    char v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    char *v9;  // eax\n
    char *v10;  // edx\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
\n
    v6 = v5;\n
    v7 = v5->field_8;\n
    if (v7 == -1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5->field_0, &v1, 1))\n
        {\n
            return -1;\n
        }\n
        else if (!*(&v2))\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v9 = v5->field_14;\n
            if (!v9)\n
                return v1;\n
            v1 = v9[v1];\n
        }\n
    }\n
    else\n
    {\n
        if (v7 == v5->field_c)\n
        {\n
            v5->field_c = 0;\n
            v5->field_8 = 0;\n
            v0 = &v3;\n
            v13 = -1;\n
            if (!cgc_receive(v5->field_0, v5 + 1, 0x400))\n
            {\n
                v8 = *(&v3);\n
                v13 = -1;\n
                if (v8)\n
                {\n
                    v6->field_c = v8;\n
                    v10 = v6->field_14;\n
                    if (v10)\n
                    {\n
                        v11 = 0;\n
                        do\n
                        {\n
                            *(24 + &v6->field_0 + v11) = v10[*(24 + &v6->field_0 + v11)];\n
                            v11 += 1;\n
                        } while (v8 != v11);\n
                    }\n
                    v13 = v8;\n
                }\n
            }\n
            if (v13 < 0)\n
                return -1;\n
        }\n
        v14 = v6->field_8;\n
        v6->field_8 = v14 + 1;\n
        return *(24 + &v6->field_0 + v14);\n
    }\n
}\n
", "4204929:sub_402981": null, "4204944:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4204984:sub_4029b8": null, "4204992:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fwrite(unsigned int v5, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x420]\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // [bp-0x41c]\n
    unsigned int v2;  // [bp-0x418]\n
    char v3;  // [bp-0x414]\n
    char v4;  // [bp-0x410]\n
    struct_1 *v6;  // edi\n
    unsigned int v7;  // ebp\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // esi\n
    char *v10;  // edi\n
    unsigned int v11;  // ebp\n
    struct_0 *v12;  // eax, Other Possible Types: unsigned int\n
    void* v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // eax\n
    void* v16;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // eax\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ebp\n
\n
    v6 = a1;\n
    v7 = a0;\n
    if (v6->field_8 != -1)\n
    {\n
        if (v7 >= 0x400)\n
        {\n
            cgc_fflush(v6);\n
        }\n
        else\n
        {\n
            v8 = v6->field_c;\n
            v9 = 0;\n
            if (v8 + v7 >= 0x400)\n
            {\n
                v9 = 0x400 - v8;\n
                cgc_memcpy(&v6[1].padding_4[v8], v5);\n
                v6->field_c = v6->field_c + v9;\n
                cgc_fflush(v6);\n
            }\n
            if (v9 < v7)\n
            {\n
                v25 = v7 - v9;\n
                cgc_memcpy(&v6[1].padding_4[v6->field_c], v5 + v9);\n
                v6->field_c = v6->field_c + v25;\n
                return a0;\n
            }\n
            return v9;\n
        }\n
    }\n
    v1 = v6->field_0;\n
    v10 = v6->field_10;\n
    v19 = 0;\n
    if (!v10)\n
    {\n
        while (v19 < v7)\n
        {\n
            v20 = v19;\n
            v21 = v5 + v19;\n
            v22 = v7 - v19;\n
            v0 = &v4;\n
            v23 = cgc_transmit(v1, v21, v22);\n
            v24 = 0;\n
            if (!v23)\n
                v24 = *(&v4);\n
            v19 = v24 + v20;\n
            if (v23)\n
            {\n
                if (v20 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        while (v19 < v7)\n
        {\n
            v11 = v7 - v19;\n
            if (v11 >= 0x400)\n
                v11 = 0x400;\n
            v2 = v19;\n
            cgc_memcpy();\n
            if (v11)\n
            {\n
                v12 = 0;\n
                do\n
                {\n
                    (&v4)[v12] = v10[(&v4)[v12]];\n
                    v12 += 1;\n
                } while (v11 != v12);\n
            }\n
            v13 = 0;\n
            do\n
            {\n
                v14 = v13;\n
                if (v11 <= v13)\n
                {\n
                    v16 = v11;\n
                    break;\n
                }\n
                v0 = &v3;\n
                v15 = cgc_transmit(v1, &(&v4)[v13], v11 - v13);\n
                v16 = 0;\n
                v17 = 0;\n
                if (!v15)\n
                    v17 = *(&v3);\n
                v13 = v17 + v14;\n
            } while (!v15);\n
            v18 = v2;\n
            v19 = v16 + v18;\n
            tmp_6 = v11;\n
            v7 = a0;\n
            if (tmp_6 > v14)\n
            {\n
                if (v18 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    return v7;\n
}\n
", "4205078:sub_402a16": null, "4205148:sub_402a5c": null, "4205272:sub_402ad8": null, "4205491:sub_402bb3": null, "4205504:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        v10 += 1;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4205769:sub_402cc9": null, "4205776:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4205816:sub_402cf8": null, "4205824:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    struct struct_4 *field_0;\n
    char padding_4[516];\n
    struct struct_2 *field_208;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_4 *field_c;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[262142];  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    struct_3 *v6;  // [bp-0xc]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // edi\n
    struct_2 *v11;  // ebp\n
    struct_2 *v12;  // esi\n
    unsigned int v13;  // ebp\n
    struct_5 *v14;  // ebp, Other Possible Types: unsigned int\n
    struct_4 *v15;  // edi, Other Possible Types: unsigned int\n
    struct_4 *v16;  // eax, Other Possible Types: unsigned int\n
    struct_5 *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18[262142];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct_3 *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    struct_0 *v24;  // ecx\n
    struct_2 *v25;  // ecx\n
    unsigned int v26;  // ecx\n
    struct_1 *v27;  // eax\n
    struct_0 *v28;  // edx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // edx\n
    struct_5 *v31;  // edx, Other Possible Types: unsigned int\n
    struct_5 *v32;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    struct_0 *v35;  // ecx\n
\n
    if (a0 < 0)\n
        return 0;\n
    v9 = a0 + 3 & -0x4;\n
    if ((a0 + 3 & -0x4) && v9 > 15)\n
    {\n
        if (v9 > 131071)\n
        {\n
            v13 = v9 + 4103 & -0x1000;\n
            v0 = &v4;\n
            if (cgc_allocate(v13, 0))\n
                return 0;\n
            v15 = *(&v4);\n
            *(v15) = v8;\n
            *((v15 + 4)) = v13;\n
            goto LABEL_402fdf;\n
        }\n
        v11 = v9 + 23;\n
        v12 = v11 & -0x10;\n
        if (!(v11 & -0x10))\n
        {\n
            v14 = -1;\n
        }\n
        else if (v12 <= 0x200)\n
        {\n
            v14 = (v11 >> 4) + 2;\n
        }\n
        else if (v12 <= 0x1200)\n
        {\n
            v14 = (v12 + 32 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v14 = 130;\n
            if (v12 <= 0x20000)\n
                v14 = (v12 + 288 >> 11) + 66;\n
        }\n
        v15 = 0;\n
        if (v14 <= 130)\n
        {\n
            do\n
            {\n
                v16 = *((v8 + v14 * 4));\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        if (*((v16 + 4)) >= v12)\n
                        {\n
                            v15 = v16;\n
                            goto LABEL_402e10;\n
                        }\n
                        v16 = *((v16 + 12));\n
                    } while (v16);\n
                }\n
                v14 += 1;\n
            } while (v14 != 131);\n
            v14 = 131;\n
            if (!(131 == 131))\n
                goto LABEL_402f13;\n
            goto LABEL_402e1c;\n
        }\n
LABEL_402e10:\n
        if (!(v14 == 131))\n
            goto LABEL_402f13;\n
LABEL_402e1c:\n
        v0 = &v3;\n
        v17 = v8;\n
        v18 = 0;\n
        if (!cgc_allocate(0x200000, 0))\n
        {\n
            v19 = *(&v3);\n
            v2[0] = v19 + 1048575;\n
            v18 = v19 + 1048575 & -0x100000;\n
            if ((v19 + 1048575 & -0x100000) > v19)\n
            {\n
                v1 = v19;\n
                cgc_deallocate(v19);\n
                v19 = v1;\n
                v17 = v8;\n
            }\n
            v20 = v18 + 0x100000;\n
            if (v19 + 0x200000 > v20)\n
            {\n
                cgc_deallocate(v20);\n
                v17 = v8;\n
            }\n
            *((v17 + (v2 >> 20) + 524)) = 2;\n
        }\n
        if (!v18)\n
            return 0;\n
        v21 = v18 + 19 & -0x10;\n
        v21->field_0 = 0;\n
        v22 = 1048560 + v18 - v21;\n
        v21->field_4 = v22;\n
        *((v18 + 1048560)) = v22;\n
        *((v18 + 1048564)) = 0;\n
        v23 = v21->field_4;\n
        if (!(!(v23 & 1)))\n
            goto LABEL_403012;\n
        v21->field_4 = v23 | 1;\n
        v21->field_8 = 0;\n
        v21->field_c = *((v17 + 520));\n
        *((v17 + 520)) = v21;\n
        v24 = v21->field_c;\n
        if (v24)\n
            v24->field_8 = v21;\n
        v15 = *((v17 + 520));\n
        v14 = 130;\n
LABEL_402f13:\n
        v25 = *((v15 + 4));\n
        if (!(v25 & 1))\n
        {\n
            v21 = cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\");\n
        }\n
        else\n
        {\n
            v26 = v25 & -2;\n
            *((v15 + 4)) = v26;\n
            v27 = *((v15 + 8));\n
            if (v27)\n
                v27->field_c = *((v15 + 12));\n
            v28 = *((v15 + 12));\n
            if (v28)\n
                v28->field_8 = v27;\n
            v29 = v8;\n
            if (*((v29 + (v14 << 2))) == v15)\n
                *((v29 + v14 * 4)) = *((v15 + 12));\n
            *((v15 + 8)) = 0;\n
            *((v15 + 12)) = 0;\n
            v30 = v26 - v12;\n
            if (v30 < 33)\n
            {\n
LABEL_402fdf:\n
                v10 = v15 + 8;\n
                return v10;\n
            }\n
            v21 = v12 + v15;\n
            *((v15 + 4)) = v12;\n
            *((&v12->field_0 + v15)) = v12;\n
            *((4 + &v12->field_0 + v15)) = v30;\n
            *((v26 + v15)) = v30;\n
            if (v30 <= 0x200)\n
            {\n
                v31 = (v30 >> 4) + 2;\n
            }\n
            else if (v30 <= 0x1200)\n
            {\n
                v31 = (v30 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v32 = 130;\n
                if (!(v30 <= 0x20000))\n
                    goto LABEL_402fb3;\n
                v31 = (v30 - 0x1200 >> 11) + 66;\n
            }\n
            v32 = v31;\n
LABEL_402fb3:\n
            v33 = *((v21 + 4));\n
            if (!(v33 & 1))\n
            {\n
                *((v21 + 4)) = v33 | 1;\n
                *((v21 + 8)) = 0;\n
                v34 = v8;\n
                *((v21 + 12)) = *((v34 + v32 * 4));\n
                *((v34 + v32 * 4)) = v21;\n
                v35 = *((v21 + 12));\n
                if (v35)\n
                {\n
                    v35->field_8 = v21;\n
                    goto LABEL_402fdf;\n
                }\n
            }\n
        }\n
LABEL_403012:\n
        v6 = v21;\n
        v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        cgc_heap_error(*(&v7));\n
        return cgc_tiny_alloc(v8);\n
    }\n
    v10 = cgc_tiny_alloc();\n
    return v10;\n
}\n
", "4206640:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    struct struct_2 *field_1218;\n
    struct struct_2 *field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // esi\n
    struct_0 *v10;  // edi, Other Possible Types: unsigned int\n
    unsigned short v11[2];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // ebp, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned short *v16;  // ebx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
\n
    v9 = v8;\n
    if (v8 <= 15)\n
    {\n
        v10 = v8 / 4 - 1;\n
    }\n
    else if (v8 <= 0x200)\n
    {\n
        v10 = (v8 >> 4) + 2;\n
    }\n
    else if (v8 <= 0x1200)\n
    {\n
        v10 = (v8 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v8 <= 0x20000)\n
            v10 = (v8 - 0x1200 >> 11) + 66;\n
    }\n
    v13 = *((v12 + v10 * 4));\n
    if (*((v12 + (v10 << 2))))\n
    {\n
        *((v12 + v10 * 4)) = *(v13);\n
        return *((v12 + v10 * 4));\n
    }\n
    v11 = *((v12 + v10 * 4 + 4620));\n
    if (!v11)\n
    {\n
        if (!*((v12 + 4632)))\n
        {\n
            v0 = &v6;\n
            v2 = v12;\n
            v12 = v2;\n
            v14 = 0;\n
            if (!cgc_allocate(0x200000, 0))\n
            {\n
                v1 = *(&v6);\n
                v5 = v1 + 1048575;\n
                v14 = v5 & -0x100000;\n
                v3 = v14;\n
                if (v14 > v1)\n
                {\n
                    cgc_deallocate(v1);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                v4 = v14 + 0x100000;\n
                v15 = v1 + 0x200000;\n
                v1 = v15 - v4;\n
                if (v15 > v4)\n
                {\n
                    cgc_deallocate(v4);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                *((v12 + (v5 >> 20) + 524)) = 1;\n
            }\n
            *((v12 + 4632)) = v14;\n
            if (!v14)\n
                return 0;\n
            *((v12 + 4636)) = 0;\n
        }\n
        v16 = *((v12 + 4632));\n
        v17 = *((v12 + 4636));\n
        v11 = v17 + v16;\n
        *((v12 + v10 * 4 + 4620)) = v11;\n
        *((v17 + v16)) = v9;\n
        *((2 + v17 + v16)) = v9;\n
        v18 = v17 + 0x1000;\n
        *((v12 + 4636)) = v18;\n
        if (v18 == 0x100000)\n
            *((v12 + 4632)) = 0;\n
    }\n
    v19 = *((v11 + 2));\n
    v13 = v19 + v11;\n
    v20 = v9 + v19;\n
    *((v11 + 2)) = v20;\n
    v21 = *(v11);\n
    if (v21 + v20 < 4097)\n
        return v13;\n
    *((v12 + v10 * 4 + 4620)) = 0;\n
}\n
", "4207094:sub_4031f6": null, "4207104:malloc_free": "int malloc_free(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v7;  // [bp-0x4]\n
    char v8;  // [bp+0x0]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebp\n
    char v12;  // cl\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
\n
    v10 = a0;\n
    if (!v10)\n
        return v10;\n
    v11 = v9;\n
    v12 = *((v9 + (v10 >> 20) + 524));\n
    if (v12 != 2)\n
    {\n
        if (v12 == 1)\n
        {\n
            v13 = (*((v10 & -0x1000)) <= 15 ? (*((v10 & -0x1000)) <= 0x200 ? (*((v10 & -0x1000)) <= 0x1200 ? (*((v10 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v10 & -0x1000)) - 0x200 >> 7) + 34) : (*((v10 & -0x1000)) >> 4) + 2) : *((v10 & -0x1000)) / 4 - 1);\n
            *(v10) = *((v11 + v13 * 4));\n
            *((v11 + v13 * 4)) = v10;\n
            return v10;\n
        }\n
        if (v12)\n
            return v10;\n
        if ((v10 & 4095) != 8)\n
        {\n
            v17 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40356c;\n
        }\n
        else\n
        {\n
            v18 = *((v10 - 8));\n
            if (v18 != v11)\n
            {\n
                v19 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v11;\n
            }\n
            else\n
            {\n
                v18 = *((v10 - 4));\n
                if (v18 - 0x20000 <= 2147356671 && !(v18 & 4095))\n
                {\n
                    v10 = cgc_deallocate(v10 - 8);\n
                    return v10;\n
                }\n
                v19 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v18;\n
            v10 = cgc_heap_error(v19, v10);\n
        }\n
    }\n
    else if (!(v10 & 7))\n
    {\n
        v17 = v10 - 8;\n
        v14 = *((v17 + 4));\n
        if ((v14 & 1))\n
        {\n
            v17 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40356c;\n
        }\n
        else\n
        {\n
            v20 = v14 - 131073;\n
            if (v20 <= -131058)\n
            {\n
                v17 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
                goto LABEL_40356c;\n
            }\n
            else\n
            {\n
                v15 = *(v17);\n
                v16 = v17 - v15;\n
                if (!v15)\n
                    v16 = v15;\n
                if (v16)\n
                {\n
                    v11 = v9;\n
                    if (!((*((v16 + 4)) & -2) == v15))\n
                        goto LABEL_403594;\n
                }\n
                v20 = v14 + v17;\n
                if (*(v20) == v14)\n
                {\n
                    if (v16)\n
                    {\n
                        v21 = *((v16 + 4));\n
                        if ((v21 & 1))\n
                        {\n
                            v22 = v21 & -2;\n
                            v3 = v20;\n
                            if ((v21 & -2) <= 15)\n
                            {\n
                                v23 = v21 / 4 - 1;\n
                            }\n
                            else if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else if (v22 <= 0x1200)\n
                            {\n
                                v23 = (v22 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v23 = 130;\n
                                if (v22 <= 0x20000)\n
                                    v23 = (v22 - 0x1200 >> 11) + 66;\n
                            }\n
                            *((v16 + 4)) = v22;\n
                            v24 = *((v16 + 8));\n
                            if (v24)\n
                                *((v24 + 12)) = *((v16 + 12));\n
                            v25 = *((v16 + 12));\n
                            if (v25)\n
                                *((v25 + 8)) = v24;\n
                            if (*((v9 + (v23 << 2))) == v16)\n
                            {\n
                                v2 = v22;\n
                                *((v9 + v23 * 4)) = *((v16 + 12));\n
                                v22 = v2;\n
                            }\n
                            *((v16 + 8)) = 0;\n
                            *((v16 + 12)) = 0;\n
                            v26 = v22 + *((v17 + 4));\n
                            *((v16 + 4)) = v26;\n
                            v20 = v3;\n
                            *(v20) = v26;\n
                            v17 = v16;\n
                            v11 = v9;\n
                        }\n
                    }\n
                    v27 = *((v20 + 4));\n
                    if ((v27 & 1))\n
                    {\n
                        v28 = v27 & -2;\n
                        if (v28 <= 15)\n
                        {\n
                            v29 = v27 / 4 - 1;\n
                        }\n
                        else if (v28 <= 0x200)\n
                        {\n
                            v29 = (v27 >> 4) + 2;\n
                        }\n
                        else if (v28 <= 0x1200)\n
                        {\n
                            v29 = (v28 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v29 = 130;\n
                            if (v28 <= 0x20000)\n
                                v29 = (v28 - 0x1200 >> 11) + 66;\n
                        }\n
                        *((v20 + 4)) = v28;\n
                        v30 = *((v20 + 8));\n
                        if (v30)\n
                            *((v30 + 12)) = *((v20 + 12));\n
                        if (*((v20 + 12)))\n
                            *((*((v20 + 12)) + 8)) = v30;\n
                        v11 = v9;\n
                        if (*((v9 + (v29 << 2))) == v20)\n
                            *((v11 + v29 * 4)) = *((v20 + 12));\n
                        *((v20 + 8)) = 0;\n
                        *((v20 + 12)) = 0;\n
                        v16 = v28 + *((v17 + 4));\n
                        *((v17 + 4)) = v16;\n
                        *((v17 + v16)) = v16;\n
                    }\n
                    v31 = *((v17 + 4));\n
                    if (v31 <= 15)\n
                    {\n
                        v32 = v31 / 4 - 1;\n
                    }\n
                    else if (v31 <= 0x200)\n
                    {\n
                        v32 = (v31 >> 4) + 2;\n
                    }\n
                    else if (v31 <= 0x1200)\n
                    {\n
                        v32 = (v31 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v32 = 130;\n
                        if (v31 <= 0x20000)\n
                            v32 = (v31 - 0x1200 >> 11) + 66;\n
                    }\n
                    if (!(v31 & 1))\n
                    {\n
                        *((v17 + 4)) = v31 | 1;\n
                        *((v17 + 8)) = 0;\n
                        *((v17 + 12)) = *((v11 + v32 * 4));\n
                        *((v11 + v32 * 4)) = v17;\n
                        v10 = *((v17 + 12));\n
                        if (!v10)\n
                            return *((v17 + 12));\n
                        *((v10 + 8)) = v17;\n
                    }\n
                    goto LABEL_403584;\n
                }\n
            }\n
        }\n
    }\n
    v17 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40356c:\n
    v7 = v10;\n
    v6 = v17;\n
    v10 = cgc_heap_error(*(&v8));\n
    v6 = v10;\n
    v5 = v20;\n
    v4 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
LABEL_403584:\n
    v5 = v17;\n
    v4 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v10 = cgc_heap_error(*(&v8));\n
LABEL_403594:\n
    v6 = v10;\n
    v5 = v16;\n
    v4 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
    return cgc_malloc_size(v9, a0);\n
}\n
", "4208048:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208097:sub_4035e1": null, "4208112:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
        return 0;\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4036bf:\n
        malloc_free(v1, a0);\n
        return v3;\n
    }\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc_alloc(v7, v2);\n
        return v3;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4036a2;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4036a2:\n
        return v4;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        return 0;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4036bf;\n
    goto LABEL_4036bf;\n
}\n
", "4208337:sub_4036d1": null, "4208352:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4208416:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4208470:sub_403756": null, "4208480:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4208541:sub_40379d": null, "4208544:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4208593:sub_4037d1": null, "4208608:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            tmp_4 = v1;\n
            v1 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4208689:sub_403831": null, "4208704:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4208748:sub_40386c": null, "4208752:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // eax\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4208854:sub_4038d6": null, "4208864:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208962:sub_403942": null, "4208976:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
        v4->field_8 = 0;\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    if (v4->field_8 == -1)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4209074:sub_4039b2": null, "4209088:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 == -1)\n
        v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    if (v2->field_8 == -1)\n
    {\n
        cgc_fflush(v2);\n
        v2->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4209182:sub_403a1e": null, "4209184:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4209232:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4209275:sub_403a7b": null, "4209280:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(unsigned int v16, unsigned int a0)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0x78]\n
    int tmp_2;  // tmp #2\n
    int tmp_25;  // tmp #25\n
    unsigned int v1;  // [bp-0x74]\n
    char v2;  // [bp-0x69]\n
    unsigned int v3;  // [bp-0x68], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x64]\n
    char v5;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x58]\n
    unsigned int v8;  // [bp-0x54]\n
    char v9;  // [bp-0x50]\n
    char v10;  // [bp-0x4f]\n
    char v11;  // [bp-0x3e]\n
    char v12;  // [bp-0x3d]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // al, Other Possible Types: char\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // ebx, Other Possible Types: char\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // cc_op\n
    unsigned int v47;  // cc_dep1\n
    unsigned int v48;  // cc_dep2\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // edi\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // cc_op\n
    unsigned int v53;  // cc_dep1\n
    unsigned int v54;  // cc_dep2\n
    unsigned int v56;  // edx\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ebp\n
    unsigned int v59;  // edi\n
    unsigned int v61;  // edi\n
    unsigned int v62;  // edx\n
    unsigned int v63;  // eax\n
    unsigned int v64;  // ecx\n
    unsigned int v65;  // ebx\n
    unsigned int v66;  // edx\n
    unsigned int v67;  // edi\n
    unsigned int v68;  // ebp\n
    unsigned int v72;  // ebx\n
    unsigned int v73;  // ecx, Other Possible Types: char\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // edx\n
    unsigned int v76;  // ecx\n
    unsigned int v77;  // edx\n
    unsigned int v79;  // eax\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // ebp\n
    unsigned int v83;  // edx\n
    unsigned int v84;  // edx\n
    unsigned int v86;  // ebx\n
    unsigned int v87;  // cc_op\n
    unsigned int v88;  // cc_dep1\n
    unsigned int v89;  // cc_dep2\n
    unsigned int v90;  // cc_op\n
    unsigned int v91;  // cc_dep1\n
    unsigned int v92;  // cc_dep2\n
    unsigned int v93;  // ebp\n
    unsigned int v94;  // edx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // cc_op\n
    unsigned int v99;  // cc_dep1\n
    unsigned int v100;  // cc_dep2\n
    unsigned int v101;  // eax\n
\n
    v15 = v20;\n
    v14 = v21;\n
    v13 = v22;\n
    v6 = v23;\n
    v24 = &_GLOBAL_OFFSET_TABLE_;\n
    v59 = a0;\n
    v26 = v16;\n
    v4 = v25;\n
    v8 = 20 + -0x1 * &v9;\n
    v27 = 0;\n
    v29 = v4;\n
    v4 = v29 + 1;\n
    *(&v29) = *(v29);\n
    if (*(&v29))\n
    {\n
        while (true)\n
        {\n
            if (v29 != 37)\n
            {\n
                if (v27 < 2147483647)\n
                {\n
                    v2 = v29;\n
                    if (v26)\n
                    {\n
                        cgc_fwrite(&v2, 1, v26);\n
                        v26 = v16;\n
                    }\n
                    if (v59)\n
                        *((v59 + v27)) = v2;\n
                }\n
                else if (v27 == -1)\n
                {\n
                    goto LABEL_4040ea;\n
                }\n
                v27 += 1;\n
                v28 = v4;\n
                v4 = v28 + 1;\n
                v29 = *(v28);\n
                if (!v29)\n
                    goto LABEL_403ac0;\n
            }\n
            else\n
            {\n
                v30 = v4;\n
                v4 = *(&v3) + 1;\n
                v31 = *(*(&v3));\n
                if (v31 == 48)\n
                {\n
                    v3 = v30;\n
                    v5 = 48;\n
                    goto LABEL_403b7e;\n
                }\n
                else\n
                {\n
                    v5 = 32;\n
                    if (v31 == 32)\n
                    {\n
                        v3 = *(&v3);\n
LABEL_403b7e:\n
                        v32 = v4;\n
                        v33 = 0;\n
                        if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2))))\n
                            v33 = cgc_strtoul(v32, &v4);\n
                        v34 = v4;\n
                        v4 = v34 + 1;\n
                        v35 = *(v34);\n
                        if (v35 == 108)\n
                        {\n
                            v7 = v33;\n
                            *(&v35) = 1;\n
                            if (*(v4) == 108)\n
                            {\n
                                v4 = v34 + 2;\n
                                v35 = 0;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (v35 == 104)\n
                            {\n
                                *(&v35) = 1;\n
                                v7 = v33;\n
                                if (*(v4) == 104)\n
                                    v4 = v34 + 2;\n
                            }\n
                            else\n
                            {\n
                                if (!v35)\n
                                    goto LABEL_403c4d;\n
                                v7 = v33;\n
                                v4 = v34;\n
                                *(&v35) = 1;\n
                            }\n
                        }\n
                        v36 = v4;\n
                        v37 = v36 + 1;\n
                        v4 = v37;\n
                        *(&v32) = *(v36);\n
                        v73 = *(v36);\n
                        v59 = v73 - 88;\n
                        switch (v59)\n
                        {\n
                        case 0: case 12: case 29: case 32:\n
                            if (v32 != 100)\n
                            {\n
                                if (!v35)\n
                                {\n
                                    v73 = 0;\n
                                    v59 = a0;\n
                                    v51 = v16;\n
                                    break;\n
                                }\n
                                else\n
                                {\n
                                    v50 = (v32 == 117 ? 16 : 10);\n
                                    v76 = *(v6);\n
                                    v3 = v24;\n
                                    v65 = v24 - 11723;\n
                                    if (v32 == 88)\n
                                        v65 = v24 - 11740;\n
                                    v12 = 0;\n
                                    v68 = &v12;\n
                                    if (!v76)\n
                                    {\n
                                        v11 = *(v65);\n
                                        v68 = &v11;\n
                                    }\n
                                    else\n
                                    {\n
                                        do\n
                                        {\n
                                            *((v68 - 1)) = *((v65 + ((0 CONCAT v76) /m v50 >> 32)));\n
                                            v68 = &v11;\n
                                            tmp_13 = v76;\n
                                            v76 = (0 CONCAT v76) /m v50;\n
                                        } while (tmp_13 >= v50);\n
                                    }\n
                                    v1 = v8 + v68;\n
                                    v0 = v68;\n
                                    v81 = v3;\n
                                    cgc_memmove(&v9, v0, v1);\n
                                }\n
LABEL_403f4d:\n
                                v73 = v7;\n
                                v3 = cgc_strlen();\n
                                if (v73 <= v3)\n
                                {\n
                                    v94 = v16;\n
                                }\n
                                else\n
                                {\n
                                    v59 = v3 - v73;\n
                                    v94 = v16;\n
                                    do\n
                                    {\n
                                        if (v27 < 2147483647)\n
                                        {\n
                                            v2 = v5;\n
                                            if (v94)\n
                                            {\n
                                                cgc_fwrite(&v2, 1, v94);\n
                                                v94 = v16;\n
                                            }\n
                                            v73 = a0;\n
                                            if (v73)\n
                                                *((v73 + v27)) = v2;\n
                                        }\n
                                        else\n
                                        {\n
                                            if (!(v27 == -1))\n
                                                continue;\n
                                        }\n
                                        tmp_2 = v27;\n
                                        v27 += 1;\n
                                        v59 += 1;\n
                                    } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2)))));\n
                                    goto LABEL_4040ea;\n
                                }\n
                                v6 += 4;\n
                                if (v27 < 2147483647)\n
                                {\n
                                    v95 = 2147483647 - v27;\n
                                    if (v95 > v95)\n
                                        v95 = v3;\n
                                    if (v94)\n
                                    {\n
                                        cgc_fwrite(&v9, v95, v94);\n
                                        v96 = v16;\n
                                    }\n
                                    v79 = a0;\n
                                    if (v79)\n
                                    {\n
                                        cgc_memcpy(a0 + v27, &v9, v95);\n
                                        v79 = a0;\n
                                        v97 = v16;\n
                                    }\n
                                    *(&v73) = 1;\n
                                    v98 = 3;\n
                                    v99 = v27;\n
                                    v100 = v3;\n
                                    v27 += v3;\n
                                }\n
                                else\n
                                {\n
                                    *(&v73) = 1;\n
                                    tmp_2 = v27;\n
                                    v27 += v3;\n
                                    v59 = a0;\n
                                    if ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t2, Load(addr=stack_base-104, size=4, endness=Iend_LE), 0x0<32>))\n
                                        goto LABEL_4040ea;\n
                                    break;\n
                                }\n
LABEL_40405d:\n
                                v59 = v79;\n
                                if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                    goto LABEL_4040ea;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v59 = a0;\n
                                if (v35)\n
                                {\n
                                    v64 = *(v6);\n
                                    if (v64 < 0)\n
                                    {\n
                                        v9 = 45;\n
                                        v64 = -(v64);\n
                                        v63 = &v10;\n
                                    }\n
                                    else\n
                                    {\n
                                        v63 = &v9;\n
                                    }\n
                                    *((v63 + 19)) = 0;\n
                                    v3 = v63;\n
                                    if (!v64)\n
                                    {\n
                                        v67 = v63 + 18;\n
                                        *((v63 + 18)) = 48;\n
                                    }\n
                                    else\n
                                    {\n
                                        v67 = v63 + 19;\n
                                        do\n
                                        {\n
                                            v75 = v64 * 3435973837 >> 32 >> 3;\n
                                            *((v67 - 1)) = *((v24 + v64 - v75 * 2 * 5 - 11723));\n
                                            v67 -= 1;\n
                                            tmp_25 = v64;\n
                                            v64 = v75;\n
                                        } while (tmp_25 > 9);\n
                                    }\n
                                    v80 = v3;\n
                                    cgc_memmove(v80, v67, v67 - v80 + 20);\n
                                    goto LABEL_403f4d;\n
                                }\n
                            }\n
                        case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_403ce6:\n
                            v73 = v3;\n
                            v72 = v37 - v73;\n
                            if (v27 >= 2147483647)\n
                            {\n
                                v45 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v46 = 6;\n
                                v47 = v45;\n
                                v48 = v27;\n
                                v27 = v45;\n
                                goto LABEL_403d61;\n
                            }\n
                            else\n
                            {\n
                                v61 = 2147483647 - v27;\n
                                if (v61 > v72)\n
                                    v61 = v72;\n
                                v62 = v16;\n
                                v5 = v72;\n
                                if (v62)\n
                                {\n
                                    v3 = v73;\n
                                    cgc_fwrite(v73, v61, v62);\n
                                    v72 = v5;\n
                                    v73 = v3;\n
                                    v74 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v73, v61);\n
                                    v79 = a0;\n
                                    v72 = v5;\n
                                    v83 = v16;\n
                                }\n
                                v86 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v87 = 6;\n
                                v88 = v86;\n
                                v89 = v27;\n
                                v27 = v86;\n
                                goto LABEL_40405d;\n
                            }\n
                        case 11:\n
                            v38 = v6;\n
                            v59 = v38 + 4;\n
                            if (v27 < 2147483647)\n
                            {\n
                                v2 = *(v38);\n
                                v43 = v16;\n
                                if (v43)\n
                                {\n
                                    cgc_fwrite(&v2, 1, v43);\n
                                    v56 = v16;\n
                                }\n
                                if (v59)\n
                                    *((v59 + v27)) = v2;\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            v42 = v16;\n
                            if (v27 != -1)\n
                            {\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            goto LABEL_4040ea;\n
                        case 27:\n
                            v39 = v6;\n
                            v40 = *(v39);\n
                            v6 = v39 + 4;\n
                            v41 = cgc_strlen();\n
                            if (v27 >= 2147483647)\n
                            {\n
                                *(&v73) = 1;\n
                                v52 = 3;\n
                                v53 = v27;\n
                                v54 = v41;\n
                                v27 += v41;\n
                            }\n
                            else\n
                            {\n
                                v58 = 2147483647 - v27;\n
                                v5 = v41;\n
                                if (2147483647 - v27 > v41)\n
                                    v58 = v41;\n
                                v66 = v16;\n
                                if (v66)\n
                                {\n
                                    cgc_fwrite(v40, v58, v66);\n
                                    v77 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v40, v58);\n
                                    v79 = a0;\n
                                    v84 = v16;\n
                                }\n
                                *(&v73) = 1;\n
                                v90 = 3;\n
                                v91 = v27;\n
                                v92 = v5;\n
                                v27 += v5;\n
                                v93 = v24;\n
                                goto LABEL_40405d;\n
                            }\n
LABEL_403d61:\n
                            v59 = a0;\n
                            v57 = v16;\n
                            if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                goto LABEL_4040ea;\n
                            break;\n
                        default:\n
                            if (!v73)\n
                                goto LABEL_0x403cbf;\n
                            else\n
                                goto LABEL_403ce6;\n
                        }\n
LABEL_403c4d:\n
                        v73 = 0;\n
                        v49 = v16;\n
                    }\n
                    else if (v31)\n
                    {\n
                        v3 = *(&v3);\n
                        v4 = *(&v3);\n
                        goto LABEL_403b7e;\n
                    }\n
                }\n
LABEL_403ac0:\n
                v73 = 0;\n
            }\n
        }\n
    }\n
    if (v27 >= 2147483647)\n
    {\n
        if (!(v27 == -1))\n
            goto LABEL_4040fe;\n
LABEL_4040ea:\n
        cgc__terminate();\n
    }\n
    if (v59)\n
        *((v59 + v27)) = 0;\n
LABEL_4040fe:\n
    v101 = v27;\n
    return v101;\n
}\n
", "4209334:sub_403ab6": null, "4209468:sub_403b3c": null, "4210545:sub_403f71": null, "4210952:sub_404108": null, "4210960:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4211004:sub_40413c": null, "4211008:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // al\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v0[0];\n
    if (!v0[0])\n
        return v0[0] - *(a0);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4211120:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4211209:sub_404209": null, "4211216:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4211284:sub_404254": null, "4211296:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4211360:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4211412:sub_4042d4": null, "4211424:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4211508:sub_404334": null, "4211520:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4211552:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4211680:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // esi\n
    char *v3;  // eax\n
    unsigned int v4;  // edi\n
    char *v5;  // edx, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    unsigned int v7;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v6 = v2[0];\n
    v5 = v3;\n
    if (v2[0])\n
    {\n
        v5 = v3;\n
        if (v1)\n
        {\n
            v4 = 1;\n
            v5 = v3;\n
            while (true)\n
            {\n
                *(v5) = v6;\n
                v5 += 1;\n
                v6 = v2[v4];\n
                if (!v6)\n
                    break;\n
                v4 += 1;\n
                if (1 >= v1)\n
                    break;\n
            }\n
        }\n
    }\n
    v7 = v5 - v3;\n
    if (v7 < v1)\n
    {\n
        do\n
        {\n
            *(v5) = 0;\n
            v5 += 1;\n
            v7 += 1;\n
        } while (v7 < v1);\n
    }\n
    return v0;\n
}\n
", "4211778:sub_404442": null, "4211792:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (!v4)\n
        return 0;\n
    cgc_memcpy(v4, v0, v3);\n
    v3[v4] = 0;\n
    return v4;\n
}\n
", "4211885:sub_4044ad": null, "4211888:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // al, Other Possible Types: char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a0, v2);\n
            if (v3)\n
                break;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v5 = &v1[v4 + 1];\n
    if (!v1[v4])\n
        v5 = 0;\n
    *(v0) = v5;\n
    v1[v4] = 0;\n
    return *(v0);\n
}\n
", "4212008:sub_404528": null, "4212016:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(v1, a0))\n
        {\n
            tmp_7 = *((v1 + 1));\n
            v1 += 1;\n
            if (!tmp_7)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v1;\n
        }\n
    }\n
}\n
", "4212104:sub_404588": null, "4212112:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int *v10;  // esi, Other Possible Types: unsigned int\n
    char v11[2];  // edi\n
    char v12;  // al\n
    char v13[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // al, Other Possible Types: char\n
    unsigned int v25;  // edi\n
    char v26[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = a0;\n
    v11 = v6;\n
    v13 = v11;\n
    if (cgc_isspace(v11[0]))\n
    {\n
        v13 = v11;\n
        do\n
        {\n
            if (!*(v13))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v17 = 1;\n
                v18 = 0;\n
                if (!v10)\n
                    goto LABEL_40476c;\n
            }\n
            v12 = *((v13 + 1));\n
            v13 += 1;\n
        } while (cgc_isspace(v12));\n
    }\n
    v14 = a1;\n
    if (*(v13) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v13) == 43)\n
            v13 += 1;\n
        if (!v14)\n
            goto LABEL_404653;\n
    }\n
    else\n
    {\n
        v13 += 1;\n
        v0 = -1;\n
        if (!v14)\n
        {\n
LABEL_404653:\n
            if (*(v13) == 48)\n
            {\n
                if ((*((v13 + 1)) & 248) == 48)\n
                {\n
                    v13 += 1;\n
                    v14 = 8;\n
                    goto LABEL_4046a7;\n
                }\n
                if (cgc_tolower(*((v13 + 1))) == 120)\n
                {\n
                    v13 += 2;\n
                    v14 = 16;\n
                    goto LABEL_4046a7;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v13)))\n
            {\n
                v15 = 0;\n
                v17 = 1;\n
                v18 = 0;\n
                v10 = a0;\n
                v16 = v0;\n
                if (!v10)\n
                    goto LABEL_40476c;\n
                tmp_2 = v17;\n
                v26 = v6;\n
                if (!tmp_2)\n
                    v26 = v13;\n
                *(v10) = v26;\n
                goto LABEL_40476c;\n
            }\n
LABEL_4046a7:\n
            v1 = 0;\n
            v2 = 1;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = *(v13);\n
                if (!v19)\n
                    break;\n
                v20 = *(v13);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v13);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (cgc_isupper(v23))\n
                    {\n
                        v21 = *(v13) - 55;\n
                    }\n
                    else\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_4046c0;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v14)\n
                {\n
                    v25 = v14 * v18;\n
                    tmp_5 = v25;\n
                    v18 = v25 + v21;\n
                    v24 = v1;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v1 = v24;\n
                    v13 += 1;\n
                    *(&v24) = 1;\n
                    v2 = 0;\n
                }\n
LABEL_4046c0:\n
                if (!v24)\n
                    break;\n
            }\n
            v10 = a0;\n
            v16 = v0;\n
            v15 = v1;\n
            v17 = v2;\n
            if (!v10)\n
                goto LABEL_40476c;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v13) == 48)\n
        {\n
            v13 += (cgc_tolower(*((v13 + 1))) == 120) * 2;\n
            goto LABEL_4046a7;\n
        }\n
    }\n
LABEL_40476c:\n
    v27 = (!v15 ? 0x80000000 : -(v18));\n
    v28 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v18);\n
    if (v16 < 0)\n
        v28 = v27;\n
    return v28;\n
}\n
", "4212453:sub_4046e5": null, "4212646:sub_4047a6": null, "4212656:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    int tmp_38;  // tmp #38\n
    int tmp_41;  // tmp #41\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    unsigned int v14;  // edi\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    void* v17;  // edi\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    char v19[2];  // ebp, Other Possible Types: unsigned int\n
    void* v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // dl, Other Possible Types: char\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // ebx\n
    unsigned int v36;  // edi\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v38;  // ebx\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // cc_dep2\n
    unsigned int v42;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v19 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v19 = v12;\n
        do\n
        {\n
            if (!*(v19))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v0 = 1;\n
                v1 = 0;\n
                v17 = 0;\n
                v18 = a0;\n
                if (!v18)\n
                    goto LABEL_4049e2;\n
            }\n
            v13 = *((v19 + 1));\n
            v19 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = a1;\n
    if (*(v19) != 45)\n
    {\n
        v2 = 1;\n
        if (*(v19) == 43)\n
            v19 += 1;\n
        if (!v14)\n
            goto LABEL_40488d;\n
    }\n
    else\n
    {\n
        v19 += 1;\n
        v2 = -1;\n
        if (!v14)\n
        {\n
LABEL_40488d:\n
            if (*(v19) == 48)\n
            {\n
                if ((*((v19 + 1)) & 248) == 48)\n
                {\n
                    v19 += 1;\n
                    v14 = 8;\n
                    goto LABEL_4048e5;\n
                }\n
                if (cgc_tolower(*((v19 + 1))) == 120)\n
                {\n
                    v19 += 2;\n
                    v14 = 16;\n
                    goto LABEL_4048e5;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v19)))\n
            {\n
                v15 = 0;\n
                v0 = 1;\n
                v1 = 0;\n
                v20 = 0;\n
                v18 = a0;\n
                v16 = v2;\n
                if (!v18)\n
                    goto LABEL_4049e2;\n
                v37 = v8;\n
                if (!v0)\n
                    v37 = v19;\n
                *(v18) = v37;\n
                goto LABEL_4049e2;\n
            }\n
LABEL_4048e5:\n
            v15 = 0;\n
            v0 = 1;\n
            v1 = 0;\n
            v3 = 0;\n
            while (true)\n
            {\n
                v21 = *(v19);\n
                if (!v21)\n
                    break;\n
                v22 = *(v19);\n
                if (cgc_isdigit(v21))\n
                {\n
                    v23 = v22 - 48;\n
                }\n
                else\n
                {\n
                    v25 = *(v19);\n
                    if (cgc_islower(v22))\n
                    {\n
                        v23 = v25 - 87;\n
                    }\n
                    else if (!cgc_isupper(v25))\n
                    {\n
                        v26 = 0;\n
                        goto LABEL_404910;\n
                    }\n
                    else\n
                    {\n
                        v23 = *(v19) - 55;\n
                    }\n
                }\n
                v26 = 0;\n
                if (v23 < v14)\n
                {\n
                    v0 = v15;\n
                    v27 = v14;\n
                    v28 = v14 >> 31;\n
                    v29 = v1;\n
                    v32 = v29 * v27;\n
                    v33 = v27 * v3 + v29 * v28 + (v29 * v27 >> 32);\n
                    v14 = v27;\n
                    v15 = v0;\n
                    v26 = v23 >> 31;\n
                    tmp_38 = v32;\n
                    v34 = v32 + v23;\n
                    tmp_41 = v33;\n
                    v35 = v33 + v26 + (tmp_38 + v23 < tmp_38);\n
                    v3 = v35;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((t38 + ecx<4>) < t38))), Conv(1->32, ((t38 + ecx<4>) < t38))))\n
                        v15 = 1;\n
                    v19 += 1;\n
                    *(&v26) = 1;\n
                    v0 = 0;\n
                    v1 = v34;\n
                }\n
LABEL_404910:\n
                if (!v26)\n
                    break;\n
            }\n
            v18 = a0;\n
            v16 = v2;\n
            v36 = v3;\n
            if (!v18)\n
                goto LABEL_4049e2;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v19) == 48)\n
        {\n
            v19 += (cgc_tolower(*((v19 + 1))) == 120) * 2;\n
            goto LABEL_4048e5;\n
        }\n
    }\n
LABEL_4049e2:\n
    v38 = v1;\n
    v39 = -(v38);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v39 = v38;\n
    v40 = -(0 < v15) | v39;\n
    v41 = v38 < 2147483649;\n
    v42 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v40);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v42 = v40;\n
    return v42;\n
}\n
", "4213053:sub_40493d": null, "4213301:sub_404a35": null, "4213312:cgc_AllocateAndInitializeListHead": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_AllocateAndInitializeListHead(unsigned int *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v2;  // esi\n
    struct_0 *v3;  // eax\n
\n
    v2 = v1;\n
    if (v2)\n
    {\n
        v0 = 8;\n
        v3 = cgc_xcalloc(1);\n
        *(v2) = v3;\n
        v3->field_4 = a0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4213363:sub_404a73": null, "4213376:cgc_FreeList": "int cgc_FreeList(unsigned int *v0)\n
{\n
    unsigned int *v1;  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v3;\n
    v2 = *(v1);\n
    if (v2)\n
    {\n
        cgc_FreeList(v2);\n
        *(v1) = 0;\n
    }\n
    v3 = cgc_free(v1);\n
    return v3;\n
}\n
", "4213433:sub_404ab9": null, "4213440:cgc_LenList": "int cgc_LenList(struct struct_0 **v0)\n
{\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1)\n
    {\n
        do\n
        {\n
            v1 = *(v1);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return v2;\n
}\n
", "4213466:sub_404ada": null, "4213472:cgc_AppendToList": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_AppendToList(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v3;  // edi\n
\n
    v2 = v1;\n
    if (!v2)\n
        return v1;\n
    do\n
    {\n
        v3 = v2;\n
        v2 = *(v2);\n
    } while (v2);\n
    v0 = 8;\n
    v2 = cgc_xcalloc(1);\n
    v3->field_0 = v2;\n
    *((v2 + 4)) = a0;\n
    return v2;\n
}\n
", "4213536:cgc_UniqAppendToList": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_UniqAppendToList(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2;  // esi\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    struct_0 *v5;  // edi\n
\n
    v2 = a0;\n
    v3 = v1;\n
    while (true)\n
    {\n
        v4 = *((v3 + 4));\n
        if (!v3)\n
            break;\n
        v3 = *(v3);\n
        if (v4 == v2)\n
            return v3;\n
    }\n
    if (v4 == v2)\n
    {\n
        return v3;\n
    }\n
    else if (!v3)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = v3;\n
            v3 = *(v3);\n
        } while (v3);\n
        v0 = 8;\n
        v3 = cgc_xcalloc(1);\n
        v5->field_0 = v3;\n
        *((v3 + 4)) = v2;\n
        return v3;\n
    }\n
}\n
", "4213632:cgc_UniqExtendList": "int cgc_UniqExtendList(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
\n
    v3 = a0;\n
    v4 = v2;\n
    if (!v4 && v3)\n
        return v3;\n
    if (v4 && !v3)\n
        goto LABEL_404baf;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (!v3)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        while (true)\n
        {\n
            v5 = v4;\n
            if (*((v5 + 4)) != *((v3 + 4)))\n
            {\n
                v5 = *(v5);\n
                if (!(!v5))\n
                    continue;\n
                v1 = *((v3 + 4));\n
                v7 = v4;\n
                do\n
                {\n
                    v6 = v7;\n
                    v7 = *(v7);\n
                } while (v7);\n
                v0 = 8;\n
                v8 = cgc_xcalloc(1);\n
                *(v6) = v8;\n
                *((v8 + 4)) = v1;\n
            }\n
            if (!*(v3))\n
                break;\n
        }\n
    }\n
LABEL_404baf:\n
    return v4;\n
}\n
", "4213701:sub_404bc5": null, "4213796:sub_404c24": null, "4213808:cgc_CheckForCycle": "int cgc_CheckForCycle(struct struct_0 **v0)\n
{\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    while (true)\n
    {\n
        if (v2 == v1)\n
            return 1;\n
        v3 = *(v2);\n
        if (!v3)\n
            break;\n
        v2 = *(v3);\n
        if (!v2)\n
            break;\n
        v1 = *(v1);\n
        if (!v1)\n
            break;\n
    }\n
    return 0;\n
}\n
", "4213853:sub_404c5d": null, "4213856:cgc_PrintList": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char g_40738a;\n
extern char g_407391;\n
\n
int cgc_PrintList(void* v2, struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
        return v5;\n
    do\n
    {\n
        v4 = (!*(v3) ? &g_40738a : &g_407391);\n
        v1 = *((v3 + 4));\n
        v0 = v3;\n
        v5 = cgc_fprintf(v2, v4);\n
        v3 = *(v3);\n
    } while (v3);\n
    return v5;\n
}\n
", "4213943:sub_404cb7": null, "4213952:cgc_InitializeQueue": "int cgc_InitializeQueue(unsigned int v2[4])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4[4];  // esi\n
    unsigned int v5;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    v4[1] = 0;\n
    v4[0] = 2;\n
    v0 = 2;\n
    v5 = cgc_xcalloc(4);\n
    v4[3] = v5;\n
    v4[2] = -1;\n
    return v5;\n
}\n
", "4214015:sub_404cff": null, "4214016:cgc_FreeQueue": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_FreeQueue(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v3;\n
    v2 = v1->field_c;\n
    if (v2)\n
        cgc_free(v2);\n
    v3 = cgc_free(v1);\n
    return v3;\n
}\n
", "4214068:sub_404d34": null, "4214080:cgc_ShiftQueueElementsToFront": "int cgc_ShiftQueueElementsToFront(struct struct_0 *v0[4])\n
{\n
    struct struct_0 *v1[4];  // eax\n
    unsigned int *v2;  // ecx\n
    unsigned int *v3;  // edx, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
    unsigned int *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = v1[0];\n
    while (true)\n
    {\n
        v3 = v2;\n
        v4 = v2;\n
        if (v2)\n
        {\n
            v5 = 0;\n
            v4 = v2;\n
            v3 = v2;\n
            do\n
            {\n
                if (v4 != v2)\n
                {\n
LABEL_404d6d:\n
                    if (v4 != v2 && v3 == v2)\n
                    {\n
                        if ((v1[3])[v5].field_0)\n
                            v3 = v5;\n
                        goto LABEL_404d90;\n
                    }\n
                }\n
                else\n
                {\n
                    if (!(!(v1[3])[v5].field_0))\n
                        goto LABEL_404d6d;\n
                    v4 = v5;\n
LABEL_404d90:\n
                    if ((!(v4 < v2) | !(v3 < v2)) != 1)\n
                        break;\n
                    continue;\n
                }\n
                v5 += 1;\n
            } while (v5 < v2);\n
        }\n
        if (v3 == v2)\n
            break;\n
        if (v4 == v2)\n
            break;\n
        v6 = v1[3];\n
        *((v6 + v4 * 4)) = *((v6 + v3 * 4));\n
        (v1[3])[v3].field_0 = 0;\n
    }\n
    return v0;\n
}\n
", "4214217:sub_404dc9": null, "4214224:cgc_Enqueue": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int cgc_Enqueue(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // edi\n
    unsigned int *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
\n
    v1 = v0;\n
    v2 = v1->field_4;\n
    v3 = v1->field_c;\n
    if (*((v3 + (v2 << 2))))\n
    {\n
        cgc_fprintf(cgc_stderr, \"%s\\n
\");\n
        cgc__terminate(1, \"%s\\n
\");\n
        return cgc_Dequeue();\n
    }\n
    v4 = v2 + 1;\n
    v1->field_4 = v4;\n
    *((v3 + v2 * 4)) = a0;\n
    v1->field_8 = -1;\n
    v5 = v1->field_0;\n
    if (v4 != v5)\n
        return v1->field_0;\n
    v6 = v5 * 2;\n
    if (v5 << 1 > v5)\n
    {\n
        v7 = cgc_xcalloc(4);\n
        cgc_memcpy(v7, v1->field_c, v1->field_4 * 4);\n
        v5 = cgc_free(v1->field_c);\n
        v1->field_c = v7;\n
        v1->field_0 = v6;\n
        return v5;\n
    }\n
}\n
", "4214416:cgc_Dequeue": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_Dequeue(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
    unsigned int *v5;  // edi\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // eax\n
    unsigned int *v8;  // edx\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // esi, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
    unsigned int *v12;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v1->field_8 = -1;\n
    if (!v1)\n
        return 0;\n
    v4 = v3->field_4;\n
    if (!v4)\n
    {\n
        v7 = 0;\n
        return 0;\n
    }\n
    v5 = v3->field_c;\n
    v6 = 0;\n
    do\n
    {\n
        v7 = v5[v6];\n
        if (v7)\n
        {\n
            v5[v6] = 0;\n
            if (v6 != 255)\n
                return v5[v6];\n
            goto LABEL_404ef1;\n
        }\n
        v6 += 1;\n
    } while (v4 != v6);\n
    v7 = 0;\n
    if (v4 != 255)\n
        return 0;\n
LABEL_404ef1:\n
    v0 = v7;\n
    v8 = v3->field_0;\n
    v9 = v3;\n
    while (true)\n
    {\n
        v10 = v8;\n
        v11 = v8;\n
        if (v8)\n
        {\n
            v12 = 0;\n
            v11 = v8;\n
            v10 = v8;\n
            do\n
            {\n
                if (v11 != v8)\n
                {\n
LABEL_404f20:\n
                    if (v11 != v8 && v10 == v8)\n
                    {\n
                        v3 = v9;\n
                        if (v9->field_c[v12].field_0)\n
                            v10 = v12;\n
                        goto LABEL_404f40;\n
                    }\n
                }\n
                else\n
                {\n
                    v3 = v9;\n
                    if (!(!v9->field_c[v12].field_0))\n
                        goto LABEL_404f20;\n
                    v11 = v12;\n
LABEL_404f40:\n
                    if ((!(v11 < v8) | !(v10 < v8)) != 1)\n
                        break;\n
                    continue;\n
                }\n
                v12 += 1;\n
            } while (v12 < v8);\n
        }\n
        if (v10 == v8)\n
            break;\n
        if (v11 == v8)\n
            break;\n
        v13 = *((v3 + 12));\n
        *((v13 + v11 * 4)) = *((v13 + v10 * 4));\n
        *((*((v3 + 12)) + v10 * 4)) = 0;\n
    }\n
    return v0;\n
}\n
", "4214656:cgc_Peek": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_Peek(struct_0 *v0)\n
{\n
    struct_0 *v1;  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // edx\n
    unsigned int v4;  // edx\n
    unsigned int *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v3 = v1->field_8;\n
    if (v3 >= 0)\n
        return *((&v1->field_c->field_0 + 0x4 * v3));\n
    v4 = v1->field_4;\n
    if (!v4)\n
        return 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v2 = v1->field_c[v5].field_0;\n
        if (v2)\n
        {\n
            v1->field_8 = v5;\n
            return v1->field_c[v5].field_0;\n
        }\n
        v5 += 1;\n
        if (v4 == v5)\n
            return 0;\n
    }\n
}\n
", "4214727:sub_404fc7": null, "4214736:cgc_xcalloc": "extern void* cgc_stderr;\n
\n
int cgc_xcalloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
\n
    v2 = cgc_calloc(v1, a0);\n
    if (!v2)\n
    {\n
        v0 = \"FATAL: Allocation failed\\n
\";\n
        cgc_fprintf(cgc_stderr, \"%s\");\n
        cgc__terminate(1, \"%s\");\n
        return cgc_InitializeSearchMachine();\n
    }\n
    return v2;\n
}\n
", "4214832:cgc_InitializeSearchMachine": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1032];\n
    unsigned int field_408;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern void* cgc_stderr;\n
\n
int cgc_InitializeSearchMachine(struct_1 *v1, unsigned int a0[2])\n
{\n
    char v0;  // [bp-0x18]\n
    unsigned int v2[2];  // ecx\n
    struct_1 *v3;  // edi\n
    unsigned int v5;  // edi\n
    struct_0 *v6;  // eax\n
    unsigned int v8;  // eax\n
    struct_1 *v9;  // ebp\n
    unsigned int v10[2];  // edi\n
    unsigned int *v11;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v3->field_0 = v2;\n
    v3->field_4 = cgc_xcalloc(cgc_GetTrieCount(), 4);\n
    if (*(&v0))\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v6 = *((cgc_GatherTerminals(v2) + v5 * 4));\n
            v8 = cgc_GetDataString(v6);\n
            if (!v8)\n
            {\n
                cgc_fprintf(cgc_stderr, \"%s\\n
\");\n
                cgc__terminate(1, \"%s\\n
\");\n
                return cgc_FreeSearchMachine();\n
            }\n
            cgc_AllocateAndInitializeListHead(v6->field_408 * 4 + v1->field_4, v8);\n
            v5 += 1;\n
        } while (v5 < *(&v0));\n
    }\n
    v9 = v1;\n
    v1->field_8 = cgc_xcalloc(cgc_GetTrieCount(), 4);\n
    v9->field_c = cgc_xcalloc(4, cgc_GetTrieCount());\n
    v10 = a0;\n
    if (cgc_GetTrieCount())\n
    {\n
        v11 = 0;\n
        do\n
        {\n
            v9->field_c[v11].field_0 = cgc_xcalloc(4, 0x100);\n
            cgc_memcpy(v9->field_c[v11].field_0, cgc_FindInTrieByIdentifier(v10) + 4, 0x400);\n
            v11 += 1;\n
        } while (v11 < cgc_GetTrieCount());\n
    }\n
    v13 = 1;\n
    do\n
    {\n
        if (!v10[v13])\n
            *((v9->field_c->field_0 + v13 * 4 - 4)) = v10;\n
        v13 += 1;\n
    } while (v13 != 257);\n
    return 0;\n
}\n
", "4215138:sub_405162": null, "4215232:cgc_FreeSearchMachine": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_FreeSearchMachine(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v3;  // eax\n
    unsigned int *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v9;\n
    if (cgc_GetTrieCount())\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = v1->field_4[v2].field_0;\n
            if (v3)\n
            {\n
                cgc_FreeList(v3);\n
                if (cgc_GetTrieCount())\n
                {\n
                    v4 = 0;\n
                    do\n
                    {\n
                        if (v2 != v4)\n
                        {\n
                            v5 = v1->field_4;\n
                            if (*((v5 + (v4 << 2))) == *((v5 + (v2 << 2))))\n
                                *((v5 + v4 * 4)) = 0;\n
                        }\n
                        v4 += 1;\n
                    } while (v4 < cgc_GetTrieCount());\n
                }\n
                v1->field_4[v2].field_0 = 0;\n
            }\n
            v2 += 1;\n
        } while (v2 < cgc_GetTrieCount());\n
    }\n
    v6 = v1->field_8;\n
    if (v6)\n
    {\n
        cgc_free(v6);\n
        v1->field_8 = 0;\n
    }\n
    if (v1->field_c && cgc_GetTrieCount())\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            v8 = v1->field_c[v7].field_0;\n
            if (v8)\n
            {\n
                cgc_free(v8);\n
                v1->field_c[v7].field_0 = 0;\n
            }\n
            v7 += 1;\n
        } while (v7 < cgc_GetTrieCount());\n
    }\n
    v9 = cgc_free(v1);\n
    return v9;\n
}\n
", "4215276:sub_4051ec": null, "4215333:sub_405225": null, "4215421:sub_40527d": null, "4215482:sub_4052ba": null, "4215488:cgc_FindMatches": "typedef struct struct_0 {\n
    unsigned int field_-134;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    char padding_4[1028];\n
    struct struct_3 *field_408;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[1032];\n
    unsigned int field_408;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    void* field_-134;\n
} struct_5;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindMatches(struct_4 *v6, char *a0, unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int *v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    struct_0 *v3;  // [bp-0x1c]\n
    unsigned int *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_4 *v7;  // esi\n
    struct_1 *v8;  // ebp, Other Possible Types: unsigned int\n
    void* v9;  // ebx\n
    void* v10;  // edi\n
    struct struct_1 **v11;  // ecx\n
    struct_1 *v12;  // edx\n
    struct_2 *v13;  // ebp\n
    unsigned int *v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v15;  // ebx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ebx\n
    struct_5 *v19;  // ebx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.field_-134;\n
    *(a2) = 0;\n
    if (!a1)\n
        return 0;\n
    v7 = v6;\n
    v8 = v7->field_0;\n
    v9 = 0;\n
    v14 = 0;\n
    v10 = 0;\n
    while (true)\n
    {\n
        v1 = v14;\n
        while (true)\n
        {\n
            v11 = *((v8 + 1032));\n
            v12 = *((v7->field_c + v11 * 4));\n
            if (v12)\n
            {\n
                v13 = (&v12->field_0)[*((a0 + v10))];\n
                if ((&v12->field_0)[*((a0 + v10))])\n
                    break;\n
            }\n
            v8 = *((v7->field_8 + v11 * 4));\n
        }\n
        if (!*((v7->field_4 + (v13->field_408 << 2))))\n
        {\n
            v14 = v1;\n
        }\n
        else\n
        {\n
            v2 = v9;\n
            if (*(a2) != v9)\n
            {\n
                v14 = v1;\n
            }\n
            else if (*(&v5) > v9)\n
            {\n
                v5 = v9 * 2 + 1;\n
                v4 = cgc_xcalloc(8, *(&v5));\n
                cgc_memcpy(v4, v1, v2 * 8);\n
                cgc_free(v1);\n
                v14 = v4;\n
                v2 = v5;\n
            }\n
            else\n
            {\n
                v19 = v3;\n
                v0 = v19 + 2924;\n
                cgc_fprintf(v19[77].field_-134, v0);\n
                cgc__terminate(1, v0);\n
                return cgc_check_seed();\n
            }\n
            v15 = a2;\n
            *((v14 + *(v15) * 8)) = v10;\n
            v16 = *(v15);\n
            *((v14 + v16 * 8 + 4)) = *((v7->field_4 + v13->field_408 * 4));\n
            *(v15) = v16 + 1;\n
            v17 = v2;\n
        }\n
        if (v10 + 1 == a1)\n
            return v14;\n
    }\n
}\n
", "4215546:sub_4052fa": null, "4215578:sub_40531a": null, "4215736:sub_4053b8": null, "4215856:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_check_seed()\n
{\n
    void* v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    v2 = v0;\n
    if (v2 == *(0x4347c000))\n
    {\n
        v2 = cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v0;\n
}\n
", "4215952:main": "extern char cgc_stdin;\n
extern char cgc_stdout;\n
extern char g_407414;\n
\n
int main()\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x298]\n
    unsigned int v1;  // [bp-0x28c]\n
    unsigned int v2;  // [bp-0x288]\n
    unsigned int v3;  // [bp-0x284]\n
    unsigned int v4;  // [bp-0x280]\n
    unsigned int v5;  // [bp-0x27c]\n
    unsigned int v6;  // [bp-0x278]\n
    unsigned int v7;  // [bp-0x274]\n
    unsigned int v8;  // [bp-0x270]\n
    unsigned int v9;  // [bp-0x26c]\n
    unsigned int v10;  // [bp-0x268]\n
    unsigned int v11;  // [bp-0x264]\n
    unsigned int v12;  // [bp-0x260]\n
    unsigned int v13;  // [bp-0x25c]\n
    char v14;  // [bp-0x255]\n
    char v15;  // [bp-0x215]\n
    unsigned int v16;  // [bp-0x214]\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // esi\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // edi\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // edi\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // eax, Other Possible Types: char\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // esi\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edi\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // esi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // edi\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // esi\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ebp\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // ebp\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // esi\n
    unsigned int v50;  // esi\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // ebp\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // eax\n
\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v16 = 0;\n
    v18 = cgc_stdin;\n
    cgc_fread(&v16, 4, cgc_stdin);\n
    if (v16 == *(0x4347c000))\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    cgc_memset(&v14, 0, 64);\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(&v14, 64, 10, cgc_stdin) < 0)\n
    {\n
        v19 = -1;\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        v19 = cgc_strtoul(&v14, NULL, 10);\n
    }\n
    v3 = cgc_stdout;\n
    if (v19 - 4097 < -0x1000)\n
    {\n
        v51 = 0;\n
        v2 = 0;\n
        v5 = 0;\n
        v52 = 0;\n
        v50 = 0;\n
    }\n
    else\n
    {\n
        v6 = cgc_xcalloc(1, 16396);\n
        cgc_InitializeSignatureDatabase(v6);\n
        v47 = 0;\n
        v1 = cgc_stdin;\n
        if (!v19)\n
        {\n
            v4 = 0;\n
            v5 = 0;\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            v5 = 0;\n
            v4 = 0;\n
            do\n
            {\n
                cgc_memset(&v14, 0, 64);\n
                cgc_fflush(v3);\n
                if (cgc_freaduntil(&v14, 64, 10, v18) < 0)\n
                {\n
                    v20 = -1;\n
                }\n
                else\n
                {\n
                    v15 = 0;\n
                    v20 = cgc_strtoul(&v14, NULL, 10);\n
                }\n
                if (v20 - 6 < -5)\n
                {\n
                    v2 = 0;\n
LABEL_405c00:\n
                    v50 = v6;\n
                    goto LABEL_405c04;\n
                }\n
                v7 = v20;\n
                cgc_memset(&v14, 0, 64);\n
                cgc_fflush(v3);\n
                if (cgc_freaduntil(&v14, 64, 10, v18) < 0)\n
                {\n
                    v21 = -1;\n
                }\n
                else\n
                {\n
                    v15 = 0;\n
                    v21 = cgc_strtoul(&v14, NULL, 10);\n
                }\n
                v47 = 0;\n
                v2 = 0;\n
                if (v21 - 65 < -64)\n
                {\n
LABEL_4057e0:\n
                    v18 = v1;\n
                    if (!(!0))\n
                        continue;\n
                    goto LABEL_405c00;\n
                }\n
                else\n
                {\n
                    cgc_fflush(v3);\n
                    v22 = v21;\n
                    v23 = v1;\n
                    v9 = v22;\n
                    if (cgc_fread(&v14, v9, v23) >= 0)\n
                    {\n
                        cgc_fread(&v16, 1, v23);\n
                        v24 = 0;\n
                        *(&v24) = v16 != 10;\n
                    }\n
                    else\n
                    {\n
                        v24 = -1;\n
                    }\n
                    v25 = v9;\n
                    if (!(!v24))\n
                        goto LABEL_4057e0;\n
                    v5 = cgc_xcalloc(1, v25 + 1);\n
                    cgc_memcpy(v5, &v14, v25);\n
                    cgc_memset(&v14, 0, 64);\n
                    cgc_fflush(v3);\n
                    if (cgc_freaduntil(&v14, 64, 10, v1) < 0)\n
                    {\n
                        v26 = -1;\n
                    }\n
                    else\n
                    {\n
                        v15 = 0;\n
                        v26 = cgc_strtoul(&v14, NULL, 10);\n
                    }\n
                    if (v26 - 4097 < -0x1000)\n
                        goto LABEL_4057e0;\n
                    v27 = v26;\n
                    v28 = cgc_xcalloc(v26, 1);\n
                    cgc_fflush(v3);\n
                    v10 = v27;\n
                    v4 = v28;\n
                    if (cgc_fread(v28, v27, v1) < 0)\n
                    {\n
                        v29 = -1;\n
                    }\n
                    else\n
                    {\n
                        cgc_fread(&v16, 1, v1);\n
                        v29 = 0;\n
                        *(&v29) = v16 != 10;\n
                    }\n
                    v47 = 0;\n
                    if (!(!v29))\n
                        goto LABEL_4057e0;\n
                    v30 = cgc_xcalloc(1, 20);\n
                    cgc_InitializeSignature(v30, v7, v4, v10, v5);\n
                    v7 = v30;\n
                    if (cgc_AddSignatureToSignatureDatabase(v6))\n
                    {\n
                        v30 = 0;\n
                        v8 = v7;\n
                    }\n
                    else\n
                    {\n
                        v8 = 0;\n
                        cgc_printf(\"Added signature to database\\n
\");\n
                        cgc_free(v4);\n
                        cgc_free(v5);\n
                        *(&v30) = 1;\n
                        v4 = 0;\n
                        v5 = 0;\n
                    }\n
                    v18 = v1;\n
                    v47 = 0;\n
                    if (!v30)\n
                        goto LABEL_405c00;\n
                }\n
                tmp_2 = v19;\n
                v19 -= 1;\n
            } while (tmp_2 != 1);\n
        }\n
        cgc_BuildSignatureDatabaseSearchMachine();\n
        v49 = &v14;\n
        do\n
        {\n
            do\n
            {\n
                cgc_memset(v49, 0, 64);\n
                cgc_fflush(v3);\n
                if (cgc_freaduntil(v49, 64, 10, v1) < 0)\n
                {\n
                    v31 = -1;\n
                }\n
                else\n
                {\n
                    v15 = 0;\n
                    v31 = cgc_strtoul(v49, NULL, 10);\n
                }\n
                v48 = 2;\n
                if (v31 - 65537 >= -0x10000)\n
                {\n
                    v47 = cgc_xcalloc(v31 + 1, 1);\n
                    cgc_fflush(v3);\n
                    if (cgc_fread(v47, v31, v1) >= 0)\n
                    {\n
                        v32 = cgc_SearchSignatureDatabase(v6, v47);\n
                        if (!v32)\n
                        {\n
                            v48 = 7;\n
                        }\n
                        else\n
                        {\n
                            v33 = v32;\n
                            v34 = cgc_LenList(v32);\n
                            v35 = cgc_xcalloc(4, v34);\n
                            v9 = v35;\n
                            do\n
                            {\n
                                *(v35) = v33;\n
                                v33 = *(v33);\n
                                v35 += 4;\n
                            } while (v33);\n
                            v11 = v47;\n
                            if (!v34)\n
                            {\n
                                cgc_memset(&v16, 0, 0x200);\n
                            }\n
                            else\n
                            {\n
                                v7 = v9 + 4;\n
                                v10 = v34;\n
                                v36 = v34;\n
                                do\n
                                {\n
                                    v37 = 0;\n
                                    if (v36 >= 2)\n
                                    {\n
                                        v37 = 0;\n
                                        v38 = 1;\n
                                        v39 = v7;\n
                                        v2 = v36;\n
                                        do\n
                                        {\n
                                            if (cgc_strcmp(*((*((*((v39 - 4)) + 4)) + 4)), *((*((*(v39) + 4)) + 4))) > 0)\n
                                            {\n
                                                v40 = v39 - 4;\n
                                                cgc_memcpy(&v16, v40, 4);\n
                                                cgc_memcpy(v40, v39, 4);\n
                                                cgc_memcpy(v39, &v16, 4);\n
                                                v37 = v38;\n
                                            }\n
                                            v38 += 1;\n
                                            v39 += 4;\n
                                        } while (v2 != v38);\n
                                    }\n
                                    v36 = v37;\n
                                } while (v37);\n
                                cgc_memset(&v16, 0, 0x200);\n
                                if (v10)\n
                                {\n
                                    v41 = 0;\n
                                    v42 = 1;\n
                                    v2 = 0;\n
                                    while (true)\n
                                    {\n
                                        v7 = v42;\n
                                        v43 = *((*((v9 + v42 * 4 - 4)) + 4));\n
                                        v44 = cgc_strlen(cgc_SeverityString());\n
                                        v45 = *((v43 + 8)) + v41 + v44 + 14;\n
                                        if (*((v43 + 8)) + v41 + v44 + 14 >= v41)\n
                                        {\n
                                            v2 = v41;\n
                                            if (v45 <= 0x200)\n
                                            {\n
                                                v0 = *((v43 + 4));\n
                                                cgc_memcpy(&v16 + v41, v0, *((v43 + 8)));\n
                                                v2 = *((v43 + 8)) + v41;\n
                                                v13 = &v16 + v2;\n
                                                v12 = cgc_SeverityString(*(v43), v0);\n
                                                cgc_BytesToUnsigned(*((v43 + 12)));\n
                                                v2 = cgc_sprintf(v13, &g_407414) + v2;\n
                                            }\n
                                        }\n
                                        v46 = v7;\n
                                        if (v45 < v41)\n
                                            break;\n
                                        if (v45 > 0x200)\n
                                            break;\n
                                        v41 = v2;\n
                                        v42 = v46 + 1;\n
                                        if (v46 >= v10)\n
                                            break;\n
                                    }\n
                                }\n
                            }\n
                            cgc_fprintf(v3, \"%s\");\n
                            cgc_free(v11);\n
                            v47 = 0;\n
                            v48 = 0;\n
                        }\n
                    }\n
                }\n
                v49 = &v14;\n
            } while (!v48);\n
        } while (v48 == 7);\n
        v50 = v6;\n
        if (v48 != 2)\n
            return 0;\n
        v2 = v47;\n
LABEL_405c04:\n
        v51 = v4;\n
        v52 = v8;\n
    }\n
    cgc_fflush(v3);\n
    if (v52)\n
        cgc_FreeSignature();\n
    v53 = v5;\n
    if (v53)\n
        cgc_free(v53);\n
    if (v51)\n
        cgc_free(v51);\n
    v54 = v2;\n
    if (v54)\n
        cgc_free(v54);\n
    if (v50)\n
    {\n
        cgc_FreeSignatureDatabase();\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4216329:sub_405609": null, "4217113:sub_405919": null, "4217306:sub_4059da": null, "4217346:sub_405a02": null, "4217984:cgc_InitializeSignature": "extern void* cgc_stderr;\n
\n
int cgc_InitializeSignature(unsigned int v0[5], unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v3[5];  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
\n
    v1 = a0;\n
    if (v1 - 6 < -5)\n
    {\n
        return -1;\n
    }\n
    else if (a4 > 63)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v3 = v0;\n
        if (!v3)\n
        {\n
            return -1;\n
        }\n
        else if (!a1)\n
        {\n
            return -1;\n
        }\n
        else if (!a3)\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v4 = a2;\n
            v3[0] = v1;\n
            v5 = cgc_xcalloc(v4 + 1, 1);\n
            v3[3] = v5;\n
            cgc_memcpy(v5, a1, v4);\n
            v3[4] = v4;\n
            cgc_fprintf(cgc_stderr, \"(%s)\\n
\");\n
            v6 = a4;\n
            v3[2] = v6;\n
            v7 = cgc_xcalloc(1, v6 + 1);\n
            v3[1] = v7;\n
            cgc_memcpy(v7, a3, v6);\n
            return 0;\n
        }\n
    }\n
}\n
", "4218190:sub_405d4e": null, "4218192:cgc_FreeSignature": "int cgc_FreeSignature(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v4;\n
    v2 = v1[3];\n
    if (v2)\n
    {\n
        cgc_free(v2);\n
        v1[3] = 0;\n
    }\n
    v3 = v1[1];\n
    if (v3)\n
    {\n
        cgc_free(v3);\n
        v1[1] = 0;\n
    }\n
    v4 = cgc_free(v1);\n
    return v4;\n
}\n
", "4218273:sub_405da1": null, "4218288:cgc_BytesToUnsigned": "int cgc_BytesToUnsigned(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // eax\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    if (!v1)\n
        return 5381;\n
    v2 = 5381;\n
    v3 = 0;\n
    do\n
    {\n
        v2 = *((v0 + v3)) + 33 * v2;\n
        v3 += 1;\n
    } while (v1 != v3);\n
    return v2;\n
}\n
", "4218350:sub_405dee": null, "4218352:cgc_SeverityString": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SeverityString(unsigned int v0)\n
{\n
    if (v0 - 1 <= 4)\n
        return *(&(&_GLOBAL_OFFSET_TABLE_)[308 + 4 * v0]);\n
    return \"UNKNOWN\";\n
}\n
", "4218391:sub_405e17": null, "4218400:cgc_PrintSignature": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_1 *field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PrintSignature(void* v4, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // edi\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
\n
    v5 = a0;\n
    v6 = v5->field_0;\n
    v3 = (v6 - 1 <= 4 ? \"UNKNOWN\" : *(&(&_GLOBAL_OFFSET_TABLE_)[308 + 4 * v6]));\n
    v8 = v5->field_4;\n
    v9 = v5->field_10;\n
    if (!v9)\n
    {\n
        v12 = 5381;\n
    }\n
    else\n
    {\n
        v12 = 5381;\n
        v11 = 0;\n
        do\n
        {\n
            v12 = v5->field_c[v11].field_0 + 33 * v12;\n
            v11 += 1;\n
        } while (v9 != v11);\n
    }\n
    v2 = v12;\n
    v1 = v3;\n
    v0 = v8;\n
    return cgc_fprintf(v4, \"%s - %s - %x\\n
\");\n
}\n
", "4218541:sub_405ead": null, "4218544:cgc_InitializeSignatureDatabase": "int cgc_InitializeSignatureDatabase(unsigned int v1[4099])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3[4099];  // esi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (!v3)\n
        return -1;\n
    v3[0] = 0;\n
    cgc_memset(&v3[1], 0, 0x4000);\n
    v3[4097] = 0;\n
    v3[4098] = cgc_xcalloc(1, 16);\n
    return 0;\n
}\n
", "4218641:sub_405f11": null, "4218656:cgc_FreeSignatureDatabase": "int cgc_FreeSignatureDatabase(unsigned int v0[4099])\n
{\n
    unsigned int v1[4099];  // esi\n
    void* v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3[4];  // ebp\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
    void* v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v7;\n
    if (v1[0])\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = v1[1 + v2];\n
            if (v1[1 + v2])\n
            {\n
                v4 = v3[3];\n
                if (v4)\n
                {\n
                    cgc_free(v4);\n
                    v3[3] = 0;\n
                }\n
                v5 = v3[1];\n
                if (v5)\n
                {\n
                    cgc_free(v5);\n
                    v3[1] = 0;\n
                }\n
                cgc_free(v3);\n
                v1[1 + v2] = 0;\n
            }\n
            v2 += 1;\n
        } while (v2 < v1[0]);\n
    }\n
    if (v1[4097])\n
    {\n
        cgc_FreeTrie();\n
        v1[4097] = 0;\n
    }\n
    v6 = v1[4098];\n
    if (v6)\n
        cgc_FreeSearchMachine(v6);\n
    v7 = cgc_free(v1);\n
    return v7;\n
}\n
", "4218696:sub_405f48": null, "4218843:sub_405fdb": null, "4218848:cgc_AddSignatureToSignatureDatabase": "int cgc_AddSignatureToSignatureDatabase(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int *v1;  // ecx\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    v3 = -1;\n
    if (v2 != 0x1000)\n
    {\n
        v1[1 + v2] = a0;\n
        *(v1) = v2 + 1;\n
        v3 = 0;\n
    }\n
    return v3;\n
}\n
", "4218883:sub_406003": null, "4218896:cgc_BuildSignatureDatabaseTrie": "int cgc_BuildSignatureDatabaseTrie(unsigned int v1[4098])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2[4098];  // edi\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5[5];  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
        return -1;\n
    cgc_AllocateAndInitializeTrieRoot();\n
    if (!v2[0])\n
        return 0;\n
    v4 = 0;\n
    do\n
    {\n
        v5 = v2[1 + v4];\n
        v0 = v5[4];\n
        cgc_InsertIntoTrie(v2[4097], v5[3]);\n
        v4 += 1;\n
    } while (v4 < v2[0]);\n
    return 0;\n
}\n
", "4219015:sub_406087": null, "4219024:cgc_BuildSignatureDatabaseSearchMachine": "typedef struct struct_6 {\n
    unsigned int field_0;\n
    char padding_4[16384];\n
    unsigned int field_4004;\n
    struct struct_4 *field_4008;\n
} struct_6;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    char padding_4[16384];\n
    unsigned int field_4004[2];\n
    struct struct_4 *field_4008;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_2 *field_8;\n
    struct struct_2 *field_c;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[1032];\n
    unsigned int field_408;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[1032];\n
    struct struct_2 *field_408;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[1028];\n
    struct struct_2 *field_408;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_BuildSignatureDatabaseSearchMachine(struct_6 *v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    struct_3 *v3;  // [bp-0x14]\n
    char v4;  // [bp+0x0]\n
    struct_5 *v6;  // esi\n
    void* v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9[5];  // ecx\n
    unsigned int v10[4];  // eax\n
    struct_0 *v11;  // eax\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v13;  // esi, Other Possible Types: unsigned int\n
    struct struct_3 **v14;  // esi, Other Possible Types: unsigned int\n
    struct_3 *v15;  // edi\n
    struct struct_1 **v16;  // eax\n
    struct_4 *v17;  // ebx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    struct_0 *v20;  // ebp\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // eax\n
    struct_4 *v23;  // ebp, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (!v6)\n
        return -1;\n
    if (!v6->field_4004)\n
    {\n
        cgc_AllocateAndInitializeTrieRoot();\n
        if (v6->field_0)\n
        {\n
            v8 = 0;\n
            do\n
            {\n
                v9 = *(&v6->padding_4[4 * v8]);\n
                v0 = v9[4];\n
                cgc_InsertIntoTrie(v6->field_4004, v9[3]);\n
                v8 += 1;\n
            } while (v8 < v6->field_0);\n
        }\n
    }\n
    cgc_InitializeSearchMachine(v6->field_4008, v6->field_4004);\n
    v23 = v6->field_4008;\n
    v10 = cgc_xcalloc(1, 16);\n
    v12 = v10;\n
    cgc_InitializeQueue(v10);\n
    v13 = 0;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v10;\n
    do\n
    {\n
        v11 = (&v23->field_c->field_0->field_0)[v13];\n
        if (v11 && !v11->field_408)\n
            continue;\n
        v23->field_8[v11->field_408].field_0 = v23->field_0;\n
        v12 = v2;\n
        cgc_Enqueue(v12, v11);\n
        v13 += 1;\n
    } while (v13 != 0x100);\n
    for (; cgc_Peek(*(&v4)); v12 = v2)\n
    {\n
        v14 = 0;\n
        v3 = cgc_Dequeue(v12);\n
        do\n
        {\n
            v15 = *((*((*((v23 + 12)) + v3->field_408 * 4)) + v14 * 4));\n
            if (v15)\n
            {\n
                cgc_Enqueue(v2, v15);\n
                v16 = *((v23 + 8));\n
                v17 = v23;\n
                v18 = *((v23 + 12));\n
                v19 = v3->field_408;\n
                do\n
                {\n
                    v19 = v16[v19]->field_408;\n
                    v20 = *((*((v18 + v19 * 4)) + v14 * 4));\n
                } while (!*((*((v18 + (v19 << 2))) + (v14 << 2))));\n
                v21 = v15->field_408;\n
                v16[v21] = &v20->padding_0;\n
                v22 = v17->field_4;\n
                v23 = v17;\n
                *((&v17->field_4->field_0 + 0x4 * v15->field_408)) = cgc_UniqExtendList(*((v22 + v21 * 4)), *((v22 + v17->field_8[v21].field_0->field_408 * 4)));\n
            }\n
            v14 += 1;\n
        } while (v14 != 0x100);\n
    }\n
    cgc_FreeQueue(v12);\n
    return 0;\n
}\n
", "4219199:sub_40613f": null, "4219274:sub_40618a": null, "4219320:sub_4061b8": null, "4219518:sub_40627e": null, "4219520:cgc_SearchSignatureDatabase": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_SearchSignatureDatabase(unsigned int v4[4099], unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5[4099];  // edi\n
    char *v7;  // ecx\n
    unsigned int v8;  // esi\n
    void* v9;  // edx\n
    unsigned int v10[5];  // eax\n
    void* v11;  // eax\n
    unsigned int v12[5];  // ecx\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebp, Other Possible Types: unsigned int\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
\n
    v5 = v4;\n
    if (!v5)\n
        return 0;\n
    v7 = a0;\n
    if (!v7)\n
        return 0;\n
    v8 = a1;\n
    if (!v8)\n
        return 0;\n
    v9 = v5[4098];\n
    if (!v9)\n
        return 0;\n
    v2 = cgc_FindMatches(v9, v7, v8, &v1);\n
    v0 = 0;\n
    if (!v1)\n
        return v0;\n
    v15 = 0;\n
    do\n
    {\n
        v3 = v15;\n
        for (v14 = *((v2 + v15 * 8 + 4)); v14; v14 = *(v14))\n
        {\n
            if (v5[0])\n
            {\n
                v13 = 0;\n
                do\n
                {\n
                    v10 = v5[1 + v13];\n
                    if (!cgc_memcmp(v10[3], v14->field_4, v10[4]))\n
                    {\n
                        v11 = v0;\n
                        v12 = v5[1 + v13];\n
                        if (v11)\n
                            cgc_UniqAppendToList(v11, v12);\n
                        else\n
                            cgc_AllocateAndInitializeListHead(&v0, v12);\n
                    }\n
                    v13 += 1;\n
                } while (v13 < v5[0]);\n
            }\n
        }\n
        v15 = v3 + 1;\n
    } while (v15 < v1);\n
}\n
", "4219630:sub_4062ee": null, "4219659:sub_40630b": null, "4219765:sub_406375": null, "4219776:cgc_AllocateAndInitializeTrieRoot": "typedef struct struct_0 {\n
    char padding_0[1029];\n
    char field_405;\n
    char padding_406[2];\n
    unsigned int field_408;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[1024];\n
    char field_404;\n
} struct_1;\n
\n
extern unsigned int TrieCount;\n
\n
int cgc_AllocateAndInitializeTrieRoot(struct struct_0 **v1)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // esi\n
    struct_1 *v4;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (v3)\n
    {\n
        v4 = cgc_xcalloc(1036, 1);\n
        *(v3) = &v4;\n
        v4->field_404 = 0;\n
        v4->field_0 = 0;\n
        v2 = *(v3);\n
        *((v2 + 1029)) = 0;\n
        *((v2 + 1032)) = TrieCount;\n
        TrieCount = TrieCount + 1;\n
        return *(v3);\n
    }\n
    return v2;\n
}\n
", "4219868:sub_4063dc": null, "4219872:cgc_InitializeTrieChild": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[1024];\n
    char field_404;\n
    char field_405;\n
    char padding_406[2];\n
    unsigned int field_408;\n
} struct_0;\n
\n
extern unsigned int TrieCount;\n
\n
int cgc_InitializeTrieChild(char v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = cgc_xcalloc(1036, 1);\n
    v1->field_404 = v0;\n
    v1->field_405 = 0;\n
    v1->field_0 = 0;\n
    v1->field_408 = TrieCount;\n
    TrieCount = TrieCount + 1;\n
    return v1;\n
}\n
", "4219955:sub_406433": null, "4219968:cgc_FreeTrie": "int cgc_FreeTrie(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    void* v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v4;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = *((v1 + v2 * 4 + 4));\n
        if (v3)\n
        {\n
            cgc_FreeTrie(v3);\n
            *((v1 + v2 * 4 + 4)) = 0;\n
        }\n
        v2 += 1;\n
    } while (v2 != 0x100);\n
    v4 = cgc_free(v1);\n
    return v4;\n
}\n
", "4219998:sub_40645e": null, "4220052:sub_406494": null, "4220064:cgc_InsertIntoTrie": "typedef struct struct_0 {\n
    char padding_0[1029];\n
    char field_405;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[1024];\n
    char field_404;\n
    char field_405;\n
    char padding_406[2];\n
    unsigned int field_408;\n
} struct_1;\n
\n
extern unsigned int TrieCount;\n
\n
int cgc_InsertIntoTrie(struct_0 *v0, char *a0, unsigned int a1)\n
{\n
    struct_0 *v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // eax\n
    struct_1 *v5;  // eax, Other Possible Types: unsigned int\n
    char *v6;  // edx, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v7;\n
    v2 = a1;\n
    if (v2)\n
    {\n
        v6 = a0;\n
        v8 = 0;\n
        do\n
        {\n
            v3 = *((v6 + v8));\n
            v5 = *((v1 + v3 * 4 + 4));\n
            if (!v5)\n
            {\n
                v5 = cgc_xcalloc(1036, 1);\n
                v6 = a0;\n
                *((v5 + 1028)) = v3;\n
                *((v5 + 1029)) = 0;\n
                *(v5) = 0;\n
                *((v5 + 1032)) = TrieCount;\n
                TrieCount = TrieCount + 1;\n
                *((v1 + *((v6 + v8)) * 4 + 4)) = v5;\n
                v2 = a1;\n
            }\n
            *(v5) = v1;\n
            v7 = *((v6 + v8));\n
            v1 = *((v1 + v7 * 4 + 4));\n
            v8 += 1;\n
        } while (v2 != v8);\n
    }\n
    *((v1 + 1029)) = 1;\n
    return v7;\n
}\n
", "4220111:sub_4064cf": null, "4220236:sub_40654c": null, "4220240:cgc_FindInTrie": "typedef struct struct_0 {\n
    char padding_0[1029];\n
    char field_405;\n
} struct_0;\n
\n
int cgc_FindInTrie(struct_0 *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // eax\n
    struct_0 *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // edx\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    void* v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    unsigned int v7;  // eax\n
\n
    v1 = a1;\n
    v2 = v0;\n
    v6 = v1;\n
    if (v1)\n
    {\n
        v3 = a0;\n
        v4 = *(&v2->padding_0[4 + 4 * *(v3)]);\n
        if (v4)\n
        {\n
            v5 = 0;\n
            do\n
            {\n
                v2 = v4;\n
                if (v1 - 1 == v5)\n
                    goto LABEL_4065a1;\n
                v4 = *((v4 + v3[1 + v5] * 4 + 4));\n
                v5 += 1;\n
            } while (v4);\n
            v6 = v5 < v1;\n
        }\n
        if (v6)\n
            return 0;\n
    }\n
LABEL_4065a1:\n
    v7 = (*((v2 + 1029)) ? 0 : v2);\n
    return v7;\n
}\n
", "4220337:sub_4065b1": null, "4220352:cgc_FindInTrieByIdentifier": "typedef struct struct_0 {\n
    char padding_0[1032];\n
    unsigned int field_408;\n
} struct_0;\n
\n
int cgc_FindInTrieByIdentifier(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    void* v3;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (v2->field_408 == v1)\n
        return v2;\n
    if (!v2)\n
        return 0;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = *(&v2->padding_0[4 + 4 * v3]);\n
        if (v4)\n
        {\n
            v5 = cgc_FindInTrieByIdentifier(v4, v1);\n
            if (v5)\n
                return v5;\n
        }\n
        v3 += 1;\n
    } while (v3 != 0x100);\n
}\n
", "4220395:sub_4065eb": null, "4220452:sub_406624": null, "4220464:cgc_GetTrieCount": "extern unsigned int TrieCount;\n
\n
int cgc_GetTrieCount()\n
{\n
    return TrieCount;\n
}\n
", "4220483:sub_406643": null, "4220496:cgc_GatherTerminals": "int cgc_GatherTerminals(unsigned int v2, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int *v3;  // edi\n
\n
    v3 = a0;\n
    v0 = cgc_xcalloc(4, 4);\n
    v1 = 4;\n
    *(v3) = 0;\n
    cgc__GatherTerminals(v3);\n
    return v0;\n
}\n
", "4220589:sub_4066ad": null, "4220592:cgc__GatherTerminals": "typedef struct struct_1 {\n
    char padding_0[1029];\n
    char field_405;\n
} struct_1;\n
\n
int cgc__GatherTerminals(struct struct_0 **v1, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct struct_0 **v2;  // edx\n
    struct struct_0 **v3;  // esi\n
    struct_1 *v4;  // ecx\n
    struct_1 *v5;  // edi\n
    unsigned int *v6;  // ebp\n
    struct struct_0 **v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
    void* v12;  // ebp, Other Possible Types: unsigned int\n
\n
    v3 = v2;\n
    v5 = v4;\n
    v6 = a0;\n
    if (v4->field_405)\n
    {\n
        v8 = v1;\n
        v9 = *(v8);\n
        (*(v2))[v9].field_0 = v5;\n
        v10 = v9 + 1;\n
        *(v8) = v10;\n
        v11 = *(v6);\n
        if (v10 == v11)\n
        {\n
            v0 = cgc_xcalloc(4, v11 * 2);\n
            cgc_memcpy(v0, *(v3), *(v6) * 4);\n
            *(v6) = *(v6) * 2;\n
            cgc_free(*(v3));\n
            v11 = v0;\n
            *(v3) = v11;\n
        }\n
    }\n
    v12 = 0;\n
    do\n
    {\n
        if (*(&v5->padding_0[4 + 4 * v12]))\n
            v11 = cgc__GatherTerminals(v1, a0);\n
        v12 += 1;\n
    } while (v12 != 0x100);\n
    return v11;\n
}\n
", "4220718:sub_40672e": null, "4220770:sub_406762": null, "4220784:cgc_ReverseArray": "int cgc_ReverseArray(char *v0, unsigned int a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v3;  // edi\n
    char *v4;  // edx\n
    unsigned int v5;  // esi\n
    char v7;  // bl\n
    unsigned int v8;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return -1;\n
    }\n
    else if (v3 < 2)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v4 = &v1[v3 + 1];\n
        v5 = (!(v5 < 2) ? 1 : v3 / 2);\n
        v8 = 0;\n
        do\n
        {\n
            v7 = *(v1);\n
            *(v1) = v4[v8];\n
            v4[v8] = v7;\n
            v8 -= 1;\n
            v1 += 1;\n
        } while (-(v5) != v8);\n
        return 0;\n
    }\n
}\n
", "4220873:sub_4067c9": null, "4220880:cgc_GetDataString": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[1024];\n
    char field_404;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_GetDataString(struct_0 *v1, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v2;  // ebp, Other Possible Types: unsigned int\n
    void* v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
    struct_1 *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // esi\n
    char *v10;  // esi, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
    char v12;  // bl\n
\n
    v2 = v1;\n
    if (!v1)\n
        return 0;\n
    v3 = 0;\n
    v4 = 1;\n
    v5 = cgc_xcalloc(1, 64);\n
    v6 = 64;\n
    do\n
    {\n
        *((v5 + v4 - 1)) = *((v2 + 1028));\n
        if (v4 == v6)\n
        {\n
            v0 = v6 * 2;\n
            v5 = cgc_realloc(v5, v0);\n
            v6 = v0;\n
        }\n
        v2 = *(v2);\n
        v3 -= 1;\n
        v4 += 1;\n
    } while (v2);\n
    if (!v5)\n
    {\n
        return 0;\n
    }\n
    else if (v3 == -1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v8 = -(v3);\n
        v9 = ~(v3);\n
        if (v9 >= 2)\n
        {\n
            v6 = (!(v6 < 2) ? 1 : v9 / 2);\n
            v10 = v5 - v3 - 2;\n
            v11 = 0;\n
            do\n
            {\n
                v12 = *((v5 + v11));\n
                *((v5 + v11)) = *(v10);\n
                *(v10) = v12;\n
                v11 += 1;\n
                v10 -= 1;\n
            } while (v6 != v11);\n
        }\n
        *(a0) = v8;\n
        return v5;\n
    }\n
}\n
", "4220940:sub_40680c": null, "4221100:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}