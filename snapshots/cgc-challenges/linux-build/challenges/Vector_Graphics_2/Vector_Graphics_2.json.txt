{"4198400:_init": "extern struct_0 *g_406850;\n
\n
int _init()\n
{\n
    if (g_406850)\n
    {\n
        g_406850();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 22375;\n
    v6 = v5 + 11;\n
    v7 = v5 + 11;\n
    if (v7 == v6)\n
        return v5 + 11;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 22311;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 11;\n
    v9 = (v6 + 11 - (v6 + 11) >> 31) + (11 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40684c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40684c)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = \"@g\";\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4198972:sub_40123c": null, "4198976:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v12, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x64]\n
    struct_1 *v4;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x5c]\n
    char *v6;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_1 *v7;  // [bp-0x38], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x34]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
    struct struct_0 **v13;  // eax\n
    struct struct_0 **v14;  // eax\n
    struct struct_0 **v15;  // eax\n
    struct_1 *v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    struct_1 *v19;  // eax\n
    unsigned int v20;  // eax\n
    char *v21;  // eax\n
    struct_1 *v22;  // eax\n
\n
    v1 = \"@g\";\n
    v10 = 0;\n
    if (!v12)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        if (!*(v12))\n
        {\n
            v11 = v10;\n
            return v11;\n
        }\n
        if (*(v12) == 36)\n
            break;\n
        cgc_putc(*(v12));\n
        v12 += 1;\n
        v10 += 1;\n
LABEL_4015ad:\n
    }\n
    v12 += 1;\n
    v0 = *(v12);\n
    if (!v0)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    if (v0 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_40157c;\n
    }\n
    if (v0 != 88)\n
    {\n
        if (v0 == 100)\n
        {\n
            v13 = a0;\n
            a0 = v13 + 1;\n
            v6 = &*(v13)->field_0;\n
            v7 = 0;\n
            if (v6 < 0)\n
            {\n
                v6 = -(v6);\n
                cgc_putc(45);\n
                v10 += 1;\n
            }\n
            else\n
            {\n
                if (!v6)\n
                {\n
                    v7 = 1;\n
                    v8 = 48;\n
                }\n
            }\n
            while (v6)\n
            {\n
                v20 = v7;\n
                v7 = v20 + 1;\n
                (&v8)[v20] = ((v6 >> 31 CONCAT v6) /m 10 >> 32) + 48;\n
                v21 = v6;\n
                v6 = (v21 >> 31 CONCAT v21) /m 10;\n
                if (v7 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v22 = v7;\n
                v7 = v22 + 1;\n
                if (v22 <= 0)\n
                    break;\n
                cgc_putc((&v8)[v7]);\n
                v10 += 1;\n
            }\n
            goto LABEL_40157c;\n
        }\n
        else if (v0 == 115)\n
        {\n
            v14 = a0;\n
            a0 = v14 + 1;\n
            v9 = &*(v14)->field_0;\n
            while (*(v9))\n
            {\n
                cgc_putc(*(v9));\n
                v10 += 1;\n
                v9 += 1;\n
                if (!v9)\n
                    break;\n
            }\n
            goto LABEL_40157c;\n
        }\n
        else if (v0 != 120)\n
        {\n
            v11 = -1;\n
            return v11;\n
        }\n
    }\n
    v15 = a0;\n
    a0 = v15 + 1;\n
    v3 = *(v15);\n
    v4 = 0;\n
    while (v3)\n
    {\n
        v2 = v3 & 15;\n
        v3 >>= 4;\n
        if (v2 < 10)\n
        {\n
            v16 = v4;\n
            v4 = v16 + 1;\n
            *((&v5 + v16)) = v2 + 48;\n
        }\n
        else if (*(v12) == 120)\n
        {\n
            v17 = v4;\n
            v4 = v17 + 1;\n
            (&v5)[v17] = v2 + 87;\n
        }\n
        else\n
        {\n
            v18 = v4;\n
            v4 = v18 + 1;\n
            (&v5)[v18] = v2 + 55;\n
        }\n
        if (v4 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v19 = v4;\n
        v4 = v19 + 1;\n
        if (v19 <= 0)\n
            break;\n
        cgc_putc((&v5)[v4]);\n
        v10 += 1;\n
    }\n
LABEL_40157c:\n
    v12 += 1;\n
    goto LABEL_4015ad;\n
}\n
", "4199873:sub_4015c1": null, "4199888:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4199946:sub_40160a": null, "4199952:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4200046:sub_40166e": null, "4200048:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4200102:sub_4016a6": null, "4200112:cgc_isnan": null, "4200135:sub_4016c7": null, "4200144:cgc_isinf": null, "4200191:sub_4016ff": null, "4200192:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4200250:sub_40173a": null, "4200256:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4200314:sub_40177a": null, "4200320:cgc_strcmp": "int cgc_strcmp(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[v2] && !v0[a0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[v2])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!v0[a0])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) < *((a0 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) <= *((a0 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4200558:sub_40186e": null, "4200560:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4200651:sub_4018cb": null, "4200656:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!*((a0 + v0)))\n
            break;\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4200762:sub_40193a": null, "4200768:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a1; v0 += 4)\n
        {\n
            *((v1 + v0)) = *((a0 + v0));\n
        }\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v1;\n
}\n
", "4200912:cgc_memset": "int cgc_memset(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = a0;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; v2 + 3 < a1; v2 += 4)\n
        {\n
            *(&v2[v3]) = v0;\n
        }\n
    }\n
    for (; v2 < a1; v2 += 1)\n
    {\n
        v2[v3] = v1;\n
    }\n
    return v3;\n
}\n
", "4201081:sub_401a79": null, "4201088:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"@g\";\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4201492:sub_401c14": null, "4201504:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4201559:sub_401c57": null, "4201568:cgc_abs": "int cgc_abs(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 0)\n
    {\n
        v0 = -(v1);\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4201612:sub_401c8c": null, "4201616:cgc_CreateCanvas": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CreateCanvas(unsigned int *v4, unsigned short a0, unsigned short a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned short *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = \"@g\";\n
    if (a2 > 6)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (cgc_allocate(96, 0))\n
        cgc__terminate();\n
    cgc_memset(v2, 0, 96);\n
    *(v2) = a0;\n
    v2[1] = a1;\n
    for (v1 = 0; v1 < a2; v1 += 1)\n
    {\n
        if (cgc_allocate(a1 * a0, 0))\n
            cgc__terminate();\n
        cgc_memset(*(&v2[4 + 2 * v1]), 20, a1 * a0);\n
    }\n
    *(&v2[2]) = a2;\n
    *(v4) = v2;\n
    v3 = 0;\n
    return v3;\n
}\n
", "4201973:sub_401df5": null, "4201984:cgc_DestroyCanvas": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DestroyCanvas(struct struct_0 **v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = \"@g\";\n
    v4 = v3;\n
    if (!*(v4))\n
        return v3;\n
    for (v2 = 0; v2 < *(v3)->field_4; v2 += 1)\n
    {\n
        if (*((8 + &*(v3)->field_0 + 0x4 * v2)))\n
        {\n
            v0 = *(v3)->field_2 * *(v3)->field_0;\n
            cgc_deallocate(*((8 + &*(v3)->field_0 + 0x4 * v2)));\n
            *((8 + &*(v3)->field_0 + 0x4 * v2)) = 0;\n
        }\n
    }\n
    v0 = 96;\n
    cgc_deallocate(*(v3));\n
    v4 = v3;\n
    *(v4) = 0;\n
    return v3;\n
}\n
", "4202193:sub_401ed1": null, "4202208:cgc_FlattenCanvas": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    char field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FlattenCanvas(struct_0 *v6)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned short v7;  // dx\n
    unsigned short v10;  // dx\n
\n
    v1 = \"@g\";\n
    for (v5 = 1; v5 < v6->field_4; v5 += 1)\n
    {\n
        for (v4 = 0; v4 < v6->field_0; v4 += 1)\n
        {\n
            for (v3 = 0; v3 < v6->field_2; v3 += 1)\n
            {\n
                v7 = v4;\n
                v2 = cgc_GetColorIndex(v6, edx<4>, v3);\n
                if (v2 != 20)\n
                {\n
                    v10 = v4;\n
                    v0 = v2;\n
                    cgc_SetColor(v6, edx<4>, v3, 0);\n
                }\n
            }\n
        }\n
    }\n
    return v5;\n
}\n
", "4202497:sub_402001": null, "4202512:cgc_SendAll": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SendAll(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = \"@g\";\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v4;\n
        v2 = cgc_transmit(1, v6 + v3, a0 - v3);\n
        if (v2)\n
            break;\n
        if (!*(&v4))\n
            break;\n
        v3 = *(&v4) + v3;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4202666:sub_4020aa": null, "4202672:cgc_SendNull": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SendNull(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0xd]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v1 = \"@g\";\n
    v5 = 0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= v7)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v0 = &v3;\n
        v2 = cgc_transmit(1, &v5, 1);\n
        if (v2)\n
            break;\n
        if (*(&v3) != 1)\n
            break;\n
        v4 += 1;\n
    }\n
    v6 = -1;\n
    return v6;\n
}\n
", "4202822:sub_402146": null, "4202832:cgc_ReceiveAll": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReceiveAll(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = \"@g\";\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a0)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v3;\n
        v2 = cgc_receive(0, v6 + v4, a0 - v4);\n
        if (v2)\n
            break;\n
        if (!*(&v3))\n
            break;\n
        v4 = *(&v3) + v4;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4202988:sub_4021ec": null, "4202992:cgc_GetColor": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
int cgc_GetColor(struct_0 *v2, unsigned short a0, unsigned short a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
\n
    v1 = *(&v2[2 + a2].padding_0);\n
    v0 = v1[a1 + v2->field_2 * a0];\n
    return 8 + v2 + 3 * v0;\n
}\n
", "4203073:sub_402241": null, "4203088:cgc_GetColorIndex": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
int cgc_GetColorIndex(struct_0 *v1, unsigned short a0, unsigned short a1, char a2)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = *(&v1[2 + a2].padding_0);\n
    return v0[a1 + v1->field_2 * a0];\n
}\n
", "4203152:cgc_SetColor": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
int cgc_SetColor(struct_0 *v1, unsigned short a0, unsigned short a1, char a2, char a3)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v2;  // eax\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    v3 = *(&v1[2 + a2].padding_0);\n
    v0 = v3;\n
    if (v0)\n
    {\n
        v3 = v0;\n
        *((v3 + v1->field_2 * a0 + a1)) = a3;\n
    }\n
    return v3;\n
}\n
", "4203238:sub_4022e6": null, "4203248:cgc_PaintTriangle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintTriangle(unsigned short v20[2], char a0, char a1, char a2, unsigned short a3[6])\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    int tmp_32;  // tmp #32\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned int v2;  // [bp-0x58]\n
    unsigned int v3;  // [bp-0x54]\n
    unsigned int v4;  // [bp-0x50]\n
    unsigned int v5;  // [bp-0x4c]\n
    unsigned int v6;  // [bp-0x48]\n
    unsigned int v7;  // [bp-0x44]\n
    void* v8;  // [bp-0x40], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x38]\n
    unsigned int v11;  // [bp-0x34]\n
    unsigned int v12;  // [bp-0x30]\n
    unsigned int v13;  // [bp-0x2c]\n
    unsigned short *v14;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned short v15[6];  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned short *v16;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned short v17[6];  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned short *v18;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned short v19[6];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    unsigned short v22;  // si\n
    unsigned short v23;  // dx\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // edx\n
    unsigned short v26;  // si\n
    unsigned short v27;  // dx\n
    unsigned short v28;  // si\n
    unsigned short v29;  // dx\n
    unsigned short v31;  // si\n
    unsigned short v32;  // dx\n
    unsigned int v33;  // esi\n
    unsigned int v34;  // edx\n
    unsigned int v35;  // eax\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // ecx\n
    unsigned int v39;  // edx\n
    unsigned int v41;  // edx\n
    unsigned short v43;  // si\n
    unsigned int v44;  // esi\n
    unsigned short v46;  // si\n
    unsigned short v47;  // dx\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // eax\n
    unsigned int v51;  // eax\n
    unsigned int v52;  // ecx\n
    unsigned int v53;  // edx\n
    unsigned int v55;  // edx\n
\n
    v5 = \"@g\";\n
    v21 = a3[0];\n
    if (v21 >= v20[1])\n
        return v21;\n
    v21 = a3[2];\n
    if (v21 < v20[1])\n
    {\n
        v21 = a3[4];\n
        if (v21 < v20[1])\n
        {\n
            v21 = a3[1];\n
            if (v21 >= v20[0])\n
                return v21;\n
            v21 = a3[3];\n
            if (v21 < v20[0])\n
            {\n
                v21 = a3[5];\n
                if (v21 < v20[0])\n
                {\n
                    if (a2)\n
                    {\n
                        if (a3[1] > a3[3])\n
                        {\n
                            *(&v19[0]) = &a3[2];\n
                            v18 = &a3[3];\n
                            *(&v17[0]) = a3;\n
                            v16 = &a3[1];\n
                        }\n
                        else\n
                        {\n
                            v19 = a3;\n
                            v18 = &a3[1];\n
                            v17 = &a3[2];\n
                            v16 = &a3[3];\n
                        }\n
                        if (*(v16) <= a3[5])\n
                        {\n
                            v15 = &a3[4];\n
                            v14 = &a3[5];\n
                        }\n
                        else\n
                        {\n
                            *(&v15[0]) = v17;\n
                            v14 = v16;\n
                            if (*(v18) > a3[5])\n
                            {\n
                                *(&v17[0]) = v19;\n
                                v16 = v18;\n
                                *(&v19[0]) = &a3[4];\n
                                v18 = &a3[5];\n
                            }\n
                            else\n
                            {\n
                                *(&v17[0]) = &a3[4];\n
                                v16 = &a3[5];\n
                            }\n
                        }\n
                        v12 = *(v19);\n
                        v11 = *(v19);\n
                        if (*(v17) < v12)\n
                        {\n
                            v12 = *(v17);\n
                        }\n
                        else if (*(v17) > v11)\n
                        {\n
                            v11 = *(v17);\n
                        }\n
                        if (*(v15) < v12)\n
                        {\n
                            v12 = *(v15);\n
                        }\n
                        else if (*(v15) > v11)\n
                        {\n
                            v11 = *(v15);\n
                        }\n
                        if (*(v14) != *(v18))\n
                        {\n
                            if (*(v16) == *(v14))\n
                                v13 = *(v16);\n
                            else\n
                                v13 = *(v16) - 1;\n
                            v9 = 0;\n
                            v8 = 0;\n
                            if (*(v18) == *(v16))\n
                            {\n
                                v12 = *(v19);\n
                                v11 = *(v17);\n
                                if (v12 > v11)\n
                                {\n
                                    v11 = *(v19);\n
                                    v12 = *(v17);\n
                                }\n
                                if (v11 > v12)\n
                                {\n
                                    v46 = v12;\n
                                    v47 = *(v18);\n
                                    v0 = *(v18);\n
                                    cgc_ConnectPoints(v20, a0, a1, v44, v48, v11 - 1);\n
                                }\n
                                v10 = *(v16);\n
                            }\n
                            else\n
                            {\n
                                for (v10 = *(v18); v10 <= v13; v10 += 1)\n
                                {\n
                                    v3 = *(v19);\n
                                    v35 = v8;\n
                                    v11 = v3 + (v35 >> 31 CONCAT v35) /m (*(v14) - *(v18));\n
                                    v4 = *(v19);\n
                                    v37 = v9;\n
                                    v38 = *(v16) - *(v18);\n
                                    v39 = v37 >> 31;\n
                                    tmp_32 = (v39 CONCAT v37) /m v38;\n
                                    v41 = tmp_32 >> 32;\n
                                    v12 = v4 + (v39 CONCAT v37) /m v38;\n
                                    v8 = *(v15) - *(v19) + v8;\n
                                    v9 = *(v17) - *(v19) + v9;\n
                                    if (v12 > v11)\n
                                    {\n
                                        v7 = v12;\n
                                        v12 = v11;\n
                                        v11 = v7;\n
                                    }\n
                                    if (v11 > v12)\n
                                    {\n
                                        v43 = v12;\n
                                        *(&v41) = v10;\n
                                        v0 = v10;\n
                                        cgc_ConnectPoints(v20, a0, a1, esi<4>, v41, v11 - 1);\n
                                    }\n
                                }\n
                            }\n
                            v8 = (v10 - *(v18)) * (*(v15) - *(v19));\n
                            v9 = (v10 - *(v16)) * (*(v15) - *(v17));\n
                            while (true)\n
                            {\n
                                v21 = v10;\n
                                if (v21 > *(v14))\n
                                    break;\n
                                v1 = *(v19);\n
                                v49 = v8;\n
                                v11 = v1 + (v49 >> 31 CONCAT v49) /m (*(v14) - *(v18));\n
                                v2 = *(v17);\n
                                v51 = v9;\n
                                v52 = *(v14) - *(v16);\n
                                v53 = v51 >> 31;\n
                                tmp_32 = (v53 CONCAT v51) /m v52;\n
                                v55 = tmp_32 >> 32;\n
                                v12 = v2 + (v53 CONCAT v51) /m v52;\n
                                v8 = *(v15) - *(v19) + v8;\n
                                v9 = *(v15) - *(v17) + v9;\n
                                if (v12 > v11)\n
                                {\n
                                    v6 = v12;\n
                                    v12 = v11;\n
                                    v11 = v6;\n
                                }\n
                                if (v11 > v12)\n
                                {\n
                                    *(&v44) = v12;\n
                                    *(&v55) = v10;\n
                                    v0 = v10;\n
                                    cgc_ConnectPoints(v20, a0, a1, v44, v55, v11 - 1);\n
                                }\n
                                v10 += 1;\n
                            }\n
                            return v10;\n
                        }\n
                        else\n
                        {\n
                            v21 = v11;\n
                            if (v21 <= v12)\n
                                return v21;\n
                            v31 = v12;\n
                            v32 = *(v18);\n
                            v0 = *(v18);\n
                            v21 = cgc_ConnectPoints(v20, a0, a1, v33, v34, v11 - 1);\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v22 = a3[0];\n
                        v23 = a3[1];\n
                        v0 = a3[3];\n
                        cgc_ConnectPoints(v20, a0, a1, v24, v25, a3[2]);\n
                        v26 = a3[4];\n
                        v27 = a3[5];\n
                        v0 = a3[1];\n
                        cgc_ConnectPoints(v20, a0, a1, esi<4>, edx<4>, a3[0]);\n
                        v28 = a3[2];\n
                        v29 = a3[3];\n
                        v0 = a3[5];\n
                        v21 = cgc_ConnectPoints(v20, a0, a1, esi<4>, edx<4>, a3[4]);\n
                        return v21;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4205060:sub_402a04": null, "4205072:cgc_ConnectPoints": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ConnectPoints(void* v11, char a0, char a1, unsigned short a2, unsigned short a3, unsigned short a4, unsigned short a5)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v12;  // ecx\n
\n
    v0 = \"@g\";\n
    if (a4 > a2)\n
    {\n
        v10 = a4 - a2;\n
        v7 = 1;\n
    }\n
    else\n
    {\n
        v10 = a2 - a4;\n
        v7 = -1;\n
    }\n
    if (a5 > a3)\n
    {\n
        v9 = a5 - a3;\n
        v6 = 1;\n
    }\n
    else\n
    {\n
        v9 = a3 - a5;\n
        v6 = -1;\n
    }\n
    if (v9 > v10)\n
        v8 = v9;\n
    else\n
        v8 = v10;\n
    v5 = a2;\n
    v4 = a3;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v12 = v8 + 1;\n
        if (v1 > v12)\n
            break;\n
        *(&v12) = v5;\n
        cgc_SetColor(v11, v4, v12, a0, a1);\n
        v3 = v10 + v3;\n
        v2 = v9 + v2;\n
        if (v3 > v8)\n
        {\n
            v5 = v7 + v5;\n
            v3 -= v8;\n
        }\n
        if (v2 > v8)\n
        {\n
            v4 = v6 + v4;\n
            v2 -= v8;\n
        }\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4205484:sub_402bac": null, "4205488:cgc_PaintRectangle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintRectangle(unsigned short v6[2], char a0, char a1, char a2, unsigned short a3[4])\n
{\n
    unsigned short v0;  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x1e]\n
    unsigned short v2;  // [bp-0x1c]\n
    unsigned short v3;  // [bp-0x1a]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned short v5;  // [bp-0x12]\n
    unsigned int v7;  // eax\n
\n
    v4 = \"@g\";\n
    v7 = a3[0];\n
    if (v7 >= v6[1])\n
        return v7;\n
    v7 = a3[1];\n
    if (v7 < v6[0])\n
    {\n
        v7 = a3[0] + a3[2];\n
        if (v7 >= v6[1])\n
            return a3[0] + a3[2];\n
        v7 = a3[1] + a3[3];\n
        if (v7 >= v6[0])\n
            return a3[1] + a3[3];\n
        if (!a3[2])\n
        {\n
            v7 = a3[3];\n
            if (!v7)\n
                return a3[3];\n
        }\n
        v1 = a3[0];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1], v1, a3[1] + a3[3]);\n
        v2 = a3[0] + a3[2];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1] + a3[3], v2, a3[1] + a3[3]);\n
        v3 = a3[0] + a3[2];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0] + a3[2], a3[1], v3, a3[1] + a3[3]);\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1], a3[0] + a3[2], a3[1]);\n
        v7 = a2;\n
        if (v7 != 1)\n
            return a2;\n
        v7 = a3[2];\n
        if (v7 <= 1)\n
            return a3[2];\n
        v5 = 1;\n
        while (true)\n
        {\n
            v7 = v5;\n
            if (v7 >= a3[3])\n
                break;\n
            v0 = a3[0] + a3[2] - 1;\n
            cgc_ConnectPoints(v6, a0, a1, a3[0] + 1, a3[1] + v5, v0, a3[1] + v5);\n
            v5 += 1;\n
        }\n
        return v5;\n
    }\n
}\n
", "4206348:sub_402f0c": null, "4206352:cgc_PaintSquare": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintSquare(unsigned short v6[2], char a0, char a1, char a2, unsigned short a3[3])\n
{\n
    unsigned short v0;  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x1e]\n
    unsigned short v2;  // [bp-0x1c]\n
    unsigned short v3;  // [bp-0x1a]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned short v5;  // [bp-0x12]\n
    unsigned int v7;  // eax\n
\n
    v4 = \"@g\";\n
    v7 = a3[0];\n
    if (v7 >= v6[1])\n
        return v7;\n
    v7 = a3[1];\n
    if (v7 < v6[0])\n
    {\n
        v7 = a3[0] + a3[2];\n
        if (v7 >= v6[1])\n
            return a3[0] + a3[2];\n
        v7 = a3[1] + a3[2];\n
        if (v7 >= v6[0])\n
            return a3[1] + a3[2];\n
        v7 = a3[2];\n
        if (!v7)\n
            return a3[2];\n
        v1 = a3[0];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1], v1, a3[1] + a3[2]);\n
        v2 = a3[0] + a3[2];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1] + a3[2], v2, a3[1] + a3[2]);\n
        v3 = a3[0] + a3[2];\n
        cgc_ConnectPoints(v6, a0, a1, a3[0] + a3[2], a3[1], v3, a3[1] + a3[2]);\n
        cgc_ConnectPoints(v6, a0, a1, a3[0], a3[1], a3[0] + a3[2], a3[1]);\n
        v7 = a2;\n
        if (v7 != 1)\n
            return a2;\n
        v7 = a3[2];\n
        if (v7 <= 1)\n
            return a3[2];\n
        v5 = 1;\n
        while (true)\n
        {\n
            v7 = v5;\n
            if (v7 >= a3[2])\n
                break;\n
            v0 = a3[0] + a3[2] - 1;\n
            cgc_ConnectPoints(v6, a0, a1, a3[0] + 1, a3[1] + v5, v0, a3[1] + v5);\n
            v5 += 1;\n
        }\n
        return v5;\n
    }\n
}\n
", "4207196:sub_40325c": null, "4207200:cgc_PaintLine": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintLine()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned short v1[2];  // [bp+0x4]\n
    char v2;  // [bp+0x8]\n
    char v3;  // [bp+0xc]\n
    char v4;  // [bp+0x14]\n
\n
    v0 = \"@g\";\n
    if (*(*(&v4)) < v1[1] && *(*(&v4)) <= *((*(&v4) + 4)))\n
    {\n
        if (!(*((*(&v4) + 2)) < v1[0] && *((*(&v4) + 2)) <= *((*(&v4) + 6))))\n
            return;\n
        if (!(*((*(&v4) + 6)) < v1[0] && *((*(&v4) + 4)) < v1[1]))\n
            return;\n
        cgc_ConnectPoints(v1, v2, v3, *(*(&v4)), *((*(&v4) + 2)), *((*(&v4) + 4)), *((*(&v4) + 6)));\n
        return;\n
    }\n
    return;\n
}\n
", "4207476:sub_403374": null, "4207488:cgc_PaintCircle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintCircle(unsigned short v8[2], char a0, char a1, char a2, unsigned short a3[3])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
    unsigned short v10;  // dx\n
    unsigned int v11;  // edx\n
    unsigned short v12;  // dx\n
    unsigned short v13;  // dx\n
    unsigned short v14;  // dx\n
    unsigned short v15;  // dx\n
    unsigned short v16;  // dx\n
    unsigned short v17;  // dx\n
    unsigned short v18;  // dx\n
    unsigned short v19;  // dx\n
    unsigned short v20;  // dx\n
    unsigned short v21;  // dx\n
    unsigned short v22;  // dx\n
    unsigned short v23;  // dx\n
    unsigned short v24;  // dx\n
    unsigned short v25;  // dx\n
\n
    v0 = \"@g\";\n
    v9 = a3[0];\n
    if (v9 >= v8[1])\n
        return v9;\n
    v9 = a3[1];\n
    if (v9 < v8[0])\n
    {\n
        v9 = a3[0] + a3[2];\n
        if (v9 >= v8[1])\n
            return v9;\n
        v9 = a3[1] + a3[2];\n
        if (v9 < v8[0])\n
        {\n
            v9 = a3[0] - a3[2];\n
            if (v9 < 0)\n
                return v9;\n
            v9 = a3[1] - a3[2];\n
            if (v9 >= 0)\n
            {\n
                v7 = 0;\n
                v6 = a3[2];\n
                v3 = 1 - a3[2];\n
                v2 = 1;\n
                v1 = a3[2] * -2;\n
                v5 = a3[0];\n
                v4 = a3[1];\n
                if (a2)\n
                {\n
                    cgc_ConnectPoints(v8, a0, a1, v5, v4 - v6, v5, v4 + v6 - 1);\n
                }\n
                else\n
                {\n
                    cgc_SetColor(v8, v4 + a3[2], v5, a0, a1);\n
                    v10 = v4 - a3[2];\n
                    cgc_SetColor(v8, v11, v5, a0, a1);\n
                    v12 = v4;\n
                    cgc_SetColor(v8, edx<4>, v5 + a3[2], a0, a1);\n
                    v13 = v4;\n
                    cgc_SetColor(v8, edx<4>, v5 - a3[2], a0, a1);\n
                }\n
                while (true)\n
                {\n
                    v9 = v7;\n
                    if (v9 >= v6)\n
                        break;\n
                    if (v3 >= 0)\n
                    {\n
                        v6 -= 1;\n
                        v1 += 2;\n
                        v3 = v1 + v3;\n
                    }\n
                    v7 += 1;\n
                    v2 += 2;\n
                    v3 = v2 + v3;\n
                    if (!a2)\n
                    {\n
                        v14 = v4 + v6;\n
                        cgc_SetColor(v8, edx<4>, v5 + v7, a0, a1);\n
                        v15 = v4 + v6;\n
                        cgc_SetColor(v8, edx<4>, v5 - v7, a0, a1);\n
                        v17 = v4 - v6;\n
                        cgc_SetColor(v8, edx<4>, v5 + v7, a0, a1);\n
                        v19 = v4 - v6;\n
                        cgc_SetColor(v8, edx<4>, v5 - v7, a0, a1);\n
                        v20 = v4 + v7;\n
                        cgc_SetColor(v8, edx<4>, v5 + v6, a0, a1);\n
                        v22 = v4 + v7;\n
                        cgc_SetColor(v8, edx<4>, v5 - v6, a0, a1);\n
                        v24 = v4 - v7;\n
                        cgc_SetColor(v8, edx<4>, v5 + v6, a0, a1);\n
                        v25 = v4 - v7;\n
                        cgc_SetColor(v8, edx<4>, v5 - v6, a0, a1);\n
                    }\n
                    else\n
                    {\n
                        if (v6 > 0)\n
                        {\n
                            v16 = v4 - v6;\n
                            cgc_ConnectPoints(v8, a0, a1, v5 + v7, edx<4>, v5 + v7, v4 + v6 - 1);\n
                            v18 = v4 - v6;\n
                            cgc_ConnectPoints(v8, a0, a1, v5 - v7, edx<4>, v5 - v7, v4 + v6 - 1);\n
                        }\n
                        if (v7 > 0)\n
                        {\n
                            v21 = v4 - v7;\n
                            cgc_ConnectPoints(v8, a0, a1, v5 + v6, edx<4>, v5 + v6, v4 + v7 - 1);\n
                            v23 = v4 - v7;\n
                            cgc_ConnectPoints(v8, a0, a1, v5 - v6, edx<4>, v5 - v6, v4 + v7 - 1);\n
                        }\n
                    }\n
                }\n
                return v7;\n
            }\n
        }\n
    }\n
}\n
", "4209188:sub_403a24": null, "4209200:cgc_PaintSpray": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PaintSpray()\n
{\n
    char v0;  // [bp-0x24]\n
    char v1;  // [bp-0x23]\n
    char v2;  // [bp-0x22]\n
    char v3;  // [bp-0x21]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp+0x4]\n
    char v10;  // [bp+0x8]\n
    char v11;  // [bp+0xc]\n
    char v12;  // [bp+0x14]\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edx\n
\n
    v4 = \"@g\";\n
    if (!(*(*(&v12)) < *((v9 + 2)) && *((*(&v12) + 2)) < *(v9)))\n
        return;\n
    if (*((*(&v12) + 8)) != 1500797300)\n
        return;\n
    if (!(*((*(&v12) + 6)) <= 100 && *((*(&v12) + 6))))\n
        return;\n
    v8 = (0 CONCAT 100) /m *((*(&v12) + 6));\n
    if (v8 <= 0)\n
        return;\n
    v7 = *(*(&v12));\n
    v6 = *((*(&v12) + 2));\n
    v5 = *((*(&v12) + 4));\n
    while (true)\n
    {\n
        v13 = v7;\n
        v14 = *(*(&v12)) + v5;\n
        v3 = 0;\n
        if (v13 < v14)\n
        {\n
            v13 = *((v9 + 2));\n
            v3 = v7 < v13;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        *(&v14) = v6;\n
        *(&v13) = v7;\n
        cgc_SetColor(v9, v14, v13, v10, v11);\n
        v7 = v8 + v7;\n
    }\n
    v7 = *(*(&v12));\n
    while (true)\n
    {\n
        v15 = v7;\n
        v16 = *(*(&v12)) - v5;\n
        v2 = 0;\n
        if (v15 > v16)\n
            v2 = !(v7 < 0);\n
        if (!(v2 & 1))\n
            break;\n
        *(&v16) = v6;\n
        *(&v15) = v7;\n
        cgc_SetColor(v9, v16, v15, v10, v11);\n
        v7 -= v8;\n
    }\n
    v7 = *(*(&v12));\n
    while (true)\n
    {\n
        v18 = v6;\n
        v17 = *((*(&v12) + 2)) + v5;\n
        v1 = 0;\n
        if (v18 < v17)\n
        {\n
            v18 = *(v9);\n
            v1 = v6 < v18;\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        *(&v17) = v6;\n
        *(&v18) = v7;\n
        cgc_SetColor(v9, v17, v18, v10, v11);\n
        v6 = v8 + v6;\n
    }\n
    v6 = *((*(&v12) + 2));\n
    while (true)\n
    {\n
        v19 = v6;\n
        v20 = *((*(&v12) + 2)) - v5;\n
        v0 = 0;\n
        if (v19 > v20)\n
            v0 = !(v6 < 0);\n
        if (!(v0 & 1))\n
            break;\n
        *(&v20) = v6;\n
        *(&v19) = v7;\n
        cgc_SetColor(v9, v20, v19, v10, v11);\n
        v6 -= v8;\n
    }\n
    *(&v20) = *((*(&v12) + 2));\n
    *(&v19) = *(*(&v12)) + v5;\n
    cgc_SetColor(v9, v20, v19, v10, v11);\n
    *(&v20) = *((*(&v12) + 2));\n
    *(&v19) = *(*(&v12)) - v5;\n
    cgc_SetColor(v9, v20, v19, v10, v11);\n
    *(&v20) = *((*(&v12) + 2)) + v5;\n
    *(&v19) = *(*(&v12));\n
    cgc_SetColor(v9, v20, v19, v10, v11);\n
    *(&v20) = *((*(&v12) + 2)) - v5;\n
    *(&v19) = *(*(&v12));\n
    cgc_SetColor(v9, v20, v19, v10, v11);\n
    return;\n
}\n
", "4210213:sub_403e25": null, "4210224:cgc_PMPGenerate": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned int field_2;\n
    unsigned int field_6;\n
    unsigned int field_a;\n
    unsigned int field_e;\n
    unsigned int field_12;\n
    unsigned int field_16;\n
    unsigned int field_1a;\n
    unsigned int field_1e;\n
    unsigned int field_22;\n
    unsigned int field_26;\n
    unsigned int field_2a;\n
    unsigned int field_2e;\n
    unsigned int field_32;\n
    unsigned int field_36;\n
    unsigned int field_3a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PMPGenerate(struct_0 *v8, unsigned short a0[2])\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v0 = \"@g\";\n
    v7 = 0;\n
    v6 = (a0[1] * 3 >> 31 CONCAT a0[1] * 3) /m 4 >> 32;\n
    if (v6)\n
        v7 = 4 - v6;\n
    v8->field_0 = 19792;\n
    *((&v8->field_2 + 2)) = 0;\n
    *((&v8->field_6 + 2)) = 54;\n
    *(&(&v8->field_0)[1]) = *((&v8->field_6 + 2)) + (a0[1] * 3 + v7) * a0[0];\n
    v5 = 0;\n
    v6 = *(&(&v8->field_0)[1]) & 3;\n
    if (v6)\n
    {\n
        v5 = 4 - v6;\n
        *(&(&v8->field_0)[1]) = *(&(&v8->field_0)[1]) + v5;\n
    }\n
    *((&v8->field_32 + 2)) = (a0[1] * 3 + v7) * a0[0] + v5;\n
    if (cgc_allocate(*((&v8->field_32 + 2)), 0))\n
        cgc__terminate();\n
    cgc_memset(*((&v8->field_36 + 2)), 0, *((&v8->field_32 + 2)));\n
    *((&v8->field_a + 2)) = 40;\n
    *((&v8->field_12 + 2)) = a0[0];\n
    *((&v8->field_e + 2)) = a0[1];\n
    *((&v8->field_16 + 2)) = 1572865;\n
    *((&v8->field_1a + 2)) = 0;\n
    *((&v8->field_1e + 2)) = (a0[1] * 3 + v7) * a0[0];\n
    *((&v8->field_22 + 2)) = 2835;\n
    *((&v8->field_26 + 2)) = 2835;\n
    *((&v8->field_2a + 2)) = 0;\n
    *((&v8->field_2e + 2)) = 0;\n
    v4 = *((&v8->field_36 + 2));\n
    for (v2 = a0[0] - 1; v2 >= 0; v2 -= 1)\n
    {\n
        for (v3 = 0; v3 < a0[1]; v3 += 1)\n
        {\n
            v1 = cgc_GetColor(a0, v2, v3, 0);\n
            cgc_memcpy(v4, v1, 3);\n
            v4 += 3;\n
        }\n
        v4 = v7 + v4;\n
    }\n
    return 0;\n
}\n
", "4210863:sub_4040af": null, "4210864:cgc_PMPTransmit": "typedef struct struct_0 {\n
    char padding_0[54];\n
    unsigned int field_36;\n
    unsigned int field_3a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PMPTransmit(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"@g\";\n
    if (cgc_SendAll(v3, 14))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    else if (cgc_SendAll(&v3->padding_0[14], 40))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    else if (!cgc_SendAll(*((&v3->field_36 + 2)), *(&(&v3->padding_0)[1])))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
}\n
", "4211039:sub_40415f": null, "4211040:cgc_PMPDeallocate": "typedef struct struct_0 {\n
    char padding_0[54];\n
    unsigned int field_36;\n
    unsigned int field_3a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PMPDeallocate(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = \"@g\";\n
    if (*((&v2->field_36 + 2)))\n
    {\n
        v0 = *(&(&v2->padding_0)[1]);\n
        cgc_deallocate(*((&v2->field_36 + 2)));\n
    }\n
    *(&(&v2->padding_0)[1]) = 0;\n
    return v2;\n
}\n
", "4211121:sub_4041b1": null, "4211136:main": "typedef struct struct_0 {\n
    char padding_0[6];\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    char field_a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    char v1;  // [bp-0x6c]\n
    char *v2;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x25]\n
    struct_0 *v4;  // [bp-0x24]\n
    struct_0 *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    char v7[3];  // [bp-0x18], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x12]\n
    void* v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
    unsigned short v13;  // dx\n
    unsigned int v14;  // edx\n
\n
    v10 = v12;\n
    v0 = \"@g\";\n
    v9 = 0;\n
    if (cgc_ReceiveAll(&v8, 2))\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    if (cgc_allocate(*(&v8), 0))\n
        cgc__terminate();\n
    v6 = &v7[*(&v8)];\n
    if (cgc_ReceiveAll(v7, *(&v8)))\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    v5 = &v7;\n
    *(&v7) = &v7[3 + 2];\n
    if (v7 >= v6)\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    else if (!cgc_VGFVerify())\n
    {\n
        v13 = v5->field_6;\n
        if (cgc_CreateCanvas(&v4, v14, v5->field_8, v5->field_a))\n
        {\n
            v9 = -1;\n
            return v9;\n
        }\n
        else if (!cgc_VGFProcess(v7, v6))\n
        {\n
            v3 = v7[0];\n
            *(&v7) = &v7[1];\n
            if (v3 > 20)\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
            for (v2 = 0; v2 < v3; v2 += 1)\n
            {\n
                if (v7 < v6)\n
                {\n
                    *(32 + &v4->padding_0[0] + 0x3 * v2) = v7[2];\n
                    *(33 + &v4->padding_0[0] + 0x3 * v2) = v7[1];\n
                    *(34 + &v4->padding_0[0] + 0x3 * v2) = v7[0];\n
                    v7 += 1;\n
                }\n
                else\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
            }\n
            cgc_FlattenCanvas(v4);\n
            if (cgc_PMPGenerate(&v1, v4))\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
            else if (!cgc_PMPTransmit(&v1))\n
            {\n
                cgc_PMPDeallocate(&v1);\n
                cgc_DestroyCanvas(&v4);\n
                v9 = 0;\n
                return v9;\n
            }\n
            else\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
        }\n
        else\n
        {\n
            v9 = -1;\n
            return v9;\n
        }\n
    }\n
    else\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
}\n
", "4211834:sub_40447a": null, "4211840:cgc_VGFVerify": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned short field_8;\n
} struct_0;\n
\n
int cgc_VGFVerify(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1->field_0 != 2016610569)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (v1->field_4 != 1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (v1->field_6 > 0x200)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (v1->field_8 <= 0x200)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
}\n
", "4211977:sub_404509": null, "4211984:cgc_VGFProcess": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_VGFProcess()\n
{\n
}\n
", "4212636:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}