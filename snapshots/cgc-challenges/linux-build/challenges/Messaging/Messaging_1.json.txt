{"4202496:_init": "extern struct_0 *g_408140;\n
\n
int _init()\n
{\n
    if (g_408140)\n
    {\n
        g_408140();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4202608:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4202656:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4202672:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4202688:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4202704:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24595;\n
    v6 = v5 + 801;\n
    v7 = v5 + 801;\n
    if (v7 == v6)\n
        return v5 + 801;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24531;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 801;\n
    v9 = (v6 + 801 - (v6 + 801) >> 31) + (801 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408134;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408134)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203130:sub_40227a": null, "4203136:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 1;\n
}\n
", "4203165:sub_40229d": null, "4203168:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 2;\n
}\n
", "4203197:sub_4022bd": null, "4203200:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 16;\n
}\n
", "4203229:sub_4022dd": null, "4203232:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 14;\n
}\n
", "4203261:sub_4022fd": null, "4203264:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 12;\n
}\n
", "4203293:sub_40231d": null, "4203296:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 4;\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 8;\n
}\n
", "4203357:sub_40235d": null, "4203360:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 64;\n
}\n
", "4203389:sub_40237d": null, "4203392:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 32;\n
}\n
", "4203421:sub_40239d": null, "4203424:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8512 + v0] & 4294967168;\n
}\n
", "4203453:sub_4023bd": null, "4203456:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8512 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8512 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8512 + v1] & 2) >> 1);\n
}\n
", "4203515:sub_4023fb": null, "4203520:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8512 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203554:sub_402422": null, "4203568:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8512 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8512 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203630:sub_40246e": null, "4203632:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8512 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203666:sub_402492": null, "4203680:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_exit();\n
    return;\n
}\n
", "4203712:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203744:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_40261d;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_40261d:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4204083:sub_402633": null, "4204096:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204448:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204544:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_0 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_0 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_0 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_402a51;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_402a51:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4204895:sub_40295f": null, "4205147:sub_402a5b": null, "4205152:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_402ab8;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402ad0;\n
LABEL_402ab8:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402ad0;\n
    }\n
LABEL_402ad0:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205289:sub_402ae9": null, "4205296:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct struct_0 **v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    struct struct_0 **v10;  // ecx\n
    unsigned int v11;  // edx\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ebp\n
    char *v14;  // edi\n
    unsigned int v15;  // ebx\n
    struct struct_0 **v16;  // eax, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v8 = v6->field_8;\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(v6->field_0, &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = v6->field_14;\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *(v9 + v16);\n
    }\n
    else if (v8 != v6->field_c)\n
    {\n
LABEL_402be9:\n
        v7->field_8 = v8 + 1;\n
        v16 = *(24 + &v7->field_0 + v8);\n
        return v16;\n
    }\n
    else\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (cgc_receive(v6->field_0, v6 + 1, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            v6->field_c = v13;\n
            v10 = v6->field_14;\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *(24 + &v7->field_0 + v12) = *(v10 + *(24 + &v7->field_0 + v12));\n
                        *(25 + &v7->field_0 + v12) = *(v10 + *(25 + &v7->field_0 + v12));\n
                        *(26 + &v7->field_0 + v12) = *(v10 + *(26 + &v7->field_0 + v12));\n
                        *(27 + &v7->field_0 + v12) = *(v10 + *(27 + &v7->field_0 + v12));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = 24 + v12 + v7;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v14[v15] = *(v10 + v14[v15]);\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = v7->field_8;\n
                goto LABEL_402be9;\n
            }\n
        }\n
    }\n
}\n
", "4205633:sub_402c41": null, "4205648:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205688:sub_402c78": null, "4205696:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_1 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402cee:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402cee;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206286:sub_402ece": null, "4206288:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206656:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206696:sub_403068": null, "4206704:cgc_malloc_alloc": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[516];\n
    unsigned int field_208;\n
    char padding_20c[4294966768];\n
    struct struct_0 *field_fffffffc;\n
} struct_1;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    struct struct_6 *field_4;\n
    struct struct_4 *field_8;\n
    struct struct_2 *field_c;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
} struct_5;\n
\n
int cgc_malloc_alloc(struct_1 *v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char v4;  // [bp-0x14]\n
    void* v6;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v7;  // ecx\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // eax\n
    struct_6 *v10;  // esi\n
    struct_6 *v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // esi\n
    void* v14;  // eax, Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v15[2];  // esi\n
\n
    v6 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_40336a:\n
        return v6;\n
    }\n
    v7 = v5;\n
    v8 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v9 = tiny_alloc();\n
        return v9;\n
    }\n
    if (v8 <= 15)\n
    {\n
        v9 = tiny_alloc();\n
        return v9;\n
    }\n
    if (v8 > 131071)\n
    {\n
        v12 = v8 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v6 = 0;\n
        if (!cgc_allocate(v12, 0))\n
        {\n
            v15 = *(&v4);\n
            v15[0] = v5;\n
            v15[1] = v12;\n
            v6 = v15 + 1;\n
            goto LABEL_40336a;\n
        }\n
    }\n
    else\n
    {\n
        v10 = v8 + 23;\n
        v11 = v10 & -0x10;\n
        if (!(v10 & -0x10))\n
        {\n
            v13 = -1;\n
            v14 = v7->field_fffffffc;\n
            if (!v14)\n
                goto LABEL_0x4032e3;\n
            else\n
                goto LABEL_0x403300;\n
        }\n
        else if (v11 < 513)\n
        {\n
            v13 = (v10 >> 4) + 2;\n
            v14 = 0;\n
        }\n
        else if (v11 <= 0x1200)\n
        {\n
            v13 = (v11 + 32 >> 7) + 34;\n
            v14 = (&v7->field_0)[v13];\n
            if (!v14)\n
                goto LABEL_0x4032e3;\n
            else\n
                goto LABEL_0x403300;\n
        }\n
        else\n
        {\n
            v13 = 130;\n
            if (v11 <= 0x20000)\n
            {\n
                v13 = (v11 + 288 >> 11) + 66;\n
                v14 = (&v7->field_0)[v13];\n
                if (!v14)\n
                    goto LABEL_0x4032e3;\n
                else\n
                    goto LABEL_0x403300;\n
            }\n
        }\n
    }\n
}\n
", "4207476:sub_403374": null, "4207488:tiny_alloc": "int tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4207919:sub_40352f": null, "4207920:malloc_free": "typedef struct struct_3 {\n
    struct struct_2 *field_-8;\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
int malloc_free(unsigned int *v1, struct_3 *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_3 *v2;  // edx\n
    unsigned int *v3;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v4;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v5;  // eax\n
    unsigned int v6;  // ecx\n
    struct_2 *v7;  // esi, Other Possible Types: unsigned int\n
    struct_2 *v8;  // edx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // ebx\n
    struct_0 *v12;  // ebp\n
    struct_1 *v13;  // eax\n
    unsigned int v14;  // edi\n
    struct_2 *v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    struct_0 *v19;  // edi\n
    struct_1 *v20;  // eax\n
    unsigned int v21;  // esi\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
\n
    v2 = a0;\n
    if (!v2)\n
        return v4;\n
    v3 = v1;\n
    v4 = v2 / 0x100000;\n
    *(&v4) = *(524 + v1 + v4);\n
    if (*(&v4) == 2)\n
    {\n
        v15 = &v2->field_0;\n
        v5 = *(&v2->field_0);\n
        v7 = v15 - v5;\n
        if (!v5)\n
            v7 = v5;\n
        v8 = v2->field_-4 + v15;\n
        if (v7)\n
        {\n
            v9 = *((v7 + 4));\n
            if ((v9 & 1))\n
            {\n
                v10 = v9 & -2;\n
                if (v10 <= 15)\n
                {\n
                    v11 = v9 / 4 - 1;\n
                }\n
                else\n
                {\n
                    if (v10 <= 0x200)\n
                    {\n
                        v11 = (v9 >> 4) + 2;\n
                    }\n
                    else\n
                    {\n
                        if (v10 <= 0x1200)\n
                        {\n
                            v11 = (v10 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v11 = 130;\n
                            if (v10 <= 0x20000)\n
                                v11 = (v10 - 0x1200 >> 11) + 66;\n
                        }\n
                    }\n
                }\n
                *((v7 + 4)) = v10;\n
                v12 = *((v7 + 8));\n
                if (*((v7 + 8)))\n
                    v12->field_c = *((v7 + 12));\n
                v13 = *((v7 + 12));\n
                if (v13)\n
                    v13->field_8 = v12;\n
                v3 = v1;\n
                if (v1[v11] == v7)\n
                    *((v3 + v11 * 4)) = v13;\n
                v14 = v10 + v15->field_4;\n
                *((v7 + 4)) = v14;\n
                v8->field_0 = v14;\n
                v15 = v7;\n
            }\n
        }\n
        v16 = v8->field_4;\n
        if ((v16 & 1))\n
        {\n
            v17 = v16 & -2;\n
            if (v17 <= 15)\n
            {\n
                v18 = v16 / 4 - 1;\n
            }\n
            else\n
            {\n
                if (v17 <= 0x200)\n
                {\n
                    v18 = (v16 >> 4) + 2;\n
                }\n
                else\n
                {\n
                    if (v17 <= 0x1200)\n
                    {\n
                        v18 = (v17 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v18 = 130;\n
                        if (v17 <= 0x20000)\n
                            v18 = (v17 - 0x1200 >> 11) + 66;\n
                    }\n
                }\n
            }\n
            v8->field_4 = v17;\n
            v19 = v8->field_8;\n
            if (v19)\n
                v19->field_c = v8->field_c;\n
            v20 = v8->field_c;\n
            if (v20)\n
                v20->field_8 = v19;\n
            if (*((v3 + (v18 << 2))) == v8)\n
                *((v3 + v18 * 4)) = v20;\n
            v21 = v17 + *((v15 + 4));\n
            *((v15 + 4)) = v21;\n
            *((v15 + v21)) = v21;\n
        }\n
        v22 = *((v15 + 4));\n
        if (v22 <= 15)\n
        {\n
            v23 = v22 / 4 - 1;\n
        }\n
        else\n
        {\n
            if (v22 <= 0x200)\n
            {\n
                v23 = (v22 >> 4) + 2;\n
            }\n
            else\n
            {\n
                if (v22 <= 0x1200)\n
                {\n
                    v23 = (v22 - 0x200 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v23 = 130;\n
                    if (v22 <= 0x20000)\n
                        v23 = (v22 - 0x1200 >> 11) + 66;\n
                }\n
            }\n
        }\n
        *((v15 + 4)) = v22 | 1;\n
        *((v15 + 8)) = 0;\n
        *((v15 + 12)) = *((v3 + v23 * 4));\n
        *((v3 + v23 * 4)) = v15;\n
        v4 = *((v15 + 12));\n
        if (v4)\n
            v4->field_8 = v15;\n
    }\n
    else if (*(&v4) == 1)\n
    {\n
        v6 = (*((v2 & -0x1000)) <= 15 ? (*((v2 & -0x1000)) <= 0x200 ? (*((v2 & -0x1000)) <= 0x1200 ? (*((v2 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v2 & -0x1000)) - 0x200 >> 7) + 34) : (*((v2 & -0x1000)) >> 4) + 2) : *((v2 & -0x1000)) / 4 - 1);\n
        v4 = v3[v6];\n
        v2->field_-8 = v4;\n
        v3[v6] = v2;\n
    }\n
    else if (!*(&v4))\n
    {\n
        v0 = v2->field_-4;\n
        v4 = cgc_deallocate(&v2->field_0);\n
        return v4;\n
    }\n
}\n
", "4208527:sub_40378f": null, "4208528:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208577:sub_4037c1": null, "4208592:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(void* v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_4038a5:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_40389d:\n
        malloc_free(v1, a0);\n
        goto LABEL_4038a5;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_403880;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_403880:\n
        v3 = v4;\n
        goto LABEL_4038a5;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_4038a5;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_40389d;\n
}\n
", "4208815:sub_4038af": null, "4208816:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v2 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4208871:sub_4038e7": null, "4208880:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4208943:sub_40392f": null, "4208944:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209074:sub_4039b2": null, "4209088:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209382:sub_403ae6": null, "4209392:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4209502:sub_403b5e": null, "4209504:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4209617:sub_403bd1": null, "4209632:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4209739:sub_403c4b": null, "4209744:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4209853:sub_403cbd": null, "4209856:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4209959:sub_403d27": null, "4209968:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210016:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210059:sub_403d8b": null, "4210064:cgc__vsfprintf": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_1 *v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    char *v32;  // ebx\n
    struct struct_1 **v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    struct_1 *v78;  // eax\n
    struct_1 *v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210134:sub_403dd6": null, "4211648:cgc_realloc": "extern void g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4211692:sub_4043ec": null, "4211696:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2;  // al, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4211814:sub_404466": null, "4211824:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4211913:sub_4044c9": null, "4211920:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v0[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4211990:sub_404516": null, "4212000:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212068:sub_404564": null, "4212080:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212132:sub_4045a4": null, "4212144:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212224:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212256:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212384:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4212465:sub_4046f1": null, "4212480:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4212569:sub_404759": null, "4212576:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_4047c1;\n
                goto LABEL_4047bf;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_4047c1;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_4047bf:\n
    v4 = 0;\n
LABEL_4047c1:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4212706:sub_4047e2": null, "4212720:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212808:sub_404848": null, "4212816:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    char v11;  // al\n
    unsigned int v12;  // eax, Other Possible Types: char\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ecx\n
    char v25[2];  // ebp, Other Possible Types: unsigned int\n
    void* v26;  // esi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v25 = v10;\n
    if (v12)\n
    {\n
        v25 = v10;\n
        do\n
        {\n
            if (!*(v25))\n
            {\n
                v21 = 0;\n
                v23 = 1;\n
                v24 = 1;\n
                v26 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404a40;\n
            }\n
            v11 = *((v25 + 1));\n
            v25 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v25) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v25) == 43)\n
            v25 += 1;\n
        if (!v13)\n
            goto LABEL_404918;\n
    }\n
    else\n
    {\n
        v25 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404918:\n
            *(&v12) = *(v25);\n
            if (*(v25) != 48)\n
            {\n
LABEL_404953:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404a20;\n
LABEL_40496b:\n
                *(&v12) = *(v25);\n
LABEL_40496e:\n
                if (!v12)\n
                {\n
LABEL_404a20:\n
                    v21 = 0;\n
                    v24 = 1;\n
                    v26 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404a40;\n
LABEL_404a35:\n
                    tmp_2 = v24;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v25;\n
                    *(v22) = v27;\n
                    goto LABEL_404a40;\n
                }\n
LABEL_404976:\n
                v26 = 0;\n
                v21 = 0;\n
                v24 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v24;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v25);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                        v17 = v1;\n
                        if (!(v16 < v17))\n
                            goto LABEL_404a63;\n
                    }\n
                    else\n
                    {\n
                        v19 = *(v25);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v19 - 87;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404a63;\n
                        }\n
                        else if (!cgc_isupper(v19))\n
                        {\n
LABEL_404a63:\n
                            v22 = a0;\n
                            v23 = v0;\n
                            v24 = v2;\n
                            if (!v22)\n
                                goto LABEL_404a40;\n
                            goto LABEL_404a35;\n
                        }\n
                        else\n
                        {\n
                            v16 = *(v25) - 55;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404a63;\n
                        }\n
                    }\n
                    v20 = v17 * v26;\n
                    tmp_5 = v20;\n
                    v26 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v21 = 1;\n
                    v12 = *((v25 + 1));\n
                    v25 += 1;\n
                    v24 = 0;\n
                } while (v12);\n
                goto LABEL_404a35;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v25 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v25 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404976;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v25);\n
                    goto LABEL_404953;\n
                }\n
                else\n
                {\n
                    v25 += 2;\n
                }\n
            }\n
LABEL_404949:\n
            v13 = 16;\n
            goto LABEL_40496b;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_40496b;\n
    *(&v12) = *(v25);\n
    v13 = 16;\n
    if (!(*(v25) == 48))\n
        goto LABEL_40496e;\n
    v25 += (cgc_tolower(*((v25 + 1))) == 120) * 2;\n
    goto LABEL_404949;\n
LABEL_404a40:\n
    v28 = (!v21 ? 0x80000000 : -(v26));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v26);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213175:sub_4049b7": null, "4213365:sub_404a75": null, "4213376:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax, Other Possible Types: char\n
    void* v16;  // edi\n
    void* v17;  // edi\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    char v32[2];  // ebp\n
    unsigned int v33;  // edi\n
    char v34[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax, Other Possible Types: unsigned int\n
    unsigned int v36;  // edx\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404b7c;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) != 45)\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (!v15)\n
            goto LABEL_404b46;\n
        goto LABEL_404af0;\n
    }\n
    else\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (v15)\n
        {\n
LABEL_404af0:\n
            if (v15 == 16)\n
            {\n
                *(&v15) = *(v34);\n
                if (*(v34) == 48)\n
                {\n
                    v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
                    v0 = 16;\n
                    goto LABEL_404be5;\n
                }\n
                else\n
                {\n
                    v0 = 16;\n
                    if (!(!v15))\n
                        goto LABEL_404bec;\n
                    goto LABEL_404b7a;\n
                }\n
            }\n
        }\n
        else\n
        {\n
LABEL_404b46:\n
            *(&v15) = *(v34);\n
            if (*(v34) == 48)\n
            {\n
                *(&v15) = *((v34 + 1));\n
                if ((v15 & 248) == 48)\n
                {\n
                    v1 = v36;\n
                    v34 += 1;\n
                    v0 = 8;\n
                    goto LABEL_404bf0;\n
                }\n
                v15 = cgc_tolower(v15);\n
                if (v15 != 120)\n
                {\n
                    *(&v15) = *(v34);\n
                }\n
                else\n
                {\n
                    v34 += 2;\n
                    v0 = 16;\n
                    goto LABEL_404be5;\n
                }\n
            }\n
            v1 = v36;\n
            v15 = cgc_isdigit(v15);\n
            v0 = 10;\n
            if (!v15)\n
            {\n
                v14 = 0;\n
                v37 = 1;\n
                v2 = 0;\n
                v16 = 0;\n
                v35 = a0;\n
                v36 = v1;\n
                if (!v35)\n
                    goto LABEL_404d07;\n
LABEL_404cfc:\n
                tmp_2 = v37;\n
                v38 = v8;\n
                if (!tmp_2)\n
                    v38 = v34;\n
                *(v35) = v38;\n
            }\n
            else\n
            {\n
                v36 = v1;\n
LABEL_404be5:\n
                *(&v15) = *(v34);\n
                if (*(v34))\n
                {\n
LABEL_404bec:\n
                    v1 = v36;\n
LABEL_404bf0:\n
                    v2 = 0;\n
                    v18 = 0;\n
                    v14 = 0;\n
                    v37 = 1;\n
                    do\n
                    {\n
                        *(&v3) = v37;\n
                        v19 = cgc_isdigit(v15);\n
                        v20 = *(v34);\n
                        if (v19)\n
                        {\n
                            v21 = v20 - 48;\n
                            v22 = v0;\n
                            if (!(v21 < v22))\n
                                goto LABEL_404ccd;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v34);\n
                            if (cgc_islower(v20))\n
                            {\n
                                v21 = v24 - 87;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404ccd;\n
                            }\n
                            else if (!cgc_isupper(v24))\n
                            {\n
LABEL_404ccd:\n
                                v35 = a0;\n
                                v36 = v1;\n
                                v37 = v3;\n
                                if (!v35)\n
                                    goto LABEL_404d07;\n
                                goto LABEL_404cfc;\n
                            }\n
                            else\n
                            {\n
                                v21 = *(v34) - 55;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404ccd;\n
                            }\n
                        }\n
                        *(&v3) = v34;\n
                        v25 = v2;\n
                        v26 = v25 * (v22 >> 31);\n
                        v27 = v14;\n
                        v28 = v22;\n
                        tmp_67 = v25 * v22;\n
                        v29 = v25 * v22 >> 32;\n
                        v30 = tmp_67;\n
                        v31 = v28 * v18 + v26 + v29;\n
                        v32 = v3;\n
                        v33 = v21 >> 31;\n
                        v2 = v30 + v21;\n
                        tmp_41 = v33;\n
                        v18 = v33 + v31 + (v30 + v21 < v30);\n
                        v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                        v15 = v32[1];\n
                        v34 = &v32[1];\n
                        v37 = 0;\n
                    } while (v15);\n
                    goto LABEL_404d07;\n
                }\n
LABEL_404b7a:\n
                v14 = 0;\n
LABEL_404b7c:\n
                v37 = 1;\n
                v2 = 0;\n
                v17 = 0;\n
                v35 = a0;\n
                if (!v35)\n
                    goto LABEL_404d07;\n
                goto LABEL_404cfc;\n
            }\n
        }\n
    }\n
LABEL_404d07:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4213819:sub_404c3b": null, "4214072:sub_404d38": null, "4214080:_Z11runMetadatav": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int g_406288;\n
\n
int runMetadata()\n
{\n
    char v0;  // [bp-0x186]\n
    char v1;  // [bp-0x185]\n
    unsigned int v2;  // [bp-0x184]\n
    unsigned int v3[56];  // [bp-0x180]\n
    char v4[9];  // [bp-0x174]\n
    unsigned int v5;  // [bp-0x170]\n
    char v6;  // [bp-0x165]\n
    void* v7;  // [bp-0x164]\n
    void* v8;  // [bp-0x160]\n
    char v9[9];  // [bp-0x15c]\n
    unsigned int v10;  // [bp-0x158], Other Possible Types: char\n
    unsigned int v11;  // [bp-0x154]\n
    char v12;  // [bp-0x150]\n
    char v13;  // [bp-0x14c]\n
    unsigned int v14;  // [bp-0x148]\n
    unsigned int v15;  // [bp-0x144]\n
    char v16;  // [bp-0x13c]\n
    char *v17;  // [bp-0x138]\n
    unsigned int v18;  // [bp-0x134]\n
    char v19;  // [bp-0x12c]\n
    unsigned int v20;  // [bp-0x128]\n
    unsigned int v21;  // [bp-0x124]\n
    char v22;  // [bp-0x11c]\n
    unsigned int v23;  // [bp-0x118]\n
    unsigned int v24;  // [bp-0x114]\n
    char v25;  // [bp-0x10c]\n
    char *v26;  // [bp-0x108]\n
    unsigned int v27;  // [bp-0x104]\n
    char v28;  // [bp-0xfc]\n
    unsigned int v29;  // [bp-0xf8]\n
    unsigned int v30;  // [bp-0xf4]\n
    char v31;  // [bp-0xec]\n
    unsigned int v32;  // [bp-0xe8]\n
    unsigned int v33;  // [bp-0xe4]\n
    char v34;  // [bp-0xdc]\n
    char *v35;  // [bp-0xd8]\n
    unsigned int v36;  // [bp-0xd4]\n
    char v37;  // [bp-0xcc]\n
    unsigned int v38;  // [bp-0xc8]\n
    unsigned int v39;  // [bp-0xc4]\n
    char v40;  // [bp-0xbc]\n
    unsigned int v41;  // [bp-0xb8]\n
    unsigned int v42[56];  // [bp-0xb4]\n
    char v43;  // [bp-0xac]\n
    unsigned int v44;  // [bp-0xa8]\n
    unsigned int v45[56];  // [bp-0xa4]\n
    char v46;  // [bp-0x9c]\n
    unsigned int v47;  // [bp-0x98]\n
    unsigned int v48[56];  // [bp-0x94]\n
    char v49;  // [bp-0x8c]\n
    unsigned int v50;  // [bp-0x88]\n
    unsigned int v51[56];  // [bp-0x84]\n
    char v52;  // [bp-0x80]\n
    char v53;  // [bp-0x7c]\n
    char v54;  // [bp-0x74]\n
    unsigned int v55;  // [bp-0x70]\n
    char v56;  // [bp-0x64]\n
    unsigned int v57;  // [bp-0x60]\n
    char v58;  // [bp-0x54]\n
    unsigned int v59;  // [bp-0x50]\n
    char v60;  // [bp-0x44]\n
    char v61[9];  // [bp-0x40]\n
    char v62;  // [bp-0x3c]\n
    char v63;  // [bp-0x38]\n
    void* v64;  // [bp-0x34]\n
    char v65;  // [bp-0x2c]\n
    void* v66;  // [bp-0x28]\n
    char v67;  // [bp-0x20]\n
    void* v68;  // [bp-0x1c]\n
    unsigned int v69;  // [bp+0x4]\n
    unsigned int v71;  // [bp+0x8]\n
    unsigned int v72;  // [bp+0xc]\n
    unsigned int v73;  // [bp+0x10]\n
    unsigned int v74;  // [bp+0x14]\n
    unsigned int v75;  // [bp+0x18]\n
    void* v77;  // edi, Other Possible Types: unsigned int\n
    unsigned int v78[56];  // edi\n
    unsigned int v79;  // eax\n
    unsigned int v80;  // eax\n
    unsigned int v81;  // edx\n
    char v82[9];  // esi\n
    char v83[9];  // eax\n
    unsigned int v84;  // eax\n
    unsigned int v85;  // edi\n
    unsigned int v86;  // edx\n
    unsigned int v87;  // esi\n
    unsigned int v88;  // eax\n
    unsigned int v89;  // ecx\n
    unsigned int v90;  // eax\n
    char *v91;  // esi, Other Possible Types: unsigned int\n
    unsigned int v92;  // eax\n
    char *v93;  // esi, Other Possible Types: unsigned int\n
    unsigned int v94;  // ecx\n
    char *v95;  // esi, Other Possible Types: unsigned int\n
    unsigned int v96;  // ecx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // ecx\n
    unsigned int v99;  // edx\n
    unsigned int v100;  // eax, Other Possible Types: char\n
    unsigned int v101;  // edx\n
    unsigned int v102;  // eax\n
    unsigned int v103;  // eax\n
    unsigned int v104;  // eax, Other Possible Types: char\n
    struct_0 *v105;  // eax, Other Possible Types: unsigned int\n
\n
    v77 = cgc_fopen(4, 0);\n
    v11 = v77;\n
    while (true)\n
    {\n
        v7 = 0;\n
        v8 = 0;\n
        v60 = 0;\n
        *(&v61[0]) = 0;\n
        v63 = 0;\n
        v64 = 0;\n
        v65 = 0;\n
        v66 = 0;\n
        v67 = 0;\n
        v68 = 0;\n
        cgc_fread(&v53, 4, v77);\n
        cgc_fread(&v52, 4, v77);\n
        cgc_fread(&v1, 1, v77);\n
        cgc_fread(&v7, 4, v77);\n
        cgc_fread(&v8, 4, v77);\n
        cgc_fread(&v12, 4, v77);\n
        if (v1)\n
        {\n
            cgc_fread(&v6, 1, v77);\n
            goto *((4227400 + v6 * 4 - 8088)) + 4227400;\n
        }\n
        v78 = *(&v53);\n
        v2 = 3;\n
        v3[0] = v78;\n
        v79 = *(&v52);\n
        switch (v79)\n
        {\n
        case 0:\n
            v5 = *(&v62);\n
            *(&v4[0]) = v61;\n
            v3[0] = operator new(224);\n
            v3[0] = 0;\n
            v3[16] = 0;\n
            v3[32] = 0;\n
            v3[48] = v4;\n
            v3[49] = v5;\n
            v3[51] = v8;\n
            v3[50] = v7;\n
            v3[52] = *(&v12);\n
            v58 = 1;\n
            v59 = 9;\n
            goto LABEL_40556b;\n
        case 1:\n
            v80 = v78[0];\n
            if (v80 && v80 != &v78[1])\n
                operator delete[](v80);\n
            v92 = v78[16];\n
            if (v92 && v92 != &v78[17])\n
                operator delete[](v92);\n
            v103 = v78[32];\n
            if (v103 && v103 != &v78[33])\n
                operator delete[](v103);\n
            if (!v78)\n
                goto LABEL_404d8b;\n
            operator delete(v78);\n
LABEL_404d88:\n
            goto LABEL_404d8b;\n
        case 2:\n
            v5 = *(&v62);\n
            *(&v4[0]) = v61;\n
            if (v78[0])\n
            {\n
                v37 = 2;\n
                v38 = \"Title: \";\n
                v39 = cgc_strlen(\"Title: \");\n
                MsgSend1(v4, 5, *(&v37), v38);\n
                v34 = 2;\n
                v35 = v78[0];\n
                v36 = cgc_strlen(v35);\n
                MsgSend1(v4, 5, *(&v34), v35);\n
                v31 = 2;\n
                v32 = \"\\n
\";\n
                v33 = cgc_strlen(\"\\n
\");\n
                MsgSend1(v4, 5, *(&v31), v32);\n
            }\n
            if (v78[16])\n
            {\n
                v28 = 2;\n
                v29 = \"Album: \";\n
                v30 = cgc_strlen(\"Album: \");\n
                MsgSend1(v4, 5, *(&v28), v29);\n
                v25 = 2;\n
                v26 = v78[16];\n
                v27 = cgc_strlen(v26);\n
                MsgSend1(v4, 5, *(&v25), v26);\n
                v22 = 2;\n
                v23 = \"\\n
\";\n
                v24 = cgc_strlen(\"\\n
\");\n
                MsgSend1(v4, 5, *(&v22), v23);\n
            }\n
            if (v78[32])\n
            {\n
                v19 = 2;\n
                v20 = \"Artist: \";\n
                v21 = cgc_strlen(\"Artist: \");\n
                MsgSend1(v4, 5, *(&v19), v20);\n
                v16 = 2;\n
                v17 = v78[32];\n
                v18 = cgc_strlen(v17);\n
                MsgSend1(v4, 5, *(&v16), v17);\n
                v13 = 2;\n
                v14 = \"\\n
\";\n
                v15 = cgc_strlen(\"\\n
\");\n
                MsgSend1(v4, 5, *(&v13), v14);\n
            }\n
            if (v7 <= 0)\n
                goto LABEL_404d8b;\n
            v105 = &v7;\n
LABEL_404d82:\n
            MsgSend1(v105);\n
            goto LABEL_404d88;\n
        case 3:\n
            if (*(&v62))\n
            {\n
                v82 = v61;\n
                if (!cgc_memcmp(v82, &g_406288, 3) && v82[3] == 5)\n
                {\n
                    v78[53] = v82[8] | (v82[7] | v82[6] * 128 | v82[5] * 0x4000) * 128;\n
                    v78[54] = 0;\n
                    goto LABEL_404d79;\n
                }\n
            }\n
            v90 = v78[52];\n
            v85 = &v78[50];\n
            v49 = 4;\n
            v51[0] = v3;\n
            v50 = v2;\n
            v86 = *(&v49);\n
            v87 = v50;\n
            break;\n
        case 4:\n
            if (*(&v62))\n
            {\n
                v83 = v61;\n
                v78[54] = v78[54] + 8;\n
                v78[55] = *(&v83[0]);\n
                v84 = v83[7] | (v83[6] | v83[5] * 128 | v83[4] * 0x4000) * 128;\n
                v54 = 1;\n
                v55 = v84;\n
                goto LABEL_405563;\n
            }\n
            else\n
            {\n
                v90 = v78[52];\n
                v85 = &v78[50];\n
                v43 = 4;\n
                v45[0] = v3;\n
                v44 = v2;\n
                v86 = *(&v43);\n
                v87 = v44;\n
                MsgSend1(v85, v90, v86, v87);\n
                v77 = v11;\n
                continue;\n
            }\n
        case 5:\n
            v81 = *(&v62);\n
            if (!*(&v10))\n
            {\n
                v90 = v78[52];\n
                v85 = &v78[50];\n
                v40 = 4;\n
                v42[0] = v3;\n
                v41 = v2;\n
                v86 = *(&v40);\n
                v87 = v41;\n
                break;\n
            }\n
            else\n
            {\n
                *(&v9[0]) = v61;\n
                v78[54] = v78[54] + v81;\n
                v88 = v81 + 1;\n
                v89 = v78[55];\n
                v10 = v81;\n
                if (v89 == 1398035009)\n
                {\n
                    if (*(&v10) >= 60)\n
                    {\n
                        v91 = operator new[](v88);\n
                    }\n
                    else\n
                    {\n
                        v91 = &v78[33];\n
                        if (*(&v10) <= 0)\n
                            v94 = 0;\n
                    }\n
                    v97 = 0;\n
                    v94 = 0;\n
                    while (true)\n
                    {\n
                        v100 = v9[v97];\n
                        switch (v100)\n
                        {\n
                        case 9:\n
                            v0 = 116;\n
                            break;\n
                        case 10:\n
                            v0 = 110;\n
                            break;\n
                        case 13:\n
                            v0 = 114;\n
                            break;\n
                        case 8:\n
                            v0 = 98;\n
                        case 0:\n
                            *((v91 + v94)) = 92;\n
                            v94 += 1;\n
                            v100 = v0;\n
                            goto LABEL_40577c;\n
                        default:\n
LABEL_40577c:\n
                            *((v91 + v94)) = v100;\n
                            v94 += 1;\n
                            v97 += 1;\n
                            continue;\n
                        }\n
                    }\n
                }\n
                if (v89 != 1296190529)\n
                {\n
                    if (!(v89 == 1280592212))\n
                        goto LABEL_404d79;\n
                    if (*(&v10) >= 60)\n
                    {\n
                        v95 = operator new[](v88);\n
                    }\n
                    else\n
                    {\n
                        v95 = &v78[1];\n
                        if (*(&v10) <= 0)\n
                            v98 = 0;\n
                    }\n
                    v101 = 0;\n
                    v98 = 0;\n
                    while (true)\n
                    {\n
                        v104 = v9[v101];\n
                        switch (v104)\n
                        {\n
                        case 9:\n
                            v0 = 116;\n
                            break;\n
                        case 10:\n
                            v0 = 110;\n
                            break;\n
                        case 13:\n
                            v0 = 114;\n
                            break;\n
                        case 8:\n
                            v0 = 98;\n
                        case 0:\n
                            *((v95 + v98)) = 92;\n
                            v98 += 1;\n
                            v104 = v0;\n
                            goto LABEL_40570c;\n
                        default:\n
LABEL_40570c:\n
                            *((v95 + v98)) = v104;\n
                            v98 += 1;\n
                            v101 += 1;\n
                            continue;\n
                        }\n
                    }\n
                }\n
                if (*(&v10) >= 60)\n
                {\n
                    v93 = operator new[](v88);\n
                }\n
                else\n
                {\n
                    v93 = &v78[17];\n
                    if (*(&v10) <= 0)\n
                    {\n
                        v96 = 0;\n
                        goto LABEL_4056d8;\n
                    }\n
                }\n
                v99 = 0;\n
                v96 = 0;\n
                do\n
                {\n
                    v102 = v9[v99];\n
                    if (v102 <= 13)\n
                    {\n
                        v0 = 48;\n
                        goto *((4227400 + v9[v99] * 4 - 7984)) + 4227400;\n
                    }\n
                    *((v93 + v96)) = v102;\n
                    v96 += 1;\n
                    v99 += 1;\n
                } while (*(&v10) != v99);\n
LABEL_4056d8:\n
                *((v93 + v96)) = 0;\n
                v78[16] = v93;\n
LABEL_404d79:\n
                v105 = &v2;\n
                goto LABEL_404d82;\n
            }\n
        case 6:\n
            if (v78[54] + 8 >= v78[53])\n
            {\n
                v90 = v78[52];\n
                v85 = &v78[50];\n
                v46 = 4;\n
                v48[0] = v3;\n
                v47 = v2;\n
                v86 = *(&v46);\n
                v87 = v47;\n
                break;\n
            }\n
            else\n
            {\n
                v56 = 1;\n
                v57 = 8;\n
            }\n
LABEL_405563:\n
LABEL_40556b:\n
            MsgSend(v69, v71, v72, v73, v74, v75);\n
            v77 = v11;\n
            continue;\n
        default:\n
LABEL_404d8b:\n
            v77 = v11;\n
            continue;\n
        }\n
    }\n
}\n
", "4214378:sub_404e6a": null, "4214384:sub_404e70": "int sub_404e70()\n
{\n
    char v0;  // [bp+0x1]\n
    unsigned int v1;  // [bp+0x4]\n
    char v2;  // [bp+0x8]\n
    unsigned int v3;  // [bp+0xc]\n
    unsigned int v4;  // [bp+0x10]\n
    char v5;  // [bp+0x18]\n
    char v6;  // [bp+0x114]\n
    void* v7;  // edi\n
    unsigned int v8[3];  // esi\n
\n
    cgc_fread(&v5, 4, v7);\n
    cgc_fread(&v6, 4, v7);\n
    v2 = 4;\n
    v4 = *(&v6);\n
    v3 = *(&v5);\n
    v8[2] = v4;\n
    v8[1] = v3;\n
    v8[0] = *(&v2);\n
    if (&v0 < *(&v1 + 3))\n
        goto LABEL_0x404ed7;\n
    else\n
        goto LABEL_0x404fa0;\n
}\n
", "4214522:sub_404efa": "int sub_404efa()\n
{\n
    char v1;  // [bp+0x8]\n
    void* v2;  // [bp+0xc]\n
\n
    v1 = 0;\n
    v2 = 0;\n
}\n
", "4214537:sub_404f09": null, "4214544:sub_404f10": "int sub_404f10()\n
{\n
    char v1;  // [bp+0x8]\n
    char v2;  // [bp+0xc]\n
    void* v3;  // edi\n
\n
    cgc_fread(&v2, 4, v3);\n
    v1 = 1;\n
}\n
", "4214570:sub_404f2a": null, "4214576:sub_404f30": "int sub_404f30()\n
{\n
    char v1;  // [bp+0x8]\n
    unsigned int v2;  // [bp+0xc]\n
    unsigned int v3;  // [bp+0x10]\n
    char v4;  // [bp+0x18]\n
    char v5;  // [bp+0x38]\n
    void* v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    cgc_fread(&v4, 4, v6);\n
    v7 = operator new[](*(&v4));\n
    cgc_fread(v7, *(&v4), *(&v5));\n
    v1 = 2;\n
    v2 = v7;\n
    v3 = *(&v4);\n
}\n
", "4214655:sub_404f7f": null, "4214656:sub_404f80": "int sub_404f80()\n
{\n
    char v1;  // [bp+0x8]\n
    char v2;  // [bp+0xc]\n
    void* v3;  // edi\n
\n
    cgc_fread(&v2, 4, v3);\n
    v1 = 3;\n
}\n
", "4214685:sub_404f9d": null, "4216789:sub_4057d5": "int sub_4057d5()\n
{\n
    char v1;  // [bp+0x6]\n
    char *v2;  // esi\n
    unsigned int v3;  // ecx\n
\n
    v1 = 116;\n
    v2[v3] = 92;\n
}\n
", "4216860:sub_40581c": "int sub_40581c()\n
{\n
    char v1;  // [bp+0x6]\n
\n
    v1 = 98;\n
}\n
", "4216892:sub_40583c": null, "4216896:main": "int main()\n
{\n
    runMetadata();\n
    return 0;\n
}\n
", "4216924:sub_40585c": null, "4216928:_Z8MsgSend1RK6objecti": "int MsgSend1(unsigned int v1[2], unsigned int a0)\n
{\n
    void* v0;  // [bp-0x14]\n
    unsigned int v2[2];  // eax\n
\n
    v2 = v1;\n
    v0 = 0;\n
    return _MsgSend(v2[0], v2[1], a0, 0, 0, 0);\n
}\n
", "4216978:sub_405892": null, "4216992:_ZL8_MsgSendiiiiiiiz": "int _MsgSend()\n
{\n
    unsigned int *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp+0x4]\n
    char v2;  // [bp+0x8]\n
    char v3;  // [bp+0xc]\n
    char v4;  // [bp+0x10]\n
    char v5;  // [bp+0x14]\n
    char v6;  // [bp+0x18]\n
    char v7;  // [bp+0x1c]\n
    char v8;  // [bp+0x20]\n
    void* v9;  // esi\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
\n
    v9 = cgc_fopen(v1, 1);\n
    cgc_fwrite(&v2, 4, v9);\n
    cgc_fwrite(&v3, 4, v9);\n
    cgc_fwrite(&v7, 1, v9);\n
    cgc_fwrite(&v4, 4, v9);\n
    cgc_fwrite(&v5, 4, v9);\n
    cgc_fwrite(&v6, 4, v9);\n
    v0 = &v8;\n
    if (*(&v7) > 0)\n
    {\n
        v10 = 0;\n
        do\n
        {\n
            v11 = v0;\n
            v0 = v11 + 1;\n
            proxy_argument::send(*(v11));\n
            v10 += 1;\n
        } while (v10 < *(&v7));\n
    }\n
    cgc_fflush(v9);\n
    return;\n
}\n
", "4217202:sub_405972": null, "4217216:_Z7MsgSendRK6objectiS1_i": "int MsgSend(unsigned int v1[2], unsigned int a0, unsigned int a1[2], unsigned int a2)\n
{\n
    void* v0;  // [bp-0x14]\n
    unsigned int v2[2];  // ecx\n
    unsigned int v3[2];  // eax\n
\n
    v2 = a1;\n
    v3 = v1;\n
    v0 = 0;\n
    return _MsgSend(v3[0], v3[1], a0, v2[0], v2[1], a2);\n
}\n
", "4217273:sub_4059b9": null, "4217280:_Z8MsgSend1RK6objecti14proxy_argument": "int MsgSend1(unsigned int v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v2;  // [bp+0xc]\n
    unsigned int v3[2];  // eax\n
\n
    v3 = v1;\n
    v0 = &v2;\n
    return _MsgSend(v3[0], v3[1], a0, 0, 0, 0, 1);\n
}\n
", "4217332:sub_4059f4": null, "4217344:_Z7MsgSendRK6objectiS1_i14proxy_argument": "int MsgSend(unsigned int v1[2], unsigned int a0, unsigned int a1[2], unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v2;  // [bp+0x14]\n
    unsigned int v3[2];  // ecx\n
    unsigned int v4[2];  // eax\n
\n
    v3 = a1;\n
    v4 = v1;\n
    v0 = &v2;\n
    return _MsgSend(v4[0], v4[1], a0, v3[0], v3[1], a2, 1);\n
}\n
", "4217403:sub_405a3b": null, "4217408:_Z8MsgSend1RK6objecti14proxy_argumentS2_": "int MsgSend1(unsigned int v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v2;  // [bp+0xc]\n
    char v3;  // [bp+0x18]\n
    unsigned int v4[2];  // eax\n
\n
    v4 = v1;\n
    v0 = &v3;\n
    return _MsgSend(v4[0], v4[1], a0, 0, 0, 0, 2, &v2);\n
}\n
", "4217468:sub_405a7c": null, "4217472:_Z7MsgSendRK6objectiS1_i14proxy_argumentS2_": "int MsgSend(unsigned int v2[2], unsigned int a0, unsigned int a1[2], unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x14]\n
    char v4;  // [bp+0x20]\n
    unsigned int v5;  // eax\n
    unsigned int v6[2];  // ecx\n
    unsigned int v7[2];  // eax\n
\n
    v1 = v5;\n
    v6 = a1;\n
    v7 = v2;\n
    v0 = &v4;\n
    return _MsgSend(v7[0], v7[1], a0, v6[0], v6[1], a2, 2, &v3);\n
}\n
", "4217539:sub_405ac3": null, "4217552:_ZN14proxy_argument4sendEP4FILE": null, "4217712:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:__libc_start_main": null, "5242888:cgc_receive": null, "5242892:_Znaj": null, "5242896:cgc_allocate": null, "5242900:cgc__terminate": null, "5242904:_ZdlPv": null, "5242908:cgc_deallocate": null, "5242912:_ZdaPv": null, "5242916:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}