{"4198400:_init": "extern struct_0 *g_9bf2bc;\n
\n
int _init()\n
{\n
    if (g_9bf2bc)\n
    {\n
        g_9bf2bc();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = 6021587 + v4;\n
    v6 = v5 + 692;\n
    v7 = v5 + 692;\n
    if (v7 == v6)\n
        return v5 + 692;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = 6021523 + v5;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 692;\n
    v9 = (v6 + 692 - (v6 + 692) >> 31) + (692 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_9bf2b8;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_9bf2b8)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (v4)\n
    {\n
        v5 = a0;\n
        if (v5)\n
        {\n
            tmp_2 = v5;\n
            if (!([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>)))\n
            {\n
                v7 = v5 * v4;\n
                v8 = cgc_malloc();\n
                if (v8)\n
                {\n
                    v0 = v7;\n
                    return cgc_memset(v8, 0);\n
                }\n
            }\n
        }\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4198993:sub_401251": null, "4199008:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4199027:sub_401273": null, "4199040:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199056:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199072:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199088:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4199102:sub_4012be": null, "4199104:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4199126:sub_4012d6": null, "4199136:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4199158:sub_4012f6": null, "4199168:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4199190:sub_401316": null, "4199200:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4199222:sub_401336": null, "4199232:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_5bb2c0;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return *((&(&_GLOBAL_OFFSET_TABLE_)[v0] - &g_5bb2c0));\n
}\n
", "4199257:sub_401359": null, "4199264:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4199289:sub_401379": null, "4199296:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_5bb240;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return *((&(&_GLOBAL_OFFSET_TABLE_)[v0] - &g_5bb240));\n
}\n
", "4199321:sub_401399": null, "4199328:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199336:sub_4013a8": null, "4199344:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4199363:sub_4013c3": null, "4199376:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4199395:sub_4013e3": null, "4199408:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v4;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        v3 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            v4 = cgc_coalesce();\n
            return v4;\n
        }\n
        v0 = *(v3);\n
        v4 = cgc_deallocate(v3);\n
        return v4;\n
    }\n
}\n
", "4199487:sub_40143f": null, "4199488:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_9bfe18;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 <= -262145)\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
    else if (v4 < 0)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            do\n
            {\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
                if (*(&(&cgc_free_lists)[4 * v10]))\n
                {\n
                    while (*(v11) < v9)\n
                    {\n
                        v11 = *((v11 + 8));\n
                        if (!v11)\n
                            goto LABEL_4014f2;\n
                    }\n
                }\n
LABEL_4014f2:\n
                v10 += 1;\n
            } while (v10 != 32);\n
            goto LABEL_401588;\n
        }\n
        v0 = &v2;\n
        if (cgc_allocate(0x40000, 0))\n
            return 0;\n
        v12 = *(&v2);\n
        if (!v12)\n
            return 0;\n
        v12[0] = 0x40000;\n
        v12[1] = 1;\n
        v12[3] = 0;\n
        v12[2] = 0;\n
        v12[5] = 0;\n
        v12[4] = 0;\n
        cgc_insert_into_flist();\n
        v11 = g_9bfe18;\n
LABEL_401588:\n
        cgc_remove_from_flist();\n
        v13 = *(v11) - v9;\n
        if (v13 < 49)\n
            return v11 + 24;\n
        v14 = v9 + v11;\n
        *((&v9->field_0 + v11)) = v13;\n
        *(&v9->padding_4[v11]) = 1;\n
        *((8 + &v9->field_0 + v11)) = 0;\n
        *(&v9->padding_c[v11]) = 0;\n
        *(v11) = v9;\n
        *((20 + &v9->field_0 + v11)) = v11;\n
        *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
        v15 = *((v11 + 16));\n
        if (v15)\n
            v15->field_14 = v14;\n
        *((v11 + 16)) = v14;\n
        cgc_insert_into_flist();\n
    }\n
}\n
", "4199914:sub_4015ea": null, "4199920:cgc_get_size_class": "extern unsigned int g_9bf2f8;\n
extern unsigned int g_9bf2fc;\n
extern unsigned int g_9bf300;\n
extern unsigned int g_9bf304;\n
extern unsigned int g_9bf308;\n
extern unsigned int g_9bf30c;\n
extern unsigned int g_9bf310;\n
extern unsigned int g_9bf314;\n
extern unsigned int g_9bf318;\n
extern unsigned int g_9bf31c;\n
extern unsigned int g_9bf320;\n
extern unsigned int g_9bf324;\n
extern unsigned int g_9bf328;\n
extern unsigned int g_9bf32c;\n
extern unsigned int g_9bf330;\n
extern unsigned int g_9bf334;\n
extern unsigned int g_9bf338;\n
extern unsigned int g_9bf33c;\n
extern unsigned int g_9bf340;\n
extern unsigned int g_9bf344;\n
extern unsigned int g_9bf348;\n
extern unsigned int g_9bf34c;\n
extern unsigned int g_9bf350;\n
extern unsigned int g_9bf354;\n
extern unsigned int g_9bf358;\n
extern unsigned int g_9bf35c;\n
extern unsigned int g_9bf360;\n
extern unsigned int g_9bf364;\n
extern unsigned int g_9bf368;\n
extern unsigned int g_9bf36c;\n
extern unsigned int g_9bf370;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_9bf2f8 < v1)\n
    {\n
        v2 = 2;\n
        if (g_9bf2fc < v1)\n
        {\n
            v2 = 3;\n
            if (g_9bf300 < v1)\n
            {\n
                v2 = 4;\n
                if (g_9bf304 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_9bf308 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_9bf30c < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_9bf310 < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_9bf314 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_9bf318 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_9bf31c < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_9bf320 < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_9bf324 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_9bf328 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_9bf32c < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_9bf330 < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_9bf334 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_9bf338 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_9bf33c < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_9bf340 < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_9bf344 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_9bf348 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_9bf34c < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_9bf350 < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_9bf354 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_9bf358 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_9bf35c < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_9bf360 < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_9bf364 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_9bf368 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_9bf36c < v1)\n
                                                                                                                            v2 = 31 + (g_9bf370 < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4200439:sub_4017f7": null, "4200448:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]);\n
    if (!v3)\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]) = v1;\n
        return v2;\n
    }\n
    v1[2] = v3;\n
    *((*(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]) + 12)) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]) = v1;\n
    v1[3] = 0;\n
    return v2;\n
}\n
", "4200537:sub_401859": null, "4200544:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ecx\n
    struct_1 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[2772 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4200639:sub_4018bf": null, "4200640:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!*((v1 + 20)))\n
        return v36;\n
    v12 = *((v1 + 16));\n
    if (!*((v2 + 4)))\n
    {\n
        if (!v12)\n
        {\n
            return v36;\n
        }\n
        else if (!*((v12 + 4)))\n
        {\n
            return v36;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(*(v12));\n
            v6 = *((v12 + 12));\n
            if (v6)\n
                *((v6 + 8)) = *((v12 + 8));\n
            v10 = *((v12 + 8));\n
            if (v10)\n
                *((v10 + 12)) = v6;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[693 + v4] == v12)\n
                (&_GLOBAL_OFFSET_TABLE_)[693 + v4] = v10;\n
            *((v12 + 8)) = 0;\n
            *((v12 + 12)) = 0;\n
            *((v12 + 4)) = 0;\n
            v14 = *(v1);\n
            v15 = cgc_get_size_class(v14);\n
            v17 = *((v1 + 12));\n
            if (v17)\n
                *((v17 + 8)) = *((v1 + 8));\n
            v22 = *((v1 + 8));\n
            if (v22)\n
                *((v22 + 12)) = v17;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[693 + v15] == v1)\n
                (&_GLOBAL_OFFSET_TABLE_)[693 + v15] = v22;\n
            *((v1 + 8)) = 0;\n
            *((v1 + 12)) = 0;\n
            *((v1 + 4)) = 0;\n
            v26 = v14 + *(*((v1 + 16)));\n
            *(v1) = v26;\n
            v27 = cgc_get_size_class(v26);\n
            *((v1 + 4)) = 1;\n
            v29 = (&_GLOBAL_OFFSET_TABLE_)[693 + v27];\n
            if (!v29)\n
            {\n
                (&_GLOBAL_OFFSET_TABLE_)[693 + v27] = v1;\n
            }\n
            else\n
            {\n
                *((v1 + 8)) = v29;\n
                *(((&_GLOBAL_OFFSET_TABLE_)[693 + v27] + 12)) = v1;\n
                (&_GLOBAL_OFFSET_TABLE_)[693 + v27] = v1;\n
                *((v1 + 12)) = 0;\n
            }\n
            v35 = *((v1 + 16));\n
            v36 = *((v35 + 20));\n
            if (v36)\n
                *((v36 + 16)) = *((v35 + 16));\n
            v37 = *((v35 + 16));\n
            if (!v37)\n
                return v36;\n
        }\n
        goto LABEL_401c20;\n
    }\n
    if (v12 && *((v12 + 4)))\n
    {\n
        v3 = cgc_get_size_class(*(v2));\n
        v5 = *((v2 + 12));\n
        if (v5)\n
            *((v5 + 8)) = *((v2 + 8));\n
        v8 = *((v2 + 8));\n
        if (v8)\n
            *((v8 + 12)) = v5;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[693 + v3] == v2)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[693 + v3] = v8;\n
            v12 = *((v1 + 16));\n
        }\n
        *((v2 + 8)) = 0;\n
        *((v2 + 12)) = 0;\n
        *((v2 + 4)) = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            *((v16 + 8)) = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            *((v20 + 12)) = v16;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[693 + v13] == v12)\n
            (&_GLOBAL_OFFSET_TABLE_)[693 + v13] = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = *(v1);\n
        v25 = cgc_get_size_class(v24);\n
        v28 = *((v1 + 12));\n
        if (v28)\n
            *((v28 + 8)) = *((v1 + 8));\n
        v33 = *((v1 + 8));\n
        if (v33)\n
            *((v33 + 12)) = v28;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[693 + v25] == v1)\n
            (&_GLOBAL_OFFSET_TABLE_)[693 + v25] = v33;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 4)) = 0;\n
        v38 = *((v1 + 20));\n
        v39 = v24 + *(*((v1 + 20)));\n
        *(*((v1 + 20))) = v39;\n
        v40 = v39 + *(*((v1 + 16)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 4)) = 1;\n
        v42 = (&_GLOBAL_OFFSET_TABLE_)[693 + v41];\n
        if (!v42)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[693 + v41] = v38;\n
        }\n
        else\n
        {\n
            *((v38 + 8)) = v42;\n
            *(((&_GLOBAL_OFFSET_TABLE_)[693 + v41] + 12)) = v38;\n
            (&_GLOBAL_OFFSET_TABLE_)[693 + v41] = v38;\n
            *((v38 + 12)) = 0;\n
        }\n
        v43 = *((v1 + 16));\n
        v44 = *((v43 + 20));\n
        if (v44)\n
            *((v44 + 16)) = *((v43 + 16));\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            *((v45 + 20)) = v44;\n
            goto LABEL_401c0c;\n
        }\n
    }\n
    v36 = *((v1 + 16));\n
    if (!v36)\n
        return *((v1 + 16));\n
    if (*((v36 + 4)))\n
        return *((v1 + 16));\n
    v7 = cgc_get_size_class(*(v2));\n
    v9 = *((v2 + 12));\n
    if (v9)\n
        *((v9 + 8)) = *((v2 + 8));\n
    v11 = *((v2 + 8));\n
    if (v11)\n
        *((v11 + 12)) = v9;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[693 + v7] == v2)\n
        (&_GLOBAL_OFFSET_TABLE_)[693 + v7] = v11;\n
    *((v2 + 8)) = 0;\n
    *((v2 + 12)) = 0;\n
    *((v2 + 4)) = 0;\n
    v18 = *(v1);\n
    v19 = cgc_get_size_class(v18);\n
    v21 = *((v1 + 12));\n
    if (v21)\n
        *((v21 + 8)) = *((v1 + 8));\n
    v23 = *((v1 + 8));\n
    if (v23)\n
        *((v23 + 12)) = v21;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[693 + v19] == v1)\n
        (&_GLOBAL_OFFSET_TABLE_)[693 + v19] = v23;\n
    *((v1 + 8)) = 0;\n
    *((v1 + 12)) = 0;\n
    *((v1 + 4)) = 0;\n
    v30 = *((v1 + 20));\n
    v31 = v18 + *(*((v1 + 20)));\n
    *(*((v1 + 20))) = v31;\n
    v32 = cgc_get_size_class(v31);\n
    *((v30 + 4)) = 1;\n
    v34 = (&_GLOBAL_OFFSET_TABLE_)[693 + v32];\n
    if (!v34)\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[693 + v32] = v30;\n
    }\n
    else\n
    {\n
        *((v30 + 8)) = v34;\n
        *(((&_GLOBAL_OFFSET_TABLE_)[693 + v32] + 12)) = v30;\n
        (&_GLOBAL_OFFSET_TABLE_)[693 + v32] = v30;\n
        *((v30 + 12)) = 0;\n
    }\n
LABEL_401c0c:\n
    v36 = *((v1 + 20));\n
    if (v36)\n
        *((v36 + 16)) = *((v1 + 16));\n
    v37 = *((v1 + 16));\n
    if (!v37)\n
        return *((v1 + 20));\n
LABEL_401c20:\n
    *((v37 + 20)) = v36;\n
    return v36;\n
}\n
", "4201556:sub_401c54": null, "4201568:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4201624:sub_401c98": null, "4201632:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4201693:sub_401cdd": null, "4201696:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4201826:sub_401d62": null, "4201840:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4202096:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4202206:sub_401ede": null, "4202208:cgc_output_number_printf": "int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    char v12;  // al\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    char v16;  // al\n
\n
    v6 = a3;\n
    v7 = a2;\n
    v8 = a1;\n
    v9 = a0;\n
    v14 = v5;\n
    if (v9 < v8)\n
    {\n
        v3 = v9;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v9) /m v8;\n
        v3 = tmp_9 >> 32;\n
        v14 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v9) /m v8, v8, v7 - 1, v6);\n
    }\n
    v12 = v6;\n
    if (v7 > 0 && !v2)\n
    {\n
        tmp_2 = v7;\n
        v13 = v7 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                if (!(v12 & 1))\n
                    v1 = 32;\n
                else\n
                    v1 = 48;\n
                v0 = &v4;\n
                cgc_transmit(v14, &v1, 1);\n
                v12 = v6;\n
                v14 = v5;\n
                tmp_6 = v13;\n
                v13 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
    }\n
    if (!(v12 & 2))\n
    {\n
        v15 = v3;\n
        v16 = v15 + 87;\n
    }\n
    else\n
    {\n
        v15 = v3;\n
        v16 = v15 + 55;\n
    }\n
    if (v15 < 10)\n
        v16 = v15 + 48;\n
    v1 = v16;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4202329:sub_401f59": null, "4202449:sub_401fd1": null, "4202464:cgc_fdprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fdprintf(unsigned int v10, struct struct_2 **a0)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x38]\n
    struct_1 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    struct struct_0 **v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x14]\n
    char v11;  // [bp+0xc]\n
    struct struct_2 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_1 *v14;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    struct struct_2 **v19;  // edx, Other Possible Types: unsigned int\n
    struct struct_2 **v20;  // eax, Other Possible Types: unsigned int\n
    char *v21;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    char *v24;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v20 = v12 + 1;\n
        a0 = v20;\n
        *(&v12) = *(v12);\n
        if (v6 == 37)\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            v19 = v20;\n
            while (true)\n
            {\n
                v20 = v19 + 1;\n
                a0 = v20;\n
                v16 = *(v19);\n
                v17 = v16;\n
                if (v17 - 49 >= 9)\n
                    break;\n
                v18 = cgc_strtol(v19, &a0);\n
                v19 = a0;\n
            }\n
            switch (v17)\n
            {\n
            case 88:\n
                v21 = v9 | 2;\n
                goto LABEL_402199;\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
                v6 = v16;\n
                break;\n
            case 99:\n
                v22 = v8;\n
                v8 = v22 + 1;\n
                v6 = *(v22);\n
                break;\n
            case 100:\n
                v23 = v8;\n
                v8 = v23 + 1;\n
                v24 = *(v23);\n
                if (v24 >= 0)\n
                {\n
                    v28 = v10;\n
                }\n
                else\n
                {\n
LABEL_4021d7:\n
                    v6 = 45;\n
                    v5 = &v7;\n
                    v28 = v10;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v24 = -(v24);\n
                }\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                v0 = v24;\n
                goto LABEL_402202;\n
            case 115:\n
                v25 = v8;\n
                v8 = v25 + 1;\n
                v9 = &*(v25)->field_0;\n
                v27 = v10;\n
                v14 = &v7;\n
                v15 = &v6;\n
                if (cgc_strlen())\n
                {\n
                    v29 = 0;\n
                    do\n
                    {\n
                        v6 = v9[v29];\n
                        v5 = v14;\n
                        v4 = v15;\n
                        cgc_transmit(v27, v15, 1);\n
                        v29 += 1;\n
                        v15 = &v6;\n
                        v14 = &v7;\n
                    } while (v29 < cgc_strlen(v9, v4, 1));\n
                }\n
                goto LABEL_402037;\n
            case 117:\n
                v26 = v8;\n
                v8 = v26 + 1;\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                goto LABEL_4021ab;\n
            case 120:\n
                v21 = v9;\n
LABEL_402199:\n
                v26 = v8;\n
                v8 = v26 + 4;\n
                v3 = v21;\n
                v2 = v18;\n
                v1 = 16;\n
LABEL_4021ab:\n
                v0 = *(v26);\n
                v28 = v10;\n
LABEL_402202:\n
                cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                v27 = v28;\n
                v14 = &v7;\n
                v15 = &v6;\n
                goto LABEL_402037;\n
            default:\n
                if (v17 == 37)\n
                    goto LABEL_0x4021b3;\n
                else\n
                    goto LABEL_0x4020a1;\n
            }\n
            v5 = &v7;\n
            v15 = &v6;\n
            cgc_transmit(v10, &v6, 1);\n
            v27 = v10;\n
            goto LABEL_4021d7;\n
        }\n
        v6 = v12;\n
        v5 = v14;\n
        cgc_transmit(v13, v15, 1);\n
        v27 = v13;\n
        v14 = &v7;\n
LABEL_402037:\n
        v13 = v27;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4202518:sub_402016": null, "4203044:sub_402224": null, "4203056:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    unsigned int v13;  // ecx\n
    char v14;  // dl\n
    char v15[2];  // ebx\n
    void* v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v19;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v16 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        if (v9 <= 0)\n
            goto LABEL_402300;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v16 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        if (v9 <= 0)\n
            goto LABEL_402300;\n
    }\n
    if (!v16)\n
    {\n
        v13 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            if ((v13 & 1))\n
            {\n
                *(v11)->field_0 = ((a4 & 1) * 16) | 32;\n
                *(v11) = &*(v11)->field_1;\n
                *(v12) = *(v12) + 1;\n
                v13 = v9 - 2;\n
            }\n
            if (v9 != 2)\n
            {\n
                v14 = ((a4 & 1) * 16) | 32;\n
                do\n
                {\n
                    *(v11)->field_0 = v14;\n
                    v15 = *(v11);\n
                    *(v11) = &v15[1];\n
                    *(v12) = *(v12) + 1;\n
                    v15[1] = v14;\n
                    *(v11) = &*(v11)->field_1;\n
                    *(v12) = *(v12) + 1;\n
                    tmp_20 = v13;\n
                    v13 -= 2;\n
                } while (tmp_20 != 2);\n
            }\n
        }\n
    }\n
LABEL_402300:\n
    v17 = v0;\n
    *(&*(v11)) = (!(v17 < 10) ? 48 : ((!(a4 & 2)) * 32 + 55)) + v17;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v19 = v16 + 1;\n
    return v19;\n
}\n
", "4203322:sub_40233a": null, "4203328:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_sprintf(char v8[2], struct_0 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_1 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_0 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_0 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_0 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_1 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_1 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_1 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_4024e7;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_402467:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_402467;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_4024e7:\n
                        v8 = v20 + 1;\n
                        goto LABEL_40238d;\n
                    }\n
                }\n
            }\n
LABEL_40238d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4203382:sub_402376": null, "4203781:sub_402505": null, "4203792:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40257a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40257a:\n
    return v5;\n
}\n
", "4203908:sub_402584": null, "4203920:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4025fa;\n
        }\n
    }\n
LABEL_4025fa:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4203959:sub_4025b7": null, "4204064:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4204121:sub_402659": null, "4204128:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4204170:sub_40268a": null, "4204176:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4204244:sub_4026d4": null, "4204256:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v5 = v4 + 1;\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 = v5;\n
        } while (v3);\n
    }\n
    v2[v5] = 0;\n
    return v0;\n
}\n
", "4204316:sub_40271c": null, "4204320:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4204396:sub_40276c": null, "4204400:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4204427:sub_40278b": null, "4204432:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4204514:sub_4027e2": null, "4204583:sub_402827": null, "4204592:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    unsigned int v6;  // edx\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v7 = v0;\n
    tmp_4 = v1;\n
    v6 = v1 - 1;\n
    if (tmp_4 != 1)\n
    {\n
        v3 = &v7[v6];\n
        v4 = &v2[v6];\n
        while (true)\n
        {\n
            v5 = *(v7);\n
            if (!v5)\n
                break;\n
            if (!*(v2))\n
                break;\n
            if (v5 != *(v2))\n
                break;\n
            v7 += 1;\n
            v2 += 1;\n
            tmp_8 = v6;\n
            v6 -= 1;\n
            if (tmp_8 == 1)\n
            {\n
                v7 = v3;\n
                v2 = v4;\n
                break;\n
            }\n
        }\n
    }\n
    v8 = *(v7) - *(v2);\n
    return v8;\n
}\n
", "4204672:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4204810:sub_40290a": null, "4204816:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_40297d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_40297d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4204935:sub_402987": null, "4204944:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4204987:sub_4029bb": null, "4205159:sub_402a67": null, "4205255:sub_402ac7": null, "4205264:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4205305:sub_402af9": null, "4205312:cgc_send_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    void* v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
\n
    v3 = a0;\n
    if (!v3)\n
        return -1;\n
    v5 = a1;\n
    if (!v5)\n
        return -1;\n
    v1 = 0;\n
    v7 = v3;\n
    do\n
    {\n
        v0 = &v1;\n
        if (cgc_transmit(v2, v3 - v7 + v5, v7))\n
        {\n
            v8 = -1;\n
            goto LABEL_402b74;\n
        }\n
        v6 = v1;\n
        if (!v6)\n
        {\n
            v8 = v3 - v7;\n
            goto LABEL_402b74;\n
        }\n
        v7 -= v6;\n
    } while (v3 != v6);\n
    v7 = 0;\n
LABEL_402b74:\n
    return v8;\n
}\n
", "4205438:sub_402b7e": null, "4205440:cgc_read_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    void* v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
\n
    v3 = a0;\n
    if (!v3)\n
        return -1;\n
    v5 = a1;\n
    if (!v5)\n
        return -1;\n
    v1 = 0;\n
    v7 = v3;\n
    do\n
    {\n
        v0 = &v1;\n
        if (cgc_receive(v2, v3 - v7 + v5, v7))\n
        {\n
            v8 = -1;\n
            goto LABEL_402bf4;\n
        }\n
        v6 = v1;\n
        if (!v6)\n
        {\n
            v8 = v3 - v7;\n
            goto LABEL_402bf4;\n
        }\n
        v7 -= v6;\n
    } while (v3 != v6);\n
    v7 = 0;\n
LABEL_402bf4:\n
    return v8;\n
}\n
", "4205566:sub_402bfe": null, "4205568:cgc_read_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_until(unsigned int v4, unsigned int a0, char a1, unsigned int a2)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    unsigned int v6;  // ecx\n
    char *v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // esi\n
    void* v12;  // esi, Other Possible Types: unsigned int\n
\n
    if (!a0)\n
        return -1;\n
    v6 = a2;\n
    if (!v6)\n
        return -1;\n
    v2 = a1;\n
    v12 = 0;\n
    while (true)\n
    {\n
LABEL_402c3b:\n
        v7 = v6 + v12;\n
        v3 = 0;\n
        v9 = 1;\n
        do\n
        {\n
            v0 = &v3;\n
            if (cgc_receive(v4, &v7[-1 * v9 + 1], v9))\n
                return -1;\n
            v8 = v3;\n
            if (!v8)\n
            {\n
                v1 = v12;\n
LABEL_402c93:\n
                v10 = v9 - 1;\n
                if (v10)\n
                {\n
                    tmp_2 = v10;\n
                    v11 = -(v10);\n
                    if (!(tmp_2) >= 0)\n
                    {\n
                        if (cgc_memchr(v7, v2, v11))\n
                        {\n
                            *(cgc_memchr(v7, v2, v11)) = 0;\n
                            return v1 + v11;\n
                        }\n
                        v12 = v1 + v11;\n
                        v6 = a2;\n
                        if (v12 < a0)\n
                            goto LABEL_402c3b;\n
                    }\n
                }\n
            }\n
            v9 -= v8;\n
        } while (v8 != 1);\n
        v1 = v12;\n
        v9 = 0;\n
        goto LABEL_402c93;\n
    }\n
}\n
", "4205697:sub_402c81": null, "4205809:sub_402cf1": null, "4205824:cgc_read_image": "int cgc_read_image(void* v8, unsigned int a0, unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_5;  // tmp #5\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int *v9;  // esi, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    void* v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // cc_dep1\n
    char *v19;  // esi\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // edi\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // cc_dep1\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // edx\n
    void* v30;  // ecx, Other Possible Types: unsigned int\n
\n
    v9 = a2;\n
    if (v9)\n
    {\n
        v10 = a0;\n
        *(v9) = 0;\n
        v11 = v10 * a1;\n
        v12 = cgc_calloc(v10 * a1, 1);\n
        if (!v12)\n
        {\n
            cgc_fdprintf(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\");\n
            cgc__terminate(1, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\");\n
            return cgc_make_2d_view();\n
        }\n
        if (!v11)\n
        {\n
            v30 = 0;\n
            goto LABEL_402ea6;\n
        }\n
        else\n
        {\n
            v0 = v10 + 1;\n
            v13 = 0;\n
            v30 = 0;\n
            v5 = v11;\n
            v2 = v12;\n
        }\n
        do\n
        {\n
            v1 = v30;\n
            v14 = v12 + v30;\n
            v3 = v13;\n
            if (!v13)\n
            {\n
                v15 = cgc_read_until(v8, v0, 10, v14);\n
                v17 = v15;\n
                v18 = v15;\n
                if (v15 < 0)\n
                    goto LABEL_402e9b;\n
                else\n
                    goto LABEL_402e29;\n
            }\n
            else\n
            {\n
                if (!v0)\n
                    goto LABEL_402e9b;\n
                v25 = v14 + v3;\n
                v16 = 0;\n
                v6 = v25;\n
            }\n
            while (true)\n
            {\n
                v7 = v16;\n
                v19 = v25 + v16;\n
                v4 = 0;\n
                v20 = 1;\n
                while (true)\n
                {\n
                    if (cgc_receive(v8, &v19[-1 * v20 + 1], v20))\n
                    {\n
LABEL_402e9b:\n
                        goto LABEL_402eb4;\n
                    }\n
                    v21 = v4;\n
                    if (!v21)\n
                        break;\n
                    v20 -= v21;\n
                    if (v21 == 1)\n
                    {\n
                        v20 = 0;\n
                        break;\n
                    }\n
                }\n
                v22 = v20 - 1;\n
                tmp_5 = v20 - 1;\n
                v23 = v7;\n
                if (!tmp_5)\n
                    goto LABEL_402e9b;\n
                tmp_2 = v22;\n
                v24 = -(v22);\n
                if (-(tmp_2) < 0)\n
                    goto LABEL_402e9b;\n
                if (cgc_memchr(v19, 10, v24))\n
                    break;\n
                v16 = v23 + v24;\n
                v25 = v6;\n
                goto LABEL_402e9b;\n
            }\n
            *(cgc_memchr(v19, 10, v24)) = 0;\n
            v17 = v23 + v24;\n
            v26 = v17;\n
LABEL_402e29:\n
            v27 = v17;\n
            v9 = a2;\n
            v10 = a0;\n
            v11 = v5;\n
            v12 = v2;\n
            if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
            {\n
LABEL_402eb4:\n
                cgc_free(v8);\n
                goto LABEL_402ec0;\n
            }\n
            v28 = v3;\n
            if (v28)\n
            {\n
                v29 = v27 + v28;\n
                v30 = v1;\n
                if (v29 != v0)\n
                {\n
                    v13 = v29 - 1;\n
                    if (!(v30 < v11))\n
                        break;\n
                    continue;\n
                }\n
            }\n
            v30 = v1;\n
            if (v27 == v0)\n
            {\n
                v30 += v10;\n
                v13 = 0;\n
                if (!(v30 < v11))\n
                    break;\n
                continue;\n
            }\n
            v13 = v27 - 1;\n
        } while (v30 < v11);\n
LABEL_402ea6:\n
        if (v30 == v11)\n
        {\n
            *(v9) = v12;\n
            return (0 CONCAT v11) /m v10;\n
        }\n
        goto LABEL_402eb4;\n
    }\n
LABEL_402ec0:\n
    return 0;\n
}\n
", "4206091:sub_402e0b": null, "4206320:cgc_make_2d_view": "int cgc_make_2d_view(unsigned int v4, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // esi\n
    unsigned int v7[7];  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edi\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v7 = cgc_calloc(1, 28);\n
    if (!v7)\n
    {\n
        v1 = 195;\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        v7[0] = v8;\n
        if (v8)\n
        {\n
            v9 = a3;\n
            v10 = a2;\n
            v11 = a1;\n
            v12 = a0;\n
            v7[3] = v12;\n
            v7[4] = v11;\n
            v7[5] = v10;\n
            v7[6] = v9;\n
            v7[1] = v12 - v10;\n
            v7[2] = v11 - v9;\n
            return v7;\n
        }\n
        v1 = 198;\n
    }\n
    v0 = \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\";\n
    cgc_fdprintf(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\");\n
    cgc__terminate(1, \"DEBUG %s:%d:\\tcalloc() failed\\n
\");\n
    return cgc_index_through_view();\n
}\n
", "4206464:cgc_index_through_view": "int cgc_index_through_view(unsigned int v0, unsigned int a0, unsigned int a1[7], char *a2)\n
{\n
    unsigned int v1[7];  // edx\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    v3 = -1;\n
    if (v1[1] > v2)\n
    {\n
        v4 = a0;\n
        if (v1[2] > v4)\n
        {\n
            v5 = v2 + v1[5];\n
            v6 = v1[3];\n
            if (v5 < v6)\n
            {\n
                v7 = v4 + v1[6];\n
                if (v7 < v1[4])\n
                {\n
                    *(a2) = *((v1[0] + v6 * v7 + v5));\n
                    v3 = 0;\n
                }\n
            }\n
        }\n
    }\n
    return v3;\n
}\n
", "4206532:sub_402fc4": null, "4206544:cgc_parse_dimensions": "int cgc_parse_dimensions(char *v1, unsigned int a0, unsigned int *a1, unsigned int *a2)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    char *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v8;  // eax\n
    char *v9;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
\n
    v2 = v1;\n
    v3 = a0;\n
    v0 = 0;\n
    v4 = &v2[v3];\n
    if (v3 > 0)\n
    {\n
        v5 = v2;\n
    }\n
    else\n
    {\n
LABEL_403030:\n
        if (!cgc_isdigit(*(v2)))\n
            return -1;\n
        v8 = cgc_strtol(v2, &v0, 10);\n
        *(a1) = v8;\n
        if (v8)\n
        {\n
            v9 = v0;\n
            if (v9 < v4)\n
            {\n
                while (true)\n
                {\n
                    v10 = cgc_isspace(*(v9));\n
                    v9 = v0;\n
                    if (!v10)\n
                        break;\n
                    v9 += 1;\n
                    v0 = v9;\n
                    if (v9 >= v4)\n
                        break;\n
                }\n
            }\n
            if (v9 != v4)\n
            {\n
                v11 = cgc_strtol(v9, &v0, 10);\n
                *(a2) = v11;\n
                if (v11)\n
                    return -(v0 != v4);\n
                return -1;\n
            }\n
        }\n
LABEL_4030d6:\n
        return -1;\n
    }\n
    while (true)\n
    {\n
        v6 = *(v5);\n
        if (!v6)\n
            goto LABEL_403030;\n
        if (!cgc_isspace(v6))\n
            goto LABEL_4030d6;\n
        v5 += 1;\n
        goto LABEL_403030;\n
    }\n
}\n
", "4206590:sub_402ffe": null, "4206821:sub_4030e5": null, "4206832:cgc_match_percent": "int cgc_match_percent(unsigned int v12[7], unsigned int a0[2])\n
{\n
    char v0;  // [bp-0x35]\n
    void* v1;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    void* v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // esi\n
    unsigned int v16[2];  // edx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // edx\n
    unsigned int v19[7];  // eax\n
    unsigned int v20;  // edi\n
    unsigned int v21[5];  // esi\n
    unsigned int v22[7];  // esi, Other Possible Types: unsigned int\n
    unsigned int v23;  // ecx\n
    char *v24;  // edx, Other Possible Types: unsigned int\n
\n
    v11 = v13;\n
    v10 = v14;\n
    v9 = v15;\n
    v16 = a0;\n
    v17 = v16[0];\n
    v3 = v16[1];\n
    if (!v3)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v22 = v12;\n
        v24 = &v16[1] + 1;\n
        v1 = 0;\n
        v2 = 0;\n
        do\n
        {\n
            v4 = v24;\n
            if (v17)\n
            {\n
                v23 = 0;\n
                do\n
                {\n
                    if (*((v22 + 4)) > v23 && *((v22 + 8)) > v1)\n
                    {\n
                        v18 = *((v22 + 12));\n
                        v19 = v22;\n
                        v20 = *((v22 + 20));\n
                        if (v23 + v20 < v18)\n
                        {\n
                            v21 = *((v22 + 24)) + v1;\n
                            if (v21 < v21[4])\n
                            {\n
                                v0 = *((v23 + v20 + v21 * v18 + v21[0]));\n
                                v2 += v0 == v4[v23];\n
                            }\n
                        }\n
                        v21 = v19;\n
                    }\n
                    v23 += 1;\n
                } while (v17 != v23);\n
            }\n
            v24 = &v4[v17];\n
            v1 += 1;\n
        } while (v1 != v3);\n
    }\n
    v5 = v2;\n
    v6 = 0;\n
    if ([D] GetI(136:I8x8)[t16,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v7 = v3 * v17;\n
    v8 = 0;\n
    if ([D] GetI(136:I8x8)[t16,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t13,1] = t14\n
    [D] PutI(136:I8x8)[t13,1] = 0x01\n
    [D] PutI(136:I8x8)[t13,0] = 0x00\n
    return v9;\n
}\n
", "4206885:sub_403125": null, "4206934:sub_403156": null, "4207093:sub_4031f5": null, "4207104:cgc_find_matching_object": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_9bf381;\n
\n
int cgc_find_matching_object(unsigned int v14[7], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x4c], Other Possible Types: char\n
    void* v1;  // [bp-0x48], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x44], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x3c]\n
    char *v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int *v8;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    void* v11;  // [bp-0x20]\n
    unsigned int v12;  // [bp-0x1c]\n
    void* v13;  // [bp-0x18]\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    void* v20;  // esi, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // edi\n
    unsigned int v25;  // ebp\n
    unsigned int v26;  // eax\n
    unsigned int v27[7];  // ecx\n
    unsigned int v28;  // edx\n
    unsigned int v29[7];  // edx, Other Possible Types: unsigned int\n
    void* v30;  // edi, Other Possible Types: unsigned int\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // ebx\n
    unsigned int v33;  // eax\n
    unsigned int v34[7];  // ebp\n
    unsigned int v35;  // esi\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // edx\n
    char v38;  // cl\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // eax\n
\n
    v15 = &_GLOBAL_OFFSET_TABLE_;\n
    v17 = v16 - 1;\n
    if ([D] GetI(136:I8x8)[t17,0])\n
    {\n
        v18 = v17 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v18 = v17 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v29 = v14;\n
    v6 = v29[2];\n
    v19 = v18 - 1;\n
    [D] PutI(72:F64x8)[t20,0] = t23\n
    [D] PutI(136:I8x8)[t20,0] = 0x01\n
    v20 = 0;\n
    v3 = \"000000000000000000000011110000000100011110010001001000100011101000000000000000000000\";\n
    v45 = v19 - 1;\n
    [D] PutI(72:F64x8)[t37,0] = t40\n
    [D] PutI(136:I8x8)[t37,0] = 0x01\n
    v1 = 0;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v21 = v20 * 96;\n
        v22 = *((v15 + v21 + 180));\n
        if (v22 <= v6)\n
        {\n
            v23 = v21 + v15;\n
            v25 = *(v8);\n
            v26 = v15;\n
            v27 = v29;\n
            v28 = *((v29 + 4));\n
            if (*(v8) > *(&v0))\n
            {\n
                v29 = v27;\n
                v15 = v26;\n
            }\n
            else\n
            {\n
                v0 = v28;\n
                v9 = v20;\n
                v8 = v23 + 176;\n
                v4 = v22;\n
                if (!v22)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v30 = 0;\n
                    v5 = v3;\n
                    v2 = 0;\n
                    v31 = v0;\n
                    do\n
                    {\n
                        if (v25)\n
                        {\n
                            v32 = 0;\n
                            do\n
                            {\n
                                if (v31 > v32 && v6 > v30)\n
                                {\n
                                    v33 = v25;\n
                                    v34 = v14;\n
                                    v35 = v14[3];\n
                                    v36 = v14[5];\n
                                    if (v32 + v36 < v35)\n
                                    {\n
                                        v37 = v34[6] + v30;\n
                                        if (v37 < v34[4])\n
                                        {\n
                                            v38 = *((v32 + v36 + v37 * v35 + v34[0]));\n
                                            v2 += v38 == v5[v32];\n
                                        }\n
                                    }\n
                                    v25 = v33;\n
                                    v31 = v0;\n
                                }\n
                                v32 += 1;\n
                            } while (v25 != v32);\n
                        }\n
                        v30 += 1;\n
                        v5 = &v5[v25];\n
                    } while (v30 != v4);\n
                }\n
                v10 = v2;\n
                v11 = 0;\n
                v39 = v45 - 1;\n
                if ([D] GetI(136:I8x8)[t17,0])\n
                {\n
                    v40 = v39 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v40 = v39 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v12 = v25 * v4;\n
                v13 = 0;\n
                v41 = v40 - 1;\n
                if ([D] GetI(136:I8x8)[t17,0])\n
                {\n
                    v42 = v41 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v42 = v41 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t19,1] = t20\n
                [D] PutI(136:I8x8)[t19,1] = 0x01\n
                [D] PutI(136:I8x8)[t19,0] = 0x00\n
                v43 = v42 + 1;\n
                [D] PutI(72:F64x8)[t65,0] = t69\n
                [D] PutI(136:I8x8)[t65,0] = 0x01\n
                [D] PutI(72:F64x8)[t65,1] = t62\n
                [D] PutI(136:I8x8)[t65,1] = 0x01\n
                [D] PutI(72:F64x8)[t107,0] = t111\n
                [D] PutI(136:I8x8)[t107,0] = 0x01\n
                [D] PutI(72:F64x8)[t107,2] = t104\n
                [D] PutI(136:I8x8)[t107,2] = 0x01\n
                [D] PutI(72:F64x8)[t122,0] = t123\n
                [D] PutI(136:I8x8)[t122,0] = 0x01\n
                [D] PutI(72:F64x8)[t145,1] = t146\n
                [D] PutI(136:I8x8)[t145,1] = 0x01\n
                [D] PutI(136:I8x8)[t145,0] = 0x00\n
                v45 = v43 + 1;\n
                v46 = ((!((CmpF(([D] GetI(136:I8x8)[t85,0] ? [D] GetI(72:F64x8)[t85,0] : nan), ([D] GetI(136:I8x8)[t85,1] ? [D] GetI(72:F64x8)[t85,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t85,0] ? [D] GetI(72:F64x8)[t85,0] : nan), ([D] GetI(136:I8x8)[t85,1] ? [D] GetI(72:F64x8)[t85,1] : nan)) & 69) >> 6) & 1) & !(CmpF(([D] GetI(136:I8x8)[t44,0] ? [D] GetI(72:F64x8)[t44,0] : nan), ([D] GetI(136:I8x8)[t44,2] ? [D] GetI(72:F64x8)[t44,2] : nan)) & 69 & 1)) ? v8 : v1);\n
                v1 = v46;\n
                v15 = v7;\n
                v29 = v14;\n
                v20 = v9;\n
                [D] PutI(72:F64x8)[t184,0] = t188\n
                [D] PutI(136:I8x8)[t184,0] = 0x01\n
                [D] PutI(72:F64x8)[t184,1] = t181\n
                [D] PutI(136:I8x8)[t184,1] = 0x01\n
            }\n
        }\n
        v20 += 1;\n
        v3 += 96;\n
    } while (v20 != 27);\n
    [D] PutI(72:F64x8)[t19,0] = t20\n
    [D] PutI(136:I8x8)[t19,0] = 0x01\n
    [D] PutI(136:I8x8)[t19,0] = 0x00\n
    [D] PutI(136:I8x8)[t36,0] = 0x00\n
    [D] PutI(72:F64x8)[t50,0] = t51\n
    [D] PutI(136:I8x8)[t50,0] = 0x01\n
    [D] PutI(136:I8x8)[t50,0] = 0x00\n
    return ((CmpF(([D] GetI(136:I8x8)[t36,0] ? [D] GetI(72:F64x8)[t36,0] : nan), ([D] GetI(136:I8x8)[t36,1] ? [D] GetI(72:F64x8)[t36,1] : nan)) & 69 & 1) == 1 ? 0 : v1);\n
}\n
", "4207172:sub_403244": null, "4207291:sub_4032bb": null, "4207317:sub_4032d5": null, "4207537:sub_4033b1": null, "4207552:cgc_perform_ocr": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
} struct_1;\n
\n
int cgc_perform_ocr(unsigned int v8, void* **a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x54]\n
    char v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v6;  // [bp-0x4]\n
    unsigned int v7;  // [bp+0x0]\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    void* v12;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v13;  // edi, Other Possible Types: unsigned int\n
    unsigned int v14[7];  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    struct_1 *v22;  // eax\n
    void* v23;  // ebp, Other Possible Types: unsigned int\n
    char *v24;  // eax\n
\n
    v10 = v9 - 1;\n
    if ([D] GetI(136:I8x8)[t7,0])\n
    {\n
        v11 = v10 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v11 = v10 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t7,0])\n
    {\n
        v2 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
        v21 = v11 + 1;\n
    }\n
    else\n
    {\n
        v2 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
        v21 = v11 + 1;\n
    }\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v23 = 0;\n
        v12 = 0;\n
        v13 = 0;\n
        while (true)\n
        {\n
            v14 = cgc_calloc(1, 28);\n
            if (!v14)\n
            {\n
                v1 = 195;\n
                goto LABEL_4034ff;\n
            }\n
            else\n
            {\n
                v15 = v8;\n
                v14[0] = v15;\n
                if (v15)\n
                {\n
                    v16 = a0;\n
                    v14[3] = v16;\n
                    v17 = a1;\n
                    v14[4] = v17;\n
                    v14[5] = v23;\n
                    v14[6] = v12;\n
                    v18 = v16 - v23;\n
                    v14[1] = v18;\n
                    v14[2] = v17 - v12;\n
                    v19 = v21 - 1;\n
                    if (![D] GetI(136:I8x8)[t7,0])\n
                    {\n
                        v20 = v19 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v19 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    if ([D] GetI(136:I8x8)[t7,0])\n
                    {\n
                        v0 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v21 = v20 + 1;\n
                    }\n
                    else\n
                    {\n
                        v0 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v21 = v20 + 1;\n
                    }\n
                    v22 = cgc_find_matching_object(v14, v0);\n
                    if (!v22)\n
                    {\n
                        v23 += 1;\n
                    }\n
                    else\n
                    {\n
                        if (!(v13 <= 63))\n
                            goto LABEL_4034a7;\n
                        (&v3)[v13] = v22->field_8;\n
                        v13 += 1;\n
                        v23 += v22->field_0;\n
                        if (v23 >= a0)\n
                        {\n
                            v12 += v22->field_4;\n
                            v23 = 0;\n
                            if (!(v12 < a1))\n
                                goto LABEL_4034a7;\n
                        }\n
                    }\n
                    if (v23 >= a0)\n
                    {\n
LABEL_4034a3:\n
                        if (!v13)\n
                            return 0;\n
LABEL_4034a7:\n
                        v24 = cgc_calloc(v13, 1);\n
                        if (v24)\n
                        {\n
                            cgc_strncpy(v24, &v3, v13);\n
                            break;\n
                        }\n
                    }\n
                    else if (!(v12 < a1))\n
                    {\n
                        goto LABEL_4034a3;\n
                    }\n
                }\n
                else\n
                {\n
                    v1 = 198;\n
                    while (true)\n
                    {\n
                        v6 = 357;\n
LABEL_4034ff:\n
                        v6 = \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\";\n
                        v5 = \"DEBUG %s:%d:\\tcalloc() failed\\n
\";\n
                        v4 = 2;\n
                        cgc_fdprintf(v8, a0);\n
                        v7 = 1;\n
                        cgc__terminate(v8, a0);\n
                    }\n
                }\n
            }\n
        }\n
        return v24;\n
    }\n
}\n
", "4207748:sub_403484": null, "4207909:sub_403525": null, "4207920:cgc_check_junk": "extern struct_0 *junk;\n
\n
int cgc_check_junk()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_5;  // tmp #5\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    void* v3;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    char *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v0 = cgc_strlen(junk);\n
    v2 = 0;\n
    v3 = 0;\n
    do\n
    {\n
        v6 = v2;\n
        v7 = v0;\n
        if (v7)\n
        {\n
            do\n
            {\n
                if (v6 >= 257)\n
                {\n
                    v4 = junk[0x100 + v6].field_0 << (v6 & 31) ^ v3;\n
                    if (v6 >= 2049)\n
                    {\n
                        v5 = junk[v6].field_0;\n
                        v4 ^= junk[0x800 + v6].field_0 | v5;\n
                        if (v6 >= 30001)\n
                            v4 ^= junk[30000 + v6].field_0 | v5;\n
                    }\n
                    v3 = v4;\n
                }\n
                v6 += 1;\n
                tmp_5 = v7;\n
                v7 -= 1;\n
            } while (tmp_5 != 1);\n
        }\n
        v2 += 1;\n
    } while (v2 != 16);\n
    return v3 == 1768831;\n
}\n
", "4207969:sub_403561": null, "4208006:sub_403586": null, "4208114:sub_4035f2": null, "4208128:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *junk;\n
\n
int main()\n
{\n
    struct_0 *v0;  // [bp-0x50], Other Possible Types: unsigned int\n
    int tmp_5;  // tmp #5\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // [bp-0x44]\n
    void* v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    char v4;  // [bp-0x30]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    struct_0 *v9;  // [bp+0x0]\n
    char *v10;  // [bp+0x4], Other Possible Types: unsigned int\n
    struct_0 *v11;  // [bp+0x8], Other Possible Types: char\n
    unsigned int *v12;  // [bp+0xc], Other Possible Types: unsigned int\n
    unsigned int *v13;  // [bp+0x10]\n
    char v14;  // [bp+0x14]\n
    char v15;  // [bp+0x18]\n
    char v16;  // [bp+0x1c]\n
    char v17;  // [bp+0x28]\n
    unsigned int v21;  // ebx\n
    struct_0 *v22;  // edi, Other Possible Types: unsigned int, char *\n
    struct_0 *v23;  // esi\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // ecx\n
    void* v26;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v27;  // ebx\n
    void* v28;  // edx, Other Possible Types: unsigned int\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // ebx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ebx\n
    void* v35;  // ebp, Other Possible Types: unsigned int, struct_0 *\n
    struct_0 *v36;  // esi, Other Possible Types: unsigned int, char *\n
    struct_0 *v37;  // ebx\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // eax\n
    struct_0 *v41;  // ebx\n
    struct_0 *v42;  // ebx\n
    unsigned int v43;  // eax\n
\n
    v7 = v21;\n
    v6 = v22;\n
    v5 = v23;\n
    v24 = cgc_strlen(junk);\n
    v28 = 0;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v36 = junk;\n
    v26 = 0;\n
    do\n
    {\n
        if (v24)\n
        {\n
            v35 = 0;\n
            v3 = v28;\n
            do\n
            {\n
                v25 = v28 + v35;\n
                if (v25 >= 257)\n
                {\n
                    v22 = v36[0x100 + v35] << (v25 & 31) ^ v26;\n
                    if (v25 < 2049)\n
                    {\n
                        v26 = v22;\n
                    }\n
                    else\n
                    {\n
                        v27 = v36[v35];\n
                        v22 ^= v36[0x800 + v35] | v27;\n
                        if (v25 >= 30001)\n
                            v22 ^= v36[30000 + v35] | v27;\n
                        v26 = v22;\n
                        v28 = v3;\n
                    }\n
                }\n
                v35 += 1;\n
            } while (v24 != v35);\n
        }\n
        v28 += 1;\n
        v36 += 1;\n
    } while (v28 != 16);\n
    if (v26 != 1768831)\n
    {\n
        v29 = v1;\n
        v38 = v29 - 8769;\n
        v39 = v29 - 8711;\n
        v0 = 392;\n
    }\n
    else\n
    {\n
        cgc_fdprintf(1, v1 - 8688);\n
        cgc_memset(&v4, 0, 32);\n
        v35 = 0;\n
        while (true)\n
        {\n
            v3 = v35;\n
            v22 = &v4;\n
            v2 = 0;\n
            v35 = 1;\n
            v36 = &v2;\n
            v0 = &v2;\n
            if (cgc_receive(0, &v22[-1 * v35 + 1], v35))\n
            {\n
LABEL_403762:\n
                v31 = v1;\n
                v38 = v31 - 8769;\n
                v39 = v31 - 8612;\n
                v0 = 402;\n
                break;\n
            }\n
            v30 = v2;\n
            if (v30)\n
            {\n
                v35 -= v30;\n
                if (!(1 == v30))\n
                    continue;\n
                v35 = 0;\n
            }\n
            v36 = v35 - 1;\n
            tmp_5 = v35 - 1;\n
            v35 = v3;\n
            if (!tmp_5)\n
                goto LABEL_403762;\n
            tmp_2 = v36;\n
            v36 = -(v36);\n
            if (-(tmp_2) < 0)\n
                goto LABEL_403762;\n
            if (!cgc_memchr(v22, 10, v36))\n
            {\n
                v35 += v36;\n
                if (!(v35 < 32))\n
                    goto LABEL_403762;\n
            }\n
            else\n
            {\n
                *(cgc_memchr(v22, 10, v36)) = 0;\n
                tmp_6 = v35;\n
                v35 += v36;\n
                if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t6, esi<4>, 0x0<32>))\n
                    goto LABEL_403762;\n
                v32 = v1;\n
                v35 = &v4;\n
                v36 = cgc_strlen(&v4);\n
                v22 = v32 - 8474;\n
                if (v36 == cgc_strlen(v22))\n
                {\n
                    v36 = &v4;\n
                    if (!cgc_strncmp(&v4, v22, cgc_strlen(&v4)))\n
                    {\n
                        cgc_memset(&v4, 0, 32);\n
                        v35 = 0;\n
                        while (true)\n
                        {\n
                            v3 = v35;\n
                            v22 = &v4;\n
                            v2 = 0;\n
                            v35 = 1;\n
                            v36 = &v2;\n
                            v0 = &v2;\n
                            if (!(!cgc_receive(0, &v22[-1 * v35 + 1], v35)))\n
                                goto LABEL_403872;\n
                            v33 = v2;\n
                            if (v33)\n
                            {\n
                                v35 -= v33;\n
                                if (!(1 == v33))\n
                                    continue;\n
                                v35 = 0;\n
                            }\n
                            v36 = v35 - 1;\n
                            tmp_5 = v35 - 1;\n
                            v35 = v3;\n
                            if (!tmp_5)\n
                                goto LABEL_403872;\n
                            tmp_2 = v36;\n
                            v36 = -(v36);\n
                            if (-(tmp_2) < 0)\n
                                goto LABEL_403872;\n
                            if (!(!cgc_memchr(v22, 10, v36)))\n
                                goto LABEL_40389a;\n
                            v35 += v36;\n
                            if (v35 >= 32)\n
                                goto LABEL_403872;\n
                        }\n
                    }\n
                }\n
                v38 = v32 - 8769;\n
                v39 = v32 - 8589;\n
                v0 = 407;\n
                break;\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                v8 = v38;\n
                v7 = v39;\n
                v6 = 2;\n
                cgc_fdprintf(v10, *(&v11));\n
                v9 = 1;\n
                cgc__terminate(v10, *(&v11));\n
LABEL_40389a:\n
                v7 = v36;\n
                v6 = 10;\n
                v5 = v22;\n
                *(cgc_memchr(v10, *(&v11), v12)) = 0;\n
                tmp_6 = v35;\n
                v35 += v36;\n
                if (!([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t6, esi<4>, 0x0<32>)))\n
                    break;\n
LABEL_403872:\n
                v34 = *(&v11);\n
                v38 = v34 - 8769;\n
                v39 = v34 - 8612;\n
                v8 = 413;\n
            }\n
            v37 = *(&v11);\n
            v36 = &v16;\n
            v5 = &v16;\n
            v12 = &v17;\n
            v11 = &v16;\n
            v10 = cgc_strlen(1);\n
            v9 = &v16;\n
            if (!cgc_parse_dimensions(v10, v11, v12, v13))\n
                break;\n
            v38 = v37 + 8769;\n
            v39 = v37 + 8565;\n
            v8 = 419;\n
        }\n
        v36 = v12;\n
        v22 = *(&v15);\n
        v8 = &v14;\n
        v7 = v22;\n
        v6 = v36;\n
        v5 = 0;\n
        if (cgc_read_image(v10, v11, v12, v13) == v22)\n
        {\n
            v40 = *(&v14);\n
            if (v6)\n
                break;\n
        }\n
        v41 = v11;\n
        v38 = v41 + 8769;\n
        v39 = v41 + 8536;\n
        v8 = 426;\n
    }\n
    v42 = v11;\n
    strncpy(&v8, \"fff?\", 4);\n
    v8 = v22;\n
    v7 = v36;\n
    v6 = eax<4>;\n
    v43 = cgc_perform_ocr(v10, v11, v12, v13);\n
    if (v43)\n
    {\n
        v7 = v43;\n
        v6 = v42 + 8512;\n
    }\n
    else\n
    {\n
        v6 = v42 + 8500;\n
    }\n
    v8 = 1;\n
    cgc_fdprintf(v10, v11);\n
    return 0;\n
}\n
", "4208180:sub_403634": null, "4208215:sub_403657": null, "4209076:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "10485760:__libc_start_main": null, "10485764:cgc__terminate": null, "10485768:cgc_transmit": null, "10485772:cgc_allocate": null, "10485776:cgc_deallocate": null, "10485780:cgc_receive": null, "11538508:UnresolvableJumpTarget": null, "11538512:UnresolvableCallTarget": null}