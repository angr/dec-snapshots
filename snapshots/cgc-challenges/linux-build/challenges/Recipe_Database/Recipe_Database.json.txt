{"4202496:_init": "extern struct_0 *g_409df8;\n
\n
int _init()\n
{\n
    if (g_409df8)\n
    {\n
        g_409df8();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202688:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 31951;\n
    v6 = v5 + 15;\n
    v7 = v5 + 15;\n
    if (v7 == v6)\n
        return v5 + 15;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 31887;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 15;\n
    v9 = (v6 + 15 - (v6 + 15) >> 31) + (15 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409df4;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409df4)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4203132:sub_40227c": null, "4203136:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[84];\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_54->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_54 == v9)\n
        {\n
            v1->field_54 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_54 == v9)\n
    {\n
        v1->field_54 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[84];\n
    unsigned int field_54;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_54;\n
    v7->field_54 = v3;\n
    return v3;\n
}\n
", "4204024:sub_4025f8": null, "4204032:cgc_free": "typedef struct struct_0 {\n
    char padding_0[84];\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 *[2], struct_0 *, unsigned int, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_54 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_54 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_54;\n
    v2[1] = 0;\n
    if (v9->field_54)\n
    {\n
        v12 = v1;\n
        *((&v12->field_54->field_0 + (v12->field_54->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_54 = v7;\n
    return v1;\n
}\n
", "4204496:cgc_floor": "typedef struct struct_0 {\n
    char padding_0[84];\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 *[2], struct_0 *, unsigned int, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_54 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_54 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_54;\n
    v2[1] = 0;\n
    if (v9->field_54)\n
    {\n
        v12 = v1;\n
        *((&v12->field_54->field_0 + (v12->field_54->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_54 = v7;\n
    return v1;\n
}\n
", "4204660:sub_402874": null, "4204672:cgc_round_away_from_zero": null, "4204826:sub_40291a": null, "4204832:cgc_round": null, "4204976:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4205068:sub_402a0c": null, "4205072:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_uint_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_uint_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = ((0 CONCAT v3) /m 10 >> 32) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v5 = v0;\n
        v0 = v5 - 1;\n
        if (v5 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205475:sub_402ba3": null, "4205488:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205681:sub_402c71": null, "4205696:cgc_float_to_str": null, "4206559:sub_402fdf": null, "4206560:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v29, struct struct_1 **a0)\n
{\n
    struct_0 *v0;  // [bp-0xc4]\n
    unsigned int v1;  // [bp-0xc0]\n
    char v2;  // [bp-0xb1]\n
    unsigned int v3;  // [bp-0xb0]\n
    unsigned int v4;  // [bp-0xac]\n
    unsigned int v5;  // [bp-0xa8]\n
    unsigned int v6;  // [bp-0xa4]\n
    unsigned int v7;  // [bp-0xa0]\n
    unsigned int v8;  // [bp-0x9c]\n
    unsigned int v9;  // [bp-0x98]\n
    char *v10;  // [bp-0x94], Other Possible Types: unsigned int\n
    struct_0 *v11;  // [bp-0x90], Other Possible Types: unsigned int\n
    unsigned long v12;  // [bp-0x8c]\n
    struct_0 *v13;  // [bp-0x84], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x80]\n
    struct_0 *v15;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v16;  // [bp-0x78]\n
    struct_0 *v17;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v18;  // [bp-0x70]\n
    char v19;  // [bp-0x69]\n
    void* v20;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v22;  // [bp-0x60]\n
    void* v23;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v24;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v25;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v26;  // [bp-0x50]\n
    void* v27;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0xc]\n
    struct struct_1 **v30;  // eax\n
    struct struct_1 **v31;  // eax\n
    struct struct_1 **v32;  // eax\n
    struct struct_1 **v33;  // eax\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    struct struct_1 **v39;  // eax\n
\n
    v8 = &_GLOBAL_OFFSET_TABLE_;\n
    v27 = 0;\n
    if (!v29)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (*(v29))\n
    {\n
        if (*(v29) != 64)\n
        {\n
            cgc_putc(*(v29));\n
            v29 += 1;\n
            v27 += 1;\n
LABEL_403a1a:\n
        }\n
        else\n
        {\n
            v29 += 1;\n
            v25 = 0;\n
            v24 = 0;\n
            v23 = 0;\n
            v22 = 0;\n
            v20 = 0;\n
            if (*(v29) == 64)\n
            {\n
                cgc_putc(64);\n
                v29 += 1;\n
                v27 += 1;\n
                continue;\n
            }\n
            if (*(v29) == 45)\n
            {\n
                v22 = 1;\n
                v29 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v29) == 48)\n
                {\n
                    v23 = 1;\n
                    v29 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v25 = cgc_atoi(); cgc_isdigit(); v29 += 1);\n
                }\n
            }\n
            if (*(v29) == 46)\n
            {\n
                v29 += 1;\n
                for (v24 = cgc_atoi(); cgc_isdigit(); v29 += 1);\n
            }\n
            if (*(v29) == 99)\n
            {\n
                v30 = a0;\n
                a0 = v30 + 1;\n
                v19 = *(v30);\n
                v20 = v25 - 1;\n
                if (!v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        if (!v23)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v27 += 1;\n
                    }\n
                }\n
                cgc_putc(v19);\n
                v27 += 1;\n
                if (v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v27 += 1;\n
                    }\n
                }\n
                v29 += 1;\n
                continue;\n
            }\n
            if (*(v29) == 100)\n
            {\n
                v31 = a0;\n
                a0 = v31 + 1;\n
                v18 = &*(v31)->field_0;\n
                cgc_int_to_str(v18, &v26);\n
                v7 = v25;\n
                v20 = v7 - cgc_strlen(&v26);\n
                if (!v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        if (v23)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v27 += 1;\n
                    }\n
                }\n
                for (v17 = &v26; *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v27 += 1;\n
                }\n
                if (v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v27 += 1;\n
                    }\n
                }\n
                v29 += 1;\n
                continue;\n
            }\n
            if (*(v29) == 117)\n
            {\n
                v32 = a0;\n
                a0 = v32 + 1;\n
                v16 = &*(v32)->field_0;\n
                cgc_uint_to_str(v16, &v26);\n
                v6 = v25;\n
                v20 = v6 - cgc_strlen(&v26);\n
                if (!v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        if (!v23)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v27 += 1;\n
                    }\n
                }\n
                for (v15 = &v26; v15->field_0; v15 += 1)\n
                {\n
                    cgc_putc(v15->field_0);\n
                    v27 += 1;\n
                }\n
                if (v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v27 += 1;\n
                    }\n
                }\n
                v29 += 1;\n
                continue;\n
            }\n
            if (*(v29) == 120)\n
            {\n
                v33 = a0;\n
                a0 = v33 + 1;\n
                v14 = *(v33);\n
                cgc_int_to_hex(v14, &v26);\n
                v5 = v25;\n
                v20 = v5 - cgc_strlen(&v26);\n
                if (!v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        if (!v23)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v27 += 1;\n
                    }\n
                }\n
                for (v13 = &v26; v13->field_0; v13 += 1)\n
                {\n
                    cgc_putc(v13->field_0);\n
                    v27 += 1;\n
                }\n
                if (v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v27 += 1;\n
                    }\n
                }\n
                v29 += 1;\n
                continue;\n
            }\n
            if (*(v29) == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v12 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v36 = ftop<4> - 1 + 1;\n
                v37 = v36 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v24;\n
                v0 = &v26;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v38 = v37 + 1;\n
                cgc_float_to_str();\n
                v4 = v25;\n
                v20 = v4 - cgc_strlen();\n
                if (!v22)\n
                {\n
                    for (v21 = 0; v21 < v20; v21 += 1)\n
                    {\n
                        if (!v23)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v27 += 1;\n
                    }\n
                }\n
                for (v11 = &v26; v11->field_0; v11 += 1)\n
                {\n
                    cgc_putc(v11->field_0);\n
                    v27 += 1;\n
                }\n
                v29 += 1;\n
                continue;\n
            }\n
            if (!(*(v29) == 115))\n
                goto LABEL_403a1a;\n
            v39 = a0;\n
            a0 = v39 + 1;\n
            v10 = &*(v39)->field_0;\n
            if (v24 > 0)\n
            {\n
                v3 = v24;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v9 = v24;\n
                    goto LABEL_403899;\n
                }\n
            }\n
            v9 = cgc_strlen();\n
LABEL_403899:\n
            v20 = v25 - v9;\n
            if (!v22)\n
            {\n
                for (v21 = 0; v21 < v20; v21 += 1)\n
                {\n
                    if (v23)\n
                        cgc_putc(48);\n
                    else\n
                        cgc_putc(32);\n
                    v27 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v10))\n
                    v2 = !(v9 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v10));\n
                v27 += 1;\n
                v10 += 1;\n
                v9 -= 1;\n
            }\n
            if (v22)\n
            {\n
                for (v21 = 0; v21 < v20; v21 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v27 += 1;\n
                }\n
            }\n
            v29 += 1;\n
        }\n
    }\n
    v28 = v27;\n
    return v28;\n
}\n
", "4209201:sub_403a31": null, "4209216:cgc_vsprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_0 **a1)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            *((v26 + v24)) = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40427b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                *((v26 + v24)) = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                *((v26 + v24)) = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    *((v26 + v24)) = v14->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    *((v26 + v24)) = *(v12);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    *((v26 + v24)) = *(v10);\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40427b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_40411e;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_40411e:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        *((v26 + v24)) = 48;\n
                    else\n
                        *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                *((v26 + v24)) = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4211346:sub_404292": null, "4211360:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4211424:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4211493:sub_404325": null, "4211504:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4211576:sub_404378": null, "4211584:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211638:sub_4043b6": null, "4211648:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211702:sub_4043f6": null, "4211712:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4211778:sub_404442": null, "4211792:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4211858:sub_404492": null, "4211872:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211926:sub_4044d6": null, "4211936:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4212030:sub_40453e": null, "4212032:cgc_isnan": null, "4212055:sub_404557": null, "4212064:cgc_isinf": null, "4212111:sub_40458f": null, "4212112:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4047c2:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40479b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40479b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40479b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4047c2;\n
                if (!v4)\n
                {\n
LABEL_404717:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40479b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_404717;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40479b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4212700:sub_4047dc": null, "4212704:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4213108:sub_404974": null, "4213120:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4213211:sub_4049db": null, "4213216:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4213371:sub_404a7b": null, "4213376:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4213484:sub_404aec": null, "4213488:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4213566:sub_404b3e": null, "4213568:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4213676:sub_404bac": null, "4213680:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4213875:sub_404c73": null, "4213888:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4213965:sub_404ccd": null, "4213968:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        else if ((*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            cgc_receive(v9, &v2, 0x400);\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
}\n
", "4214290:sub_404e12": null, "4214304:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4214407:sub_404e87": null, "4214416:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 0; v4 < a1; v4 += 1)\n
    {\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a0)\n
                break;\n
            v4[v5] = v2;\n
        }\n
    }\n
    if (v4 == a1)\n
        cgc_flush_input(0);\n
    return v4;\n
}\n
", "4214637:sub_404f6d": null, "4214640:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v2 = 0;\n
        v0 = &v2;\n
        if (cgc_receive(0, v6 + v4, v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 -= v2;\n
        v4 = v2 + v4;\n
    }\n
}\n
", "4214823:sub_405027": null, "4214832:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214991:sub_4050cf": null, "4214992:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4215191:sub_405197": null, "4215200:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 7355, 1);\n
}\n
", "4215323:sub_40521b": null, "4215328:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4215434:sub_40528a": null, "4215440:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    struct struct_1 *field_4c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_44)\n
        {\n
            cgc_deallocate(v4->field_44);\n
            v12 = v4;\n
            v12->field_44 = 0;\n
            v12->field_48 = 0;\n
            v12->field_4c = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_44)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_4c >= v11->field_44 + v11->field_48)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_44)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_48 = cgc_strlen(v10);\n
        v0 = &v13->field_44;\n
        if (cgc_allocate(v13->field_48, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_44, v10);\n
        v14 = v4;\n
        v14->field_4c = v14->field_44;\n
    }\n
    v10 = &v4->field_4c->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_44 + v15->field_48;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_44 + v16->field_48)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_40 = v8;\n
    *(v7) = 0;\n
    v17->field_4c = v7 + 1;\n
    v9 = v17->field_40;\n
    return v9;\n
}\n
", "4216187:sub_40557b": null, "4216192:cgc_write": "int cgc_write(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    cgc_transmit(1, v3, a0);\n
    if (a0 != *(&v1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4216289:sub_4055e1": null, "4216304:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4216496:cgc_compare_strings": "int cgc_compare_strings(char *v2, char *a0)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (!v2 && a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (v2 && !a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(a0);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(a0))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*(v2) >= *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
    }\n
    if (!v2 && a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (v2 && !a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4216804:sub_4057e4": null, "4216816:cgc_find_recipe": "typedef struct struct_1 {\n
    char padding_0[200];\n
    unsigned int field_c8;\n
    struct struct_0 *field_cc;\n
    char padding_d0[4];\n
    struct struct_1 *field_d4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[120];\n
    struct struct_0 *field_78;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_recipe(struct_1 *v6)\n
{\n
    unsigned int v0;  // [bp-0x420]\n
    unsigned int v1;  // [bp-0x41c]\n
    char v2;  // [bp-0x415]\n
    char v3;  // [bp-0x410]\n
    struct_0 *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    struct_1 *v8;  // eax, Other Possible Types: unsigned int\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter search term: \");\n
    v8 = cgc_getline(&v3, 0x400);\n
    v1 = v8;\n
    if (v1 <= 1)\n
        return v8;\n
    v8 = cgc_printf(v0 - 7355);\n
    while (v6)\n
    {\n
        if (!cgc_match_str(&v3))\n
        {\n
            v4 = v6->field_cc;\n
            while (v4)\n
            {\n
                if (!cgc_match_str(&v3))\n
                {\n
                    v4 = v4->field_78;\n
                    continue;\n
                }\n
                cgc_print_recipe();\n
                cgc_printf(v0 - 7568);\n
                v1 = cgc_getline(&v2, 5);\n
                if (v1 < 1)\n
                {\n
                    v6 = v6->field_d4;\n
                }\n
                else\n
                {\n
                    if (v2 != 121 && !(v2 == 89))\n
                        goto LABEL_405a05;\n
                    *((v6 + 200)) = 1;\n
LABEL_405a05:\n
                    break;\n
                }\n
            }\n
            v8 = *((v6 + 212));\n
            v6 = v8;\n
            continue;\n
        }\n
        cgc_print_recipe();\n
        cgc_printf(v0 - 7568);\n
        v1 = cgc_getline(&v2, 5);\n
        if (v1 < 1)\n
        {\n
            v8 = v6->field_d4;\n
            v6 = v8;\n
            continue;\n
        }\n
        if (v2 != 121 && !(v2 == 89))\n
            goto LABEL_405925;\n
        *((v6 + 200)) = 1;\n
LABEL_405925:\n
        v8 = v6->field_d4;\n
        v6 = v8;\n
    }\n
    return v8;\n
}\n
", "4217394:sub_405a32": null, "4217408:cgc_get_ingredients": "typedef struct struct_0 {\n
    char padding_0[120];\n
    struct struct_0 *field_78;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[204];\n
    unsigned int field_cc;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_ingredients(struct_1 *v10)\n
{\n
    unsigned int v0;  // [bp-0xc2c]\n
    unsigned int v1;  // [bp-0xc1c]\n
    struct_0 *v2;  // [bp-0xc18]\n
    char v3;  // [bp-0xc14]\n
    char v4;  // [bp-0x814]\n
    char v5;  // [bp-0x414]\n
    unsigned int v6;  // [bp-0x14]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v2 = 0;\n
    cgc_printf(\"Enter the measurement and ingredients, one per line.  A blank line ends.\\n
\\n
\");\n
    v6 = cgc_getline(&v5, 0x400);\n
    if (v6 <= 1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v2 = cgc_malloc(124);\n
    if (!v2)\n
    {\n
        cgc_printf(v1 - 7457);\n
        cgc__terminate();\n
    }\n
    for (v10->field_cc = v2; v6 > 1; v2 = v2->field_78)\n
    {\n
        cgc_bzero(&v3, 0x400);\n
        cgc_bzero(&v4, 0x400);\n
        v0 = 0x400;\n
        cgc_split_ingredient(&v5, &v3, 0x400, &v4);\n
        v2->field_78 = 0;\n
        cgc_memcpy(&v2->padding_0[20], &v4, 99);\n
        cgc_memcpy(v2, &v3, 19);\n
        v7 += 1;\n
        v6 = cgc_getline(&v5, 0x400);\n
        if (v6 > 1)\n
        {\n
            v2->field_78 = cgc_malloc(124);\n
            if (!v2->field_78)\n
            {\n
                cgc_printf(v1 - 7432);\n
                cgc__terminate();\n
            }\n
        }\n
    }\n
    v8 = v7;\n
    return v8;\n
}\n
", "4218003:sub_405c93": null, "4218016:cgc_get_instructions": "typedef struct struct_0 {\n
    char padding_0[208];\n
    struct struct_1 *field_d0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_instructions(struct_0 *v7)\n
{\n
    unsigned int v0;  // [bp-0x41c]\n
    unsigned int *v1;  // [bp-0x418], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x414]\n
    unsigned int v3;  // [bp-0x410]\n
    char v4;  // [bp-0x40c]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    cgc_printf(\"Enter the step by step instructions.  A blank line to end.\\n
\\n
\");\n
    cgc_printf(v0 - 7353);\n
    v9 = cgc_getline(&v4, 0x400);\n
    v5 = v9;\n
    if (v5 <= 1)\n
        return v9;\n
    v7->field_d0 = cgc_malloc(8);\n
    if (!v7->field_d0)\n
    {\n
        cgc_printf(v0 - 7457);\n
        cgc__terminate();\n
    }\n
    cgc_memset(v7->field_d0, 0, 8);\n
    v3 = cgc_malloc(cgc_strlen(&v4));\n
    if (!v3)\n
    {\n
        cgc_printf(v0 - 7457);\n
        cgc__terminate();\n
    }\n
    cgc_strcpy(v3, &v4);\n
    v7->field_d0->field_0 = v3;\n
    v1 = v1 + 1;\n
    cgc_printf(v0 - 7344);\n
    while (true)\n
    {\n
        v9 = cgc_getline(&v4, 0x400);\n
        v5 = v9;\n
        if (v5 <= 1)\n
            break;\n
        v2 = cgc_malloc((v1 + 2) * 4);\n
        if (!v2)\n
        {\n
            cgc_printf(v0 - 7432);\n
            cgc__terminate();\n
        }\n
        cgc_memset(v2, 0, (v1 + 2) * 4);\n
        cgc_memcpy(v2, v7->field_d0, (v1 + 1) * 4);\n
        v3 = cgc_malloc(cgc_strlen(&v4));\n
        if (!v3)\n
        {\n
            cgc_printf(v0 - 7457);\n
            cgc__terminate();\n
        }\n
        cgc_strcpy(v3, &v4);\n
        *((v2 + v1 * 4)) = v3;\n
        cgc_free(v7->field_d0);\n
        v7->field_d0 = v2;\n
        v1 = v1 + 1;\n
        cgc_printf(v0 - 7335);\n
    }\n
    return v9;\n
}\n
", "4218926:sub_40602e": null, "4218928:cgc_match_str": "int cgc_match_str(char v4[2], char *a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    char v2[2];  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
\n
    *(&v2) = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(a0))\n
            v1 = v4[0];\n
        if (!(v1 & 1))\n
            break;\n
        if (v4[0] == 42)\n
        {\n
            if (!v4[1])\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
            *(&v4) = &v4[1];\n
            *(&v2) = v4;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v4[0] != *(a0))\n
                    v0 = *(a0);\n
                if (!(v0 & 1))\n
                    break;\n
                a0 += 1;\n
            }\n
            if (!*(a0))\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            v4 = &v4[1];\n
            a0 += 1;\n
            if (!*(v4))\n
            {\n
                if (*(a0) && v2)\n
                {\n
                    v4 = v2;\n
                    continue;\n
                }\n
                break;\n
            }\n
        }\n
        else if (v4[0] == 63)\n
        {\n
            v4 = &v4[1];\n
            a0 += 1;\n
        }\n
        else if (v4[0] == *(a0))\n
        {\n
            v4 = &v4[1];\n
            a0 += 1;\n
            if (!*(v4))\n
            {\n
                if (*(a0) && v2)\n
                {\n
                    v4 = v2;\n
                    continue;\n
                }\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            if (!v2)\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            if (v4 == v2)\n
            {\n
                a0 += 1;\n
            }\n
            else\n
            {\n
                v4 = v2;\n
                continue;\n
            }\n
        }\n
    }\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4))\n
    {\n
        if (*(v4) != 42)\n
        {\n
LABEL_406281:\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (!(!*((v4 + 1))))\n
        {\n
            goto LABEL_406281;\n
        }\n
    }\n
    v3 = 1;\n
    return v3;\n
}\n
", "4219548:sub_40629c": null, "4219552:cgc_contains_wildcards": "int cgc_contains_wildcards(char *v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (!*(v1))\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        if (*(v1) == 42)\n
            break;\n
        if (*(v1) == 63)\n
            break;\n
        v1 += 1;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4219645:sub_4062fd": null, "4219648:cgc_new_recipe": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_new_recipe(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0xe4]\n
    unsigned int v1;  // [bp-0xe0]\n
    char v2;  // [bp-0xdc]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!*(v6))\n
    {\n
        *(v6) = cgc_malloc(216);\n
        if (!*(v6))\n
        {\n
            cgc_printf(v0 - 7325);\n
            cgc__terminate();\n
        }\n
        v4 = *(v6);\n
    }\n
    else\n
    {\n
        for (v4 = *(v6); *((v4 + 212)); v4 = *((v4 + 212)));\n
        *((v4 + 212)) = cgc_malloc(216);\n
        if (!*((v4 + 212)))\n
        {\n
            cgc_printf(v0 - 7325);\n
            cgc__terminate();\n
        }\n
        v3 = v4;\n
        v4 = *((v4 + 212));\n
    }\n
    *((v4 + 200)) = 0;\n
    *((v4 + 212)) = 0;\n
    cgc_printf(v0 - 7298);\n
    v1 = cgc_getline(&v2, 200);\n
    if (v1 <= 1)\n
    {\n
        if (v4 == *(v6))\n
            *(v6) = 0;\n
        cgc_free(v4);\n
        if (v3)\n
            *((v3 + 212)) = 0;\n
        v5 = -1;\n
        return v5;\n
    }\n
    else\n
    {\n
        cgc_strncpy(v4, &v2, 200);\n
        if (cgc_get_ingredients(v4))\n
        {\n
            cgc_get_instructions(v4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (*(v6) == v4)\n
            *(v6) = 0;\n
        cgc_free(v4);\n
        if (v3)\n
            *((v3 + 212)) = 0;\n
        v5 = -1;\n
        return v5;\n
    }\n
}\n
", "4220268:sub_40656c": null, "4220272:cgc_print_main_menu": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_main_menu()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"\\n
\");\n
    cgc_printf(v0 - 7284);\n
    cgc_printf(v0 - 7264);\n
    cgc_printf(v0 - 7245);\n
    cgc_printf(v0 - 7219);\n
    v4 = v1;\n
    return cgc_printf(v0 - 7194);\n
}\n
", "4220399:sub_4065ef": null, "4220400:cgc_print_recipe": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[119];\n
    struct struct_0 *field_78;\n
    char padding_7c[84];\n
    struct struct_1 *field_d0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_recipe(struct_0 *v6)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"\\n
\");\n
    v0 = v6;\n
    cgc_printf(v2 - 7184);\n
    v3 = *(&v6->padding_7c[80]);\n
    cgc_printf(v2 - 7177);\n
    cgc_printf(v2 - 7141);\n
    for (; v3; v3 = v3->field_78)\n
    {\n
        if (v3->field_0)\n
        {\n
            v0 = v3;\n
            v1 = &v3->padding_1[19];\n
            cgc_printf(v2 - 7164);\n
        }\n
        else\n
        {\n
            v0 = &v3->padding_1[19];\n
            cgc_printf(v2 - 7161);\n
        }\n
    }\n
    cgc_printf(v2 - 7355);\n
    cgc_printf(v2 - 7157);\n
    cgc_printf(v2 - 7142);\n
    if (!v4)\n
        return cgc_printf(v2 - 7356);\n
    for (v4 = &v6->field_d0->field_0; *(v4); v4 += 4)\n
    {\n
        v0 = *(v4);\n
        cgc_printf(v2 - 7161);\n
    }\n
    return cgc_printf(v2 - 7356);\n
}\n
", "4220769:sub_406761": null, "4220784:cgc_print_all_tagged": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[119];\n
    struct struct_0 *field_78;\n
    char padding_7c[76];\n
    unsigned int field_c8;\n
    char padding_cc[4];\n
    struct struct_1 *field_d0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_all_tagged(struct_0 *v6)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v9;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = cgc_printf(\"\\n
\");\n
    while (v6)\n
    {\n
        if (v6->field_c8 != 1)\n
        {\n
            v8 = *(&v6[1].field_0);\n
            v6 = v8;\n
        }\n
        else\n
        {\n
            v0 = v6;\n
            cgc_printf(v2 - 7184);\n
            *(&v3) = v6->padding_cc;\n
            cgc_printf(v2 - 7177);\n
            cgc_printf(v2 - 7141);\n
            for (; v3; v3 = v3->field_78)\n
            {\n
                if (!v3->field_0)\n
                {\n
                    v0 = &v3->padding_1[19];\n
                    cgc_printf(v2 - 7161);\n
                }\n
                else\n
                {\n
                    v0 = v3;\n
                    v1 = &v3->padding_1[19];\n
                    cgc_printf(v2 - 7164);\n
                }\n
            }\n
            cgc_printf(v2 - 7355);\n
            cgc_printf(v2 - 7157);\n
            cgc_printf(v2 - 7142);\n
            for (v4 = &v6->field_d0->field_0; *(v4); v4 += 4)\n
            {\n
                v0 = *(v4);\n
                cgc_printf(v2 - 7161);\n
            }\n
            cgc_printf(v2 - 7356);\n
            v8 = *(&v6[1].field_0);\n
            v6 = v8;\n
        }\n
    }\n
    v9 = v5;\n
    return v8;\n
}\n
", "4221193:sub_406909": null, "4221200:cgc_build_shopping_list": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_build_shopping_list(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    while (v5)\n
    {\n
        if (*((v5 + 200)) != 1)\n
        {\n
            v5 = *((v5 + 212));\n
        }\n
        else\n
        {\n
            if (!v2)\n
            {\n
                v2 = cgc_malloc(8);\n
                if (!v2)\n
                {\n
                    cgc_printf(v0 - 7457);\n
                    cgc__terminate();\n
                }\n
                v4 = v2;\n
                *((v4 + 4)) = 0;\n
            }\n
            for (v1 = *((v5 + 204)); v1; *((v4 + 4)) = 0)\n
            {\n
                *(v4) = v1 + 20;\n
                v1 = *((v1 + 120));\n
                *((v4 + 4)) = cgc_malloc(8);\n
                if (!*((v4 + 4)))\n
                {\n
                    cgc_printf(v0 - 7457);\n
                    cgc__terminate();\n
                }\n
                v3 = v4;\n
                v4 = *((v4 + 4));\n
            }\n
            v5 = *((v5 + 212));\n
        }\n
    }\n
    if (v4)\n
    {\n
        cgc_free(v4);\n
        v4 = v3;\n
        *((v4 + 4)) = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4221581:sub_406a8d": null, "4221584:cgc_print_shopping_list": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_shopping_list(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_build_shopping_list(v5);\n
    cgc_printf(v1 - 7355);\n
    cgc_printf(v1 - 7209);\n
    cgc_printf(v1 - 7143);\n
    if (!v3)\n
        return cgc_printf(v1 - 7355);\n
    cgc_sort_shopping_list();\n
    for (v2 = v3; v2; v2 = *((v2 + 4)))\n
    {\n
        v0 = *(v2);\n
        cgc_printf(v1 - 7161);\n
    }\n
    for (v2 = v3->field_4; v3; v2 = *((v2 + 4)))\n
    {\n
        cgc_free(v3);\n
        v3 = v2;\n
    }\n
    return cgc_printf(v1 - 7355);\n
}\n
", "4221845:sub_406b95": null, "4221856:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0xf0]\n
    unsigned int v1;  // [bp-0xec]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1a]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            cgc_print_main_menu();\n
            v4 = cgc_getline(&v3, 10);\n
        } while (!v4);\n
        v2 = cgc_atoi(&v3);\n
        v0 = v2 - 1;\n
        if (v0 <= 4)\n
            break;\n
        cgc_printf(v1 - 7108);\n
    }\n
    goto *(((stack_base)[236] + (stack_base)[240] * 4 - 7128)) + (stack_base)[236];\n
}\n
", "4222016:sub_406c40": "int sub_406c40()\n
{\n
    char v0;  // [bp-0xe8]\n
\n
    cgc_new_recipe(*(&v0) + 80);\n
}\n
", "4222041:sub_406c59": "int sub_406c59()\n
{\n
    char v0;  // [bp-0xe8]\n
\n
    cgc_find_recipe(*((*(&v0) + 80)));\n
}\n
", "4222066:sub_406c72": "int sub_406c72()\n
{\n
    char v0;  // [bp-0xe8]\n
\n
    cgc_print_all_tagged(*((*(&v0) + 80)));\n
}\n
", "4222091:sub_406c8b": "int sub_406c8b()\n
{\n
    char v0;  // [bp-0xe8]\n
\n
    cgc_print_shopping_list(*((*(&v0) + 80)));\n
}\n
", "4222116:sub_406ca4": "int sub_406ca4()\n
{\n
    void* v0;  // [bp+0x0]\n
\n
    v0 = 0;\n
    cgc__terminate();\n
}\n
", "4222161:sub_406cd1": null, "4222176:cgc_sort_shopping_list": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sort_shopping_list(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_1 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v2 = &v4->field_0;\n
        for (v1 = 0; *((v2 + 4)); v2 = v2->field_4)\n
        {\n
            if (cgc_compare_strings(*(v2), *(*((v2 + 4)))) == 1)\n
            {\n
                v3 = *(v2);\n
                *(v2) = *(*((v2 + 4)));\n
                *(*((v2 + 4))) = v3;\n
                v1 = 1;\n
            }\n
        }\n
    } while (v1 == 1);\n
    return v2;\n
}\n
", "4222338:sub_406d82": null, "4222352:cgc_split_ingredient": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_split_ingredient(struct_0 *v11, char *a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    struct_0 *v0;  // [bp-0x90]\n
    char v1;  // [bp-0x89]\n
    struct_0 *v2;  // [bp-0x88]\n
    struct_0 *v3;  // [bp-0x84]\n
    char v4;  // [bp-0x7d]\n
    unsigned int v5;  // [bp-0x7c]\n
    unsigned int v6;  // [bp-0x78]\n
    char v7;  // [bp-0x74]\n
    struct_0 *v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0xc]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
\n
    v10 = v12;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    *(a0) = 0;\n
    v8 = v11;\n
    v6 = 0;\n
    cgc_bzero(&v7, 100);\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (v8[v6].field_0 != 32)\n
        {\n
            v4 = 0;\n
            if (v6 < 99)\n
            {\n
                v3 = v6;\n
                v4 = v3 < cgc_strlen(v8);\n
            }\n
        }\n
        if (!(v4 & 1))\n
            break;\n
        (&v7)[v6] = v8[v6].field_0;\n
        v6 += 1;\n
    }\n
    (&v7)[v6] = 0;\n
    v8 = &v11[v6 + 1];\n
    v6 = 0;\n
    while (true)\n
    {\n
        v2 = v6;\n
        if (v2 >= cgc_strlen(&v7))\n
            break;\n
        if (!cgc_isdigit((&v7)[v6]) && (&v7)[v6] != 46 && (&v7)[v6] != 47)\n
        {\n
            cgc_strcpy(a2, v11);\n
            *(a0) = 0;\n
        }\n
        v6 += 1;\n
    }\n
    cgc_strcpy(a0, &v7);\n
    cgc_bzero(&v7, 100);\n
    v6 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v8[v6].field_0 != 32)\n
        {\n
            v1 = 0;\n
            if (v6 < 99)\n
            {\n
                v0 = v6;\n
                v1 = v0 < cgc_strlen(v8);\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        (&v7)[v6] = *((v8 + v6));\n
        v6 += 1;\n
    }\n
    (&v7)[v6] = 0;\n
    if (cgc_strcmp(&v7, v5 - 7091) && cgc_strcmp(&v7, v5 - 7087) && cgc_strcmp(&v7, v5 - 7082) && cgc_strcmp(&v7, v5 - 7078) && !(!cgc_strcmp(&v7, v5 - 7073)))\n
        goto LABEL_4070ae;\n
    cgc_strcat(a0, v5 - 7346);\n
    cgc_strcat(a0, &v7);\n
    v8 = v8 + v6 + 1;\n
LABEL_4070ae:\n
    cgc_strcpy(a2, v8);\n
    v9 = 0;\n
    return v9;\n
}\n
", "4223192:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:cgc_deallocate": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}