{"4202496:_init": "extern struct_0 *g_40cc04;\n
\n
int _init()\n
{\n
    if (g_40cc04)\n
    {\n
        g_40cc04();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 43803;\n
    v6 = v5 + 862;\n
    v7 = v5 + 862;\n
    if (v7 == v6)\n
        return v5 + 862;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 43739;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 862;\n
    v9 = (v6 + 862 - (v6 + 862) >> 31) + (862 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40cc00;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40cc00)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    if (v5 * a0 >> 32)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = cgc_malloc_alloc(v1 + 11720);\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v4 = v2;\n
    return v4;\n
}\n
", "4203144:sub_402288": null, "4203152:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 1;\n
}\n
", "4203192:sub_4022b8": null, "4203200:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 2;\n
}\n
", "4203240:sub_4022e8": null, "4203248:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 16;\n
}\n
", "4203288:sub_402318": null, "4203296:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 14;\n
}\n
", "4203336:sub_402348": null, "4203344:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 12;\n
}\n
", "4203384:sub_402378": null, "4203392:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 4;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 8;\n
}\n
", "4203480:sub_4023d8": null, "4203488:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 64;\n
}\n
", "4203528:sub_402408": null, "4203536:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 32;\n
}\n
", "4203576:sub_402438": null, "4203584:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 128;\n
}\n
", "4203626:sub_40246a": null, "4203632:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v4)\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_toupper();\n
    v2 = 1;\n
    if (cgc_isdigit(v4))\n
        return v2 & 1;\n
    v0 = 0;\n
    if (v4 >= 65)\n
        v0 = v4 <= 70;\n
    v2 = v0;\n
    return v2 & 1;\n
}\n
", "4203746:sub_4024e2": null, "4203760:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203845:sub_402545": null, "4203856:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_toupper(v3);\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    if (v3 >= 65 && v3 <= 70)\n
    {\n
        v1 = v3 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203985:sub_4025d1": null, "4204000:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204085:sub_402635": null, "4204096:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_fflush(v2, v3);\n
    return;\n
}\n
", "4204128:cgc_fflush": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fflush(unsigned int v4[5])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v4[1] != 1)\n
    {\n
        v2 = 0;\n
        v0 = v4[3] - v4[2];\n
        ::0x402760::cgc_xlat(v4[4], &v4[1 + 1] + v4[2]);\n
        v0 = v4[3] - v4[2];\n
        if (::0x4027d0::cgc_transmit_all(v4[0], &v4[1 + 1] + v4[2]))\n
            v2 = -1;\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4204380:sub_40275c": null, "4204384:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204483:sub_4027c3": null, "4204496:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4204646:sub_402866": null, "4204656:cgc_fbuffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fbuffered(unsigned int v1[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[2] != -1)\n
        cgc_fflush(v1);\n
    if (a0)\n
        v1[2] = 0;\n
    else\n
        v1[2] = -1;\n
    v1[3] = 0;\n
    return v1;\n
}\n
", "4204772:sub_4028e4": null, "4204784:cgc_fopen": "int cgc_fopen(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[6];  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v1[0] = cgc_malloc();\n
    if (!v1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v1[0] = v3;\n
    v1[1] = (a0 ? 1 : 2);\n
    v1[2] = 0;\n
    v1[3] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4204934:sub_402986": null, "4204944:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1[6])\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[6];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] == a1[3])\n
        cgc__refill();\n
    if (a1[2] != -1)\n
    {\n
        v2 = a1[3] - a1[2];\n
        if (v2 > a0)\n
            v2 = a0;\n
        cgc_memcpy(v4, 1 + a1 + a1[2]);\n
        v3 = v2 + v3;\n
        v7 = a1;\n
        v7[2] = v2 + v7[2];\n
        if (a1[2] == a1[3])\n
        {\n
            a1[3] = 0;\n
            a1[2] = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(a1[0], v4 + v3, a0 - v3))\n
            break;\n
        if (!v2)\n
            break;\n
        ::0x402bf0::cgc_xlat(a1[5], v4 + v3);\n
        v3 = v2 + v3;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4205323:sub_402b0b": null, "4205328:cgc__refill": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__refill(unsigned int v4[6])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == v4[3])\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
    }\n
    v0 = &v2;\n
    if (!cgc_receive(v4[0], (1 + v4 + v4[3]), 0x400 - v4[3]) && *(&v2))\n
    {\n
        v4[3] = *(&v2);\n
        ::0x402bf0::cgc_xlat(v4[5], v4 + 1);\n
        v3 = *(&v2);\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205539:sub_402be3": null, "4205552:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205651:sub_402c53": null, "4205664:cgc_freaduntil": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freaduntil(unsigned int v6, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 0; v4 < a0 - 1; v4 += 1)\n
    {\n
        v0 = a2;\n
        v3 = cgc__getc();\n
        if (v3 == -1)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v3 == a1)\n
            break;\n
        v4[v6] = v3;\n
    }\n
    if (v4 == a0 - 1)\n
    {\n
        do\n
        {\n
            v0 = a2;\n
            v2 = cgc__getc();\n
            if (v2 == -1)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        } while (v2 != a1);\n
    }\n
    v4[v6] = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4205930:sub_402d6a": null, "4205936:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    char *field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__getc(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6[6];  // edx\n
    unsigned int v7;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5->field_8 == -1)\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v5->field_0, &v3, 1) && *(&v2))\n
        {\n
            ::0x402bf0::cgc_xlat(v5->field_14, &v3, 1);\n
            v4 = v3;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    else\n
    {\n
        if (v5->field_8 == v5->field_c && cgc__refill(v5) < 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v6 = v5;\n
        v7 = v6[2];\n
        v6[2] = v7 + 1;\n
        v4 = *(24 + &v5->field_0 + v7);\n
        return v4;\n
    }\n
}\n
", "4206181:sub_402e65": null, "4206192:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4206241:sub_402ea1": null, "4206256:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v6, unsigned int a0, unsigned int a1[5])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[5];  // eax\n
    unsigned int v8[5];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] != -1)\n
    {\n
        if (a0 >= 0x400)\n
        {\n
            cgc_fflush(a1);\n
        }\n
        else\n
        {\n
            if (a1[3] + a0 >= 0x400)\n
            {\n
                v2 = 0x400 - a1[3];\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4);\n
                v7 = a1;\n
                v7[3] = v2 + v7[3];\n
                v3 = v2 + v3;\n
                cgc_fflush(a1);\n
            }\n
            if (v3 < a0)\n
            {\n
                v2 = a0 - v3;\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4 + v3);\n
                v8 = a1;\n
                v8[3] = v2 + v8[3];\n
                v3 = v2 + v3;\n
            }\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
    if (a1[4])\n
    {\n
        v0 = a0;\n
        if (cgc_transmit_xlat(a1[0], a1[4], v6))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
    else if (::0x403070::cgc_transmit_all(a1[0], v6))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = a0;\n
    return v5;\n
}\n
", "4206701:sub_40306d": null, "4206704:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4206854:sub_403106": null, "4206864:cgc_transmit_xlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_xlat(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x414], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x410]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a1;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v1 = a2 - v2;\n
            if (v1 > 0x400)\n
                v1 = 0x400;\n
            cgc_memcpy(&v3, v4 + v2);\n
            ::0x403240::cgc_xlat(a0, &v3);\n
            if (::0x403070::cgc_transmit_all(v6, &v3, v1))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = v1 + v2;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207156:sub_403234": null, "4207168:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4207267:sub_4032a3": null, "4207280:cgc_fxlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fxlat(unsigned int v8[6], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char *v4;  // [bp-0x1c]\n
    char *v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    char *v9;  // eax\n
    char *v10;  // eax, Other Possible Types: unsigned int, unsigned int [6]\n
    char *v11;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        cgc_free(v8[4]);\n
        v8[4] = 0;\n
        v10 = v8;\n
        v10[5] = 0;\n
        return v8;\n
    }\n
    v0 = 0x100;\n
    v9 = cgc_realloc(v8[4]);\n
    v8[4] = v9;\n
    v5 = v9;\n
    v0 = 0x100;\n
    v11 = cgc_realloc(v8[5]);\n
    v8[5] = v11;\n
    v4 = v11;\n
    v10 = cgc_hash_seed(a0);\n
    v7 = v10;\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v5[v6] = v6;\n
        v10 = v6 + 1;\n
    }\n
    for (v6 = 255; v6 >= 1; v6 = v10)\n
    {\n
        v3 = (0 CONCAT v7) /m v6 >> 32;\n
        v7 *= 3;\n
        v7 = v7 * 0x2000 ^ v7 >> 19 ^ v7 >> 21;\n
        v2 = v5[v6];\n
        v5[v6] = v5[v3];\n
        v5[v3] = v2;\n
        v10 = v6 - 1;\n
    }\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v4[v5[v6]] = v6;\n
        v10 = v6 + 1;\n
    }\n
    return v10;\n
}\n
", "4207675:sub_40343b": null, "4207680:cgc_hash_seed": "int cgc_hash_seed(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 826981510;\n
    for (v1 = 0; *((v2 + v1)); v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = *((v2 + v1)) ^ v0;\n
        v0 = v0 * 0x2000 ^ v0 >> 19;\n
    }\n
    return v0;\n
}\n
", "4207784:sub_4034a8": null, "4207792:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4207841:sub_4034e1": null, "4207856:cgc_malloc_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_alloc(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    a0 = a0 - -3 & -0x4;\n
    if (a0 < 4)\n
    {\n
        v0 = 4;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 16)\n
    {\n
        v0 = a0;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 0x20000)\n
    {\n
        v0 = a0;\n
        v2 = cgc_small_alloc(v4);\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v2 = cgc_large_alloc(v4);\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4208094:sub_4035de": null, "4208096:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    unsigned int field_1218;\n
    unsigned int field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tiny_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned short v3[2];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned short v10[2];  // eax\n
    struct_0 *v11;  // eax\n
    unsigned short v12[2];  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = cgc_size_to_bin();\n
    v4 = *((v8 + v5 * 4));\n
    if (v4)\n
    {\n
        *((v8 + v5 * 4)) = *(v4);\n
        v6 = v4;\n
        return v6;\n
    }\n
    *(&v3[0]) = *((v8 + v5 * 4 + 4620));\n
    if (!v3)\n
    {\n
        if (!*((v8 + 4632)))\n
        {\n
            v0 = 1;\n
            *((v8 + 4632)) = cgc_run_alloc(v8);\n
            if (!*((v8 + 4632)))\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((v8 + 4636)) = 0;\n
        }\n
        v10 = *((v8 + 4632)) + *((v8 + 4636));\n
        *((v8 + v5 * 4 + 4620)) = v10;\n
        v3 = v10;\n
        *(v3) = a0;\n
        *((v3 + 2)) = a0;\n
        v11 = v8;\n
        v11->field_121c = v11->field_121c + 0x1000;\n
        if (*((v8 + 4636)) == 0x100000)\n
            *((v8 + 4632)) = 0;\n
    }\n
    v2 = v3 + *((v3 + 2));\n
    v12 = v3;\n
    v12[1] = v12[1] + a0;\n
    if (*((v3 + 2)) + *(v3) > 0x1000)\n
        *((v8 + v5 * 4 + 4620)) = 0;\n
    v6 = v2;\n
    return v6;\n
}\n
", "4208507:sub_40377b": null, "4208512:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc(unsigned int v7, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    struct struct_0 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 - -23 & -0x10;\n
    for (v4 = cgc_size_to_bin(); v4 < 131; v4 = v4 + 1)\n
    {\n
        for (v2 = *((v7 + v4 * 4)); v2; v2 = *((v2 + 12)))\n
        {\n
            if (*((v2 + 4)) >= v3)\n
                break;\n
        }\n
        if (v2)\n
            break;\n
    }\n
    if (v4 == 131)\n
    {\n
        if (!cgc_small_alloc_run())\n
        {\n
            v4 = 130;\n
            v2 = *((v7 + v4 * 4));\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    v0 = v2;\n
    cgc_small_unlink_free(v7, v4);\n
    if (*((v2 + 4)) - v3 > 32)\n
    {\n
        v0 = v3;\n
        cgc_small_split(v7, v2);\n
    }\n
    v5 = v2 + 8;\n
    return v5;\n
}\n
", "4208839:sub_4038c7": null, "4208848:cgc_large_alloc": "int cgc_large_alloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = a0 - -4103 & -0x1000;\n
    v0 = &v2;\n
    if (cgc_allocate(v3, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v5;\n
    v1[1] = v3;\n
    v4 = v1 + 1;\n
    return v4;\n
}\n
", "4208985:sub_403959": null, "4208992:malloc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int malloc_free(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = *((v3 + (a0 >> 20) + 524));\n
    v2 = v4;\n
    if (!a0)\n
    {\n
        return *((v3 + (a0 >> 20) + 524));\n
    }\n
    else if (v2)\n
    {\n
        if (v2 == 2)\n
        {\n
            v0 = a0;\n
            v4 = cgc_small_free(v3);\n
        }\n
        else if (v2 == 1)\n
        {\n
            v0 = a0;\n
            v4 = cgc_tiny_free(v3);\n
        }\n
        return v4;\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v4 = cgc_large_free(v3);\n
        return v4;\n
    }\n
}\n
", "4209194:sub_403a2a": null, "4209200:cgc_large_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_large_free(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[2];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    if ((v3 & 4095) != 8)\n
        cgc_heap_error(v1 - 11176);\n
    v2[0] = a0 - 8;\n
    if (v2[0] != v4)\n
    {\n
        v0 = v4;\n
        cgc_heap_error(v1 - 11127, v3, v2[0]);\n
    }\n
    if (v2[1] >= 0x20000 && v2[1] <= 2147487743 && !(v2[1] & 4095))\n
        return cgc_deallocate(v2);\n
    cgc_heap_error(v1 - 11073, v3);\n
    return cgc_deallocate(v2);\n
}\n
", "4209456:cgc_small_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6[2];  // [bp-0x18]\n
    unsigned int v7[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v8[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11[2];  // eax\n
    unsigned int v12[2];  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = a0;\n
    v8[0] = v9 - 8;\n
    v5 = v9 & -0x100000;\n
    if ((v9 & 7))\n
        cgc_heap_error(v4 - 11029);\n
    if ((v8[1] & 1))\n
        cgc_heap_error(v4 - 10980);\n
    if (v8[1] <= 0x20000 && !(v8[1] < 16))\n
        goto LABEL_403bec;\n
    cgc_heap_error(v4 - 10942);\n
LABEL_403bec:\n
    if (!v8[0])\n
        v7[0] = 0;\n
    else\n
        v7 = v8 - v8[0];\n
    v6[0] = v8 + v8[1];\n
    if (v7 && (*((v7 + 4)) & -2) != v8[0])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 10901, v7);\n
    }\n
    if (v6[0] != v8[1])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 10849, v6);\n
    }\n
    if (v7 && (*((v7 + 4)) & 1))\n
    {\n
        v3 = v10;\n
        v0[0] = v7;\n
        cgc_small_unlink_free(v3, cgc_size_to_bin());\n
        v11 = v7;\n
        v11[1] = v8[1] + v11[1];\n
        v8 = v7;\n
        v6[0] = *((v8 + 4));\n
    }\n
    if ((v6[1] & 1))\n
    {\n
        v2 = v10;\n
        v0[0] = v6;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin());\n
        v12 = v8;\n
        v12[1] = v6[1] + v12[1];\n
        v6[0] = v8 + v8[1];\n
        v6[0] = *((v8 + 4));\n
    }\n
    v1 = v10;\n
    v0[0] = v8;\n
    return cgc_small_insert_free(v1, cgc_size_to_bin());\n
}\n
", "4210078:sub_403d9e": null, "4210080:cgc_tiny_free": "int cgc_tiny_free(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned short *v1;  // [bp-0x14]\n
    unsigned short *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
\n
    v2 = a0 & -0x1000;\n
    v1 = a0;\n
    v0 = *(v2);\n
    v3 = cgc_size_to_bin();\n
    *(&v1) = *((v4 + v3 * 4));\n
    *((v4 + v3 * 4)) = v1;\n
    return v4;\n
}\n
", "4210171:sub_403dfb": null, "4210176:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned short *v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = *((v4 + (a0 >> 20) + 524));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a0 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &a0[4];\n
    v3 = v1->field_4 - 8;\n
    return v3;\n
}\n
", "4210314:sub_403e8a": null, "4210320:cgc_malloc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_realloc(unsigned int v6, unsigned short *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 > 2147483647)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a1)\n
    {\n
        malloc_free(v6, a0);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        v5 = cgc_malloc_alloc(v6, a1);\n
        return v5;\n
    }\n
    else if (cgc_malloc_size(v6, a0) < a1)\n
    {\n
        v4 = cgc_malloc_alloc(v6, a1);\n
        if (!v4)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v1 = v4;\n
        v2 = a0;\n
        v0 = cgc_malloc_size(v6, a0);\n
        cgc_memcpy(v1, v2);\n
        malloc_free(v6, a0);\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
}\n
", "4210639:sub_403fcf": null, "4210640:cgc_size_to_bin": "int cgc_size_to_bin(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 16)\n
    {\n
        v0 = (v1 >> 2) - 1;\n
        return v0;\n
    }\n
    else if (v1 <= 0x200)\n
    {\n
        v0 = (v1 >> 4) - -2;\n
        return v0;\n
    }\n
    else if (v1 <= 0x1200)\n
    {\n
        v0 = (v1 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (v1 <= 0x20000)\n
    {\n
        v0 = (v1 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210803:sub_404073": null, "4210816:cgc_run_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_alloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x200000, 0))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = *(&v2);\n
    v3 = v4 - -1048575 & -0x100000;\n
    if (v4 < v3)\n
        cgc_deallocate(v4);\n
    if (v3 + 0x100000 < v4 + 0x200000)\n
        cgc_deallocate(v3 + 0x100000);\n
    *((v7 + (v3 >> 20) + 524)) = a0;\n
    v5 = v3;\n
    return v5;\n
}\n
", "4211069:sub_40417d": null, "4211072:cgc_small_alloc_run": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc_run(unsigned int v7)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_run_alloc(v7, 2);\n
    if (!v2)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v4[0] = v2 - -19 & -0x10;\n
    v4[0] = 0;\n
    v4[1] = 1048560 + -0x1 * v4 + v2;\n
    v3[0] = v4 + v4[1];\n
    v3[0] = v4[1];\n
    v3[1] = 0;\n
    v0[0] = v4;\n
    cgc_small_insert_free(v7, 130);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211270:sub_404246": null, "4211280:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_unlink_free(unsigned int *v2, unsigned int a0, struct_2 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_2 *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!(a1->field_4 & 1))\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 11222);\n
    }\n
    v3 = a1;\n
    v3->field_4 = v3->field_4 & -2;\n
    if (a1->field_8)\n
        a1->field_8->field_c = a1->field_c;\n
    if (a1->field_c)\n
        a1->field_c->field_8 = a1->field_8;\n
    if (v2[a0] == a1)\n
        v2[a0] = a1->field_c;\n
    a1->field_8 = 0;\n
    a1->field_c = 0;\n
    return a1;\n
}\n
", "4211480:sub_404318": null, "4211488:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_split(unsigned int v7, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0->field_4 - a1;\n
    v4[0] = &a0->padding_0[a1];\n
    v3 = &a0->padding_0[a0->field_4];\n
    a0->field_4 = a1;\n
    v4[0] = a0->field_4;\n
    v4[1] = v5;\n
    *(v3) = v5;\n
    v2 = v7;\n
    v0[0] = v4;\n
    v9 = v6;\n
    return cgc_small_insert_free(v2, cgc_size_to_bin(v5));\n
}\n
", "4211639:sub_4043b7": null, "4211648:cgc_small_insert_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_insert_free(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if ((*((a1 + 4)) & 1) == 1)\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 11272);\n
    }\n
    v3 = a1;\n
    *((v3 + 4)) = *((v3 + 4)) | 1;\n
    *((a1 + 8)) = 0;\n
    *((a1 + 12)) = *((v2 + a0 * 4));\n
    *((v2 + a0 * 4)) = a1;\n
    v4 = a1;\n
    if (*((v4 + 12)))\n
    {\n
        v4 = *((a1 + 12));\n
        *((v4 + 8)) = a1;\n
    }\n
    return v4;\n
}\n
", "4211801:sub_404459": null, "4211808:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    char v5;  // [bp-0x4]\n
    unsigned int v6;  // [bp+0x4]\n
    char v7;  // [bp+0x8]\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v8 = &v5;\n
    v4 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v7;\n
    v0 = v6;\n
    v1 = v3;\n
    cgc_vfprintf(cgc_stderr, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v9);\n
    v10 = v2;\n
    cgc__terminate(1, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v4);\n
    cgc_memchr();\n
    return;\n
}\n
", "4211904:cgc_memchr": "int cgc_memchr(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v1[v0] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v2 = &v1[v0];\n
            return v2;\n
        }\n
    }\n
}\n
", "4212011:sub_40452b": null, "4212016:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v4;\n
    v0 = a0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (v1[v2] == *((v0 + v2)))\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = v1[v2] - *((v0 + v2));\n
            return v3;\n
        }\n
    }\n
}\n
", "4212154:sub_4045ba": null, "4212160:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4212246:sub_404616": null, "4212256:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    if (v3 > a0)\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            *((v2 + -1 + a1 - v0)) = *(-1 + v1 + a1 - v0);\n
        }\n
        return v3;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[v0] = *((v1 + v0));\n
        }\n
        return v3;\n
    }\n
}\n
", "4212427:sub_4046cb": null, "4212432:cgc_memset": "int cgc_memset(char *v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = v2;\n
    for (v1 = 0; v1 < a1; v1 += 1)\n
    {\n
        v0[v1] = a0;\n
    }\n
    return v2;\n
}\n
", "4212508:sub_40471c": null, "4212512:cgc_printf": "int cgc_printf(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x8]\n
\n
    v1 = &v4;\n
    v0 = v1;\n
    v2 = cgc_vprintf(v3);\n
    return v2;\n
}\n
", "4212570:sub_40475a": null, "4212576:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4212637:sub_40479d": null, "4212640:cgc_fprintf": "int cgc_fprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vfprintf(v4, a0);\n
    return v2;\n
}\n
", "4212709:sub_4047e5": null, "4212720:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vfprintf(struct_0 *v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    if (v4->field_8 == -1)\n
    {\n
        v2 = 0;\n
        v4->field_8 = 0;\n
    }\n
    v0 = 2147483647;\n
    v3 = cgc__vsfprintf(a0, a1, v4, 0);\n
    if (!v2)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4212882:sub_404892": null, "4212896:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vsprintf(v4, a0);\n
    return v2;\n
}\n
", "4212965:sub_4048e5": null, "4212976:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = 2147483647;\n
    return cgc__vsfprintf(a0, a1, 0, v1);\n
}\n
", "4213055:sub_40493f": null, "4213056:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(char *v30, unsigned int *a0, unsigned int a1[5], unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    void* v2;  // [bp-0xc0], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xb8]\n
    unsigned int v4;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xb0]\n
    unsigned int v6;  // [bp-0xac]\n
    char v7;  // [bp-0xa5]\n
    unsigned int v8;  // [bp-0xa4]\n
    unsigned int v9;  // [bp-0xa0]\n
    char v10;  // [bp-0x99]\n
    unsigned int v11;  // [bp-0x98]\n
    unsigned int v12;  // [bp-0x94]\n
    char v13;  // [bp-0x8d]\n
    unsigned int v14;  // [bp-0x8c]\n
    unsigned int v15;  // [bp-0x88]\n
    unsigned int v16;  // [bp-0x84]\n
    unsigned int v17;  // [bp-0x80]\n
    char v18;  // [bp-0x79]\n
    unsigned int v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x74]\n
    char *v21;  // [bp-0x70]\n
    char *v22;  // [bp-0x6c]\n
    char v23;  // [bp-0x65]\n
    unsigned int v24;  // [bp-0x64]\n
    char v25;  // [bp-0x60]\n
    char *v26;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0x18]\n
    char v29;  // [bp-0x11]\n
    char *v31;  // eax\n
    char *v32;  // eax\n
    char *v33;  // eax\n
    char *v34;  // eax\n
    char *v35;  // eax\n
    char *v36;  // eax\n
    unsigned int *v37;  // eax\n
    char *v38;  // eax\n
    unsigned int *v39;  // eax\n
    unsigned int *v40;  // eax\n
    unsigned int *v41;  // eax\n
    unsigned int v42;  // ecx\n
    char *v43;  // eax\n
    char *v44;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v26 = 0;\n
    while (true)\n
    {\n
        v31 = v30;\n
        v30 = v31 + 1;\n
        v29 = *(v31);\n
        if (!v29)\n
            break;\n
        v23 = 32;\n
        while (v29 != 37)\n
        {\n
            if (v26 >= a3)\n
            {\n
                v32 = v26;\n
                v26 = v32 + 1;\n
                if (v32 == -1)\n
                    cgc__terminate();\n
            }\n
            else\n
            {\n
                v18 = v29;\n
                if (a1)\n
                    cgc_fwrite(&v18, 1, a1);\n
                if (a2)\n
                    v26[a2] = v18;\n
                v26 += 1;\n
            }\n
            v33 = v30;\n
            v30 = v33 + 1;\n
            v29 = *(v33);\n
            if (!v29)\n
                goto LABEL_4052d6;\n
        }\n
        v22 = v30;\n
        v28 = 4;\n
        v27 = 0;\n
        v34 = v30;\n
        v30 = v34 + 1;\n
        v5 = *(v34);\n
        v29 = v5;\n
        if (!v5)\n
            break;\n
        if (v5 == 32)\n
        {\n
            v23 = 32;\n
        }\n
        else if (v5 == 48)\n
        {\n
            v23 = 48;\n
        }\n
        else\n
        {\n
            v30 += 1;\n
        }\n
        if (*(v30) >= 48 && *(v30) <= 57)\n
            v27 = cgc_strtoul(v30, &v30);\n
        v35 = v30;\n
        v30 = v35 + 1;\n
        v4 = *(v35);\n
        v29 = v4;\n
        if (!v4)\n
            break;\n
        if (v4 == 104)\n
        {\n
            if (*(v30) != 104)\n
            {\n
                v28 = 2;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v4 != 108)\n
            {\n
                v30 += 1;\n
            }\n
            else if (*(v30) != 108)\n
            {\n
                v28 = 4;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 8;\n
            }\n
        }\n
        v36 = v30;\n
        v30 = v36 + 1;\n
        v3 = *(v36);\n
        v29 = v3;\n
        if (!v3)\n
        {\n
            v17 = v30 - v22;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            else\n
            {\n
                v16 = a3 - v26;\n
                if (v16 > v17)\n
                    v16 = v17;\n
                if (a1)\n
                    cgc_fwrite(v22, v16, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, v22, v16);\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            break;\n
        }\n
        if (v3 == 88)\n
        {\n
LABEL_404e5f:\n
            if (v29 == 100)\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v40 = a0;\n
                a0 = v40 + 1;\n
                v19 = *(v40);\n
                v0 = v19;\n
                v1 = 10;\n
                v2 = 0;\n
                cgc__convert_signed(&v25, v0, 10);\n
            }\n
            else\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v41 = a0;\n
                a0 = v41 + 1;\n
                v20 = *(v41);\n
                v42 = (v29 == 117 ? 16 : 10);\n
                v0 = v20;\n
                v1 = v42;\n
                v2 = v29 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v24 = cgc_strlen(&v25, v0, v1);\n
            if (v24 < v27)\n
            {\n
                v27 -= v24;\n
                do\n
                {\n
                    if (v26 >= a3)\n
                    {\n
                        v43 = v26;\n
                        v26 = v43 + 1;\n
                        if (v43 == -1)\n
                            cgc__terminate();\n
                    }\n
                    else\n
                    {\n
                        v13 = v23;\n
                        if (a1)\n
                            cgc_fwrite(&v13, 1, a1);\n
                        if (a2)\n
                            v26[a2] = v13;\n
                        v26 += 1;\n
                    }\n
                    v27 -= 1;\n
                } while (v27 > 0);\n
            }\n
            v12 = v24;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            else\n
            {\n
                v11 = a3 - v26;\n
                if (v11 > v12)\n
                    v11 = v12;\n
                if (a1)\n
                    cgc_fwrite(&v25, v11, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, &v25, v11);\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            goto LABEL_4052c7;\n
        }\n
        else\n
        {\n
            if (v3 == 99)\n
            {\n
                v37 = a0;\n
                a0 = v37 + 1;\n
                v29 = *(v37);\n
                if (v26 >= a3)\n
                {\n
                    v38 = v26;\n
                    v26 = v38 + 1;\n
                    if (v38 == -1)\n
                        cgc__terminate();\n
                }\n
                else\n
                {\n
                    v10 = v29;\n
                    if (a1)\n
                        cgc_fwrite(&v10, 1, a1);\n
                    if (a2)\n
                        v26[a2] = v10;\n
                    v26 += 1;\n
                }\n
                goto LABEL_4052c7;\n
            }\n
            if (v3 == 100)\n
                goto LABEL_404e5f;\n
            if (v3 == 115)\n
            {\n
                v39 = a0;\n
                a0 = v39 + 1;\n
                v21 = *(v39);\n
                v9 = cgc_strlen();\n
                if (v26 < a3)\n
                {\n
                    v8 = a3 - v26;\n
                    if (v8 > v9)\n
                        v8 = v9;\n
                    if (a1)\n
                        cgc_fwrite(v21, v8, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v21, v8);\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
                else\n
                {\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
LABEL_4052c7:\n
            }\n
            else if (v3 != 117 && v3 != 120)\n
            {\n
                v15 = v30 - v22;\n
                if (v26 < a3)\n
                {\n
                    v14 = a3 - v26;\n
                    if (v14 > v15)\n
                        v14 = v15;\n
                    if (a1)\n
                        cgc_fwrite(v22, v14, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v22, v14);\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                else\n
                {\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                goto LABEL_4052c7;\n
            }\n
        }\n
    }\n
LABEL_4052d6:\n
    a1 = 0;\n
    if (v26 >= a3)\n
    {\n
        v44 = v26;\n
        v26 = v44 + 1;\n
        if (v44 != -1)\n
            return v26 - 1;\n
        cgc__terminate();\n
    }\n
    else\n
    {\n
        v7 = 0;\n
        if (a1)\n
            cgc_fwrite(&v7, 1, a1);\n
        if (a2)\n
            v26[a2] = v7;\n
        v26 += 1;\n
        return v26 - 1;\n
    }\n
}\n
", "4215675:sub_40537b": null, "4215680:cgc__convert_signed": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_signed(char *v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 < 0)\n
    {\n
        v3 = v2;\n
        v2 = v3 + 1;\n
        *(v3) = 45;\n
        a0 = -(a0);\n
    }\n
    v0 = a2;\n
    return cgc__convert_unsigned(v2, a0, a1);\n
}\n
", "4215789:sub_4053ed": null, "4215792:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_unsigned(char *v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v4[20];\n
    if (a2)\n
        v3 = v1 - 10797;\n
    else\n
        v3 = v1 - 10780;\n
    v5 = v2;\n
    v2 = v5 + 1;\n
    if (!a0)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        v6[1].field_-1 = *(v3);\n
        return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
    }\n
    for (v5[1].field_-1 = 0; a0; a0 = (0 CONCAT a0) /m a1)\n
    {\n
        v0 = v3;\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT a0) /m a1 >> 32];\n
    }\n
    return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
}\n
", "4216041:sub_4054e9": null, "4216048:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(unsigned short *v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4216107:sub_40552b": null, "4216112:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(a0));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4216289:sub_4055e1": null, "4216304:cgc_strcasestr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasestr(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!v3[v6])\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v2;\n
        if (!cgc_strncasecmp(&v3[v6], a0))\n
        {\n
            v4 = v6 + v3;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4216461:sub_40568d": null, "4216464:cgc_strchr": "int cgc_strchr(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = 0; *((v2 + v0)); v0 += 1)\n
    {\n
        if (*((v2 + v0)) == a0)\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2 + v0;\n
    return v1;\n
}\n
", "4216593:sub_405711": null, "4216608:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4216736:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); v0 += 1)\n
    {\n
        *(v0) = *(a0);\n
        a0 += 1;\n
    }\n
    *(v0) = 0;\n
    return v1;\n
}\n
", "4216814:sub_4057ee": null, "4216816:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v2[v1] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4216950:sub_405876": null, "4216960:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217016:sub_4058b8": null, "4217024:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v5[a1];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v5))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v5));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(a0)))\n
                    v1 = v5 < v3;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v5 += 1;\n
        a0 += 1;\n
    }\n
    if (v5 == v3)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = *(v5) - *(a0);\n
    return v4;\n
}\n
", "4217260:sub_4059ac": null, "4217264:cgc_strncpy": "int cgc_strncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v2;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(a0))\n
            v0 = v1 - v2 < a1;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(a0);\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - v2 < a1; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return v2;\n
}\n
", "4217421:sub_405a4d": null, "4217424:cgc_strndup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strndup(char *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen(v5);\n
    if (v2 > a0)\n
        v2 = a0;\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    *((v1 + v2)) = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217579:sub_405aeb": null, "4217584:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = &*(v4)->field_0;\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v2 = 0; v1[v2]; v2 += 1)\n
    {\n
        if (cgc_strchr(a0, v1[v2]))\n
            break;\n
    }\n
    if (!v1[v2])\n
        *(v4) = 0;\n
    else\n
        *(v4) = &v1[1 + v2];\n
    v1[v2] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217803:sub_405bcb": null, "4217808:cgc_strstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strstr(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!v1[v3])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(&v1[v3], a0))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v3 + v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4217944:sub_405c58": null, "4217952:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v11[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x14]\n
    char v9[2];  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v9) = v11;\n
    v8 = 1;\n
    v7 = 1;\n
    v6 = 0;\n
    for (v5 = 0; cgc_isspace(*(v11)); v11 += 1)\n
    {\n
        if (!*(v11))\n
            goto LABEL_405e1f;\n
    }\n
    if (*(v11) == 43)\n
    {\n
        v8 = 1;\n
        v11 += 1;\n
    }\n
    else if (*(v11) == 45)\n
    {\n
        v8 = -1;\n
        v11 += 1;\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
            v11 += 2;\n
        goto LABEL_405e2e;\n
    }\n
    if (a1)\n
    {\n
LABEL_405e2e:\n
        for (; *(v11); v11 += 1)\n
        {\n
            if (cgc_isdigit(*(v11)))\n
            {\n
                v4 = *(v11) - 48;\n
            }\n
            else if (cgc_islower(*(v11)))\n
            {\n
                v4 = *(v11) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v11)))\n
                    break;\n
                v4 = *(v11) + -55;\n
            }\n
            if (v4 >= a1)\n
                break;\n
            v7 = 0;\n
            v5 = a1 * v5 + v4;\n
            if (v5 > 2147483647)\n
                v6 = 1;\n
        }\n
    }\n
    if (*(v11) == 48 && *((v11 + 1)) >= 48 && *((v11 + 1)) <= 55)\n
    {\n
        *(&v11) = v11 + 1;\n
        a1 = 8;\n
        goto LABEL_405e1f;\n
    }\n
    if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
    {\n
        v11 += 2;\n
        a1 = 16;\n
        goto LABEL_405e1f;\n
    }\n
    if (!cgc_isdigit(*(v11)))\n
        goto LABEL_405e1f;\n
    a1 = 10;\n
LABEL_405e1f:\n
    if (a0)\n
    {\n
        if (v7)\n
            *(&v2) = v9;\n
        else\n
            v2 = v11;\n
        *(a0) = v2;\n
    }\n
    if (v8 >= 0)\n
    {\n
        if (v6)\n
            v0 = 2147483647;\n
        else\n
            v0 = v5;\n
        v10 = v0;\n
        return v10;\n
    }\n
    else\n
    {\n
        if (v6)\n
            v1 = 0x80000000;\n
        else\n
            v1 = -(v5);\n
        v10 = v1;\n
        return v10;\n
    }\n
}\n
", "4218803:sub_405fb3": null, "4218816:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_41;  // tmp #41\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x18]\n
    char v11[2];  // [bp-0x14]\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v11) = v12;\n
    v10 = 1;\n
    v9 = 1;\n
    v8 = 0;\n
    v7 = 0;\n
    for (v6 = 0; cgc_isspace(v12[0]); v12 = &v12[1])\n
    {\n
        if (!v12[0])\n
            goto LABEL_406188;\n
    }\n
    if (*(v12) == 43)\n
    {\n
        v10 = 1;\n
        v12 = &v12[1];\n
    }\n
    else if (*(v12) == 45)\n
    {\n
        v10 = -1;\n
        v12 = &v12[1];\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
            v12 += 2;\n
        goto LABEL_406197;\n
    }\n
    if (a1)\n
    {\n
LABEL_406197:\n
        for (; *(v12); v12 = &v12[1])\n
        {\n
            if (cgc_isdigit(*(v12)))\n
            {\n
                v5 = *(v12) - 48;\n
            }\n
            else if (cgc_islower(*(v12)))\n
            {\n
                v5 = *(v12) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v12)))\n
                    break;\n
                v5 = *(v12) + -55;\n
            }\n
            if (v5 >= a1)\n
                break;\n
            v9 = 0;\n
            v3 = v7;\n
            v13 = v6 * a1;\n
            tmp_41 = v13;\n
            v15 = (v6 * a1 >> 32) + (a1 >> 31) * v6 + a1 * v3 + (v5 >> 31) + (tmp_41 + v5 < tmp_41);\n
            v6 = v13 + v5;\n
            v7 = v15;\n
            if (v7)\n
                v8 = 1;\n
        }\n
    }\n
    if (*(v12) == 48 && *((v12 + 1)) >= 48 && *((v12 + 1)) <= 55)\n
    {\n
        *(&v12) = &v12[1];\n
        a1 = 8;\n
        goto LABEL_406188;\n
    }\n
    if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
    {\n
        v12 += 2;\n
        a1 = 16;\n
        goto LABEL_406188;\n
    }\n
    if (!cgc_isdigit(*(v12)))\n
        goto LABEL_406188;\n
    a1 = 10;\n
LABEL_406188:\n
    if (a0)\n
    {\n
        if (v9)\n
            *(&v2) = v11;\n
        else\n
            v2 = v12;\n
        *(a0) = v2;\n
    }\n
    if (v10 < 0)\n
    {\n
        if ((!(!(v7 CONCAT v6) << 1 >> 32) || !(!v7 >> 31)) && (!(!(v6 ^ 0x80000000)) || !(!v7)))\n
            v8 = 1;\n
        tmp_6 = v6;\n
        v6 = -(v6);\n
        v7 = -(v7) - (0 < tmp_6);\n
    }\n
    if (v8)\n
    {\n
        v0 = -1;\n
        v1 = 0;\n
        return v0;\n
    }\n
    v0 = v6;\n
    v1 = v7;\n
    return v0;\n
}\n
", "4219767:sub_406377": null, "4219776:cgc_create_random_shorts": "int cgc_create_random_shorts()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = 0x4347c000;\n
    v1 = cgc_malloc(0x800);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v0 = 0; v0 < 0x400; v0 += 1)\n
    {\n
        *((v1 + v0 * 2)) = v2[3 * v0];\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4219913:sub_406409": null, "4219920:cgc_get_rand_short": "typedef struct struct_0 {\n
    char padding_0[3452];\n
    struct struct_1 *field_d7c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_g_random_usage;\n
\n
int cgc_get_rand_short(unsigned int v1)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax\n
    struct_0 *v3;  // edx\n
    unsigned short *v4;  // ecx\n
\n
    v0 = v2;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_g_random_usage >= 0x400)\n
        v0->field_d7c = 0;\n
    v3 = v0;\n
    v4 = v3->field_d7c;\n
    v3->field_d7c = v4 + 1;\n
    return *((v1 + v4 * 2));\n
}\n
", "4220005:sub_406465": null, "4220016:cgc_readline": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readline(char *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4 && a0 >= 2)\n
    {\n
        v2 = 0;\n
        for (v2 = 0; v2 < a0; v2 += 1)\n
        {\n
            v1 = cgc_get_byte();\n
            if (v1 == -1)\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
            v4[v2] = v1;\n
            if (v4[v2] == 10)\n
            {\n
                v4[v2] = 0;\n
                break;\n
            }\n
        }\n
        if (v2 != a0 && v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4220257:sub_406561": null, "4220272:cgc_readnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readnum(char v3[2], unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_readline(v3, a0);\n
    if (v1)\n
    {\n
        *(a1) = 0;\n
        return v1;\n
    }\n
    *(a1) = cgc_strtol(v3, NULL, 10);\n
    return v1;\n
}\n
", "4220396:sub_4065ec": null, "4220400:cgc_select_menu_choice": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_select_menu_choice(char v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    cgc_printf(\"Make a selection: \\n
1. Input Matrix\\n
2. Print Matrix\\n
3. Add Matrices\\n
4. Subtract Matrices\\n
5. Multiply Matrices\\n
6. Swap Matrix Row\\n
7. Swap Matrix Col\\n
8. Transpose Matrix\\n
9. Perform Reduced Row Echelon Form on Matrix\\n
10. Randomize Matrix\\n
11. Exit\\n
>> \");\n
    if (cgc_readnum(v4, a0, &v1) == 1)\n
    {\n
        v2 = 11;\n
        return v2;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4220513:sub_406661": null, "4220528:cgc_choose_matrix": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_choose_matrix(unsigned int v6, unsigned int a0, char a1[2], unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    cgc_printf(\"Select Matrix 1 or Matrix 2\\n
>> \");\n
    v2 = cgc_readnum(a1, a2, &v3);\n
    if (v2 == 1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    if (v3 == 2)\n
        v0 = a0;\n
    else\n
        v0 = v6;\n
    v4 = v0;\n
    return v4;\n
}\n
", "4220685:sub_40670d": null, "4220688:cgc_resize_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_resize_matrix(struct_1 *v4, char a0[2], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        cgc_printf(v0 - 10437);\n
        if (cgc_readnum(a0, a1, &v2) == 1)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (!v2)\n
            v2 = v4->field_0;\n
        cgc_printf(v0 - 10401);\n
        if (cgc_readnum(a0, a1, &v1) == 1)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (!v1)\n
            v1 = v4->field_4;\n
        if (!v4->field_20(v4, v2))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_printf(v0 - 10362);\n
    }\n
}\n
", "4220992:cgc_input_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_input_matrix(struct_1 *v12, void* a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    char *v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    void* v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x28]\n
    char v6[2];  // [bp-0x24], Other Possible Types: void*\n
    void* v7;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_resize_matrix(v12, a0, a1) == 1)\n
    {\n
        v10 = 1;\n
        return v10;\n
    }\n
    v9 = v12->field_4 * v12->field_0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v7 = cgc_readline(a0, a1);\n
    if (v7 != 1 && v7 != -1)\n
    {\n
        v5 = 1;\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1 = v4;\n
            if (v1 >= cgc_strlen(a0))\n
                break;\n
            if (*(a0 + v4) == 32)\n
                v5 += 1;\n
            v4 += 1;\n
        }\n
        if (v5 != v9)\n
        {\n
            cgc_printf(v2 - 10319);\n
            v10 = -1;\n
            return v10;\n
        }\n
        for (v4 = 0; v4 < v12->field_0; v4 += 1)\n
        {\n
            for (v3 = 0; v3 < v12->field_4; v3 += 1)\n
            {\n
                *(&v6) = cgc_strsep(&a0, v2 - 10364);\n
                if (!v6)\n
                {\n
                    v10 = 1;\n
                    return v10;\n
                }\n
                v8 = cgc_strtol(v6, NULL, 10);\n
                v0 = v8;\n
                v12->field_18(v12, v4, v3);\n
            }\n
        }\n
        v10 = 0;\n
        return v10;\n
    }\n
    cgc_printf(v2 - 10319);\n
    v10 = v7;\n
    return v10;\n
}\n
", "4221530:sub_406a5a": null, "4221536:cgc_random_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_matrix(struct_1 *v8, char a0[2], unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    struct struct_0 **v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_resize_matrix(v8, a0, a1) == 1)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    for (v5 = 0; v5 < v8->field_0; v5 += 1)\n
    {\n
        for (v4 = 0; v4 < v8->field_4; v4 += 1)\n
        {\n
            v2 = &v8->field_18->field_0;\n
            v1 = v4;\n
            v0 = cgc_get_rand_short(a2);\n
            v2(v8, v5, v1);\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4221779:sub_406b53": null, "4221792:cgc_print_matrix": "typedef struct struct_1 {\n
    char padding_0[36];\n
    struct struct_0 *field_24;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_matrix(unsigned int v3, struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v3;\n
    cgc_printf(\"%s\\n
\");\n
    v5 = v2;\n
    return a0->field_24(a0);\n
}\n
", "4221864:sub_406ba8": null, "4221872:cgc_print_matrices": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_matrices(void* v2, void* a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_print_matrix(\"-Matrix 1-\", v2);\n
    cgc_printf(v0 - 9964);\n
    cgc_print_matrix(v0 - 10293, a0);\n
    cgc_printf(v0 - 9964);\n
    v4 = v1;\n
    return cgc_print_matrix(v0 - 10282, a1);\n
}\n
", "4222012:sub_406c3c": null, "4222016:cgc_add_matrices": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_matrices(unsigned int v3, unsigned int a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a1;\n
    if (!cgc_m_add(v3, a0))\n
    {\n
        v5 = cgc_print_matrix(v1 - 9991, a1);\n
        return v5;\n
    }\n
    v5 = cgc_printf(v1 - 10263);\n
    return v5;\n
}\n
", "4222133:sub_406cb5": null, "4222144:cgc_subtract_matrices": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_subtract_matrices(unsigned int v3, unsigned int a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a1;\n
    if (!cgc_m_subtract(v3, a0))\n
    {\n
        v5 = cgc_print_matrix(v1 - 9991, a1);\n
        return v5;\n
    }\n
    v5 = cgc_printf(v1 - 10217);\n
    return v5;\n
}\n
", "4222261:sub_406d35": null, "4222272:cgc_multiply_matrices": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_multiply_matrices(unsigned int v3, unsigned int a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a1;\n
    if (!cgc_m_multiply(v3, a0))\n
    {\n
        v5 = cgc_print_matrix(v1 - 9991, a1);\n
        return v5;\n
    }\n
    v5 = cgc_printf(v1 - 10175);\n
    return v5;\n
}\n
", "4222389:sub_406db5": null, "4222400:cgc_swap_matrix_row_col": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_swap_matrix_row_col(unsigned int v6[2], unsigned int a0, char a1[2], unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a0 == 1)\n
    {\n
        v1 = v0 - 10124;\n
        v2 = v6[0];\n
    }\n
    else if (a0 == 2)\n
    {\n
        v1 = v0 - 10120;\n
        v2 = v6[1];\n
    }\n
    else\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    cgc_printf(v0 - 10113);\n
    if (cgc_readnum(a1, a2, &v4) == 1)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (v4 < v2)\n
    {\n
        cgc_printf(v0 - 10094);\n
        if (cgc_readnum(a1, a2, &v3) == 1)\n
        {\n
            v5 = 1;\n
            return v5;\n
        }\n
        else if (v3 >= v2)\n
        {\n
            cgc_printf(v0 - 10319);\n
            v5 = -1;\n
            return v5;\n
        }\n
        else\n
        {\n
            cgc_print_matrix(v0 - 10075, v6);\n
            if (a0 == 1)\n
            {\n
                v5 = cgc_swap_row(v6, v4);\n
                return v5;\n
            }\n
            else if (a0 == 2)\n
            {\n
                v5 = cgc_swap_col(v6, v4);\n
                return v5;\n
            }\n
            else\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v0 - 10319);\n
        v5 = -1;\n
        return v5;\n
    }\n
}\n
", "4222903:sub_406fb7": null, "4222912:cgc_transpose_matrix": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transpose_matrix(void* v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_print_matrix(\"Original Matrix\", v2);\n
    cgc_m_transpose(v2);\n
    v4 = v1;\n
    return cgc_print_matrix(v0 - 10059, v2);\n
}\n
", "4223002:sub_40701a": null, "4223008:cgc_rref_matrix": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_rref_matrix(unsigned int v2, void* a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_m_rref(v2))\n
    {\n
        v4 = cgc_print_matrix(v0 - 9996, a0);\n
        return v4;\n
    }\n
    v4 = cgc_printf(v0 - 10041);\n
    return v4;\n
}\n
", "4223115:sub_40708b": null, "4223120:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x434]\n
    unsigned int v1;  // [bp-0x430]\n
    char v2[2];  // [bp-0x42c]\n
    unsigned int v3;  // [bp-0x428]\n
    unsigned int v4;  // [bp-0x424]\n
    unsigned int v5;  // [bp-0x420]\n
    unsigned int v6;  // [bp-0x18]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
\n
    v10 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = cgc_create_random_shorts();\n
    v5 = cgc_create_matrix(1);\n
    v4 = cgc_create_matrix(1);\n
    v3 = cgc_create_matrix(2);\n
    *(&v2) = cgc_malloc(0x800);\n
    cgc_printf(v1 - 9983);\n
    cgc_printf(v1 - 9962);\n
    while (true)\n
    {\n
        v7 = cgc_select_menu_choice(v2, 0x800);\n
        v0 = v7 - 1;\n
        if (v0 <= 10)\n
            break;\n
        cgc_printf(v1 - 9662);\n
    }\n
    goto *(((stack_base)[1072] + (stack_base)[1076] * 4 - 10760)) + (stack_base)[1072];\n
}\n
", "4223424:sub_4071c0": "int sub_4071c0()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
    void* v4;  // [bp-0x418]\n
    char v7;  // [bp+0x448]\n
    unsigned int v9;  // ebp\n
\n
    cgc_printf(*(&v0) - 9941);\n
    v4 = cgc_choose_matrix(*(&v3), *(&v2), *(&v1), 0x800);\n
    cgc_printf(*(&v0) - 9647);\n
    v9 = *(&v7);\n
    return;\n
}\n
", "4223573:sub_407255": "int sub_407255()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x424]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
\n
    cgc_printf(*(&v0) - 9915);\n
    cgc_print_matrices(*(&v3), *(&v2), *(&v1));\n
}\n
", "4223638:sub_407296": "int sub_407296()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x424]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
\n
    cgc_printf(*(&v0) - 9898);\n
    cgc_add_matrices(*(&v3), *(&v2), *(&v1));\n
}\n
", "4223703:sub_4072d7": "int sub_4072d7()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x424]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
\n
    cgc_printf(*(&v0) - 9880);\n
    cgc_subtract_matrices(*(&v3), *(&v2), *(&v1));\n
}\n
", "4223768:sub_407318": "int sub_407318()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x424]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
\n
    cgc_printf(*(&v0) - 9857);\n
    cgc_multiply_matrices(*(&v3), *(&v2), *(&v1));\n
}\n
", "4223833:sub_407359": "int sub_407359()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
    unsigned int v4[2];  // [bp-0x418]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    cgc_printf(*(&v0) - 9834);\n
    v4[0] = cgc_choose_matrix(*(&v3), *(&v2), *(&v1), 0x800);\n
    if (v4)\n
    {\n
        v5 = cgc_swap_matrix_row_col(v4, 1, *(&v1), 0x800);\n
        if (v5 != 1 && !v5)\n
            cgc_print_matrix(*(&v0) - 9809, v4);\n
    }\n
}\n
", "4224034:sub_407422": "int sub_407422()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
    unsigned int v4[2];  // [bp-0x418]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    cgc_printf(*(&v0) - 9796);\n
    v4[0] = cgc_choose_matrix(*(&v3), *(&v2), *(&v1), 0x800);\n
    if (v4)\n
    {\n
        v5 = cgc_swap_matrix_row_col(v4, 2, *(&v1), 0x800);\n
        if (v5 != 1 && !v5)\n
            cgc_print_matrix(*(&v0) - 9768, v4);\n
    }\n
}\n
", "4224235:sub_4074eb": "int sub_4074eb()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
    void* v4;  // [bp-0x418]\n
\n
    cgc_printf(*(&v0) - 9752);\n
    v4 = cgc_choose_matrix(*(&v3), *(&v2), *(&v1), 0x800);\n
    if (v4)\n
        cgc_transpose_matrix(v4);\n
}\n
", "4224352:sub_407560": "int sub_407560()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x424]\n
    char v3;  // [bp-0x420]\n
    char v4;  // [bp-0x41c]\n
    unsigned int v5;  // [bp-0x418]\n
\n
    cgc_printf(*(&v0) - 9731);\n
    v5 = cgc_choose_matrix(*(&v4), *(&v3), *(&v1), 0x800);\n
    if (v5)\n
        cgc_rref_matrix(v5, *(&v2));\n
}\n
", "4224479:sub_4075df": "int sub_4075df()\n
{\n
    char v0;  // [bp-0x42c]\n
    char v1;  // [bp-0x428]\n
    char v2;  // [bp-0x420]\n
    char v3;  // [bp-0x41c]\n
    void* v4;  // [bp-0x418]\n
\n
    cgc_printf(*(&v0) - 9687);\n
    v4 = cgc_choose_matrix(*(&v3), *(&v2), *(&v1), 0x800);\n
}\n
", "4224635:sub_40767b": "int sub_40767b()\n
{\n
}\n
", "4224696:sub_4076b8": null, "4224704:cgc_get_byte": "extern unsigned int _GLOBAL_OFFSET_TABLE_[882];\n
extern unsigned int cgc_get_byte.rxcnt;\n
extern unsigned int cgc_get_byte.rxidx;\n
\n
int cgc_get_byte()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1[882];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5[882];  // eax\n
    unsigned int v6[882];  // eax\n
    unsigned int v7;  // ecx\n
\n
    v1[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (cgc_get_byte.rxidx != cgc_get_byte.rxcnt)\n
    {\n
LABEL_407747:\n
        v6 = v1;\n
        v7 = v6[880];\n
        v6[880] = v7 + 1;\n
        v3 = *(3456 + &v6[0] + v7);\n
        return v3;\n
    }\n
    v0 = &v2;\n
    if (!cgc_receive(0, &v1[864], 64) && *(&v2))\n
    {\n
        v5 = v1;\n
        v5[881] = *(&v2);\n
        v5[880] = 0;\n
        goto LABEL_407747;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4224879:sub_40776f": null, "4224880:cgc_create_matrix": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_matrix(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3[10];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4[10];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3[0] = 0;\n
    if (!a0)\n
    {\n
        v0 = v5;\n
        if (v0 == 1)\n
        {\n
            v2 = 0x200;\n
        }\n
        else if (v0 == 2)\n
        {\n
            v2 = 0x400;\n
        }\n
        else if (v0 == 4)\n
        {\n
            v2 = 0x400;\n
        }\n
        v3 = cgc_calloc(1, v2 + 40);\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        *((v3 + 12)) = v3 + 40;\n
    }\n
    else\n
    {\n
        v3[0] = cgc_calloc(1, 40);\n
        if (!v3)\n
        {\n
            v4[0] = 0;\n
            return v4;\n
        }\n
        *((v3 + 12)) = a0;\n
    }\n
    v6 = v1;\n
    *(v3) = 1;\n
    *((v3 + 4)) = 1;\n
    *((v3 + 8)) = v5;\n
    *((v3 + 16)) = v6 - 21280;\n
    *((v3 + 20)) = v6 - 21008;\n
    *((v3 + 24)) = v6 - 20752;\n
    *((v3 + 28)) = v6 - 20496;\n
    *((v3 + 32)) = v6 - 20192;\n
    *((v3 + 36)) = v6 - 20080;\n
    v4 = v3;\n
    return v4;\n
}\n
", "4225252:sub_4078e4": null, "4225264:cgc_m_get_cell": "int cgc_m_get_cell(unsigned int v5[4], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned short v1;  // [bp-0x10]\n
    unsigned short v2;  // [bp-0xe]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    if (!v5)\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    if (a0 <= v5[0] && a1 <= v5[1])\n
    {\n
        v0 = v5[2];\n
        if (v0 == 1)\n
        {\n
            v4 = *((v5[3] + (v5[1] * a0 + a1) * 2));\n
            return v4;\n
        }\n
        else if (v0 == 2)\n
        {\n
            v4 = *((v5[3] + (v5[1] * a0 + a1) * 4));\n
            return v4;\n
        }\n
        else if (v0 != 4)\n
        {\n
            return v4;\n
        }\n
        else\n
        {\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                [D] PutI(72:F64x8)[t5,0] = t8\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t5,0] = t8\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
            }\n
            v2 = [D] x86g_create_fpucw(fpround<4>);\n
            v1 = v2 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v3 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v3 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4225522:sub_4079f2": null, "4225536:cgc_m_get_fcell": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_m_get_fcell(struct_0 *v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_3;  // tmp #3\n
    unsigned short v1;  // [bp-0xe]\n
    struct_0 *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v6;  // eax\n
    unsigned int v8;  // eax\n
    struct_0 *v9;  // eax\n
\n
    v5 = v4;\n
    if (!v4)\n
    {\n
        v3 = 0x3f800000;\n
    }\n
    else\n
    {\n
        v5 = a0;\n
        if (v5 > v4->field_0)\n
        {\n
LABEL_407a42:\n
            v3 = 0xbf800000;\n
        }\n
        else\n
        {\n
            v5 = a1;\n
            if (!(v5 <= v4->field_4))\n
                goto LABEL_407a42;\n
            v0 = v4->field_8;\n
            if (v0 == 1)\n
            {\n
                v6 = v4;\n
                v5 = v6[1].field_0;\n
                *(&v5) = *((v5 + (v6->field_4 * a0 + a1) * 2));\n
                v1 = v5;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v3 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                }\n
                else\n
                {\n
                    v3 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                }\n
            }\n
            else if (v0 == 2)\n
            {\n
                v9 = v4;\n
                v5 = (&v9[1].field_0->field_0)[a1 + v9->field_4 * a0];\n
                v2 = v5;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v3 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                }\n
                else\n
                {\n
                    v3 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                }\n
            }\n
            else\n
            {\n
                v8 = v0;\n
                tmp_3 = v8;\n
                v5 = v8 - 4;\n
                if (tmp_3 == 4)\n
                {\n
                    v5 = v4[1].field_0;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t5,0] = t8\n
                        [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t5,0] = t8\n
                        [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    }\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v3 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    }\n
                    else\n
                    {\n
                        v3 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v5;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v5;\n
}\n
", "4225781:sub_407af5": null, "4225792:cgc_m_set_cell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_m_set_cell(struct_0 *v3, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // eax\n
    unsigned int *v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    if (!v3)\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
    if (a0 <= v3->field_0 && a1 <= v3->field_4)\n
    {\n
        v0 = v3->field_8;\n
        if (v0 == 1)\n
        {\n
            *((&v3->field_c->field_0 + 2 * v3->field_4 * a0 + 2 * a1)) = a2;\n
        }\n
        else if (v0 == 2)\n
        {\n
            v3->field_c[a1 + v3->field_4 * a0].field_0 = a2;\n
        }\n
        else if (v0 == 4)\n
        {\n
            v1 = a2;\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v4 = v3;\n
            v6 = v4->field_c;\n
            v7 = v4->field_4 * a0 + a1;\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                v6[v7] = [D] GetI(72:F64x8)[t9,0];\n
                [D] PutI(136:I8x8)[t9,0] = 0x00\n
            }\n
            else\n
            {\n
                v6[v7] = nan;\n
                [D] PutI(136:I8x8)[t9,0] = 0x00\n
            }\n
        }\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4226043:sub_407bfb": null, "4226048:cgc_m_set_fcell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_m_set_fcell(struct_0 *v8, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x1a]\n
    unsigned short v2;  // [bp-0x18]\n
    unsigned short v3;  // [bp-0x16]\n
    unsigned short v4;  // [bp-0x14]\n
    unsigned short v5;  // [bp-0x12]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v11;  // eax\n
    unsigned int v12;  // ecx\n
\n
    if ([D] GetI(136:I8x8)[t35,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,0] = t8\n
    [D] PutI(136:I8x8)[t7,0] = 0x01\n
    [D] PutI(136:I8x8)[t7,0] = 0x00\n
    if (!v8)\n
    {\n
        v7 = 1;\n
        return v7;\n
    }\n
    if (a0 <= v8->field_0 && a1 <= v8->field_4)\n
    {\n
        v0 = v8->field_8;\n
        if (v0 == 1)\n
        {\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v4 = [D] x86g_create_fpucw(fpround<4>);\n
            v3 = v4 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                v5 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v5 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            *((&v8->field_c->field_0 + 2 * v8->field_4 * a0 + 2 * a1)) = v5;\n
        }\n
        else if (v0 == 2)\n
        {\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v2 = [D] x86g_create_fpucw(fpround<4>);\n
            v1 = v2 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                v6 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v6 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            v8->field_c[a1 + v8->field_4 * a0].field_0 = v6;\n
        }\n
        else if (v0 == 4)\n
        {\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v9 = v8;\n
            v11 = v9->field_c;\n
            v12 = v9->field_4 * a0 + a1;\n
            if ([D] GetI(136:I8x8)[t35,0])\n
            {\n
                v11[v12] = [D] GetI(72:F64x8)[t9,0];\n
                [D] PutI(136:I8x8)[t9,0] = 0x00\n
            }\n
            else\n
            {\n
                v11[v12] = nan;\n
                [D] PutI(136:I8x8)[t9,0] = 0x00\n
            }\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    v7 = -1;\n
    return v7;\n
}\n
", "4226349:sub_407d2d": null, "4226352:cgc_m_set_rows_cols": "int cgc_m_set_rows_cols(unsigned int v1[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a0 <= 16 && a1 <= 16)\n
    {\n
        v1[0] = a0;\n
        v1[1] = a1;\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4226451:sub_407d93": null, "4226464:print_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
    struct struct_0 *field_14;\n
    char padding_18[3504];\n
    char field_dc8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int print_matrix(struct_1 *v35)\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    unsigned int v2;  // [bp-0x7c]\n
    unsigned int v3;  // [bp-0x74]\n
    struct_1 *v4;  // [bp-0x70]\n
    unsigned short v5;  // [bp-0x6c]\n
    unsigned short v6;  // [bp-0x6a]\n
    unsigned short v7;  // [bp-0x68]\n
    unsigned short v8;  // [bp-0x66]\n
    unsigned short v9;  // [bp-0x64]\n
    unsigned short v10;  // [bp-0x62]\n
    unsigned short v11;  // [bp-0x60]\n
    unsigned short v12;  // [bp-0x5e]\n
    unsigned short v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x5a]\n
    unsigned short v15;  // [bp-0x58]\n
    unsigned short v16;  // [bp-0x56]\n
    unsigned short v17;  // [bp-0x54]\n
    unsigned short v18;  // [bp-0x52]\n
    unsigned int v19;  // [bp-0x50]\n
    unsigned int v20;  // [bp-0x4c]\n
    unsigned int v21;  // [bp-0x48]\n
    unsigned int v22;  // [bp-0x44]\n
    unsigned int v23;  // [bp-0x40]\n
    unsigned int v24;  // [bp-0x3c]\n
    unsigned int v25;  // [bp-0x38]\n
    unsigned int v26;  // [bp-0x34]\n
    unsigned int v27;  // [bp-0x30]\n
    unsigned int v28;  // [bp-0x2c]\n
    void* v29;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v30;  // [bp-0x24]\n
    unsigned int v31;  // [bp-0x20]\n
    unsigned int v32;  // [bp-0x1c]\n
    void* v33;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v34;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v36;  // eax\n
    struct_1 *v37;  // ebx\n
    struct_1 *v38;  // edx\n
    struct_1 *v39;  // ebx\n
    unsigned int v41;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v63;  // ftop\n
    unsigned int v64;  // ftop\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    unsigned int v68;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70;  // ftop\n
    unsigned int v71;  // ftop\n
    unsigned int v72;  // ftop\n
    unsigned int v73;  // ftop\n
    unsigned int v74;  // fpround\n
    unsigned int v75;  // ftop\n
    unsigned int v76;  // ftop\n
    unsigned int v77;  // ftop\n
    unsigned int v78;  // ftop\n
    unsigned int v79;  // ftop\n
    unsigned int v81;  // fpround\n
    unsigned int v82;  // ftop\n
    unsigned int v83;  // ftop\n
    unsigned int v84;  // ftop\n
    unsigned int v85;  // ftop\n
    unsigned int v86;  // ftop\n
    struct_1 *v87;  // ebx\n
    unsigned int v88;  // ftop\n
    unsigned int v89;  // ftop\n
    unsigned int v90;  // ftop\n
    unsigned int v91;  // ftop\n
    unsigned int v92;  // ftop\n
    struct_1 *v93;  // ebx\n
    struct_1 *v94;  // ebx\n
    unsigned int v95;  // ftop\n
    struct_1 *v96;  // ebx\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.field_0;\n
    if (!v35)\n
        return v35;\n
    v4->field_dc8 = 0;\n
    for (v34 = 0; v34 < v35->field_0; v34 += 1)\n
    {\n
        v37 = v4;\n
        v0 = &v37->field_dc8;\n
        cgc_sprintf(v0, &v37[2].padding_18[2510]);\n
        for (v33 = 0; v33 < v35->field_4; v33 += 1)\n
        {\n
            if (cgc_strlen(&v4->field_dc8) > 7192)\n
            {\n
                cgc_strlen(&v4->field_dc8);\n
                cgc_transmitall(&v4->field_dc8);\n
                v4->field_dc8 = 0;\n
            }\n
            if (v35->field_8 != 4)\n
            {\n
                v0 = v33;\n
                v39 = v4;\n
                v0 = &v39->field_dc8;\n
                v1 = v35->field_10(v35, v34);\n
                cgc_sprintf(v0, &v39[2].padding_18[2506]);\n
            }\n
            else\n
            {\n
                v38 = v35;\n
                v0 = v33;\n
                v38->field_14(v38, v34);\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v32 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v41 = v95 + 1;\n
                }\n
                else\n
                {\n
                    v32 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v41 = v95 + 1;\n
                }\n
                v43 = v41 - 1;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v44 = v43 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v44 = v43 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v45 = v44 - 1;\n
                [D] PutI(72:F64x8)[t2,0] = t5\n
                [D] PutI(136:I8x8)[t2,0] = 0x01\n
                [D] PutI(72:F64x8)[t15,0] = t19\n
                [D] PutI(136:I8x8)[t15,0] = 0x01\n
                [D] PutI(72:F64x8)[t15,1] = t12\n
                [D] PutI(136:I8x8)[t15,1] = 0x01\n
                [D] PutI(136:I8x8)[t35,0] = 0x00\n
                [D] PutI(72:F64x8)[t49,0] = t50\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                [D] PutI(136:I8x8)[t49,0] = 0x00\n
                v47 = v45 + 1 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
                {\n
                    v49 = v47 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v51 = v49 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v51 = v49 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v52 = v51 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v54 = v52 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v54 = v52 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,1] = t2\n
                    [D] PutI(136:I8x8)[t1,1] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v55 = v54 + 1;\n
                    v3 = ([D] GetI(136:I8x8)[t27,0] ? [D] GetI(72:F64x8)[t27,0] : nan);\n
                    [D] PutI(136:I8x8)[t27,0] = 0x00\n
                    v53 = v55 + 1;\n
                }\n
                else\n
                {\n
                    v48 = v47 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v50 = v48 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v50 = v48 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v3 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v53 = v50 + 1;\n
                    }\n
                    else\n
                    {\n
                        v3 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v53 = v50 + 1;\n
                    }\n
                }\n
                v56 = v53 - 1;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v57 = v56 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v57 = v56 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v31 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v58 = v57 + 1;\n
                }\n
                else\n
                {\n
                    v31 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v58 = v57 + 1;\n
                }\n
                v59 = v58 - 1;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v60 = v59 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v60 = v59 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v18 = [D] x86g_create_fpucw(fpround<4>);\n
                v17 = v18 | 0xc00;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v22 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v61 = v60 + 1;\n
                }\n
                else\n
                {\n
                    v22 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v61 = v60 + 1;\n
                }\n
                v30 = v22;\n
                v62 = v61 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v63 = v62 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v63 = v62 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v16 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-82, size=2, endness=Iend_LE)))));\n
                v15 = v16 | 0xc00;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                    v23 = nan;\n
                else\n
                    v23 = [D] GetI(72:F64x8)[t7,0];\n
                v24 = v23;\n
                v64 = v63 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v65 = v64 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v65 = v64 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t51,1] = t52\n
                [D] PutI(136:I8x8)[t51,1] = 0x01\n
                [D] PutI(136:I8x8)[t51,0] = 0x00\n
                v66 = v65 - 0;\n
                [D] PutI(72:F64x8)[t73,0] = t76\n
                [D] PutI(136:I8x8)[t73,0] = 0x01\n
                [D] PutI(72:F64x8)[t84,1] = t85\n
                [D] PutI(136:I8x8)[t84,1] = 0x01\n
                [D] PutI(136:I8x8)[t84,0] = 0x00\n
                v14 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-86, size=2, endness=Iend_LE)))));\n
                v13 = v14 | 0xc00;\n
                v25 = ([D] GetI(136:I8x8)[t130,0] ? [D] GetI(72:F64x8)[t130,0] : nan);\n
                [D] PutI(136:I8x8)[t130,0] = 0x00\n
                v68 = v66 + 1 + 1;\n
                v29 = v25;\n
                v69 = v68 - 1;\n
                [D] PutI(72:F64x8)[t155,0] = t158\n
                [D] PutI(136:I8x8)[t155,0] = 0x01\n
                v12 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-90, size=2, endness=Iend_LE)))));\n
                v11 = v12 | 0xc00;\n
                v26 = ([D] GetI(136:I8x8)[t192,0] ? [D] GetI(72:F64x8)[t192,0] : nan);\n
                v27 = v26;\n
                v70 = v69 - 1;\n
                [D] PutI(72:F64x8)[t214,0] = t217\n
                [D] PutI(136:I8x8)[t214,0] = 0x01\n
                [D] PutI(72:F64x8)[t225,1] = t226\n
                [D] PutI(136:I8x8)[t225,1] = 0x01\n
                [D] PutI(136:I8x8)[t225,0] = 0x00\n
                v71 = v70 - 0;\n
                [D] PutI(72:F64x8)[t247,0] = t250\n
                [D] PutI(136:I8x8)[t247,0] = 0x01\n
                [D] PutI(72:F64x8)[t258,1] = t259\n
                [D] PutI(136:I8x8)[t258,1] = 0x01\n
                [D] PutI(136:I8x8)[t258,0] = 0x00\n
                v72 = v71 + 1;\n
                v10 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-94, size=2, endness=Iend_LE)))));\n
                v9 = v10 | 0xc00;\n
                v28 = ([D] GetI(136:I8x8)[t304,0] ? [D] GetI(72:F64x8)[t304,0] : nan);\n
                [D] PutI(136:I8x8)[t304,0] = 0x00\n
                v73 = v72 + 1;\n
                v74 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-98, size=2, endness=Iend_LE)));\n
                if (v28 == 9999)\n
                {\n
                    v30 += 1;\n
                    v29 = 0;\n
                }\n
                else\n
                {\n
                    v75 = v73 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v76 = v75 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v76 = v75 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v8 = [D] x86g_create_fpucw(fpround<4>);\n
                    v7 = v8 | 0xc00;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                        v19 = [D] GetI(72:F64x8)[t7,0];\n
                    else\n
                        v19 = nan;\n
                    v20 = v19;\n
                    v77 = v76 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v78 = v77 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v78 = v77 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t18,1] = t19\n
                    [D] PutI(136:I8x8)[t18,1] = 0x01\n
                    [D] PutI(136:I8x8)[t18,0] = 0x00\n
                    v79 = v78 - 0;\n
                    [D] PutI(72:F64x8)[t40,0] = t43\n
                    [D] PutI(136:I8x8)[t40,0] = 0x01\n
                    [D] PutI(72:F64x8)[t51,1] = t52\n
                    [D] PutI(136:I8x8)[t51,1] = 0x01\n
                    [D] PutI(136:I8x8)[t51,0] = 0x00\n
                    v6 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-102, size=2, endness=Iend_LE)))));\n
                    v5 = v6 | 0xc00;\n
                    v21 = ([D] GetI(136:I8x8)[t97,0] ? [D] GetI(72:F64x8)[t97,0] : nan);\n
                    [D] PutI(136:I8x8)[t97,0] = 0x00\n
                    v73 = v79 + 1 + 1;\n
                    v81 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-106, size=2, endness=Iend_LE)));\n
                    if (v21 == 1)\n
                        v29 = 0;\n
                }\n
                v82 = v73 - 1;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v83 = v82 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v83 = v82 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v84 = v83 - 1;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v85 = v84 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v85 = v84 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v86 = v85 + 1;\n
                [D] PutI(72:F64x8)[t19,0] = t20\n
                [D] PutI(136:I8x8)[t19,0] = 0x01\n
                [D] PutI(136:I8x8)[t19,0] = 0x00\n
                v95 = v86 + 1;\n
                if (((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v87 = v4;\n
                    v0 = &v87->field_dc8;\n
                    cgc_sprintf(v0, &v87[2].padding_18[2498]);\n
                }\n
                else\n
                {\n
                    v88 = v95 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v89 = v88 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v89 = v88 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v90 = v89 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v91 = v90 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v91 = v90 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    v92 = v91 + 1;\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    v95 = v92 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
                    {\n
                        v94 = v4;\n
                        v0 = &v94->field_dc8;\n
                        v1 = v30;\n
                        v2 = v29;\n
                        cgc_sprintf(v0, &v94[2].padding_18[2478]);\n
                    }\n
                    else\n
                    {\n
                        v93 = v4;\n
                        v0 = &v93->field_dc8;\n
                        v1 = v30;\n
                        v2 = v29;\n
                        cgc_sprintf(v0, &v93[2].padding_18[2489]);\n
                    }\n
                }\n
            }\n
        }\n
        v96 = v4;\n
        v0 = &v96->field_dc8;\n
        cgc_sprintf(v0, &v96[2].padding_18[3226]);\n
    }\n
    v36 = v4->field_dc8;\n
    if (v36)\n
    {\n
        cgc_strlen(&v4->field_dc8);\n
        cgc_transmitall(&v4->field_dc8);\n
        v36 = v4;\n
        *((v36 + 3528)) = 0;\n
        return v4;\n
    }\n
    return v4->field_dc8;\n
}\n
", "4227498:sub_4081aa": null, "4227504:cgc_m_add": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
    char padding_1c[4];\n
    struct struct_0 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_m_add(struct_1 *v7, struct_1 *a0, struct_2 *a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short v2;  // [bp-0x20]\n
    unsigned short v3;  // [bp-0x1e]\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v7 && a0 && a1)\n
    {\n
        if (v7->field_0 == a0->field_0 && v7->field_4 == a0->field_4)\n
        {\n
            a1->field_8 = 1;\n
            a1->field_20(a1, v7->field_0);\n
            for (v5 = 0; v5 < a1->field_0; v5 += 1)\n
            {\n
                for (v4 = 0; v4 < a1->field_4; v4 += 1)\n
                {\n
                    v3 = v7->field_10(v7, v5);\n
                    v2 = a0->field_10(a0, v5);\n
                    v0 = v3 + v2;\n
                    a1->field_18(a1, v5, v4);\n
                }\n
            }\n
            v6 = 0;\n
            return v6;\n
        }\n
        v6 = -1;\n
        return v6;\n
    }\n
    v6 = 1;\n
    return v6;\n
}\n
", "4227880:sub_408328": null, "4227888:cgc_m_subtract": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
    char padding_1c[4];\n
    struct struct_0 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_m_subtract(struct_1 *v7, struct_1 *a0, struct_2 *a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short v2;  // [bp-0x20]\n
    unsigned short v3;  // [bp-0x1e]\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v7 && a0 && a1)\n
    {\n
        if (v7->field_0 == a0->field_0 && v7->field_4 == a0->field_4)\n
        {\n
            a1->field_8 = 1;\n
            a1->field_20(a1, v7->field_0);\n
            for (v5 = 0; v5 < a1->field_0; v5 += 1)\n
            {\n
                for (v4 = 0; v4 < a1->field_4; v4 += 1)\n
                {\n
                    v3 = v7->field_10(v7, v5);\n
                    v2 = a0->field_10(a0, v5);\n
                    v0 = v3 - v2;\n
                    a1->field_18(a1, v5, v4);\n
                }\n
            }\n
            v6 = 0;\n
            return v6;\n
        }\n
        v6 = -1;\n
        return v6;\n
    }\n
    v6 = 1;\n
    return v6;\n
}\n
", "4228264:sub_4084a8": null, "4228272:cgc_m_multiply": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
    char padding_1c[4];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_m_multiply(struct_2 *v8, struct_2 *a0, struct_1 *a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x14]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v8 && a0 && a1)\n
    {\n
        if (v8->field_4 == a0->field_0)\n
        {\n
            a1->field_8 = 2;\n
            a1->field_20(a1, v8->field_0);\n
            for (v6 = 0; v6 < v8->field_0; v6 += 1)\n
            {\n
                for (v4 = 0; v4 < a0->field_4; v4 += 1)\n
                {\n
                    v3 = 0;\n
                    for (v5 = 0; v5 < v8->field_4; v5 += 1)\n
                    {\n
                        v1 = v8->field_10(v8, v6);\n
                        v3 = a0->field_10(a0, v5) * v1 + v3;\n
                    }\n
                    v0 = v3;\n
                    a1->field_18(a1, v6, v4);\n
                }\n
            }\n
            v7 = 0;\n
            return v7;\n
        }\n
        else\n
        {\n
            v7 = -1;\n
            return v7;\n
        }\n
    }\n
    v7 = 1;\n
    return v7;\n
}\n
", "4228676:sub_408644": null, "4228688:cgc_swap_row": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_0 *field_14;\n
    char padding_18[4];\n
    struct struct_0 *field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_swap_row(struct_1 *v7, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    struct_1 *v8;  // edx\n
    unsigned int v10;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    if (a0 <= v7->field_0 && a1 <= v7->field_0)\n
    {\n
        for (v3 = 0; v3 < v7->field_4; v3 += 1)\n
        {\n
            v8 = v7;\n
            v0 = v3;\n
            v8->field_14(v8, a0);\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v5 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v10 = v18 + 1;\n
            }\n
            else\n
            {\n
                v5 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v10 = v18 + 1;\n
            }\n
            v0 = v3;\n
            v7->field_14();\n
            if (![D] GetI(136:I8x8)[t8,0])\n
            {\n
                v4 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v12 = v10 + 1;\n
            }\n
            else\n
            {\n
                v4 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v12 = v10 + 1;\n
            }\n
            v13 = v12 - 1;\n
            if (![D] GetI(136:I8x8)[t8,0])\n
            {\n
                v14 = v13 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v14 = v13 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v1 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v15 = v14 + 1;\n
            }\n
            else\n
            {\n
                v1 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v15 = v14 + 1;\n
            }\n
            v0 = v3;\n
            v7->field_1c();\n
            v16 = v15 - 1;\n
            if (![D] GetI(136:I8x8)[t8,0])\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v1 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v18 = v17 + 1;\n
            }\n
            else\n
            {\n
                v1 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v18 = v17 + 1;\n
            }\n
            v0 = v3;\n
            v7->field_1c();\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    v6 = -1;\n
    return v6;\n
}\n
", "4228963:sub_408763": null, "4228976:cgc_swap_col": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
    char padding_14[4];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_swap_col(struct_1 *v15, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned short v3;  // [bp-0x38]\n
    unsigned short v4;  // [bp-0x36]\n
    unsigned short v5;  // [bp-0x34]\n
    unsigned short v6;  // [bp-0x32]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    void* v11;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x1c]\n
    unsigned int v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x14]\n
    struct_1 *v16;  // edx\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v15)\n
    {\n
        v14 = 1;\n
        return v14;\n
    }\n
    if (a0 <= v15->field_4 && a1 <= v15->field_4)\n
    {\n
        for (v11 = 0; v11 < v15->field_0; v11 += 1)\n
        {\n
            v16 = v15;\n
            v0 = a0;\n
            v7 = v16->field_10(v16, v11);\n
            v18 = v29 - 1;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v19 = v18 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v19 = v18 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v13 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v20 = v19 + 1;\n
            }\n
            else\n
            {\n
                v13 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v20 = v19 + 1;\n
            }\n
            v0 = a1;\n
            v8 = v15->field_10();\n
            v21 = v20 - 1;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v22 = v21 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v22 = v21 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v12 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v23 = v22 + 1;\n
            }\n
            else\n
            {\n
                v12 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v23 = v22 + 1;\n
            }\n
            v24 = v23 - 1;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v25 = v24 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v25 = v24 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v6 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-54, size=2, endness=Iend_LE)))));\n
            v5 = v6 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v9 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v26 = v25 + 1;\n
            }\n
            else\n
            {\n
                v9 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v26 = v25 + 1;\n
            }\n
            v1 = v9;\n
            v0 = a0;\n
            v15->field_18();\n
            v27 = v26 - 1;\n
            if (![D] GetI(136:I8x8)[t36,0])\n
            {\n
                v28 = v27 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v28 = v27 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v4 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-50, size=2, endness=Iend_LE)))));\n
            v3 = v4 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v10 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v29 = v28 + 1;\n
            }\n
            else\n
            {\n
                v10 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v29 = v28 + 1;\n
            }\n
            v0 = a1;\n
            v1 = v10;\n
            v15->field_18();\n
        }\n
        v14 = 0;\n
        return v14;\n
    }\n
    v14 = -1;\n
    return v14;\n
}\n
", "4229324:sub_4088cc": null, "4229328:cgc_m_transpose": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
    char padding_14[12];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_m_transpose(struct_1 *v11)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    struct struct_0 *v6[9];  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v11)\n
    {\n
        v10 = 1;\n
        return v10;\n
    }\n
    v9 = v11->field_0;\n
    v8 = v11->field_4;\n
    v6[0] = 0;\n
    v1 = v11->field_8;\n
    if (v1 == 1)\n
    {\n
        v6 = cgc_create_matrix(1, 0);\n
        v7 = 2;\n
    }\n
    else if (v1 == 2)\n
    {\n
        v6 = cgc_create_matrix(2, 0);\n
        v7 = 4;\n
    }\n
    else if (v1 == 4)\n
    {\n
        v6[8](v6, v8);\n
        v7 = 4;\n
    }\n
    *((v6 + 32))(v6, v8);\n
    for (v5 = 0; v5 < v11->field_0; v5 += 1)\n
    {\n
        for (v4 = 0; v4 < v11->field_4; v4 += 1)\n
        {\n
            v3 = v11->field_10(v11, v5);\n
            v0 = v3;\n
            *((v6 + 24))(v6, v4, v5);\n
        }\n
    }\n
    v11->field_20(v11, v8);\n
    cgc_memcpy(&v11[1].field_4, v6 + 40, v7 * v9 * v8);\n
    cgc_free(v6);\n
    v10 = 0;\n
    return v10;\n
}\n
", "4229860:sub_408ae4": null, "4229872:cgc_m_rref": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[8];\n
    struct struct_0 *field_14;\n
    char padding_18[4];\n
    struct struct_0 *field_1c;\n
    struct struct_0 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_m_rref(struct_1 *v15, struct_2 *a0)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    char v3;  // [bp-0x3d]\n
    struct_2 *v4;  // [bp-0x3c]\n
    struct struct_0 **v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    void* v10;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x20]\n
    void* v12;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x14]\n
    struct_1 *v16;  // edx\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    struct_2 *v31;  // edx\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    struct_2 *v53;  // edx\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v63;  // ftop\n
    unsigned int v64;  // ftop\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    unsigned int v67;  // ftop\n
    unsigned int v68;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70;  // ftop\n
    struct_2 *v71;  // edx\n
    unsigned int v72;  // ftop\n
    unsigned int v73;  // ftop\n
    unsigned int v74;  // ftop\n
    unsigned int v75;  // ftop\n
    unsigned int v76;  // ftop\n
    unsigned int v77;  // ftop\n
    unsigned int v78;  // ftop\n
    unsigned int v79;  // ftop\n
    unsigned int v80;  // ftop\n
    unsigned int v81;  // ftop\n
    unsigned int v82;  // ftop\n
    unsigned int v83;  // ftop\n
    unsigned int v84;  // ftop\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v15 && a0)\n
    {\n
        a0->field_8 = 4;\n
        v0 = v15->field_4;\n
        a0->field_20(a0, v15->field_0);\n
        for (v13 = 0; v13 < v15->field_0; v13 += 1)\n
        {\n
            for (v12 = 0; v12 < v15->field_4; v12 += 1)\n
            {\n
                v4 = a0;\n
                v5 = &v4->field_1c->field_0;\n
                v16 = v15;\n
                v0 = v12;\n
                v7 = v16->field_10(v16, v13);\n
                v18 = v65 - 1;\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v19 = v18 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v19 = v18 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v1 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v65 = v19 + 1;\n
                }\n
                else\n
                {\n
                    v1 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v65 = v19 + 1;\n
                }\n
                v0 = v0;\n
                v5();\n
            }\n
        }\n
        v11 = 0x3f800000;\n
        v10 = 0;\n
        v13 = 0;\n
        v12 = 0;\n
        while (true)\n
        {\n
            v3 = 0;\n
            if (v13 < a0->field_0)\n
                v3 = v12 < a0->field_4;\n
            if (!(v3 & 1))\n
                break;\n
            v20 = v65 - 1;\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v21 = v20 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v21 = v20 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v22 = v21 - 1;\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v23 = v22 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v23 = v22 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v24 = v23 + 1;\n
            [D] PutI(72:F64x8)[t19,0] = t20\n
            [D] PutI(136:I8x8)[t19,0] = 0x01\n
            [D] PutI(136:I8x8)[t19,0] = 0x00\n
            v25 = v24 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) != 1)\n
            {\n
                v26 = v25 - 1;\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v27 = v26 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v27 = v26 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v28 = v27 - 1;\n
                if (![D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v29 = v28 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v29 = v28 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t5,0] = t9\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
                [D] PutI(72:F64x8)[t5,1] = t2\n
                [D] PutI(136:I8x8)[t5,1] = 0x01\n
                [D] PutI(136:I8x8)[t25,0] = 0x00\n
                v30 = v29 + 1;\n
                [D] PutI(72:F64x8)[t39,0] = t40\n
                [D] PutI(136:I8x8)[t39,0] = 0x01\n
                [D] PutI(136:I8x8)[t39,0] = 0x00\n
                v25 = v30 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) != 1)\n
                    v13 -= 1;\n
            }\n
            v0 = v12;\n
            cgc_swap_nonzero_cell(a0, v13);\n
            v31 = a0;\n
            v0 = v12;\n
            v31->field_14(v31, v13);\n
            if ([D] GetI(136:I8x8)[t8,0])\n
            {\n
                v11 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v65 = v25 + 1;\n
            }\n
            else\n
            {\n
                v11 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v65 = v25 + 1;\n
            }\n
            for (v10 = v12; v10 < a0->field_4; v10 += 1)\n
            {\n
                v32 = v65 - 1;\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v33 = v32 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v33 = v32 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v34 = v33 - 1;\n
                if (![D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v35 = v34 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v35 = v34 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v36 = v35 + 1;\n
                [D] PutI(72:F64x8)[t19,0] = t20\n
                [D] PutI(136:I8x8)[t19,0] = 0x01\n
                [D] PutI(136:I8x8)[t19,0] = 0x00\n
                v65 = v36 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) != 1)\n
                {\n
                    v37 = v65 - 1;\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v38 = v37 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v38 = v37 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v39 = v38 - 1;\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v40 = v39 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v40 = v39 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    v41 = v40 + 1;\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    v65 = v41 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) != 1)\n
                        break;\n
                }\n
                v42 = v65 - 1;\n
                if (![D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v43 = v42 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v43 = v42 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v44 = v43 - 1;\n
                [D] PutI(72:F64x8)[t1,0] = t4\n
                [D] PutI(136:I8x8)[t1,0] = 0x01\n
                [D] PutI(72:F64x8)[t11,0] = t12\n
                [D] PutI(136:I8x8)[t11,0] = 0x01\n
                [D] PutI(72:F64x8)[t21,1] = t22\n
                [D] PutI(136:I8x8)[t21,1] = 0x01\n
                [D] PutI(136:I8x8)[t21,0] = 0x00\n
                [D] PutI(72:F64x8)[t43,0] = t46\n
                [D] PutI(136:I8x8)[t43,0] = 0x01\n
                [D] PutI(136:I8x8)[t58,0] = 0x00\n
                v46 = v44 - 0 + 1;\n
                [D] PutI(72:F64x8)[t72,0] = t73\n
                [D] PutI(136:I8x8)[t72,0] = 0x01\n
                [D] PutI(136:I8x8)[t72,0] = 0x00\n
                v65 = v46 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t58,0] ? [D] GetI(72:F64x8)[t58,0] : nan), ([D] GetI(136:I8x8)[t58,1] ? [D] GetI(72:F64x8)[t58,1] : nan)) & 1) != 1)\n
                {\n
                    v47 = v65 - 1;\n
                    if (![D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v48 = v47 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v48 = v47 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v49 = v48 - 1;\n
                    [D] PutI(72:F64x8)[t4,0] = t7\n
                    [D] PutI(136:I8x8)[t4,0] = 0x01\n
                    [D] PutI(72:F64x8)[t14,0] = t15\n
                    [D] PutI(136:I8x8)[t14,0] = 0x01\n
                    [D] PutI(72:F64x8)[t24,1] = t25\n
                    [D] PutI(136:I8x8)[t24,1] = 0x01\n
                    [D] PutI(136:I8x8)[t24,0] = 0x00\n
                    [D] PutI(72:F64x8)[t51,0] = t54\n
                    [D] PutI(136:I8x8)[t51,0] = 0x01\n
                    [D] PutI(72:F64x8)[t60,0] = t61\n
                    [D] PutI(136:I8x8)[t60,0] = 0x01\n
                    [D] PutI(136:I8x8)[t60,0] = 0x00\n
                    v51 = v49 - 0 - 0;\n
                    [D] PutI(72:F64x8)[t74,0] = t77\n
                    [D] PutI(136:I8x8)[t74,0] = 0x01\n
                    [D] PutI(72:F64x8)[t87,0] = t91\n
                    [D] PutI(136:I8x8)[t87,0] = 0x01\n
                    [D] PutI(72:F64x8)[t87,1] = t84\n
                    [D] PutI(136:I8x8)[t87,1] = 0x01\n
                    [D] PutI(136:I8x8)[t107,0] = 0x00\n
                    v52 = v51 + 1;\n
                    [D] PutI(72:F64x8)[t121,0] = t122\n
                    [D] PutI(136:I8x8)[t121,0] = 0x01\n
                    [D] PutI(136:I8x8)[t121,0] = 0x00\n
                    v65 = v52 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t107,0] ? [D] GetI(72:F64x8)[t107,0] : nan), ([D] GetI(136:I8x8)[t107,1] ? [D] GetI(72:F64x8)[t107,1] : nan)) & 1) != 1)\n
                        break;\n
                }\n
                v53 = a0;\n
                v0 = v10;\n
                v53->field_14(v53, v13);\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v9 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v54 = v65 + 1;\n
                }\n
                else\n
                {\n
                    v9 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v54 = v65 + 1;\n
                }\n
                v55 = v54 - 1;\n
                if (![D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v56 = v55 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v56 = v55 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v57 = v56 - 1;\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v58 = v57 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v58 = v57 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t6,1] = t7\n
                [D] PutI(136:I8x8)[t6,1] = 0x01\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
                v59 = v58 + 1;\n
                v1 = ([D] GetI(136:I8x8)[t33,0] ? [D] GetI(72:F64x8)[t33,0] : nan);\n
                [D] PutI(136:I8x8)[t33,0] = 0x00\n
                v65 = v59 + 1;\n
                v0 = v10;\n
                a0->field_1c();\n
            }\n
            v10 = 0;\n
            while (v10 < a0->field_0)\n
            {\n
                v60 = v65 - 1;\n
                if ([D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v61 = v60 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v61 = v60 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v62 = v61 - 1;\n
                if (![D] GetI(136:I8x8)[t8,0])\n
                {\n
                    v63 = v62 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v63 = v62 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v64 = v63 + 1;\n
                [D] PutI(72:F64x8)[t19,0] = t20\n
                [D] PutI(136:I8x8)[t19,0] = 0x01\n
                [D] PutI(136:I8x8)[t19,0] = 0x00\n
                v65 = v64 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) != 1)\n
                {\n
                    v66 = v65 - 1;\n
                    if (![D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v67 = v66 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v67 = v66 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v68 = v67 - 1;\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v69 = v68 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v69 = v68 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    v70 = v69 + 1;\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    v65 = v70 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) != 1)\n
                        break;\n
                }\n
                if (v10 == v13)\n
                {\n
LABEL_408e8d:\n
                    v10 += 1;\n
                }\n
                else\n
                {\n
                    v71 = a0;\n
                    v0 = v12;\n
                    v71->field_14(v71, v10);\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v8 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v72 = v65 + 1;\n
                    }\n
                    else\n
                    {\n
                        v8 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v72 = v65 + 1;\n
                    }\n
                    v73 = v72 - 1;\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v74 = v73 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v74 = v73 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v75 = v74 - 1;\n
                    if (![D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v76 = v75 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v76 = v75 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    v77 = v76 + 1;\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    v65 = v77 + 1;\n
                    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
                    {\n
                        v78 = v65 - 1;\n
                        if (![D] GetI(136:I8x8)[t8,0])\n
                        {\n
                            v79 = v78 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v79 = v78 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v80 = v79 - 1;\n
                        if ([D] GetI(136:I8x8)[t8,0])\n
                        {\n
                            v81 = v80 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v81 = v80 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(136:I8x8)[t5,0] = 0x00\n
                        v82 = v81 + 1;\n
                        [D] PutI(72:F64x8)[t19,0] = t20\n
                        [D] PutI(136:I8x8)[t19,0] = 0x01\n
                        [D] PutI(136:I8x8)[t19,0] = 0x00\n
                        v65 = v82 + 1;\n
                        if (((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69) >> 6) & 1) == 1)\n
                            goto LABEL_408e88;\n
                    }\n
                    v83 = v65 - 1;\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v84 = v83 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v84 = v83 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    if ([D] GetI(136:I8x8)[t8,0])\n
                    {\n
                        v2 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v65 = v84 + 1;\n
                    }\n
                    else\n
                    {\n
                        v2 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v65 = v84 + 1;\n
                    }\n
                    v1 = v12;\n
                    v0 = v10;\n
                    cgc_subtract_row();\n
LABEL_408e88:\n
                    goto LABEL_408e8d;\n
                }\n
            }\n
            v13 += 1;\n
            v12 += 1;\n
        }\n
        v14 = 0;\n
        return v14;\n
    }\n
    v14 = 1;\n
    return v14;\n
}\n
", "4230857:sub_408ec9": null, "4230864:cgc_swap_nonzero_cell": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[16];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_swap_nonzero_cell(struct_1 *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v4;  // edx\n
    unsigned int v5;  // ftop\n
    unsigned int v7;  // ftop\n
    unsigned int v8;  // ftop\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
    struct_1 *v11;  // edx\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    struct_1 *v16;  // edx\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    struct_1 *v21;  // edx\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
    v4->field_14(v3, a0);\n
    [D] PutI(72:F64x8)[t15,0] = t18\n
    [D] PutI(136:I8x8)[t15,0] = 0x01\n
    [D] PutI(72:F64x8)[t24,0] = t25\n
    [D] PutI(136:I8x8)[t24,0] = 0x01\n
    [D] PutI(136:I8x8)[t24,0] = 0x00\n
    v7 = v5 - 1 + 1;\n
    v8 = v7 - 1;\n
    [D] PutI(72:F64x8)[t38,0] = t41\n
    [D] PutI(136:I8x8)[t38,0] = 0x01\n
    [D] PutI(72:F64x8)[t51,0] = t55\n
    [D] PutI(136:I8x8)[t51,0] = 0x01\n
    [D] PutI(72:F64x8)[t51,1] = t48\n
    [D] PutI(136:I8x8)[t51,1] = 0x01\n
    [D] PutI(136:I8x8)[t71,0] = 0x00\n
    v9 = v8 + 1;\n
    [D] PutI(72:F64x8)[t85,0] = t86\n
    [D] PutI(136:I8x8)[t85,0] = 0x01\n
    [D] PutI(136:I8x8)[t85,0] = 0x00\n
    v10 = v9 + 1;\n
    if (((CmpF(([D] GetI(136:I8x8)[t71,0] ? [D] GetI(72:F64x8)[t71,0] : nan), ([D] GetI(136:I8x8)[t71,1] ? [D] GetI(72:F64x8)[t71,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t71,0] ? [D] GetI(72:F64x8)[t71,0] : nan), ([D] GetI(136:I8x8)[t71,1] ? [D] GetI(72:F64x8)[t71,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v11->field_14(v3, a0);\n
        v12 = v10 - 1;\n
        if ([D] GetI(136:I8x8)[t7,0])\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(136:I8x8)[t5,0] = 0x00\n
        v14 = v13 + 1;\n
        [D] PutI(72:F64x8)[t19,0] = t20\n
        [D] PutI(136:I8x8)[t19,0] = 0x01\n
        [D] PutI(136:I8x8)[t19,0] = 0x00\n
        v15 = v14 + 1;\n
        if (((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69) >> 6)) & 1) == 1)\n
        {\n
            v1 = a0;\n
            a0 += 1;\n
            while (true)\n
            {\n
                if (a0 >= v3->field_0)\n
                {\n
                    v2 = -1;\n
                    return v2;\n
                }\n
                v16->field_14(v3, a0);\n
                v17 = v15 - 1;\n
                [D] PutI(72:F64x8)[t15,0] = t18\n
                [D] PutI(136:I8x8)[t15,0] = 0x01\n
                [D] PutI(72:F64x8)[t24,0] = t25\n
                [D] PutI(136:I8x8)[t24,0] = 0x01\n
                [D] PutI(136:I8x8)[t24,0] = 0x00\n
                [D] PutI(72:F64x8)[t38,0] = t41\n
                [D] PutI(136:I8x8)[t38,0] = 0x01\n
                [D] PutI(72:F64x8)[t51,0] = t55\n
                [D] PutI(136:I8x8)[t51,0] = 0x01\n
                [D] PutI(72:F64x8)[t51,1] = t48\n
                [D] PutI(136:I8x8)[t51,1] = 0x01\n
                [D] PutI(136:I8x8)[t71,0] = 0x00\n
                v19 = v17 - 0 + 1;\n
                [D] PutI(72:F64x8)[t85,0] = t86\n
                [D] PutI(136:I8x8)[t85,0] = 0x01\n
                [D] PutI(136:I8x8)[t85,0] = 0x00\n
                v20 = v19 + 1;\n
                if (((CmpF(([D] GetI(136:I8x8)[t71,0] ? [D] GetI(72:F64x8)[t71,0] : nan), ([D] GetI(136:I8x8)[t71,1] ? [D] GetI(72:F64x8)[t71,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t71,0] ? [D] GetI(72:F64x8)[t71,0] : nan), ([D] GetI(136:I8x8)[t71,1] ? [D] GetI(72:F64x8)[t71,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                    break;\n
                v21->field_14(v3, a0);\n
                v22 = v20 - 1;\n
                if ([D] GetI(136:I8x8)[t7,0])\n
                {\n
                    v23 = v22 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v23 = v22 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v24 = v23 + 1;\n
                [D] PutI(72:F64x8)[t19,0] = t20\n
                [D] PutI(136:I8x8)[t19,0] = 0x01\n
                [D] PutI(136:I8x8)[t19,0] = 0x00\n
                v15 = v24 + 1;\n
                if (((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                    break;\n
                a0 += 1;\n
            }\n
            v2 = cgc_swap_row(v3, v1, a0);\n
            return v2;\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4231249:sub_409051": null, "4231264:cgc_subtract_row": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_0 *field_14;\n
    char padding_18[4];\n
    struct struct_0 *field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_subtract_row(struct_1 *v7, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v8;  // ftop\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
    struct_1 *v11;  // edx\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = v8 - 1;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        v10 = v9 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v10 = v9 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t8,0] = t9\n
    [D] PutI(136:I8x8)[t8,0] = 0x01\n
    [D] PutI(136:I8x8)[t8,0] = 0x00\n
    v22 = v10 + 1;\n
    if (!v7)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    if (a0 <= v7->field_0 && a1 <= v7->field_0)\n
    {\n
        for (v3 = a2; v3 < v7->field_4; v3 += 1)\n
        {\n
            v11 = v7;\n
            v0 = v3;\n
            v11->field_14(v11, a0);\n
            v12 = v22 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v13 = v12 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v13 = v12 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(136:I8x8)[t10,0] = 0x00\n
            v14 = v13 + 1;\n
            v5 = ([D] GetI(136:I8x8)[t36,0] ? [D] GetI(72:F64x8)[t36,0] : nan);\n
            [D] PutI(136:I8x8)[t36,0] = 0x00\n
            v15 = v14 + 1;\n
            v0 = v3;\n
            v7->field_14();\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v4 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v16 = v15 + 1;\n
            }\n
            else\n
            {\n
                v4 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v16 = v15 + 1;\n
            }\n
            v17 = v16 - 1;\n
            if (![D] GetI(136:I8x8)[t3,0])\n
            {\n
                v18 = v17 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v18 = v17 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v19 = v18 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t6,1] = t7\n
            [D] PutI(136:I8x8)[t6,1] = 0x01\n
            [D] PutI(136:I8x8)[t6,0] = 0x00\n
            v21 = v20 + 1;\n
            v1 = ([D] GetI(136:I8x8)[t33,0] ? [D] GetI(72:F64x8)[t33,0] : nan);\n
            [D] PutI(136:I8x8)[t33,0] = 0x00\n
            v22 = v21 + 1;\n
            v0 = v3;\n
            v7->field_1c();\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    v6 = -1;\n
    return v6;\n
}\n
", "4231523:sub_409163": null, "4231536:cgc_transmitall": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmitall(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v3;  // [bp-0xc]\n
    unsigned int v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v5 = v2;\n
        if (v5 >= a0)\n
            return v2;\n
        v0 = &v3;\n
        v5 = cgc_transmit(1, v4 + v2, a0 - v2);\n
        if (v5)\n
            break;\n
        if (!*(&v3))\n
            break;\n
        v2 = *(&v3) + v2;\n
    }\n
    return v5;\n
}\n
", "4231672:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}