{"4202496:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:sub_4020c0": "int sub_4020c0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202694:sub_4020c6": null, "4202704:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202747:sub_4020fb": null, "4202748:sub_4020fc": "int sub_4020fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202752:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202756:sub_402104": null, "4202768:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24591;\n
    v6 = v5 + 14;\n
    v7 = v5 + 14;\n
    if (v7 == v6)\n
        return v5 + 14;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202819:sub_402143": "int sub_402143()\n
{\n
}\n
", "4202825:sub_402149": "int sub_402149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202832:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24527;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 14;\n
    v9 = (v6 + 14 - (v6 + 14) >> 31) + (14 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202903:sub_402197": "int sub_402197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202912:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020c0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202987:sub_4021eb": "int sub_4021eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202992:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203001:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203005:sub_4021fd": null, "4203008:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 - 48 > 9)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203062:sub_402236": null, "4203072:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = -1;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    if (v1[v5] != 45)\n
        v2 = 1;\n
    else\n
        v1 += 1;\n
    while (true)\n
    {\n
        if (!*((v5 + v1)))\n
        {\n
            v4 = v3 * v2;\n
            return v4;\n
        }\n
        else if (cgc_isdigit(*((v5 + v1))))\n
        {\n
            v3 = v3 * 10 + *((v5 + v1)) - 48;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4203304:sub_402328": null, "4203312:cgc_atox": "int cgc_atox(char v4[4])\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x7]\n
    char v2;  // [bp-0x6]\n
    char v3;  // [bp-0x5]\n
    unsigned int v5;  // eax\n
\n
    v0 = v5;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v4[2] > 47 && v4[2] < 58)\n
    {\n
        v3 = (v4[2] - 48) * 16;\n
        goto LABEL_4023a4;\n
    }\n
    if (v4[2] > 64 && v4[2] < 71)\n
        v3 = (v4[2] - 55) * 16;\n
LABEL_4023a4:\n
    if (v4[3] > 47 && v4[3] < 58)\n
    {\n
        v2 = v4[3] - 48;\n
        goto LABEL_402408;\n
    }\n
    if (v4[3] > 64 && v4[3] < 71)\n
        v2 = v4[3] - 55;\n
LABEL_402408:\n
    v1 = v3 + v2;\n
    return v1;\n
}\n
", "4203555:sub_402423": null, "4203568:cgc_bzero": "int cgc_bzero(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a0; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((v1 + v0)) ^ *((v1 + v0));\n
    }\n
    return v0;\n
}\n
", "4203649:sub_402481": null, "4203664:cgc_fill_buffer": "typedef struct struct_0 {\n
    char padding_0[68];\n
    unsigned int field_44;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern void* g_408164;\n
extern void* g_408168;\n
extern unsigned int g_40816c;\n
extern unsigned int std_input;\n
\n
int cgc_fill_buffer()\n
{\n
    unsigned int *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    g_408164 = 0;\n
    g_408168 = 0;\n
    v0 = &g_408168;\n
    if (cgc_receive(std_input, &g_40816c, 0x1000))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else if (v1->field_44)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = -2;\n
        return v2;\n
    }\n
}\n
", "4203815:sub_402527": null, "4203824:cgc_get_char": "extern unsigned int _GLOBAL_OFFSET_TABLE_[18];\n
extern unsigned int g_408168;\n
\n
int cgc_get_char(char *v3)\n
{\n
    unsigned int v0[18];  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4[18];  // ecx\n
    unsigned int v5[18];  // eax\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (g_408168)\n
    {\n
        v4 = v0;\n
        if (!(v4[17] <= v4[16]))\n
            goto LABEL_40258f;\n
    }\n
    v1 = cgc_fill_buffer();\n
    if (v1)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
LABEL_40258f:\n
    v5 = v0;\n
    *(v3) = *(72 + &v5[0] + v5[16]);\n
    v5[16] = v5[16] + 1;\n
    v2 = 0;\n
    return v2;\n
}\n
", "4203971:sub_4025c3": null, "4203984:cgc_read_until_delim_or_n": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_until_delim_or_n(unsigned int v6, char *a0, char a1, unsigned int a2, unsigned int *a3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x11]\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int *v7;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    *(a3) = 0;\n
    v2 = 0;\n
    if (!a0)\n
    {\n
        v5 = 3;\n
        return v5;\n
    }\n
    else if (a2)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 < a2)\n
            {\n
                v2 = cgc_get_char(&v3);\n
                if (v2)\n
                {\n
                    v5 = v2;\n
                    return v5;\n
                }\n
                if (a1 && v3 == a1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                a0[v1] = v3;\n
                v7 = a3;\n
                *(v7) = *(v7) + 1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v5 = 4;\n
        return v5;\n
    }\n
}\n
", "4204237:sub_4026cd": null, "4204240:cgc_read_n_bytes": "int cgc_read_n_bytes(unsigned int v1, char *a0, unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v2;  // esi\n
\n
    v0 = v2;\n
    return cgc_read_until_delim_or_n(v1, a0, 0, a1, a2);\n
}\n
", "4204323:sub_402723": null, "4204336:cgc_transmit_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a1)\n
        {\n
            v0 = &v3;\n
            if (cgc_transmit(v5, a0 + v2, a1 - v2))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            v2 = v3 + v2;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204496:cgc_getMSB": "int cgc_getMSB(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = 0x80000000;\n
    v0 = 31;\n
    while (true)\n
    {\n
        if (v0 < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        else if (!(v3 & v1))\n
        {\n
            v1 >>= 1;\n
            v0 -= 1;\n
        }\n
        else\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4204593:sub_402831": null, "4204608:cgc_clearRun": "int cgc_clearRun(unsigned int v1[67])\n
{\n
    unsigned int v0[67];  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2[67];  // eax\n
\n
    v0[0] = v2;\n
    v1[64] = 0;\n
    for (v0 = 0; v0 < 64; v0 += 1)\n
    {\n
        v1[v0] = 0;\n
    }\n
    v1[65] = 0;\n
    v1[66] = 0;\n
    return v1;\n
}\n
", "4204703:sub_40289f": null, "4204704:cgc_initRun": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initRun(struct struct_0 **v6, unsigned int a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[67];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8[67];  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v6;\n
    v3 = cgc_allocate(0x1000, 0);\n
    if (v3)\n
    {\n
        v4 = v3;\n
        return v4;\n
    }\n
    v2[0] = *(v6);\n
    v0 = &v2[65];\n
    v3 = cgc_allocate(0x1000, 0);\n
    if (v3)\n
    {\n
        v4 = v3;\n
        return v4;\n
    }\n
    v8 = v2;\n
    v8[0] = v8[0] | 1;\n
    v2[64] = a0;\n
    v2[66] = 0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4204903:sub_402967": null, "4204912:cgc_getNextFreeChunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[252];\n
    unsigned int field_100;\n
    char padding_104[4];\n
    unsigned int field_108;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getNextFreeChunk(unsigned int v19, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x58]\n
    struct_0 *v1;  // [bp-0x54]\n
    struct_0 *v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    struct_0 *v4;  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x44]\n
    struct_0 *v6;  // [bp-0x40]\n
    unsigned int v7;  // [bp-0x3c]\n
    char v8;  // [bp-0x35]\n
    unsigned int v9;  // [bp-0x34]\n
    unsigned int v10;  // [bp-0x30]\n
    void* v11;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x24]\n
    struct_0 *v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v16;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v17;  // [bp-0x10]\n
    unsigned int v18;  // [bp-0xc]\n
    unsigned int v20;  // eax\n
    unsigned int v22;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v27;  // eax\n
    struct_0 *v29;  // ecx\n
    unsigned int v30;  // eax\n
\n
    v9 = &_GLOBAL_OFFSET_TABLE_;\n
    v17 = 0;\n
    v16 = 0;\n
    v15 = 0;\n
    v16 = 1 << (v19 & 31);\n
    v15 = (0 CONCAT 0x1000) /m (1 << (v19 & 31));\n
    v14 = *((v9 + (v19 - 1) * 4 + 4168));\n
    while (true)\n
    {\n
        v8 = 0;\n
        if (v14)\n
        {\n
            v6 = v14;\n
            v20 = v15 - 1;\n
            v7 = (&v6->field_0)[(v20 >> 31 CONCAT v20) /m 32];\n
            v8 = (v7 & 1 << (((v15 - 1 >> 31 CONCAT v15 - 1) /m 32 >> 32) & 31));\n
        }\n
        if (!(v8 & 1))\n
            break;\n
        v13 = 0;\n
        for (v12 = 0; v12 < v15; v12 += 1)\n
        {\n
            v4 = v14;\n
            v22 = v12;\n
            v5 = (&v4->field_0)[(v22 >> 31 CONCAT v22) /m 32];\n
            if (!(v5 & 1 << (((v12 >> 31 CONCAT v12) /m 32 >> 32) & 31)))\n
            {\n
                v13 = 1;\n
                break;\n
            }\n
        }\n
        if (v13)\n
            break;\n
        v14 = v14->field_108;\n
    }\n
    if (!v14)\n
    {\n
        cgc_initRun(&v14, v16);\n
        v24 = v9;\n
        *((v14 + 264)) = *((v24 + (v19 - 1) * 4 + 4168));\n
        *((v24 + (v19 - 1) * 4 + 4168)) = v14;\n
        *(a0) = *((v14 + 260));\n
        v18 = 0;\n
        return v18;\n
    }\n
    v11 = 0;\n
    while (true)\n
    {\n
        if (v11 < v15)\n
        {\n
            v2 = v14;\n
            v25 = v11;\n
            v3 = (&v2->field_0)[(v25 >> 31 CONCAT v25) /m 32];\n
            if (!(v3 & 1 << (((v11 >> 31 CONCAT v11) /m 32 >> 32) & 31)))\n
            {\n
                v10 = *((v14 + 260));\n
                *(a0) = v10 + v16 * v11;\n
                v0 = 1 << (((v11 >> 31 CONCAT v11) /m 32 >> 32) & 31);\n
                v1 = v14;\n
                v27 = v11;\n
                v29 = (v27 >> 31 CONCAT v27) /m 32;\n
                v30 = v1;\n
                *((v30 + v29 * 4)) = v0 | *((v30 + v29 * 4));\n
                v18 = 0;\n
                return v18;\n
            }\n
            v11 += 1;\n
        }\n
        else\n
        {\n
            v18 = -42;\n
            return v18;\n
        }\n
    }\n
}\n
", "4205588:sub_402c14": null, "4205600:cgc_getRun": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    struct struct_0 *field_108;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getRun(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = 0; v2 < 11; v2 += 1)\n
    {\n
        for (v1 = *((v0 + v2 * 4 + 4168)); v1; v1 = v1->field_108)\n
        {\n
            if (v1->field_104 == v4)\n
            {\n
                v3 = v1;\n
                return v3;\n
            }\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4205752:sub_402cb8": null, "4205760:cgc_isClear": "int cgc_isClear(unsigned int *v2)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 64)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (!v2[v0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4205848:sub_402d18": null, "4205856:cgc_malloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v4 = cgc_getMSB(v8);\n
    if (v8 <= 1 << (v4 & 31) && !(!v4))\n
        goto LABEL_402d86;\n
    v4 += 1;\n
LABEL_402d86:\n
    if (v4 <= 11)\n
    {\n
        v3 = cgc_getNextFreeChunk(v4, &v5);\n
        if (v3)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v6 = v5;\n
        return v6;\n
    }\n
    else\n
    {\n
        for (v2 = *((v1 + 4212)); v2; v2 = *((v2 + 8)));\n
        v2 = cgc_malloc(12);\n
        v0 = v2 + 4;\n
        v3 = cgc_allocate(v8, 0);\n
        if (v3)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v10 = v1;\n
        *((v2 + 8)) = *((v10 + 4212));\n
        *((v10 + 4212)) = v2;\n
        *(v2) = v8;\n
        v6 = *((v2 + 4));\n
        return v6;\n
    }\n
}\n
", "4206191:sub_402e6f": null, "4206192:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v12)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char v2;  // [bp-0x2d]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v13 = v12 & 4095;\n
    if (!v13)\n
    {\n
        v13 = v3;\n
        if (*((v13 + 4212)))\n
        {\n
            v7 = *((v3 + 4212));\n
            while (true)\n
            {\n
                v13 = 0;\n
                v2 = 0;\n
                if (v7)\n
                {\n
                    v13 = *((v7 + 4));\n
                    v2 = v13 != v12;\n
                }\n
                *(&v13) = v2;\n
                if (!(v2 & 1))\n
                    break;\n
                v6 = v7;\n
                v7 = *((v7 + 8));\n
            }\n
        }\n
    }\n
    if (v7)\n
    {\n
        v8 = cgc_deallocate(v12);\n
        if (v8)\n
            cgc__terminate();\n
        *((v7 + 4)) = 0;\n
        *(v7) = 0;\n
        if (!v6)\n
            *((v3 + 4212)) = *((v7 + 8));\n
        else\n
            *((v6 + 8)) = *((v7 + 8));\n
        v13 = cgc_free(v7);\n
        return v13;\n
    }\n
    else\n
    {\n
        for (v5 = 0; v5 < 11; v5 = v13)\n
        {\n
            v4 = 0;\n
            v13 = *((v3 + v5 * 4 + 4168));\n
            v11 = v13;\n
            for (v10 = 0; v11; v11 = v13)\n
            {\n
                v13 = *((v11 + 260));\n
                if (v13 != (v12 & -0x1000))\n
                {\n
                    v10 = v11;\n
                    v13 = *((v11 + 264));\n
                }\n
                else\n
                {\n
                    v4 = 1;\n
                    break;\n
                }\n
            }\n
            if (v4)\n
                break;\n
            v13 = v5 + 1;\n
        }\n
        if (!v11)\n
            return v13;\n
        v9 = (0 CONCAT v12 - *((v11 + 260))) /m *((v11 + 0x100));\n
        v0 = 1 << (((v9 >> 31 CONCAT v9) /m 32 >> 32) & 31) ^ -1;\n
        v1 = v11;\n
        v14 = v9;\n
        v16 = (v14 >> 31 CONCAT v14) /m 32;\n
        v17 = v1;\n
        *((v17 + v16 * 4)) = v0 & *((v17 + v16 * 4));\n
        cgc_bzero(v12, *((v11 + 0x100)));\n
        v13 = cgc_isClear(v11);\n
        if (!v13)\n
            return v13;\n
        if (!v10)\n
            *((v3 + v5 * 4 + 4168)) = *((v11 + 264));\n
        else\n
            *((v10 + 264)) = *((v11 + 264));\n
        v8 = cgc_deallocate(*((v11 + 260)));\n
        if (v8)\n
            cgc__terminate();\n
        cgc_clearRun(v11);\n
        v13 = cgc_deallocate(v11);\n
        v8 = v13;\n
        if (v13)\n
            v13 = cgc__terminate();\n
        v11 = 0;\n
        return v13;\n
    }\n
}\n
", "4207013:sub_4031a5": null, "4207024:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax\n
\n
    v1 = a0;\n
    v0 = v2;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 + 1;\n
        if (!v3)\n
            break;\n
        *((v0 + a1)) = v1[a1];\n
    }\n
    return v2;\n
}\n
", "4207102:sub_4031fe": null, "4207104:cgc_b16_2w": "typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_b16_2w(char v4[5], char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    char v1;  // [bp-0xe]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    struct_0 *v6;  // eax\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&v1, 0);\n
    if (a0 > 255)\n
    {\n
        v4[0] = 124;\n
        v4[1] = 66;\n
        v4[2] = 65;\n
        v4[3] = 68;\n
        v4[4] = 124;\n
        v2 = 5;\n
        return v2;\n
    }\n
    v4[0] = 48;\n
    v4[1] = 120;\n
    if (!a0)\n
    {\n
        v4[2] = 48;\n
        v4[3] = 48;\n
        v2 = 4;\n
        return v2;\n
    }\n
    v6 = v0;\n
    v4[3] = *((v6->field_34 + (a0 & 15)));\n
    a0 >>= 4;\n
    v4[2] = *((v6->field_34 + (a0 & 15)));\n
    v2 = 4;\n
    return v2;\n
}\n
", "4207331:sub_4032e3": null, "4207344:cgc_b10_uint": "typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_b10_uint(char *v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x25]\n
    struct_0 *v2;  // [bp-0x24]\n
    struct_1 *v3;  // [bp-0x20]\n
    struct_1 *v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x18]\n
    struct_1 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&v5, 12);\n
    if (!a0)\n
    {\n
        *(v8) = 48;\n
        v6 = 1;\n
        return v6;\n
    }\n
    v4 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v4 < 10)\n
            v1 = a0;\n
        if (!(v1 & 1))\n
            break;\n
        v0 = v2->field_34;\n
        *(&v5 + v4) = *((v0 + ((0 CONCAT a0) /m 10 >> 32)));\n
        a0 = (0 CONCAT a0) /m 10;\n
        v4 += 1;\n
    }\n
    v3 = v4;\n
    for (v4 = v3; v4 > 0; v4 -= 1)\n
    {\n
        v8[1 + v4] = *((&v5 + &v3[-1 * v4]));\n
    }\n
    v6 = v3;\n
    return v6;\n
}\n
", "4207606:sub_4033f6": null, "4207616:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(char *v10, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    char *v3;  // [bp-0x28], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x24], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    char v7;  // [bp-0x15]\n
    char *v8;  // [bp-0x14]\n
    char *v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // ecx\n
    struct struct_0 **v12;  // eax\n
    struct struct_0 **v13;  // eax\n
    struct struct_0 **v14;  // eax\n
    unsigned int v15;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v10;\n
    v4 = 0;\n
    for (v3 = 0; *((a0 + v4)); v4 += 1)\n
    {\n
        if (*((a0 + v4)) != 33)\n
        {\n
            v11 = v3;\n
            v3 = v11 + 1;\n
            v5[v11] = *((a0 + v4));\n
        }\n
        else\n
        {\n
            v4 += 1;\n
            v0 = *((a0 + v4));\n
            if (v0 == 72)\n
            {\n
                v12 = a1;\n
                a1 = v12 + 1;\n
                v7 = *(v12);\n
                v6 = cgc_b16_2w(&v5[v3], v7);\n
                v3 = v6 + v3;\n
            }\n
            else if (v0 == 85)\n
            {\n
                v13 = a1;\n
                a1 = v13 + 1;\n
                v8 = &*(v13)->field_0;\n
                v6 = cgc_b10_uint(&v5[v3], v8);\n
                v3 = v6 + v3;\n
            }\n
            else if (v0 == 88)\n
            {\n
                v14 = a1;\n
                a1 = v14 + 1;\n
                v9 = &*(v14)->field_0;\n
                if (!v9)\n
                    v9 = v1 - 4380;\n
                v6 = cgc_strlen();\n
                for (v2 = v6; v2 > 0; v2 -= 1)\n
                {\n
                    v15 = v3;\n
                    v3 = v15 + 1;\n
                    v5[v15] = *((v9 + v6 - v2));\n
                }\n
            }\n
        }\n
    }\n
    return v3;\n
}\n
", "4208067:sub_4035c3": null, "4208080:cgc_sprintf": "int cgc_sprintf(char *v3, unsigned int a0)\n
{\n
    char **v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v0 = &v4;\n
    v1 = cgc_vsprintf(v3, a0, v0);\n
    return v1;\n
}\n
", "4208149:sub_403615": null, "4208160:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4208212:sub_403654": null, "4208224:cgc_strncmp": "int cgc_strncmp(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((v2 + v0)) != *((a0 + v0)))\n
            break;\n
        if (!*((v2 + v0)))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
    if (*((v2 + v0)) < *((a0 + v0)))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4208408:sub_403718": null, "4208416:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
        {\n
            v1 = &v2[v0];\n
            return v1;\n
        }\n
        if (!v2[1 + v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4208523:sub_40378b": null, "4208528:cgc_strspn": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strspn(unsigned int v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2[v4])\n
            v0 = cgc_strchr(a0, v2[v4]);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v3 += 1;\n
    }\n
    return v3;\n
}\n
", "4208684:sub_40382c": null, "4208688:cgc_strcspn": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcspn(unsigned int v4, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!*((v4 + v1)))\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        if (cgc_strchr(a0, *((v4 + v1))))\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        v1 += 1;\n
        v2 += 1;\n
    }\n
}\n
", "4208840:sub_4038c8": null, "4208848:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[4216];\n
    struct struct_1 *field_1078;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(unsigned int v4, char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v4)\n
    {\n
        v0->field_1078 = v4;\n
    }\n
    else if (!v0->field_1078)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = cgc_strspn(v0->field_1078, a0);\n
    v4 = &v0->field_1078[v2];\n
    v5 = v0;\n
    v1 = cgc_strcspn(v4, a0);\n
    v5->field_1078 = v4 + v1;\n
    if (v5->field_1078 == v4)\n
    {\n
        v0->field_1078 = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!v0->field_1078->field_0)\n
    {\n
        v0->field_1078 = 0;\n
    }\n
    else\n
    {\n
        v6 = v0;\n
        v6->field_1078->field_0 = 0;\n
        v6->field_1078 = v6->field_1078 + 1;\n
    }\n
    v3 = v4;\n
    return v3;\n
}\n
", "4209137:sub_4039f1": null, "4209152:cgc_isCertCommand": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isCertCommand(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v7;\n
    if (!cgc_strncmp(v4, v3 - 4355, cgc_strlen(\"enroll\")))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v2 = v7;\n
    if (!cgc_strncmp(v2, v3 - 4357, cgc_strlen(v3 - 4357)))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v1 = v7;\n
    if (!cgc_strncmp(v1, v3 - 4348, cgc_strlen(v3 - 4348)))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v0 = v7;\n
    if (!cgc_strncmp(v0, v3 - 4343, cgc_strlen(v3 - 4343)))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4209478:sub_403b46": null, "4209488:cgc_initIssuer": "typedef struct struct_0 {\n
    char padding_0[4220];\n
    unsigned int field_107c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initIssuer()\n
{\n
    char *v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = cgc_malloc(64);\n
    v1->field_107c = v5;\n
    if (!v5)\n
        cgc__terminate();\n
    cgc_bzero(v1->field_107c, 64);\n
    v6 = v1;\n
    v0 = v6->field_107c;\n
    v8 = v2;\n
    return cgc_memcpy(v0, &v1[1].padding_0[112], cgc_strlen(&v6[1].padding_0[112]));\n
}\n
", "4209640:sub_403be8": null, "4209648:cgc_signCert": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_signCert(struct struct_0 **v6)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4[7];  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v4[0] = *(v6);\n
    v3 = cgc_strlen(v4[1]);\n
    for (v1 = 0; v1 < v3; v1 += 1)\n
    {\n
        v2 = *((v4[1] + v1)) + v2;\n
    }\n
    v3 = cgc_strlen(v4[0]);\n
    for (v1 = 0; v1 < v3; v1 += 1)\n
    {\n
        v2 = *((v4[0] + v1)) + v2;\n
    }\n
    v3 = cgc_strlen(v4[2]);\n
    for (v1 = 0; v1 < v3; v1 += 1)\n
    {\n
        v2 = v1[v4[2]] + v2;\n
    }\n
    v2 = v4[6] + v2;\n
    v3 = cgc_strlen(v0 + 4224);\n
    for (v1 = 0; v1 < v3; v1 += 1)\n
    {\n
        v2 = *((v0 + v1 + 4224)) + v2;\n
    }\n
    if (v4[4])\n
    {\n
        v3 = cgc_strlen(v4[4]);\n
        for (v1 = 0; v1 < v3; v1 += 1)\n
        {\n
            v2 = *((v4[4] + v1)) + v2;\n
        }\n
    }\n
    v4[5] = v2;\n
    return v4;\n
}\n
", "4210096:cgc_calculateCertSize": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calculateCertSize(unsigned int v3[5])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_strlen(\"Issuer\") + 1;\n
    v1 = cgc_strlen(v3[1]) + 1 + v1;\n
    v1 = cgc_strlen(v0 - 4307) + 1 + v1;\n
    v1 = cgc_strlen(v3[0]) + 1 + v1;\n
    v1 = cgc_strlen(v0 - 4299) + 1 + v1;\n
    v1 = cgc_strlen(v3[2]) + 1 + v1;\n
    v1 = cgc_strlen(v0 - 4295) + 1 + v1;\n
    v1 += 13;\n
    v1 = cgc_strlen(v0 - 4285) + 1 + v1;\n
    v1 += 13;\n
    v1 = cgc_strlen(v0 - 4274) + 1 + v1;\n
    v1 = cgc_strlen(v3[3]) + 1 + v1;\n
    if (v3[4])\n
    {\n
        v1 = cgc_strlen(v0 - 4270) + 1 + v1;\n
        v1 = cgc_strlen(v3[4]) + 1 + v1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4210466:sub_403f22": null, "4210480:cgc_sendCerts": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    char padding_1c[4];\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendCerts(unsigned int v37, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0xb0]\n
    unsigned int v1;  // [bp-0xac]\n
    unsigned int v2;  // [bp-0xa8]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    unsigned int v9;  // [bp-0x8c]\n
    unsigned int v10;  // [bp-0x88]\n
    unsigned int v11;  // [bp-0x84]\n
    unsigned int v12;  // [bp-0x80]\n
    unsigned int v13;  // [bp-0x74]\n
    unsigned int v14;  // [bp-0x70]\n
    unsigned int v15;  // [bp-0x6c]\n
    unsigned int v16;  // [bp-0x68]\n
    unsigned int v17;  // [bp-0x64]\n
    unsigned int v18;  // [bp-0x60]\n
    unsigned int v19;  // [bp-0x5c]\n
    unsigned int v20;  // [bp-0x58]\n
    unsigned int v21;  // [bp-0x54]\n
    unsigned int v22;  // [bp-0x50]\n
    unsigned int v23;  // [bp-0x4c]\n
    unsigned int v24;  // [bp-0x48]\n
    unsigned int v25;  // [bp-0x44]\n
    unsigned int v26;  // [bp-0x40]\n
    unsigned int v27;  // [bp-0x3c]\n
    unsigned int v28;  // [bp-0x38]\n
    unsigned int v29;  // [bp-0x34]\n
    unsigned int v30;  // [bp-0x30]\n
    unsigned int v31;  // [bp-0x2c]\n
    unsigned int v32;  // [bp-0x28]\n
    char *v33;  // [bp-0x24]\n
    unsigned int v34;  // [bp-0x1c]\n
    void* v35;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v36;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v38;  // ecx\n
    unsigned int v42;  // ecx\n
    unsigned int v46;  // eax\n
\n
    v31 = &_GLOBAL_OFFSET_TABLE_;\n
    v35 = 1;\n
    for (v36 = a0; v36; v36 = *((v36 + 32)))\n
    {\n
        if (v35)\n
        {\n
            v35 = 0;\n
        }\n
        else\n
        {\n
            v32 = cgc_transmit_all(1, v31 - 4376, 2);\n
            if (v32)\n
                cgc__terminate();\n
        }\n
        v34 = cgc_calculateCertSize(a0);\n
        v33 = cgc_malloc(v34 + 10);\n
        if (!v33)\n
            cgc__terminate();\n
        cgc_bzero(v33, v34 + 10);\n
        if (!a0->field_10)\n
        {\n
            v42 = v31;\n
            v15 = a0->field_4;\n
            v17 = a0->field_0;\n
            v19 = a0->field_8;\n
            v20 = a0->field_c;\n
            v13 = v42 - 4221;\n
            v14 = v42 - 4314;\n
            v16 = v42 - 4307;\n
            v18 = v42 - 4299;\n
            v0 = v15;\n
            v1 = v16;\n
            v2 = v17;\n
            v3 = v18;\n
            v4 = v19;\n
            v5 = v42 - 4295;\n
            v6 = a0->field_14;\n
            v7 = v42 - 4285;\n
            v8 = a0->field_18;\n
            v9 = v42 - 4274;\n
            v10 = v20;\n
            cgc_sprintf(v33, v13);\n
        }\n
        else\n
        {\n
            v38 = v31;\n
            v23 = a0->field_4;\n
            v25 = a0->field_0;\n
            v27 = a0->field_8;\n
            v29 = a0->field_14;\n
            v30 = a0->field_10;\n
            v21 = v38 - 4263;\n
            v22 = v38 - 4314;\n
            v24 = v38 - 4307;\n
            v26 = v38 - 4299;\n
            v28 = v38 - 4295;\n
            v0 = v23;\n
            v1 = v24;\n
            v2 = v25;\n
            v3 = v26;\n
            v4 = v27;\n
            v5 = v28;\n
            v6 = v29;\n
            v7 = v38 - 4285;\n
            v8 = a0->field_18;\n
            v9 = v38 - 4274;\n
            v10 = a0->field_c;\n
            v11 = v38 - 4270;\n
            v12 = v30;\n
            cgc_sprintf(v33, v21);\n
        }\n
        v34 = cgc_strlen(v33);\n
        v32 = cgc_transmit_all(1, v33, v34);\n
        if (v32)\n
            cgc__terminate();\n
        cgc_free(v33);\n
    }\n
    v46 = cgc_transmit_all(1, v31 - 3945, cgc_strlen(v31 - 3945));\n
    v32 = v46;\n
    if (v46)\n
    {\n
        v46 = cgc__terminate();\n
        return v46;\n
    }\n
    return v46;\n
}\n
", "4211326:sub_40427e": null, "4211328:cgc_parseCertificate": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCertificate(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc(36);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_bzero(v1, 36);\n
    cgc_initializeAttributes(v3);\n
    cgc_getStringAttribute(v1 + 4);\n
    cgc_getStringAttribute(v1);\n
    cgc_getStringAttribute(v1 + 8);\n
    cgc_getIntegerAttribute(v1 + 20);\n
    cgc_getIntegerAttribute(v1 + 24);\n
    cgc_getStringAttribute(v1 + 12);\n
    cgc_getStringAttribute(v1 + 16);\n
    cgc_getIntegerAttribute(v1 + 28);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4211651:sub_4043c3": null, "4211664:cgc_checkCRLs": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[20];\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
extern struct_0 *CRL;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkCRLs(unsigned int v8[3])\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_0 *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = CRL;\n
    while (true)\n
    {\n
        if (v6)\n
        {\n
            v4 = cgc_strlen(*(v6));\n
            v3 = cgc_strlen(v8[0]);\n
            if (v4 > v3)\n
                v1 = v4;\n
            else\n
                v1 = v3;\n
            v5 = v1;\n
            if (!cgc_strncmp(v6->field_0, v8[0], v5))\n
            {\n
                v4 = cgc_strlen(v6->field_8);\n
                v3 = cgc_strlen(v8[2]);\n
                if (v4 > v3)\n
                    v0 = v4;\n
                else\n
                    v0 = v3;\n
                v5 = v0;\n
                if (!cgc_strncmp(*((v6 + 8)), v8[2], v5))\n
                {\n
                    v7 = 0;\n
                    return v7;\n
                }\n
            }\n
            v6 = *((v6 + 32));\n
        }\n
        else\n
        {\n
            v7 = 1;\n
            return v7;\n
        }\n
    }\n
}\n
", "4211992:sub_404518": null, "4212000:cgc_validateCert": "typedef struct struct_0 {\n
    char padding_0[4220];\n
    unsigned int field_107c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_validateCert(unsigned int v6[7], unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    struct_0 *v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v7;  // ebx\n
    unsigned int *v8;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v6[1] && v6[0] && v6[2] && v6[5] && v6[6] && v6[3])\n
    {\n
        v7 = v3;\n
        v1 = v6[1];\n
        v2 = v7->field_107c;\n
        if (cgc_strncmp(v1, v2, cgc_strlen(&v7[1].padding_0[112])))\n
        {\n
            cgc_sendErrorResponse();\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (v6[4])\n
        {\n
            v0 = v6[4];\n
            if (!cgc_strncmp(v0, &v3->padding_0[3909], cgc_strlen(&v3->padding_0[3909])))\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        v4 = v6[5];\n
        cgc_signCert(v6);\n
        v8 = a1;\n
        *(v8) = *(v8) + 1;\n
        if (v4 == v6[5] && v6[6] > *(a1))\n
        {\n
            v5 = cgc_checkCRLs(v6);\n
            return v5;\n
        }\n
        if (v6[6] <= *(a1))\n
        {\n
            cgc_sendErrorResponse();\n
            v5 = 0;\n
            return v5;\n
        }\n
        cgc_sendErrorResponse();\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_sendErrorResponse();\n
    v5 = 0;\n
    return v5;\n
}\n
", "4212494:sub_40470e": null, "4212496:cgc_crls": "extern void* CRL;\n
\n
int cgc_crls(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    return cgc_sendCerts(v0, CRL);\n
}\n
", "4212551:sub_404747": null, "4212560:cgc_freeCert": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCert(unsigned int v2[9])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_free(v2[0]);\n
    cgc_free(v2[1]);\n
    cgc_free(v2[2]);\n
    cgc_free(v2[3]);\n
    cgc_free(v2[8]);\n
    if (v2[4])\n
    {\n
        cgc_free(v2[4]);\n
        return cgc_free(v2);\n
    }\n
    return cgc_free(v2);\n
}\n
", "4212716:sub_4047ec": null, "4212720:cgc_revokeCert": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[1571];\n
\n
int cgc_revokeCert(unsigned int v5, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0[1571];  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[1571];  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7[1571];  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v4 = v6;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v7 = cgc_parseCertificate(a0);\n
    v3 = &v7[0];\n
    if (!v7)\n
        return v7;\n
    v7 = cgc_validateCert(v3, 0, a1);\n
    v2[0] = v7;\n
    if (!v7)\n
        return v7;\n
    v1 = cgc_strlen(&v0[977] + 1);\n
    v8 = cgc_malloc(v1 + 1);\n
    v3->field_10 = v8;\n
    if (!v8)\n
        cgc__terminate();\n
    cgc_bzero(v3->field_10, v1 + 1);\n
    cgc_memcpy(v3->field_10, &v0[977] + 1, v1);\n
    cgc_signCert(&v3);\n
    v3[1].field_4 = 0;\n
    cgc_sendCerts(v5, v3);\n
    v7 = v0;\n
    v3[1].field_4 = *((v7 + 6280));\n
    *((v7 + 6280)) = v3;\n
    return v0;\n
}\n
", "4213030:sub_404926": null, "4213040:cgc_reenroll": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_reenroll(unsigned int v5, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[8];  // [bp-0x10]\n
    unsigned int v3[8];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7[8];  // eax, Other Possible Types: unsigned int\n
    unsigned int *v8;  // eax\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 100;\n
    v7 = cgc_parseCertificate(a0);\n
    v3[0] = v7;\n
    if (!v7)\n
        return v7;\n
    v7 = cgc_validateCert(v3, 0, a1);\n
    v2[0] = v7;\n
    if (!v7)\n
        return v7;\n
    if (v3[7])\n
        v1 = v3[7];\n
    v8 = a1;\n
    *(v8) = *(v8) + 1;\n
    v3[6] = *(a1) + v1;\n
    cgc_signCert(v3);\n
    cgc_sendCerts(v5, v3);\n
    v7 = cgc_freeCert(v3);\n
    return v7;\n
}\n
", "4213255:sub_404a07": null, "4213264:cgc_checkCertUse": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkCertUse(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v6 = cgc_strtok(a0, v2 - 4133);\n
    while (true)\n
    {\n
        v4 = cgc_strlen(v8);\n
        v3 = cgc_strlen(v6);\n
        if (v4 > v3)\n
            v1 = v4;\n
        else\n
            v1 = v3;\n
        v5 = v1;\n
        if (!cgc_strncmp(v8, v6, v5))\n
            break;\n
        v0 = v6;\n
        if (!cgc_strncmp(v2 - 4343, v0, cgc_strlen(v2 - 4343)))\n
            break;\n
        v6 = cgc_strtok(0, v2 - 4133);\n
        if (!v6)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
    }\n
    v7 = 1;\n
    return v7;\n
}\n
", "4213575:sub_404b47": null, "4213584:cgc_enroll": "typedef struct struct_2 {\n
    char padding_0[4220];\n
    char *field_107c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int issuer;\n
\n
int cgc_enroll(unsigned int v4, unsigned int a0, unsigned int *a1)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_1 *v3;  // [bp-0xc]\n
    unsigned int v5[9];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 100;\n
    if (!issuer)\n
        cgc_initIssuer();\n
    v3 = cgc_parseCertificate(a0);\n
    if (v3->field_0 && v3->field_8 && v3->field_c)\n
    {\n
        if (v3->field_4)\n
            cgc_free(v3->field_4);\n
        v2 = cgc_strlen(v0->field_107c);\n
        v6 = cgc_malloc(v2 + 1);\n
        v3->field_4 = v6;\n
        if (!v6)\n
            cgc__terminate();\n
        cgc_bzero(v3->field_4, v2 + 1);\n
        cgc_memcpy(v3->field_4, v0->field_107c, v2);\n
        v5 = v3;\n
        if (!*(v5))\n
            return v3;\n
        v5 = v3;\n
        if (!*((v5 + 8)))\n
            return v3;\n
        if (v3->field_1c)\n
            v1 = v3->field_1c;\n
        v7 = a1;\n
        *(v7) = *(v7) + 1;\n
        v3->field_18 = *(a1) + v1;\n
        v3->field_20 = 0;\n
        cgc_signCert(&v3);\n
        cgc_sendCerts(v4, v3);\n
        v5 = cgc_freeCert(v3);\n
        return v5;\n
    }\n
    v5 = cgc_sendErrorResponse();\n
    return v5;\n
}\n
", "4214024:sub_404d08": null, "4214032:cgc_addService": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_addService(unsigned int *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc(16);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_bzero(v1, 16);\n
    v1->field_4 = a1;\n
    v2 = cgc_strlen(a0);\n
    v6 = cgc_malloc(v2 + 1);\n
    v1->field_8 = v6;\n
    if (!v6)\n
        cgc__terminate();\n
    cgc_bzero(v1->field_8, v2 + 1);\n
    cgc_memcpy(v1->field_8, a0, v2);\n
    v1->field_c = *(v4);\n
    *(v4) = v1;\n
    return v4;\n
}\n
", "4214280:sub_404e08": null, "4214288:cgc_initServices": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initServices(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_addService(v2, \"newTokens\", cgc_requestToken);\n
    v4 = v0;\n
    cgc_addService(v2, v4 - 4355, v4 - 13780);\n
    v5 = v0;\n
    cgc_addService(v2, v5 - 4357, v5 - 14324);\n
    v6 = v0;\n
    cgc_addService(v2, v6 - 4348, v6 - 14868);\n
    v7 = v0;\n
    cgc_addService(v2, v7 - 4343, v7 - 14644);\n
    v8 = v0;\n
    cgc_addService(v2, v8 - 4121, v8 - 7476);\n
    v9 = v0;\n
    v11 = v1;\n
    return cgc_addService(v2, v9 - 4113, v9 - 8164);\n
}\n
", "4214554:sub_404f1a": null, "4214560:cgc_freeMessage": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeMessage(unsigned int v2[7])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_free(v2[5]);\n
    cgc_free(v2[6]);\n
    v4 = v1;\n
    return cgc_free(v2);\n
}\n
", "4214636:sub_404f6c": null, "4214640:cgc_getMessage": "typedef struct struct_0 {\n
    char *field_0;\n
    char padding_4[12];\n
    unsigned int field_10;\n
    char *field_14;\n
    char *field_18;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getMessage()\n
{\n
    unsigned int v0;  // [bp-0x430]\n
    char v1;  // [bp-0x42c]\n
    char *v2;  // [bp-0x2c]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    char *v5;  // [bp-0x20]\n
    char *v6;  // [bp-0x1c]\n
    struct_0 *v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10[7];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
\n
    v11 = v13;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_bzero(&v1, 0x400);\n
    v7 = cgc_malloc(28);\n
    if (!v7)\n
        cgc__terminate();\n
    cgc_bzero(v7, 28);\n
    if (!v7)\n
        cgc__terminate();\n
    if (cgc_read_until_delim_or_n(0, &v1, 33, 0x400, &v9))\n
        cgc__terminate();\n
    v6 = cgc_strtok(&v1, v0 - 4100);\n
    if (!v6)\n
    {\n
        v10[0] = 0;\n
        return v10;\n
    }\n
    v8 = cgc_strlen(v6);\n
    if (v8 > 16)\n
        v8 = 16;\n
    v14 = cgc_malloc(v8 + 1);\n
    v7->field_0 = v14;\n
    if (!v14)\n
        cgc__terminate();\n
    cgc_bzero(v7->field_0, v8 + 1);\n
    cgc_memcpy(v7->field_0, v6, v8);\n
    v5 = cgc_strtok(0, v0 - 4100);\n
    if (!v5)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    v8 = cgc_strlen(v5);\n
    if (v8 > 10)\n
        v8 = 10;\n
    cgc_memcpy(&v7->padding_4, v5, v8);\n
    v4 = cgc_strtok(0, v0 - 4100);\n
    if (!v4)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    v7->field_10 = cgc_atoi(v4);\n
    v3 = cgc_strtok(0, v0 - 4100);\n
    if (!v3)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    v8 = cgc_strlen(v3);\n
    v15 = cgc_malloc(v8 + 1);\n
    v7->field_14 = v15;\n
    if (!v15)\n
        cgc__terminate();\n
    cgc_bzero(v7->field_14, v8 + 1);\n
    cgc_memcpy(v7->field_14, v3, v8);\n
    v2 = cgc_strtok(0, v0 - 4135);\n
    if (v2)\n
    {\n
        v8 = cgc_strlen(v2);\n
        v16 = cgc_malloc(v8 + 1);\n
        v7->field_18 = v16;\n
        if (!v16)\n
            cgc__terminate();\n
        cgc_bzero(v7->field_18, v8 + 1);\n
        cgc_memcpy(v7->field_18, v2, v8);\n
    }\n
    v10 = v7;\n
    return v10;\n
}\n
", "4215678:sub_40537e": null, "4215680:cgc_authenticate": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_authenticate(unsigned int v13, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    struct_0 *v10;  // [bp-0x10]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
\n
    v12 = v14;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = a0;\n
    if (!cgc_strncmp(v6, v5 - 4098, cgc_strlen(\"PeerCert\")) && cgc_isCertCommand(v13))\n
    {\n
        v10 = cgc_parseCertificate(a1);\n
        if (!cgc_checkCertUse(v13, v10->field_c))\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        else if (cgc_validateCert(v10, v13, v5 + 5248))\n
        {\n
            v11 = 1;\n
            return v11;\n
        }\n
        else\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
    }\n
    v4 = a0;\n
    if (cgc_strncmp(v4, v5 - 3921, cgc_strlen(v5 - 3921)))\n
    {\n
        v3 = a0;\n
        if (!cgc_strncmp(v3, v5 - 4089, cgc_strlen(v5 - 4089)))\n
        {\n
            v2 = v13;\n
            if (!cgc_strncmp(v2, v5 - 4131, cgc_strlen(v5 - 4131)))\n
            {\n
                v8 = cgc_strtok(a1, v5 - 4080);\n
                v1 = v8;\n
                if (!cgc_strncmp(v1, v5 - 4078, cgc_strlen(v5 - 4078)))\n
                {\n
                    v7 = cgc_strtok(0, v5 - 4135);\n
                    v0 = v7;\n
                    if (!cgc_strncmp(v0, v5 - 4073, cgc_strlen(v5 - 4073)))\n
                    {\n
                        v11 = 1;\n
                        return v11;\n
                    }\n
                }\n
                v11 = 0;\n
                return v11;\n
            }\n
        }\n
        v11 = 0;\n
        return v11;\n
    }\n
    else\n
    {\n
        v9 = cgc_parseToken();\n
        if (!cgc_checkTokenUse(v13))\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        else if (cgc_validateToken(v9))\n
        {\n
            v11 = 1;\n
            return v11;\n
        }\n
        else\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
    }\n
}\n
", "4216448:cgc_runService": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_runService(struct_1 *v4, unsigned int a0[7])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v4;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v5 = cgc_sendErrorResponse();\n
            return v5;\n
        }\n
        v0 = a0[0];\n
        v1 = *((v3 + 8));\n
        if (!cgc_strncmp(v0, v1, cgc_strlen(*((v3 + 8)))))\n
            break;\n
        v3 = *((v3 + 12));\n
    }\n
    if (!cgc_authenticate(a0[0], &a0[1], a0[5]))\n
        v5 = cgc_sendErrorResponse();\n
    else\n
        v5 = *((v3 + 4))(a0[4], a0[6]);\n
    return v5;\n
}\n
", "4216716:sub_40578c": null, "4216720:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int private_key;\n
\n
int main(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x830]\n
    unsigned int v1;  // [bp-0x828]\n
    unsigned int v2;  // [bp-0x824]\n
    unsigned int *v3;  // [bp-0x820]\n
    void* v4;  // [bp-0x81c]\n
    unsigned int v5;  // [bp-0x818]\n
    void* v6;  // [bp-0x14]\n
    char v7;  // [bp-0x10]\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v6 = 0;\n
    v4 = 0;\n
    v5 = cgc_random(&private_key, 0x400);\n
    if (v5)\n
        cgc__terminate();\n
    cgc_initServices(&v4);\n
    while (true)\n
    {\n
        v3 = cgc_getMessage();\n
        if (!v3)\n
        {\n
            cgc_sendErrorResponse();\n
            v8 = 0;\n
            return v8;\n
        }\n
        v1 = *(v3);\n
        if (!cgc_strncmp(v1, v2 - 4014, cgc_strlen(v2 - 4014)))\n
            break;\n
        cgc_runService(v4, v3);\n
        cgc_freeMessage(v3);\n
    }\n
    v0 = &v7;\n
    v5 = cgc_transmit(1, v2 - 4135, cgc_strlen(v2 - 4135));\n
    if (v5)\n
        cgc__terminate();\n
    v8 = 0;\n
    return v8;\n
}\n
", "4217168:cgc_getToken": "typedef struct struct_0 {\n
    char padding_0[6276];\n
    unsigned int field_1884;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern void g_40717c;\n
\n
int cgc_getToken()\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char *v3;  // [bp-0x34]\n
    char v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    struct_0 *v8;  // eax\n
    unsigned int v9;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    memcpy(&v4, &g_40717c, 40);\n
    v3 = 0x4347c000;\n
    v2 = 1;\n
    for (v1 = 0; v1 < 10; v1 += 1)\n
    {\n
        if (!(0 CONCAT v3[v1 + v0->field_1884]) /m *(&(&v4)[4 * v1]) >> 32)\n
            v2 = *(&(&v4)[4 * v1]) * v2;\n
    }\n
    v8 = v0;\n
    for (v8->field_1884 = v8->field_1884 + 10; v2 < 10000000; v2 *= 10);\n
    for (; v2 > 99999999; v2 = (0 CONCAT v2) /m 10);\n
    v9 = v5;\n
    return v2;\n
}\n
", "4217411:sub_405a43": null, "4217424:cgc_isTokenCommand": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isTokenCommand(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v6;\n
    if (!cgc_strncmp(v3, v2 - 4131, cgc_strlen(\"newTokens\")))\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    v1 = v6;\n
    if (!cgc_strncmp(v1, v2 - 4113, cgc_strlen(v2 - 4113)))\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    v0 = v6;\n
    if (!cgc_strncmp(v0, v2 - 4121, cgc_strlen(v2 - 4121)))\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4217678:sub_405b4e": null, "4217680:cgc_calculateTokenSize": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calculateTokenSize(unsigned int v7[3])\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x2c]\n
    char v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_bzero(&v2, 20);\n
    v0 = v7[2];\n
    cgc_sprintf(&v2, v1 - 3968);\n
    v4 = cgc_strlen(&v2);\n
    cgc_bzero(&v2, 20);\n
    v0 = v7[0];\n
    cgc_sprintf(&v2, v1 - 3968);\n
    v3 = cgc_strlen(&v2);\n
    v5 = cgc_strlen(v1 - 3921) + 1;\n
    v5 = v4 + 1 + v5;\n
    v5 = cgc_strlen(v1 - 4285) + 1 + v5;\n
    v5 = v3 + 1 + v5;\n
    v5 += 5;\n
    v5 = cgc_strlen(v7[1]) + v5;\n
    v9 = v6;\n
    return v5;\n
}\n
", "4217961:sub_405c69": null, "4217968:cgc_sendToken": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendToken(unsigned int v15, unsigned int a0[3])\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    void* v8;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x28]\n
    char *v10;  // [bp-0x24]\n
    unsigned int v11;  // [bp-0x20]\n
    void* v12;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x14]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // ecx\n
\n
    v14 = v16;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0x4347c000;\n
    v12 = 0;\n
    v11 = cgc_calculateTokenSize(a0);\n
    v10 = cgc_malloc(v11 + 1);\n
    if (!v10)\n
        cgc__terminate();\n
    cgc_bzero(v10, v11 + 1);\n
    v12 = cgc_malloc(64);\n
    if (!v12)\n
        cgc__terminate();\n
    cgc_bzero(v12, 64);\n
    for (v8 = 0; v8 < 10; v8 += 1)\n
    {\n
        v13 += 1;\n
        cgc_sprintf(v12 + v8 * 4, v7 - 3965);\n
    }\n
    v17 = v7;\n
    v6 = a0[1];\n
    v5 = v17 - 3962;\n
    v0 = a0[2];\n
    v1 = v17 - 4285;\n
    v2 = a0[0];\n
    v3 = v17 - 4274;\n
    v4 = v6;\n
    cgc_sprintf(v10, v5);\n
    v11 = cgc_strlen(v10);\n
    v9 = cgc_transmit_all(1, v10, v11);\n
    if (v9)\n
        cgc__terminate();\n
    cgc_free(v10);\n
    return cgc_free(v12);\n
}\n
", "4218447:sub_405e4f": null, "4218448:cgc_findToken": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 *tokenStore;\n
\n
int cgc_findToken(struct_1 *v2)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = tokenStore;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((v0 + 8)) != v2->field_8)\n
        {\n
            v0 = *((v0 + 12));\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4218551:sub_405eb7": null, "4218560:cgc_removeToken": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *tokenStore;\n
\n
int cgc_removeToken(struct_1 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = tokenStore;\n
    v2 = tokenStore;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v4->field_8 == *((v1 + 8)))\n
            break;\n
        v2 = v1;\n
        v1 = *((v1 + 12));\n
    }\n
    if (v2)\n
        *((v2 + 12)) = *((v1 + 12));\n
    cgc_free(v4);\n
    v3 = 1;\n
    return v3;\n
}\n
", "4218722:sub_405f62": null, "4218736:cgc_validateToken": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_validateToken(unsigned int v3[3], unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3[2] && v3[1] && v3[0])\n
    {\n
        v1 = cgc_findToken(v3);\n
        if (!v1)\n
        {\n
            cgc_sendErrorResponse();\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (*(v1) <= *(a0))\n
        {\n
            cgc_removeToken(v1);\n
            cgc_sendErrorResponse();\n
            v2 = 0;\n
            return v2;\n
        }\n
        else\n
        {\n
            v2 = 1;\n
            return v2;\n
        }\n
    }\n
    cgc_sendErrorResponse();\n
    v2 = 0;\n
    return v2;\n
}\n
", "4218961:sub_406051": null, "4218976:cgc_parseToken": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseToken(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc(16);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_bzero(v1, 16);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_initializeAttributes();\n
    cgc_getStringAttribute(v1 + 4);\n
    cgc_getIntegerAttribute(v1 + 8);\n
    cgc_getIntegerAttribute(v1);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4219188:sub_406134": null, "4219200:cgc_refreshToken": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_refreshToken(unsigned int v4, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v7;  // eax\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = cgc_parseToken(a0);\n
    v2 = v6;\n
    if (!v6)\n
        return v6;\n
    v6 = cgc_findToken(v2);\n
    v1 = v6;\n
    if (!v6)\n
    {\n
        return v6;\n
    }\n
    else if (*(v1) > *(a1))\n
    {\n
        v7 = a1;\n
        *(v7) = *(v7) + 1;\n
        *(v1) = *(a1) + 100;\n
        v6 = cgc_sendToken(v4, v2);\n
        return v6;\n
    }\n
    else\n
    {\n
        cgc_removeToken(v2);\n
        v6 = cgc_sendErrorResponse();\n
        return v6;\n
    }\n
}\n
", "4219392:cgc_requestToken": "extern unsigned int _GLOBAL_OFFSET_TABLE_[1572];\n
\n
int cgc_requestToken(unsigned int v3, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0[1572];  // [bp-0x18]\n
    unsigned int v1[1572];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[1572];  // eax, Other Possible Types: unsigned int\n
    unsigned int *v6;  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v5 = cgc_parseToken(a0);\n
    v1[0] = v5;\n
    if (v5)\n
    {\n
        v1[2] = cgc_getToken();\n
        v6 = a1;\n
        *(v6) = *(v6) + 1;\n
        v1[0] = *(a1) + 100;\n
        cgc_sendToken(v3, v1);\n
        v5 = v0;\n
        v1[3] = *((v5 + 6284));\n
        *((v5 + 6284)) = v1;\n
        return v0;\n
    }\n
    return v5;\n
}\n
", "4219541:sub_406295": null, "4219552:cgc_checkTokenUse": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkTokenUse(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0xc]\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = cgc_strtok(a0, v4 - 4133);\n
    while (true)\n
    {\n
        v6 = cgc_strlen(v10);\n
        v5 = cgc_strlen(v8);\n
        if (v6 > v5)\n
            v3 = v6;\n
        else\n
            v3 = v5;\n
        v7 = v3;\n
        v1 = v10;\n
        v2 = v8;\n
        if (!cgc_strncmp(v1, v2, cgc_strlen(v10)))\n
            break;\n
        v0 = v10;\n
        if (!cgc_strncmp(v4 - 4121, v0, cgc_strlen(v4 - 4121)))\n
            break;\n
        v8 = cgc_strtok(0, v4 - 4133);\n
        if (!v8)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    v9 = 1;\n
    return v9;\n
}\n
", "4219886:sub_4063ee": null, "4219888:cgc_revokeToken": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_revokeToken(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = cgc_parseToken(a0);\n
    v1 = v5;\n
    if (!v5)\n
        return v5;\n
    if (!cgc_removeToken(v1))\n
        v5 = cgc_sendErrorResponse();\n
    else\n
        v5 = cgc_sendErrorResponse();\n
    return v5;\n
}\n
", "4220020:sub_406474": null, "4220032:cgc_clearAttributes": "typedef struct struct_0 {\n
    char padding_0[6288];\n
    unsigned int field_1890;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *attributes;\n
\n
int cgc_clearAttributes()\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    struct_1 *v1;  // [bp-0x10]\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v2 = attributes; v2; v2 = v1)\n
    {\n
        v1 = *((v2 + 8));\n
        *((v2 + 4)) = 0;\n
        *(v2) = 0;\n
        *((v2 + 8)) = 0;\n
        cgc_free(v2);\n
    }\n
    v0->field_1890 = 0;\n
    return v0;\n
}\n
", "4220155:sub_4064fb": null, "4220160:cgc_initializeAttributes": "typedef struct struct_0 {\n
    char padding_0[6288];\n
    unsigned int field_1890;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initializeAttributes(unsigned int v6)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_1 *v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    struct_0 *v10;  // eax\n
    unsigned int v11;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_clearAttributes();\n
    v4 = cgc_strtok(v6, &v0->padding_0[3901]);\n
    do\n
    {\n
        v3 = cgc_strtok(0, &v0->padding_0[3899]);\n
        v2 = cgc_malloc(12);\n
        if (!v2)\n
            cgc__terminate();\n
        cgc_bzero(v2, 12);\n
        v1 = cgc_strlen(v4);\n
        v8 = cgc_malloc(v1 + 1);\n
        v2->field_0 = v8;\n
        if (!v8)\n
            cgc__terminate();\n
        cgc_bzero(v2->field_0, v1 + 1);\n
        cgc_memcpy(v2->field_0, v4, v1);\n
        v1 = cgc_strlen(v3);\n
        v9 = cgc_malloc(v1 + 1);\n
        v2->field_4 = v9;\n
        if (!v9)\n
            cgc__terminate();\n
        cgc_bzero(v2->field_4, v1 + 1);\n
        cgc_memcpy(v2->field_4, v3, v1);\n
        v10 = v0;\n
        v2->field_8 = v10->field_1890;\n
        v10->field_1890 = v2;\n
        v4 = cgc_strtok(0, &v0->padding_0[3901]);\n
    } while (v4);\n
    v11 = v5;\n
    return v4;\n
}\n
", "4220621:sub_4066cd": null, "4220624:cgc_sendErrorResponse": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendErrorResponse(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = cgc_malloc(cgc_strlen(v7) + 10);\n
    if (!v5)\n
        cgc__terminate();\n
    v1 = v5;\n
    cgc_bzero(v1, cgc_strlen(v7) + 10);\n
    v0 = v7;\n
    cgc_sprintf(v5, v3 - 3950);\n
    v2 = v5;\n
    v4 = cgc_transmit_all(1, v2, cgc_strlen(v5));\n
    if (v4)\n
    {\n
        cgc__terminate();\n
        return cgc_free(v5);\n
    }\n
    return cgc_free(v5);\n
}\n
", "4220884:sub_4067d4": null, "4220896:cgc_getStringAttribute": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *attributes;\n
\n
int cgc_getStringAttribute(struct_0 *v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    struct_0 *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = attributes;\n
    v5 = attributes;\n
    while (true)\n
    {\n
        if (!v5)\n
            return v7;\n
        v3 = cgc_strlen(*(v5));\n
        v2 = cgc_strlen(a0);\n
        if (v3 <= v2)\n
            v0 = v2;\n
        else\n
            v0 = v3;\n
        v4 = v0;\n
        if (!cgc_strncmp(*(v5), a0, v4))\n
        {\n
            v7 = v6;\n
            *(v7) = *((v5 + 4));\n
            return v6;\n
        }\n
        v7 = *((v5 + 8));\n
        v5 = v7;\n
    }\n
}\n
", "4221099:sub_4068ab": null, "4221104:cgc_getIntegerAttribute": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getIntegerAttribute(unsigned int *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    cgc_getStringAttribute(&v1, a0);\n
    if (!v1)\n
    {\n
        v5 = v3;\n
        *(v5) = 0;\n
        return v3;\n
    }\n
    v5 = v3;\n
    *(v5) = cgc_atoi(v1);\n
    return v3;\n
}\n
", "4221208:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:memcpy": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_random": null, "5242900:cgc_allocate": null, "5242904:cgc_deallocate": null, "5242908:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}