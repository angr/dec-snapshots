{"4202496:_init": "extern struct_0 *g_40e118;\n
\n
int _init()\n
{\n
    if (g_40e118)\n
    {\n
        g_40e118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 49199;\n
    v6 = v5 + 43;\n
    v7 = v5 + 43;\n
    if (v7 == v6)\n
        return v5 + 43;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 49135;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 43;\n
    v9 = (v6 + 43 - (v6 + 43) >> 31) + (43 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40e114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40e114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203055:sub_40222f": null, "4203056:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4203089:sub_402251": null, "4203104:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203123:sub_402273": null, "4203136:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203152:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203168:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203184:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203198:sub_4022be": null, "4203200:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203222:sub_4022d6": null, "4203232:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203286:sub_402316": null, "4203296:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8476 + v0];\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8348 + v0];\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203459:sub_4023c3": null, "4203472:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203491:sub_4023e3": null, "4203504:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4203593:sub_402449": null, "4203600:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_40e250;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
        return 0;\n
    if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_402507;\n
            else\n
                goto LABEL_0x402520;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_40e250;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_402507;\n
            }\n
            while (true)\n
            {\n
LABEL_402507:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4204026:sub_4025fa": null, "4204032:cgc_get_size_class": "extern unsigned int g_40e154;\n
extern unsigned int g_40e158;\n
extern unsigned int g_40e15c;\n
extern unsigned int g_40e160;\n
extern unsigned int g_40e164;\n
extern unsigned int g_40e168;\n
extern unsigned int g_40e16c;\n
extern unsigned int g_40e170;\n
extern unsigned int g_40e174;\n
extern unsigned int g_40e178;\n
extern unsigned int g_40e17c;\n
extern unsigned int g_40e180;\n
extern unsigned int g_40e184;\n
extern unsigned int g_40e188;\n
extern unsigned int g_40e18c;\n
extern unsigned int g_40e190;\n
extern unsigned int g_40e194;\n
extern unsigned int g_40e198;\n
extern unsigned int g_40e19c;\n
extern unsigned int g_40e1a0;\n
extern unsigned int g_40e1a4;\n
extern unsigned int g_40e1a8;\n
extern unsigned int g_40e1ac;\n
extern unsigned int g_40e1b0;\n
extern unsigned int g_40e1b4;\n
extern unsigned int g_40e1b8;\n
extern unsigned int g_40e1bc;\n
extern unsigned int g_40e1c0;\n
extern unsigned int g_40e1c4;\n
extern unsigned int g_40e1c8;\n
extern unsigned int g_40e1cc;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_40e154 < v1)\n
    {\n
        v2 = 2;\n
        if (g_40e158 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40e15c < v1)\n
            {\n
                v2 = 4;\n
                if (g_40e160 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_40e164 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_40e168 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40e16c < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_40e170 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_40e174 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_40e178 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40e17c < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_40e180 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_40e184 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_40e188 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_40e18c < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_40e190 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_40e194 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_40e198 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_40e19c < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_40e1a0 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_40e1a4 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_40e1a8 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_40e1ac < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_40e1b0 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_40e1b4 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_40e1b8 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_40e1bc < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_40e1c0 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_40e1c4 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_40e1c8 < v1)\n
                                                                                                                            v2 = 31 + (g_40e1cc < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204551:sub_402807": null, "4204560:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4204653:sub_40286d": null, "4204656:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // ecx\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4204751:sub_4028cf": null, "4204752:cgc_coalesce": "typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    struct struct_4 *field_10;\n
    struct struct_2 *field_14;\n
} struct_5;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    struct struct_4 *field_10;\n
    struct struct_3 *field_14;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_3;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_5 *v0)\n
{\n
    struct_5 *v1;  // esi\n
    struct_2 *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // ecx\n
    unsigned int v7;  // eax\n
    struct_1 *v8;  // edx\n
    struct_0 *v9;  // ecx\n
    struct_1 *v10;  // edx\n
    struct_1 *v11;  // edx\n
    struct_4 *v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ecx\n
    struct_0 *v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    struct_1 *v20;  // edx\n
    struct_0 *v21;  // ecx\n
    struct_1 *v22;  // edx\n
    struct_1 *v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    struct_0 *v28;  // ecx\n
    unsigned int v29;  // ecx\n
    struct_2 *v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    struct_4 *v33;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v34;  // eax, Other Possible Types: unsigned int, struct_2 *, struct_3 *\n
    struct_1 *v35;  // edx\n
    unsigned int v36;  // ecx\n
    struct_4 *v37;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    struct_4 *v43;  // ecx, Other Possible Types: unsigned int\n
    struct_3 *v44;  // eax, Other Possible Types: unsigned int\n
    struct_4 *v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_14;\n
    if (!v1->field_14)\n
        return v34;\n
    v12 = v1->field_10;\n
    if (!v2->field_4)\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!v12->field_4)\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(v12->field_0);\n
            v6 = v12->field_c;\n
            if (v6)\n
                v6->field_8 = v12->field_8;\n
            v10 = v12->field_8;\n
            if (v10)\n
                v10->field_c = v6;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v4]) == v12)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v4]) = v10;\n
            v12->field_8 = 0;\n
            v12->field_c = 0;\n
            v12->field_4 = 0;\n
            v14 = v1->field_0;\n
            v15 = cgc_get_size_class(v14);\n
            v17 = v1->field_c;\n
            if (v17)\n
                v17->field_8 = v1->field_8;\n
            v22 = v1->field_8;\n
            if (v22)\n
                v22->field_c = v17;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v15]) == v1)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v15]) = v22;\n
            v1->field_8 = 0;\n
            v1->field_c = 0;\n
            v1->field_4 = 0;\n
            v26 = v14 + v1->field_10->field_0;\n
            v1->field_0 = v26;\n
            v27 = cgc_get_size_class(v26);\n
            v1->field_4 = 1;\n
            v29 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v27]);\n
            if (v29)\n
            {\n
                v1->field_8 = v29;\n
                *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v27]) + 12)) = v1;\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v27]) = v1;\n
                v1->field_c = 0;\n
                v33 = v1->field_10;\n
                v34 = v33->field_14;\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            else\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v27]) = v1;\n
                v33 = v1->field_10;\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_402c4a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_402c51:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && v12->field_4)\n
    {\n
        v3 = cgc_get_size_class(v2->field_0);\n
        v5 = v2->field_c;\n
        if (v5)\n
            v5->field_8 = v2->field_8;\n
        v8 = v2->field_8;\n
        if (v8)\n
            v8->field_c = v5;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v3]) == v2)\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v3]) = v8;\n
            v12 = v1->field_10;\n
        }\n
        v2->field_8 = 0;\n
        v2->field_c = 0;\n
        v2->field_4 = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            v16->field_8 = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            v20->field_c = v16;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v13]) == v12)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v13]) = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = v1->field_0;\n
        v25 = cgc_get_size_class(v24);\n
        v28 = v1->field_c;\n
        if (v28)\n
            v28->field_8 = v1->field_8;\n
        v35 = v1->field_8;\n
        if (v35)\n
            v35->field_c = v28;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v25]) == v1)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v25]) = v35;\n
        v1->field_8 = 0;\n
        v1->field_c = 0;\n
        v1->field_4 = 0;\n
        v38 = v1->field_14;\n
        v39 = v24 + v1->field_14->field_0;\n
        v1->field_14->field_0 = v39;\n
        v40 = v39 + v1->field_10->field_0;\n
        v38->field_0 = v40;\n
        v41 = cgc_get_size_class(v40);\n
        v38->field_4 = 1;\n
        v42 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v41]);\n
        if (v42)\n
        {\n
            v38->field_8 = v42;\n
            *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v41]) + 12)) = v38;\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v41]) = v38;\n
            v38->field_c = 0;\n
            v43 = v1->field_10;\n
            v44 = v43->field_14;\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        else\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v41]) = v38;\n
            v43 = v1->field_10;\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_402a41:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            v45->field_14 = v44;\n
            v34 = v1->field_14;\n
            if (!v34)\n
                goto LABEL_402b50;\n
            goto LABEL_402b4a;\n
        }\n
    }\n
    v34 = v1->field_10;\n
    if (!v34)\n
        return v1->field_10;\n
    if (v34->field_4)\n
        return v1->field_10;\n
    v7 = cgc_get_size_class(v2->field_0);\n
    v9 = v2->field_c;\n
    if (v9)\n
        v9->field_8 = v2->field_8;\n
    v11 = v2->field_8;\n
    if (v11)\n
        v11->field_c = v9;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v7]) == v2)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v7]) = v11;\n
    v2->field_8 = 0;\n
    v2->field_c = 0;\n
    v2->field_4 = 0;\n
    v18 = v1->field_0;\n
    v19 = cgc_get_size_class(v18);\n
    v21 = v1->field_c;\n
    if (v21)\n
        v21->field_8 = v1->field_8;\n
    v23 = v1->field_8;\n
    if (v23)\n
        v23->field_c = v21;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v19]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v19]) = v23;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    v30 = v1->field_14;\n
    v31 = v18 + v1->field_14->field_0;\n
    v1->field_14->field_0 = v31;\n
    v32 = cgc_get_size_class(v31);\n
    v30->field_4 = 1;\n
    v36 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v32]);\n
    if (v36)\n
    {\n
        v30->field_8 = v36;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v32]) + 12)) = v30;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v32]) = v30;\n
        v30->field_c = 0;\n
    }\n
    else\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v32]) = v30;\n
        v34 = v1->field_14;\n
        if (!v34)\n
            goto LABEL_402b50;\n
LABEL_402b4a:\n
        *((v34 + 16)) = v1->field_10;\n
LABEL_402b50:\n
        v37 = v1->field_10;\n
        if (!v37)\n
            return v34;\n
        goto LABEL_402c51;\n
    }\n
    v34 = v1->field_14;\n
    if (!v34)\n
        goto LABEL_402b50;\n
    goto LABEL_402b4a;\n
}\n
", "4205728:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205785:sub_402cd9": null, "4205792:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205855:sub_402d1f": null, "4205856:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4205986:sub_402da2": null, "4206000:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4206256:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4206366:sub_402f1e": null, "4206368:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
\n
    v6 = a2;\n
    v7 = a1;\n
    v8 = a0;\n
    v11 = v5;\n
    if (v8 < v7)\n
    {\n
        v3 = v8;\n
        v2 = 0;\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v8) /m v7;\n
        v3 = tmp_9 >> 32;\n
        v11 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v8) /m v7, v7, v6 - 1, a3);\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    if (!v2)\n
    {\n
        tmp_2 = v6;\n
        v12 = v6 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_402ffb:\n
    if (!(a3 & 2))\n
    {\n
        v13 = v3;\n
        v14 = v13 + 87;\n
    }\n
    else\n
    {\n
        v13 = v3;\n
        v14 = v13 + 55;\n
    }\n
    if (v13 < 10)\n
        v14 = v13 + 48;\n
    v1 = v14;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4206660:sub_403044": null, "4206672:cgc_fdprintf": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fdprintf(unsigned int v10, struct struct_1 **a0)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_2 *v4;  // [bp-0x38]\n
    struct_2 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    struct struct_0 **v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v11;  // [bp+0xc]\n
    struct struct_1 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_2 *v14;  // edx, Other Possible Types: unsigned int\n
    struct_2 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    struct struct_1 **v19;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v20;  // eax, Other Possible Types: unsigned int\n
    char *v21;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    char *v24;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v20 = v12 + 1;\n
        a0 = v20;\n
        *(&v12) = *(v12);\n
        if (v6 == 37)\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = v20;\n
                while (true)\n
                {\n
                    v20 = v19 + 1;\n
                    a0 = v20;\n
                    v16 = *(v19);\n
                    v17 = v16;\n
                    if (v17 - 49 >= 9)\n
                        break;\n
                    v18 = cgc_strtol(v19, &a0);\n
                    v19 = a0;\n
                }\n
                switch (v17)\n
                {\n
                case 88:\n
                    v21 = v9 | 2;\n
                    goto LABEL_403209;\n
                case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
LABEL_403137:\n
                    v6 = v16;\n
                    break;\n
                case 99:\n
                    v22 = v8;\n
                    v8 = v22 + 1;\n
                    v6 = *(v22);\n
                    break;\n
                case 100:\n
                    v23 = v8;\n
                    v8 = v23 + 1;\n
                    v24 = *(v23);\n
                    if (v24 >= 0)\n
                    {\n
                        v28 = v10;\n
                    }\n
                    else\n
                    {\n
                        v6 = 45;\n
                        v5 = &v7;\n
                        v28 = v10;\n
                        cgc_transmit(v10, &v6, 1);\n
                        v24 = -(v24);\n
                    }\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    v0 = v24;\n
                    goto LABEL_403272;\n
                case 115:\n
                    v25 = v8;\n
                    v8 = v25 + 1;\n
                    v9 = &*(v25)->field_0;\n
                    v27 = v10;\n
                    v14 = &v7;\n
                    v15 = &v6;\n
                    if (cgc_strlen())\n
                    {\n
                        v29 = 0;\n
                        do\n
                        {\n
                            v6 = v9[v29];\n
                            v5 = v14;\n
                            v4 = v15;\n
                            cgc_transmit(v27, v15, 1);\n
                            v29 += 1;\n
                            v15 = &v6;\n
                            v14 = &v7;\n
                        } while (v29 < cgc_strlen(v9, v4, 1));\n
                    }\n
                    goto LABEL_4030a7;\n
                case 117:\n
                    v26 = v8;\n
                    v8 = v26 + 1;\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    goto LABEL_40321b;\n
                case 120:\n
                    v21 = v9;\n
LABEL_403209:\n
                    v26 = v8;\n
                    v8 = v26 + 4;\n
                    v3 = v21;\n
                    v2 = v18;\n
                    v1 = 16;\n
LABEL_40321b:\n
                    v0 = *(v26);\n
                    v28 = v10;\n
LABEL_403272:\n
                    cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                    v27 = v28;\n
                    v14 = &v7;\n
                    v15 = &v6;\n
                    goto LABEL_4030a7;\n
                default:\n
                    if (v17 == 37)\n
                        goto LABEL_0x403223;\n
                    else\n
                        goto LABEL_403111;\n
                }\n
LABEL_403111:\n
                if (!(v17 == 48))\n
                    goto LABEL_403137;\n
                v9 = 1;\n
            }\n
        }\n
        v6 = v12;\n
        v5 = v14;\n
        cgc_transmit(v13, v15, 1);\n
        v27 = v13;\n
        v14 = &v7;\n
LABEL_4030a7:\n
        v13 = v27;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4206726:sub_403086": null, "4207252:sub_403294": null, "4207264:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033c4;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033c4;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_4033c4:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4207610:sub_4033fa": null, "4207616:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_sprintf(char v8[2], struct_0 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_1 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_0 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_0 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_0 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_1 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_1 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_1 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_4035a7;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_403527:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_403527;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_4035a7:\n
                        v8 = v20 + 1;\n
                        goto LABEL_40344d;\n
                    }\n
                }\n
            }\n
LABEL_40344d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4207670:sub_403436": null, "4208069:sub_4035c5": null, "4208080:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40363a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40363a:\n
    return v5;\n
}\n
", "4208196:sub_403644": null, "4208208:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4036ba;\n
        }\n
    }\n
LABEL_4036ba:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4208247:sub_403677": null, "4208352:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4208409:sub_403719": null, "4208416:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4208458:sub_40374a": null, "4208464:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4208532:sub_403794": null, "4208544:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4208609:sub_4037e1": null, "4208624:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208700:sub_40383c": null, "4208704:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4208731:sub_40385b": null, "4208736:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4208818:sub_4038b2": null, "4208887:sub_4038f7": null, "4208896:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(v0) - *(a0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v4);\n
        }\n
    }\n
}\n
", "4208978:sub_403952": null, "4208992:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4209130:sub_4039ea": null, "4209136:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_403a5d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_403a5d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4209255:sub_403a67": null, "4209264:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4209307:sub_403a9b": null, "4209479:sub_403b47": null, "4209575:sub_403ba7": null, "4209584:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4209625:sub_403bd9": null, "4209632:cgc_engine_destroy": "typedef struct struct_0 {\n
    char padding_0[612];\n
    unsigned int field_264;\n
} struct_0;\n
\n
extern struct_1 *engine;\n
\n
int cgc_engine_destroy()\n
{\n
    unsigned int v1;  // eax\n
\n
    if (engine)\n
    {\n
        cgc_free(engine->field_264);\n
        v1 = cgc_free(engine);\n
        engine = 0;\n
        return v1;\n
    }\n
    return engine;\n
}\n
", "4209701:sub_403c25": null, "4209712:cgc_engine_init": "typedef struct struct_1 {\n
    char padding_0[304];\n
    struct struct_0 *field_130;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[612];\n
    unsigned int field_264;\n
} struct_0;\n
\n
extern unsigned int KING_MOVES;\n
extern unsigned int KNIGHT_MOVES;\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern char engine[8];\n
\n
int cgc_engine_init()\n
{\n
    unsigned int *v0;  // [bp-0x68], Other Possible Types: unsigned int\n
    int tmp_6;  // tmp #6\n
    int tmp_1;  // tmp #1\n
    int tmp_0;  // tmp #0\n
    int tmp_17;  // tmp #17\n
    void* v1;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x60]\n
    unsigned int *v3;  // [bp-0x5c]\n
    unsigned int v4;  // [bp-0x58]\n
    char v5;  // [bp-0x51]\n
    unsigned int v6;  // [bp-0x50]\n
    unsigned int v7;  // [bp-0x4c], Other Possible Types: char\n
    unsigned int v8;  // [bp-0x48]\n
    unsigned int *v9;  // [bp-0x44], Other Possible Types: unsigned int\n
    unsigned int *v10;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x38]\n
    unsigned int v13;  // [bp-0x34]\n
    unsigned int *v14;  // [bp-0x30]\n
    unsigned int *v15;  // [bp-0x2c]\n
    struct_1 *v16;  // [bp-0x28]\n
    void* v17;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v18;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v19;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v20;  // [bp-0x18]\n
    unsigned int v21;  // [bp-0x14]\n
    void* v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int *v26;  // ebx\n
    void* v27;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // esi\n
    void* v30;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v31;  // cc_dep1\n
    unsigned int v32;  // esi\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // edi\n
    void* v35;  // ebp, Other Possible Types: unsigned int\n
    char v36;  // al\n
    void* v37;  // edx, Other Possible Types: unsigned int\n
    void* v38;  // eax, Other Possible Types: unsigned int\n
    unsigned int v39;  // cc_dep1\n
    unsigned int v40;  // ecx\n
    char v41;  // al\n
    unsigned int v42;  // eax\n
    void* v43;  // edx, Other Possible Types: unsigned int\n
    unsigned int v44;  // cc_dep1\n
    char v45;  // dl\n
    unsigned int v46;  // ebp\n
    void* v47;  // edi, Other Possible Types: unsigned int\n
    unsigned int v48;  // ebp\n
    unsigned int v49;  // edi\n
    char v50;  // al\n
    unsigned int v51;  // eax, Other Possible Types: char\n
    unsigned int v52;  // esi\n
    unsigned int v53;  // cc_dep1\n
    void* v54;  // esi, Other Possible Types: unsigned int\n
    char v55;  // dl\n
    void* v56;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v57;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v58;  // ecx\n
    unsigned int *v59;  // edx, Other Possible Types: char, unsigned int\n
    unsigned int v60;  // edi\n
    unsigned int v61;  // ebp\n
    unsigned int v62;  // eax\n
    unsigned int v63;  // edi\n
    unsigned int *v64;  // ebp\n
    void* v65;  // edx, Other Possible Types: unsigned int\n
    unsigned int v66;  // cc_dep1\n
    unsigned int *v67;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v68;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v69;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v70;  // edi, Other Possible Types: unsigned int\n
    unsigned int v71;  // edi\n
    void* v72;  // eax, Other Possible Types: unsigned int\n
    unsigned int v73;  // ebp\n
    void* v74;  // eax, Other Possible Types: unsigned int\n
    char v75;  // bl\n
    unsigned int v76;  // edi\n
    void* v77;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v78;  // edi\n
    void* v79;  // esi, Other Possible Types: unsigned int\n
    char v80;  // bl\n
    unsigned int v81;  // edx\n
    void* v82;  // eax, Other Possible Types: unsigned int\n
    unsigned int v83;  // edi\n
    unsigned int v84;  // esi\n
    unsigned int v85;  // edx\n
    unsigned int v86;  // eax\n
    unsigned int *v87;  // ecx\n
    unsigned int v88;  // esi\n
    unsigned int *v89;  // esi, Other Possible Types: unsigned int\n
    void* v90;  // edx, Other Possible Types: unsigned int\n
    void* v91;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v92;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v93;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v94;  // edx\n
    void* v95;  // edi, Other Possible Types: unsigned int\n
    unsigned int v96;  // ebx\n
    unsigned int v97;  // eax\n
    void* v98;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v99;  // eax\n
    unsigned int v100;  // ebp\n
    char v101;  // dl\n
    unsigned int v102;  // edx\n
    void* v103;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v104;  // cc_dep1\n
    unsigned int v105;  // edx\n
    unsigned int v106;  // ebx\n
    unsigned int v107;  // eax\n
    unsigned int v108;  // eax\n
    unsigned int v109;  // edi\n
    char v110;  // dl\n
    unsigned int v111;  // ebx\n
    void* v112;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v113;  // edx\n
    unsigned int v114;  // cc_dep1\n
    unsigned int v115;  // ebx\n
    unsigned int v116;  // ebp\n
    void* v117;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v118;  // edi\n
    unsigned int v119;  // edx\n
    unsigned int v120;  // eax\n
    char v121;  // bl\n
    unsigned int v122;  // ebx\n
    unsigned int *v123;  // ebp\n
    void* v124;  // edi, Other Possible Types: unsigned int\n
    unsigned int v125;  // cc_dep1\n
    unsigned int v126;  // ebx\n
    unsigned int v127;  // edi\n
    unsigned int v128;  // eax\n
    void* v129;  // edx, Other Possible Types: unsigned int\n
    char v130;  // al\n
    unsigned int v131;  // eax\n
    void* v132;  // edx, Other Possible Types: unsigned int\n
    unsigned int v133;  // cc_dep1\n
    unsigned int *v134;  // esi\n
    unsigned int v135;  // eax\n
    void* v136;  // edx, Other Possible Types: unsigned int\n
    char v137;  // al\n
    unsigned int v138;  // eax\n
    void* v139;  // edx, Other Possible Types: unsigned int\n
    unsigned int v140;  // cc_dep1\n
    unsigned int *v141;  // esi\n
    unsigned int v142;  // eax\n
    void* v143;  // edx, Other Possible Types: unsigned int\n
    unsigned int v144;  // eax\n
    void* v145;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v146;  // esi, Other Possible Types: unsigned int\n
    unsigned int v147;  // edx\n
    void* v148;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v149;  // cc_dep1\n
    void* v150;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v151;  // ecx\n
    unsigned int v152;  // ebx\n
    unsigned int v153;  // eax\n
    unsigned int v154;  // ecx\n
    struct_0 *v155;  // edx\n
\n
    *(&engine[0]) = cgc_malloc(808);\n
    if (!engine)\n
        return 0;\n
    cgc_memset(engine, 0, 808);\n
    cgc_memset(engine + 78, 6, 64);\n
    v19 = &KING_MOVES;\n
    v16 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v18 = &KNIGHT_MOVES;\n
    v17 = 0;\n
    v23 = 0;\n
    do\n
    {\n
        v24 = (v23 < 6 ? 6 : v23);\n
        v20 = v24 * 8;\n
        v21 = v23 - 2;\n
        v5 = !(v21 < 8);\n
        v25 = v23 - 1;\n
        v4 = v23;\n
        v12 = v23 + 1;\n
        v89 = 0;\n
        v2 = v25;\n
        do\n
        {\n
            *(&v25) = v25 < 8;\n
            *(&v23) = !v89 | v5;\n
            v26 = v17 + v89;\n
            v28 = (0 CONCAT 1) << (v26 - 17 & 31) >> 32;\n
            v27 = 1 << (v26 - 17 & 31);\n
            v37 = 0;\n
            if ((v26 - 17 & 32))\n
                v28 = v27;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v27 = 0;\n
            if (v23)\n
                v28 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v27 = 0;\n
            v3 = v89;\n
            *(&v23) = !(v89 < 2);\n
            v0 = v26;\n
            tmp_6 = v26 - 10;\n
            v29 = (0 CONCAT 1) << (v26 - 10 & 31) >> 32;\n
            v30 = 1 << (v26 - 10 & 31);\n
            v31 = tmp_6 & 32;\n
            if ((tmp_6 & 32))\n
                v29 = v30;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v30 = 0;\n
            if (!(v23 & v25))\n
                v29 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v30 = 0;\n
            v32 = v29 | v28;\n
            v33 = v30 | v27;\n
            v34 = 0;\n
            v35 = 0;\n
            if (v21 > 7)\n
            {\n
LABEL_403f64:\n
                v49 = v34 | v33;\n
                v48 = v35 | v32;\n
                if (v2 > 7)\n
                {\n
                    goto LABEL_404007;\n
                }\n
                else\n
                {\n
                    v57 = v3;\n
                    if (v57 > 5)\n
                    {\n
                        v38 = 0;\n
                    }\n
                    else\n
                    {\n
                        v36 = v0;\n
                        tmp_1 = v36 - 6;\n
                        v37 = (0 CONCAT 1) << (v36 - 6 & 31) >> 32;\n
                        v38 = 1 << (v36 - 6 & 31);\n
                        v39 = tmp_1 & 32;\n
                        if ((tmp_1 & 32))\n
                            v37 = v38;\n
                        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                            v38 = 0;\n
                    }\n
                    v40 = v4;\n
                    v48 |= v37;\n
                    v49 |= v38;\n
                    if (!(v40 <= 5))\n
                        goto LABEL_404018;\n
                    goto LABEL_403fc7;\n
                }\n
            }\n
            else if (v3 <= 6)\n
            {\n
                v35 = (0 CONCAT 1) << (v0 - 15 & 31) >> 32;\n
                v34 = 1 << (v0 - 15 & 31);\n
                if ((v0 - 15 & 32))\n
                    v35 = v34;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                {\n
                    v34 = 0;\n
                    goto LABEL_403f64;\n
                }\n
                else\n
                {\n
                    goto LABEL_403f64;\n
                }\n
            }\n
            else\n
            {\n
                v49 = v33;\n
                v48 = v32;\n
LABEL_404007:\n
                v40 = v4;\n
                v57 = v3;\n
                if (v40 <= 5)\n
                {\n
LABEL_403fc7:\n
                    v41 = v0;\n
                    tmp_1 = v36 + 15;\n
                    v42 = (0 CONCAT 1) << (v36 + 15 & 31) >> 32;\n
                    v43 = 1 << (tmp_1 & 31);\n
                    v44 = tmp_1 & 32;\n
                    if ((tmp_1 & 32))\n
                        v42 = v43;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v43 = 0;\n
                    if (!v57)\n
                        v42 = v57;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v43 = v57;\n
                    v48 |= v42;\n
                    v49 |= v43;\n
                    v6 = v12;\n
                    goto LABEL_40402b;\n
                }\n
                else\n
                {\n
LABEL_404018:\n
                    if (v40 != 6)\n
                    {\n
                        v1 = 0;\n
                        v6 = v12;\n
                        v54 = 0;\n
LABEL_404102:\n
                        v56 = 0;\n
                    }\n
                    else\n
                    {\n
                        v6 = 7;\n
LABEL_40402b:\n
                        v51 = v48;\n
                        v1 = v49;\n
                        v45 = v20 + v57;\n
                        v46 = (0 CONCAT 1) << (v45 + 6 & 31) >> 32;\n
                        v47 = 1 << (v45 + 6 & 31);\n
                        if ((v45 + 6 & 32))\n
                            v46 = v47;\n
                        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                            v47 = 0;\n
                        if (v57 < 2)\n
                            v46 = 0;\n
                        if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                            v47 = 0;\n
                        v48 = v46 | v51;\n
                        v49 = v47 | v1;\n
                        if (v4 <= 5 && v57 <= 6)\n
                        {\n
                            v50 = v0;\n
                            tmp_1 = v36 + 17;\n
                            v51 = (0 CONCAT 1) << (v36 + 17 & 31) >> 32;\n
                            v52 = 1 << (tmp_1 & 31);\n
                            v53 = tmp_1 & 32;\n
                            if ((tmp_1 & 32))\n
                                v51 = v52;\n
                            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                                v52 = 0;\n
                            v48 |= v51;\n
                            v49 |= v52;\n
                        }\n
                        v54 = 0;\n
                        *(&v51) = 1;\n
                        if (v57 > 5)\n
                        {\n
                            v1 = v51;\n
                            goto LABEL_404102;\n
                        }\n
                        else\n
                        {\n
                            v1 = v51;\n
                            v55 += 10;\n
                            v56 = (0 CONCAT 1) << (v45 & 31) >> 32;\n
                            v54 = 1 << (v45 & 31);\n
                            if ((v55 + 10 & 32))\n
                                v56 = v54;\n
                            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                                v54 = 0;\n
                            continue;\n
                        }\n
                    }\n
                }\n
            }\n
            v58 = v2;\n
            v59 = v0;\n
            v60 = v49 | v54;\n
            v61 = v48 | v56;\n
            v10 = 0;\n
            v62 = v18;\n
            *((v62 + v57 * 8)) = v60;\n
            *((v62 + v57 * 8 + 4)) = v61;\n
            v11 = 0;\n
            v0 = 0;\n
            v9 = 0;\n
            if (v58 <= 7)\n
            {\n
                tmp_0 = v59 - 9;\n
                v63 = (0 CONCAT 1) << (v59 - 9 & 31) >> 32;\n
                v64 = v59;\n
                v65 = 1 << (v59 - 9 & 31);\n
                v66 = tmp_0 & 32;\n
                if ((tmp_0 & 32))\n
                    v63 = v65;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v65 = 0;\n
                if (!v57)\n
                    v63 = v57;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v65 = v57;\n
                v67 = (0 CONCAT 1) << (v64 - 8 & 31) >> 32;\n
                v68 = 1 << (v64 - 8 & 31);\n
                if ((v64 - 8 & 32))\n
                    v67 = v68;\n
                v0 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v68 = 0;\n
                v11 = v67 | v63;\n
                v10 = v68 | v65;\n
                if (v57 > 6)\n
                {\n
                    v9 = 0;\n
                    v59 = v64;\n
                }\n
                else\n
                {\n
                    v69 = (0 CONCAT 1) << (v64 - 7 & 31) >> 32;\n
                    v70 = 1 << (v64 - 7 & 31);\n
                    if ((v64 - 7 & 32))\n
                        v69 = v70;\n
                    v9 = v69;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v70 = 0;\n
                    v0 = v70;\n
                    v59 = v64;\n
                }\n
            }\n
            v71 = (0 CONCAT 1) << (v45 - 1 & 31) >> 32;\n
            v72 = 1 << (v45 - 1 & 31);\n
            if ((v59 - 1 & 32))\n
                v71 = v72;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v72 = 0;\n
            if (!v57)\n
                v71 = v57;\n
            v14 = v71;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v72 = v57;\n
            v15 = v72;\n
            v7 = [D] x86g_calculate_condition(0x4<32>, 0xf<32>, ebx<4>, 0x0<32>, 0x0<32>);\n
            *(&v59) = v59 + 1;\n
            v73 = (0 CONCAT 1) << (v45 & 31) >> 32;\n
            v74 = 1 << (v45 & 31);\n
            if ((v59 + 1 & 32))\n
                v73 = v74;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v74 = 0;\n
            if (v57 >= 7)\n
                v73 = 0;\n
            v13 = v73;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v74 = 0;\n
            v8 = v74;\n
            v75 = v57 + v6 * 8;\n
            *(&v58) = [D] x86g_calculate_condition(0x2<32>, 0x6<32>, ebx<4>, 0x7<32>, 0x0<32>);\n
            v76 = (0 CONCAT 1) << (v75 - 1 & 31) >> 32;\n
            v1 = v1;\n
            *(&v59) = v1 ^ 1 | v7;\n
            v77 = 1 << (v75 - 1 & 31);\n
            if ((v75 - 1 & 32))\n
                v76 = v77;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v77 = 0;\n
            if (v59)\n
                v76 = 0;\n
            v7 = v76;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v77 = 0;\n
            v78 = (0 CONCAT 1) << (v75 & 31) >> 32;\n
            v79 = 1 << (v75 & 31);\n
            if ((v75 & 32))\n
                v78 = v79;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v79 = 0;\n
            if (!v1)\n
                v78 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v79 = 0;\n
            v80 = v75 + 1;\n
            v81 = (0 CONCAT 1) << (v80 & 31) >> 32;\n
            v82 = 1 << (v80 & 31);\n
            if ((v80 & 32))\n
                v81 = v82;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v82 = 0;\n
            if (!(v58 & v1))\n
                v81 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v82 = 0;\n
            v83 = v78 | v7 | v13 | v14;\n
            v84 = v79 | v77 | v8 | v15;\n
            v85 = v81 | v11 | v9 | v83;\n
            v86 = v82 | v10 | v0 | v84;\n
            v87 = v19;\n
            v88 = v3;\n
            v87[1 + 2 * v88] = v85;\n
            v87[2 * v88] = v86;\n
            v89 = v88 + 1;\n
            v25 = v2;\n
        } while (v89 != 8);\n
        v17 += 8;\n
        v19 += 16;\n
        v18 += 16;\n
        v23 = v12;\n
    } while (v23 != 8);\n
    v10 = &v16[55].padding_0[264];\n
    v90 = 0;\n
    v91 = 0;\n
    do\n
    {\n
        v11 = v91 - 1;\n
        v4 = v91 + 1;\n
        v9 = v91 - 2;\n
        v15 = v91 - 3;\n
        v14 = v91 - 4;\n
        v13 = v91 - 5;\n
        v7 = v91 - 6;\n
        v1 = v91;\n
        v6 = v91 - 7;\n
        v2 = v90 - 1;\n
        v92 = 0;\n
        v8 = v90;\n
        do\n
        {\n
            v93 = v90 + v92;\n
            v94 = (0 CONCAT 1) << (v93 & 31) >> 32;\n
            v95 = 0;\n
            v96 = 1 << (v93 & 31);\n
            v3 = v93;\n
            if ((v93 & 32))\n
                v94 = v96;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v96 = 0;\n
            v97 = 0;\n
            v98 = 0;\n
            if (v11 <= 7)\n
            {\n
                v97 = 0;\n
                v98 = 0;\n
                if (v92 - 1 <= 7)\n
                {\n
                    *(&v93) = (v2 + v92) - 8;\n
                    v98 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                    v97 = 1 << (*(&v93) & 31);\n
                    if ((v93 & 32))\n
                        v98 = v97;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v97 = 0;\n
                }\n
            }\n
            *(&v0) = v1 < 7;\n
            v99 = v97 | v96;\n
            v100 = v98 | v94;\n
            *(&v93) = v92 < 7;\n
            v101 = v3;\n
            tmp_17 = v101 + 9;\n
            v102 = (0 CONCAT 1) << (v101 + 9 & 31) >> 32;\n
            v103 = 1 << (tmp_17 & 31);\n
            v104 = tmp_17 & 32;\n
            if ((tmp_17 & 32))\n
                v102 = v103;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v103 = 0;\n
            if (!(v93 & v0))\n
                v102 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v103 = 0;\n
            v105 = v102 | v100;\n
            v106 = v103 | v99;\n
            v107 = 0;\n
            if (v9 <= 7)\n
            {\n
                v107 = 0;\n
                v95 = 0;\n
                if (v92 - 2 <= 7)\n
                {\n
                    *(&v93) = (v2 + v92) - 17;\n
                    v95 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                    v107 = 1 << (*(&v93) & 31);\n
                    if ((v93 & 32))\n
                        v95 = v107;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v107 = 0;\n
                }\n
            }\n
            *(&v0) = v1 < 6;\n
            v108 = v107 | v106;\n
            v109 = v95 | v105;\n
            *(&v93) = v92 < 6;\n
            v110 = v3;\n
            tmp_17 = v110 + 18;\n
            v111 = (0 CONCAT 1) << (v110 + 18 & 31) >> 32;\n
            v112 = 1 << (v110 + 18 & 31);\n
            v113 = 0;\n
            v114 = tmp_17 & 32;\n
            if ((tmp_17 & 32))\n
                v111 = v112;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v112 = 0;\n
            if (!(v93 & v0))\n
                v111 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v112 = 0;\n
            v115 = v111 | v109;\n
            v116 = v112 | v108;\n
            v117 = 0;\n
            v118 = v92;\n
            if (v15 <= 7)\n
            {\n
                v113 = 0;\n
                v117 = 0;\n
                if (v92 - 3 <= 7)\n
                {\n
                    *(&v93) = (v2 + v92) - 26;\n
                    v117 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                    v113 = 1 << (*(&v93) & 31);\n
                    if ((v93 & 32))\n
                        v117 = v113;\n
                    if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                        v113 = 0;\n
                }\n
            }\n
            *(&v0) = v1 < 5;\n
            v119 = v113 | v116;\n
            v120 = v117 | v115;\n
            *(&v93) = v118 < 5;\n
            v121 = v3;\n
            tmp_17 = v121 + 27;\n
            v122 = (0 CONCAT 1) << (v121 + 27 & 31) >> 32;\n
            v123 = v118;\n
            v124 = 1 << (tmp_17 & 31);\n
            v125 = tmp_17 & 32;\n
            if ((tmp_17 & 32))\n
                v122 = v124;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v124 = 0;\n
            if (!(v93 & v0))\n
                v122 = 0;\n
            if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                v124 = 0;\n
            v126 = v122 | v120;\n
            v127 = v124 | v119;\n
            v0 = v123;\n
            if (v14 <= 7)\n
            {\n
                *(&v93) = (v2 + v123) - 35;\n
                v128 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                v129 = 1 << (*(&v93) & 31);\n
                if ((v93 & 32))\n
                    v128 = v129;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v129 = 0;\n
                v93 = v123 + 1;\n
                if (v93 >= 8)\n
                    v128 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v129 = 0;\n
                v126 |= v128;\n
                v127 |= v129;\n
            }\n
            else if (v1 <= 3)\n
            {\n
                v130 = v3;\n
                tmp_1 = v36 + 36;\n
                v131 = (0 CONCAT 1) << (v36 + 36 & 31) >> 32;\n
                v132 = 1 << (tmp_1 & 31);\n
                v133 = tmp_1 & 32;\n
                if ((tmp_1 & 32))\n
                    v131 = v132;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v132 = 0;\n
                if (v0 >= 4)\n
                    v131 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v132 = 0;\n
                v126 |= v131;\n
                v127 |= v132;\n
                goto LABEL_404540;\n
            }\n
            if (v13 <= 7)\n
            {\n
                v134 = v0;\n
                *(&v93) = (v2 + v134) - 44;\n
                v135 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                v136 = 1 << (*(&v93) & 31);\n
                if ((*(&v93) & 32))\n
                    v135 = v136;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v136 = 0;\n
                v93 = &v134[1] + 1;\n
                if (v93 >= 8)\n
                    v135 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v136 = 0;\n
                v126 |= v135;\n
                v127 |= v136;\n
                goto LABEL_404580;\n
            }\n
LABEL_404540:\n
            if (v1 <= 2)\n
            {\n
                v137 = v3;\n
                tmp_1 = v36 + 45;\n
                v138 = (0 CONCAT 1) << (v36 + 45 & 31) >> 32;\n
                v139 = 1 << (tmp_1 & 31);\n
                v140 = tmp_1 & 32;\n
                if ((tmp_1 & 32))\n
                    v138 = v139;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v139 = 0;\n
                if (v0 >= 3)\n
                    v138 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v139 = 0;\n
                v126 |= v138;\n
                v127 |= v139;\n
                goto LABEL_4045d0;\n
            }\n
LABEL_404580:\n
            if (v7 <= 7)\n
            {\n
                v141 = v0;\n
                *(&v93) = (v2 + v141) - 53;\n
                v142 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                v143 = 1 << (*(&v93) & 31);\n
                if ((*(&v93) & 32))\n
                    v142 = v143;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v143 = 0;\n
                v93 = &v141[1] + 2;\n
                if (v93 >= 8)\n
                    v142 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v143 = 0;\n
                v126 |= v142;\n
                v127 |= v143;\n
                goto LABEL_404620;\n
            }\n
LABEL_4045d0:\n
            if (v1 <= 1)\n
            {\n
                *(&v93) = v3 + 54;\n
                v144 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                v145 = 1 << (*(&v93) & 31);\n
                if ((*(&v93) & 32))\n
                    v144 = v145;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v145 = 0;\n
                v146 = v0;\n
                if (v146 >= 2)\n
                    v144 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v145 = 0;\n
                v126 |= v144;\n
                v127 |= v145;\n
                v90 = v8;\n
                goto LABEL_404638;\n
            }\n
LABEL_404620:\n
            if (v6 > 7)\n
            {\n
                v90 = v8;\n
                v146 = v0;\n
            }\n
            else\n
            {\n
                v146 = v0;\n
                *(&v93) = (v2 + v146) - 62;\n
                v147 = (0 CONCAT 1) << (*(&v93) & 31) >> 32;\n
                v148 = 1 << (*(&v93) & 31);\n
                v149 = *(&v93) & 32;\n
                if ((*(&v93) & 32))\n
                    v147 = v148;\n
                v151 = v146 - 7;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v148 = 0;\n
                if (v151 >= 8)\n
                    v147 = 0;\n
                if ([D] x86g_calculate_condition(0x3<32>, 0x6<32>, ecx<4>, 0x8<32>, 0x0<32>))\n
                    v148 = 0;\n
                v126 |= v147;\n
                v127 |= v148;\n
                v150 = 0;\n
                v90 = v8;\n
                continue;\n
            }\n
LABEL_404638:\n
            v150 = (!v1 && !v146) * 0x80000000;\n
            v152 = v126 | v150;\n
            v153 = v10;\n
            *((v153 + v146 * 8)) = v127;\n
            *((v153 + v146 * 8 + 4)) = v152;\n
            v92 = v146 + 1;\n
        } while (v92 != 8);\n
        v90 += 8;\n
        v10 += 16;\n
        v91 = v4;\n
    } while (v91 != 8);\n
    v154 = cgc_malloc(0x4000);\n
    v155 = v16->field_130;\n
    v155->field_264 = v154;\n
    if (v154)\n
        return 1;\n
    cgc_free(v155);\n
}\n
", "4209852:sub_403cbc": null, "4209944:sub_403d18": null, "4210598:sub_403fa6": null, "4210897:sub_4040d1": null, "4210918:sub_4040e6": null, "4211167:sub_4041df": null, "4211266:sub_404242": null, "4212019:sub_404533": null, "4212091:sub_40457b": null, "4212161:sub_4045c1": null, "4212244:sub_404614": null, "4212358:sub_404686": null, "4212368:cgc_engine_new": "typedef struct struct_1 {\n
    char padding_0[304];\n
    struct struct_2 *field_130;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    char padding_1c[5];\n
    char field_21;\n
    char padding_22[654];\n
    unsigned int field_2b0;\n
    unsigned int field_2b4;\n
    unsigned int field_2b8;\n
    unsigned int field_2bc;\n
    unsigned int field_2c0;\n
    unsigned int field_2c4;\n
    unsigned int field_2c8;\n
    unsigned int field_2cc;\n
    unsigned int field_2d0;\n
    unsigned int field_2d4;\n
    unsigned int field_2d8;\n
    unsigned int field_2dc;\n
    unsigned int field_2e0;\n
    unsigned int field_2e4;\n
    unsigned int field_2e8;\n
    unsigned int field_2ec;\n
    unsigned int field_2f0;\n
    unsigned int field_2f4;\n
    unsigned int field_2f8;\n
    unsigned int field_2fc;\n
    unsigned int field_300;\n
    unsigned int field_304;\n
    unsigned int field_308;\n
    unsigned int field_30c;\n
    unsigned int field_310;\n
    unsigned int field_314;\n
    unsigned int field_318;\n
    unsigned int field_31c;\n
    unsigned int field_320;\n
    unsigned int field_324;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[616];\n
    unsigned int field_268;\n
    unsigned int field_26c;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *engine;\n
\n
int cgc_engine_new()\n
{\n
    struct_1 *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int *v4;  // [bp-0x18]\n
    unsigned int *v5;  // [bp-0x14]\n
    struct_0 *v7;  // eax\n
    void* v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char v10;  // cl\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // ebx\n
    unsigned int *v15;  // edx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // edx\n
    unsigned int v18[156];  // eax\n
\n
    engine->field_c = 0;\n
    engine->field_14 = 3;\n
    engine->field_10 = 1;\n
    engine->field_18 = 0;\n
    engine->field_0 = 1;\n
    engine->field_2cc = 0;\n
    engine->field_2c8 = 0xff00;\n
    engine->field_2dc = 0;\n
    engine->field_2d8 = 66;\n
    engine->field_2ec = 0;\n
    engine->field_2e8 = 36;\n
    engine->field_2fc = 0;\n
    engine->field_2f8 = 129;\n
    engine->field_30c = 0;\n
    engine->field_308 = 8;\n
    engine->field_31c = 0;\n
    engine->field_318 = 16;\n
    engine->field_2d4 = 0xff0000;\n
    engine->field_2d0 = 0;\n
    engine->field_2e4 = 0x42000000;\n
    engine->field_2e0 = 0;\n
    engine->field_2f4 = 0x24000000;\n
    engine->field_2f0 = 0;\n
    engine->field_304 = 0x81000000;\n
    engine->field_300 = 0;\n
    engine->field_314 = 0x8000000;\n
    engine->field_310 = 0;\n
    engine->field_324 = 0x10000000;\n
    engine->field_320 = 0;\n
    engine->field_2bc = 0;\n
    engine->field_2b8 = 65535;\n
    engine->field_2c4 = -0x10000;\n
    engine->field_2c0 = 0;\n
    engine->field_2b4 = -0x10000;\n
    engine->field_2b0 = 65535;\n
    engine->field_4 = 0;\n
    engine->field_8 = 0;\n
    cgc_memset(&engine->padding_22[590], 6, 64);\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = engine;\n
    v5 = &engine->field_4;\n
    v4 = &engine->field_8;\n
    v1 = &engine->padding_22[590];\n
    v2 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v3 = v8;\n
        v9 = 0;\n
        do\n
        {\n
            v10 = (v2 + v9);\n
            v11 = (0 CONCAT 1) << (v10 & 31) >> 32;\n
            v12 = 1 << (v10 & 31);\n
            v14 = 0;\n
            if ((v10 & 32))\n
                v11 = v12;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v12 = 0;\n
            if (!(!(v7->field_2c8 & v12)) || !(!(v7->field_2cc & v11)))\n
            {\n
                v13 = v14;\n
                v15 = v5;\n
                goto LABEL_4048cf;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (!(!(v7->field_2d4 & v11)) || !(!(v7->field_2d0 & v12)))\n
                {\n
LABEL_4048c6:\n
                    *(&v14) = v13 | 128;\n
                    v15 = v4;\n
LABEL_4048cf:\n
                    v1[v9] = v14;\n
                    *(v15) = *(v15) + *(&v0[24].padding_0[228 + 4 * v13]);\n
                }\n
                else\n
                {\n
                    v14 = 1;\n
                    if (!(v7->field_2dc & v11) && !(v7->field_2d8 & v12))\n
                    {\n
                        v13 = 1;\n
                        if (!(!(v7->field_2e4 & v11)) || !(!(v7->field_2e0 & v12)))\n
                            goto LABEL_4048c6;\n
                        v14 = 2;\n
                        if (!(v7->field_2ec & v11) && !(v7->field_2e8 & v12))\n
                        {\n
                            v13 = 2;\n
                            if (!(!(v7->field_2f4 & v11)) || !(!(v7->field_2f0 & v12)))\n
                                goto LABEL_4048c6;\n
                            v14 = 3;\n
                            if (!(v7->field_2fc & v11) && !(v7->field_2f8 & v12))\n
                            {\n
                                v13 = 3;\n
                                if (!(!(v7->field_304 & v11)) || !(!(v7->field_300 & v12)))\n
                                    goto LABEL_4048c6;\n
                                v14 = 4;\n
                                if (!(v7->field_30c & v11) && !(v7->field_308 & v12))\n
                                {\n
                                    v13 = 4;\n
                                    if (!(!(v7->field_314 & v11)) || !(!(v7->field_310 & v12)))\n
                                        goto LABEL_4048c6;\n
                                    v14 = 5;\n
                                    if (!(v7->field_31c & v11) && !(v7->field_318 & v12))\n
                                    {\n
                                        v16 = v12 & engine->field_320;\n
                                        v17 = v11 & engine->field_324;\n
                                        v13 = 5;\n
                                        if (!v17 && !v16)\n
                                            continue;\n
                                        goto LABEL_4048c6;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v9 += 1;\n
        } while (v9 != 8);\n
        v8 = v3 + 1;\n
        v1 += 8;\n
        v2 += 8;\n
    } while (v8 != 8);\n
    engine->field_21 = 6;\n
    cgc_memset(&engine->padding_22[2], 0, 64);\n
    v18 = v0->field_130;\n
    v18[155] = 0;\n
    v18[154] = 0;\n
    return v18;\n
}\n
", "4212808:sub_404848": null, "4212910:sub_4048ae": null, "4213320:sub_404a48": null, "4213328:cgc_engine_move": null, "4215124:sub_405154": null, "4215136:cgc_apply_move": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *engine;\n
\n
int cgc_apply_move()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    int tmp_81;  // tmp #81\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    unsigned int v13;  // [bp+0x4]\n
    char v14;  // [bp+0x8]\n
    char v15;  // [bp+0xa]\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ebp\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // edx\n
    unsigned int v25[174];  // esi\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // eax\n
    char v33;  // edx, Other Possible Types: unsigned int\n
    unsigned int v34;  // edi\n
    unsigned int v35;  // ecx\n
    char v37;  // dl\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // edx\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // ebx\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // ecx\n
    unsigned int v50;  // edx\n
    unsigned int v52;  // cc_dep1\n
    unsigned int v53;  // ecx\n
    unsigned int v54;  // edx\n
    unsigned int v55;  // ebp\n
    void* v56;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // edi\n
    unsigned int v59;  // ebx\n
    unsigned int v60;  // eax\n
    unsigned int v61;  // eax\n
    unsigned int v62;  // ecx\n
    unsigned int v63;  // edx\n
\n
    v17 = v16;\n
    v5 = *(&v13 + 2);\n
    v7 = *(&v13 + 3);\n
    v18 = v7 + v5 * 8;\n
    v19 = (0 CONCAT 1) << (v18 & 31) >> 32;\n
    v20 = 1 << (v18 & 31);\n
    v1 = v18;\n
    if ((v18 & 32))\n
        v19 = v20;\n
    v0 = v19;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
        v20 = 0;\n
    v4 = v20;\n
    v10 = *(&v13 + 1);\n
    v21 = v10 + v13 * 8;\n
    v22 = (0 CONCAT 1) << (v21 & 31) >> 32;\n
    v23 = 1 << (v21 & 31);\n
    v8 = v21;\n
    if ((v21 & 32))\n
        v22 = v23;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
        v23 = 0;\n
    v2 = ~(v17) >> 7;\n
    v24 = v17 / 128;\n
    v9 = v17;\n
    v3 = v17 & 15;\n
    v12 = &_GLOBAL_OFFSET_TABLE_;\n
    v25 = engine;\n
    v26 = 16 * v3 + engine;\n
    v27 = ~(v23);\n
    v28 = v4;\n
    *((v26 + v24 * 8 + 712)) = *((v26 + v24 * 8 + 712)) & v27 | v28;\n
    v29 = ~(v22);\n
    *((v26 + v24 * 8 + 716)) = *((v26 + v24 * 8 + 716)) & v29 | v0;\n
    v25[1 + 2 * v24] = v25[1 + 2 * v24] & v27 | v28;\n
    v6 = v24;\n
    v25[1 + 1 + 2 * v6] = v25[1 + 1 + 2 * v6] & v29 | v0;\n
    v25[172] = v27 & v25[172] | v28;\n
    v25[173] = v29 & v25[173] | v0;\n
    v30 = v2;\n
    v11 = *(&engine[1].padding_0[4 + 8 * v30]);\n
    v31 = *(&engine[1].padding_0[8 * v30]);\n
    if (!(v31 & v28) && !(v11 & v0))\n
    {\n
        v33 = 0;\n
    }\n
    else\n
    {\n
        v32 = v30;\n
        v33 = engine->padding_270[v1] & 15;\n
        v34 = ~(v4);\n
        v35 = 16 * v33 + engine;\n
        *((v35 + v32 * 8 + 712)) = *((v35 + v32 * 8 + 712)) & v34;\n
        *((v35 + v32 * 8 + 716)) = *((v35 + v32 * 8 + 716)) & ~(v0);\n
        *(&engine[1].padding_0[4 + 8 * v32]) = v11 & ~(v0);\n
        *(&engine[1].padding_0[8 * v32]) = v31 & v34;\n
        v25[1 + v32] = v25[1 + v32] - *((v12 + v33 * 4 - 7620));\n
        v33 |= 64;\n
    }\n
    v15 = v33;\n
    v37 = v9;\n
    engine->padding_270[v1] = v37;\n
    v38 = v8;\n
    engine->padding_270[v38] = 6;\n
    if (v3 != 5)\n
    {\n
        v61 = v13;\n
        v62 = *(&v14);\n
        engine->field_20 = v62;\n
        engine->field_1c = v61;\n
        *(&engine->field_20 + 1) = v37;\n
        *(36 + &v25[0] + v38) = *(36 + &v25[0] + v38) + 1;\n
        v63 = engine->field_26c;\n
        engine->field_26c = v63 + 1;\n
        *(&engine->padding_24[68 + 8 * v63]) = v62;\n
        *(&engine->padding_24[64 + 8 * v63]) = v61;\n
        v25[3] = !v25[3];\n
        return;\n
    }\n
    v39 = v7 - v10;\n
    v40 = -(v39);\n
    if (!(v39) < 0)\n
        v40 = v39;\n
    if (v40 == 2)\n
    {\n
        v41 = v5 * 8;\n
        v42 = v6;\n
        v0 = *(&engine[1].padding_24[28 + 8 * v42]);\n
        v1 = *(&engine[1].padding_24[32 + 8 * v42]);\n
        if (v7 != 2)\n
        {\n
            v3 = v41 | 7;\n
            v45 = (0 CONCAT 1) << (v3 & 31) >> 32;\n
            v46 = 1 << (v3 & 31);\n
            if ((v3 & 32))\n
                v45 = v46;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
                v46 = 0;\n
            v47 = ~(v45);\n
            v48 = ~(v46);\n
            v54 = v41 | 5;\n
            v55 = (0 CONCAT 1) << (v54 & 31) >> 32;\n
            v2 = 1;\n
            v1 &= v47;\n
            v2 <<= v54 & 31;\n
            v4 = v54;\n
            v56 = v2;\n
            if ((v4 & 32))\n
                v55 = v56;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
                v56 = 0;\n
            v2 = v55;\n
            v1 |= v55;\n
            v57 = v56;\n
            v0 = v0 & v48 | v56;\n
            v5 = v3;\n
        }\n
        else\n
        {\n
            v43 = (0 CONCAT 1) << (v41 & 31) >> 32;\n
            v44 = 1 << (v41 & 31);\n
            if ((v41 & 32))\n
                v43 = v44;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
                v44 = 0;\n
            v47 = ~(v43);\n
            v48 = ~(v44);\n
            v49 = v41 | 3;\n
            v5 = v41;\n
            v50 = (0 CONCAT 1) << (v49 & 31) >> 32;\n
            v1 &= v47;\n
            v4 = v49;\n
            tmp_81 = v49 & 32;\n
            v52 = v49 & 32;\n
            v53 = 1 << (v49 & 31);\n
            if (tmp_81)\n
                v50 = 1 << (v49 & 31);\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
                v53 = 0;\n
            v2 = v50;\n
            v1 |= v50;\n
            v0 = v0 & v48 | v53;\n
            v57 = v53;\n
        }\n
        v58 = v6;\n
        *(&engine[1].padding_24[28 + 8 * v58]) = v0;\n
        *(&engine[1].padding_24[32 + 8 * v58]) = v1;\n
        v25[1 + 2 * v58] = v25[1 + 2 * v58] & v48 | v57;\n
        v25[1 + 1 + 2 * v58] = v25[1 + 1 + 2 * v58] & v47 | v2;\n
        v59 = v47 & engine->field_2b4;\n
        v60 = v48 & engine->field_2b0 | v57;\n
        engine->field_2b4 = v59 | v2;\n
        engine->field_2b0 = v60;\n
        engine->padding_270[v5] = 6;\n
        v37 = v9;\n
        engine->padding_270[v4] = v37 & 128 | 3;\n
        v38 = v8;\n
    }\n
}\n
", "4216087:sub_405517": null, "4216096:cgc_engine_set_color": "extern struct_0 *engine;\n
\n
int cgc_engine_set_color(unsigned int v0)\n
{\n
    if (engine->field_0)\n
        engine->field_c = v0;\n
    return engine;\n
}\n
", "4216127:sub_40553f": null, "4216128:cgc_engine_set_go": "extern struct_0 *engine;\n
\n
int cgc_engine_set_go(unsigned int v0)\n
{\n
    if (engine->field_0)\n
        engine->field_10 = v0;\n
    return engine;\n
}\n
", "4216159:sub_40555f": null, "4216160:cgc_engine_set_depth": "extern struct_0 *engine;\n
\n
int cgc_engine_set_depth(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // ecx\n
\n
    if (!engine->field_0)\n
        return engine;\n
    v2 = v1;\n
    if (v2 <= 0)\n
    {\n
        v3 = \"depth too small\";\n
    }\n
    else if (v2 >= 9)\n
    {\n
        v3 = \"depth too large\";\n
    }\n
    else\n
    {\n
        engine->field_14 = v2;\n
        return engine;\n
    }\n
    v0 = \"sd\";\n
    return cgc_send_error(v3);\n
}\n
", "4216252:sub_4055bc": null, "4216256:cgc_engine_set_cgc_random": "extern struct_0 *engine;\n
\n
int cgc_engine_set_cgc_random(unsigned int v0)\n
{\n
    if (engine->field_0)\n
        engine->field_18 = v0;\n
    return engine;\n
}\n
", "4216287:sub_4055df": null, "4216288:cgc_engine_go": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 *engine;\n
\n
int cgc_engine_go()\n
{\n
    struct_0 *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v1;  // [bp-0xc]\n
    char v2;  // [bp-0x8]\n
    unsigned int v5;  // eax\n
\n
    if (!engine->field_0)\n
        return engine;\n
    v0 = &v1;\n
    v5 = cgc_search(10000000);\n
    engine->field_268 = v5 < -199;\n
    if (v5 == -10000000)\n
        return cgc_send_resign();\n
    v0 = *(&v2);\n
    cgc_send_move(*(&v1));\n
    v0 = *(&v2);\n
    return cgc_apply_move(*(&v1));\n
}\n
", "4216452:sub_405684": null, "4216464:cgc_search": "extern struct_0 *engine;\n
\n
int cgc_search(unsigned int v14, unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    char v1;  // [bp-0x45]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    unsigned int v6;  // [bp-0x30]\n
    unsigned int v7;  // [bp-0x2c]\n
    unsigned int v8[3];  // [bp-0x28]\n
    unsigned int v9[154];  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x20]\n
    void* v11;  // [bp-0x1c]\n
    char v12;  // [bp-0x18]\n
    char v13;  // [bp-0x14]\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int v17[154];  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    unsigned int v19[3];  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    void* v24;  // edi, Other Possible Types: unsigned int\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27[2];  // eax\n
    unsigned int v28[3];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // ecx\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    unsigned int v34[3];  // ebp, Other Possible Types: unsigned int\n
\n
    v16 = v15;\n
    v11 = 0;\n
    v17 = engine;\n
    v8[0] = v18 * 0x800 + engine->field_264;\n
    cgc_generate_moves();\n
    v10 = v11;\n
    if (!v10)\n
        return -10000000;\n
    v7 = v18 + 1;\n
    v6 = -(v14);\n
    if (v18)\n
    {\n
        v4 = v18;\n
        v19 = v8;\n
        v3 = v19[1];\n
        v2 = v19[0];\n
        if ((engine[1].padding_0[8 + (v8[0] << 8 >> 21 & -8) + (v8[0] >> 24)] & 15) != 5)\n
        {\n
            v5 = -10000000;\n
            v34 = 1;\n
            while (true)\n
            {\n
                cgc_apply_move(v2);\n
                if (*((v17 + 20)) != v4)\n
                    v29 = cgc_search(-(v16), NULL);\n
                else\n
                    v29 = cgc_quiesce();\n
                cgc_undo_move(v14);\n
                v30 = -(v29);\n
                v25 = v5;\n
                if (v25 < v25)\n
                    v25 = v30;\n
                if (v25 > v16)\n
                    v16 = v25;\n
                if (v16 >= v14)\n
                    break;\n
                if (v10 == v34)\n
                    return v25;\n
                v5 = v25;\n
                v17 = engine;\n
                v31 = v8;\n
                v32 = *((v31 + v34 * 8));\n
                v33 = *((v31 + v34 * 8 + 4));\n
                v3 = v33;\n
                v2 = v32;\n
                v34 += 1;\n
            }\n
        }\n
    }\n
    v1 = v18;\n
    v25 = -10000000;\n
    v28 = 0;\n
    while (true)\n
    {\n
        v5 = v25;\n
        v20 = v8;\n
        v21 = *((v20 + v28 * 8));\n
        v22 = *((v20 + v28 * 8 + 4));\n
        v3 = v22;\n
        v2 = v21;\n
        if ((*((v17 + (v2 >> 24) + (v2 << 8 >> 21 & -8) + 624)) & 15) == 5)\n
            break;\n
        cgc_apply_move(v2);\n
        if (!*((v17 + 20)))\n
            v23 = cgc_quiesce();\n
        else\n
            v23 = cgc_search(-(v16), NULL);\n
        v4 = v23;\n
        cgc_undo_move();\n
        if (engine->field_18)\n
        {\n
            v0 = &v13;\n
            cgc_random(&v12, 4);\n
            v24 = *(&v12) + -((*(&v12) * 3435973837 >> 32 >> 2) * 5) - 2;\n
            v9 = engine;\n
        }\n
        else\n
        {\n
            v9[0] = engine;\n
            v24 = 0;\n
        }\n
        v25 = v5;\n
        v26 = v24 - v4;\n
        *(&v22) = v26 <= v25;\n
        if (v26 > v25)\n
            v25 = v26;\n
        if (!v22 && !v1)\n
        {\n
            v27 = a0;\n
            v27[1] = v3;\n
            v27[0] = v2;\n
            v25 = v26;\n
        }\n
        if (v25 > v16)\n
            v16 = v25;\n
        if (!(v16 < v14))\n
            goto LABEL_0x40598f;\n
        v28 += 1;\n
        v17 = v9;\n
        if (v10 == v28)\n
            return v25;\n
    }\n
}\n
", "4216711:sub_405787": null, "4217029:sub_4058c5": null, "4217144:sub_405938": null, "4217241:sub_405999": null, "4217248:cgc_engine_result": "extern struct_0 *engine;\n
\n
int cgc_engine_result()\n
{\n
    engine->field_0 = 0;\n
    return engine;\n
}\n
", "4217273:sub_4059b9": null, "4217280:cgc_engine_offer_draw": "extern struct_0 *engine;\n
\n
int cgc_engine_offer_draw()\n
{\n
    unsigned int v1[155];  // eax, Other Possible Types: unsigned int\n
\n
    v1 = engine;\n
    if (engine->field_0 && engine->field_268)\n
        v1 = cgc_send_draw();\n
    return v1;\n
}\n
", "4217326:sub_4059ee": null, "4217328:cgc_engine_undo": "extern struct_0 *engine;\n
\n
int cgc_engine_undo()\n
{\n
    if (engine->field_0)\n
        return cgc_undo_move();\n
    return engine;\n
}\n
", "4217357:sub_405a0d": null, "4217360:cgc_engine_get_cgc_random": "extern struct_0 *engine;\n
\n
int cgc_engine_get_cgc_random()\n
{\n
    return engine->field_18;\n
}\n
", "4217382:sub_405a26": null, "4217392:cgc_calculate_attacks": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *engine;\n
extern char g_400000;\n
extern char g_800000;\n
\n
int cgc_calculate_attacks()\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    int tmp_8;  // tmp #8\n
    int tmp_0;  // tmp #0\n
    int tmp_13;  // tmp #13\n
    int tmp_17;  // tmp #17\n
    int tmp_16;  // tmp #16\n
    int tmp_20;  // tmp #20\n
    int tmp_22;  // tmp #22\n
    int tmp_14;  // tmp #14\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3[182];  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    unsigned int v6[182];  // [bp-0x30]\n
    unsigned int v7;  // [bp-0x2c]\n
    unsigned int v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x24]\n
    unsigned int v10;  // [bp-0x20]\n
    unsigned int v11[182];  // [bp-0x1c]\n
    unsigned int v12;  // [bp-0x18]\n
    unsigned int v13;  // [bp-0x14]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v15;  // [bp-0xc]\n
    unsigned int v16;  // [bp-0x8]\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // esi\n
    void* v31;  // edi, Other Possible Types: unsigned int\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // ecx\n
    char v37;  // cl\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // ebp\n
    unsigned int v40;  // eax\n
    unsigned int v41[182];  // ecx\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // ebx\n
    unsigned int v45;  // eax\n
    unsigned int v46[182];  // eax\n
    unsigned int v47;  // edx\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // ebx\n
    unsigned int v50;  // ebp\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // ebx\n
    unsigned int v53;  // ebp\n
    unsigned int v54[182];  // eax\n
    unsigned int v55;  // eax\n
    unsigned int v56;  // edi\n
    unsigned int v57;  // edi\n
    unsigned int v58;  // cl, Other Possible Types: char\n
    unsigned int v59;  // ebx\n
    unsigned int v60;  // ebp\n
    unsigned int v61;  // eax\n
    unsigned int v62[182];  // eax\n
    unsigned int v63;  // esi\n
    unsigned int v64;  // ebx\n
    unsigned int v65;  // ebp\n
    unsigned int v66;  // ecx\n
    unsigned int v67[182];  // eax\n
    unsigned int v68;  // edi\n
    unsigned int v69;  // ecx\n
    char v70;  // cl\n
    unsigned int v71[182];  // ebx\n
    unsigned int v72[182];  // edi, Other Possible Types: unsigned int\n
    unsigned int v73[182];  // ebx, Other Possible Types: unsigned int\n
    unsigned int v74;  // ecx\n
    unsigned int v75;  // eax\n
    unsigned int v76[182];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v77;  // esi\n
    unsigned int v78;  // edi\n
    unsigned int v79;  // eax\n
    void* v80;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v81;  // edi\n
    unsigned int v82[182];  // eax, Other Possible Types: unsigned int\n
    unsigned int v83;  // ebx\n
    unsigned int v84[182];  // ebx, Other Possible Types: unsigned int\n
    unsigned int v85;  // ecx\n
    unsigned int v86;  // eax\n
    unsigned int v87;  // edi\n
    unsigned int v88;  // edi\n
    char v89;  // cl\n
    unsigned int v90;  // ebp\n
    unsigned int v91;  // ebx\n
    unsigned int v92;  // esi\n
    unsigned int v93[182];  // eax\n
    unsigned int v94;  // ecx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // eax\n
    char v97;  // cl\n
    unsigned int v98;  // ebp\n
    unsigned int v99;  // ebx\n
    unsigned int v100[182];  // eax\n
    unsigned int v102;  // edi\n
    unsigned int v103;  // ecx\n
    unsigned int v104;  // eax\n
    unsigned int v105;  // edx\n
    unsigned int v106;  // ebx\n
    unsigned int v107;  // ebp, Other Possible Types: char\n
    char v108;  // cl\n
    unsigned int v109;  // edi\n
    unsigned int v110;  // esi\n
    unsigned int v111;  // esi\n
    unsigned int v112[182];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v113;  // ebp\n
    unsigned int v114[182];  // eax\n
    unsigned int v115;  // ebx\n
    unsigned int v116;  // ecx\n
    unsigned int v117;  // ebp\n
    unsigned int v118;  // eax\n
    unsigned int v119;  // edx\n
    unsigned int v120;  // eax\n
    unsigned int v121;  // edx\n
    unsigned int v122;  // eax\n
    unsigned int v123;  // edx\n
    unsigned int v124;  // edi\n
    unsigned int v125;  // eax\n
    unsigned int v127;  // eax\n
    char v128;  // cl\n
    unsigned int v129;  // esi\n
    unsigned int v130;  // edi\n
    unsigned int v131[182];  // eax\n
    unsigned int v132;  // ecx\n
    unsigned int v133;  // ebx\n
    unsigned int v134;  // ebp\n
    unsigned int v135;  // eax\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // eax\n
    unsigned int v138;  // edx\n
    unsigned int v139;  // edi\n
    unsigned int v140;  // eax\n
    unsigned int v141;  // ebx\n
    unsigned int v142;  // eax\n
    unsigned int v143;  // eax\n
    unsigned int v144;  // eax\n
    unsigned int v145;  // eax\n
    unsigned int v146;  // edi\n
    unsigned int v147[182];  // ebx\n
    unsigned int v148;  // esi\n
    unsigned int v149;  // ecx\n
    unsigned int v150;  // edi\n
    unsigned int v151;  // edi\n
    unsigned int v152;  // eax\n
\n
    v16 = v18;\n
    v15 = v19;\n
    v14 = v20;\n
    v13 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = v21;\n
    if (!v21)\n
    {\n
        v24 = engine->field_2c8;\n
        v25 = engine->field_2cc;\n
        v26 = ((v25 CONCAT v24) * 0x200 >> 32) & -16843010;\n
        v47 = v24 * 128 & 0x7f7f7f00 | v24 * 0x200 & -0x1010200;\n
        v28 = ((v25 CONCAT v24) * 128 >> 32) & 2139062143;\n
    }\n
    else\n
    {\n
        v22 = engine->field_2d4;\n
        v26 = v22 / 128 & 16711422;\n
        v47 = (engine->field_2d4 CONCAT engine->field_2d0) * &g_800000 >> 32 & 2139062143 | ((engine->field_2d4 CONCAT engine->field_2d0) * 0x2000000 >> 32) & -16843010;\n
        v28 = v22 / 0x200 & 8355711;\n
    }\n
    v0 = v28 | v26;\n
    v29 = v10;\n
    v30 = *(&engine[1].padding_0[8 * v29]);\n
    v6[0] = engine;\n
    v31 = *(&engine[1].padding_0[4 + 8 * v29]);\n
    v32 = v30 | v31;\n
    if (!(!v30) || !(!v31))\n
    {\n
        v33 = -1;\n
        while (true)\n
        {\n
            if (!(ExpCmpNE(v148, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v34 = (ExpCmpNE(v30, 0) ? tmp_8 : v39);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v34 = (ExpCmpNE(v30, 0) ? tmp_8 : v39);\n
            }\n
            if (ExpCmpNE(v72, 0))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v35 = (ExpCmpNE(v31, 0) ? tmp_8 : v32);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v35 = (ExpCmpNE(v31, 0) ? tmp_8 : v32);\n
            }\n
            v36 = v35 + 32;\n
            if (v30)\n
                v36 = v34;\n
            v33 = v33 + v36 + 1;\n
            v37 = v36 + 1;\n
            v38 = v13;\n
            v39 = v0 | *((v38 + v33 * 8 + 17720));\n
            v0 |= *((v38 + v33 * 8 + 17720));\n
            v47 |= *((v38 + v33 * 8 + 17716));\n
            v30 = (v31 CONCAT v30) >> (v37 & 31);\n
            v31 >>= v37 & 31;\n
            if ((v37 & 32))\n
                v30 = v31;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v31 = 0;\n
            v32 = v30 | v31;\n
            if (!v30 && !v31)\n
                break;\n
            if (v33 >= 63)\n
                break;\n
        }\n
    }\n
    v40 = v10;\n
    v41 = v6;\n
    v63 = v41[1 + 12 + 2 * v40];\n
    v12 = v41[1 + 13 + 2 * v40];\n
    v73 = v41[1 + 9 + 2 * v40] | v12;\n
    v1 = v63;\n
    v72 = v41[1 + 8 + 2 * v40] | v63;\n
    if (!(!v72) || !(!v73))\n
    {\n
        v74 = -1;\n
        do\n
        {\n
            if (!(ExpCmpNE(v72, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v42 = (ExpCmpNE(v72, 0) ? tmp_8 : v63);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v42 = (ExpCmpNE(v72, 0) ? tmp_8 : v63);\n
            }\n
            v3[0] = v73;\n
            if (ExpCmpNE(v80, 0))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v43 = (ExpCmpNE(v73, 0) ? tmp_8 : v73);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v43 = (ExpCmpNE(v73, 0) ? tmp_8 : v73);\n
            }\n
            v44 = v43 + 32;\n
            v11[0] = v72;\n
            if (v72)\n
                v44 = v42;\n
            v45 = v44 + v74 + 1;\n
            v4 = v44;\n
            v58 = v74 + v44 + 8;\n
            if ((v45 >> 31 & 1 ^ 1))\n
                v58 = v45;\n
            v8 = v58;\n
            v7 = v45;\n
            v2 = v45 - (v58 & -8);\n
            if (v2 <= 6)\n
            {\n
                v49 = (0 CONCAT 1) << (v45 + 1 & 31) >> 32;\n
                v50 = 1 << (v45 + 1 & 31);\n
                if ((v45 + 1 & 32))\n
                    v49 = v50;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v50 = 0;\n
                v46 = v6;\n
                v5 = v46[172];\n
                v9 = v46[173];\n
                v51 = v2;\n
                v48 = v0;\n
                while (true)\n
                {\n
                    v47 |= v50;\n
                    v48 |= v49;\n
                    if (!(!(v9 & v49)) || !(!(v5 & v50)))\n
                        break;\n
                    v49 = (v49 CONCAT v50) * 2 >> 32;\n
                    v50 *= 2;\n
                    tmp_13 = v51;\n
                    v51 += 1;\n
                    if (tmp_13 >= 6)\n
                        break;\n
                }\n
                v0 = v48;\n
                if (v2 <= 0)\n
                    goto LABEL_405ca3;\n
            }\n
            v52 = (0 CONCAT 1) << (v7 - 1 & 31) >> 32;\n
            v53 = 1 << (v7 - 1 & 31);\n
            if ((v7 - 1 & 32))\n
                v52 = v53;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v53 = 0;\n
            v54 = v6;\n
            v5 = v54[172];\n
            v55 = v54[173];\n
            v56 = v2;\n
            while (true)\n
            {\n
                v47 |= v53;\n
                v0 |= v52;\n
                if (!(!(v55 & v52)) || !(!(v5 & v53)))\n
                    break;\n
                v53 = (v52 CONCAT v53) >> 1;\n
                v52 /= 2;\n
                tmp_17 = v56;\n
                v56 -= 1;\n
                if (tmp_17 <= 1)\n
                    break;\n
            }\n
LABEL_405ca3:\n
            v57 = v8 >> 3;\n
            v4 += 1;\n
            v8 = v57;\n
            if (v7 > 55)\n
            {\n
                v61 = v0;\n
            }\n
            else\n
            {\n
                v58 = v2 + (v57 + 1) * 8;\n
                v59 = (0 CONCAT 1) << (v58 & 31) >> 32;\n
                v60 = 1 << (v58 & 31);\n
                if ((v58 & 32))\n
                    v59 = v60;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v60 = 0;\n
                v62 = v6;\n
                v5 = v62[172];\n
                v63 = v62[173];\n
                while (true)\n
                {\n
                    v47 |= v60;\n
                    v0 |= v59;\n
                    if (!(!(v63 & v59)) || !(!(v5 & v60)))\n
                        break;\n
                    v59 = (v59 CONCAT v60) * 0x100 >> 32;\n
                    v60 *= 0x100;\n
                    v57 += 1;\n
                    if (v57 >= 7)\n
                        break;\n
                }\n
                v61 = v0;\n
                if (v7 < 8)\n
                    goto LABEL_405dc4;\n
            }\n
            *(&v58) = v2 + v8 * 8 - 8;\n
            v64 = (0 CONCAT 1) << (*(&v58) & 31) >> 32;\n
            v65 = 1 << (*(&v58) & 31);\n
            if ((*(&v58) & 32))\n
                v64 = v65;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v65 = 0;\n
            v66 = v61;\n
            v67 = v6;\n
            v0 = v67[172];\n
            v63 = v67[173];\n
            v61 = v66;\n
            do\n
            {\n
                v68 = v47 | v65;\n
                v69 = v61 | v64;\n
                if (!(!(v63 & v64)) || !(!(v0 & v65)))\n
                {\n
                    v47 = v68;\n
                    v61 = v69;\n
                    break;\n
                }\n
                v65 = (v64 CONCAT v65) >> 8;\n
                v64 /= 0x100;\n
                tmp_16 = v8;\n
                v8 -= 1;\n
                v47 = v68;\n
                v61 = v69;\n
            } while (!([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>)));\n
LABEL_405dc4:\n
            v0 = v61;\n
            v70 = v4;\n
            v71 = v3;\n
            v72 = (v71 CONCAT v11) >> (v70 & 31);\n
            v73 = v71 >> (v70 & 31);\n
            if ((v70 & 32))\n
                v72 = v73;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v73 = 0;\n
            if (!v72 && !v73)\n
                break;\n
            continue;\n
            v74 = v7;\n
        } while (v74 < 63);\n
    }\n
    v75 = v10;\n
    v76 = v6;\n
    v77 = v1 | v76[1 + 4 + 2 * v75];\n
    v78 = v12 | v76[1 + 5 + 2 * v75];\n
    v79 = v77 | v78;\n
    if (!(!v77) || !(!v78))\n
    {\n
        v80 = v78;\n
        v81 = -1;\n
        do\n
        {\n
            if (ExpCmpNE(v148, 0))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v82 = (ExpCmpNE(v77, 0) ? tmp_8 : v79);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v82 = (ExpCmpNE(v77, 0) ? tmp_8 : v79);\n
            }\n
            v12 = v80;\n
            if (!(ExpCmpNE(v80, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v83 = (ExpCmpNE(v80, 0) ? tmp_8 : v80);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v83 = (ExpCmpNE(v80, 0) ? tmp_8 : v80);\n
            }\n
            v84 = v83 + 32;\n
            if (v77)\n
                v84 = v82;\n
            v85 = v84 + v81 + 8;\n
            v86 = v84 + v81 + 1;\n
            v2 = v86;\n
            if ((v86 >> 31 & 1 ^ 1))\n
                v85 = v86;\n
            v87 = v86 - (v85 & -8);\n
            v9 = v87 + 1;\n
            v5 = v85 >> 3;\n
            v11[0] = (v85 >> 3) * 8 + 8;\n
            v4 = v87;\n
            v1 = v77;\n
            v3[0] = v84;\n
            if (v86 <= 55 && v4 <= 6)\n
            {\n
                v88 = v9;\n
                v89 = (v11 + v88);\n
                v90 = (0 CONCAT 1) << (v89 & 31) >> 32;\n
                v91 = 1 << (v89 & 31);\n
                v92 = v5 + 1;\n
                if ((v89 & 32))\n
                    v90 = v91;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v91 = 0;\n
                v93 = v6;\n
                v8 = v93[172];\n
                v7 = v93[173];\n
                v94 = v88;\n
                do\n
                {\n
                    v95 = v47 | v91;\n
                    v0 |= v90;\n
                    if (!(!(v7 & v90)) || !(!(v8 & v91)))\n
                    {\n
LABEL_405f30:\n
                        v47 = v95;\n
                        break;\n
                    }\n
                    else if (!(v92 <= 6))\n
                    {\n
                        goto LABEL_405f30;\n
                    }\n
                    v92 += 1;\n
                    v90 = (v90 CONCAT v91) * 0x200 >> 32;\n
                    v91 *= 0x200;\n
                    tmp_20 = v94;\n
                    v94 += 1;\n
                    v47 = v95;\n
                } while (tmp_20 < 7);\n
            }\n
            v96 = v0;\n
            v7 = v5 * 8 - 8;\n
            if (v2 >= 8 && v4 <= 6)\n
            {\n
                v97 = v7 + v9;\n
                v98 = (0 CONCAT 1) << (v97 & 31) >> 32;\n
                v99 = 1 << (v97 & 31);\n
                v5 -= 1;\n
                if ((v97 & 32))\n
                    v98 = v99;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v99 = 0;\n
                v100 = v6;\n
                v8 = v100[172];\n
                v96 = v0;\n
                do\n
                {\n
                    v102 = v47 | v99;\n
                    v103 = v96 | v98;\n
                    if (!(!(v100[173] & v98)) || !(!(v8 & v99)))\n
                    {\n
LABEL_405ff0:\n
                        v47 = v102;\n
                        v96 = v103;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v104 = v5;\n
                        if (v104 <= 0)\n
                            goto LABEL_405ff0;\n
                    }\n
                    v5 = v104 - 1;\n
                    v105 = v9;\n
                    v99 = (v98 CONCAT v99) >> 7;\n
                    v98 /= 128;\n
                    tmp_22 = v105;\n
                    v9 = v105 + 1;\n
                    v47 = v102;\n
                    v96 = v103;\n
                } while (tmp_22 < 7);\n
            }\n
            v106 = v4;\n
            v107 = v106 - 1;\n
            v81 = v2;\n
            if (v81 > 55)\n
            {\n
LABEL_406080:\n
                v111 = v1;\n
                v112 = v3;\n
                goto LABEL_406088;\n
            }\n
            else\n
            {\n
                if (v106 <= 0)\n
                    goto LABEL_406080;\n
                v5 = v107;\n
                v108 = (v11 + v107);\n
                v109 = (0 CONCAT 1) << (v108 & 31) >> 32;\n
                v110 = 1 << (v108 & 31);\n
                if ((v108 & 32))\n
                    v109 = v110;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v110 = 0;\n
                v113 = v96;\n
                v114 = v6;\n
                v115 = v114[172];\n
                v116 = v114[173];\n
                v0 = v113 | v109;\n
                v117 = v47 | v110;\n
                if (!(!(v115 & v110)) || !(!(v116 & v109)))\n
                {\n
LABEL_40605c:\n
                    v47 = v117;\n
                    goto LABEL_40605e;\n
                }\n
                else\n
                {\n
                    if (!(v2 <= 47))\n
                        goto LABEL_40605c;\n
                    if (v4 < 2)\n
                        goto LABEL_40605c;\n
                    v118 = (v109 CONCAT v110) * 128 >> 32;\n
                    v119 = v110 * 128;\n
                    v117 |= v119;\n
                    v0 |= v118;\n
                    if (!(!(v118 & v116)) || !(!(v119 & v115)))\n
                        goto LABEL_40605c;\n
                    if (!(v2 <= 39))\n
                        goto LABEL_40605c;\n
                    if (v4 < 3)\n
                        goto LABEL_40605c;\n
                    v120 = (v109 CONCAT v110) * 0x4000 >> 32;\n
                    v121 = v110 * 0x4000;\n
                    v117 |= v121;\n
                    v0 |= v120;\n
                    if (!(!(v120 & v116)) || !(!(v121 & v115)))\n
                        goto LABEL_40605c;\n
                    if (!(v2 <= 31))\n
                        goto LABEL_40605c;\n
                    if (v4 < 4)\n
                        goto LABEL_40605c;\n
                    v122 = (v109 CONCAT v110) * 0x200000 >> 32;\n
                    v123 = v110 * 0x200000;\n
                    v117 |= v123;\n
                    v0 |= v122;\n
                    if (!(!(v122 & v116)) || !(!(v123 & v115)))\n
                        goto LABEL_40605c;\n
                    if (!(v2 <= 23))\n
                        goto LABEL_40605c;\n
                    v47 = v117;\n
                    if (v4 < 5)\n
                    {\n
LABEL_40605e:\n
                        v96 = v0;\n
                        v111 = v1;\n
                        v81 = v2;\n
                        v112 = v3;\n
                        v106 = v4;\n
                        v107 = v5;\n
                        goto LABEL_406088;\n
                    }\n
                    else\n
                    {\n
                        v124 = (v109 CONCAT v110) * 0x10000000 >> 32;\n
                        v125 = v110 * 0x10000000;\n
                        v47 = v117 | v125;\n
                        v0 |= v124;\n
                        v107 = v5;\n
                        if ((v124 & v116 | v115 & v125))\n
                        {\n
                            v96 = v0;\n
                            v111 = v1;\n
                            v81 = v2;\n
                            v112 = v3;\n
                            v106 = v4;\n
                            goto LABEL_406088;\n
                        }\n
                        v9 = v116;\n
                        v81 = v2;\n
                        v112 = v3;\n
                        v106 = v4;\n
                        if (v81 > 15)\n
                        {\n
LABEL_4062f8:\n
                            v96 = v0;\n
                            goto LABEL_4062fb;\n
                        }\n
                        else\n
                        {\n
                            if (v106 < 6)\n
                                goto LABEL_4062f8;\n
                            v127 = v110 * 8;\n
                            v0 |= v127;\n
                            if (!(!(v127 & v9)))\n
                                goto LABEL_4062f8;\n
                            if (!(v81 <= 7))\n
                                goto LABEL_4062f8;\n
                            v96 = v0;\n
                            if (v106 >= 7)\n
                                v96 |= v110 * 0x400;\n
LABEL_4062fb:\n
                            v111 = v1;\n
LABEL_406088:\n
                            v76 = v112 + 1;\n
                            v0 = v96;\n
                            if (v81 < 8)\n
                            {\n
LABEL_4060f5:\n
                                v144 = v12;\n
                                v77 = (v144 CONCAT v111) >> (v76 & 31);\n
                                v145 = v144 >> (v76 & 31);\n
                                v80 = v145;\n
                                if ((v76 & 32))\n
                                    v77 = v145;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v80 = 0;\n
                                v79 = v77 | v80;\n
                                if (!v77 && !v80)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (v106 <= 0)\n
                                    goto LABEL_4060f5;\n
                                v3[0] = v76;\n
                                v128 = v7 + v107;\n
                                v129 = (0 CONCAT 1) << (v128 & 31) >> 32;\n
                                v130 = 1 << (v128 & 31);\n
                                if ((v128 & 32))\n
                                    v129 = v130;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v130 = 0;\n
                                v131 = v6;\n
                                v132 = v131[172];\n
                                v133 = v131[173];\n
                                v0 |= v129;\n
                                v134 = v47 | v130;\n
                                if (!(v132 & v130) && !(v133 & v129) && v2 >= 16 && v4 >= 2)\n
                                {\n
                                    v135 = (v129 CONCAT v130) * &g_800000 >> 32;\n
                                    v136 = v129 / 0x200;\n
                                    v134 |= v135;\n
                                    v0 |= v136;\n
                                    if (!(v136 & v133) && !(v135 & v132) && v2 >= 24 && v4 >= 3)\n
                                    {\n
                                        v137 = (v129 CONCAT v130) * 0x4000 >> 32;\n
                                        v138 = v129 / 0x40000;\n
                                        v134 |= v137;\n
                                        v0 |= v138;\n
                                        if (!(v138 & v133) && !(v137 & v132) && v2 >= 32)\n
                                        {\n
                                            v47 = v134;\n
                                            if (v4 >= 4)\n
                                            {\n
                                                v139 = (v129 CONCAT v130) >> 27;\n
                                                v140 = v129 / 0x8000000;\n
                                                v47 = v134 | v139;\n
                                                v0 |= v140;\n
                                                if (!(v133 & v140) && !(v139 & v132))\n
                                                {\n
                                                    v141 = v132;\n
                                                    v81 = v2;\n
                                                    v76 = v3;\n
                                                    if (v81 >= 40 && v4 >= 5)\n
                                                    {\n
                                                        v142 = v129 / 16;\n
                                                        v47 |= v142;\n
                                                        if (!(v142 & v141) && v81 >= 48 && v4 >= 6)\n
                                                        {\n
                                                            v143 = v129 / 0x2000;\n
                                                            v47 |= v143;\n
                                                            if (!(v143 & v141) && v81 >= 56 && v4 >= 7)\n
                                                                v47 |= v129 / &g_400000;\n
                                                        }\n
                                                    }\n
                                                    v111 = v1;\n
                                                    goto LABEL_4060f5;\n
                                                }\n
                                            }\n
LABEL_4060e9:\n
                                            v111 = v1;\n
                                            v81 = v2;\n
                                            v76 = v3;\n
                                            goto LABEL_4060f5;\n
                                        }\n
                                    }\n
                                }\n
                                v47 = v134;\n
                                goto LABEL_4060e9;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        } while (v81 < 63);\n
    }\n
    v146 = v10;\n
    v147 = v6;\n
    v148 = v147[1 + 16 + 2 * v146];\n
    if (!(ExpCmpNE(v148, 0)))\n
    {\n
        tmp_8 = UnaryOp Ctz;\n
        v149 = (ExpCmpNE(v148, 0) ? tmp_8 : v76);\n
    }\n
    else\n
    {\n
        tmp_8 = UnaryOp Ctz;\n
        v149 = (ExpCmpNE(v148, 0) ? tmp_8 : v76);\n
    }\n
    if (!(ExpCmpNE(v147[1 + 17 + 2 * v146], 0)))\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v150 = (ExpCmpNE(v147[1 + 17 + 2 * v146], 0) ? tmp_14 : v146);\n
    }\n
    else\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v150 = (ExpCmpNE(v147[1 + 17 + 2 * v146], 0) ? tmp_14 : v146);\n
    }\n
    v151 = v150 + 32;\n
    if (v148)\n
        v151 = v149;\n
    v152 = v47 | *((v13 + v151 * 8 + 16692));\n
    return v152;\n
}\n
", "4218165:sub_405d35": null, "4218297:sub_405db9": null, "4218660:sub_405f24": null, "4218850:sub_405fe2": null, "4218999:sub_406077": null, "4219779:sub_406383": null, "4219792:cgc_undo_move": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[12];\n
    char field_1c;\n
    char padding_1d[3];\n
    unsigned int field_20;\n
    char padding_24[584];\n
    unsigned int field_26c;\n
    char padding_270[64];\n
    unsigned int field_2b0;\n
    unsigned int field_2b4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *engine;\n
\n
int cgc_undo_move()\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    unsigned int v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned int v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x3c]\n
    unsigned int v7;  // [bp-0x38]\n
    unsigned int v8;  // [bp-0x34]\n
    unsigned int v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x2c]\n
    unsigned int v11;  // [bp-0x28]\n
    unsigned int v12;  // [bp-0x24]\n
    unsigned int v13;  // [bp-0x20]\n
    unsigned int v14;  // [bp-0x1c]\n
    unsigned int v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x14]\n
    struct_0 *v18;  // esi\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // edi\n
    unsigned int v26;  // ebx\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // ecx\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edi\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // ebp\n
    unsigned int v42;  // edi\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // edi\n
    unsigned int v47;  // ebp\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // eax\n
    unsigned int v53;  // ebp\n
    unsigned int v54;  // edx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ebx\n
    unsigned int v59;  // edi\n
    unsigned int v61;  // edi\n
    unsigned int v62;  // eax\n
    void* v63;  // edx\n
    char v64;  // cl\n
    unsigned int v65;  // edx\n
    unsigned int v66;  // edi\n
    unsigned int v67;  // ecx\n
    unsigned int v69;  // ebp\n
    unsigned int v71;  // eax\n
    unsigned int v72;  // ecx\n
    void* v73;  // eax, Other Possible Types: unsigned int\n
\n
    v18 = engine;\n
    v4 = engine->padding_1d[2];\n
    v11 = engine->padding_1d[1];\n
    v19 = v4 + v11 * 8;\n
    v20 = (0 CONCAT 1) << (v19 & 31) >> 32;\n
    v21 = 1 << (v19 & 31);\n
    if ((v19 & 32))\n
        v20 = v21;\n
    v3 = v20;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v21 = 0;\n
    v12 = v21;\n
    v73 = engine->padding_1d[0];\n
    v22 = v73 + engine->field_1c * 8;\n
    v23 = (0 CONCAT 1) << (v22 & 31) >> 32;\n
    v24 = 1 << (v22 & 31);\n
    v13 = v22;\n
    if ((v22 & 32))\n
        v23 = v24;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v24 = 0;\n
    if (engine->field_26c <= 0)\n
        return v73;\n
    v5 = v24;\n
    v16 = v23;\n
    v15 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = *(&engine->field_20 + 2);\n
    v25 = engine->padding_270[v19];\n
    v26 = v25 / 128;\n
    v1 = v25;\n
    v27 = v25 & 15;\n
    v6 = v19;\n
    if (v27 == 5)\n
    {\n
        v28 = v4 - v73;\n
        v29 = -(v28);\n
        if (!(v28) < 0)\n
            v29 = v28;\n
        v19 = v6;\n
        if (v29 == 2)\n
        {\n
            v14 = v27;\n
            v30 = v11 * 8;\n
            v2 = *(&engine[1].padding_24[28 + 8 * v26]);\n
            v0 = *(&engine[1].padding_24[32 + 8 * v26]);\n
            if (v4 != 2)\n
            {\n
                v34 = v30 | 5;\n
                v35 = (0 CONCAT 1) << (v34 & 31) >> 32;\n
                v36 = 1 << (v34 & 31);\n
                v10 = v34;\n
                if ((v34 & 32))\n
                    v35 = v36;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v36 = 0;\n
                v37 = ~(v35);\n
                v38 = ~(v36);\n
                v30 |= 7;\n
            }\n
            else\n
            {\n
                v31 = v30 | 3;\n
                v32 = (0 CONCAT 1) << (v31 & 31) >> 32;\n
                v33 = 1 << (v31 & 31);\n
                v10 = v31;\n
                if ((v31 & 32))\n
                    v32 = v33;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v33 = 0;\n
                v37 = ~(v32);\n
                v38 = ~(v33);\n
            }\n
            v39 = v30;\n
            v40 = (0 CONCAT 1) << (v39 & 31) >> 32;\n
            v9 = v37;\n
            v0 &= v37;\n
            v41 = 1 << (v39 & 31);\n
            v8 = v38;\n
            v42 = v2 & v38;\n
            v2 = v39;\n
            if ((v39 & 32))\n
                v40 = v41;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v41 = 0;\n
            v43 = v0 | v40;\n
            v0 = v41;\n
            *(&engine[1].padding_24[28 + 8 * v26]) = v42 | v41;\n
            *(&engine[1].padding_24[32 + 8 * v26]) = v43;\n
            v44 = v8;\n
            v45 = v0;\n
            *(&v18[1].padding_0[8 * v26]) = *(&v18[1].padding_0[8 * v26]) & v44 | v45;\n
            *(&v18[1].padding_0[4 + 8 * v26]) = *(&v18[1].padding_0[4 + 8 * v26]) & v9 | v40;\n
            v47 = v9 & engine->field_2b4 | v40;\n
            engine->field_2b0 = v44 & engine->field_2b0 | v45;\n
            engine->field_2b4 = v47;\n
            engine->padding_270[v10] = 6;\n
            engine->padding_270[v2] = v1 & 128 | 3;\n
            v19 = v6;\n
            v27 = v14;\n
        }\n
    }\n
    engine->padding_270[v19] = 6;\n
    engine->padding_270[v13] = v1;\n
    v48 = 16 * v27 + engine;\n
    v49 = ~(v3);\n
    *((v48 + v26 * 8 + 712)) = *((v48 + v26 * 8 + 712)) & ~(v12) | v5;\n
    v50 = v16;\n
    *((v48 + v26 * 8 + 716)) = *((v48 + v26 * 8 + 716)) & v49 | v50;\n
    v51 = v5;\n
    *(&v18[1].padding_0[8 * v26]) = *(&v18[1].padding_0[8 * v26]) & ~(v12) | v51;\n
    *(&v18[1].padding_0[4 + 8 * v26]) = *(&v18[1].padding_0[4 + 8 * v26]) & v49 | v50;\n
    v52 = v49 & engine->field_2b4 | v50;\n
    v53 = ~(v12) & engine->field_2b0 | v51;\n
    v18->field_2b0 = ~(v12) & v18->field_2b0 | v51;\n
    engine->field_2b4 = v52;\n
    v54 = v7;\n
    if ((v54 & 64))\n
    {\n
        if (!(v54 & 128))\n
        {\n
            v56 = ~(v1) >> 7;\n
            v7 = v54 & 15;\n
            v57 = 16 * v7 + engine;\n
            v58 = v12;\n
            *((v57 + v56 * 8 + 712)) = *((v57 + v56 * 8 + 712)) | v58;\n
            v59 = v3;\n
            *((v57 + v56 * 8 + 716)) = *((v57 + v56 * 8 + 716)) | v59;\n
            *(&v18[1].padding_0[8 * v56]) = *(&v18[1].padding_0[8 * v56]) | v58;\n
            *(&v18[1].padding_0[4 + 8 * v56]) = *(&v18[1].padding_0[4 + 8 * v56]) | v59;\n
            engine->field_2b4 = v52 | v59;\n
            engine->field_2b0 = v53 | v58;\n
            v61 = v7;\n
            engine->padding_270[v6] = v56 * 128 | v61;\n
            v62 = *((v15 + v61 * 4 - 7620));\n
        }\n
        else\n
        {\n
            v63 = 0;\n
            *(&v63) = v11 != 2;\n
            v5 = v63;\n
            v64 = (v4 + v63 * 8) + 24;\n
            v65 = (0 CONCAT 1) << (v64 & 31) >> 32;\n
            v66 = 1 << (v64 & 31);\n
            if ((v64 & 32))\n
                v65 = v66;\n
            v3 = v65;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v66 = 0;\n
            v67 = v1;\n
            *(&v67) = ~(v67);\n
            v1 = v67;\n
            v56 = *(&v67) >> 7;\n
            *(&v18[1].padding_10[8 * v56]) = *(&v18[1].padding_10[8 * v56]) | v66;\n
            *(&v18[1].padding_10[4 + 8 * v56]) = *(&v18[1].padding_10[4 + 8 * v56]) | v65;\n
            *(&v18[1].padding_0[8 * v56]) = *(&v18[1].padding_0[8 * v56]) | v66;\n
            *(&v18[1].padding_0[4 + 8 * v56]) = *(&v18[1].padding_0[4 + 8 * v56]) | v65;\n
            v69 = v53 | v66;\n
            engine->field_2b4 = v52 | v3;\n
            engine->field_2b0 = v69;\n
            engine->padding_270[24 + 8 * v5 + v4] = v1 & 128;\n
            v62 = 100;\n
        }\n
        *(&v18->padding_0[4 + 4 * v56]) = *(&v18->padding_0[4 + 4 * v56]) + v62;\n
    }\n
    v18->padding_24[v13] = v18->padding_24[v13] - 1;\n
    v71 = engine->field_26c;\n
    engine->field_26c = v71 - 1;\n
    if (v71 < 2)\n
    {\n
        *(&engine->field_20 + 1) = 6;\n
    }\n
    else\n
    {\n
        v72 = *(&engine->padding_24[48 + 8 * v71]);\n
        v18->field_20 = *(&v18->padding_24[52 + 8 * v71]);\n
        *(&engine->field_1c) = v72;\n
    }\n
    v73 = 0;\n
    *(&v73) = !engine->field_c;\n
    engine->field_c = v73;\n
    return !engine->field_c;\n
}\n
", "4220817:sub_406791": null, "4220832:cgc_generate_moves": "extern struct_0 *engine;\n
extern char g_400000;\n
extern char g_800000;\n
\n
int cgc_generate_moves()\n
{\n
    char *v0;  // [bp-0x70], Other Possible Types: unsigned int\n
    int tmp_8;  // tmp #8\n
    int tmp_0;  // tmp #0\n
    int tmp_2;  // tmp #2\n
    int tmp_11;  // tmp #11\n
    int tmp_26;  // tmp #26\n
    int tmp_17;  // tmp #17\n
    int tmp_16;  // tmp #16\n
    int tmp_27;  // tmp #27\n
    int tmp_14;  // tmp #14\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x64], Other Possible Types: char\n
    void* v4;  // [bp-0x60], Other Possible Types: unsigned int, char\n
    unsigned int v5;  // [bp-0x5c]\n
    char *v6;  // [bp-0x58]\n
    unsigned int v7;  // [bp-0x54]\n
    unsigned int v8;  // [bp-0x50]\n
    unsigned int v9;  // [bp-0x4c]\n
    unsigned int v10;  // [bp-0x48]\n
    unsigned int v11;  // [bp-0x44]\n
    unsigned int v12;  // [bp-0x40]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned int v16[174];  // [bp-0x30]\n
    unsigned int v17;  // [bp-0x2c]\n
    unsigned int v18;  // [bp-0x28]\n
    unsigned int v19;  // [bp-0x24]\n
    unsigned int v20;  // [bp-0x20]\n
    unsigned int v21;  // [bp-0x1c]\n
    unsigned int v22;  // [bp-0x18]\n
    unsigned int *v23;  // [bp-0x14]\n
    unsigned int v24;  // [bp-0x10]\n
    unsigned int v26;  // esi\n
    char *v27;  // edx\n
    unsigned int *v28;  // ecx\n
    unsigned int v29;  // esi\n
    void* v30;  // eax\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // edx\n
    void* v33;  // esi, Other Possible Types: unsigned int\n
    void* v34;  // esi, Other Possible Types: unsigned int\n
    unsigned int v35;  // ebx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // edx\n
    unsigned int v42;  // edx, Other Possible Types: char\n
    unsigned int v43;  // ebp\n
    char v44;  // al\n
    char v45;  // cl\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // edi\n
    char *v48;  // ecx\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // ebx\n
    char v51;  // al\n
    char v52;  // cl\n
    unsigned int v53;  // edx\n
    unsigned int v54;  // edi\n
    char *v56;  // eax\n
    unsigned int v57;  // edx\n
    char v58;  // cl\n
    char *v59;  // cl, Other Possible Types: char, unsigned int\n
    unsigned int v60;  // edi\n
    unsigned int v61;  // edx\n
    unsigned int v62;  // eax\n
    unsigned int v63;  // edx\n
    unsigned int v64;  // esi\n
    unsigned int v65;  // ebx\n
    unsigned int v66[174];  // ecx\n
    unsigned int v67;  // ebp\n
    unsigned int v68;  // edi\n
    char *v69;  // edi\n
    unsigned int v70;  // edx\n
    char v71;  // sil\n
    unsigned int v72;  // ecx\n
    unsigned int v73;  // eax\n
    unsigned int v74;  // eax\n
    unsigned int v75;  // edi\n
    unsigned int v76;  // edi\n
    unsigned int v77;  // ecx\n
    unsigned int v78;  // eax\n
    unsigned int v79;  // edx\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // edi\n
    unsigned int v82;  // eax\n
    unsigned int v83;  // ecx, Other Possible Types: char\n
    char v84;  // cl\n
    char v86;  // cl\n
    unsigned int v87;  // eax\n
    unsigned int v88;  // edx\n
    char *v89;  // eax\n
    unsigned int v90;  // ecx\n
    unsigned int v91;  // edx\n
    char v92;  // cl\n
    char v94;  // cl\n
    unsigned int v95;  // eax\n
    unsigned int v96;  // edx\n
    char *v97;  // eax\n
    unsigned int v98;  // ecx\n
    char v99;  // dl\n
    char v100;  // cl\n
    unsigned int v101;  // edi\n
    char *v102;  // eax\n
    unsigned int v103;  // ecx\n
    char v104;  // al\n
    unsigned int v105;  // edx\n
    unsigned int v106;  // eax\n
    unsigned int v107;  // cc_dep1\n
    unsigned int v108[174];  // ecx\n
    unsigned int v109;  // ecx\n
    char *v110;  // eax\n
    char v111;  // dl\n
    unsigned int v112;  // ecx\n
    char v113;  // cl\n
    unsigned int v114[174];  // eax\n
    unsigned int v115;  // ecx\n
    unsigned int v116;  // edx\n
    void* v117;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v118;  // esi\n
    unsigned int v119;  // ecx\n
    unsigned int v120;  // eax\n
    unsigned int v121;  // edx\n
    unsigned int v122;  // ebp\n
    unsigned int v123;  // edi\n
    unsigned int v124;  // ecx\n
    unsigned int v125;  // esi\n
    unsigned int v126;  // eax\n
    char v127;  // cl\n
    unsigned int v128;  // edi\n
    unsigned int v129;  // edx\n
    unsigned int v130;  // ecx\n
    char *v131;  // edx\n
    unsigned int v132;  // edi\n
    char v134;  // cl\n
    unsigned int v135;  // edi\n
    char *v136;  // edx\n
    unsigned int v137;  // eax\n
    char v138;  // cl\n
    unsigned int v139;  // esi\n
    unsigned int v140;  // eax\n
    char v141;  // cl\n
    unsigned int v142;  // edi\n
    char *v143;  // edx\n
    unsigned int v144;  // eax\n
    unsigned int v145;  // ecx\n
    char v147;  // cl\n
    unsigned int v148;  // edi\n
    char *v149;  // edx\n
    unsigned int v150;  // eax\n
    char v151;  // cl\n
    unsigned int v152;  // eax\n
    char v153;  // cl\n
    unsigned int v154;  // esi\n
    unsigned int v155;  // edi\n
    unsigned int v156;  // ebp\n
    char *v157;  // edx\n
    unsigned int v158;  // eax\n
    unsigned int v159;  // ecx\n
    unsigned int v160;  // edi\n
    char v162;  // sil\n
    char v163;  // cl\n
    unsigned int v164;  // edi\n
    char *v165;  // edx\n
    unsigned int v166;  // eax\n
    char v167;  // cl\n
    unsigned int v168;  // eax\n
    char v169;  // cl\n
    unsigned int v170;  // esi\n
    unsigned int v171;  // edi\n
    unsigned int v172;  // ebp\n
    char *v173;  // edx\n
    unsigned int v174;  // eax\n
    unsigned int v175;  // ecx\n
    unsigned int v176;  // edi\n
    char v178;  // cl\n
    unsigned int v179;  // edi\n
    char v180;  // sil\n
    char *v181;  // edx\n
    unsigned int v182;  // eax\n
    char v183;  // cl\n
    char v184;  // cl\n
    unsigned int v185[174];  // eax\n
    unsigned int v186;  // ecx\n
    unsigned int v187;  // edx\n
    unsigned int v188;  // edx\n
    unsigned int v189;  // ecx\n
    unsigned int v190;  // ebx\n
    unsigned int v191;  // ebx\n
    unsigned int v192;  // edi\n
    unsigned int v193;  // edx\n
    unsigned int v194;  // ebp\n
    unsigned int v195;  // edi\n
    unsigned int v196[174];  // eax\n
    unsigned int v197;  // edi\n
    unsigned int v198;  // ebx\n
    char *v199;  // ecx, Other Possible Types: char, unsigned int\n
    unsigned int v200;  // eax, Other Possible Types: char\n
    unsigned int v201;  // esi\n
    unsigned int v202;  // edi\n
    char *v203;  // esi\n
    unsigned int v204;  // edi\n
    unsigned int v205;  // edx\n
    unsigned int v206;  // esi\n
    char *v207;  // esi\n
    unsigned int v208;  // edx\n
    char v209;  // bl\n
    unsigned int v211;  // ebx\n
    unsigned int v212;  // edi\n
    unsigned int v213;  // edx\n
    unsigned int v214[174];  // eax\n
    unsigned int v215;  // ebp\n
    char v216;  // ebp\n
    unsigned int v217;  // ebp\n
    unsigned int v218;  // edx\n
    unsigned int v219;  // eax\n
    unsigned int v220;  // esi\n
    char v221;  // al\n
    unsigned int v222;  // esi\n
    char v223;  // bl\n
    unsigned int v224;  // eax\n
    unsigned int v225;  // edx\n
    unsigned int v226;  // edi\n
    unsigned int v227;  // al, Other Possible Types: char\n
    char v228;  // cl\n
    unsigned int v229;  // esi\n
    unsigned int v230;  // edi\n
    char *v231;  // ecx\n
    unsigned int v232;  // esi\n
    char v233;  // bl\n
    unsigned int v235;  // esi\n
    unsigned int v236;  // edi\n
    unsigned int v237;  // esi\n
    char v238;  // bl\n
    unsigned int v240;  // esi\n
    unsigned int v241;  // edi\n
    unsigned int v242;  // esi\n
    char v243;  // bl\n
    unsigned int v245;  // esi\n
    unsigned int v246;  // edi\n
    unsigned int v247;  // esi\n
    char v248;  // bl\n
    unsigned int v250;  // esi\n
    unsigned int v251;  // edi\n
    unsigned int v252;  // esi\n
    char v253;  // bl\n
    unsigned int v255;  // eax\n
    unsigned int v256;  // edx\n
    unsigned int v257;  // eax\n
    unsigned int v258;  // edx\n
    unsigned int v259;  // edx\n
    char v260;  // al\n
    char *v262;  // eax\n
    char v263;  // dl\n
    unsigned int v302;  // esi\n
    unsigned int v303;  // edx\n
    unsigned int v304;  // ecx\n
    unsigned int v305;  // eax\n
    unsigned int v306[174];  // eax\n
    unsigned int v307;  // ecx\n
    void* v308;  // edx, Other Possible Types: unsigned int\n
    void* v309;  // esi, Other Possible Types: unsigned int, char *\n
    unsigned int v310;  // eax\n
    unsigned int v311;  // edx\n
    unsigned int v312;  // ecx\n
    unsigned int v313;  // esi\n
    unsigned int v314;  // esi\n
    unsigned int v315;  // ecx\n
    unsigned int v316;  // eax\n
    unsigned int v317;  // edx\n
    unsigned int v318;  // ebx\n
    unsigned int v319;  // edx\n
    char v320;  // cl\n
    unsigned int v321;  // ebp\n
    unsigned int v322;  // edi\n
    unsigned int v323[174];  // eax\n
    unsigned int v324;  // ecx\n
    unsigned int v325;  // eax\n
    unsigned int v326;  // edi\n
    unsigned int v327;  // ebx\n
    unsigned int v328;  // ebp\n
    char v329;  // bl\n
    char v330;  // al\n
    unsigned int v331;  // ebp\n
    unsigned int v332;  // esi\n
    char v333;  // al\n
    char *v334;  // edx\n
    unsigned int v335;  // esi\n
    unsigned int v336;  // edx\n
    unsigned int v337;  // edi\n
    char *v338;  // eax\n
    unsigned int v339;  // ecx\n
    unsigned int v340;  // eax\n
    unsigned int v341;  // edi\n
    unsigned int v342;  // ebx\n
    char v343;  // cl\n
    unsigned int v344;  // edx\n
    unsigned int v345[174];  // eax\n
    unsigned int v346;  // ebp\n
    unsigned int v347;  // ecx\n
    unsigned int v348;  // eax\n
    unsigned int v349;  // edi\n
    unsigned int v350;  // ebx\n
    unsigned int v351;  // edi\n
    unsigned int v352;  // edi\n
    unsigned int v353;  // ebx\n
    unsigned int v354;  // edi\n
    unsigned int v355;  // edx\n
    char *v356;  // eax\n
    unsigned int v357;  // ecx\n
    unsigned int v358;  // edx\n
    char v359;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v360;  // ebp\n
    char v361;  // cl\n
    unsigned int v362;  // edx\n
    unsigned int v363[174];  // ecx\n
    unsigned int v364;  // eax\n
    char *v366;  // ecx, Other Possible Types: char, unsigned int\n
    unsigned int v367;  // ebx\n
    unsigned int v368;  // eax\n
    char v369;  // dl\n
    unsigned int v370;  // edi\n
    unsigned int v371;  // ebx\n
    char *v372;  // edi\n
    unsigned int v373;  // ebx\n
    unsigned int v374;  // ebx\n
    unsigned int v375;  // edi\n
    unsigned int v376;  // ebx\n
    unsigned int v378;  // edi\n
    unsigned int v379;  // eax\n
    unsigned int v380;  // eax\n
    char v381;  // dl\n
    char v382;  // al\n
    unsigned int v383;  // edi\n
    unsigned int v384;  // ebx\n
    unsigned int v385;  // esi\n
    char *v386;  // ebp\n
    unsigned int v387;  // edi\n
    unsigned int v388;  // ebx\n
    unsigned int v389;  // edi\n
    unsigned int v390;  // ebx\n
    unsigned int v392;  // eax\n
    char v393;  // dl\n
    char v394;  // al\n
    unsigned int v395;  // edi\n
    unsigned int v396;  // ebx\n
    unsigned int v397;  // esi\n
    char *v398;  // ebp\n
    unsigned int v399;  // edi\n
    unsigned int v400;  // ebx\n
    unsigned int v401;  // edi\n
    unsigned int v402;  // ebx\n
    char v404;  // dl\n
    char v405;  // al\n
    unsigned int v406;  // edi\n
    unsigned int v407;  // ebx\n
    unsigned int v408;  // esi\n
    char *v409;  // ebp\n
    unsigned int v410;  // edi\n
    unsigned int v411;  // eax\n
    unsigned int v412;  // eax\n
    unsigned int v414;  // eax\n
    unsigned int v415;  // edi\n
    char v416;  // al\n
    unsigned int v417;  // eax\n
    unsigned int v418;  // edi\n
    char v420;  // cl\n
    unsigned int v421;  // eax\n
    unsigned int v422;  // edx\n
    char v423;  // cl\n
    unsigned int v424;  // eax\n
    unsigned int v425;  // edx\n
    char *v426;  // ecx\n
    unsigned int v427;  // esi\n
    unsigned int v428;  // ebx\n
    char *v430;  // eax\n
    unsigned int v431;  // ecx\n
    char v432;  // cl\n
    unsigned int v433;  // edx\n
    unsigned int v434[174];  // ecx\n
    unsigned int v435;  // eax\n
    unsigned int v436;  // ecx\n
    unsigned int v437;  // ebp\n
    unsigned int v438;  // bl, Other Possible Types: char\n
    char v439;  // cl\n
    unsigned int v440;  // ebp\n
    char v442;  // cl\n
    char v444;  // cl\n
    unsigned int v445;  // edi\n
    char *v446;  // edi\n
    unsigned int v448;  // edx\n
    unsigned int v449;  // edi\n
    unsigned int v450;  // ecx\n
    unsigned int v451;  // eax\n
    unsigned int v452;  // ebp\n
    unsigned int v453;  // edi\n
    unsigned int v454;  // edi\n
    char v455;  // al\n
    char v456;  // cl\n
    unsigned int v457;  // edi\n
    char *v458;  // edi\n
    unsigned int v460;  // edx\n
    unsigned int v461;  // ecx\n
    unsigned int v462;  // eax\n
    unsigned int v463;  // ebp\n
    char v464;  // al\n
    char v465;  // cl\n
    unsigned int v466;  // edi\n
    unsigned int v467;  // ebx\n
    char *v468;  // edi\n
    unsigned int v469;  // ebx\n
    unsigned int v471;  // edx\n
    unsigned int v472;  // eax\n
    char v473;  // al\n
    unsigned int v474;  // edx\n
    char v475;  // cl\n
    unsigned int v476;  // eax\n
    unsigned int v477;  // esi\n
    char *v478;  // ecx\n
    unsigned int v479;  // esi\n
    unsigned int v481;  // ecx\n
    unsigned int v482;  // edx\n
    char v483;  // bl\n
    char v484;  // cl\n
    unsigned int v485;  // eax\n
    unsigned int v486;  // esi\n
    char *v487;  // ecx\n
    unsigned int v488;  // esi\n
    unsigned int v490;  // ecx\n
    char v491;  // ebp\n
    char v492;  // cl\n
    unsigned int v493;  // eax\n
    unsigned int v494;  // esi\n
    char *v495;  // ecx\n
    unsigned int v496;  // esi\n
    unsigned int v498;  // eax\n
    char v499;  // ebp\n
    char v501;  // cl\n
    unsigned int v502;  // eax\n
    unsigned int v503;  // edx\n
    char v504;  // ebp\n
    char v505;  // cl\n
    unsigned int v506;  // eax\n
    unsigned int v507;  // edx\n
    char *v508;  // ecx\n
    unsigned int v509;  // edx\n
    char *v511;  // eax\n
    unsigned int v512;  // ecx\n
    unsigned int v513;  // edx\n
    unsigned int v514;  // eax\n
    unsigned int v515[174];  // eax\n
    unsigned int v516;  // esi\n
    unsigned int v517;  // ecx\n
    unsigned int v518;  // edx\n
    unsigned int v519;  // eax\n
    unsigned int v520;  // eax\n
    unsigned int v521;  // ecx, Other Possible Types: char\n
    unsigned int v522;  // ebx, Other Possible Types: char\n
    unsigned int v523;  // edx\n
    unsigned int v524;  // ecx, Other Possible Types: char\n
    char v525;  // cl\n
    unsigned int v526;  // edi\n
    unsigned int v527;  // esi\n
    char v528;  // cl\n
    char *v529;  // edx\n
    unsigned int v530;  // esi\n
    char v531;  // cl\n
    unsigned int v532;  // edi\n
    unsigned int v533;  // esi\n
    char v534;  // cl\n
    char v535;  // cl\n
    char *v536;  // edx\n
    unsigned int v537;  // esi\n
    unsigned int v538;  // edx\n
    char v539;  // cl\n
    unsigned int v540;  // ebp\n
    unsigned int v541;  // esi\n
    char *v542;  // edi\n
    unsigned int v543;  // edx\n
    unsigned int v544;  // esi\n
    char v545;  // al\n
    char v546;  // cl\n
    unsigned int v547;  // ebp\n
    unsigned int v548;  // edx\n
    unsigned int v549;  // edx\n
    unsigned int v550;  // ecx, Other Possible Types: char\n
    char *v551;  // edx\n
    unsigned int v552;  // esi\n
    char v553;  // bl\n
    unsigned int v554;  // eax\n
    char v555;  // sil\n
    unsigned int v556;  // eax\n
    char v557;  // al\n
    unsigned int v558;  // ebp\n
    unsigned int v559;  // edi\n
    unsigned int v560;  // ebx\n
    char v561;  // al\n
    char *v562;  // ecx\n
    char v563;  // dil\n
    unsigned int v564;  // edx\n
    char v565;  // al\n
    char v566;  // cl\n
    unsigned int v567;  // ebp\n
    unsigned int v568;  // edi\n
    unsigned int v569;  // edx\n
    char v570;  // ebp\n
    char v571;  // sil\n
    char *v572;  // eax\n
    unsigned int v573;  // edi\n
    char v575;  // cl\n
    unsigned int v576;  // edi\n
    unsigned int v577;  // esi\n
    char v578;  // cl\n
    char *v579;  // edx\n
    unsigned int v580;  // esi\n
    char v581;  // dl\n
    char v582;  // al\n
    unsigned int v583;  // edi\n
    unsigned int v584;  // esi\n
    unsigned int v585;  // ecx\n
    char *v586;  // ebp\n
    unsigned int v587;  // edi\n
\n
    v24 = v26;\n
    v6 = v27;\n
    v23 = v28;\n
    v29 = engine->field_c;\n
    v30 = 0;\n
    *(&v30) = !v29;\n
    v31 = *(&engine[1].padding_10[4 + 8 * v29]);\n
    v67 = *(&engine[1].padding_10[8 * v29]);\n
    v7 = *((696 + &engine->padding_0[0] + 0x8 * v30));\n
    v8 = *((700 + &engine->padding_0[0] + 0x8 * v30));\n
    v10 = *(&engine[1].padding_0[8 * v29]);\n
    v16[0] = engine;\n
    v73 = *(&engine[1].padding_0[4 + 8 * v29]);\n
    v9 = v73;\n
    v21 = v29;\n
    if (!*(&engine[1].padding_10[8 * v29]) && !v31)\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v101 = v31;\n
        v72 = v29;\n
        if (v29)\n
        {\n
            v32 = -1;\n
            v0 = 0;\n
            v33 = v31;\n
            v65 = v67;\n
            do\n
            {\n
                if (!(ExpCmpNE(v117, 0)))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v36 = (ExpCmpNE(v65, 0) ? tmp_8 : v72);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v36 = (ExpCmpNE(v65, 0) ? tmp_8 : v72);\n
                }\n
                if (!(ExpCmpNE(v302, 0)))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v37 = (ExpCmpNE(v33, 0) ? tmp_8 : v73);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v37 = (ExpCmpNE(v33, 0) ? tmp_8 : v73);\n
                }\n
                v38 = v37 + 32;\n
                if (v65)\n
                    v38 = v36;\n
                v39 = v38 + v32 + 8;\n
                v40 = v38 + v32 - 71;\n
                v5 = v38;\n
                v41 = v32 + v38 + 1;\n
                v3 = v41;\n
                if ((v41 >> 31 & 1 ^ 1))\n
                    v39 = v41;\n
                v42 = v41 - (v39 & -8);\n
                v4 = v39 >> 3;\n
                v2 = (v39 >> 3) - 1;\n
                v1 = v42;\n
                if (v40 < -64)\n
                {\n
LABEL_4069b0:\n
                    v59 = v42 + (v2 * 8);\n
                    v60 = (0 CONCAT 1) << (v59 & 31) >> 32;\n
                    v67 = 1 << (v59 & 31);\n
                    if ((v59 & 32))\n
                        v60 = v67;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v67 = 0;\n
                    if (!(v67 & v7) && !(v60 & v8))\n
                    {\n
                        v32 = v3;\n
                        if (v32 < 8)\n
                            goto LABEL_406a40;\n
                        if (!(v32 <= 71))\n
                            goto LABEL_406a40;\n
                        if (v1 - 0 < 0)\n
                            goto LABEL_406a40;\n
                        if (!(v60 & v9) && !(v67 & v10))\n
                        {\n
                            v59 = v6;\n
                            v61 = v0;\n
                            v59[8 * v61] = v4;\n
                            v59[1 + 8 * v61] = v1;\n
                            v59[2 + 8 * v61] = v2;\n
                            v59[3 + 8 * v61] = v1;\n
                            v59[7 + 8 * v61] = 0;\n
                            v0 = v61 + 1;\n
                        }\n
                    }\n
                    v32 = v3;\n
LABEL_406a40:\n
                    v62 = v5 + 1;\n
                    if ((v32 & -8) == 48)\n
                    {\n
                        v2 = v65;\n
                        v5 = v33;\n
                        *(&v59) = v1 + 32;\n
                        v63 = (0 CONCAT 1) << (*(&v59) & 31) >> 32;\n
                        v64 = 1 << (*(&v59) & 31);\n
                        if ((*(&v59) & 32))\n
                            v63 = v64;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v64 = 0;\n
                        if (!(!(v64 & v7)) || !(!(v63 & v8)))\n
                        {\n
                            v33 = v5;\n
                            v65 = v2;\n
                        }\n
                        else\n
                        {\n
                            v66 = v16;\n
                            v67 &= v66[172];\n
                            v68 = v60 & v66[173] | v67;\n
                            v65 = v2;\n
                            if (!v68 && v1 >= 0 && !(v63 & v9) && !(v64 & v10))\n
                            {\n
                                v69 = v6;\n
                                v70 = v0;\n
                                v69[8 * v70] = 6;\n
                                v71 = v1;\n
                                v69[1 + 8 * v70] = v71;\n
                                v69[2 + 8 * v70] = 4;\n
                                v69[3 + 8 * v70] = v71;\n
                                v69[7 + 8 * v70] = 0;\n
                                v0 = v70 + 1;\n
                            }\n
                            v33 = v5;\n
                        }\n
                        v32 = v3;\n
                    }\n
                    v72 = v62;\n
                    v65 = (v33 CONCAT v65) >> (v72 & 31);\n
                    v33 >>= v72 & 31;\n
                    if ((v72 & 32))\n
                        v65 = v33;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v33 = 0;\n
                    v73 = v65 | v33;\n
                    if (!v65 && !v33)\n
                        break;\n
                    continue;\n
                }\n
                else if (v42 <= 0)\n
                {\n
LABEL_406908:\n
                    if (v42 - 7 < -8)\n
                        goto LABEL_4069b0;\n
                    goto LABEL_406927;\n
                }\n
                else\n
                {\n
                    v43 = v65;\n
                    v44 = v42 - 1;\n
                    v45 = v44 + (v2 * 8);\n
                    v46 = (0 CONCAT 1) << (v45 & 31) >> 32;\n
                    v47 = 1 << (v45 & 31);\n
                    if ((v45 & 32))\n
                        v46 = v47;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v47 = 0;\n
                    if (!(v47 & v10) && !(v46 & v9) && (!(!(v47 & v7)) || !(!(v46 & v8))))\n
                    {\n
                        v48 = v6;\n
                        v49 = v0;\n
                        v48[8 * v49] = v4;\n
                        v50 = v1;\n
                        v48[1 + 8 * v49] = v50;\n
                        v48[2 + 8 * v49] = v2;\n
                        v48[3 + 8 * v49] = v44;\n
                        v48[7 + 8 * v49] = 100;\n
                        v0 = v49 + 1;\n
                        v42 = v50;\n
                        v65 = v43;\n
                        goto LABEL_406908;\n
                    }\n
                    v42 = v1;\n
                    if (v42 - 7 < -8)\n
                        goto LABEL_4069b0;\n
LABEL_406927:\n
                    v51 = v42 + 1;\n
                    v52 = v51 + (v2 * 8);\n
                    v53 = (0 CONCAT 1) << (v52 & 31) >> 32;\n
                    v54 = 1 << (v52 & 31);\n
                    if ((v52 & 32))\n
                        v53 = v54;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v54 = 0;\n
                    if (!(!(!(v54 & v10)) || !(!(v53 & v9))) && (!(!(v54 & v7)) || !(!(v53 & v8))))\n
                    {\n
                        v56 = v6;\n
                        v57 = v0;\n
                        v56[8 * v57] = v4;\n
                        v58 = v1;\n
                        v56[1 + 8 * v57] = v58;\n
                        v56[2 + 8 * v57] = v2;\n
                        v56[3 + 8 * v57] = v51;\n
                        v56[7 + 8 * v57] = 100;\n
                        v0 = v57 + 1;\n
                        v42 = v58;\n
                        goto LABEL_4069b0;\n
                    }\n
                    v42 = v1;\n
                    goto LABEL_4069b0;\n
                }\n
            } while (v32 < 63);\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            v0 = 0;\n
            v34 = v31;\n
            v35 = v67;\n
            do\n
            {\n
                if (ExpCmpNE(v117, 0))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v74 = (ExpCmpNE(v35, 0) ? tmp_8 : v73);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v74 = (ExpCmpNE(v35, 0) ? tmp_8 : v73);\n
                }\n
                if (ExpCmpNE(v302, 0))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v75 = (ExpCmpNE(v34, 0) ? tmp_8 : v101);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v75 = (ExpCmpNE(v34, 0) ? tmp_8 : v101);\n
                }\n
                v76 = v75 + 32;\n
                if (v35)\n
                    v76 = v74;\n
                v77 = v1;\n
                v78 = v76 + v77 + 8;\n
                v79 = v76 + v77 - 55;\n
                v5 = v76;\n
                v80 = v77 + v76 + 1;\n
                if ((v80 >> 31 & 1 ^ 1))\n
                    v78 = v80;\n
                v81 = v78 >> 3;\n
                v82 = v78 & -8;\n
                v1 = v80;\n
                v83 = v80 - v82;\n
                v4 = v81;\n
                v2 = v4 + 1;\n
                v3 = v83;\n
                if (v79 < -71)\n
                {\n
LABEL_406ce0:\n
                    v100 = v83 + (v2 * 8);\n
                    v101 = (0 CONCAT 1) << (v100 & 31) >> 32;\n
                    v67 = 1 << (v100 & 31);\n
                    if ((v100 & 32))\n
                        v101 = v67;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v67 = 0;\n
                    if (!(v67 & v7) && !(v101 & v8) && v1 >= -15 && v1 <= 55 && v3 >= 0 && !(v101 & v9) && !(v67 & v10))\n
                    {\n
                        v102 = v6;\n
                        v103 = v0;\n
                        v102[8 * v103] = v4;\n
                        v102[1 + 8 * v103] = v3;\n
                        v102[2 + 8 * v103] = v2;\n
                        v102[3 + 8 * v103] = v3;\n
                        v102[7 + 8 * v103] = 0;\n
                        v0 = v103 + 1;\n
                    }\n
                    v5 += 1;\n
                    if ((v1 & -8) == 8)\n
                    {\n
                        v2 = v35;\n
                        v104 = v3;\n
                        tmp_2 = v104 + 24;\n
                        v105 = (0 CONCAT 1) << (v104 + 24 & 31) >> 32;\n
                        v106 = 1 << (v104 + 24 & 31);\n
                        v107 = tmp_2 & 32;\n
                        if ((tmp_2 & 32))\n
                            v105 = v106;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v106 = 0;\n
                        if (!(!(v106 & v7)) || !(!(v105 & v8)))\n
                        {\n
                            v35 = v2;\n
                        }\n
                        else\n
                        {\n
                            v108 = v16;\n
                            v67 &= v108[172];\n
                            v101 = v101 & v108[173] | v67;\n
                            v35 = v2;\n
                            if (!v101)\n
                            {\n
                                v109 = v3;\n
                                if (v109 >= 0 && !(v105 & v9) && !(v106 & v10))\n
                                {\n
                                    v110 = v6;\n
                                    v111 = v109;\n
                                    v112 = v0;\n
                                    v110[8 * v112] = 1;\n
                                    v110[1 + 8 * v112] = v111;\n
                                    v110[2 + 8 * v112] = 3;\n
                                    v110[3 + 8 * v112] = v111;\n
                                    v110[7 + 8 * v112] = 0;\n
                                    v0 = v112 + 1;\n
                                }\n
                            }\n
                        }\n
                    }\n
                    v113 = v5;\n
                    v35 = (v34 CONCAT v35) >> (v113 & 31);\n
                    v34 >>= v113 & 31;\n
                    if ((v113 & 32))\n
                        v35 = v34;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v34 = 0;\n
                    v73 = v35 | v34;\n
                    if (!v35 && !v34)\n
                        break;\n
                    continue;\n
                }\n
                else\n
                {\n
                    if (v83 > 0)\n
                    {\n
                        v84 = v83 - 1;\n
                        v86 = v84 + (v2 * 8);\n
                        v87 = (0 CONCAT 1) << (v86 & 31) >> 32;\n
                        v88 = 1 << (v86 & 31);\n
                        if ((v86 & 32))\n
                            v87 = v88;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v88 = 0;\n
                        if (!(!(v88 & v10)) || !(!(v87 & v9)))\n
                        {\n
                            v83 = v3;\n
                        }\n
                        else if (!(!(v88 & v7)) || !(!(v87 & v8)))\n
                        {\n
                            v89 = v6;\n
                            v90 = v0;\n
                            v89[8 * v90] = v4;\n
                            v91 = v3;\n
                            v89[1 + 8 * v90] = v91;\n
                            v89[2 + 8 * v90] = v2;\n
                            v89[3 + 8 * v90] = v84;\n
                            v89[7 + 8 * v90] = 100;\n
                            v0 = v90 + 1;\n
                            v83 = v91;\n
                            if (v91 - 7 < -8)\n
                                goto LABEL_406ce0;\n
                            goto LABEL_406c4c;\n
                        }\n
                        else\n
                        {\n
                            v83 = v3;\n
                            if (v83 - 7 < -8)\n
                                goto LABEL_406ce0;\n
                            goto LABEL_406c4c;\n
                        }\n
                    }\n
                    if (v83 - 7 < -8)\n
                        goto LABEL_406ce0;\n
LABEL_406c4c:\n
                    v92 = v83 + 1;\n
                    v94 = v92 + (v2 * 8);\n
                    v95 = (0 CONCAT 1) << (v94 & 31) >> 32;\n
                    v96 = 1 << (v94 & 31);\n
                    if ((v94 & 32))\n
                        v95 = v96;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v96 = 0;\n
                    if (!(v96 & v10) && !(v95 & v9) && (!(!(v96 & v7)) || !(!(v95 & v8))))\n
                    {\n
                        v97 = v6;\n
                        v98 = v0;\n
                        v97[8 * v98] = v4;\n
                        v99 = v3;\n
                        v97[1 + 8 * v98] = v99;\n
                        v97[2 + 8 * v98] = v2;\n
                        v97[3 + 8 * v98] = v92;\n
                        v97[7 + 8 * v98] = 100;\n
                        v0 = v98 + 1;\n
                        v83 = v99;\n
                        goto LABEL_406ce0;\n
                    }\n
                    v83 = v3;\n
                    goto LABEL_406ce0;\n
                }\n
            } while (v1 < 63);\n
        }\n
    }\n
    v114 = v16;\n
    v115 = v21;\n
    v116 = v114[1 + 8 + 2 * v115];\n
    v117 = v114[1 + 9 + 2 * v115];\n
    v3 = v116;\n
    if (!(!v116) || !(!v117))\n
    {\n
        v118 = -1;\n
        do\n
        {\n
            v119 = v118;\n
            v120 = v3;\n
            if (ExpCmpNE(v120, 0))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v121 = (ExpCmpNE(v120, 0) ? tmp_8 : v116);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v121 = (ExpCmpNE(v120, 0) ? tmp_8 : v116);\n
            }\n
            if (!(ExpCmpNE(v117, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v122 = (ExpCmpNE(v117, 0) ? tmp_8 : v67);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v122 = (ExpCmpNE(v117, 0) ? tmp_8 : v67);\n
            }\n
            v67 = v122 + 32;\n
            if (v120)\n
                v67 = v121;\n
            v123 = v118 + v67 + 8;\n
            v118 = v118 + v67 + 1;\n
            if ((v118 >> 31 & 1 ^ 1))\n
                v123 = v118;\n
            v5 = v67;\n
            v124 = v119 + v67 - 47;\n
            v4 = v118;\n
            v2 = v123 >> 3;\n
            v1 = v118 - (v123 & -8);\n
            if (v124 < -71)\n
            {\n
                if (!(v118 - 80 < -64))\n
                    goto LABEL_407030;\n
                goto LABEL_406ed6;\n
            }\n
            v125 = v2 + 2;\n
            v126 = v1;\n
            if (v1 - 7 < -8)\n
            {\n
LABEL_406f40:\n
                if (v126 <= 0)\n
                    goto LABEL_407020;\n
                goto LABEL_406f48;\n
            }\n
            else\n
            {\n
                v12 = v1 + 1;\n
                v127 = v12 + v125 * 8;\n
                v128 = (0 CONCAT 1) << (v127 & 31) >> 32;\n
                v129 = 1 << (v127 & 31);\n
                if ((v127 & 32))\n
                    v128 = v129;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v129 = 0;\n
                v130 = v128 & v9;\n
                v67 = v129 & v10 | v130;\n
                if (!(!(v129 & v10)) || !(!v130))\n
                {\n
                    v126 = v1;\n
                    goto LABEL_406f40;\n
                }\n
                else\n
                {\n
                    tmp_8 = v128 & v8 | v129 & v7;\n
                    v131 = v6;\n
                    v132 = v0;\n
                    v131[8 * v132] = v2;\n
                    v126 = v1;\n
                    v131[1 + 8 * v132] = v126;\n
                    v67 = v126;\n
                    v131[2 + 8 * v132] = v125;\n
                    v131[3 + 8 * v132] = v12;\n
                    *(&v131[7 + 8 * v132]) = (!tmp_8 ? 100 : 0);\n
                    v0 = v132 + 1;\n
                    if (v126 <= 0)\n
                        goto LABEL_407020;\n
LABEL_406f48:\n
                    v12 = v126 - 1;\n
                    v134 = v12 + v125 * 8;\n
                    v135 = (0 CONCAT 1) << (v134 & 31) >> 32;\n
                    v67 = 1 << (v134 & 31);\n
                    if ((v134 & 32))\n
                        v135 = v67;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v67 = 0;\n
                    if (!(v67 & v10) && !(v135 & v9))\n
                    {\n
                        v136 = v6;\n
                        v137 = v0;\n
                        v136[8 * v137] = v2;\n
                        v136[1 + 8 * v137] = v1;\n
                        v136[2 + 8 * v137] = v125;\n
                        v67 &= v7;\n
                        v136[3 + 8 * v137] = v12;\n
                        v138 = (!(v135 & v8) && !v67 ? 100 : 0);\n
                        v136[7 + 8 * v137] = v138;\n
                        v0 = v137 + 1;\n
                    }\n
LABEL_407020:\n
                    v118 = v4;\n
                    if (v118 - 80 < -64)\n
                    {\n
LABEL_406ed6:\n
                        if (v118 - 56 < -71)\n
                            goto LABEL_407269;\n
                        goto LABEL_407180;\n
                    }\n
                    else\n
                    {\n
LABEL_407030:\n
                        v139 = v2 - 2;\n
                        v140 = v1;\n
                        if (v140 - 7 < -8)\n
                        {\n
LABEL_407084:\n
                            if (v140 <= 0)\n
                                goto LABEL_407170;\n
                            goto LABEL_40708c;\n
                        }\n
                        else\n
                        {\n
                            v12 = v140 + 1;\n
                            v141 = v12 + v139 * 8;\n
                            v142 = (0 CONCAT 1) << (v141 & 31) >> 32;\n
                            v67 = 1 << (v141 & 31);\n
                            if ((v141 & 32))\n
                                v142 = v67;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v67 = 0;\n
                            if (!(!(v67 & v10)) || !(!(v142 & v9)))\n
                            {\n
                                v140 = v1;\n
                                goto LABEL_407084;\n
                            }\n
                            else\n
                            {\n
                                tmp_8 = v142 & v8 | v67 & v7;\n
                                v143 = v6;\n
                                v144 = v0;\n
                                v143[8 * v144] = v2;\n
                                v145 = v1;\n
                                v143[1 + 8 * v144] = v145;\n
                                v67 = v145;\n
                                v143[2 + 8 * v144] = v139;\n
                                v143[3 + 8 * v144] = v12;\n
                                *(&v143[7 + 8 * v144]) = (!tmp_8 ? 100 : 0);\n
                                v0 = v144 + 1;\n
                                v140 = v67;\n
                                if (v67 <= 0)\n
                                    goto LABEL_407170;\n
LABEL_40708c:\n
                                v12 = v140 - 1;\n
                                v147 = v12 + v139 * 8;\n
                                v148 = (0 CONCAT 1) << (v147 & 31) >> 32;\n
                                v67 = 1 << (v147 & 31);\n
                                if ((v147 & 32))\n
                                    v148 = v67;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v67 = 0;\n
                                if (!(v67 & v10) && !(v148 & v9))\n
                                {\n
                                    v149 = v6;\n
                                    v150 = v0;\n
                                    v149[8 * v150] = v2;\n
                                    v149[1 + 8 * v150] = v1;\n
                                    v149[2 + 8 * v150] = v139;\n
                                    v67 &= v7;\n
                                    v149[3 + 8 * v150] = v12;\n
                                    v151 = (!(v148 & v8) && !v67 ? 100 : 0);\n
                                    v149[7 + 8 * v150] = v151;\n
                                    v0 = v150 + 1;\n
                                }\n
LABEL_407170:\n
                                v118 = v4;\n
                                if (v118 - 56 < -71)\n
                                    goto LABEL_407269;\n
LABEL_407180:\n
                                v67 = v2 + 1;\n
                                v152 = v1;\n
                                if (v152 - 6 < -8)\n
                                {\n
LABEL_4071dc:\n
                                    if (v152 < 2)\n
                                        goto LABEL_407269;\n
                                    goto LABEL_4071e5;\n
                                }\n
                                else\n
                                {\n
                                    v12 = v152 + 2;\n
                                    v153 = v12 + v67 * 8;\n
                                    v154 = v67;\n
                                    v155 = (0 CONCAT 1) << (v153 & 31) >> 32;\n
                                    v156 = 1 << (v153 & 31);\n
                                    if ((v153 & 32))\n
                                        v155 = v156;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v156 = 0;\n
                                    if (!(!(v156 & v10)) || !(!(v155 & v9)))\n
                                    {\n
                                        v67 = v154;\n
                                        v118 = v4;\n
                                        v152 = v1;\n
                                        goto LABEL_4071dc;\n
                                    }\n
                                    else\n
                                    {\n
                                        tmp_8 = v155 & v8 | v156 & v7;\n
                                        v157 = v6;\n
                                        v158 = v0;\n
                                        v157[8 * v158] = v2;\n
                                        v159 = v1;\n
                                        v157[1 + 8 * v158] = v159;\n
                                        v160 = v159;\n
                                        v67 = v154;\n
                                        v157[2 + 8 * v158] = v154;\n
                                        v157[3 + 8 * v158] = v12;\n
                                        *(&v157[7 + 8 * v158]) = (!tmp_8 ? 100 : 0);\n
                                        v0 = v158 + 1;\n
                                        v118 = v4;\n
                                        v152 = v160;\n
                                        if (v160 < 2)\n
                                            goto LABEL_407269;\n
LABEL_4071e5:\n
                                        v12 = v152 - 2;\n
                                        v162 = v67;\n
                                        v163 = v12 + v67 * 8;\n
                                        v164 = (0 CONCAT 1) << (v163 & 31) >> 32;\n
                                        v67 = 1 << (v163 & 31);\n
                                        if ((v163 & 32))\n
                                            v164 = v67;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v67 = 0;\n
                                        if (!(v67 & v10) && !(v164 & v9))\n
                                        {\n
                                            v165 = v6;\n
                                            v166 = v0;\n
                                            v165[8 * v166] = v2;\n
                                            v165[1 + 8 * v166] = v1;\n
                                            v165[2 + 8 * v166] = v71;\n
                                            v67 &= v7;\n
                                            v165[3 + 8 * v166] = v12;\n
                                            v167 = (!(v164 & v8) && !v67 ? 100 : 0);\n
                                            v165[7 + 8 * v166] = v167;\n
                                            v0 = v166 + 1;\n
                                        }\n
                                        v118 = v4;\n
LABEL_407269:\n
                                        v5 += 1;\n
                                        if (v118 - 72 < -64)\n
                                        {\n
LABEL_407367:\n
                                            v184 = v5;\n
                                            v116 = (v117 CONCAT v3) >> (v184 & 31);\n
                                            v117 >>= v184 & 31;\n
                                            if ((v184 & 32))\n
                                                v116 = v117;\n
                                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                                v117 = 0;\n
                                            v3 = v116;\n
                                            if (!v116 && !v117)\n
                                                break;\n
                                            continue;\n
                                        }\n
                                        else\n
                                        {\n
                                            v67 = v2 - 1;\n
                                            v168 = v1;\n
                                            if (v168 - 6 >= -8)\n
                                            {\n
                                                v12 = v168 + 2;\n
                                                v169 = v12 + v67 * 8;\n
                                                v170 = v67;\n
                                                v171 = (0 CONCAT 1) << (v169 & 31) >> 32;\n
                                                v172 = 1 << (v169 & 31);\n
                                                if ((v169 & 32))\n
                                                    v171 = v172;\n
                                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                                    v172 = 0;\n
                                                if (!(!(v172 & v10)) || !(!(v171 & v9)))\n
                                                {\n
                                                    v67 = v170;\n
                                                    v118 = v4;\n
                                                    v168 = v1;\n
                                                }\n
                                                else\n
                                                {\n
                                                    tmp_8 = v171 & v8 | v172 & v7;\n
                                                    v173 = v6;\n
                                                    v174 = v0;\n
                                                    v173[8 * v174] = v2;\n
                                                    v175 = v1;\n
                                                    v173[1 + 8 * v174] = v175;\n
                                                    v176 = v175;\n
                                                    v67 = v170;\n
                                                    v173[2 + 8 * v174] = v170;\n
                                                    v173[3 + 8 * v174] = v12;\n
                                                    *(&v173[7 + 8 * v174]) = (!tmp_8 ? 100 : 0);\n
                                                    v0 = v174 + 1;\n
                                                    v118 = v4;\n
                                                    v168 = v176;\n
                                                    if (v176 < 2)\n
                                                        goto LABEL_407367;\n
LABEL_4072df:\n
                                                    v12 = v168 - 2;\n
                                                    v11 = v67;\n
                                                    v178 = v12 + v67 * 8;\n
                                                    v179 = (0 CONCAT 1) << (v178 & 31) >> 32;\n
                                                    v67 = 1 << (v178 & 31);\n
                                                    if ((v178 & 32))\n
                                                        v179 = v67;\n
                                                    v180 = v168;\n
                                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                                        v67 = 0;\n
                                                    if (!(v67 & v10) && !(v179 & v9))\n
                                                    {\n
                                                        v181 = v6;\n
                                                        v182 = v0;\n
                                                        v181[8 * v182] = v2;\n
                                                        v181[1 + 8 * v182] = v71;\n
                                                        v181[2 + 8 * v182] = v11;\n
                                                        v67 &= v7;\n
                                                        v181[3 + 8 * v182] = v12;\n
                                                        v183 = (!(v179 & v8) && !v67 ? 100 : 0);\n
                                                        v181[7 + 8 * v182] = v183;\n
                                                        v0 = v182 + 1;\n
                                                    }\n
                                                    v118 = v4;\n
                                                    goto LABEL_407367;\n
                                                }\n
                                            }\n
                                            if (v168 < 2)\n
                                                goto LABEL_407367;\n
                                            goto LABEL_4072df;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        } while (v118 < 63);\n
    }\n
    v185 = v16;\n
    v304 = v21;\n
    v19 = v185[1 + 21 + 2 * v304];\n
    v20 = v185[1 + 20 + 2 * v304];\n
    v302 = v185[1 + 16 + 2 * v304] | v20;\n
    if (!(!v302) || !(!v20))\n
    {\n
        v303 = v185[1 + 17 + 2 * v304] | v19;\n
        v305 = -1;\n
        if (!(ExpCmpNE(v302, 0)))\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v186 = (ExpCmpNE(v302, 0) ? tmp_8 : v304);\n
        }\n
        else\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v186 = (ExpCmpNE(v302, 0) ? tmp_8 : v304);\n
        }\n
        v22 = v303;\n
        if (!(ExpCmpNE(v311, 0)))\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v187 = (ExpCmpNE(v303, 0) ? tmp_8 : v303);\n
        }\n
        else\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v187 = (ExpCmpNE(v303, 0) ? tmp_8 : v303);\n
        }\n
        v188 = v187 + 32;\n
        if (v302)\n
            v188 = v186;\n
        v189 = v188 + v305 + 1;\n
        v11 = v189;\n
        v14 = v188;\n
        v190 = v188 + v305 + 8;\n
        if ((v189 >> 31 & 1 ^ 1))\n
            v190 = v189;\n
        v4 = v190 >> 3;\n
        v191 = v190 & -8;\n
        v192 = v189;\n
        *(&v189) = v189 + 1;\n
        v193 = (0 CONCAT 1) << (*(&v189) & 31) >> 32;\n
        v194 = 1 << (*(&v189) & 31);\n
        v12 = v191;\n
        v195 = v192 - v12;\n
        if ((*(&v189) & 32))\n
            v193 = v194;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v194 = 0;\n
        v1 = v195;\n
        v18 = v302;\n
        if (v195 > 6)\n
        {\n
            v2 = 6;\n
LABEL_407618:\n
            v211 = v11;\n
            v212 = (0 CONCAT 1) << (v211 - 1 & 31) >> 32;\n
            v213 = 1 << (v211 - 1 & 31);\n
            if ((v211 - 1 & 32))\n
                v212 = v213;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v213 = 0;\n
            v214 = v16;\n
            v199 = v214[172];\n
            v215 = v214[173];\n
            v3 = v211 - 64;\n
            if (v3 > -72)\n
            {\n
                if (!(v215 & v212) && !(v199 & v213))\n
                {\n
                    v13 = v215;\n
                    v217 = v213;\n
                    v15 = v199;\n
                    v5 = v212;\n
                    v218 = v2;\n
                    v199 = v218 + v12;\n
                    v219 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                    v220 = 1 << (v199 & 31);\n
                    if ((v199 & 32))\n
                        v219 = v220;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v220 = 0;\n
                    if (!(v220 & v10) && !(v219 & v9))\n
                    {\n
                        v221 = (!(v219 & v8) && !(v220 & v7) ? 100 : 0);\n
                        v199 = v6;\n
                        v222 = v0;\n
                        v223 = v4;\n
                        v199[8 * v222] = v223;\n
                        v199[1 + 8 * v222] = v1;\n
                        v199[2 + 8 * v222] = v223;\n
                        v199[3 + 8 * v222] = v218;\n
                        v199[7 + 8 * v222] = v221;\n
                        v0 = v222 + 1;\n
                    }\n
                    v224 = v218;\n
                    v225 = v217;\n
                    v226 = v3;\n
                    v227 = v2 - 1;\n
                    if (!((v5 CONCAT v217) << 31 >> 32 & v15) && !(v5 >> 1 & v13))\n
                    {\n
                        v228 = v12 + v227;\n
                        v229 = (0 CONCAT 1) << (v228 & 31) >> 32;\n
                        v230 = 1 << (v228 & 31);\n
                        if ((v228 & 32))\n
                            v229 = v230;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v230 = 0;\n
                        if (!(v230 & v10) && !(v229 & v9))\n
                        {\n
                            tmp_8 = v229 & v8 | v230 & v7;\n
                            v231 = v6;\n
                            v232 = v0;\n
                            v233 = v4;\n
                            v231[8 * v232] = v233;\n
                            v231[1 + 8 * v232] = v1;\n
                            v231[2 + 8 * v232] = v233;\n
                            v225 = v217;\n
                            v231[3 + 8 * v232] = v227;\n
                            *(&v231[7 + 8 * v232]) = (!tmp_8 ? 100 : 0);\n
                            v0 = v232 + 1;\n
                            v199 = v5;\n
                            v226 = v3;\n
                        }\n
                        else\n
                        {\n
                            v199 = v5;\n
                            v226 = v3;\n
                        }\n
                        v227 = v2 - 2;\n
                        if (!((v199 CONCAT v217) << 30 >> 32 & v15) && !(v199 >> 2 & v13))\n
                        {\n
                            v199 = v12 + v227;\n
                            v235 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                            v236 = 1 << (v199 & 31);\n
                            if ((v199 & 32))\n
                                v235 = v236;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v236 = 0;\n
                            if (!(v236 & v10) && !(v235 & v9))\n
                            {\n
                                tmp_8 = v235 & v8 | v236 & v7;\n
                                v199 = v6;\n
                                v237 = v0;\n
                                v238 = v4;\n
                                v199[8 * v237] = v238;\n
                                v199[1 + 8 * v237] = v1;\n
                                v199[2 + 8 * v237] = v223;\n
                                v199[3 + 8 * v237] = v227;\n
                                *(&v199[7 + 8 * v237]) = (!tmp_8 ? 100 : 0);\n
                                v0 = v237 + 1;\n
                            }\n
                            v226 = v3;\n
                            v227 = v2 - 3;\n
                            if (!((v5 CONCAT v217) << 29 >> 32 & v15) && !(v5 >> 3 & v13))\n
                            {\n
                                v199 = v12 + v227;\n
                                v240 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                                v241 = 1 << (v199 & 31);\n
                                if ((v199 & 32))\n
                                    v240 = v241;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v241 = 0;\n
                                if (!(v241 & v10) && !(v240 & v9))\n
                                {\n
                                    tmp_8 = v240 & v8 | v241 & v7;\n
                                    v199 = v6;\n
                                    v242 = v0;\n
                                    v243 = v4;\n
                                    v199[8 * v242] = v243;\n
                                    v199[1 + 8 * v242] = v1;\n
                                    v199[2 + 8 * v242] = v223;\n
                                    v199[3 + 8 * v242] = v227;\n
                                    *(&v199[7 + 8 * v242]) = (!tmp_8 ? 100 : 0);\n
                                    v0 = v242 + 1;\n
                                }\n
                                v226 = v3;\n
                                v227 = v2 - 4;\n
                                if (!((v5 CONCAT v217) << 28 >> 32 & v15) && !(v5 >> 4 & v13))\n
                                {\n
                                    v199 = v12 + v227;\n
                                    v245 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                                    v246 = 1 << (v199 & 31);\n
                                    if ((v199 & 32))\n
                                        v245 = v246;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v246 = 0;\n
                                    if (!(v246 & v10) && !(v245 & v9))\n
                                    {\n
                                        tmp_8 = v245 & v8 | v246 & v7;\n
                                        v199 = v6;\n
                                        v247 = v0;\n
                                        v248 = v4;\n
                                        v199[8 * v247] = v248;\n
                                        v199[1 + 8 * v247] = v1;\n
                                        v199[2 + 8 * v247] = v223;\n
                                        v199[3 + 8 * v247] = v227;\n
                                        *(&v199[7 + 8 * v247]) = (!tmp_8 ? 100 : 0);\n
                                        v0 = v247 + 1;\n
                                    }\n
                                    v226 = v3;\n
                                    v227 = v2 - 5;\n
                                    if (!((v5 CONCAT v217) << 27 >> 32 & v15) && !(v5 >> 5 & v13))\n
                                    {\n
                                        v199 = v12 + v227;\n
                                        v250 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                                        v251 = 1 << (v199 & 31);\n
                                        if ((v199 & 32))\n
                                            v250 = v251;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v251 = 0;\n
                                        if (!(v251 & v10) && !(v250 & v9))\n
                                        {\n
                                            tmp_8 = v250 & v8 | v251 & v7;\n
                                            v199 = v6;\n
                                            v252 = v0;\n
                                            v253 = v4;\n
                                            v199[8 * v252] = v253;\n
                                            v199[1 + 8 * v252] = v1;\n
                                            v199[2 + 8 * v252] = v223;\n
                                            v199[3 + 8 * v252] = v227;\n
                                            *(&v199[7 + 8 * v252]) = (!tmp_8 ? 100 : 0);\n
                                            v0 = v252 + 1;\n
                                        }\n
                                        v226 = v3;\n
                                        v216 = v2 - 6;\n
                                        if (!(v15 & (v5 CONCAT v225) >> 6) && !(v13 & v5 >> 6))\n
                                        {\n
                                            v199 = v12 + v216;\n
                                            v255 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                                            v256 = 1 << (v199 & 31);\n
                                            if ((v199 & 32))\n
                                                v255 = v256;\n
                                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                                v256 = 0;\n
                                            if (!(v256 & v10) && !(v255 & v9))\n
                                            {\n
                                                tmp_8 = v255 & v8 | v256 & v7;\n
                                                v199 = v6;\n
                                                v259 = v0;\n
                                                v260 = v4;\n
                                                v199[8 * v259] = v260;\n
                                                v199[1 + 8 * v259] = v1;\n
                                                v199[2 + 8 * v259] = v260;\n
                                                v199[3 + 8 * v259] = v216;\n
                                                *(&v199[7 + 8 * v259]) = (!tmp_8 ? 100 : 0);\n
                                                v0 = v259 + 1;\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                    v216 = v227;\n
                    goto LABEL_4076cc;\n
                }\n
            }\n
            else\n
            {\n
                if (!(v215 & v212) && !(v199 & v213))\n
                {\n
                    v13 = v215;\n
                    v15 = v199;\n
                    v5 = v212;\n
                    if (!(!((v5 CONCAT v213) << 31 >> 32 & v15)) || !(!(v5 >> 1 & v13)))\n
                    {\n
                        v216 = v2 - 1;\n
                        goto LABEL_4076c8;\n
                    }\n
                    else if (!(!((v5 CONCAT v213) << 30 >> 32 & v15)) || !(!(v5 >> 2 & v13)))\n
                    {\n
                        v216 = v2 - 2;\n
                        goto LABEL_4076c8;\n
                    }\n
                    else if (!(!((v5 CONCAT v213) << 29 >> 32 & v15)) || !(!(v5 >> 3 & v13)))\n
                    {\n
                        v216 = v2 - 3;\n
                        goto LABEL_4076c8;\n
                    }\n
                    else if (!(!((v5 CONCAT v213) << 28 >> 32 & v15)) || !(!(v5 >> 4 & v13)))\n
                    {\n
                        v216 = v2 - 4;\n
                        goto LABEL_4076c8;\n
                    }\n
                    else if (!(!((v5 CONCAT v213) << 27 >> 32 & v15)) || !(!(v5 >> 5 & v13)))\n
                    {\n
                        v216 = v2 - 5;\n
                        goto LABEL_4076c8;\n
                    }\n
                    else\n
                    {\n
                        v226 = v3;\n
                        v216 = v2 - 6;\n
LABEL_4076cc:\n
                        if (v226 >= -71)\n
                        {\n
                            v199 = v12 + v216;\n
                            v257 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                            v258 = 1 << (v199 & 31);\n
                            if ((v199 & 32))\n
                                v257 = v258;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v258 = 0;\n
                            if (!(v258 & v10) && !(v257 & v9) && (!(!(v258 & v7)) || !(!(v257 & v8))))\n
                            {\n
                                v262 = v6;\n
                                v199 = v0;\n
                                v263 = v4;\n
                                v262[8 * v199] = v263;\n
                                v262[1 + 8 * v199] = v1;\n
                                v262[2 + 8 * v199] = v263;\n
                                v262[3 + 8 * v199] = v216;\n
                                v262[7 + 8 * v199] = 100;\n
                                v0 = v199 + 1;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v216 = v2;\n
LABEL_4076c8:\n
            v226 = v3;\n
            goto LABEL_4076cc;\n
        }\n
        v196 = v16;\n
        v197 = v196[172];\n
        v198 = v196[173];\n
        v5 = v11 - 64;\n
        if (v5 >= -71)\n
        {\n
            v200 = v1 + 1;\n
            v2 = v197;\n
            v3 = v198;\n
            while (true)\n
            {\n
                v199 = v200 - 1;\n
                if (!(!(v198 & v193)) || !(!(v197 & v194)))\n
                    break;\n
                if (v199 >= -1)\n
                {\n
                    v199 = v12 + v200;\n
                    v201 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
                    v202 = 1 << (v199 & 31);\n
                    if ((v199 & 32))\n
                        v201 = v202;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v202 = 0;\n
                    if (!(v202 & v10) && !(v201 & v9))\n
                    {\n
                        v199 = (!(v201 & v8) && !(v202 & v7) ? 100 : 0);\n
                        v203 = v6;\n
                        v204 = v0;\n
                        v203[8 * v204] = v4;\n
                        v203[1 + 8 * v204] = v1;\n
                        v203[2 + 8 * v204] = v4;\n
                        v203[3 + 8 * v204] = v200;\n
                        v203[7 + 8 * v204] = v199;\n
                        v0 = v204 + 1;\n
                    }\n
                    v197 = v2;\n
                    v198 = v3;\n
                }\n
                v193 = (v193 CONCAT v194) * 2 >> 32;\n
                v194 *= 2;\n
                v200 += 1;\n
                if (v200 == 8)\n
                    goto LABEL_4075f0;\n
            }\n
        }\n
        else\n
        {\n
            v199 = v1;\n
            if (!(!(v198 & v193)) || !(!(v197 & v194)))\n
                goto LABEL_4075f0;\n
            do\n
            {\n
                if (v199 == 6)\n
                    goto LABEL_4075f0;\n
                v193 = (v193 CONCAT v194) * 2 >> 32;\n
                v199 += 1;\n
            } while (!(v198 & v193) && !(v197 & v194 << 1));\n
            v200 = v199 + 1;\n
        }\n
        if (v5 >= -71 && v199 >= -1)\n
        {\n
            v199 = v12 + v104;\n
            v205 = (0 CONCAT 1) << (v199 & 31) >> 32;\n
            v206 = 1 << (v199 & 31);\n
            if ((v199 & 32))\n
                v205 = v206;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v206 = 0;\n
            if (!(v206 & v10) && !(v205 & v9) && (!(!(v206 & v7)) || !(!(v205 & v8))))\n
            {\n
                v207 = v6;\n
                v208 = v0;\n
                v209 = v4;\n
                v207[8 * v208] = v209;\n
                v207[1 + 8 * v208] = v1;\n
                v207[2 + 8 * v208] = v209;\n
                v207[3 + 8 * v208] = v200;\n
                v207[7 + 8 * v208] = 100;\n
                v0 = v208 + 1;\n
            }\n
        }\n
LABEL_4075f0:\n
        v2 = v1 - 1;\n
        goto LABEL_407618;\n
    }\n
    v306 = v16;\n
    v307 = v21;\n
    v308 = v20 | v306[1 + 12 + 2 * v307];\n
    v309 = v19 | v306[1 + 13 + 2 * v307];\n
    v20 = v308;\n
    v19 = v309;\n
    if (!(!v308) || !(!v309))\n
    {\n
        v310 = -1;\n
        do\n
        {\n
            v311 = v20;\n
            if (ExpCmpNE(v311, 0))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v312 = (ExpCmpNE(v311, 0) ? tmp_8 : v307);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v312 = (ExpCmpNE(v311, 0) ? tmp_8 : v307);\n
            }\n
            if (!(ExpCmpNE(v19, 0)))\n
            {\n
                tmp_11 = UnaryOp Ctz;\n
                v313 = (ExpCmpNE(v19, 0) ? tmp_11 : v309);\n
            }\n
            else\n
            {\n
                tmp_11 = UnaryOp Ctz;\n
                v313 = (ExpCmpNE(v19, 0) ? tmp_11 : v309);\n
            }\n
            v314 = v313 + 32;\n
            if (v311)\n
                v314 = v312;\n
            v315 = v314 + v310 + 8;\n
            v22 = v314;\n
            v316 = v310 + v314 + 1;\n
            if ((v316 >> 31 & 1 ^ 1))\n
                v315 = v316;\n
            v317 = v315 >> 3;\n
            v309 = v316 - (v315 & -8);\n
            v14 = v316;\n
            v318 = v317 + 1;\n
            v2 = v309 + 1;\n
            v13 = v317;\n
            v11 = v309;\n
            v17 = v318;\n
            v15 = v13 * 8 + 8;\n
            if (v316 <= 55 && v309 <= 6)\n
            {\n
                v319 = v2;\n
                v320 = v15 + v319;\n
                v321 = (0 CONCAT 1) << (v320 & 31) >> 32;\n
                v322 = 1 << (v320 & 31);\n
                if ((v320 & 32))\n
                    v321 = v322;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v322 = 0;\n
                v323 = v16;\n
                v4 = v323[172];\n
                v12 = v323[173];\n
                v324 = v309 + v13 * 8 + 9;\n
                v309 = v322;\n
                v325 = v319;\n
                do\n
                {\n
                    v326 = v318;\n
                    v327 = v321;\n
                    v5 = v309;\n
                    v328 = v4 & v309;\n
                    v309 = v325;\n
                    v3 = v327;\n
                    v329 = v326;\n
                    v1 = v325;\n
                    v330 = (v326 | v325) >> 31;\n
                    if (!(v12 & v3) && !v328)\n
                    {\n
                        if (!v330)\n
                        {\n
                            v331 = (0 CONCAT 1) << (v324 & 31) >> 32;\n
                            v332 = 1 << (v324 & 31);\n
                            if ((v324 & 32))\n
                                v331 = v332;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v332 = 0;\n
                            if (!(v332 & v10) && !(v331 & v9))\n
                            {\n
                                if (!(!(v331 & v8)) || !(!(v332 & v7)))\n
                                    v333 = 100;\n
                                else\n
                                    v333 = 0;\n
                                v334 = v6;\n
                                v335 = v0;\n
                                v334[8 * v335] = v13;\n
                                v334[1 + 8 * v335] = v11;\n
                                v334[2 + 8 * v335] = v329;\n
                                v334[3 + 8 * v335] = v1;\n
                                v334[7 + 8 * v335] = v104;\n
                                v0 = v335 + 1;\n
                            }\n
                        }\n
                        v309 = v5;\n
                        if (v326 > 6)\n
                            break;\n
                        continue;\n
                    }\n
                    else if (!v330)\n
                    {\n
                        v309 = (0 CONCAT 1) << (v324 & 31) >> 32;\n
                        v337 = 1 << (v324 & 31);\n
                        if ((v324 & 32))\n
                            v309 = v337;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v337 = 0;\n
                        if (!(v337 & v10) && !(v309 & v9))\n
                        {\n
                            v309 &= v8;\n
                            if (!(!(v337 & v7)) || !(!v309))\n
                            {\n
                                v338 = v6;\n
                                v339 = v0;\n
                                v338[8 * v339] = v13;\n
                                v338[1 + 8 * v339] = v11;\n
                                v338[2 + 8 * v339] = v329;\n
                                v338[3 + 8 * v339] = v1;\n
                                v338[7 + 8 * v339] = 100;\n
                                v0 = v339 + 1;\n
                                break;\n
                            }\n
                        }\n
                    }\n
                    v318 = v326 + 1;\n
                    v321 = (v3 CONCAT v309) * 0x200 >> 32;\n
                    v336 = v1;\n
                    v325 = v336 + 1;\n
                    v309 *= 0x200;\n
                    v324 += 9;\n
                } while (v336 < 7);\n
            }\n
            v340 = v13;\n
            v12 = v340 - 1;\n
            v18 = v340 * 8 - 8;\n
            if (v14 >= 8)\n
            {\n
                v341 = v11;\n
                if (v341 <= 6)\n
                {\n
                    v342 = v2;\n
                    v343 = v18 + v342;\n
                    v344 = (0 CONCAT 1) << (v343 & 31) >> 32;\n
                    v309 = 1 << (v343 & 31);\n
                    if ((v343 & 32))\n
                        v344 = v309;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v309 = 0;\n
                    v345 = v16;\n
                    v346 = v345[172];\n
                    v3 = v345[173];\n
                    v347 = v341 + v13 * 8 - 7;\n
                    v1 = v12;\n
                    v5 = v345[172];\n
                    do\n
                    {\n
                        if (!(v3 & v344) && !(v346 & v309))\n
                        {\n
                            v348 = v1;\n
                            v2 = v342;\n
                            if (v348 <= 7 && v342 >= 0)\n
                            {\n
                                v349 = (0 CONCAT 1) << (v347 & 31) >> 32;\n
                                v350 = 1 << (v347 & 31);\n
                                if ((v347 & 32))\n
                                    v349 = v350;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v350 = 0;\n
                                if (!(!(v350 & v10)) || !(!(v349 & v9)))\n
                                {\n
                                    v348 = v1;\n
                                }\n
                                else\n
                                {\n
                                    v351 = (!(v349 & v8) && !(v350 & v7) ? 100 : 0);\n
                                    v4 = v351;\n
                                    v352 = v6;\n
                                    *((v352 + v0 * 8)) = v13;\n
                                    *((v352 + v0 * 8 + 1)) = v11;\n
                                    v353 = v1;\n
                                    *((v352 + v0 * 8 + 2)) = v353;\n
                                    *((v352 + v0 * 8 + 3)) = v2;\n
                                    v348 = v353;\n
                                    *((v352 + v0 * 8 + 7)) = v4;\n
                                    v0 += 1;\n
                                }\n
                                v346 = v5;\n
                            }\n
                            if (v348 <= 0)\n
                                break;\n
                            continue;\n
                        }\n
                        else if (v1 <= 7 && v342 >= 0)\n
                        {\n
                            v355 = (0 CONCAT 1) << (v347 & 31) >> 32;\n
                            v309 = 1 << (v347 & 31);\n
                            if ((v347 & 32))\n
                                v355 = v309;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v309 = 0;\n
                            if (!(v309 & v10) && !(v355 & v9))\n
                            {\n
                                v309 = v309 & v7 | v355 & v8;\n
                                if (v309)\n
                                {\n
                                    v356 = v6;\n
                                    v357 = v0;\n
                                    v356[8 * v357] = v13;\n
                                    v356[1 + 8 * v357] = v11;\n
                                    v356[2 + 8 * v357] = v1;\n
                                    v356[3 + 8 * v357] = v342;\n
                                    v356[7 + 8 * v357] = 100;\n
                                    v0 = v357 + 1;\n
                                    break;\n
                                }\n
                            }\n
                        }\n
                        v1 = v348 - 1;\n
                        v309 = (v344 CONCAT v309) >> 7;\n
                        v354 = v2;\n
                        v342 = v354 + 1;\n
                        v344 /= 128;\n
                        v347 -= 7;\n
                    } while (v354 < 7);\n
                }\n
            }\n
            v358 = v11;\n
            v359 = v358 - 1;\n
            v360 = v14;\n
            v1 = v359;\n
            if (v14 > 55)\n
            {\n
                v22 += 1;\n
                if (v360 < 8)\n
                    goto LABEL_4092e0;\n
                goto LABEL_4087d2;\n
            }\n
            if (v358 <= 0)\n
            {\n
LABEL_4087c4:\n
                v22 += 1;\n
                if (v360 < 8)\n
                    goto LABEL_4092e0;\n
                goto LABEL_4087d2;\n
            }\n
            v361 = v15 + v359;\n
            v309 = (0 CONCAT 1) << (v361 & 31) >> 32;\n
            v362 = 1 << (v361 & 31);\n
            if ((v361 & 32))\n
                v309 = v362;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v362 = 0;\n
            v363 = v16;\n
            v364 = v359;\n
            v366 = v363[173];\n
            v3 = v363[172];\n
            v2 = v360 < -15;\n
            if (!(!(v3 & v362)) || !(!(v2 & v309)))\n
            {\n
                v367 = v364;\n
                *(&v366) = v2;\n
                goto LABEL_408615;\n
            }\n
            v2 = v366;\n
            v360 = v14;\n
            v5 = v362;\n
            if (v14 < -15)\n
            {\n
                v368 = v309;\n
                v309 = v3;\n
                if (!(v360 <= 47))\n
                    goto LABEL_40861d;\n
            }\n
            else\n
            {\n
                v369 = v17;\n
                v366 = v1 + v369 * 8;\n
                v370 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                v371 = 1 << (v366 & 31);\n
                if ((v366 & 32))\n
                    v370 = v371;\n
                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                    v371 = 0;\n
                v368 = v309;\n
                if (!(v371 & v10) && !(v370 & v9))\n
                {\n
                    v366 = (!(v370 & v8) && !(v371 & v7) ? 100 : 0);\n
                    v372 = v6;\n
                    v373 = v0;\n
                    v372[8 * v373] = v13;\n
                    v372[1 + 8 * v373] = v11;\n
                    v368 = v309;\n
                    v372[2 + 8 * v373] = v369;\n
                    v372[3 + 8 * v373] = v1;\n
                    v372[7 + 8 * v373] = v366;\n
                    v0 = v373 + 1;\n
                }\n
                v360 = v14;\n
                v309 = v3;\n
                if (!(v14 <= 47))\n
                    goto LABEL_40861d;\n
            }\n
            v358 = v11;\n
            if (v358 < 2)\n
            {\n
LABEL_4087c0:\n
                v359 = v1;\n
                goto LABEL_4087c4;\n
            }\n
            v374 = v5;\n
            v375 = (v368 CONCAT v374) * 128 >> 32;\n
            v376 = v374 * 128 & v309;\n
            *(&v366) = v360 < -23;\n
            tmp_26 = v375 & v2 | v376;\n
            v378 = v368;\n
            v379 = v13 + 2;\n
            v367 = v358 - 2;\n
            if (tmp_26)\n
            {\n
LABEL_4087b5:\n
                v17 = v379;\n
                goto LABEL_408615;\n
            }\n
            else\n
            {\n
                v4 = v378;\n
                if (v360 < -23)\n
                {\n
                    v359 = v1;\n
                    v380 = v4;\n
                    if (!(v360 <= 39))\n
                        goto LABEL_4092ce;\n
                }\n
                else\n
                {\n
                    v366 = v367 + v379 * 8;\n
                    v381 = v379;\n
                    v382 = v367;\n
                    v383 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                    v384 = 1 << (v366 & 31);\n
                    if ((v366 & 32))\n
                        v383 = v384;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v384 = 0;\n
                    if (!(v384 & v10) && !(v383 & v9))\n
                    {\n
                        v385 = v6;\n
                        v386 = v0;\n
                        *((v385 + v0 * 8)) = v13;\n
                        *((v385 + v0 * 8 + 1)) = v11;\n
                        *((v385 + v0 * 8 + 2)) = v381;\n
                        v387 = v383 & v8 | v384 & v7;\n
                        *((v385 + v0 * 8 + 3)) = v382;\n
                        v366 = (!v387 ? 100 : 0);\n
                        *((v385 + v386 * 8 + 7)) = v366;\n
                        v0 = v386 + 1;\n
                    }\n
                    v360 = v14;\n
                    v359 = v1;\n
                    v309 = v3;\n
                    v380 = v4;\n
                    if (!(v14 <= 39))\n
                        goto LABEL_4092ce;\n
                }\n
                v358 = v11;\n
                if (v358 < 3)\n
                    goto LABEL_4087c4;\n
                v388 = v5;\n
                v389 = (v380 CONCAT v388) * 0x4000 >> 32;\n
                v390 = v388 * 0x4000 & v309;\n
                *(&v366) = v360 < -31;\n
                tmp_26 = v389 & v2 | v390;\n
                v379 = v13 + 3;\n
                v367 = v358 - 3;\n
                if (!(!tmp_26))\n
                    goto LABEL_4087b5;\n
                if (v360 < -31)\n
                {\n
                    v359 = v1;\n
                    v392 = v4;\n
                    if (!(v360 <= 31))\n
                        goto LABEL_4092ce;\n
                }\n
                else\n
                {\n
                    v366 = v367 + v379 * 8;\n
                    v393 = v379;\n
                    v394 = v367;\n
                    v395 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                    v396 = 1 << (v366 & 31);\n
                    if ((v366 & 32))\n
                        v395 = v396;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v396 = 0;\n
                    if (!(v396 & v10) && !(v395 & v9))\n
                    {\n
                        v397 = v6;\n
                        v398 = v0;\n
                        *((v397 + v0 * 8)) = v13;\n
                        *((v397 + v0 * 8 + 1)) = v11;\n
                        *((v397 + v0 * 8 + 2)) = v393;\n
                        v399 = v395 & v8 | v396 & v7;\n
                        *((v397 + v0 * 8 + 3)) = v394;\n
                        v366 = (!v399 ? 100 : 0);\n
                        *((v397 + v398 * 8 + 7)) = v366;\n
                        v0 = v398 + 1;\n
                    }\n
                    v360 = v14;\n
                    v359 = v1;\n
                    v309 = v3;\n
                    v392 = v4;\n
                    if (!(v14 <= 31))\n
                        goto LABEL_4092ce;\n
                }\n
                v358 = v11;\n
                if (v358 < 4)\n
                    goto LABEL_4087c4;\n
                v400 = v5;\n
                v401 = (v392 CONCAT v400) * 0x200000 >> 32;\n
                v402 = v400 * 0x200000 & v309;\n
                *(&v366) = v360 < -39;\n
                tmp_26 = v401 & v2 | v402;\n
                v379 = v13 + 4;\n
                v367 = v358 - 4;\n
                if (!(!tmp_26))\n
                    goto LABEL_4087b5;\n
                if (v360 < -39)\n
                {\n
                    v359 = v1;\n
                }\n
                else\n
                {\n
                    v366 = v367 + v379 * 8;\n
                    v404 = v379;\n
                    v405 = v367;\n
                    v406 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                    v407 = 1 << (v366 & 31);\n
                    if ((v366 & 32))\n
                        v406 = v407;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v407 = 0;\n
                    if (!(v407 & v10) && !(v406 & v9))\n
                    {\n
                        v408 = v6;\n
                        v409 = v0;\n
                        *((v408 + v0 * 8)) = v13;\n
                        *((v408 + v0 * 8 + 1)) = v11;\n
                        *((v408 + v0 * 8 + 2)) = v404;\n
                        v410 = v406 & v8 | v407 & v7;\n
                        *((v408 + v0 * 8 + 3)) = v405;\n
                        v366 = (!v410 ? 100 : 0);\n
                        *((v408 + v409 * 8 + 7)) = v366;\n
                        v0 = v409 + 1;\n
                    }\n
                    v360 = v14;\n
                    v359 = v1;\n
                    v309 = v3;\n
                }\n
                if (v360 <= 23)\n
                {\n
                    v358 = v11;\n
                    if (v358 < 5)\n
                        goto LABEL_4087c4;\n
                    v411 = v5;\n
                    *(&v366) = v360 < -47;\n
                    v309 = ((v4 CONCAT v411) * 0x10000000 >> 32) & v2 | v309 & v411 * 0x10000000;\n
                    v17 = v13 + 5;\n
                    v412 = v358 - 5;\n
                    if (v309)\n
                    {\n
                        v367 = v412;\n
                        goto LABEL_408615;\n
                    }\n
                    if (v360 >= -47)\n
                    {\n
                        v366 = v412 + v17 * 8;\n
                        v414 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                        v309 = 1 << (v366 & 31);\n
                        if ((v366 & 32))\n
                            v414 = v309;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v309 = 0;\n
                        if (!(v309 & v10) && !(v414 & v9))\n
                        {\n
                            v366 = v6;\n
                            v415 = v0;\n
                            v3 = v412;\n
                            v366[8 * v415] = v13;\n
                            v366[1 + 8 * v415] = v11;\n
                            v366[2 + 8 * v415] = v17;\n
                            v309 &= v7;\n
                            v366[3 + 8 * v415] = v3;\n
                            v416 = (!(v414 & v8) && !v309 ? 100 : 0);\n
                            v366[7 + 8 * v415] = v416;\n
                            v0 = v415 + 1;\n
                        }\n
                        v360 = v14;\n
                    }\n
                    v359 = v1;\n
                    if (v360 <= 15)\n
                    {\n
                        v358 = v11;\n
                        if (v358 < 6)\n
                            goto LABEL_4087c4;\n
                        v17 = v13 + 6;\n
                        v367 = v358 - 6;\n
                        *(&v366) = v360 < -55;\n
                        if ((v5 << 3 & v2))\n
                        {\n
LABEL_408615:\n
                            if (!v366)\n
                            {\n
                                v420 = v367 + v17 * 8;\n
                                v421 = (0 CONCAT 1) << (v420 & 31) >> 32;\n
                                v422 = 1 << (v420 & 31);\n
                                if ((v420 & 32))\n
                                    v421 = v422;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v422 = 0;\n
                                v309 = v422 & v10 | v421 & v9;\n
                                if (!v309 && (!(!(v422 & v7)) || !(!(v421 & v8))))\n
                                {\n
                                    v430 = v6;\n
                                    v431 = v0;\n
                                    v430[8 * v431] = v13;\n
                                    v358 = v11;\n
                                    v430[1 + 8 * v431] = v358;\n
                                    v309 = v367;\n
                                    v430[2 + 8 * v431] = v17;\n
                                    v430[3 + 8 * v431] = v367;\n
                                    v430[7 + 8 * v431] = 100;\n
                                    v0 = v431 + 1;\n
                                    goto LABEL_4086b3;\n
                                }\n
                            }\n
                        }\n
                        if (v360 < -55)\n
                        {\n
                            v359 = v1;\n
                        }\n
                        else\n
                        {\n
                            v366 = v367 + v17 * 8;\n
                            v417 = (0 CONCAT 1) << (v366 & 31) >> 32;\n
                            v309 = 1 << (v366 & 31);\n
                            if ((v366 & 32))\n
                                v417 = v309;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v309 = 0;\n
                            if (!(!(v309 & v10)) || !(!(v417 & v9)))\n
                            {\n
                                v360 = v14;\n
                                v359 = v1;\n
                            }\n
                            else\n
                            {\n
                                v366 = v6;\n
                                v418 = v0;\n
                                v3 = v367;\n
                                v366[8 * v418] = v13;\n
                                v359 = v1;\n
                                v366[1 + 8 * v418] = v11;\n
                                v366[2 + 8 * v418] = v17;\n
                                tmp_17 = v417 & v8 | v309 & v7;\n
                                v366[3 + 8 * v418] = v3;\n
                                v309 = 0;\n
                                *(&v366[7 + 8 * v418]) = (!tmp_17 ? 100 : 0);\n
                                v0 = v418 + 1;\n
                                v360 = v14;\n
                            }\n
                        }\n
                        if (v360 <= 7)\n
                        {\n
                            v358 = v11;\n
                            if (v358 >= 7)\n
                            {\n
                                v17 = v13 + 7;\n
                                v367 = v358 - 7;\n
                                *(&v366) = v360 < -63;\n
                                if (!(v5 << 10 & v2))\n
                                {\n
                                    v360 = v14;\n
                                    if (v14 < -63)\n
                                    {\n
LABEL_40861d:\n
                                        v358 = v11;\n
                                        goto LABEL_4087c0;\n
                                    }\n
                                    else\n
                                    {\n
                                        v3 = v367;\n
                                        v423 = v367 + v17 * 8;\n
                                        v424 = (0 CONCAT 1) << (v423 & 31) >> 32;\n
                                        v425 = 1 << (v423 & 31);\n
                                        if ((v423 & 32))\n
                                            v424 = v425;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v425 = 0;\n
                                        v309 = v425 & v10 | v424 & v9;\n
                                        if (!v309)\n
                                        {\n
                                            v426 = v6;\n
                                            v427 = v0;\n
                                            v426[8 * v427] = v13;\n
                                            v428 = v11;\n
                                            v426[1 + 8 * v427] = v428;\n
                                            v426[2 + 8 * v427] = v17;\n
                                            tmp_16 = v424 & v8 | v425 & v7;\n
                                            v358 = v428;\n
                                            v426[3 + 8 * v427] = v3;\n
                                            *(&v426[7 + 8 * v427]) = (!tmp_16 ? 100 : 0);\n
                                            v309 = v427 + 1;\n
                                            v0 = v309;\n
LABEL_4086b3:\n
                                            v360 = v14;\n
                                            goto LABEL_4087c0;\n
                                        }\n
                                    }\n
                                    v360 = v14;\n
                                    goto LABEL_40861d;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
LABEL_4092ce:\n
                v358 = v11;\n
                v22 += 1;\n
                if (v360 < 8)\n
                    goto LABEL_4092e0;\n
LABEL_4087d2:\n
                if (v358 <= 0)\n
                {\n
LABEL_4092e0:\n
                    v307 = v22;\n
                    v513 = v19;\n
                    v514 = (v513 CONCAT v20) >> (v307 & 31);\n
                    v308 = v513 >> (v307 & 31);\n
                    if ((v307 & 32))\n
                        v514 = v308;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v308 = 0;\n
                    v20 = v514;\n
                    v19 = v308;\n
                    if (!v514 && !v308)\n
                        break;\n
                    continue;\n
                }\n
                else\n
                {\n
                    v432 = v18 + v223;\n
                    v309 = (0 CONCAT 1) << (v432 & 31) >> 32;\n
                    v433 = 1 << (v432 & 31);\n
                    if ((v432 & 32))\n
                        v309 = v433;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                        v433 = 0;\n
                    v434 = v16;\n
                    v435 = v434[172];\n
                    v436 = v434[173];\n
                    v437 = v12;\n
                    v2 = !(v12 < 8);\n
                    v3 = v13;\n
                    v438 = v11;\n
                    if (!(!(v18 & v433)) || !(!(v15 & v309)))\n
                    {\n
                        v439 = v1;\n
                        goto LABEL_408838;\n
                    }\n
                    v15 = v436;\n
                    v18 = v435;\n
                    v5 = v309;\n
                    v4 = v438;\n
                    if (v437 > 7)\n
                    {\n
                        v309 = v5;\n
                        v440 = v433;\n
                        if (v14 < 16)\n
                            goto LABEL_4092e0;\n
                    }\n
                    else\n
                    {\n
                        v442 = v1;\n
                        v444 = v442 + v437 * 8;\n
                        v445 = (0 CONCAT 1) << (v444 & 31) >> 32;\n
                        v438 = 1 << (v444 & 31);\n
                        if ((v444 & 32))\n
                            v445 = v438;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                            v438 = 0;\n
                        v440 = v433;\n
                        if (!(v438 & v10) && !(v445 & v9))\n
                        {\n
                            tmp_8 = v445 & v8 | v438 & v7;\n
                            v446 = v6;\n
                            v438 = v0;\n
                            v446[8 * v438] = v3;\n
                            v446[1 + 8 * v438] = v4;\n
                            v446[2 + 8 * v438] = v437;\n
                            v446[3 + 8 * v438] = v442;\n
                            *(&v446[7 + 8 * v438]) = (!tmp_8 ? 100 : 0);\n
                            v0 = v438 + 1;\n
                        }\n
                        v309 = v5;\n
                        if (v14 < 16)\n
                            goto LABEL_4092e0;\n
                    }\n
                    v448 = v11;\n
                    if (v448 < 2)\n
                        goto LABEL_4092e0;\n
                    v449 = (v309 CONCAT v440) * &g_800000 >> 32;\n
                    v450 = v13;\n
                    v451 = v440;\n
                    v452 = v450 - 2;\n
                    v453 = v449 & v18;\n
                    v2 = !(v450 - 2 < 8);\n
                    v454 = v453 | v309 / 0x200 & v15;\n
                    v439 = v448 - 2;\n
                    if (!v454)\n
                    {\n
                        v1 = v451;\n
                        if (v452 <= 7)\n
                        {\n
                            v455 = v439;\n
                            v456 = v439 + (v452 * 8);\n
                            v457 = (0 CONCAT 1) << (v456 & 31) >> 32;\n
                            v438 = 1 << (v456 & 31);\n
                            if ((v456 & 32))\n
                                v457 = v438;\n
                            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                v438 = 0;\n
                            if (!(v438 & v10) && !(v457 & v9))\n
                            {\n
                                tmp_8 = v457 & v8 | v438 & v7;\n
                                v458 = v6;\n
                                v438 = v0;\n
                                v458[8 * v438] = v3;\n
                                v458[1 + 8 * v438] = v4;\n
                                v458[2 + 8 * v438] = v452;\n
                                v458[3 + 8 * v438] = v455;\n
                                *(&v458[7 + 8 * v438]) = (!tmp_8 ? 100 : 0);\n
                                v0 = v438 + 1;\n
                            }\n
                        }\n
                        if (v14 < 24)\n
                            goto LABEL_4092e0;\n
                        v460 = v11;\n
                        if (v460 < 3)\n
                            goto LABEL_4092e0;\n
                        v461 = v13;\n
                        v452 = v461 - 3;\n
                        v462 = v15;\n
                        v2 = !(v461 - 3 < 8);\n
                        v439 = v460 - 3;\n
                        if (!((v309 CONCAT v1) << 14 >> 32 & v18) && !(v309 >> 18 & v15))\n
                        {\n
                            if (v452 > 7)\n
                            {\n
                                v463 = v1;\n
                            }\n
                            else\n
                            {\n
                                v464 = v439;\n
                                v465 = v439 + (v452 * 8);\n
                                v466 = (0 CONCAT 1) << (v465 & 31) >> 32;\n
                                v467 = 1 << (v465 & 31);\n
                                if ((v465 & 32))\n
                                    v466 = v467;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v467 = 0;\n
                                if (!(v467 & v10) && !(v466 & v9))\n
                                {\n
                                    tmp_8 = v466 & v8 | v467 & v7;\n
                                    v468 = v6;\n
                                    v469 = v0;\n
                                    v468[8 * v469] = v3;\n
                                    v468[1 + 8 * v469] = v4;\n
                                    v468[2 + 8 * v469] = v452;\n
                                    v468[3 + 8 * v469] = v464;\n
                                    *(&v468[7 + 8 * v469]) = (!tmp_8 ? 100 : 0);\n
                                    v0 = v469 + 1;\n
                                }\n
                                v463 = v1;\n
                                v462 = v15;\n
                            }\n
                            if (v14 < 32)\n
                                goto LABEL_4092e0;\n
                            v471 = v11;\n
                            if (v471 < 4)\n
                                goto LABEL_4092e0;\n
                            v472 = v462 & v309 / 0x8000000;\n
                            v438 = v13 - 4;\n
                            tmp_27 = (v309 CONCAT v463) >> 27 & v18 | v472;\n
                            v473 = v471 - 4;\n
                            if (tmp_27)\n
                            {\n
                                v2 = !(v438 < 8);\n
                                v12 = v438;\n
                                v439 = v473;\n
                                *(&v438) = v4;\n
                                goto LABEL_408838;\n
                            }\n
                            if (v12 <= 7)\n
                            {\n
                                v474 = v12;\n
                                v438 = v473;\n
                                v475 = v473 + (v474 * 8);\n
                                v476 = (0 CONCAT 1) << (v475 & 31) >> 32;\n
                                v477 = 1 << (v475 & 31);\n
                                if ((v475 & 32))\n
                                    v476 = v477;\n
                                if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                    v477 = 0;\n
                                if (!(v477 & v10) && !(v476 & v9))\n
                                {\n
                                    tmp_8 = v476 & v8 | v477 & v7;\n
                                    v478 = v6;\n
                                    v479 = v0;\n
                                    v478[8 * v479] = v3;\n
                                    v478[1 + 8 * v479] = v4;\n
                                    v478[2 + 8 * v479] = v474;\n
                                    v478[3 + 8 * v479] = v438;\n
                                    *(&v478[7 + 8 * v479]) = (!tmp_8 ? 100 : 0);\n
                                    v0 = v479 + 1;\n
                                }\n
                                v309 = v5;\n
                            }\n
                            if (v14 < 40)\n
                                goto LABEL_4092e0;\n
                            v481 = v11;\n
                            if (v481 < 5)\n
                                goto LABEL_4092e0;\n
                            v482 = v13 - 5;\n
                            v439 = v481 - 5;\n
                            v2 = !(v482 < 8);\n
                            if (!(v309 >> 4 & v18))\n
                            {\n
                                if (v482 > 7)\n
                                {\n
                                    *(&v438) = v3;\n
                                }\n
                                else\n
                                {\n
                                    v483 = v439;\n
                                    v484 = v439 + (v482 * 8);\n
                                    v485 = (0 CONCAT 1) << (v484 & 31) >> 32;\n
                                    v486 = 1 << (v484 & 31);\n
                                    if ((v484 & 32))\n
                                        v485 = v486;\n
                                    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                        v486 = 0;\n
                                    if (!(!(v486 & v10)) || !(!(v485 & v9)))\n
                                    {\n
                                        v438 = v3;\n
                                    }\n
                                    else\n
                                    {\n
                                        tmp_8 = v485 & v8 | v486 & v7;\n
                                        v487 = v6;\n
                                        v488 = v0;\n
                                        v487[8 * v488] = v3;\n
                                        v487[1 + 8 * v488] = v4;\n
                                        v487[2 + 8 * v488] = v482;\n
                                        v487[3 + 8 * v488] = v483;\n
                                        v438 = v3;\n
                                        *(&v487[7 + 8 * v488]) = (!tmp_8 ? 100 : 0);\n
                                        v0 = v488 + 1;\n
                                    }\n
                                    v309 = v5;\n
                                }\n
                                if (v14 < 48)\n
                                    goto LABEL_4092e0;\n
                                v490 = v11;\n
                                if (v490 < 6)\n
                                    goto LABEL_4092e0;\n
                                v482 = v13 - 6;\n
                                v439 = v490 - 6;\n
                                v2 = !(v482 < 8);\n
                                if (!(v309 >> 13 & v18))\n
                                {\n
                                    if (v482 <= 7)\n
                                    {\n
                                        v491 = v439;\n
                                        v492 = v439 + (v482 * 8);\n
                                        v493 = (0 CONCAT 1) << (v492 & 31) >> 32;\n
                                        v494 = 1 << (v492 & 31);\n
                                        if ((v492 & 32))\n
                                            v493 = v494;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v494 = 0;\n
                                        if (!(!(!(v494 & v10)) || !(!(v493 & v9))))\n
                                        {\n
                                            tmp_8 = v493 & v8 | v494 & v7;\n
                                            v495 = v6;\n
                                            v496 = v0;\n
                                            v495[8 * v496] = v438;\n
                                            v495[1 + 8 * v496] = v4;\n
                                            v495[2 + 8 * v496] = v482;\n
                                            v495[3 + 8 * v496] = v216;\n
                                            *(&v495[7 + 8 * v496]) = (!tmp_8 ? 100 : 0);\n
                                            v0 = v496 + 1;\n
                                        }\n
                                        v309 = v5;\n
                                    }\n
                                    if (v14 < 56)\n
                                        goto LABEL_4092e0;\n
                                    if (v11 < 7)\n
                                        goto LABEL_4092e0;\n
                                    v498 = v13 - 7;\n
                                    v499 = v11 - 7;\n
                                    v309 /= &g_400000;\n
                                    if ((v309 & v18))\n
                                    {\n
                                        v2 = !(v498 < 8);\n
                                        v439 = v499;\n
                                        v12 = v498;\n
                                        *(&v438) = v4;\n
                                    }\n
                                    else if (v498 <= 7)\n
                                    {\n
                                        v501 = (v498 * 8) + v499;\n
                                        v502 = (0 CONCAT 1) << (v501 & 31) >> 32;\n
                                        v503 = 1 << (v501 & 31);\n
                                        if ((v501 & 32))\n
                                            v502 = v503;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v503 = 0;\n
                                        v309 = v503 & v10 | v502 & v9;\n
                                        if (!v309)\n
                                        {\n
                                            tmp_8 = v502 & v8 | v503 & v7;\n
                                            v508 = v6;\n
                                            v509 = v0;\n
                                            v508[8 * v509] = v3;\n
                                            v508[1 + 8 * v509] = v4;\n
                                            v508[2 + 8 * v509] = v498;\n
                                            v508[3 + 8 * v509] = v216;\n
                                            *(&v508[7 + 8 * v509]) = (!tmp_8 ? 100 : 0);\n
                                            v0 = v509 + 1;\n
                                            goto LABEL_4092e0;\n
                                        }\n
                                    }\n
LABEL_408838:\n
                                    if (!v2)\n
                                    {\n
                                        v504 = v439;\n
                                        v505 = v439 + (v12 * 8);\n
                                        v506 = (0 CONCAT 1) << (v505 & 31) >> 32;\n
                                        v507 = 1 << (v505 & 31);\n
                                        if ((v505 & 32))\n
                                            v506 = v507;\n
                                        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                                            v507 = 0;\n
                                        v309 = v507 & v10 | v506 & v9;\n
                                        if (!v309 && (!(!(v507 & v7)) || !(!(v506 & v8))))\n
                                        {\n
                                            v511 = v6;\n
                                            v512 = v0;\n
                                            v511[8 * v512] = v3;\n
                                            v511[1 + 8 * v512] = v438;\n
                                            v511[2 + 8 * v512] = v12;\n
                                            v511[3 + 8 * v512] = v216;\n
                                            v511[7 + 8 * v512] = 100;\n
                                            v0 = v512 + 1;\n
                                            goto LABEL_4092e0;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                            v12 = v482;\n
                            *(&v438) = v4;\n
                            goto LABEL_408838;\n
                        }\n
                    }\n
                    v12 = v452;\n
                    *(&v438) = v4;\n
                    goto LABEL_408838;\n
                }\n
            }\n
            v310 = v14;\n
        } while (v310 < 63);\n
    }\n
    v515 = v16;\n
    v516 = v21;\n
    v517 = v515[1 + 24 + 2 * v516];\n
    if (!(ExpCmpNE(v517, 0)))\n
    {\n
        tmp_8 = UnaryOp Ctz;\n
        v518 = (ExpCmpNE(v517, 0) ? tmp_8 : v308);\n
    }\n
    else\n
    {\n
        tmp_8 = UnaryOp Ctz;\n
        v518 = (ExpCmpNE(v517, 0) ? tmp_8 : v308);\n
    }\n
    if (!(ExpCmpNE(v515[1 + 25 + 2 * v516], 0)))\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v519 = (ExpCmpNE(v515[1 + 25 + 2 * v516], 0) ? tmp_14 : v515);\n
    }\n
    else\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v519 = (ExpCmpNE(v515[1 + 25 + 2 * v516], 0) ? tmp_14 : v515);\n
    }\n
    v520 = v519 + 32;\n
    if (v517)\n
        v520 = v518;\n
    v521 = v520 / 8;\n
    v522 = v520 & 7;\n
    v523 = v522 - 1;\n
    *(&v1) = v521;\n
    v2 = v522;\n
    if (v520 >= 8)\n
    {\n
        v5 = v521 - 1;\n
        v524 = v5 * 8;\n
        v3 = v524;\n
        v4 = v523;\n
        if (v522)\n
        {\n
            v525 = v524 + v523;\n
            v526 = (0 CONCAT 1) << (v525 & 31) >> 32;\n
            v527 = 1 << (v525 & 31);\n
            if ((v525 & 32))\n
                v526 = v527;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v527 = 0;\n
            if (!(v527 & v10) && !(v526 & v9))\n
            {\n
                if (!(!(v526 & v8)) || !(!(v527 & v7)))\n
                    v528 = 100;\n
                else\n
                    v528 = 0;\n
                v529 = v6;\n
                v530 = v0;\n
                v529[8 * v530] = v1;\n
                v522 = v2;\n
                v529[1 + 8 * v530] = v522;\n
                v529[2 + 8 * v530] = v5;\n
                v529[3 + 8 * v530] = v4;\n
                v529[7 + 8 * v530] = v528;\n
                v0 = v530 + 1;\n
            }\n
            v524 = v3;\n
        }\n
        v531 = v524 | v522;\n
        v532 = (0 CONCAT 1) << (v531 & 31) >> 32;\n
        v533 = 1 << (v531 & 31);\n
        if ((v531 & 32))\n
            v532 = v533;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v533 = 0;\n
        if (!(!(v533 & v10)) || !(!(v532 & v9)))\n
        {\n
            v523 = 6;\n
            v534 = v3;\n
            if (v522 == 7)\n
                goto LABEL_40956a;\n
        }\n
        else\n
        {\n
            v535 = (!(v532 & v8) && !(v533 & v7) ? 100 : 0);\n
            v536 = v6;\n
            v537 = v0;\n
            v536[8 * v537] = v1;\n
            v522 = v2;\n
            v536[1 + 8 * v537] = v522;\n
            v536[2 + 8 * v537] = v5;\n
            v536[3 + 8 * v537] = v522;\n
            v536[7 + 8 * v537] = v535;\n
            v0 = v537 + 1;\n
            v523 = 6;\n
            v534 = v3;\n
            if (v522 == 7)\n
                goto LABEL_40956a;\n
        }\n
        v538 = v522 + 1;\n
        v539 = v534 + v538;\n
        v540 = (0 CONCAT 1) << (v539 & 31) >> 32;\n
        v541 = 1 << (v539 & 31);\n
        if ((v539 & 32))\n
            v540 = v541;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v541 = 0;\n
        v521 = v540 & v9;\n
        if (!(v541 & v10) && !v521)\n
        {\n
            v542 = v6;\n
            v3 = v538;\n
            v543 = v0;\n
            v542[8 * v543] = v1;\n
            v542[1 + 8 * v543] = v522;\n
            v542[2 + 8 * v543] = v5;\n
            v544 = v541 & v7;\n
            v542[3 + 8 * v543] = v3;\n
            v521 = (!(v540 & v8) && !v544 ? 100 : 0);\n
            v542[7 + 8 * v543] = v521;\n
            v0 = v543 + 1;\n
        }\n
        v523 = v4;\n
    }\n
    if (!v522)\n
    {\n
        v545 = v520 & 56;\n
        *(&v521) = 1;\n
        v4 = v521;\n
        v3 = -1;\n
        v549 = 1;\n
        goto LABEL_40963d;\n
    }\n
LABEL_40956a:\n
    v3 = v523;\n
    v545 = v520 & 56;\n
    v546 = v523 + v545;\n
    v547 = (0 CONCAT 1) << (v546 & 31) >> 32;\n
    v548 = 1 << (v546 & 31);\n
    if ((v546 & 32))\n
        v547 = v548;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v548 = 0;\n
    v550 = v547 & v9;\n
    if (!(!(v548 & v10)) || !(!v550))\n
    {\n
        if (!(v522 == 7))\n
            goto LABEL_409632;\n
        goto LABEL_4095a4;\n
    }\n
    else\n
    {\n
        v550 = (!(v547 & v8) && !(v548 & v7) ? 100 : 0);\n
        v551 = v6;\n
        v552 = v0;\n
        v553 = v1;\n
        v551[8 * v552] = v553;\n
        v551[1 + 8 * v552] = v2;\n
        v551[2 + 8 * v552] = v553;\n
        v522 = v2;\n
        v551[3 + 8 * v552] = v3;\n
        v551[7 + 8 * v552] = v550;\n
        v0 = v552 + 1;\n
        if (v522 == 7)\n
        {\n
LABEL_4095a4:\n
            v554 = v1;\n
            v555 = v3;\n
            if (v554 == 7)\n
                goto LABEL_409865;\n
            v556 = v554 + 1;\n
            v5 = 8;\n
            *(&v550) = 1;\n
            v4 = v550;\n
            goto LABEL_4096fe;\n
        }\n
        else\n
        {\n
LABEL_409632:\n
            v549 = v522 + 1;\n
            v4 = 0;\n
LABEL_40963d:\n
            v557 = v545 + v549;\n
            v558 = (0 CONCAT 1) << (v104 & 31) >> 32;\n
            v559 = 1 << (v104 & 31);\n
            if ((v557 & 32))\n
                v558 = v559;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v559 = 0;\n
            v5 = v549;\n
            if (!(!(v559 & v10)) || !(!(v558 & v9)))\n
            {\n
                v560 = v1;\n
                v555 = v3;\n
                if (v560 == 7)\n
                    goto LABEL_409865;\n
            }\n
            else\n
            {\n
                if (!(!(v558 & v8)) || !(!(v559 & v7)))\n
                    v561 = 100;\n
                else\n
                    v561 = 0;\n
                v562 = v6;\n
                v563 = v549;\n
                v564 = v0;\n
                v560 = v1;\n
                v562[8 * v564] = v560;\n
                v562[1 + 8 * v564] = v2;\n
                v562[2 + 8 * v564] = v560;\n
                v562[3 + 8 * v564] = v563;\n
                v562[7 + 8 * v564] = v104;\n
                v0 = v564 + 1;\n
                v555 = v3;\n
                if (v560 == 7)\n
                    goto LABEL_409865;\n
            }\n
            v556 = v560 + 1;\n
            if (!v4)\n
            {\n
                v4 = 0;\n
                v522 = v2;\n
            }\n
            else\n
            {\n
                v3 = v556;\n
                v565 = v556 * 8;\n
                v4 = 0;\n
                v522 = v2;\n
                goto LABEL_409778;\n
            }\n
LABEL_4096fe:\n
            v566 = v555 + v556 * 8;\n
            v567 = (0 CONCAT 1) << (v566 & 31) >> 32;\n
            v568 = 1 << (v566 & 31);\n
            if ((v566 & 32))\n
                v567 = v568;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v568 = 0;\n
            v569 = v556;\n
            v565 = v556 * 8;\n
            v3 = v569;\n
            if (!(v568 & v10) && !(v567 & v9))\n
            {\n
                tmp_8 = v567 & v8 | v568 & v7;\n
                v570 = v555;\n
                v571 = v565;\n
                v572 = v6;\n
                v573 = v0;\n
                v572[8 * v573] = v1;\n
                v572[1 + 8 * v573] = v522;\n
                v572[2 + 8 * v573] = v3;\n
                v572[3 + 8 * v573] = v216;\n
                *(&v572[7 + 8 * v573]) = (!tmp_8 ? 100 : 0);\n
                v565 = v571;\n
                v0 = v573 + 1;\n
            }\n
LABEL_409778:\n
            v575 = v104 | v522;\n
            v576 = (0 CONCAT 1) << (v575 & 31) >> 32;\n
            v577 = 1 << (v575 & 31);\n
            if ((v575 & 32))\n
                v576 = v577;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v577 = 0;\n
            if (!(!(!(v577 & v10)) || !(!(v576 & v9))))\n
            {\n
                v578 = (!(v576 & v8) && !(v577 & v7) ? 100 : 0);\n
                v579 = v6;\n
                v580 = v0;\n
                v579[8 * v580] = v1;\n
                v522 = v2;\n
                v579[1 + 8 * v580] = v522;\n
                v579[2 + 8 * v580] = v3;\n
                v579[3 + 8 * v580] = v522;\n
                v579[7 + 8 * v580] = v578;\n
                v0 = v580 + 1;\n
                if (!(!v4))\n
                    goto LABEL_409865;\n
            }\n
            else if (!(!v4))\n
            {\n
                goto LABEL_409865;\n
            }\n
            v581 = v5;\n
            v582 = v104 + v581;\n
            v583 = (0 CONCAT 1) << (v104 & 31) >> 32;\n
            v584 = 1 << (v104 & 31);\n
            if ((v582 & 32))\n
                v583 = v584;\n
            if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (al<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
                v584 = 0;\n
            if (!(v10 & v584) && !(v9 & v583))\n
            {\n
                v585 = v6;\n
                v586 = v0;\n
                *((v585 + v0 * 8)) = v1;\n
                *((v585 + v0 * 8 + 1)) = v522;\n
                *((v585 + v0 * 8 + 2)) = v3;\n
                v587 = v583 & v8 | v584 & v7;\n
                *((v585 + v0 * 8 + 3)) = v581;\n
                *((v585 + v586 * 8 + 7)) = (!v587 ? 100 : 0);\n
                v0 = v586 + 1;\n
            }\n
        }\n
    }\n
LABEL_409865:\n
    *(v23) = v0;\n
    return v23;\n
}\n
", "4222695:sub_406ee7": null, "4224517:sub_407605": null, "4224682:sub_4076aa": null, "4224849:sub_407751": null, "4224881:sub_407771": null, "4226492:sub_407dbc": null, "4226594:sub_407e22": null, "4226802:sub_407ef2": null, "4226825:sub_407f09": null, "4227246:sub_4080ae": null, "4228371:sub_408513": null, "4228646:sub_408626": null, "4233334:sub_409876": null, "4233344:cgc_quiesce": "typedef struct struct_1 {\n
    char padding_0[304];\n
    unsigned int field_130;\n
} struct_1;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *engine;\n
\n
int cgc_quiesce(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3[178];  // [bp-0x3c]\n
    struct_1 *v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    unsigned int v6;  // [bp-0x30]\n
    unsigned int *v7;  // [bp-0x2c]\n
    void* v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x24]\n
    unsigned int v10;  // [bp-0x20]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    unsigned int v14;  // edx\n
    unsigned int v15[178];  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // eax\n
    unsigned int v26;  // edx\n
    unsigned int v28;  // edx\n
    unsigned int v29;  // eax\n
    unsigned int v30[178];  // ecx\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // ebp\n
    unsigned int v34;  // ebx\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ebx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // edx\n
    unsigned int v40[178];  // esi\n
    unsigned int v42;  // ebp\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // ebx\n
    unsigned int v45;  // edx\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // eax\n
    unsigned int v48;  // edi\n
    void* v50;  // ebx\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // edx\n
    unsigned int v53[178];  // eax\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ebp\n
    unsigned int v56;  // eax\n
    unsigned int v57;  // ecx\n
    unsigned int v58;  // edx\n
    unsigned int v59;  // ebx\n
    unsigned int v60;  // edx\n
    unsigned int v61;  // ebp\n
    unsigned int v62;  // eax\n
\n
    v2 = v14;\n
    v8 = 0;\n
    v15 = engine;\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = v16;\n
    v7 = v16 * 0x800 + engine->field_264;\n
    v1 = v15[1] - v15[2];\n
    v17 = cgc_calculate_attacks();\n
    v3[0] = engine;\n
    v18 = engine->field_2bc;\n
    v19 = ~(v18) & &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v20 = v18 & &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v21 = engine->field_2b8;\n
    v22 = ~(v21) & v17;\n
    v23 = v21 & v17;\n
    v24 = (((((v17 & 0x7e000000) - ((v17 & 0x7e000000) / 2 & 0x15000000) >> 2 & 0x33000000) + ((v17 & 0x7e000000) - ((v17 & 0x7e000000) / 2 & 0x15000000) & 0x33000000) >> 4) + ((v17 & 0x7e000000) - ((v17 & 0x7e000000) / 2 & 0x15000000) >> 2 & 0x33000000) + ((v17 & 0x7e000000) - ((v17 & 0x7e000000) / 2 & 0x15000000) & 0x33000000) & 252645135) * 16843009 >> 24) + (2 * 16843009 >> 24) + v1;\n
    v1 = ((((v22 - (v22 >> 1 & 1431655765) >> 2 & 858993459) + (v22 - (v22 >> 1 & 1431655765) & 858993459) >> 4) + (v22 - (v22 >> 1 & 1431655765) >> 2 & 858993459) + (v22 - (v22 >> 1 & 1431655765) & 858993459) & 252645135) * 16843009 >> 24) + ((((v19 - (v19 >> 1 & 1431655765) >> 2 & 858993459) + (v19 - (v19 >> 1 & 1431655765) & 858993459) >> 4) + (v19 - (v19 >> 1 & 1431655765) >> 2 & 858993459) + (v19 - (v19 >> 1 & 1431655765) & 858993459) & 252645135) * 16843009 >> 24);\n
    v26 = v23 - (v23 / 2 & 1431655765);\n
    v28 = v26 / 4 & 858993459;\n
    v5 = (((v28 + (v26 & 858993459) >> 4) + v28 + (v26 & 858993459) & 252645135) * 16843009 >> 24) + ((((v20 - (v20 >> 1 & 1431655765) >> 2 & 858993459) + (v20 - (v20 >> 1 & 1431655765) & 858993459) >> 4) + (v20 - (v20 >> 1 & 1431655765) >> 2 & 858993459) + (v20 - (v20 >> 1 & 1431655765) & 858993459) & 252645135) * 16843009 >> 24) + v24;\n
    v29 = cgc_calculate_attacks();\n
    v30 = v3;\n
    v31 = ~(v30[177]) & v28;\n
    v32 = v30[177] & v28;\n
    v34 = v30[176];\n
    v35 = ~(v34) & v29;\n
    v36 = v34 & v29;\n
    v37 = (((((v29 & 0x7e000000) - ((v29 & 0x7e000000) / 2 & 0x15000000) >> 2 & 0x33000000) + ((v29 & 0x7e000000) - ((v29 & 0x7e000000) / 2 & 0x15000000) & 0x33000000) >> 4) + ((v29 & 0x7e000000) - ((v29 & 0x7e000000) / 2 & 0x15000000) >> 2 & 0x33000000) + ((v29 & 0x7e000000) - ((v29 & 0x7e000000) / 2 & 0x15000000) & 0x33000000) & 252645135) * 16843009 >> 24) + (((((v28 & 126) - ((v28 & 126) / 2 & 21) >> 2 & 858993459) + ((v28 & 126) - ((v28 & 126) / 2 & 21) & 858993459) >> 4) + ((v28 & 126) - ((v28 & 126) / 2 & 21) >> 2 & 858993459) + ((v28 & 126) - ((v28 & 126) / 2 & 21) & 858993459) & 252645135) * 16843009 >> 24);\n
    v38 = (v31 - (v31 >> 1 & 1431655765) >> 2 & 858993459) + (v31 - (v31 >> 1 & 1431655765) & 858993459);\n
    v39 = (v35 - (v35 >> 1 & 1431655765) >> 2 & 858993459) + (v35 - (v35 >> 1 & 1431655765) & 858993459);\n
    v40 = v3;\n
    v42 = (v32 - (v32 >> 1 & 1431655765) >> 2 & 858993459) + (v32 - (v32 >> 1 & 1431655765) & 858993459);\n
    v43 = (v36 - (v36 >> 1 & 1431655765) >> 2 & 858993459) + (v36 - (v36 >> 1 & 1431655765) & 858993459);\n
    v44 = v5 - ((((v43 >> 4) + v43 & 252645135) * 16843009 >> 24) + (((v42 >> 4) + v42 & 252645135) * 16843009 >> 24) + v37);\n
    v45 = v2;\n
    v46 = v13;\n
    v47 = v44 + (v1 - ((((v39 >> 4) + v39 & 252645135) * 16843009 >> 24) + (((v38 >> 4) + v38 & 252645135) * 16843009 >> 24))) * 2;\n
    v48 = -(v47);\n
    if (v40[3] != 1)\n
        v48 = v47;\n
    if (v48 > v45)\n
        v45 = v48;\n
    if (v45 >= v46)\n
    {\n
        v1 = v46;\n
        return v1;\n
    }\n
    v1 = v48;\n
    v2 = v45;\n
    v50 = 0;\n
    v51 = v6;\n
    if (v51 > 7)\n
        return v1;\n
    *(&v50) = !v40[3];\n
    v52 = v45 & *((700 + &v40[0] + 0x8 * v50));\n
    v53 = cgc_calculate_attacks() & *((696 + &v40[0] + 0x8 * v50));\n
    if (!v3 && !v5)\n
        return v1;\n
    v5 = v52;\n
    v3[0] = v53;\n
    cgc_generate_moves();\n
    v12 = v8;\n
    if (!v12)\n
        return v1;\n
    v6 = v51 + 1;\n
    v11 = -(v13);\n
    v54 = 0;\n
    v55 = v2;\n
    while (true)\n
    {\n
        v56 = v7[2 * v54];\n
        v57 = (v56 >> 24) + (v56 * 0x100 >> 21 & -8);\n
        v58 = (0 CONCAT 1) << (v57 & 31) >> 32;\n
        v59 = 1 << (v57 & 31);\n
        if ((v57 & 32))\n
            v58 = v59;\n
        if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (cl<1> & 0x20<8>)), 0x0<32>, 0x0<32>))\n
            v59 = 0;\n
        v60 = v58 & v5;\n
        v10 = v7[1 + 2 * v54];\n
        v9 = v56;\n
        if (!(!(v59 & v3)) || !(!v60))\n
        {\n
            if ((*((v4->field_130 + v57 + 624)) & 15) == 5)\n
            {\n
                v1 = 10000000;\n
                return v1;\n
            }\n
            v0 = v10;\n
            cgc_apply_move(v9);\n
            v2 = v55;\n
            v61 = -(cgc_quiesce(-(v55)));\n
            cgc_undo_move();\n
            v62 = v1;\n
            if (v62 < v61)\n
                v62 = v61;\n
            v55 = v2;\n
            v1 = v62;\n
            if (v62 > v2)\n
                v55 = v62;\n
            if (v55 >= v13)\n
            {\n
                v1 = v55;\n
                return v1;\n
            }\n
        }\n
        v54 += 1;\n
        if (v12 == v54)\n
            return v1;\n
    }\n
}\n
", "4234361:sub_409c79": null, "4234629:sub_409d85": null, "4234640:cgc_init_states": "extern char g_4101e2;\n
extern char g_4113c4;\n
extern char g_41143f;\n
extern char g_4114ca;\n
extern char g_4115c7;\n
extern char g_411647;\n
extern unsigned int g_411909;\n
extern unsigned int g_41190d;\n
extern unsigned int g_411989;\n
extern unsigned int g_41198d;\n
extern char g_4119bd;\n
extern unsigned int g_411a09;\n
extern unsigned int g_411a0d;\n
extern unsigned int g_411a89;\n
extern unsigned int g_411a8d;\n
extern unsigned int g_411b09;\n
extern unsigned int g_411b0d;\n
extern char g_411b4d;\n
extern unsigned int g_411b89;\n
extern unsigned int g_411b8d;\n
extern char g_411bb9;\n
extern char g_411bbd;\n
extern unsigned int g_411c09;\n
extern unsigned int g_411c0d;\n
extern char g_411c3c;\n
extern unsigned int g_411c89;\n
extern unsigned int g_411c8d;\n
extern char g_411d46;\n
extern char g_411e40;\n
extern char input_states[8];\n
\n
int cgc_init_states()\n
{\n
    g_411909 = 33686018;\n
    g_41190d = 33686018;\n
    g_411989 = 33686018;\n
    g_41198d = 33686018;\n
    g_411a09 = 33686018;\n
    g_411a0d = 33686018;\n
    g_411a89 = 33686018;\n
    g_411a8d = 33686018;\n
    g_411b09 = 33686018;\n
    g_411b0d = 33686018;\n
    g_411b89 = 33686018;\n
    g_411b8d = 33686018;\n
    g_411c09 = 33686018;\n
    g_411c0d = 33686018;\n
    g_411c89 = 33686018;\n
    g_411c8d = 33686018;\n
    g_4113c4 = 6;\n
    g_41143f = 10;\n
    g_4114ca = 17;\n
    g_4115c7 = 20;\n
    g_411647 = 24;\n
    g_4119bd = 25;\n
    g_411b4d = 27;\n
    g_411bb9 = 30;\n
    g_411bbd = 43;\n
    g_411c3c = 35;\n
    g_411d46 = 36;\n
    g_411e40 = 39;\n
    g_4101e2 = 52;\n
    return cgc_memset(&input_states[0], 1, 0x4000);\n
}\n
", "4234937:sub_409eb9": null, "4234944:cgc_read_all": "int cgc_read_all(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v3 = a0;\n
    do\n
    {\n
        do\n
        {\n
            if (!v3)\n
                return 1;\n
            v0 = &v1;\n
            tmp_21 = cgc_receive(0, v2, v3);\n
            v4 = *(&v1);\n
            v3 -= v4;\n
        } while ((!v4 | tmp_21) != 1);\n
    } while (v4);\n
    return 0;\n
}\n
", "4235037:sub_409f1d": null, "4235040:cgc_write_string": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_write_string(unsigned int v3)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // esi\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v6 = v3;\n
    v0 = &v1;\n
    return cgc_transmit(1, v6, cgc_strlen(v6));\n
}\n
", "4235089:sub_409f51": null, "4235104:cgc_send_move": "int cgc_send_move()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp+0x4]\n
    char v3;  // [bp+0x8]\n
    char v4[11];  // eax\n
    char v5[11];  // esi\n
\n
    v4 = cgc_malloc(32);\n
    if (v4)\n
    {\n
        v5 = v4;\n
        cgc_strcpy(v4, \"move \");\n
        v4[5] = *(&v2 + 1) + 109;\n
        v4[6] = v2 + 49;\n
        v4[7] = *(&v2 + 3) + 109;\n
        v4[8] = *(&v2 + 2) + 49;\n
        *(&v5[9]) = ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Load(addr=stack_base+8, size=1, endness=Iend_LE) - 0x1<8>)), 0x4<32>, 0x0<32>) ? 0 : (1903321707 >> ((v3 - 1) * 8 & 31)));\n
        v5[10] = 0;\n
        cgc_strcat(v5, \"\\n
\");\n
        v0 = &v1;\n
        cgc_transmit(1, v5, cgc_strlen(v5));\n
        cgc_free(v5);\n
        return;\n
    }\n
    return;\n
}\n
", "4235297:sub_40a021": null, "4235312:cgc_send_result": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_result(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
\n
    v1 = v3;\n
    v4 = v2;\n
    switch (v4)\n
    {\n
    case 0:\n
        v5 = \"1-0\\n
\";\n
        break;\n
    case 1:\n
        v5 = \"0-1\\n
\";\n
        break;\n
    case 2:\n
        v5 = \"1/2-1/2\\n
\";\n
        break;\n
    case 3:\n
        v5 = \"*\";\n
        break;\n
    default:\n
        return v2;\n
    }\n
    v0 = &v1;\n
    v4 = cgc_transmit(1, v5, cgc_strlen(v5));\n
    return v4;\n
}\n
", "4235419:sub_40a09b": null, "4235424:cgc_send_draw": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_draw()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v0 = &v1;\n
    return cgc_transmit(1, \"offer draw\\n
\", cgc_strlen(\"offer draw\\n
\"));\n
}\n
", "4235475:sub_40a0d3": null, "4235488:cgc_send_resign": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_resign()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v0 = &v1;\n
    return cgc_transmit(1, \"resign\\n
\", cgc_strlen(\"resign\\n
\"));\n
}\n
", "4235539:sub_40a113": null, "4235552:cgc_send_illegal": "int cgc_send_illegal()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x1b]\n
    char v3;  // [bp-0x1a]\n
    char v4;  // [bp-0x19]\n
    char v5;  // [bp-0x18]\n
    char v6;  // [bp-0x17]\n
    char v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp+0x4]\n
    char v9;  // [bp+0x8]\n
    char v10;  // [bp+0x9]\n
    char v11;  // [bp+0xa]\n
    char v12;  // [bp+0xb]\n
    char v13;  // [bp+0xc]\n
    unsigned int v14;  // edi\n
\n
    v14 = v8;\n
    v1 = v10 + 109;\n
    v2 = v9 + 49;\n
    v3 = v12 + 109;\n
    v4 = v11 + 49;\n
    *(&v5) = ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Load(addr=stack_base+12, size=1, endness=Iend_LE) - 0x1<8>)), 0x4<32>, 0x0<32>) ? 0 : (1903321707 >> ((v13 - 1) * 8 & 31)));\n
    v6 = 0;\n
    v0 = &v7;\n
    cgc_transmit(1, \"Illegal move (\", cgc_strlen(\"Illegal move (\"));\n
    v0 = &v7;\n
    cgc_transmit(1, v14, cgc_strlen(v14));\n
    v0 = &v7;\n
    cgc_transmit(1, \"): \", cgc_strlen(\"): \"));\n
    v0 = &v7;\n
    cgc_transmit(1, &v1, cgc_strlen(&v1));\n
    v0 = &v7;\n
    cgc_transmit(1, \"\\n
\", cgc_strlen(\"\\n
\"));\n
    return;\n
}\n
", "4235798:sub_40a216": null, "4235808:cgc_send_error": "int cgc_send_error(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // ebp\n
    unsigned int v6;  // edi\n
\n
    v2 = v4;\n
    v5 = v3;\n
    v0 = &v1;\n
    cgc_transmit(1, \"Error (\", cgc_strlen(\"Error (\"));\n
    v0 = &v1;\n
    cgc_transmit(1, v5, cgc_strlen(v5));\n
    v0 = &v1;\n
    cgc_transmit(1, \"): \", cgc_strlen(\"): \"));\n
    v6 = a0;\n
    v0 = &v1;\n
    cgc_transmit(1, v6, cgc_strlen(v6));\n
    v0 = &v1;\n
    return cgc_transmit(1, \"\\n
\", cgc_strlen(\"\\n
\"));\n
}\n
", "4235975:sub_40a2c7": null, "4235984:cgc_sink_error": "int cgc_sink_error(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_21;  // tmp #21\n
    char v1;  // [bp-0x1a]\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // esi\n
\n
    v5 = v7;\n
    v8 = v6;\n
    v3 = cgc_strlen(v8);\n
    v0 = &v4;\n
    cgc_transmit(1, \"Error (invalid command): \", cgc_strlen(\"Error (invalid command): \"));\n
    v0 = &v4;\n
    cgc_transmit(1, v8, cgc_strlen(v8));\n
    v9 = v3;\n
    if (v9 && *((v9 + v6 - 1)) == 10)\n
        return 1;\n
    v2 = 0;\n
    v11 = 1;\n
    do\n
    {\n
        while (true)\n
        {\n
            if (v11)\n
            {\n
                v0 = &v4;\n
                tmp_21 = cgc_receive(0, &v1, v11);\n
                v10 = *(&v4);\n
                v11 -= v10;\n
                if ((!v10 | tmp_21) == 1)\n
                    break;\n
            }\n
            else\n
            {\n
                v0 = &v4;\n
                cgc_transmit(1, &v1, cgc_strlen(&v1));\n
                v11 = 1;\n
                if (v1 == 10)\n
                    return 1;\n
            }\n
        }\n
    } while (v10);\n
    return 0;\n
}\n
", "4236120:sub_40a358": null, "4236221:sub_40a3bd": null, "4236224:cgc_read_keyword": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_keyword(char v10[2], unsigned int a0, unsigned int a1, char a2[2])\n
{\n
    int tmp_21;  // tmp #21\n
    char v1[2];  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x1c], Other Possible Types: char\n
    char v6;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    unsigned int v14;  // ebp\n
    unsigned int v76;  // edi\n
    unsigned int v78;  // eax\n
    unsigned int v79;  // ecx\n
    unsigned int v80;  // eax\n
    unsigned int v81;  // ecx\n
    unsigned int v83;  // ecx\n
    char v86[2];  // ecx\n
\n
    v8 = v11;\n
    v12 = v10;\n
    cgc_memset(v12, 0, a0);\n
    v76 = 2;\n
    while (true)\n
    {\n
        if (!v76)\n
        {\n
            v78 = v12[0] * 128;\n
            v79 = v12[1];\n
            v80 = (&_GLOBAL_OFFSET_TABLE_)[308 + (v79 | v78)];\n
            if (v79 == 1)\n
                goto LABEL_0x40a78f;\n
            v79 = v80;\n
            if (&v6 == 52)\n
                return 52;\n
            v14 = v83;\n
            v86 = 2;\n
            if (*(&v5) < 3)\n
                goto LABEL_0x40a788;\n
            v81 = 2;\n
            v5 = a0 - 1;\n
        }\n
        else\n
        {\n
            v2 = &v6;\n
            *(&v1) = v12;\n
            tmp_21 = cgc_receive(0, v1, v76);\n
            v76 -= *(&v6);\n
        }\n
    }\n
}\n
", "4236549:sub_40a505": "int sub_40a505()\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!(!cgc_isdigit(v1)))\n
        goto LABEL_0x40a6d5;\n
}\n
", "4237234:sub_40a7b2": null, "4237248:cgc_str_to_move": "int cgc_str_to_move(char v0[5], char a0[5])\n
{\n
    char v1[5];  // eax\n
    char v2[5];  // edx\n
    unsigned int v3;  // esi\n
\n
    v1 = v0;\n
    v2 = a0;\n
    v1[1] = v2[0] - 109;\n
    v1[0] = v2[1] - 49;\n
    v1[3] = v2[2] - 109;\n
    v1[2] = v2[3] - 49;\n
    v3 = v2[4] - 98;\n
    switch (v3)\n
    {\n
    case 15:\n
        v1[4] = 4;\n
        return v1;\n
    case 16:\n
        v1[4] = 3;\n
        return v1;\n
    case 0:\n
        v2[0] = 2;\n
    case 9:\n
        v1[4] = v2[0];\n
        return v0;\n
    default:\n
        v1[4] = 0;\n
        return v1;\n
    }\n
}\n
", "4237367:sub_40a837": null, "4237376:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_0 g_40c4ee;\n
extern unsigned int g_40c60c;\n
extern struct_0 g_40c611;\n
extern struct_0 g_40c615;\n
extern struct_0 g_40c619;\n
extern char g_40c621;\n
extern struct_0 g_40c623;\n
\n
int main()\n
{\n
    char v0;  // [bp-0x3d]\n
    char v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    struct_0 *v6;  // [bp+0x0]\n
    struct_0 *v7;  // [bp+0x4]\n
    unsigned int v8;  // [bp+0x8]\n
    unsigned int v9;  // [bp+0xc]\n
    char v10[2];  // [bp+0x10]\n
    unsigned int v26;  // ebx\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // esi\n
    char v30;  // eax\n
    struct_0 *v36;  // edi\n
\n
    v4 = v26;\n
    v3 = v27;\n
    v2 = v28;\n
    if (!cgc_engine_init())\n
        return 1;\n
    cgc_init_states();\n
    v36 = &v0;\n
    v6 = &v1;\n
    v7 = 16;\n
    v30 = cgc_read_keyword(v7, v8, v9, v10);\n
}\n
", "4239340:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_transmit": null, "5242888:cgc_random": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}