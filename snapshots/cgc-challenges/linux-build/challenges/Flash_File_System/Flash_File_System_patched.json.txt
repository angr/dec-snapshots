{"4206592:_init": "extern struct_0 *g_411134;\n
\n
int _init()\n
{\n
    if (g_411134)\n
    {\n
        g_411134();\n
        return;\n
    }\n
    return;\n
}\n
", "4206640:sub_403030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_403030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4206656:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4206672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206688:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206704:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206720:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206736:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206752:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206768:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4206784:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4206800:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206816:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4206832:sub_4030f0": "int sub_4030f0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4206838:sub_4030f6": null, "4206848:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4206891:sub_40312b": null, "4206892:sub_40312c": "int sub_40312c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4206896:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4206900:sub_403134": null, "4206912:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 57335;\n
    v6 = v5 + 16;\n
    v7 = v5 + 16;\n
    if (v7 == v6)\n
        return v5 + 16;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4206963:sub_403173": "int sub_403173()\n
{\n
}\n
", "4206969:sub_403179": "int sub_403179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4206976:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 57271;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 16;\n
    v9 = (v6 + 16 - (v6 + 16) >> 31) + (16 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4207047:sub_4031c7": "int sub_4031c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4207056:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_411128;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_411128)\n
    {\n
        v0 = __dso_handle;\n
        sub_4030f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4207131:sub_40321b": "int sub_40321b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4207136:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207145:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4207149:sub_40322d": null, "4207152:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207206:sub_403266": null, "4207216:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207270:sub_4032a6": null, "4207280:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207334:sub_4032e6": null, "4207344:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isupper(v3) && !cgc_islower(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4207440:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isalpha(v3) && !cgc_isdigit(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4207536:cgc_isprint": "int cgc_isprint(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 32 && v1 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207590:sub_4033e6": null, "4207600:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + -32;\n
    return v0;\n
}\n
", "4207674:sub_40343a": null, "4207680:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4207754:sub_40348a": null, "4207760:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4207854:sub_4034ee": null, "4207856:_ZN5CUtil6StringC1Ev": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int CUtil::String::__ctor__(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax\n
\n
    v0 = v1;\n
    v2 = v0;\n
    v2->field_0 = operator new[](1);\n
    v2->field_0->field_0 = 0;\n
    v2->field_4 = 0;\n
    return v0;\n
}\n
", "4207921:sub_403531": null, "4207936:_ZN5CUtil6StringC1ERKS0_": "int CUtil::String::__ctor__(unsigned int v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2[2];  // ecx\n
\n
    v2 = v1;\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    v0 = a0;\n
    return CUtil::String::SetInternal(v1);\n
}\n
", "4207998:sub_40357e": null, "4208000:_ZN5CUtil6String11SetInternalERKS0_": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::SetInternal(struct_0 *v4, unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    struct_0 *v5;  // eax\n
    struct_0 *v7;  // eax\n
    struct_0 *v8;  // ecx\n
    char *v9;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v4;\n
    if (v3->field_0)\n
    {\n
        v1 = v3->field_0;\n
        if (v1)\n
            operator delete[](v1);\n
    }\n
    v5 = v3;\n
    v5->field_4 = a0[1];\n
    v7 = v3;\n
    v7->field_0 = operator new[](v5->field_4 + 1);\n
    v0 = v7->field_4;\n
    cgc_memcpy(v7->field_0, a0[0]);\n
    v8 = v3;\n
    v9 = v8->field_0;\n
    v9[v8->field_4] = 0;\n
    return v9;\n
}\n
", "4208162:sub_403622": null, "4208176:_ZN5CUtil6StringC2EPKc": "int CUtil::String::__base_ctor__(unsigned int v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2[2];  // ecx\n
\n
    v2 = v1;\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    v0 = a0;\n
    return CUtil::String::SetInternal(v1);\n
}\n
", "4208238:sub_40366e": null, "4208240:_ZN5CUtil6String11SetInternalEPKc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::SetInternal(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v4;\n
    if (*(v3))\n
    {\n
        v1 = *(v3);\n
        if (v1)\n
            operator delete[](v1);\n
    }\n
    if (!a0)\n
    {\n
        v5 = v3;\n
        *(v5) = operator new[](1);\n
        *(*(v5)) = 0;\n
        *((v5 + 4)) = 0;\n
        return v3;\n
    }\n
    v7 = v3;\n
    *((v7 + 4)) = cgc_strlen();\n
    v9 = v3;\n
    *(v9) = operator new[](*((v7 + 4)) + 1);\n
    v0 = *((v9 + 4));\n
    cgc_memcpy(*(v9), a0);\n
    v10 = v3;\n
    v5 = *(v10);\n
    *((v5 + *((v10 + 4)))) = 0;\n
    return *(v10);\n
}\n
", "4208459:sub_40374b": null, "4208464:_ZN5CUtil6StringD1Ev": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::__dtor__(unsigned int v3[2])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v3;\n
    if (v2[0])\n
    {\n
        v0 = v2[0];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4208556:sub_4037ac": null, "4208560:_ZNK5CUtil6StringeqERKS0_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::operator== const(unsigned int v4[2], unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[2];  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    unsigned int v5[2];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v4;\n
    if (v2[1] != a0[1])\n
    {\n
        v3 = 0;\n
        return v3 & 1;\n
    }\n
    v5 = v2;\n
    v0 = v5[1];\n
    v3 = !cgc_memcmp(v5[0], a0[0]);\n
    return v3 & 1;\n
}\n
", "4208675:sub_403823": null, "4208688:_ZNK5CUtil6StringneERKS0_": "int CUtil::String::operator!= const(unsigned int v0[2], unsigned int a0[2])\n
{\n
    return (CUtil::String::operator== const(v0, a0) ^ 255) & 1;\n
}\n
", "4208744:sub_403868": null, "4208752:_ZN5CUtil6StringaSERKS0_": "int CUtil::String::operator=(void* v0, unsigned int a0[2])\n
{\n
    return CUtil::String::SetInternal(v0, a0);\n
}\n
", "4208801:sub_4038a1": null, "4208816:_ZN5CUtil6StringaSEPKc": "int CUtil::String::operator=(unsigned int v0, unsigned int a0)\n
{\n
    return CUtil::String::SetInternal(v0, a0);\n
}\n
", "4208865:sub_4038e1": null, "4208880:_ZNK5CUtil6StringplERKS0_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::operator+ const(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a0;\n
    CUtil::String::__ctor__(v3, v5);\n
    v2 = CUtil::String::operator+=(v3);\n
    CUtil::String::__dtor__(v3);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4208979:sub_403953": null, "4208992:_ZN5CUtil6StringpLERKS0_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::operator+=(unsigned int v7[2], unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3[2];  // [bp-0x18]\n
    char *v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v10[2];  // eax\n
    unsigned int v11[2];  // eax\n
    unsigned int v12[2];  // eax\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3[0] = v7;\n
    v5 = v3[1] + a0[1];\n
    v10 = v3;\n
    v4 = operator new[](v5 + 1);\n
    v0 = v10[1];\n
    cgc_memcpy(v4, v10[0]);\n
    v0 = a0[1];\n
    cgc_memcpy(&v4[v3[1]], a0[0]);\n
    v11 = v3;\n
    v4[a0[1] + v11[1]] = 0;\n
    if (v11[0])\n
    {\n
        v1 = v3[0];\n
        if (v1)\n
            operator delete[](v1);\n
    }\n
    v12 = v3;\n
    v12[0] = v4;\n
    v12[1] = v5;\n
    return v3;\n
}\n
", "4209212:sub_403a3c": null, "4209216:_ZNK5CUtil6String5c_strEv": "int CUtil::String::c_str const(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4209229:sub_403a4d": null, "4209232:_ZNK5CUtil6String5UpperEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::Upper const(unsigned int *v7, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int *v2;  // [bp-0x18]\n
    struct_0 *v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v7;\n
    v2 = v1;\n
    v3 = a0;\n
    v5 = 0;\n
    CUtil::String::__ctor__(v1, v3);\n
    for (v4 = 0; v4 < v3->field_4; v4 += 1)\n
    {\n
        if (cgc_islower(v4[*(v1)]))\n
            v4[*(v1)] = cgc_toupper(v4[*(v1)]);\n
    }\n
    v5 = 1;\n
    if (!(v5 & 1))\n
        CUtil::String::__dtor__(v1);\n
    v9 = v6;\n
    return v2;\n
}\n
", "4209440:_ZNK5CUtil6String5LowerEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::Lower const(unsigned int *v7, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int *v2;  // [bp-0x18]\n
    struct_0 *v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v7;\n
    v2 = v1;\n
    v3 = a0;\n
    v5 = 0;\n
    CUtil::String::__ctor__(v1, v3);\n
    for (v4 = 0; v4 < v3->field_4; v4 += 1)\n
    {\n
        if (cgc_isupper(v4[*(v1)]))\n
            v4[*(v1)] = cgc_tolower(v4[*(v1)]);\n
    }\n
    v5 = 1;\n
    if (!(v5 & 1))\n
        CUtil::String::__dtor__(v1);\n
    v9 = v6;\n
    return v2;\n
}\n
", "4209648:_ZNK5CUtil6StringixERKm": "int CUtil::String::operator[] const(unsigned int v3[2], unsigned int *a0)\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1[2];  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1[0] = v3;\n
    v0[0] = v1;\n
    if ((CUtil::String::IsEmpty const() & 1))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*(a0) < v1[1])\n
    {\n
        v2 = *((v1[0] + *(a0)));\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4209761:sub_403c61": null, "4209776:_ZNK5CUtil6String7IsEmptyEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int CUtil::String::IsEmpty const(struct_0 *v0)\n
{\n
    return !v0->field_4;\n
}\n
", "4209799:sub_403c87": null, "4209808:_ZNK5CUtil6String4TrimEm": "int CUtil::String::Trim const(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ebx\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v4;\n
    v0 = a1;\n
    CUtil::String::SubString const(v1, a0, 0);\n
    v7 = v1;\n
    v8 = v2;\n
    return v1;\n
}\n
", "4209889:sub_403ce1": null, "4209904:_ZNK5CUtil6String9SubStringEmm": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::SubString const(unsigned int v8, unsigned int a0[2], char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1[2];  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3[2];  // [bp-0x20]\n
    char *v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x18]\n
    char *v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v9;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = v8;\n
    v2 = v1;\n
    v3[0] = a0;\n
    if (a2 > v3[1])\n
        a2 = v3[1];\n
    if (a1 < v3[1] && a1 < a2)\n
    {\n
        v7 = a2 - a1;\n
        v6 = operator new[](v7 + 1);\n
        v5 = 0;\n
        for (v4 = a1; v4 < a2; v4 += 1)\n
        {\n
            v9 = v5;\n
            v5 = v9 + 1;\n
            v6[v9] = v4[v3[0]];\n
        }\n
        v6[v5] = 0;\n
        CUtil::String::__base_ctor__(v1, v6);\n
        return v2;\n
    }\n
    CUtil::String::__base_ctor__(v1, v0 - 7057);\n
    return v2;\n
}\n
", "4210167:sub_403df7": null, "4210176:_ZNK5CUtil6String10TrimSpacesEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::TrimSpaces const(unsigned int v6, unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3[2];  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v6;\n
    v2 = v1;\n
    v3[0] = a0;\n
    for (v4 = 0; v4 < v3[1]; v4 += 1)\n
    {\n
        if (*((v3[0] + v4)) != 32)\n
            break;\n
    }\n
    CUtil::String::SubString const(v1, v3, v4, -1);\n
    return v2;\n
}\n
", "4210333:sub_403e9d": null, "4210336:_ZN5CUtil6String5ToIntERj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CUtil::String::ToInt(unsigned int v4, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    if ((CUtil::String::IsEmpty const(v1) & 1))\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    *(a0) = cgc_atoi();\n
    v2 = 1;\n
    return v2 & 1;\n
}\n
", "4210436:sub_403f04": null, "4210448:_ZNK5CUtil6String9GetLengthEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int CUtil::String::GetLength const(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4210462:sub_403f1e": null, "4210464:cgc_SetFsError": "extern char FS_ERROR;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SetFsError(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = FS_ERROR;\n
    if (!FS_ERROR)\n
    {\n
        v0 = 63;\n
        v3 = cgc_strncpy(v1 + 592, v2);\n
    }\n
    return v3;\n
}\n
", "4210543:sub_403f6f": null, "4210544:cgc_ClearFsError": "extern char FS_ERROR;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ClearFsError()\n
{\n
    FS_ERROR = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4210568:sub_403f88": null, "4210576:cgc_FsError": "extern char FS_ERROR;\n
\n
int cgc_FsError()\n
{\n
    return &FS_ERROR;\n
}\n
", "4210599:sub_403fa7": null, "4210608:cgc_DestroyFilesystem": "typedef struct struct_1 {\n
    char padding_0[68];\n
    struct struct_2 *field_44;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_DestroyFilesystem()\n
{\n
    struct_1 *v0;  // [bp-0x14]\n
    struct struct_0 **v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v0[118].padding_0[4]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v1 < v0->field_44->field_4; v1 += 1)\n
    {\n
        if (*((v0->field_44->field_8 + (v1 << 2))))\n
        {\n
            if (*(*((v0->field_44->field_8 + (v1 << 2)))))\n
            {\n
                cgc_free();\n
                *(*((v0->field_44->field_8 + v1 * 4))) = 0;\n
            }\n
            if (*((*((v0->field_44->field_8 + (v1 << 2))) + 4)))\n
            {\n
                cgc_free();\n
                *((*((v0->field_44->field_8 + v1 * 4)) + 4)) = 0;\n
            }\n
            if (*((*((v0->field_44->field_8 + (v1 << 2))) + 16)))\n
            {\n
                cgc_free();\n
                *((*((v0->field_44->field_8 + v1 * 4)) + 16)) = 0;\n
            }\n
            cgc_free();\n
            *((v0->field_44->field_8 + v1 * 4)) = 0;\n
        }\n
    }\n
    cgc_free();\n
    v0->field_44 = 0;\n
    cgc_ClearFsError();\n
    v2 = 1;\n
    return v2;\n
}\n
", "4211081:sub_404189": null, "4211088:cgc_InitFilesystem": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern unsigned int FS_ERROR;\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitFilesystem(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v0 = 64;\n
    cgc_bzero(&FS_ERROR);\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[117].padding_0[50]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (v1->field_44)\n
        cgc_DestroyFilesystem();\n
    v6 = cgc_calloc();\n
    v1->field_44 = v6;\n
    if (!v6)\n
    {\n
        cgc_SetFsError(&v1[117].padding_0[27]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    v7 = cgc_calloc();\n
    v1->field_44->field_8 = v7;\n
    if (!v7)\n
    {\n
        cgc_SetFsError(&v1[117].padding_0[27]);\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1->field_44->field_4 = v4;\n
    if (!cgc_Login())\n
    {\n
        cgc_SetFsError(&v1[117].padding_0[13]);\n
        cgc_free();\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (!cgc_InitPasswd())\n
    {\n
        cgc_Logout();\n
        cgc_SetFsError(v1 + 117);\n
        cgc_free();\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v0 = 32;\n
        cgc_bzero(&v1[9].padding_0[8]);\n
        cgc_ClearFsError();\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4211576:sub_404378": null, "4211584:cgc_Login": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_Login(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[103].padding_0[68]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_strlen();\n
    v2 = cgc_calloc();\n
    if (!v2)\n
    {\n
        cgc_SetFsError(&v1[111].padding_0[15]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = v4;\n
    cgc_strcpy(v2);\n
    if (v1->field_48)\n
    {\n
        cgc_free();\n
        v1->field_48 = 0;\n
    }\n
    v1->field_48 = v2;\n
    cgc_ClearFsError();\n
    v3 = 1;\n
    return v3;\n
}\n
", "4211809:sub_404461": null, "4211824:cgc_InitPasswd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitPasswd(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v6;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        cgc_SetFsError(v2 - 7879);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = cgc_fopen(v2 - 7756);\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v2 - 7855);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_fwrite(v2 - 7828, 5, 1);\n
    v1 = v5;\n
    v6 = cgc_strlen(v5, 5, 1);\n
    v0 = v3;\n
    cgc_fwrite(v1, v6, 1);\n
    cgc_fclose(v3, v6, 1);\n
    cgc_ClearFsError();\n
    v4 = 1;\n
    return v4;\n
}\n
", "4212081:sub_404571": null, "4212096:cgc_Logout": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_CurrentUser;\n
\n
int cgc_Logout()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_CurrentUser)\n
    {\n
        v0 = v1->field_48;\n
        cgc_free();\n
    }\n
    v1->field_48 = 0;\n
    cgc_ClearFsError();\n
    return 1;\n
}\n
", "4212177:sub_4045d1": null, "4212192:cgc_FindFile": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindFile(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v1->field_44->field_4)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*((v1->field_44->field_8 + (v2 << 2))) && *(*((v1->field_44->field_8 + (v2 << 2)))))\n
        {\n
            v0 = v4;\n
            if (!cgc_strcmp(*(*((v1->field_44->field_8 + (v2 << 2))))))\n
            {\n
                v3 = *((v1->field_44->field_8 + v2 * 4));\n
                return v3;\n
            }\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4212407:sub_4046b7": null, "4212416:cgc_CreateEmptyFile": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CreateEmptyFile(unsigned int v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x18]\n
    struct struct_2 **v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_2 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    struct_0 *v8;  // ebx\n
    struct_0 *v9;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[110].padding_0[33]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!v1->field_48)\n
    {\n
        cgc_SetFsError(&v1[110].padding_0[16]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if ((a0 & 153))\n
    {\n
        cgc_SetFsError(&v1[109].field_48 + 3);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (cgc_FindFile(v4))\n
    {\n
        cgc_SetFsError(&v1[109].padding_0[62]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v1->field_44->field_4)\n
        {\n
LABEL_4049e7:\n
            if (v2 != v1->field_44->field_4)\n
            {\n
                cgc_ClearFsError();\n
                v3 = *((v1->field_44->field_8 + v2 * 4));\n
                return v3;\n
            }\n
            cgc_SetFsError(&v1[109].padding_0[42]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*((v1->field_44->field_8 + (v2 << 2))))\n
        {\n
            v2 = v2 + 1;\n
        }\n
        else\n
        {\n
            v5 = cgc_calloc();\n
            *((v1->field_44->field_8 + v2 * 4)) = v5;\n
            if (!v5)\n
            {\n
                cgc_SetFsError(&v1[111].padding_0[15]);\n
                v3 = 0;\n
                return v3;\n
            }\n
            cgc_strlen();\n
            v6 = cgc_calloc();\n
            *(*((v1->field_44->field_8 + v2 * 4))) = v6;\n
            if (!v6)\n
            {\n
                cgc_SetFsError(&v1[111].padding_0[15]);\n
                cgc_free();\n
                *((v1->field_44->field_8 + v2 * 4)) = 0;\n
                v3 = 0;\n
                return v3;\n
            }\n
            v0 = v4;\n
            cgc_strcpy(*(*((v1->field_44->field_8 + v2 * 4))));\n
            v7 = cgc_calloc(5);\n
            *((*((v1->field_44->field_8 + v2 * 4)) + 4)) = v7;\n
            if (!v7)\n
            {\n
                cgc_SetFsError(&v1[111].padding_0[15]);\n
                cgc_free();\n
                *(*((v1->field_44->field_8 + v2 * 4))) = 0;\n
                cgc_free();\n
                *((v1->field_44->field_8 + v2 * 4)) = 0;\n
                v3 = 0;\n
                return v3;\n
            }\n
            v8 = v1;\n
            v0 = v8->field_48;\n
            cgc_strcpy(*((*((v8->field_44->field_8 + v2 * 4)) + 4)));\n
            v9 = v1;\n
            *((*((v9->field_44->field_8 + v2 * 4)) + 8)) = a0;\n
            *((*((v9->field_44->field_8 + v2 * 4)) + 12)) = 0;\n
            *((*((v9->field_44->field_8 + v2 * 4)) + 16)) = 0;\n
            goto LABEL_4049e7;\n
            goto LABEL_4049e7;\n
        }\n
    }\n
}\n
", "4213312:cgc_fopen": "typedef struct struct_1 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_3;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_fopen(unsigned int v5, char *a0)\n
{\n
    struct_1 *v0;  // [bp-0x1c]\n
    struct_2 *v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_2 *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v0[111].padding_0[64]);\n
        v4 = 0;\n
        return v4;\n
    }\n
    if (v5 && a0)\n
    {\n
        if (cgc_strlen() > 1)\n
        {\n
            cgc_SetFsError(&v0[109].field_48 + 3);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (*(a0) != 114 && *(a0) != 119)\n
        {\n
            cgc_SetFsError(&v0[109].field_48 + 3);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (!v0->field_48)\n
        {\n
            cgc_SetFsError(&v0[110].padding_0[16]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_FindFile(v5);\n
        if (!v2 && *(a0) == 114)\n
        {\n
            cgc_SetFsError(&v0[109].padding_0[2]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (v2)\n
        {\n
            for (v3 = 0; v3 < 8; v3 += 1)\n
            {\n
                if (*((656 + &v0->padding_0[0] + 0x4 * v3)) && *(*((656 + &v0->padding_0[0] + 0x4 * v3))) == v2)\n
                {\n
                    cgc_SetFsError(&v0[108].padding_0[56]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
        }\n
        if (v2 && cgc_strcmp(v0->field_48))\n
        {\n
            if (cgc_strcmp(v2->field_4))\n
            {\n
                if (*(a0) == 114 && !(v2->field_8 & 64))\n
                {\n
                    cgc_SetFsError(&v0[108].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (*(a0) == 119 && !(v2->field_8 & 96))\n
                {\n
                    cgc_SetFsError(&v0[108].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
            else\n
            {\n
                if (*(a0) == 114 && !(v2->field_8 & 4))\n
                {\n
                    cgc_SetFsError(&v0[108].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (*(a0) == 119 && !(v2->field_8 & 6))\n
                {\n
                    cgc_SetFsError(&v0[108].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
        }\n
        v1 = cgc_calloc();\n
        if (!v1)\n
        {\n
            cgc_SetFsError(&v0[111].padding_0[15]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        for (v3 = 0; v3 < 8; v3 += 1)\n
        {\n
            if (!*((656 + &v0->padding_0[0] + 0x4 * v3)))\n
            {\n
                *(&v0[8].padding_0[48 + 4 * v3]) = v1;\n
                break;\n
            }\n
        }\n
        if (v3 == 8)\n
        {\n
            cgc_SetFsError(&v0[108].padding_0[17]);\n
            cgc_free();\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (*(a0) != 119)\n
        {\n
            v1->field_0 = &v2;\n
            v1->field_4 = 4;\n
            v1->field_8 = 0;\n
        }\n
        else if (v2)\n
        {\n
            v1->field_0 = &v2;\n
            v1->field_4 = 6;\n
            v1->field_8 = 0;\n
            v1->field_0->field_c = 0;\n
            if (v1->field_0->field_10)\n
            {\n
                cgc_free();\n
                v1->field_0->field_10 = 0;\n
            }\n
        }\n
        else\n
        {\n
            v2 = cgc_CreateEmptyFile(v5, 6);\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v0[107].padding_0[68]);\n
                *(&v0[8].padding_0[48 + 4 * v3]) = 0;\n
                cgc_free();\n
                v4 = 0;\n
                return v4;\n
            }\n
            v1->field_0 = &v2;\n
            v1->field_4 = 6;\n
            v1->field_8 = 0;\n
        }\n
        cgc_ClearFsError();\n
        v4 = v1;\n
        return v4;\n
    }\n
    cgc_SetFsError(&v0[109].padding_0[27]);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4214616:sub_404f58": null, "4214624:cgc_fclose": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fclose(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0xa]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v0 - 8178);\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        if (*((v0 + (v1 << 2) + 656)) == v3)\n
            *((v0 + v1 * 4 + 656)) = 0;\n
    }\n
    cgc_ClearFsError();\n
    cgc_free();\n
    v2 = 1;\n
    return v2;\n
}\n
", "4214797:sub_40500d": null, "4214800:cgc_fread": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v3, unsigned int a0, unsigned int a1, struct_0 *a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 && a2)\n
    {\n
        if (!a2->field_0->field_10)\n
        {\n
            cgc_SetFsError(v1 - 8126);\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a1 * a0 > a2->field_0->field_c - a2->field_8)\n
        {\n
            v0 = a2->field_0->field_c - a2->field_8;\n
            cgc_memcpy(v3, a2->field_0->field_10 + a2->field_8);\n
            v4 = a2;\n
            v4->field_8 = a2->field_0->field_c - a2->field_8 + v4->field_8;\n
            cgc_ClearFsError();\n
            v2 = a2->field_0->field_c - a2->field_8;\n
            return v2;\n
        }\n
        else\n
        {\n
            v0 = a1 * a0;\n
            cgc_memcpy(v3, a2->field_0->field_10 + a2->field_8);\n
            v5 = a2;\n
            v5->field_8 = a1 * a0 + v5->field_8;\n
            cgc_ClearFsError();\n
            v2 = a1 * a0;\n
            return v2;\n
        }\n
    }\n
    cgc_SetFsError(v1 - 8157);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4215147:sub_40516b": null, "4215152:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v4, unsigned int a0, unsigned int a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5[5];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4 && a2)\n
    {\n
        v2 = cgc_calloc();\n
        if (!v2)\n
        {\n
            cgc_SetFsError(v1 - 8451);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*(a2)->field_10)\n
        {\n
            v0 = *(a2)->field_c;\n
            cgc_memcpy(v2, *(a2)->field_10);\n
        }\n
        v0 = a1 * a0;\n
        cgc_memcpy(v2 + *(a2)->field_c, v4);\n
        v5 = *(a2);\n
        v5[3] = a1 * a0 + v5[3];\n
        if (*(a2)->field_10)\n
            cgc_free();\n
        *(a2)->field_10 = v2;\n
        cgc_ClearFsError();\n
        v3 = a1 * a0;\n
        return v3;\n
    }\n
    cgc_SetFsError(v1 - 8157);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4215487:sub_4052bf": null, "4215488:cgc_fgets": "typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgets(unsigned int v4, unsigned int a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_50;  // tmp #50\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    struct_2 *v6;  // edx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v4)\n
    {\n
        cgc_SetFsError(v1 - 8114);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(v1 - 8099);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (a1->field_8 == a1->field_0->field_c)\n
    {\n
        cgc_SetFsError(v1 - 8126);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (a1->field_0->field_10)\n
    {\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (a1->field_8 < a1->field_0->field_c)\n
                v0 = v2 < a0 - 1;\n
            if (!(v0 & 1))\n
                break;\n
            v5 = a1->field_0->field_10;\n
            v6 = a1;\n
            v7 = v6->field_8;\n
            v6->field_8 = v7 + 1;\n
            tmp_50 = v5[v7];\n
            v8 = v2;\n
            v2 = v8 + 1;\n
            *((v4 + v8)) = tmp_50;\n
            if (*((a1->field_0->field_10 + a1->field_8 + 1)) == 10)\n
                break;\n
        }\n
        *((v4 + v2)) = 0;\n
        v3 = v4;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(v1 - 8126);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4215869:sub_40543d": null, "4215872:cgc_ListFiles": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_ListFiles(unsigned int *v16)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    struct_0 *v1;  // [bp-0x44]\n
    unsigned short v2;  // [bp-0x40]\n
    unsigned short v3;  // [bp-0x3e]\n
    unsigned int v4;  // [bp-0x3c]\n
    void* v5;  // [bp-0x38]\n
    unsigned long v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    char v9;  // [bp-0x1d]\n
    char v10;  // [bp-0x1c]\n
    char v11;  // [bp-0x1b]\n
    char v12;  // [bp-0x1a]\n
    char v13;  // [bp-0x19]\n
    struct struct_2 **v14;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v15;  // [bp-0x11]\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // eax\n
    struct_0 *v25;  // eax\n
    struct_0 *v26;  // ebx\n
    struct_0 *v27;  // eax\n
    struct_0 *v28;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v1[118].padding_0[4]);\n
        v15 = 0;\n
        return v15;\n
    }\n
    if (v16)\n
    {\n
        v8 = 79;\n
        for (v14 = 0; v14 < v1->field_44->field_4; v14 += 1)\n
        {\n
            if (*((v1->field_44->field_8 + (v14 << 2))))\n
            {\n
                v7 = cgc_strlen();\n
                if (v7 < 32)\n
                    v8 += 32;\n
                else\n
                    v8 = v7 + v8;\n
                v8 += 1;\n
                v7 = cgc_strlen();\n
                if (v7 < 32)\n
                    v8 += 32;\n
                else\n
                    v8 = v7 + v8;\n
                v8 += 1;\n
                v4 = *((*((v1->field_44->field_8 + v14 * 4)) + 12));\n
                v5 = 0;\n
                v18 = ftop<4> - 1;\n
                if ([D] GetI(136:I8x8)[t47,0])\n
                {\n
                    v19 = v18 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v19 = v18 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
                v20 = v19 + 1;\n
                cgc_log10();\n
                [D] PutI(72:F64x8)[t18,0] = t21\n
                [D] PutI(136:I8x8)[t18,0] = 0x01\n
                [D] PutI(72:F64x8)[t28,1] = t29\n
                [D] PutI(136:I8x8)[t28,1] = 0x01\n
                [D] PutI(136:I8x8)[t28,0] = 0x00\n
                v22 = v20 - 1 + 1;\n
                v3 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-62, size=2, endness=Iend_LE)))));\n
                v2 = v3 | 0xc00;\n
                v6 = ([D] GetI(136:I8x8)[t74,0] ? [D] GetI(72:F64x8)[t74,0] : nan);\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v23 = v22 + 1;\n
                v7 = v6;\n
                if (v7 < 8)\n
                    v8 += 8;\n
                else\n
                    v8 = v7 + v8;\n
                v8 += 6;\n
            }\n
        }\n
        v24 = cgc_calloc();\n
        *(v16) = v24;\n
        if (!v24)\n
        {\n
            cgc_SetFsError(&v1[117].padding_0[27]);\n
            v15 = 0;\n
            return v15;\n
        }\n
    }\n
    if (!v16)\n
    {\n
        v26 = v1;\n
        cgc_printf(&v26[112].padding_0[22], &v26[111].field_44 + 3, &v26[111].padding_0[62], &v26[111].padding_0[56]);\n
    }\n
    else\n
    {\n
        v25 = v1;\n
        v0 = &v25[111].padding_0[51];\n
        cgc_sprintf(*(v16), &v25[112].padding_0[22], &v25[111].field_44 + 3, &v25[111].padding_0[62], &v25[111].padding_0[56]);\n
    }\n
    for (v14 = 0; v14 < v1->field_44->field_4; v14 += 1)\n
    {\n
        if (*((v1->field_44->field_8 + (v14 << 2))))\n
        {\n
            if (v16)\n
            {\n
                v27 = v1;\n
                v0 = *((*((v27->field_44->field_8 + v14 * 4)) + 12));\n
                cgc_sprintf(*(v16), &v1[111].padding_0[46], *(v16), *(*((v27->field_44->field_8 + v14 * 4))), *((*((v27->field_44->field_8 + v14 * 4)) + 4)));\n
            }\n
            else\n
            {\n
                v28 = v1;\n
                cgc_printf(&v28[111].padding_0[44], *(*((v28->field_44->field_8 + v14 * 4))), *((*((v28->field_44->field_8 + v14 * 4)) + 4)));\n
            }\n
            cgc_memset(&v9, 45);\n
            v13 = 0;\n
            if ((*((*((v1->field_44->field_8 + (v14 << 2))) + 8)) & 4))\n
                v9 = 114;\n
            if ((*((*((v1->field_44->field_8 + (v14 << 2))) + 8)) & 6))\n
                v10 = 119;\n
            if ((*((*((v1->field_44->field_8 + (v14 << 2))) + 8)) & 64))\n
                v11 = 114;\n
            if ((*((*((v1->field_44->field_8 + (v14 << 2))) + 8)) & 96))\n
                v12 = 119;\n
            if (v16)\n
                cgc_sprintf(*(v16), &v1[111].padding_0[26], *(v16));\n
            else\n
                cgc_printf(&v1[112].padding_0[5]);\n
        }\n
    }\n
    cgc_ClearFsError();\n
    v15 = 1;\n
    return v15;\n
}\n
", "4217062:sub_4058e6": null, "4217072:cgc_DeleteFile": "typedef struct struct_1 {\n
    char padding_0[68];\n
    struct struct_2 *field_44;\n
    unsigned int field_48;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_DeleteFile(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_1 *v1;  // [bp-0x1c]\n
    unsigned int v2[5];  // [bp-0x18]\n
    struct struct_0 **v3;  // [bp-0x14]\n
    struct struct_0 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    struct_1 *v7;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v1[111].padding_0[64]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!v6)\n
    {\n
        cgc_SetFsError(&v1[110].padding_0[33]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!v1->field_48)\n
    {\n
        cgc_SetFsError(&v1[110].padding_0[16]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        for (v4 = 0; v4 < v1->field_44->field_4; v4 = v4 + 1)\n
        {\n
            if (*((v1->field_44->field_8 + (v4 << 2))))\n
            {\n
                v0 = v6;\n
                if (!cgc_strcmp(*(*((v1->field_44->field_8 + (v4 << 2))))))\n
                {\n
                    v2[0] = *((v1->field_44->field_8 + v4 * 4));\n
                    v3 = v4;\n
                    break;\n
                }\n
            }\n
        }\n
        if (v4 == v1->field_44->field_4)\n
        {\n
            cgc_SetFsError(&v1[109].padding_0[2]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        for (v4 = 0; v4 < 8; v4 = v4 + 1)\n
        {\n
            if (*(&v1[8].padding_0[48 + 4 * v4]) && *(*(&v1[8].padding_0[48 + 4 * v4])) == v2)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        v7 = v1;\n
        v0 = &v7[103].field_48 + 1;\n
        if (cgc_strcmp(v7->field_48))\n
        {\n
            v0 = v2[1];\n
            if (cgc_strcmp(v1->field_48))\n
            {\n
                cgc_SetFsError(&v1[108].padding_0[35]);\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_free();\n
        if (v2[1])\n
            cgc_free();\n
        if (v2[4])\n
            cgc_free();\n
        cgc_free();\n
        *((v1->field_44->field_8 + v3 * 4)) = 0;\n
        cgc_ClearFsError();\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4217737:sub_405b89": null, "4217744:cgc_RenameFile": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_RenameFile(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_2 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    struct_0 *v7;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    if (v6 && a0)\n
    {\n
        for (v4 = 0; v4 < v1->field_44->field_4; v4 += 1)\n
        {\n
            if (*((v1->field_44->field_8 + (v4 << 2))) && *(*((v1->field_44->field_8 + (v4 << 2)))))\n
            {\n
                v0 = v6;\n
                if (!cgc_strcmp(*(*((v1->field_44->field_8 + (v4 << 2))))))\n
                    v3[0] = *((v1->field_44->field_8 + v4 * 4));\n
                v0 = a0;\n
                if (!cgc_strcmp(*(*((v1->field_44->field_8 + (v4 << 2))))))\n
                {\n
                    cgc_SetFsError(&v1[105].padding_0[30]);\n
                    v5 = 0;\n
                    return v5;\n
                }\n
            }\n
        }\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v1[104].field_48 + 2);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v7 = v1;\n
        v0 = &v7[103].field_48 + 1;\n
        if (cgc_strcmp(v7->field_48))\n
        {\n
            v0 = *((v3 + 4));\n
            if (cgc_strcmp(v1->field_48))\n
            {\n
                cgc_SetFsError(&v1[108].padding_0[35]);\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_strlen();\n
        v2 = cgc_calloc();\n
        if (!v2)\n
        {\n
            cgc_SetFsError(&v1[111].padding_0[15]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = a0;\n
        cgc_strcpy(v2);\n
        cgc_free(*(v3));\n
        *(v3) = v2;\n
        cgc_ClearFsError();\n
        v5 = 1;\n
        return v5;\n
    }\n
    cgc_SetFsError(&v1[110].padding_0[33]);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4218331:sub_405ddb": null, "4218336:cgc_ChangeMode": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangeMode(unsigned int v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    struct_1 *v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    struct_0 *v5;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[104].padding_0[52]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!(a0 & 153))\n
    {\n
        v2 = cgc_FindFile(v4);\n
        if (!v2)\n
        {\n
            cgc_SetFsError(&v1[104].padding_0[39]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        v5 = v1;\n
        v0 = &v5[103].field_48 + 1;\n
        if (cgc_strcmp(v5->field_48))\n
        {\n
            v0 = v2->field_4;\n
            if (cgc_strcmp(v1->field_48))\n
            {\n
                cgc_SetFsError(&v1[108].padding_0[35]);\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
        v2->field_8 = a0;\n
        cgc_ClearFsError();\n
        v3 = 1;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v1[109].field_48 + 3);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4218625:sub_405f01": null, "4218640:cgc_ChangeOwner": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangeOwner(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    struct_0 *v6;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v5)\n
    {\n
        cgc_SetFsError(&v1[110].padding_0[33]);\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0)\n
    {\n
        v6 = v1;\n
        v0 = &v6[103].field_48 + 1;\n
        if (cgc_strcmp(v6->field_48))\n
        {\n
            cgc_SetFsError(&v1[104].padding_0[5]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        v3 = cgc_FindFile(v5);\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v1[104].padding_0[39]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (cgc_UserExists())\n
        {\n
            cgc_strlen();\n
            v2 = cgc_calloc();\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v1[111].padding_0[15]);\n
                v4 = 0;\n
                return v4;\n
            }\n
            v0 = a0;\n
            cgc_strcpy(v2);\n
            if (v3->field_4)\n
                cgc_free();\n
            v3->field_4 = v2;\n
            cgc_ClearFsError();\n
            v4 = 1;\n
            return v4;\n
        }\n
        else\n
        {\n
            cgc_SetFsError(&v1[104].padding_0[52]);\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v1[104].padding_0[19]);\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4219050:sub_4060aa": null, "4219056:cgc_UserExists": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_UserExists(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x98]\n
    unsigned int v1;  // [bp-0x94]\n
    char v2;  // [bp-0x90]\n
    void* v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v6;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        cgc_SetFsError(v0 - 7896);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v6 = v0;\n
    v3 = cgc_fopen(v6 - 7756, v6 - 8101);\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v0 - 7855);\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (cgc_fgets(&v2, 127, v3))\n
        {\n
            v1 = cgc_strtok(&v2);\n
            if (!v1)\n
            {\n
                cgc_SetFsError(v0 - 7822);\n
                v4 = 0;\n
                return v4;\n
            }\n
            else if (!cgc_strcmp(v1))\n
            {\n
                cgc_fclose(v3);\n
                v4 = 1;\n
                return v4;\n
            }\n
        }\n
        else\n
        {\n
            cgc_fclose(v3);\n
            cgc_ClearFsError();\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4219432:sub_406228": null, "4219440:cgc_Uid": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_CurrentUser;\n
\n
int cgc_Uid()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0xc]\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_CurrentUser)\n
    {\n
        v0 = v1->field_48;\n
        v3 = cgc_puts();\n
    }\n
    return v3;\n
}\n
", "4219498:sub_40626a": null, "4219504:cgc_AddUser": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_AddUser(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb4]\n
    struct_1 *v2;  // [bp-0xa8]\n
    struct_1 *v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    struct_0 *v5;  // [bp-0x9c]\n
    char v6;  // [bp-0x98]\n
    struct struct_0 **v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14]\n
    char v9;  // [bp-0xd]\n
    struct_0 *v11;  // ebx\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v10)\n
    {\n
        cgc_SetFsError(&v5[103].padding_0[68]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v5[102].padding_0[42]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v5->field_48))\n
    {\n
        cgc_SetFsError(&v5[104].padding_0[5]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v5[103].padding_0[68]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v5[102].padding_0[42]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (!cgc_UserExists(v10))\n
    {\n
        v11 = v5;\n
        v8 = cgc_fopen(&v11[102].padding_0[4], &v11[106].padding_0[45]);\n
        if (!v8)\n
        {\n
            cgc_SetFsError(&v5[103].padding_0[27]);\n
            v9 = 0;\n
            return v9;\n
        }\n
        v12 = v5;\n
        v7 = cgc_fopen(&v12[102].padding_0[5], &v12[103].padding_0[29]);\n
        if (!v7)\n
        {\n
            cgc_SetFsError(&v5[101].field_48 + 1);\n
            cgc_fclose(v8);\n
            v9 = 0;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            if (cgc_fgets(&v6, 127, v8))\n
            {\n
                v3 = &v6;\n
                v0 = cgc_strlen();\n
                v4 = cgc_fwrite(v3, v0, 1, v7);\n
                if (v4 != cgc_strlen(&v6, v0, 1))\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_SetFsError(&v5[101].padding_0[42]);\n
                    cgc_DeleteFile(&v5[102].padding_0[5]);\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                else if (*(&v5 + cgc_strlen()) != 10 && cgc_fwrite(&v5[92].padding_0[66], 1, 1, v7) != 1)\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_SetFsError(&v5[101].padding_0[42]);\n
                    cgc_DeleteFile(&v5[102].padding_0[5]);\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            }\n
            else\n
            {\n
                v0 = &v5[101].padding_0[10];\n
                v1 = v10;\n
                cgc_sprintf(&v6, v0, v1);\n
                v2 = &v6;\n
                cgc_fwrite(v2, cgc_strlen(&v6, v0, v1), 1, v7);\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_DeleteFile(&v5[102].padding_0[4]);\n
                v13 = v5;\n
                cgc_RenameFile(&v13[102].padding_0[5], &v13[102].padding_0[4]);\n
                cgc_ClearFsError();\n
                v9 = 1;\n
                return v9;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v5[102].padding_0[25]);\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4220670:sub_4066fe": null, "4220672:cgc_DeleteUser": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DeleteUser(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0xb8]\n
    struct_1 *v1;  // [bp-0xa8]\n
    unsigned int v2;  // [bp-0xa4]\n
    struct_0 *v3;  // [bp-0xa0]\n
    struct struct_0 **v4;  // [bp-0x9c]\n
    void* v5;  // [bp-0x98]\n
    char v6;  // [bp-0x91]\n
    unsigned int v7;  // [bp-0x90]\n
    char v8;  // [bp-0x89]\n
    char v9;  // [bp-0x9]\n
    struct_0 *v11;  // ebx\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = 0;\n
    if (!v10)\n
    {\n
        cgc_SetFsError(&v3[103].padding_0[68]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v3->field_48))\n
    {\n
        cgc_SetFsError(&v3[104].padding_0[5]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v10))\n
    {\n
        v11 = v3;\n
        v5 = cgc_fopen(&v11[102].padding_0[4], &v11[106].padding_0[45]);\n
        if (!v5)\n
        {\n
            cgc_SetFsError(&v3[103].padding_0[27]);\n
            v9 = 0;\n
            return v9;\n
        }\n
        v12 = v3;\n
        v4 = cgc_fopen(&v12[102].padding_0[5], &v12[103].padding_0[29]);\n
        if (!v4)\n
        {\n
            cgc_SetFsError(&v3[101].field_48 + 1);\n
            cgc_fclose(v5);\n
            v9 = 0;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v8, 127, v5))\n
                {\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    if (v6)\n
                    {\n
                        cgc_DeleteFile(&v3[102].padding_0[4]);\n
                        v13 = v3;\n
                        cgc_RenameFile(&v13[102].padding_0[5], &v13[102].padding_0[4]);\n
                        cgc_ClearFsError();\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
                    cgc_SetFsError(&v3[100].padding_0[57]);\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    cgc_DeleteFile(&v3[102].padding_0[5]);\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            } while (!cgc_strlen());\n
            v7 = cgc_strtok(&v8);\n
            if (!v7)\n
            {\n
                cgc_SetFsError(&v3[102].padding_0[70]);\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_DeleteFile(&v3[102].padding_0[5]);\n
                v9 = 0;\n
                return v9;\n
            }\n
            if (cgc_strcmp(v7))\n
            {\n
                (&v8)[cgc_strlen()] = 58;\n
                v1 = &v8;\n
                v0 = cgc_strlen();\n
                v2 = cgc_fwrite(v1, v0, 1, v4);\n
                if (v2 != cgc_strlen(&v8, v0, 1))\n
                    break;\n
            }\n
            else\n
            {\n
                v6 = 1;\n
            }\n
        }\n
        cgc_fclose(v5);\n
        cgc_fclose(v4);\n
        cgc_SetFsError(&v3[101].padding_0[42]);\n
        cgc_DeleteFile(&v3[102].padding_0[5]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v3[101].padding_0[4]);\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4221778:sub_406b52": null, "4221792:cgc_ChangePasswd": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangePasswd(unsigned int v13, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    struct_1 *v2;  // [bp-0xb4]\n
    unsigned int v3;  // [bp-0xb0]\n
    struct_1 *v4;  // [bp-0xac]\n
    unsigned int v5;  // [bp-0xa8]\n
    struct_0 *v6;  // [bp-0xa4]\n
    struct struct_0 **v7;  // [bp-0xa0]\n
    void* v8;  // [bp-0x9c]\n
    char v9;  // [bp-0x95]\n
    unsigned int v10;  // [bp-0x94]\n
    char v11;  // [bp-0x8d]\n
    char v12;  // [bp-0xd]\n
    struct_0 *v14;  // ebx\n
    struct_0 *v15;  // ebx\n
    struct_0 *v16;  // ebx\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v9 = 0;\n
    if (!v13)\n
    {\n
        cgc_SetFsError(&v6[103].padding_0[68]);\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v6[102].padding_0[42]);\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (cgc_strlen() <= 32)\n
    {\n
        if (cgc_strcmp(v6->field_48) && cgc_strcmp(v6->field_48))\n
        {\n
            cgc_SetFsError(&v6[100].padding_0[42]);\n
            v12 = 0;\n
            return v12;\n
        }\n
        v14 = v6;\n
        v8 = cgc_fopen(&v14[102].padding_0[4], &v14[106].padding_0[45]);\n
        if (!v8)\n
        {\n
            cgc_SetFsError(&v6[103].padding_0[27]);\n
            v12 = 0;\n
            return v12;\n
        }\n
        v15 = v6;\n
        v7 = cgc_fopen(&v15[102].padding_0[5], &v15[103].padding_0[29]);\n
        if (!v7)\n
        {\n
            cgc_SetFsError(&v6[101].field_48 + 1);\n
            cgc_fclose(v8);\n
            v12 = 0;\n
            return v12;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v11, 127, v8))\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    if (v9)\n
                    {\n
                        cgc_DeleteFile(&v6[102].padding_0[4]);\n
                        v16 = v6;\n
                        cgc_RenameFile(&v16[102].padding_0[5], &v16[102].padding_0[4]);\n
                        cgc_ClearFsError();\n
                        v12 = 1;\n
                        return v12;\n
                    }\n
                    cgc_SetFsError(&v6[100].padding_0[57]);\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_DeleteFile(&v6[102].padding_0[5]);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            } while (!cgc_strlen());\n
            v10 = cgc_strtok(&v11);\n
            if (!v10)\n
            {\n
                cgc_SetFsError(&v6[102].padding_0[70]);\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_DeleteFile(&v6[102].padding_0[5]);\n
                v12 = 0;\n
                return v12;\n
            }\n
            else if (cgc_strcmp(v10))\n
            {\n
                (&v11)[cgc_strlen()] = 58;\n
                v2 = &v11;\n
                v0 = cgc_strlen();\n
                v3 = cgc_fwrite(v2, v0, 1, v7);\n
                if (v3 != cgc_strlen(&v11, v0, 1))\n
                {\n
                    cgc_SetFsError(&v6[101].padding_0[42]);\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_DeleteFile(&v6[102].padding_0[5]);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            }\n
            else\n
            {\n
                v0 = &v6[100].padding_0[3];\n
                v1 = v13;\n
                cgc_sprintf(&v11, v0, v1);\n
                v4 = &v11;\n
                v0 = cgc_strlen(&v11, v0, v1);\n
                v5 = cgc_fwrite(v4, v0, 1, v7);\n
                if (v5 != cgc_strlen(&v11, v0, 1))\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_SetFsError(&v6[101].padding_0[42]);\n
                    cgc_DeleteFile(&v6[102].padding_0[5]);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v6[102].padding_0[42]);\n
        v12 = 0;\n
        return v12;\n
    }\n
}\n
", "4223212:sub_4070ec": null, "4223216:cgc_CheckPasswd": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CheckPasswd(unsigned int v9, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xa8]\n
    char v1;  // [bp-0xa1]\n
    void* v2;  // [bp-0xa0], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x9c]\n
    char v4;  // [bp-0x95]\n
    unsigned int v5;  // [bp-0x94]\n
    unsigned int v6;  // [bp-0x90]\n
    char v7;  // [bp-0x89]\n
    char v8;  // [bp-0x9]\n
    struct_0 *v10;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v9)\n
    {\n
        cgc_SetFsError(&v0[103].padding_0[68]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v0[102].padding_0[42]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v0[102].padding_0[42]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else\n
    {\n
        if (!v0->field_48)\n
        {\n
            cgc_Login(&v0[103].field_48 + 1);\n
            v1 = 1;\n
        }\n
        else if (cgc_strcmp(v0->field_48))\n
        {\n
            cgc_strlen();\n
            v2 = cgc_calloc();\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v0[111].padding_0[15]);\n
                v8 = 0;\n
                return v8;\n
            }\n
            cgc_strcpy(v2);\n
            cgc_Logout();\n
            cgc_Login(&v0[103].field_48 + 1);\n
        }\n
        v10 = v0;\n
        v3 = cgc_fopen(&v10[102].padding_0[4], &v10[106].padding_0[45]);\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v0[103].padding_0[27]);\n
            if (v2)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v2);\n
                cgc_free();\n
            }\n
            if (v1)\n
                cgc_Logout();\n
            v8 = 0;\n
            return v8;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                do\n
                {\n
                    do\n
                    {\n
                        if (!cgc_fgets(&v7, 127, v3))\n
                        {\n
                            cgc_fclose(v3);\n
                            if (!v4)\n
                            {\n
                                cgc_SetFsError(&v0[100].padding_0[57]);\n
                                if (v2)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v2);\n
                                    cgc_free();\n
                                }\n
                                if (v1)\n
                                    cgc_Logout();\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                            else\n
                            {\n
                                cgc_ClearFsError();\n
                                if (v2)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v2);\n
                                    cgc_free();\n
                                }\n
                                if (v1)\n
                                    cgc_Logout();\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                        }\n
                    } while (!cgc_strlen());\n
                    v6 = cgc_strtok(&v7);\n
                    if (!v6)\n
                    {\n
                        cgc_SetFsError(&v0[102].padding_0[70]);\n
                        cgc_fclose(v3);\n
                        if (v2)\n
                        {\n
                            cgc_Logout();\n
                            cgc_Login(v2);\n
                            cgc_free();\n
                        }\n
                        if (v1)\n
                            cgc_Logout();\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                } while (cgc_strcmp(v6));\n
                v5 = cgc_strtok(0);\n
                if (!v5)\n
                {\n
                    cgc_SetFsError(&v0[102].padding_0[70]);\n
                    cgc_fclose(v3);\n
                    if (v2)\n
                    {\n
                        cgc_Logout();\n
                        cgc_Login(v2);\n
                        cgc_free();\n
                    }\n
                    if (v1)\n
                        cgc_Logout();\n
                    v8 = 0;\n
                    return v8;\n
                }\n
            } while (cgc_strcmp(v5));\n
            cgc_ClearFsError();\n
            cgc_fclose(v3);\n
            if (v2)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v2);\n
                cgc_free();\n
            }\n
            if (v1)\n
                cgc_Logout();\n
            v8 = 1;\n
            return v8;\n
        }\n
    }\n
}\n
", "4224727:sub_4076d7": null, "4224736:cgc_link": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_link(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_lookaside;\n
    if (!v5)\n
        return cgc_lookaside;\n
    v6 = v5;\n
    if (*(v6) <= 1016)\n
    {\n
        if (*(v5) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(v5) >> 3;\n
        *((v5 + 4)) = *((v3 + v2 * 4 + 76));\n
        v1 = v5;\n
        if (*(v5) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(v5) >> 3;\n
        v6 = v3;\n
        *((v6 + v0 * 4 + 76)) = v1;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (!v4)\n
            return v6;\n
        if (!*((v4 + 4)))\n
        {\n
            *((v4 + 4)) = v5;\n
            *((v5 + 8)) = v4;\n
            v6 = v5;\n
            *((v6 + 4)) = 0;\n
            return v5;\n
        }\n
        else if (*(v5) >= *(*((v4 + 4))))\n
        {\n
            v6 = *((v4 + 4));\n
            v4 = v6;\n
        }\n
        else\n
        {\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = v4;\n
            *((*((v4 + 4)) + 8)) = v5;\n
            v6 = v4;\n
            *((v6 + 4)) = v5;\n
            return v4;\n
        }\n
    }\n
}\n
", "4225073:sub_407831": null, "4225088:cgc_add_freelist_block": "typedef struct struct_1 {\n
    char padding_0[76];\n
    unsigned int field_4c;\n
} struct_1;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_freelist_block(unsigned int v5)\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    struct_1 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_1 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v5 += 4;\n
    v5 = v5 + 4095 & -0x1000;\n
    v0 = &v3;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        cgc_printf(&v1[94].field_4c);\n
        cgc__terminate(-1);\n
    }\n
    cgc_bzero(v3);\n
    *(v3) = v5 - 4;\n
    if (!v1->field_4c)\n
    {\n
        v7 = v1;\n
        v7->field_4c = v3;\n
        return v1;\n
    }\n
    v7 = cgc_link(v3);\n
    return v7;\n
}\n
", "4225313:sub_407921": null, "4225328:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        v1 = v2 - 4;\n
        v3 = cgc_link(v1);\n
    }\n
    return v3;\n
}\n
", "4225399:sub_407977": null, "4225408:cgc_init_freelist": "typedef struct struct_0 {\n
    char padding_0[76];\n
    struct struct_1 *field_4c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_init_freelist()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    v0 = &cgc_lookaside;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc_printf();\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1->field_4c);\n
    v3[0] = v1->field_4c;\n
    v2[0] = v3 + 1;\n
    v3[0] = 0;\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[0] = 4080;\n
    v2[2] = v3;\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4225625:sub_407a59": null, "4225632:cgc_unlink": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
int cgc_unlink(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax, Other Possible Types: unsigned int, struct_0 *\n
\n
    if (!v0)\n
        return v0;\n
    if (v0->field_8)\n
        v0->field_8->field_4 = v0->field_4;\n
    v1 = v0;\n
    if (!v1->field_4)\n
        return v1;\n
    v1 = v0->field_4;\n
    v1->field_8 = v0->field_8;\n
}\n
", "4225716:sub_407ab4": null, "4225728:cgc_freelist_alloc": "typedef struct struct_1 {\n
    char padding_0[76];\n
    struct struct_0 *field_4c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_lookaside;\n
\n
int cgc_freelist_alloc(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v2 = v0->field_4c; v2; v2 = *((v2 + 4)))\n
    {\n
        if (*(v2) >= v4)\n
            break;\n
    }\n
    if (!v2)\n
    {\n
        cgc_add_freelist_block(v4);\n
        v3 = cgc_freelist_alloc(v4);\n
        return v3;\n
    }\n
    cgc_unlink(v2);\n
    if (*(v2) - v4 < 12)\n
    {\n
        v3 = v2 + 4;\n
        return v3;\n
    }\n
    v1 = v2 + 4 + v4;\n
    *(v1) = *(v2) - (v4 + 4);\n
    *(v2) = v4;\n
    cgc_link(v1);\n
    v3 = v2 + 4;\n
    return v3;\n
}\n
", "4226009:sub_407bd9": null, "4226016:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc();\n
    if (!v2)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v5 = v5 + 7 & -8;\n
    v0 = v5;\n
    cgc_bzero(v2);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4226124:sub_407c4c": null, "4226128:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v5 < 8)\n
        v5 = 8;\n
    v5 = v5 + 7 & -8;\n
    if (v5 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v5 >> 3;\n
    if (!v3)\n
    {\n
        v4 = cgc_freelist_alloc(v5);\n
        return v4;\n
    }\n
    for (v3 = v0; v3 < 128; v3 += 1)\n
    {\n
        if (*((v1 + (v3 << 2) + 76)))\n
            break;\n
    }\n
    if (v3 != 128)\n
    {\n
        v6 = v1;\n
        v2 = *((v6 + v3 * 4 + 76));\n
        *((v6 + v3 * 4 + 76)) = v2->field_4;\n
        v4 = &v2->field_4;\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v5);\n
    return v4;\n
}\n
", "4226413:sub_407d6d": null, "4226416:cgc_round": null, "4226562:sub_407e02": null, "4226576:cgc_floor": null, "4226732:sub_407eac": null, "4226736:cgc_seed_prng_array": "typedef struct struct_0 {\n
    char padding_0[816];\n
    unsigned int field_330;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state;\n
\n
int cgc_seed_prng_array(unsigned int v4, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&state, 128);\n
    v0->field_330 = 0;\n
    if (a0 > 32)\n
        a0 = 32;\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        *(&v0->padding_0[688 + 4 * v2]) = *((v4 + v2 * 4));\n
    }\n
    v6 = a0;\n
    while (true)\n
    {\n
        v2 = v6;\n
        if (v2 >= 32)\n
            break;\n
        v7 = v0;\n
        v1 = *(&v7->padding_0[688 + 4 * (v2 + 1 & 31)]);\n
        *((688 + &v7->padding_0[0] + 0x4 * v2)) = (v1 ^ (v1 >> 30) + v2) * 524287;\n
        v6 = v2 + 1;\n
    }\n
    v8 = v3;\n
    return v6;\n
}\n
", "4226959:sub_407f8f": null, "4226960:cgc_seed_prng": "int cgc_seed_prng(unsigned int v0)\n
{\n
    return cgc_seed_prng_array(&v0, 0x1);\n
}\n
", "4227007:sub_407fbf": null, "4227008:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state_n;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
\n
    v9 = v11;\n
    v8 = *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * state_n]);\n
    v7 = *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * (state_n + 3 & 31)]);\n
    v6 = *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * (state_n + 24 & 31)]);\n
    v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * (state_n + 10 & 31)]);\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * (state_n + 31 & 31)]);\n
    v3 = v8 ^ v7 ^ v7 >> 8;\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * state_n]) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[688 + 4 * (state_n + 31 & 31)]) = v0;\n
    state_n = state_n + 31 & 31;\n
    v12 = v9;\n
    return v0;\n
}\n
", "4227291:sub_4080db": null, "4227296:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v6 > a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v6 != a0)\n
    {\n
        v3 = a0 - v6 + 1;\n
        if (!v3)\n
        {\n
            v5 = cgc_prng();\n
            return v5;\n
        }\n
        v2 = (0 CONCAT -1) /m v3;\n
        do\n
        {\n
            v4 = cgc_prng();\n
        } while (v4 >= v3 * v2);\n
        v0 = v6;\n
        v5 = v0 + (0 CONCAT v4) /m v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        return v5;\n
    }\n
}\n
", "4227484:sub_40819c": null, "4227488:cgc_WRAPPER_PUTC": "int cgc_WRAPPER_PUTC(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4227589:sub_408205": null, "4227600:cgc_WRAPPER_OUTC": "int cgc_WRAPPER_OUTC(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    v0[a1] = a0;\n
    return a1 + 1;\n
}\n
", "4227634:sub_408232": null, "4227648:cgc_WRAPPER_BUFFER_PUTC": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_WRAPPER_BUFFER_PUTC(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // esi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    if (*((v4 + 0x100)) >= 0x100)\n
    {\n
        for (v3 = v4; *((v4 + 0x100)) > 0; v3 = *(&v2) + v3)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(1, v3, *((v4 + 0x100))))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            else if (*(&v2))\n
            {\n
                v7 = v4;\n
                v8 = *((v7 + 0x100)) - *(&v2);\n
                *((v7 + 0x100)) = v8;\n
            }\n
            else\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        }\n
    }\n
    v9 = v4;\n
    *(&v8) = *((v9 + 0x100));\n
    *((v9 + 0x100)) = v8 + 1;\n
    *((v4 + v8)) = a0;\n
    v5 = a1 + 1;\n
    return v5;\n
}\n
", "4227918:sub_40834e": null, "4227920:cgc_putchar": "int cgc_putchar(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4228012:sub_4083ac": null, "4228016:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = cgc_strlen();\n
    while (true)\n
    {\n
        if (v2 == v3)\n
        {\n
            cgc_putchar(10);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v4;\n
        if (cgc_transmit(1, v7 + v2, v3 - v2))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        else if (*(&v4))\n
        {\n
            v2 = *(&v4) + v2;\n
        }\n
        else\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
}\n
", "4228204:sub_40846c": null, "4228208:cgc_vprintf_buffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf_buffered(unsigned int v14, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    unsigned int v1;  // [bp-0x134]\n
    char v2;  // [bp-0x130]\n
    unsigned int v3;  // [bp-0x12c]\n
    unsigned int v4;  // [bp-0x128]\n
    void* v5;  // [bp-0x124]\n
    unsigned int v6;  // [bp-0x120]\n
    char v7;  // [bp-0x11c]\n
    unsigned short v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // esi\n
\n
    v13 = v15;\n
    v12 = v16;\n
    v11 = v17;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = cgc_WRAPPER_BUFFER_PUTC;\n
    v8 = 0;\n
    v6 = &v7;\n
    v5 = 0;\n
    v0 = a0;\n
    v4 = cgc_wrapper_output(v6, v9, v5, v14);\n
    v3 = &v7;\n
    while (true)\n
    {\n
        if (v8 <= 0)\n
        {\n
            v10 = v4;\n
            break;\n
        }\n
        else if (cgc_transmit(1, v3, v8))\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
        else if (*(&v2))\n
        {\n
            v8 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
    }\n
    return v10;\n
}\n
", "4228511:sub_40859f": null, "4228512:cgc_wrapper_output": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wrapper_output()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x5c]\n
    char *v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    char v5;  // [bp-0x21]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp+0x4]\n
    unsigned int v12;  // [bp+0x8]\n
    char *v13;  // [bp+0xc]\n
    char *v14;  // [bp+0x10], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp+0xfffb8]\n
    struct struct_0 **v44;  // [bp+0x100014]\n
    struct struct_1 **v45;  // [bp+0x10001c], Other Possible Types: unsigned int *\n
    struct struct_1 **v76;  // eax\n
\n
    v76 = v45;\n
    v45 = &v76[1];\n
    v32 = &*(v76)->field_0;\n
    *(v32) = v44;\n
    while (true)\n
    {\n
        v14 = (&v13)[1] + 1;\n
        while (true)\n
        {\n
LABEL_408ad9:\n
            while (true)\n
            {\n
                if (!*(v14))\n
                    return;\n
                v5 = *(v14);\n
                v14 = (&v13)[1] + 1;\n
                if (v5 != 36)\n
                {\n
                    v0 = v13;\n
                    v13 = v12(v11, v5);\n
                    goto LABEL_408ad9;\n
                }\n
                v6 = 0;\n
                v7 = 0;\n
                v8 = 0;\n
                v9 = 0;\n
                if (!*(v14))\n
                    return;\n
                if (*(v14) != 36)\n
                    break;\n
                v0 = v13;\n
                v13 = v12(v11, 36);\n
            }\n
            if (*(v14) == 45)\n
            {\n
                v9 |= 1;\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (cgc_isdigit(*(v14)))\n
            {\n
                if (*(v14) == 48)\n
                    v9 |= 4;\n
                for (v4 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v8 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (*(v14) == 46)\n
            {\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
                for (v3 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v6 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            v1 = *(v14) - 88;\n
            if (v1 <= 32)\n
                goto *(((stack_base)[88] + (stack_base)[92] * 4 - 7508)) + (stack_base)[88];\n
            break;\n
        }\n
    }\n
}\n
", "4229868:sub_408aec": null, "4229872:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf_buffered(v2, v1);\n
    return v0;\n
}\n
", "4229930:sub_408b2a": null, "4229936:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = &v5;\n
    v0 = v2;\n
    v1 = cgc_vsprintf(v4, a0);\n
    return v1;\n
}\n
", "4230005:sub_408b75": null, "4230016:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v9, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct struct_0 **v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = &cgc_WRAPPER_OUTC;\n
    v4 = v9;\n
    v3 = 0;\n
    v0 = a1;\n
    v2 = cgc_wrapper_output(v4, v5, v3, a0);\n
    v5(v4, 0);\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return v2;\n
}\n
", "4230155:sub_408c0b": null, "4230160:cgc_printf_int_to_string": "int cgc_printf_int_to_string(unsigned int v3, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a1) = 48;\n
        v2 = 1;\n
        return v2;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a0 >> 32;\n
        v3 = (0 CONCAT v3) /m a0;\n
        if (a0 != 16)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            a1[v4] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v5 = v1;\n
            v1 = v5 + 1;\n
            a1[v5] = v0 + 48;\n
        }\n
        else if ((a2 & 8))\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a1[v6] = v0 + 55;\n
        }\n
        else\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a1[v7] = v0 + 87;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4230432:cgc_printf_helper_int": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4231088:cgc_printf_float_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4233504:cgc_printf_helper_float": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4234170:sub_409bba": null, "4234176:cgc_printf_helper_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_string(unsigned int v5, struct struct_0 **a0, unsigned int a1, char *a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    char *v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a4 && !a3)\n
    {\n
        for (v1 = &_GLOBAL_OFFSET_TABLE_; *(a2); a2 += 1)\n
        {\n
            v0 = a1;\n
            a1 = a0(v5, *(a2));\n
        }\n
        v4 = a1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen();\n
    v2 = 0;\n
    if (a4 > 0 && v3 > a4)\n
        v3 = a4;\n
    if (a3 > 0 && v3 < a3)\n
        v2 = a3 - v3;\n
    if (!(a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v6 = v2;\n
            v2 = v6 - 1;\n
            if (v6 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 32);\n
            }\n
            else\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 48);\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        if (v7 <= 0)\n
            break;\n
        v8 = a2;\n
        a2 = v8 + 1;\n
        v0 = a1;\n
        a1 = a0(v5, *(v8));\n
    }\n
    if ((a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v9 = v2;\n
            v2 = v9 - 1;\n
            if (v9 <= 0)\n
                break;\n
            v0 = a1;\n
            a1 = a0(v5, 32);\n
        }\n
    }\n
    v4 = a1;\n
    return v4;\n
}\n
", "4234716:sub_409ddc": null, "4234720:cgc_rand": "int cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4234767:sub_409e0f": null, "4234768:cgc_srand": "int cgc_srand(unsigned int v0)\n
{\n
    return cgc_seed_prng(v0);\n
}\n
", "4234805:sub_409e35": null, "4234816:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4) == 45)\n
    {\n
        v1 = 1;\n
        v4 += 1;\n
    }\n
    for (; cgc_isdigit(*(v4)); v2 = v2 * 10 + *(v5) - 48)\n
    {\n
        v5 = v4;\n
        v4 = v5 + 1;\n
    }\n
    if (v1)\n
    {\n
        v3 = -(v2);\n
        return v3;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4235053:sub_409f2d": null, "4235056:cgc_atof": null, "4235341:sub_40a04d": null, "4235344:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8]\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v1;\n
        v1 = v4 + 1;\n
    }\n
    *(v1) = 0;\n
    return v0;\n
}\n
", "4235420:sub_40a09c": null, "4235424:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!*((a0 + v0)))\n
            break;\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = 0;\n
    }\n
    return v1;\n
}\n
", "4235561:sub_40a129": null, "4235568:cgc_memcpy": "int cgc_memcpy(char *v1, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v1) = *(&a0);\n
        v1 += 4;\n
        a0 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 1;\n
        a0 += 1;\n
    }\n
    return v0;\n
}\n
", "4235704:sub_40a1b8": null, "4235712:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v7[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    if (a1 >= 16)\n
        a1 = 16;\n
    for (; cgc_isspace(v7[0]); v7 = &v7[1]);\n
    if (*(v7) == 45)\n
    {\n
        v4 = 1;\n
        *(&v7) = &v7[1];\n
    }\n
    else if (*(v7) == 43)\n
    {\n
        *(&v7) = &v7[1];\n
    }\n
    if (a1 != 16 && !(!a1))\n
        goto LABEL_40a2da;\n
    if (*(v7) != 48)\n
    {\n
LABEL_40a2da:\n
        if (a1 && !(a1 == 2))\n
            goto LABEL_40a32d;\n
        if (*(v7) == 48)\n
        {\n
            if (*((v7 + 1)) != 98 && !(*((v7 + 1)) == 66))\n
                goto LABEL_40a32d;\n
            *(&v7) = v7 + 2;\n
            a1 = 2;\n
        }\n
LABEL_40a32d:\n
    }\n
    else\n
    {\n
        if (*((v7 + 1)) != 120 && !(*((v7 + 1)) == 88))\n
            goto LABEL_40a2da;\n
        *(&v7) = v7 + 2;\n
        a1 = 16;\n
    }\n
    if (!a1)\n
    {\n
        if (*(v7) == 48)\n
            a1 = 8;\n
        else\n
            a1 = 10;\n
    }\n
    v3 = 0;\n
    if (v4)\n
        v3 = 0x80000000;\n
    else\n
        v3 = 2147483647;\n
    v2 = (0 CONCAT v3) /m a1 >> 32;\n
    v3 = (0 CONCAT v3) /m a1;\n
    while (*(v7))\n
    {\n
        v1 = *(v7);\n
        if (cgc_isdigit(v1))\n
        {\n
            v1 -= 48;\n
        }\n
        else\n
        {\n
            if (!cgc_isalpha(v1))\n
                break;\n
            if (cgc_isupper(v1))\n
                v1 -= 55;\n
            else\n
                v1 -= 87;\n
        }\n
        if (v1 >= a1)\n
            break;\n
        if (v5 > v3)\n
        {\n
LABEL_40a465:\n
            break;\n
        }\n
        else if (v5 != v3)\n
        {\n
LABEL_40a46a:\n
            v5 *= a1;\n
            v5 = v1 + v5;\n
            v7 = &v7[1];\n
        }\n
        else\n
        {\n
            if (v1 <= v2)\n
                goto LABEL_40a46a;\n
            goto LABEL_40a465;\n
        }\n
    }\n
    if (a0)\n
        *(a0) = v7;\n
    if (v4)\n
    {\n
        v6 = -(v5);\n
        return v6;\n
    }\n
    v6 = v5;\n
    return v6;\n
}\n
", "4236483:sub_40a4c3": null, "4236496:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4236555:sub_40a50b": null, "4236560:cgc_bzero": "int cgc_bzero(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
\n
    for (; a0; v1[1 + v0] = 0)\n
    {\n
        v1 = a0;\n
        a0 = v1 + 1;\n
    }\n
    *((v0 + a0)) = 0;\n
    return v0;\n
}\n
", "4236615:sub_40a547": null, "4236624:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8]\n
    char *v4;  // eax\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(v4) = v1;\n
    }\n
    return v2;\n
}\n
", "4236779:sub_40a5eb": null, "4236784:cgc_strchr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strchr(char *v4, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(v4))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v4[v2] == a0)\n
        {\n
            v3 = &v4[v2];\n
            return v3;\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4236942:sub_40a68e": null, "4236944:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[588];\n
    struct struct_1 *field_24c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v6, char *a0)\n
{\n
    char v0;  // [bp-0x21]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v6)\n
    {\n
        if (v1->field_24c)\n
        {\n
            v6 = v1->field_24c;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a0, *(v6)))\n
            v0 = *(v6);\n
        if (!(v0 & 1))\n
            break;\n
        v6 += 1;\n
    }\n
    if (!*(v6))\n
    {\n
        v1->field_24c = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = cgc_strlen(v6);\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= v2)\n
        {\n
            v1->field_24c = 0;\n
            v5 = v6;\n
            return v5;\n
        }\n
        if (cgc_strchr(a0, *((v6 + v4))))\n
            break;\n
        v4 += 1;\n
    }\n
    *((v6 + v4)) = 0;\n
    for (v3 = v4 + 1; v3 < v2; v3 += 1)\n
    {\n
        if (cgc_strchr(a0, *((v6 + v3))))\n
        {\n
            *((v6 + v3)) = 0;\n
        }\n
        else\n
        {\n
            v1->field_24c = v6 + v3;\n
            v5 = v6;\n
            return v5;\n
        }\n
    }\n
    if (v3 == v2)\n
        v1->field_24c = 0;\n
    v5 = v6;\n
    return v5;\n
}\n
", "4237463:sub_40a897": null, "4237472:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (v2 && !a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!v2 && a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (!v2 && !a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(a0);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(a0))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*(v2) >= *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
    }\n
    if (*(v2) && !*(a0))\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!*(v2) && *(a0))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4237822:sub_40a9fe": null, "4237824:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v5, char *a0)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = cgc_strlen(v5);\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = v2;\n
            if (v0 >= cgc_strlen(a0))\n
                break;\n
            v5[v3] = a0[v2];\n
            v3 += 1;\n
            v2 += 1;\n
        }\n
        v5[v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4238007:sub_40aab7": null, "4238016:cgc_memcmp": "int cgc_memcmp(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = v2[v4];\n
        v0 = v2[a0];\n
        if (v1 < v0)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (v1 <= v0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4238169:sub_40ab59": null, "4238176:_Z8RecvDataiPhj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int RecvData(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (a1)\n
    {\n
        for (v4 = 0; v4 < a1; v4 = *(&v3) + v4)\n
        {\n
            v2 = a1 - v4;\n
            v0 = &v3;\n
            if (cgc_receive(v6, a0 + v4, v2))\n
                cgc__terminate();\n
            if (!*(&v3))\n
                cgc__terminate();\n
        }\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4238397:sub_40ac3d": null, "4238400:_Z8SendDataiPhj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int SendData(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (a1)\n
    {\n
        for (v4 = 0; v4 < a1; v4 = *(&v3) + v4)\n
        {\n
            v2 = a1 - v4;\n
            v0 = &v3;\n
            if (cgc_transmit(v6, a0 + v4, v2))\n
                cgc__terminate();\n
            if (!*(&v3))\n
                cgc__terminate();\n
        }\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4238621:sub_40ad1d": null, "4238624:_ZN8CFlashFSC1Ev": "int CFlashFS::__ctor__(unsigned int v0[164])\n
{\n
    unsigned int v1[164];  // eax\n
\n
    v1 = v0;\n
    v1[128] = 0;\n
    v1[163] = 0;\n
    return v0;\n
}\n
", "4238655:sub_40ad3f": null, "4238656:_ZN8CFlashFSD2Ev": "int CFlashFS::__base_dtor__(unsigned int v0)\n
{\n
    return v0;\n
}\n
", "4238664:sub_40ad48": null, "4238672:_ZN8CFlashFS4InitEP9CNORFlash": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[128];\n
    unsigned short field_284;\n
    char padding_286[6];\n
    unsigned int field_28c;\n
    char padding_290[512];\n
    unsigned short field_490;\n
    unsigned short field_492;\n
    unsigned short field_494;\n
    unsigned short field_496;\n
    unsigned short field_498;\n
    unsigned short field_49a;\n
    unsigned short field_49c;\n
    unsigned short field_49e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::Init(struct_0 *v20, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    unsigned int v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned int v5;  // [bp-0x40]\n
    struct_0 *v6;  // [bp-0x3c]\n
    char v7;  // [bp-0x35]\n
    unsigned int v8;  // [bp-0x34]\n
    unsigned short v9;  // [bp-0x2e]\n
    char v10;  // [bp-0x2c]\n
    char v11;  // [bp-0x2b]\n
    unsigned int v12;  // [bp-0x24]\n
    void* v13;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v14;  // [bp-0x1c]\n
    unsigned short v15;  // [bp-0x1b]\n
    unsigned short v16;  // [bp-0x19]\n
    void* v17;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v18;  // [bp-0xa]\n
    char v19;  // [bp-0x9]\n
    struct_0 *v21;  // eax\n
    struct_0 *v22;  // eax\n
    struct_0 *v27;  // eax\n
    struct_0 *v28;  // eax\n
    struct_0 *v29;  // eax\n
    struct_0 *v30;  // ecx\n
    struct_0 *v32;  // eax\n
    struct_0 *v33;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = v20;\n
    v18 = 0;\n
    if (!a0)\n
    {\n
        v19 = 0;\n
        return v19 & 1;\n
    }\n
    else if (CNORFlash::GetSectorCount const() >= 16)\n
    {\n
        v6->field_200 = a0;\n
        for (v17 = 0; v17 < 16; v17 += 1)\n
        {\n
            v21 = v6;\n
            *((520 + &v21->padding_0[0] + 0x8 * v17)) = 0;\n
            *((516 + &v21->padding_0[0] + 0x8 * v17)) = 65535;\n
        }\n
        v22 = v6;\n
        v22->field_284 = 0;\n
        v0 = 5;\n
        if (CNORFlash::ReadData(v22->field_200, 0, &v14) != 5)\n
        {\n
            v19 = 0;\n
            return v19 & 1;\n
        }\n
        if (v14 == 255)\n
        {\n
            v14 = 193;\n
            v15 = 0;\n
            v16 = 5;\n
            v0 = 5;\n
            if (CNORFlash::WriteData(v6->field_200, 0, &v14) != 5)\n
            {\n
                v19 = 0;\n
                return v19 & 1;\n
            }\n
            v18 = 1;\n
        }\n
        cgc_memcpy(&v6->padding_286, &v14, 5);\n
        v1 = v15;\n
        v6->field_28c = CNORFlash::GetBlockSize const(v6->field_200, &v14) * v1 + v16;\n
        v2 = CNORFlash::GetBlockSize const();\n
        v6->field_494 = (0 CONCAT CNORFlash::GetBlocksPerSector const() * v2 - v6->field_28c) /m 3;\n
        v3 = CNORFlash::GetBlockSize const();\n
        v6->field_496 = CNORFlash::GetBlocksPerSector const() * v3 * 3 >> 3;\n
        v6->field_49a = CNORFlash::GetSectorCount const() - 4;\n
        v4 = CNORFlash::GetBlocksPerSector const();\n
        v27 = v6;\n
        v27->field_49e = (CNORFlash::GetSectorCount const() - 4) * v4;\n
        CNORFlash::SectorErase(v27->field_200);\n
        v28 = v6;\n
        v28->field_490 = 0;\n
        v28->field_492 = 0;\n
        v28->field_498 = 0;\n
        for (v13 = 0; v13 < 128; v13 += 1)\n
        {\n
            v29 = v6;\n
            *(&v29->padding_290[4 * v13]) = 65535;\n
            *(&v29->padding_290[2 + 4 * v13]) = 65535;\n
        }\n
        v12 = v6->field_28c;\n
        while (true)\n
        {\n
            v0 = 3;\n
            if (CNORFlash::ReadData(v6->field_200, v12, &v10) != 3)\n
            {\n
                v19 = 0;\n
                return v19 & 1;\n
            }\n
            if (v10 == 255)\n
                break;\n
            if (v10 != 1)\n
            {\n
                if (v10 != 2)\n
                {\n
                    v19 = 0;\n
                    return v19 & 1;\n
                }\n
                v30 = v6;\n
                *(&v30->padding_290[2 + 4 * v30->field_490]) = *(&v11);\n
                *(&v30->padding_290[4 * v30->field_490]) = v30->field_492;\n
                v30->field_490 = v30->field_490 + 1;\n
                if (*(&v11) > v30->field_498)\n
                    v6->field_498 = *(&v11);\n
                if (v6->field_490 >= 128)\n
                {\n
                    v19 = 0;\n
                    return v19 & 1;\n
                }\n
            }\n
            v32 = v6;\n
            v32->field_492 = v32->field_492 + 1;\n
        }\n
        if ((v18 & 1))\n
        {\n
            v6->field_49c = 0;\n
        }\n
        else\n
        {\n
            v9 = 0;\n
            while (true)\n
            {\n
                if (v9 >= v6->field_49e)\n
                {\n
                    v19 = 0;\n
                    return v19 & 1;\n
                }\n
                v8 = CFlashFS::GetAddressForDataID(v6);\n
                v0 = 1;\n
                if (CNORFlash::ReadData(v6->field_200, v8, &v7) != 1)\n
                {\n
                    v19 = 0;\n
                    return v19 & 1;\n
                }\n
                if (v7 == 255)\n
                    break;\n
                v9 += 1;\n
                if (false)\n
                    break;\n
            }\n
            v6->field_49c = v9;\n
        }\n
        v33 = v6;\n
        v33->field_498 = v33->field_498 + 1;\n
        v19 = 1;\n
        return v19 & 1;\n
    }\n
    else\n
    {\n
        v19 = 0;\n
        return v19 & 1;\n
    }\n
}\n
", "4239995:sub_40b27b": null, "4240000:_ZN8CFlashFS19GetAddressForDataIDEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::GetAddressForDataID(struct_0 *v3, unsigned short a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v2 = v4;\n
    v0 = v3;\n
    v1 = CFlashFS::GetAddressForSector(v0, 4, &_GLOBAL_OFFSET_TABLE_);\n
    v6 = v2;\n
    return v1 + a0 * CNORFlash::GetBlockSize const(v0->field_200, 4, &_GLOBAL_OFFSET_TABLE_, v0, v1, v4);\n
}\n
", "4240096:_ZN8CFlashFS9WriteFileEiPhj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::WriteFile(struct_0 *v64, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    struct_0 *v0;  // [bp-0x10c]\n
    unsigned int v1;  // [bp-0x100]\n
    unsigned int v2;  // [bp-0xf0]\n
    unsigned int v3;  // [bp-0xec]\n
    struct_0 *v4;  // [bp-0xe8]\n
    unsigned int v5;  // [bp-0xe4]\n
    char v6;  // [bp-0xdd]\n
    unsigned int v7;  // [bp-0xdc]\n
    unsigned short v8;  // [bp-0xd6]\n
    void* v9;  // [bp-0xd4], Other Possible Types: unsigned int\n
    unsigned short v10;  // [bp-0xce]\n
    char v11;  // [bp-0xcc]\n
    unsigned short v12;  // [bp-0xcb]\n
    unsigned int v13;  // [bp-0xc9]\n
    char v14;  // [bp-0xc5]\n
    unsigned int v15;  // [bp-0xc0]\n
    char v16;  // [bp-0xbc]\n
    char v17;  // [bp-0xb9]\n
    unsigned int v18;  // [bp-0xb4]\n
    unsigned int v19;  // [bp-0xb0]\n
    char v20;  // [bp-0xac]\n
    unsigned short v21;  // [bp-0xa9]\n
    unsigned int v22;  // [bp-0xa0]\n
    char v23;  // [bp-0x9c]\n
    unsigned short v24;  // [bp-0x9b]\n
    unsigned short v25;  // [bp-0x99]\n
    unsigned int v26;  // [bp-0x90]\n
    char v27;  // [bp-0x8c]\n
    unsigned short v28;  // [bp-0x8b]\n
    unsigned short v29;  // [bp-0x89]\n
    char v30;  // [bp-0x84]\n
    char v31;  // [bp-0x83]\n
    char v32;  // [bp-0x81]\n
    unsigned int v33;  // [bp-0x7c]\n
    unsigned int v34;  // [bp-0x78]\n
    unsigned short v35;  // [bp-0x72]\n
    unsigned int v36;  // [bp-0x70]\n
    void* v37;  // [bp-0x6c]\n
    void* v38;  // [bp-0x68], Other Possible Types: unsigned int\n
    unsigned int v39;  // [bp-0x64]\n
    unsigned int v40;  // [bp-0x60]\n
    char v41;  // [bp-0x5c]\n
    char v42;  // [bp-0x59]\n
    void* v43;  // [bp-0x54], Other Possible Types: unsigned int\n
    unsigned int v44;  // [bp-0x50]\n
    unsigned short v45;  // [bp-0x4c]\n
    unsigned short v46;  // [bp-0x4a]\n
    unsigned short v47;  // [bp-0x48]\n
    unsigned short v48;  // [bp-0x46]\n
    unsigned int v49;  // [bp-0x44]\n
    void* v50;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v51;  // [bp-0x3c]\n
    unsigned int v52;  // [bp-0x38]\n
    unsigned short v53;  // [bp-0x32]\n
    unsigned int v54;  // [bp-0x30]\n
    char v55;  // [bp-0x2c]\n
    char v56;  // [bp-0x2b]\n
    char v57;  // [bp-0x29]\n
    char v58;  // [bp-0x25]\n
    unsigned short v59;  // [bp-0x1e]\n
    char v60;  // [bp-0x1c]\n
    char v61;  // [bp-0x18]\n
    unsigned int v62;  // [bp-0x14]\n
    unsigned int v63;  // [bp-0x8]\n
    unsigned int v65;  // ebx\n
    struct_0 *v66;  // ecx\n
    struct_0 *v67;  // ecx\n
    unsigned int v68;  // esi\n
    unsigned int v69;  // ecx\n
    struct_0 *v70;  // ecx\n
    struct_0 *v71;  // eax\n
\n
    v63 = v65;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v64;\n
    if (!(CFlashFS::FindFileDescriptorData(v4, a0) & 1))\n
    {\n
        v62 = -1;\n
        return v62;\n
    }\n
    v59 = *(&v60);\n
    v54 = CFlashFS::GetAddressForHeaderID(v4);\n
    v1 = 8;\n
    if (CNORFlash::ReadData(v4->field_200, v54, &v55) != 8)\n
    {\n
        v62 = -1;\n
        return v62;\n
    }\n
    v53 = *(&v56);\n
    v52 = *(&v61);\n
    if (v52 > *(&v57))\n
        v52 = *(&v57);\n
    v51 = *(&v57);\n
    v50 = 0;\n
    v49 = CNORFlash::GetBlockSize const() - 5;\n
    v48 = 65535;\n
    v47 = v53;\n
    v46 = v53;\n
    for (v45 = 0; v50 < v52; v50 = v43 + v50)\n
    {\n
        v44 = v52 - v50;\n
        v43 = 0;\n
        v45 = 5;\n
        if (!v50)\n
        {\n
            v45 += v58;\n
            v43 = v49 - v58;\n
        }\n
        else\n
        {\n
            v43 = v49;\n
        }\n
        if (v43 <= v44)\n
        {\n
            v40 = CFlashFS::GetAddressForDataID(v4, v46);\n
            v1 = 5;\n
            if (CNORFlash::ReadData(v4->field_200, v40, &v41) != 5)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
            else if (v41 == 2)\n
            {\n
                v48 = v46;\n
                v46 = *(&v42);\n
                v45 = 5;\n
            }\n
            else\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
        }\n
        else\n
        {\n
            v45 += v44;\n
            break;\n
        }\n
    }\n
    if (!v52)\n
        v45 = v58 + 5;\n
    v39 = a2;\n
    for (v38 = 0; v39 > 0; v39 -= v36)\n
    {\n
        v37 = 0;\n
        v36 = v39;\n
        v35 = 65535;\n
        v2 = v45 + v36;\n
        if (v2 > CNORFlash::GetBlockSize const())\n
            v36 = CNORFlash::GetBlockSize const() - v45;\n
        if (v52 >= v51)\n
        {\n
            if (v46 != 65535)\n
            {\n
                v18 = CFlashFS::GetAddressForDataID(v4, v46);\n
                v1 = 5;\n
                if (CNORFlash::ReadData(v4->field_200, v18, &v16) != 5)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                v35 = *(&v17);\n
            }\n
            else\n
            {\n
                v46 = CFlashFS::GetNextDataBlockID();\n
                v23 = 2;\n
                v25 = 65535;\n
                v24 = v48;\n
                v35 = 65535;\n
                v22 = CFlashFS::GetAddressForDataID(v4, v46);\n
                v1 = 5;\n
                if (CNORFlash::WriteData(v4->field_200, v22, &v23) != 5)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                v19 = CFlashFS::GetAddressForDataID(v4, v48);\n
                v1 = 5;\n
                if (CNORFlash::ReadData(v4->field_200, v19, &v20) != 5)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                else if (v21 != 65535)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                else\n
                {\n
                    v21 = v46;\n
                    v1 = 5;\n
                    if (CNORFlash::WriteData(v4->field_200, v19, &v20) != 5)\n
                    {\n
                        v62 = -1;\n
                        return v62;\n
                    }\n
                }\n
            }\n
            v15 = CFlashFS::GetAddressForDataID(v4, v46);\n
            v1 = v36;\n
            if (CNORFlash::WriteData(v4->field_200, v15 + v45, a1 + v38) != v36)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
        }\n
        else\n
        {\n
            v34 = CNORFlash::GetBlockSize const();\n
            v33 = CFlashFS::GetAddressForDataID(v4, v46);\n
            v1 = 5;\n
            if (CNORFlash::ReadData(v4->field_200, v33, &v30) != 5)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
            v66 = v4;\n
            v35 = *(&v32);\n
            v27 = 2;\n
            v28 = *(&v31);\n
            v29 = *(&v32);\n
            v1 = v45 - 5;\n
            if (CNORFlash::ReadData(v66->field_200, v33 + 5, v66) != v45 - 5)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
            cgc_memcpy(&v4->padding_0[5 + v45], a1 + v38, v36);\n
            if (v45 + v36 < v34)\n
            {\n
                v67 = v4;\n
                v68 = v67->field_200;\n
                v69 = &v67->padding_0[5 + v45 + v36];\n
                v1 = v34 - (v45 + v36);\n
                if (CNORFlash::ReadData(v68, v33 + v45 + v36, v69) != v34 - (v45 + v36))\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
            }\n
            v26 = CNORFlash::GetBlocksPerSector const() * 4 + v46;\n
            CNORFlash::BlockErase(v4->field_200);\n
            v1 = 5;\n
            if (CNORFlash::WriteData(v4->field_200, v33, &v27) != 5)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
            v70 = v4;\n
            v1 = v34 - 5;\n
            if (CNORFlash::WriteData(v70->field_200, v33 + 5, v70) != v34 - 5)\n
            {\n
                v62 = -1;\n
                return v62;\n
            }\n
        }\n
        v48 = v46;\n
        v46 = v35;\n
        v45 = 5;\n
        v52 = v36 + v52;\n
        v38 = v36 + v38;\n
    }\n
    if (v52 > v51)\n
    {\n
        v11 = 2;\n
        v12 = *(&v56);\n
        v13 = v52;\n
        v14 = v58;\n
        v55 = 1;\n
        v1 = 8;\n
        if (CNORFlash::WriteData(v4->field_200, v54, &v55) != 8)\n
        {\n
            v62 = -1;\n
            return v62;\n
        }\n
        v10 = CFlashFS::GetNewObjHeaderID();\n
        v9 = 0;\n
        while (true)\n
        {\n
            if (v9 >= 128)\n
            {\n
LABEL_40bce5:\n
                if (v9 == 128)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                v9 = 0;\n
                while (v9 < 16)\n
                {\n
                    if (*(&v4[1].padding_0[8 * v9]) == v59)\n
                        *(&v4[1].padding_0[8 * v9]) = v10;\n
                    v9 += 1;\n
                    goto LABEL_40bd6c;\n
                }\n
            }\n
            else if (*(&v4[1].padding_0[142 + 4 * v9]) != v59)\n
            {\n
                v9 += 1;\n
            }\n
            else\n
            {\n
                v8 = CFlashFS::GetNewFileTableID();\n
                v0 = v4;\n
                v7 = CFlashFS::GetAddressForFileTableID(v0);\n
                v6 = 1;\n
                v1 = 1;\n
                if (CNORFlash::WriteData(v4->field_200, v7, &v6) != 1)\n
                {\n
                    v62 = -1;\n
                    return v62;\n
                }\n
                v71 = v4;\n
                *(&v71[1].padding_0[142 + 4 * v9]) = v10;\n
                *(&v71[1].padding_0[140 + 4 * v9]) = v8;\n
                goto LABEL_40bce5;\n
            }\n
        }\n
LABEL_40bd6c:\n
        v5 = CFlashFS::GetAddressForHeaderID(v4);\n
        v1 = 8;\n
        if (CNORFlash::WriteData(v4->field_200, v5, &v11) != 8)\n
        {\n
            v62 = -1;\n
            return v62;\n
        }\n
    }\n
    *(&v4[1].padding_0[4 + 8 * a0]) = v52;\n
    v62 = v38;\n
    return v62;\n
}\n
", "4242954:sub_40be0a": null, "4242960:_ZN8CFlashFS22FindFileDescriptorDataEsPNS_21FILE_DESCRIPTOR_TABLEE": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[2];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int CFlashFS::FindFileDescriptorData(unsigned int v2, unsigned short a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v2;\n
    if (a0 >= 0 && a0 < 16)\n
    {\n
        if (*((v0 + (a0 << 3) + 516)) != 65535)\n
        {\n
            v3 = v0;\n
            a1->field_0 = *((v3 + a0 * 8 + 516));\n
            a1->field_4 = *((v3 + a0 * 8 + 520));\n
            v1 = 1;\n
            return v1 & 1;\n
        }\n
        v1 = 0;\n
        return v1 & 1;\n
    }\n
    v1 = 0;\n
    return v1 & 1;\n
}\n
", "4243107:sub_40bea3": null, "4243120:_ZN8CFlashFS21GetAddressForHeaderIDEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::GetAddressForHeaderID(struct_0 *v5, unsigned short a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v0 = v2->field_200;\n
    v3 = CNORFlash::GetBlockSize const();\n
    v0 = v2->field_200;\n
    v8 = v4;\n
    return CNORFlash::GetBlocksPerSector const() * v3 + a0 * 8;\n
}\n
", "4243217:sub_40bf11": null, "4243232:_ZN8CFlashFS18GetNextDataBlockIDEv": "typedef struct struct_0 {\n
    char padding_0[1180];\n
    unsigned short field_49c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::GetNextDataBlockID(unsigned short v4[592])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    unsigned short v3;  // [bp-0xa]\n
    unsigned short v5[592];  // ecx\n
    unsigned short v6;  // ax\n
    struct_0 *v7;  // ecx\n
    unsigned short v8;  // ax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v6 = v5[590];\n
    v5[590] = v6 + 1;\n
    v3 = v6;\n
    v7 = v5[591];\n
    if (v3 >= v7)\n
    {\n
        v0 = *(&v2);\n
        CFlashFS::CleanDataBlocks();\n
    }\n
    v8 = v7->field_49c;\n
    v7->field_49c = v8 + 1;\n
    v3 = v8;\n
    return v3;\n
}\n
", "4243359:sub_40bf9f": null, "4243360:_ZN8CFlashFS17GetNewObjHeaderIDEv": "int CFlashFS::GetNewObjHeaderID(unsigned short v3[589])\n
{\n
    unsigned short v0[589];  // [bp-0xc]\n
    unsigned short v1;  // [bp-0x8]\n
    unsigned short v2;  // [bp-0x6]\n
    unsigned short v4[589];  // ecx\n
    unsigned int v5;  // eax\n
    unsigned short v7[589];  // ecx\n
\n
    v4 = v3;\n
    *(&v0[0]) = v4;\n
    v5 = v4[588];\n
    if (v5 >= v4[587])\n
    {\n
        v2 = 65535;\n
        return v2;\n
    }\n
    v7 = v0;\n
    *(&v5) = v7[588];\n
    v7[588] = v5 + 1;\n
    v1 = v5;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4243453:sub_40bffd": null, "4243456:_ZN8CFlashFS17GetNewFileTableIDEv": "int CFlashFS::GetNewFileTableID(unsigned short v3[586])\n
{\n
    unsigned short v0[586];  // [bp-0xc]\n
    unsigned short v1;  // [bp-0x8]\n
    unsigned short v2;  // [bp-0x6]\n
    unsigned short v4[586];  // eax\n
\n
    *(&v0[0]) = v3;\n
    if (v0[584] >= 128)\n
    {\n
        v2 = 65535;\n
        return v2;\n
    }\n
    v1 = v0[585];\n
    while (true)\n
    {\n
        if (v1 >= 128)\n
            v1 = 0;\n
        if (v0[329 + 2 * v1] == 65535)\n
            break;\n
        v1 += 1;\n
        if (false)\n
            break;\n
    }\n
    if (v0[585] < 128)\n
    {\n
        v4 = v0;\n
        v4[585] = v4[585] + 1;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4243652:sub_40c0c4": null, "4243664:_ZN8CFlashFS24GetAddressForFileTableIDEt": "typedef struct struct_0 {\n
    char padding_0[652];\n
    unsigned int field_28c;\n
} struct_0;\n
\n
int CFlashFS::GetAddressForFileTableID(struct_0 *v0, unsigned short a0)\n
{\n
    return v0->field_28c + a0 * 3;\n
}\n
", "4243694:sub_40c0ee": null, "4243696:_ZN8CFlashFS8ReadFileEiPhj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::ReadFile(struct_0 *v34, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x90]\n
    unsigned int v1;  // [bp-0x88]\n
    unsigned int v2;  // [bp-0x84]\n
    struct_0 *v3;  // [bp-0x80]\n
    char v4;  // [bp-0x7c]\n
    char v5;  // [bp-0x79]\n
    unsigned int v6;  // [bp-0x70]\n
    unsigned int v7;  // [bp-0x6c]\n
    void* v8;  // [bp-0x68], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x64]\n
    unsigned int v10;  // [bp-0x60]\n
    char v11;  // [bp-0x5c]\n
    char v12;  // [bp-0x59]\n
    void* v13;  // [bp-0x54], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x50]\n
    unsigned short v15;  // [bp-0x4c]\n
    unsigned short v16;  // [bp-0x4a]\n
    unsigned short v17;  // [bp-0x48]\n
    unsigned short v18;  // [bp-0x46]\n
    unsigned int v19;  // [bp-0x44]\n
    void* v20;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v21;  // [bp-0x3c]\n
    unsigned int v22;  // [bp-0x38]\n
    unsigned short v23;  // [bp-0x32]\n
    unsigned int v24;  // [bp-0x30]\n
    char v25;  // [bp-0x2c]\n
    char v26;  // [bp-0x2b]\n
    char v27;  // [bp-0x29]\n
    char v28;  // [bp-0x25]\n
    unsigned short v29;  // [bp-0x1e]\n
    char v30;  // [bp-0x1c]\n
    char v31;  // [bp-0x18]\n
    unsigned int v32;  // [bp-0x10]\n
    unsigned int v33;  // [bp-0x8]\n
    unsigned int v35;  // ebx\n
\n
    v33 = v35;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v34;\n
    if (!(CFlashFS::FindFileDescriptorData(v3, a0, &v30) & 1))\n
    {\n
        v32 = -1;\n
        return v32;\n
    }\n
    v29 = *(&v30);\n
    v24 = CFlashFS::GetAddressForHeaderID(v3, v29);\n
    v0 = 8;\n
    if (CNORFlash::ReadData(v3->field_200, v24, &v25) != 8)\n
    {\n
        v32 = -1;\n
        return v32;\n
    }\n
    v23 = *(&v26);\n
    v22 = *(&v31);\n
    if (v22 > *(&v27))\n
    {\n
        v22 = *(&v27);\n
        v32 = -1;\n
        return v32;\n
    }\n
    if (v22 + a2 > *(&v27))\n
        a2 = *(&v27) - v22;\n
    if (!a2)\n
    {\n
        v32 = 0;\n
        return v32;\n
    }\n
    v21 = *(&v27);\n
    v20 = 0;\n
    v19 = CNORFlash::GetBlockSize const() - 5;\n
    v18 = 65535;\n
    v17 = v23;\n
    v16 = v23;\n
    for (v15 = 0; v20 < v22; v20 = v13 + v20)\n
    {\n
        v14 = v22 - v20;\n
        v13 = 0;\n
        v15 = 5;\n
        if (v20)\n
        {\n
            v13 = v19;\n
        }\n
        else\n
        {\n
            v15 += v28;\n
            v13 = v19 - v28;\n
        }\n
        if (v13 <= v14)\n
        {\n
            v10 = CFlashFS::GetAddressForDataID(v3, v16);\n
            v0 = 5;\n
            if (CNORFlash::ReadData(v3->field_200, v10, &v11) != 5)\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
            else if (v11 == 2)\n
            {\n
                v15 = 5;\n
                v18 = v16;\n
                v16 = *(&v12);\n
            }\n
            else\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
        }\n
        else\n
        {\n
            v15 += v14;\n
            break;\n
        }\n
    }\n
    if (!v22)\n
        v15 = v28 + 5;\n
    v9 = a2;\n
    v8 = 0;\n
    while (true)\n
    {\n
        if (v9 > 0)\n
        {\n
            v7 = v9;\n
            v1 = v15 + v7;\n
            if (v1 > CNORFlash::GetBlockSize const())\n
                v7 = CNORFlash::GetBlockSize const() - v15;\n
            if (v16 == 65535)\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
            v6 = CFlashFS::GetAddressForDataID(v3, v16);\n
            v0 = 5;\n
            if (CNORFlash::ReadData(v3->field_200, v6, &v4) != 5)\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
            if (v4 != 2)\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
            v0 = v7;\n
            if (CNORFlash::ReadData(v3->field_200, v6 + v15, a1 + v8) != v7)\n
            {\n
                v32 = -1;\n
                return v32;\n
            }\n
            v16 = *(&v5);\n
            v15 = 5;\n
            v9 -= v7;\n
            v8 = v7 + v8;\n
            v22 = v7 + v22;\n
        }\n
        else\n
        {\n
            *(&v3[1].padding_0[4 + 8 * a0]) = v22;\n
            v32 = v8;\n
            return v32;\n
        }\n
    }\n
}\n
", "4244729:sub_40c4f9": null, "4244736:_ZN8CFlashFS10DeleteFileEPKc": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[128];\n
    unsigned short field_284;\n
    char padding_286[522];\n
    unsigned short field_490;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::DeleteFile(struct_0 *v21, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x54]\n
    struct_0 *v2;  // [bp-0x50]\n
    void* v3;  // [bp-0x4c], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x45]\n
    unsigned int v5;  // [bp-0x44]\n
    void* v6;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned short v7;  // [bp-0x3a]\n
    unsigned int v8;  // [bp-0x38]\n
    char v9;  // [bp-0x34]\n
    char v10;  // [bp-0x31]\n
    unsigned short v11;  // [bp-0x2c]\n
    unsigned short v12;  // [bp-0x2a]\n
    unsigned int v13;  // [bp-0x28]\n
    char v14;  // [bp-0x24]\n
    char v15;  // [bp-0x23]\n
    char v16;  // [bp-0x18]\n
    char v17;  // [bp-0x12]\n
    unsigned int v18;  // [bp-0x10]\n
    unsigned int v19;  // [bp-0xc]\n
    unsigned int v20;  // [bp-0x8]\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // esi\n
    struct_0 *v24;  // eax\n
    struct_0 *v25;  // eax\n
\n
    v20 = v22;\n
    v19 = v23;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v21;\n
    v0 = &v16;\n
    if (!(CFlashFS::FindFileInFlashTable(v2, a0, &v17) & 1))\n
    {\n
        v18 = -1;\n
    }\n
    else\n
    {\n
        v13 = CFlashFS::GetAddressForHeaderID(v2, *(&v17));\n
        v0 = 8;\n
        if (CNORFlash::ReadData(v2->field_200, v13, &v14) != 8)\n
        {\n
            v18 = -1;\n
        }\n
        else\n
        {\n
            v12 = *(&v15);\n
            v11 = 65535;\n
            while (true)\n
            {\n
                v8 = CFlashFS::GetAddressForDataID(v2, v12);\n
                v0 = 5;\n
                if (CNORFlash::ReadData(v2->field_200, v8, &v9) != 5)\n
                {\n
                    v18 = -1;\n
                    break;\n
                }\n
                if (v9 != 2)\n
                {\n
                    v18 = -1;\n
                    break;\n
                }\n
                v9 = 1;\n
                v0 = 5;\n
                if (CNORFlash::WriteData(v2->field_200, v8, &v9) != 5)\n
                {\n
                    v18 = -1;\n
                    break;\n
                }\n
                v12 = *(&v10);\n
                if (v12 == 65535)\n
                {\n
LABEL_40c6a2:\n
                    v14 = 1;\n
                    v0 = 8;\n
                    if (CNORFlash::WriteData(v2->field_200, v13, &v14) != 8)\n
                    {\n
                        v18 = -1;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v7 = 65535;\n
                        for (v6 = 0; v6 < 128; v6 += 1)\n
                        {\n
                            if (*(&v2->padding_286[12 + 4 * v6]) == *(&v17))\n
                            {\n
                                v24 = v2;\n
                                *(&v24->padding_286[12 + 4 * v6]) = 65535;\n
                                v7 = *(&v24->padding_286[10 + 4 * v6]);\n
                                *(&v24->padding_286[10 + 4 * v6]) = 65535;\n
                                v24->field_490 = v24->field_490 - 1;\n
                                break;\n
                            }\n
                        }\n
                        if (v7 == 65535)\n
                        {\n
                            v18 = -1;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v5 = CFlashFS::GetAddressForFileTableID(v2, v7);\n
                            v4 = 1;\n
                            v0 = 1;\n
                            if (CNORFlash::WriteData(v2->field_200, v5, &v4) != 1)\n
                            {\n
                                v18 = -1;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                for (v3 = 0; v3 < 16; v3 += 1)\n
                                {\n
                                    if (*((516 + &v2->padding_0[0] + 0x8 * v3)) == *(&v17))\n
                                    {\n
                                        v25 = v2;\n
                                        *((516 + &v25->padding_0[0] + 0x8 * v3)) = 65535;\n
                                        *((520 + &v25->padding_0[0] + 0x8 * v3)) = 0;\n
                                        v25->field_284 = v25->field_284 - 1;\n
                                    }\n
                                }\n
                                v18 = 0;\n
                                break;\n
                            }\n
                        }\n
                    }\n
                }\n
                else if (!1)\n
                {\n
                    goto LABEL_40c6a2;\n
                }\n
            }\n
        }\n
    }\n
    return v18;\n
}\n
", "4245607:sub_40c867": null, "4245616:_ZN8CFlashFS20FindFileInFlashTableEPKcPtPj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[652];\n
    unsigned short field_490;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::FindFileInFlashTable(struct_0 *v16, char *a0, unsigned short *a1, unsigned int *a2)\n
{\n
    struct_0 *v0;  // [bp-0x14c]\n
    unsigned int v1;  // [bp-0x140]\n
    unsigned int v2;  // [bp-0x130]\n
    struct_0 *v3;  // [bp-0x12c]\n
    unsigned int v4;  // [bp-0x128]\n
    char v5;  // [bp-0x124]\n
    char v6;  // [bp-0x123]\n
    char v7;  // [bp-0x121]\n
    char v8;  // [bp-0x11d]\n
    unsigned int v9;  // [bp-0x11c]\n
    void* v10;  // [bp-0x118], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x114], Other Possible Types: unsigned int\n
    char v12;  // [bp-0x10e]\n
    char v13;  // [bp-0x10d]\n
    char v14;  // [bp-0xd]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
\n
    v15 = v17;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v16;\n
    v12 = cgc_strlen(a0);\n
    v11 = 0;\n
    for (v10 = 0; v10 < 128; v10 += 1)\n
    {\n
        if (v11 >= v3->field_490)\n
            break;\n
        if (*(&v3->padding_204[142 + 4 * v10]) != 65535)\n
        {\n
            v11 += 1;\n
            v0 = v3;\n
            v9 = CFlashFS::GetAddressForHeaderID(v0, *(&v0->padding_204[142 + 4 * v10]));\n
            v1 = 8;\n
            if (CNORFlash::ReadData(v3->field_200, v9, &v5) != 8)\n
            {\n
                v14 = 0;\n
                return v14 & 1;\n
            }\n
            else if (v12 == v8)\n
            {\n
                v4 = CFlashFS::GetAddressForDataID(v3, *(&v6)) + 5;\n
                v1 = v8;\n
                if (CNORFlash::ReadData(v3->field_200, v4, &v13) != v8)\n
                {\n
                    v14 = 0;\n
                    return v14 & 1;\n
                }\n
                (&v13)[v8] = 0;\n
                if (!cgc_strcmp(a0, &v13))\n
                {\n
                    *(a1) = *(&v3->padding_204[142 + 4 * v10]);\n
                    *(a2) = *(&v7);\n
                    v14 = 1;\n
                    return v14 & 1;\n
                }\n
            }\n
        }\n
    }\n
    v14 = 0;\n
    return v14 & 1;\n
}\n
", "4246214:sub_40cac6": null, "4246224:_ZN8CFlashFS8OpenFileEPKch": "typedef struct struct_0 {\n
    char padding_0[644];\n
    unsigned short field_284;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::OpenFile(struct_0 *v7, char *a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned short v4;  // [bp-0x14]\n
    char v5;  // [bp-0x11]\n
    unsigned int v6;  // [bp-0x10]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v7;\n
    v5 = 0;\n
    if (v1->field_284 >= 16)\n
    {\n
        v6 = -3;\n
        return v6;\n
    }\n
    if (!(CFlashFS::FindFileInFlashTable(v1, a0, &v4, &v3) & 1))\n
    {\n
        if (a1 != 2)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        else if (!(CFlashFS::CreateNewFile(v1, a0, &v4) & 1))\n
        {\n
            v6 = -2;\n
            return v6;\n
        }\n
    }\n
    v2 = CFlashFS::GetNewFileDescriptor();\n
    if (v2 == -1)\n
    {\n
        v6 = -0x4;\n
        return v6;\n
    }\n
    *(&v1->padding_0[516 + 8 * v2]) = v4;\n
    if (a1 == 4)\n
        *(&v1->padding_0[520 + 8 * v2]) = v3;\n
    else\n
        *(&v1->padding_0[520 + 8 * v2]) = 0;\n
    v6 = v2;\n
    return v6;\n
}\n
", "4246546:sub_40cc12": null, "4246560:_ZN8CFlashFS13CreateNewFileEPKcPtPj": "typedef struct struct_0 {\n
    char padding_0[1168];\n
    unsigned short field_490;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::CreateNewFile(struct_0 *v6, unsigned int a0, unsigned short *a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned short v3;  // [bp-0xe]\n
    unsigned short v4;  // [bp-0xc]\n
    char v5;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v6;\n
    if (v2->field_490 >= 128)\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    v4 = CFlashFS::GetNewObjHeaderID(v2);\n
    if (v4 == 65535)\n
    {\n
        CFlashFS::CleanObjHeaderTable();\n
        v4 = CFlashFS::GetNewObjHeaderID(v2);\n
    }\n
    if (v4 == 65535)\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    v3 = CFlashFS::GetNewFileTableID(v2);\n
    if (v3 == 65535)\n
    {\n
        CFlashFS::CleanFileTable();\n
        v3 = CFlashFS::GetNewFileTableID(v2);\n
    }\n
    if (v3 == 65535)\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    v0 = v4;\n
    if (!(CFlashFS::CreateNewObject(v2, a0, v3) & 1))\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    *(a1) = v4;\n
    *(a2) = 0;\n
    v5 = 1;\n
    return v5 & 1;\n
}\n
", "4246899:sub_40cd73": null, "4246912:_ZN8CFlashFS20GetNewFileDescriptorEv": "typedef struct struct_0 {\n
    char padding_0[644];\n
    unsigned short field_284;\n
} struct_0;\n
\n
int CFlashFS::GetNewFileDescriptor(struct_0 *v3)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    struct_0 *v4;  // eax\n
\n
    v0 = v3;\n
    if (v0->field_284 >= 16)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= 16)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        else if (*(&v0->padding_0[516 + 8 * v1]) != 65535)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v4 = v0;\n
            v4->field_284 = v4->field_284 + 1;\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4247063:sub_40ce17": null, "4247072:_ZN8CFlashFS9CloseFileEi": "typedef struct struct_0 {\n
    char padding_0[644];\n
    unsigned short field_284;\n
} struct_0;\n
\n
int CFlashFS::CloseFile(struct_0 *v2, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    struct_0 *v3;  // eax\n
\n
    v0 = v2;\n
    if (a0 < 0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    else if (a0 >= 16)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    else if (*(&v0->padding_0[516 + 8 * a0]) != 65535)\n
    {\n
        v3 = v0;\n
        *(&v3->padding_0[516 + 8 * a0]) = 65535;\n
        *(&v3->padding_0[520 + 8 * a0]) = 0;\n
        v3->field_284 = v3->field_284 - 1;\n
        v1 = a0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
}\n
", "4247233:sub_40cec1": null, "4247248:_ZN8CFlashFS19GetFileTableAddressEv": "typedef struct struct_0 {\n
    char padding_0[652];\n
    unsigned int field_28c;\n
} struct_0;\n
\n
int CFlashFS::GetFileTableAddress(struct_0 *v0)\n
{\n
    return v0->field_28c;\n
}\n
", "4247265:sub_40cee1": null, "4247280:_ZN8CFlashFS19CleanObjHeaderTableEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[652];\n
    unsigned short field_490;\n
    char padding_492[8];\n
    unsigned short field_49a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::CleanObjHeaderTable(struct_0 *v23)\n
{\n
    struct_0 *v0;  // [bp-0x7c]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    unsigned int v4;  // [bp-0x5c]\n
    struct_0 *v5;  // [bp-0x58]\n
    char v6;  // [bp-0x54]\n
    void* v7;  // [bp-0x4c], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x48]\n
    unsigned int v9;  // [bp-0x44]\n
    unsigned int v10;  // [bp-0x40]\n
    unsigned int v11;  // [bp-0x3c]\n
    unsigned int v12;  // [bp-0x38]\n
    char v13;  // [bp-0x34]\n
    void* v14;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x24]\n
    unsigned int v16;  // [bp-0x20]\n
    void* v17;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v19;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v20;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v21;  // [bp-0xa]\n
    char v22;  // [bp-0x9]\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v23;\n
    v21 = 0;\n
    v20 = 0;\n
    v19 = 0;\n
    v18 = 0;\n
    v17 = 0;\n
    do\n
    {\n
        v0 = v5;\n
        v16 = CFlashFS::GetAddressForSector(v0);\n
        v15 = CFlashFS::GetAddressForSector(v5);\n
        v14 = 0;\n
        if (!v19)\n
            v19 = v5->field_49a;\n
        v18 = v5->field_49a + 1;\n
        for (v14 = v20; v17 < v5->field_490; v14 += 1)\n
        {\n
            if (*(&v5->padding_204[142 + 4 * v14]) != 65535)\n
            {\n
                if (v14 >= 128)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                if (v16 + 8 > v15)\n
                    break;\n
                v0 = v5;\n
                v12 = CFlashFS::GetAddressForFileTableID(v0, *(&v0->padding_204[142 + 4 * v14]));\n
                v1 = 8;\n
                if (CNORFlash::ReadData(v5->field_200, v12, &v13) != 8)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                v1 = 8;\n
                if (CNORFlash::WriteData(v5->field_200, v16, &v13) != 8)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                v16 += 8;\n
                v17 += 1;\n
            }\n
        }\n
        if (v17 == v5->field_490)\n
            v21 = 1;\n
        v20 = v14;\n
        v5->field_49a = CFlashFS::GetNextScratchSector();\n
    } while (((v21 ^ 255) & 1));\n
    CNORFlash::SectorErase(v5->field_200);\n
    CNORFlash::SectorErase(v5->field_200);\n
    CNORFlash::SectorErase(v5->field_200);\n
    v11 = CFlashFS::GetAddressForHeaderID(v5, 0);\n
    v3 = CNORFlash::GetBlockSize const(v5->field_200);\n
    v10 = (CNORFlash::GetBlocksPerSector const() * v3 >> 3) * 8;\n
    v20 = 0;\n
    v17 = 0;\n
    while (true)\n
    {\n
        v9 = CFlashFS::GetAddressForSector(v5);\n
        v8 = v9 + v10;\n
        v19 += 1;\n
        v7 = 0;\n
        for (v7 = v20; v17 < v5->field_490; v7 += 1)\n
        {\n
            if (*(&v5->padding_204[142 + 4 * v7]) != 65535)\n
            {\n
                if (v7 >= 128)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                if (v9 + 8 > v8)\n
                    break;\n
                v1 = 8;\n
                if (CNORFlash::ReadData(v5->field_200, v9, &v6) != 8)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                v1 = 8;\n
                if (CNORFlash::WriteData(v5->field_200, v11, &v6) != 8)\n
                {\n
                    v22 = 0;\n
                    return v22 & 1;\n
                }\n
                *(&v5->padding_204[142 + 4 * v7]) = v17;\n
                v17 += 1;\n
                v9 += 8;\n
                v11 += 8;\n
            }\n
        }\n
        v20 = v7;\n
        if (v17 == v5->field_490)\n
            break;\n
        v2 = v19;\n
        if (v2 >= CNORFlash::GetSectorCount const())\n
            v19 = CNORFlash::GetSectorCount const() - 4;\n
        if (false)\n
            break;\n
    }\n
    CFlashFS::CleanFileTable();\n
    v22 = 1;\n
    return v22 & 1;\n
}\n
", "4248477:sub_40d39d": null, "4248480:_ZN8CFlashFS14CleanFileTableEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[652];\n
    unsigned short field_490;\n
    unsigned short field_492;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::CleanFileTable(struct_0 *v13)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    struct_0 *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x24]\n
    unsigned short v4;  // [bp-0x23]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned short v6;  // [bp-0x1a]\n
    unsigned int v7;  // [bp-0x18]\n
    char v8;  // [bp-0x14]\n
    unsigned short v9;  // [bp-0x13]\n
    unsigned short v10;  // [bp-0x11]\n
    char v11;  // [bp-0x9]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    struct_0 *v15;  // eax\n
    struct_0 *v16;  // eax\n
    struct_0 *v17;  // eax\n
    struct_0 *v18;  // eax\n
\n
    v12 = v14;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v13;\n
    CNORFlash::SectorErase(v2->field_200);\n
    v8 = 193;\n
    v9 = 0;\n
    v10 = 5;\n
    v0 = 5;\n
    if (CNORFlash::WriteData(v2->field_200, 0, &v8) != 5)\n
    {\n
        v11 = 0;\n
        return v11 & 1;\n
    }\n
    v7 = CFlashFS::GetFileTableAddress(v2);\n
    v6 = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 < v2->field_490)\n
        {\n
            do\n
            {\n
                if (v6 >= 128)\n
                {\n
                    v11 = 0;\n
                    return v11 & 1;\n
                }\n
                if (*(&v2->padding_204[142 + 4 * v6]) != 65535)\n
                {\n
                    v15 = v2;\n
                    *((658 + &v15->padding_0[0] + 0x4 * v5)) = *(&v15->padding_204[142 + 4 * v6]);\n
                    *((656 + &v15->padding_0[0] + 0x4 * v5)) = v5;\n
                    break;\n
                }\n
                v6 += 1;\n
            } while (true);\n
            v16 = v2;\n
            v3 = 2;\n
            v4 = *(&v16->padding_204[142 + 4 * v6]);\n
            v0 = 3;\n
            if (CNORFlash::WriteData(v16->field_200, v7, &v3) != 3)\n
            {\n
                v11 = 0;\n
                return v11 & 1;\n
            }\n
            v7 += 3;\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v17 = v2;\n
            v17->field_492 = v17->field_490;\n
            for (v6 = v17->field_492; v6 < 128; v6 += 1)\n
            {\n
                v18 = v2;\n
                *(&v18->padding_204[142 + 4 * v6]) = 65535;\n
                *(&v18->padding_204[140 + 4 * v6]) = 65535;\n
            }\n
            v11 = 1;\n
            return v11 & 1;\n
        }\n
    }\n
}\n
", "4249007:sub_40d5af": null, "4249008:_ZN8CFlashFS15CreateNewObjectEPKctt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[652];\n
    unsigned short field_490;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::CreateNewObject(struct_0 *v17, char *a0, unsigned short a1, unsigned short a2)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    char v4;  // [bp-0x2c]\n
    unsigned short v5;  // [bp-0x2b]\n
    void* v6;  // [bp-0x29]\n
    char v7;  // [bp-0x25]\n
    unsigned int v8;  // [bp-0x20]\n
    char v9;  // [bp-0x1c]\n
    unsigned short v10;  // [bp-0x1b]\n
    unsigned short v11;  // [bp-0x19]\n
    unsigned short v12;  // [bp-0x16]\n
    void* v13;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v14;  // [bp-0xe]\n
    char v15;  // [bp-0xd]\n
    unsigned int v16;  // [bp-0x8]\n
    unsigned int v18;  // ebx\n
    struct_0 *v19;  // eax\n
\n
    v16 = v18;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v17;\n
    v14 = cgc_strlen(a0);\n
    for (v13 = 0; v13 < 128; v13 += 1)\n
    {\n
        if (*((658 + &v2->padding_0[0] + 0x4 * v13)) == 65535)\n
        {\n
            v19 = v2;\n
            *(&v19->padding_204[142 + 4 * v13]) = a2;\n
            *(&v19->padding_204[140 + 4 * v13]) = a1;\n
            v19->field_490 = v19->field_490 + 1;\n
            break;\n
        }\n
    }\n
    v12 = CFlashFS::GetNextDataBlockID(v2);\n
    v9 = 2;\n
    v10 = 0;\n
    v11 = 65535;\n
    v8 = CFlashFS::GetAddressForDataID(v2, v12);\n
    v0 = 5;\n
    if (CNORFlash::WriteData(v2->field_200, v8, &v9) != 5)\n
    {\n
        v15 = 0;\n
        return v15 & 1;\n
    }\n
    v0 = v14;\n
    if (CNORFlash::WriteData(v2->field_200, v8 + 5, a0) != v14)\n
    {\n
        v15 = 0;\n
        return v15 & 1;\n
    }\n
    v4 = 2;\n
    v5 = v12;\n
    v6 = 0;\n
    v7 = v14;\n
    v3 = CFlashFS::GetAddressForHeaderID(v2, a2);\n
    v0 = 8;\n
    if (CNORFlash::WriteData(v2->field_200, v3, &v4) != 8)\n
    {\n
        v15 = 0;\n
        return v15 & 1;\n
    }\n
    v15 = 1;\n
    return v15 & 1;\n
}\n
", "4249506:sub_40d7a2": null, "4249520:_ZN8CFlashFS19GetAddressForSectorEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::GetAddressForSector(struct_0 *v5, unsigned short a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v0 = v2->field_200;\n
    v3 = CNORFlash::GetBlockSize const();\n
    v0 = v2->field_200;\n
    v8 = v4;\n
    return a0 * CNORFlash::GetBlocksPerSector const() * v3;\n
}\n
", "4249615:sub_40d80f": null, "4249616:_ZN8CFlashFS20GetNextScratchSectorEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned int field_200;\n
    char padding_204[662];\n
    unsigned short field_49a;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::GetNextScratchSector(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ecx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v2->field_49a = v2->field_49a + 1;\n
    v3 = v2->field_49a;\n
    if (v3 >= CNORFlash::GetSectorCount const())\n
        v2->field_49a = CNORFlash::GetSectorCount const() - 4;\n
    v7 = v2;\n
    v8 = v7->field_200;\n
    v0 = v7->field_49a;\n
    CNORFlash::SectorErase(v8);\n
    return v2->field_49a;\n
}\n
", "4249784:sub_40d8b8": null, "4249792:_ZN8CFlashFS15CleanDataBlocksEv": "typedef struct struct_0 {\n
    char padding_0[1182];\n
    unsigned short field_49e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CFlashFS::CleanDataBlocks(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    v3 = 0;\n
    for (v3 = 0; v3 < v1->field_49e; v3 += 1)\n
    {\n
        v2 = CFlashFS::GetAddressForDataID(v1, v3);\n
    }\n
    CFlashFS::CleanObjHeaderTable(v1);\n
    return 0;\n
}\n
", "4249926:sub_40d946": null, "4249936:_ZNK9CNORFlash14GetSectorCountEv": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int CNORFlash::GetSectorCount const(struct_0 *v0)\n
{\n
    return v0->field_c;\n
}\n
", "4249950:sub_40d95e": null, "4249952:_ZNK9CNORFlash12GetBlockSizeEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int CNORFlash::GetBlockSize const(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4249966:sub_40d96e": null, "4249968:_ZNK9CNORFlash18GetBlocksPerSectorEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int CNORFlash::GetBlocksPerSector const(struct_0 *v0)\n
{\n
    return v0->field_8;\n
}\n
", "4249982:sub_40d97e": null, "4249984:_ZN9CNORFlashC1Ev": "int CNORFlash::__ctor__(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // eax\n
\n
    v1 = v0;\n
    v1[0] = 0;\n
    v1[1] = 0;\n
    v1[2] = 0;\n
    v1[3] = 0;\n
    return v0;\n
}\n
", "4250022:sub_40d9a6": null, "4250032:_ZN9CNORFlashD1Ev": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CNORFlash::__dtor__(unsigned int v4[4])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[4];  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v2[0] = v5;\n
    if (!v5[0])\n
        return v4;\n
    v6 = v2;\n
    v3 = v6[3] * v6[2] * v6[1];\n
    v0 = v3;\n
    v5 = cgc_deallocate(v6[0]);\n
    if (!v5)\n
        return v5;\n
    v5 = cgc__terminate();\n
}\n
", "4250144:_ZN9CNORFlash4InitEjjj": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CNORFlash::Init(unsigned int v3[4], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[4];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = &v3[0];\n
    if (!(a0 & 63))\n
        v1->field_4 = a0;\n
    else\n
        v1->field_4 = ((a0 >> 6) + 1) * 64;\n
    if (v1->field_4 > 0x200)\n
        v1->field_4 = 0x200;\n
    if (a1 > 16)\n
        v1->field_8 = 16;\n
    else\n
        v1->field_8 = a1;\n
    if (a2 > 0x100)\n
        v1->field_c = 0x100;\n
    else\n
        v1->field_c = a2;\n
    v4 = v1;\n
    v2 = v4[3] * v4[2] * v4[1];\n
    if (cgc_allocate(v2, 0))\n
    {\n
        cgc__terminate();\n
        return cgc_memset(v1->field_0, 255, v2);\n
    }\n
    return cgc_memset(v1->field_0, 255, v2);\n
}\n
", "4250434:sub_40db42": null, "4250448:_ZN9CNORFlash9WriteDataEjPhj": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int CNORFlash::WriteData(struct_0 *v4, char *a0, unsigned int a1, unsigned int a2)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ecx\n
    char *v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    v0 = v4;\n
    if (!v0->field_0)\n
    {\n
        v3 = -3;\n
        return v3;\n
    }\n
    v5 = v0;\n
    v2 = v5->field_c * v5->field_8 * v5->field_4;\n
    if (&a0[a2] > v2)\n
    {\n
        v3 = -0x4;\n
        return v3;\n
    }\n
    for (v1 = 0; a2 > 0; a2 -= 1)\n
    {\n
        v6 = v0->field_0;\n
        v7 = a0;\n
        v6[v7] = v6[v7] & v1[a1];\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4250629:sub_40dc05": null, "4250640:_ZN9CNORFlash8ReadDataEjPhj": "int CNORFlash::ReadData(unsigned int v4[4], char *a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0[4];  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v5[4];  // ecx\n
\n
    v0[0] = v4;\n
    if (!v0[0])\n
    {\n
        v3 = -3;\n
        return v3;\n
    }\n
    v5 = v0;\n
    v2 = v5[3] * v5[2] * v5[1];\n
    if (&a0[a2] > v2)\n
    {\n
        v3 = -0x4;\n
        return v3;\n
    }\n
    for (v1 = 0; a2 > 0; a2 -= 1)\n
    {\n
        v1[a1] = a0[v0[0]];\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4250812:sub_40dcbc": null, "4250816:_ZN9CNORFlash11DeviceEraseEv": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
int CNORFlash::DeviceErase(unsigned int v1[4])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax\n
\n
    v2 = v1;\n
    v0 = v2->field_c * v2->field_8 * v2->field_4;\n
    cgc_memset(v2->field_0, 255, v0);\n
    return 0;\n
}\n
", "4250888:sub_40dd08": null, "4250896:_ZN9CNORFlash11SectorEraseEj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CNORFlash::SectorErase(unsigned int v5[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[4];  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6[4];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = v5;\n
    if (a0 >= v1[3])\n
    {\n
        v4 = -2;\n
        return v4;\n
    }\n
    v6 = v1;\n
    v3 = v6[2] * v6[1];\n
    v2 = a0 * v3;\n
    cgc_memset(v6[0] + v2, 255, v3);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4251024:_ZN9CNORFlash10BlockEraseEj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CNORFlash::BlockErase(unsigned int v4[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1[4];  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5[4];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = v4;\n
    v2 = v1[3] * v1[2];\n
    if (a0 >= v2)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v5 = v1;\n
    cgc_memset(v5[0] + a0 * v5[1], 255, v5[1]);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4251148:sub_40de0c": null, "4251152:_Z6TestFSP9CNORFlash": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int TestFS(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x14c8]\n
    char v1;  // [bp-0x14c2]\n
    char v2;  // [bp-0x14bd]\n
    char v3;  // [bp-0xcbc]\n
    unsigned int v4;  // [bp-0x4bc]\n
    unsigned int v5;  // [bp-0x4b8]\n
    unsigned int v6;  // [bp-0x4b4]\n
    unsigned int v7;  // [bp-0x4b0]\n
    char v8;  // [bp-0x4ac]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ebx\n
\n
    v9 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    CFlashFS::__ctor__(&v8);\n
    CFlashFS::Init(&v8, v10);\n
    v7 = CFlashFS::OpenFile(&v8, v0 - 7328, 2);\n
    v6 = CFlashFS::OpenFile(&v8, v0 - 7319, 2);\n
    v5 = CFlashFS::OpenFile(&v8, v0 - 7309, 2);\n
    cgc_printf(v0 - 7299);\n
    cgc_printf(v0 - 7282);\n
    cgc_printf(v0 - 7265);\n
    v4 = CFlashFS::WriteFile(&v8, v7, v0 - 7248, 4);\n
    cgc_printf(v0 - 7243);\n
    v4 = CFlashFS::WriteFile(&v8, v7, &v3, 0x700);\n
    cgc_printf(v0 - 7243);\n
    v4 = CFlashFS::CloseFile(&v8, v7);\n
    cgc_printf(v0 - 7225);\n
    v7 = CFlashFS::OpenFile(&v8, v0 - 7328, 1);\n
    cgc_printf(v0 - 7210);\n
    v4 = CFlashFS::ReadFile(&v8, v7, &v1, 4);\n
    cgc_printf(v0 - 7189);\n
    v2 = 0;\n
    cgc_printf(v0 - 7169);\n
    v4 = CFlashFS::DeleteFile(&v8, v0 - 7328);\n
    cgc_printf(v0 - 7144);\n
    v4 = CFlashFS::ReadFile(&v8, v7, &v1, 4);\n
    cgc_printf(v0 - 7119);\n
    v12 = v9;\n
    return CFlashFS::__base_dtor__(&v8);\n
}\n
", "4252054:sub_40e196": null, "4252064:_Z19SendCommandResponseP21TEST_COMMAND_RESPONSEPhj": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int SendCommandResponse(struct_0 *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3->field_4 = a1;\n
    if (SendData(1, v3, 8) != 8)\n
    {\n
        v1 = 0;\n
        return v1 & 1;\n
    }\n
    if (a1 > 0 && SendData(1, a0, a1) != a1)\n
    {\n
        v1 = 0;\n
        return v1 & 1;\n
    }\n
    v1 = 1;\n
    return v1 & 1;\n
}\n
", "4252229:sub_40e245": null, "4252240:_Z15OpenFileCommandP8CFlashFS": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int OpenFileCommand(void* v8)\n
{\n
    unsigned int v0;  // [bp-0x124]\n
    unsigned int v1;  // [bp-0x120]\n
    char v2;  // [bp-0x11c]\n
    char v3;  // [bp-0x11b]\n
    unsigned int v4;  // [bp-0x114]\n
    char v5;  // [bp-0x10a]\n
    char v6;  // [bp-0x9]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (RecvData(0, &v2, 2) != 2)\n
    {\n
        v6 = 1;\n
        return v6 & 1;\n
    }\n
    else if (RecvData(0, &v5, v2) == v2)\n
    {\n
        (&v5)[v2] = 0;\n
        v1 = CFlashFS::OpenFile(v8, &v5, v3);\n
        v4 = v1;\n
        SendCommandResponse(&v4, 0, 0);\n
        v6 = 0;\n
        return v6 & 1;\n
    }\n
    else\n
    {\n
        v6 = 1;\n
        return v6 & 1;\n
    }\n
}\n
", "4252516:sub_40e364": null, "4252528:_Z16CloseFileCommandP8CFlashFS": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CloseFileCommand(void* v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x9]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (RecvData(0, &v2, 4) != 4)\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    v1 = CFlashFS::CloseFile(v6, *(&v2));\n
    v3 = v1;\n
    SendCommandResponse(&v3, 0, 0);\n
    v4 = 0;\n
    return v4 & 1;\n
}\n
", "4252680:sub_40e408": null, "4252688:_Z15ReadFileCommandP8CFlashFSPh": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int ReadFileCommand(void* v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    char v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x1c]\n
    char v5;  // [bp-0xd]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (RecvData(0, &v2, 8) != 8)\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    if (*(&v3) > 0x1000)\n
        v3 = 0x1000;\n
    v1 = CFlashFS::ReadFile(v7, *(&v2), a0, v3);\n
    v4 = v1;\n
    if (v4 > 0)\n
        SendCommandResponse(&v4, a0, v3);\n
    else\n
        SendCommandResponse(&v4, 0, 0);\n
    v5 = 0;\n
    return v5 & 1;\n
}\n
", "4252922:sub_40e4fa": null, "4252928:_Z16WriteFileCommandP8CFlashFSPh": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int WriteFileCommand(void* v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    char v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x1c]\n
    char v5;  // [bp-0xd]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (RecvData(0, &v2, 8) != 8)\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    if (*(&v3) > 0x1000)\n
        v3 = 0x1000;\n
    if (RecvData(0, a0, v3) != v3)\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    v1 = CFlashFS::WriteFile(v7, *(&v2), a0, v3);\n
    v4 = v1;\n
    SendCommandResponse(&v4, 0, 0);\n
    v5 = 0;\n
    return v5 & 1;\n
}\n
", "4253168:_Z17DeleteFileCommandP8CFlashFS": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int DeleteFileCommand(void* v7)\n
{\n
    unsigned int v0;  // [bp-0x124]\n
    unsigned int v1;  // [bp-0x120]\n
    char v2;  // [bp-0x11c]\n
    unsigned int v3;  // [bp-0x114]\n
    char v4;  // [bp-0x10a]\n
    char v5;  // [bp-0x9]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (RecvData(0, &v2, 1) != 1)\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    else if (RecvData(0, &v4, v2) == v2)\n
    {\n
        (&v4)[v2] = 0;\n
        v1 = CFlashFS::DeleteFile(v7, &v4);\n
        v3 = v1;\n
        SendCommandResponse(&v3, 0, 0);\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
}\n
", "4253433:sub_40e6f9": null, "4253440:_Z11SetupDeviceiP8CFlashFSP9CNORFlash": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int SetupDevice(char v8[3], void* a0, unsigned int a1[4])\n
{\n
    unsigned int v0;  // [bp-0x4d4]\n
    unsigned int v1;  // [bp-0x4d0]\n
    unsigned int v2;  // [bp-0x4cc]\n
    unsigned int v3;  // [bp-0x4c8]\n
    unsigned int v4[164];  // [bp-0x4c4]\n
    unsigned int v5[4];  // [bp-0x24]\n
    char v6[3];  // [bp-0x10]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v6) = v8;\n
    CNORFlash::__ctor__(v5);\n
    CFlashFS::__ctor__(v4);\n
    if (v6[0] < 128)\n
        v3 = 0x100;\n
    else\n
        v3 = 0x200;\n
    v2 = (((v6[1] >> 31 CONCAT v6[1]) /m 3 >> 32) + 2) * 4;\n
    v1 = (((v6[2] >> 31 CONCAT v6[2]) /m 32 >> 32) + 128) * 4;\n
    CNORFlash::Init(a1, v3, v2, v1);\n
    CFlashFS::Init(a0, a1);\n
    cgc_printf(v0 - 7096);\n
    CFlashFS::__base_dtor__(v4);\n
    return CNORFlash::__dtor__(v5);\n
}\n
", "4253785:sub_40e859": null, "4253792:_Z13RunTestSystemP8CFlashFS": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int RunTestSystem()\n
{\n
    unsigned int v0;  // [bp-0x1014]\n
    unsigned int v1;  // [bp-0x1010]\n
    char v2;  // [bp-0x100a]\n
    char v3;  // [bp-0x1009]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (RecvData(0, &v2, 1) != 1)\n
            return;\n
        v0 = v2;\n
        if (v0 <= 5)\n
        {\n
            goto *(((stack_base)[4112] + (stack_base)[4116] * 4 - 7352)) + (stack_base)[4112];\n
        }\n
        else\n
        {\n
            cgc_printf(v1 - 7039);\n
            v3 = 1;\n
            if (!((v3 ^ 255) & 1))\n
                return;\n
        }\n
    }\n
}\n
", "4254186:sub_40e9ea": null, "4254192:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x4c0]\n
    char v1;  // [bp-0x4bc]\n
    unsigned int v2[4];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0x4347c000;\n
    CNORFlash::__ctor__(v2);\n
    CFlashFS::__ctor__(&v1);\n
    SetupDevice(v4, &v1, v2);\n
    RunTestSystem(&v1, &v1);\n
    CFlashFS::__base_dtor__(&v1);\n
    CNORFlash::__dtor__(v2);\n
    v6 = v3;\n
    return 0;\n
}\n
", "4254368:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_receive": null, "5242888:_Znaj": null, "5242892:cgc_allocate": null, "5242896:cgc__terminate": null, "5242900:cgc_deallocate": null, "5242904:_ZdaPv": null, "5242908:cgc_rint": null, "5242912:cgc_log10": null, "5242916:cgc_transmit": null, "5242920:cgc_pow": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}