{"4198400:_init": "extern struct_0 *g_407bc8;\n
\n
int _init()\n
{\n
    if (g_407bc8)\n
    {\n
        g_407bc8();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198480:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198496:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4198512:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198528:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198544:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198560:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198576:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198592:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4198608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198624:sub_4010e0": "int sub_4010e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198630:sub_4010e6": null, "4198640:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198683:sub_40111b": null, "4198684:sub_40111c": "int sub_40111c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198688:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198692:sub_401124": null, "4198704:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 27295;\n
    v6 = v5 + 15;\n
    v7 = v5 + 15;\n
    if (v7 == v6)\n
        return v5 + 15;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198755:sub_401163": "int sub_401163()\n
{\n
}\n
", "4198761:sub_401169": "int sub_401169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198768:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 27231;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 15;\n
    v9 = (v6 + 15 - (v6 + 15) >> 31) + (15 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198839:sub_4011b7": "int sub_4011b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198848:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407bc4;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407bc4)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198923:sub_40120b": "int sub_40120b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198928:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198937:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198941:sub_40121d": null, "4198944:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4199036:sub_40127c": null, "4199040:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_50->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_50 == v9)\n
        {\n
            v1->field_50 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_50 == v9)\n
    {\n
        v1->field_50 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4199723:sub_40152b": null, "4199728:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[80];\n
    unsigned int field_50;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_50;\n
    v7->field_50 = v3;\n
    return v3;\n
}\n
", "4199928:sub_4015f8": null, "4199936:cgc_free": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 *[2], unsigned int, struct struct_1 **, struct_0 *\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_50 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_50 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_50;\n
    v2[1] = 0;\n
    if (v9->field_50)\n
    {\n
        v12 = v1;\n
        *((&v12->field_50->field_0 + (v12->field_50->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_50 = v7;\n
    return v1;\n
}\n
", "4200400:cgc_floor": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 *[2], unsigned int, struct struct_1 **, struct_0 *\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_50 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_50 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_50;\n
    v2[1] = 0;\n
    if (v9->field_50)\n
    {\n
        v12 = v1;\n
        *((&v12->field_50->field_0 + (v12->field_50->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_50 = v7;\n
    return v1;\n
}\n
", "4200564:sub_401874": null, "4200576:cgc_round_away_from_zero": null, "4200730:sub_40191a": null, "4200736:cgc_round": null, "4200880:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4200972:sub_401a0c": null, "4200976:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4201185:sub_401ae1": null, "4201200:cgc_uint_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_uint_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = ((0 CONCAT v3) /m 10 >> 32) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v5 = v0;\n
        v0 = v5 - 1;\n
        if (v5 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4201379:sub_401ba3": null, "4201392:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4201585:sub_401c71": null, "4201600:cgc_float_to_str": null, "4202463:sub_401fdf": null, "4202464:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v30, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0xc0]\n
    unsigned int v1;  // [bp-0xbc]\n
    struct_0 *v2;  // [bp-0xb8]\n
    unsigned int v3;  // [bp-0xb4]\n
    unsigned int v4;  // [bp-0xb0]\n
    unsigned int v5;  // [bp-0xac]\n
    unsigned int v6;  // [bp-0xa8]\n
    unsigned int v7;  // [bp-0xa4]\n
    unsigned int v8;  // [bp-0xa0]\n
    void* v9;  // [bp-0x9c]\n
    struct_0 *v10;  // [bp-0x98], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x94]\n
    struct_0 *v12;  // [bp-0x90], Other Possible Types: unsigned int\n
    unsigned long v13;  // [bp-0x8c]\n
    struct_0 *v14;  // [bp-0x84], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x80]\n
    struct_0 *v16;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v17;  // [bp-0x78]\n
    struct_0 *v18;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x70]\n
    char v20;  // [bp-0x69]\n
    void* v21;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v23;  // [bp-0x60]\n
    void* v24;  // [bp-0x5c], Other Possible Types: unsigned int\n
    struct_0 *v25;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v26;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v27;  // [bp-0x50]\n
    void* v28;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v29;  // [bp-0xc]\n
    unsigned int *v31;  // eax\n
    unsigned int *v32;  // eax\n
    unsigned int *v33;  // eax\n
    unsigned int *v34;  // eax\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int *v40;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v28 = 0;\n
    if (!v30)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    while (*(v30))\n
    {\n
        if (*(v30) != 64)\n
        {\n
            cgc_putc(*(v30));\n
            v30 += 1;\n
            v28 += 1;\n
LABEL_402a1c:\n
        }\n
        else\n
        {\n
            v30 += 1;\n
            v26 = 0;\n
            v25 = 0;\n
            v24 = 0;\n
            v23 = 0;\n
            v21 = 0;\n
            if (*(v30) == 64)\n
            {\n
                cgc_putc(64);\n
                v30 += 1;\n
                v28 += 1;\n
                continue;\n
            }\n
            if (*(v30) == 45)\n
            {\n
                v23 = 1;\n
                v30 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v30) == 48)\n
                {\n
                    v24 = 1;\n
                    v30 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v26 = cgc_atoi(); cgc_isdigit(); v30 += 1);\n
                }\n
            }\n
            if (*(v30) == 46)\n
            {\n
                v30 += 1;\n
                for (v25 = cgc_atoi(); cgc_isdigit(); v30 += 1);\n
            }\n
            if (*(v30) == 99)\n
            {\n
                v31 = a0;\n
                a0 = v31 + 1;\n
                v20 = *(v31);\n
                v21 = v26 - 1;\n
                if (!v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        if (!v24)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v28 += 1;\n
                    }\n
                }\n
                cgc_putc(v20);\n
                v28 += 1;\n
                if (v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v28 += 1;\n
                    }\n
                }\n
                v30 += 1;\n
                continue;\n
            }\n
            if (*(v30) == 100)\n
            {\n
                v32 = a0;\n
                a0 = v32 + 1;\n
                v19 = *(v32);\n
                cgc_int_to_str(v19, &v27);\n
                v6 = v26;\n
                v21 = v6 - cgc_strlen(&v27);\n
                if (!v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        if (!v24)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v28 += 1;\n
                    }\n
                }\n
                for (v18 = &v27; *(v18); v18 += 1)\n
                {\n
                    cgc_putc(*(v18));\n
                    v28 += 1;\n
                }\n
                if (v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v28 += 1;\n
                    }\n
                }\n
                v30 += 1;\n
                continue;\n
            }\n
            if (*(v30) == 117)\n
            {\n
                v33 = a0;\n
                a0 = v33 + 1;\n
                v17 = *(v33);\n
                cgc_uint_to_str(v17, &v27);\n
                v5 = v26;\n
                v21 = v5 - cgc_strlen(&v27);\n
                if (!v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        if (v24)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v28 += 1;\n
                    }\n
                }\n
                for (v16 = &v27; v16->field_0; v16 += 1)\n
                {\n
                    cgc_putc(v16->field_0);\n
                    v28 += 1;\n
                }\n
                if (v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v28 += 1;\n
                    }\n
                }\n
                v30 += 1;\n
                continue;\n
            }\n
            if (*(v30) == 120)\n
            {\n
                v34 = a0;\n
                a0 = v34 + 1;\n
                v15 = *(v34);\n
                cgc_int_to_hex(v15, &v27);\n
                v4 = v26;\n
                v21 = v4 - cgc_strlen(&v27);\n
                if (!v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        if (!v24)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v28 += 1;\n
                    }\n
                }\n
                for (v14 = &v27; *(v14); v14 += 1)\n
                {\n
                    cgc_putc(*(v14));\n
                    v28 += 1;\n
                }\n
                if (v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v28 += 1;\n
                    }\n
                }\n
                v30 += 1;\n
                continue;\n
            }\n
            if (*(v30) == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v13 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v37 = ftop<4> - 1 + 1;\n
                v38 = v37 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v0 = v25;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v39 = v38 + 1;\n
                cgc_float_to_str();\n
                v3 = v26;\n
                v21 = v3 - cgc_strlen();\n
                if (!v23)\n
                {\n
                    for (v22 = 0; v22 < v21; v22 += 1)\n
                    {\n
                        if (!v24)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v28 += 1;\n
                    }\n
                }\n
                for (v12 = &v27; v12->field_0; v12 += 1)\n
                {\n
                    cgc_putc(v12->field_0);\n
                    v28 += 1;\n
                }\n
                v30 += 1;\n
                continue;\n
            }\n
            if (!(*(v30) == 115))\n
                goto LABEL_402a1c;\n
            v40 = a0;\n
            a0 = v40 + 1;\n
            v11 = *(v40);\n
            if (v25 > 0)\n
            {\n
                v2 = v25;\n
                if (v2 < cgc_strlen())\n
                {\n
                    v10 = v25;\n
                    goto LABEL_402899;\n
                }\n
            }\n
            v10 = cgc_strlen();\n
LABEL_402899:\n
            v21 = v26 - v10;\n
            if (!v23)\n
            {\n
                for (v22 = 0; v22 < v21; v22 += 1)\n
                {\n
                    if (!v24)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v28 += 1;\n
                }\n
            }\n
            v9 = 0;\n
            v1 = v11;\n
            v0 = &v9;\n
            v8 = cgc_transmit(1, v1, cgc_strlen());\n
            if (v8)\n
                cgc__terminate();\n
            v28 = v9 + v28;\n
            if (v23)\n
            {\n
                for (v22 = 0; v22 < v21; v22 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v28 += 1;\n
                }\n
            }\n
            v30 += 1;\n
        }\n
    }\n
    v29 = v28;\n
    return v29;\n
}\n
", "4205107:sub_402a33": null, "4205120:cgc_vsprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_1 **a1)\n
{\n
    struct_0 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_0 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_0 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_1 **v27;  // eax\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_1 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            *((v26 + v24)) = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40327b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                *((v26 + v24)) = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                *((v26 + v24)) = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    *((v26 + v24)) = *(v14);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    *((v26 + v24)) = v12->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    *((v26 + v24)) = v10->field_0;\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40327b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_40311e;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_40311e:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        *((v26 + v24)) = 32;\n
                    else\n
                        *((v26 + v24)) = 48;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                *((v26 + v24)) = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4207250:sub_403292": null, "4207264:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4207328:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4207397:sub_403325": null, "4207408:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v0;\n
}\n
", "4207480:sub_403378": null, "4207488:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207542:sub_4033b6": null, "4207552:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207606:sub_4033f6": null, "4207616:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4207682:sub_403442": null, "4207696:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4207762:sub_403492": null, "4207776:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207830:sub_4034d6": null, "4207840:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4207934:sub_40353e": null, "4207936:cgc_isnan": null, "4207959:sub_403557": null, "4207968:cgc_isinf": null, "4208015:sub_40358f": null, "4208016:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4037c2:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40379b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40379b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40379b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4037c2;\n
                if (!v4)\n
                {\n
LABEL_403717:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40379b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_403717;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40379b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4208604:sub_4037dc": null, "4208608:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4209012:sub_403974": null, "4209024:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4209115:sub_4039db": null, "4209120:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[v2] = v1[a0];\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        v1[v2] = 0;\n
    }\n
    return v2;\n
}\n
", "4209275:sub_403a7b": null, "4209280:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4209388:sub_403aec": null, "4209392:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4209470:sub_403b3e": null, "4209472:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4209580:sub_403bac": null, "4209584:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4209779:sub_403c73": null, "4209792:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4209869:sub_403ccd": null, "4209872:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        else if ((*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            cgc_receive(v9, &v2, 0x400);\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
}\n
", "4210194:sub_403e12": null, "4210208:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4210311:sub_403e87": null, "4210320:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 0; v4 < a1; v4 += 1)\n
    {\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a0)\n
                break;\n
            v4[v5] = v2;\n
        }\n
    }\n
    if (v4 == a1)\n
        cgc_flush_input(0);\n
    return v4;\n
}\n
", "4210541:sub_403f6d": null, "4210544:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (v3)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(0, v6 + v4, v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 -= v2;\n
            v4 = v2 + v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4210720:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210879:sub_4040bf": null, "4210880:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4211079:sub_404187": null, "4211088:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 6983, 1);\n
}\n
", "4211211:sub_40420b": null, "4211216:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211322:sub_40427a": null, "4211328:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    struct struct_1 *field_4c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_44)\n
        {\n
            cgc_deallocate(v4->field_44);\n
            v12 = v4;\n
            v12->field_44 = 0;\n
            v12->field_48 = 0;\n
            v12->field_4c = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_44)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_4c >= v11->field_44 + v11->field_48)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_44)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_48 = cgc_strlen(v10);\n
        v0 = &v13->field_44;\n
        if (cgc_allocate(v13->field_48, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_44, v10);\n
        v14 = v4;\n
        v14->field_4c = v14->field_44;\n
    }\n
    v10 = &v4->field_4c->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_44 + v15->field_48;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_44 + v16->field_48)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_40 = v8;\n
    *(v7) = 0;\n
    v17->field_4c = v7 + 1;\n
    v9 = v17->field_40;\n
    return v9;\n
}\n
", "4212075:sub_40456b": null, "4212080:cgc_write": "int cgc_write(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    cgc_transmit(1, v3, a0);\n
    if (a0 != *(&v1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4212177:sub_4045d1": null, "4212192:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4212384:cgc_insert_node": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_1 *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_node(struct struct_1 **v5, char *a0, struct struct_2 **a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_1 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    struct_1 *v6;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!a0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (!*(v5))\n
    {\n
        *(v5) = cgc_calloc(1, 20);\n
        if (!*(v5))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v2 = a1();\n
        if (v2 <= 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        *(v5)->field_0 = &a0;\n
        *(v5)->field_8 = 1;\n
        *(v5)->field_4 = v2;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v2 = a1();\n
        v3 = *(v5);\n
        while (true)\n
        {\n
            if (v2 < *((v3 + 4)))\n
            {\n
                if (*((v3 + 16)))\n
                {\n
                    v3 = *((v3 + 16));\n
                }\n
                else\n
                {\n
                    *((v3 + 16)) = cgc_calloc(1, 20);\n
                    if (!*((v3 + 16)))\n
                    {\n
                        v4 = -1;\n
                        return v4;\n
                    }\n
                    *(*((v3 + 16))) = a0;\n
                    *((*((v3 + 16)) + 8)) = 1;\n
                    *((*((v3 + 16)) + 4)) = v2;\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
            else\n
            {\n
                if (v2 <= *((v3 + 4)))\n
                {\n
                    if (cgc_strcmp(*(v3), a0))\n
                    {\n
                        for (v1 = *(v3); *((v1 + 0x400)); v1 = *((v1 + 0x400)));\n
                        *((v1 + 0x400)) = a0;\n
                        v6 = v3;\n
                        v6->field_8 = v6->field_8 + 1;\n
                        break;\n
                    }\n
                }\n
                else\n
                {\n
                    if (*((v3 + 12)))\n
                    {\n
                        v3 = *((v3 + 12));\n
                    }\n
                    else\n
                    {\n
                        *((v3 + 12)) = cgc_calloc(1, 20);\n
                        if (!*((v3 + 12)))\n
                        {\n
                            v4 = -1;\n
                            return v4;\n
                        }\n
                        *(*((v3 + 12))) = a0;\n
                        *((*((v3 + 12)) + 8)) = 1;\n
                        *((*((v3 + 12)) + 4)) = v2;\n
                        v4 = 0;\n
                        return v4;\n
                    }\n
                }\n
            }\n
        }\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4213049:sub_404939": null, "4213056:cgc_delete_node": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_delete_node(unsigned int v7, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v7))\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v5 = *(v7);\n
    while (*((v5 + 4)) != a1)\n
    {\n
        v3 = v5;\n
        if (a1 < *((v5 + 4)))\n
            v5 = *((v5 + 16));\n
        else\n
            v5 = *((v5 + 12));\n
        if (!v5)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    if (*((v5 + 8)) > 1)\n
    {\n
        v2 = *(v5);\n
        if (!cgc_strcmp(*(v5), a0))\n
        {\n
            cgc_free(v2);\n
            *(v5) = v1;\n
            v8 = v5;\n
            *((v8 + 8)) = *((v8 + 8)) - 1;\n
            v6 = 0;\n
            return v6;\n
        }\n
        for (v1 = *((v2 + 0x400)); v1; v1 = *((v1 + 0x400)))\n
        {\n
            if (cgc_strcmp(v1, a0))\n
            {\n
                v2 = v1;\n
            }\n
            else\n
            {\n
                *((v2 + 0x400)) = *((v1 + 0x400));\n
                v9 = v5;\n
                *((v9 + 8)) = *((v9 + 8)) - 1;\n
                v1 = *((v1 + 0x400));\n
                cgc_free(v1);\n
                break;\n
            }\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        if (!*((v5 + 16)) && !*((v5 + 12)))\n
        {\n
            if (v5 != *(v7))\n
            {\n
                if (*((v3 + 4)) > a1)\n
                    *((v3 + 16)) = 0;\n
                else\n
                    *((v3 + 12)) = 0;\n
                cgc_free(*(v5));\n
                cgc_free(v5);\n
                goto LABEL_404d07;\n
            }\n
            else\n
            {\n
                cgc_free(*(*(v7)));\n
                cgc_free(*(v7));\n
                *(v7) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        if (*((v5 + 16)) && *((v5 + 12)))\n
        {\n
            v3 = v5;\n
            for (v4 = *((v5 + 16)); *((v4 + 12)); v4 = *((v4 + 12)))\n
            {\n
                v3 = v4;\n
            }\n
            cgc_free(*(v5));\n
            *(v5) = *(v4);\n
            if (*((v4 + 4)) > *((v3 + 4)))\n
                *((v3 + 12)) = *((v4 + 16));\n
            else\n
                *((v3 + 16)) = *((v4 + 16));\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = *((v4 + 8));\n
            cgc_free(v4);\n
            goto LABEL_404d07;\n
        }\n
        if (v5 == *(v7))\n
        {\n
            cgc_free(*(*(v7)));\n
            if (*((v5 + 16)))\n
                *(v7) = *((*(v7) + 16));\n
            else\n
                *(v7) = *((*(v7) + 12));\n
            cgc_free(v5);\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (*((v5 + 16)))\n
            v4 = *((v5 + 16));\n
        else\n
            v4 = *((v5 + 12));\n
        if (*((v3 + 4)) > a1)\n
            *((v3 + 16)) = v4;\n
        else\n
            *((v3 + 12)) = v4;\n
        cgc_free(*(v5));\n
        cgc_free(v5);\n
LABEL_404d07:\n
        v6 = 0;\n
        return v6;\n
    }\n
}\n
", "4214044:sub_404d1c": null, "4214048:cgc_find_node_by_key": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
int cgc_find_node_by_key(struct_0 *v2, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (v0->field_4 != a0)\n
        {\n
            if (a0 >= v0->field_4)\n
                v0 = v0->field_c;\n
            else\n
                v0 = v0[1].field_0;\n
            if (!v0)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = *(v0);\n
            return v1;\n
        }\n
    }\n
}\n
", "4214184:sub_404da8": null, "4214192:cgc_walk_tree": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[8];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_walk_tree(struct_1 *v4)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (v4->field_10)\n
        cgc_walk_tree(v4->field_10);\n
    for (v2 = v4->field_0; v2; v2 = *((v2 + 0x400)))\n
    {\n
        v0 = v2;\n
        cgc_printf(v1 - 7028);\n
    }\n
    if (v4->field_c)\n
        cgc_walk_tree(v4->field_c);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4214374:sub_404e66": null, "4214384:cgc_make_key_from_name": "int cgc_make_key_from_name(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = v3;\n
    v0 = v1;\n
    v2 = cgc_str_token();\n
    return v2;\n
}\n
", "4214442:sub_404eaa": null, "4214448:cgc_count_bst_stats": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_count_bst_stats(unsigned int v8[5], unsigned int a0[3])\n
{\n
    struct_0 *v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x40]\n
    void* v2;  // [bp-0x3c]\n
    void* v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v8 && a0)\n
    {\n
        a0[0] = 0;\n
        v3 = 0;\n
        v2 = 0;\n
        if (v8[4])\n
        {\n
            v0 = &v3;\n
            cgc_count_nodes(v8[4]);\n
        }\n
        v5 = v3;\n
        if (v8[3])\n
        {\n
            v0 = &v2;\n
            cgc_count_nodes(v8[3]);\n
        }\n
        v4 = v2;\n
        v6 = v5 + v4;\n
        if (v8[0])\n
            v6 += 1;\n
        a0[0] = v6;\n
        if (v6 < 2)\n
        {\n
            a0[1] = 0;\n
            a0[2] = 0;\n
        }\n
        else\n
        {\n
            a0[1] = (0 CONCAT v5 * 100) /m (v6 - 1);\n
            a0[2] = (0 CONCAT v4 * 100) /m (v6 - 1);\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    v7 = -1;\n
    return v7;\n
}\n
", "4214750:sub_404fde": null, "4214752:cgc_count_nodes": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_count_nodes(unsigned int v1[5], unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int *v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[4])\n
        cgc_count_nodes(v1[4], a0);\n
    v2 = a0;\n
    *(v2) = *(v2) + 1;\n
    if (v1[3])\n
        cgc_count_nodes(v1[3], a0);\n
    return 0;\n
}\n
", "4214872:sub_405058": null, "4214880:cgc_delete_matches": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_delete_matches(unsigned int v4, unsigned int a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    v2 = a1->field_4;\n
    v6 = v3;\n
    return cgc_delete_node(v1, v2, cgc_make_key_from_name(a1->field_4));\n
}\n
", "4214971:sub_4050bb": null, "4214976:cgc_find_matches": "typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    char *field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_matches(unsigned int v4, unsigned int a0, struct_1 *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = v4;\n
    v6 = cgc_find_node_by_key(v1, cgc_make_key_from_name(a1->field_4));\n
    if (!v2)\n
        return v6;\n
    for (v2 = v6; v2; v2 = v6)\n
    {\n
        if (cgc_strcmp(a1->field_4, v2))\n
        {\n
            v6 = *((v2 + 0x400));\n
        }\n
        else\n
        {\n
            v6 = cgc_printf(v0 - 7028);\n
            break;\n
        }\n
    }\n
    return v6;\n
}\n
", "4215170:sub_405182": null, "4215184:cgc_parse_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_command(char *v6, char a0, unsigned int *a1)\n
{\n
    char v0;  // [bp-0x1d]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v6))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v4 = 1;\n
    v3 = v6;\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 + 1;\n
        if (!*(v7))\n
            break;\n
        if (*(v3) == a0)\n
            v4 += 1;\n
    }\n
    *(a1) = cgc_calloc(v4, 4);\n
    if (!*(a1))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v3 = v6;\n
    for (v2 = 0; v2 < v4; v2 = v2 + 1)\n
    {\n
        *((*(a1) + v2 * 4)) = v3;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*(v3) != a0)\n
                v0 = *(v3);\n
            if (!(v0 & 1))\n
                break;\n
            v3 += 1;\n
        }\n
        if (*(v3))\n
        {\n
            *(v3) = 0;\n
            v3 += 1;\n
        }\n
    }\n
    v5 = v4;\n
    return v5;\n
}\n
", "4215544:sub_4052f8": null, "4215552:main": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    void* field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    unsigned int field_400;\n
} struct_0;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    void* field_400;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x83c]\n
    unsigned int v1;  // [bp-0x834]\n
    unsigned int v2;  // [bp-0x830]\n
    unsigned int v3;  // [bp-0x82c]\n
    char v4;  // [bp-0x828]\n
    char v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x14]\n
    struct_1 *v7;  // [bp-0x10]\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            v3 = cgc_getline(&v4, 0x800);\n
        } while (!v3);\n
        v1 = cgc_parse_command(&v4, 47, &v2);\n
        if (*(*(v2)) == 97 && v1 == 2)\n
        {\n
            if (cgc_strlen(*((v2 + 4))) >= 10)\n
            {\n
                v6 = cgc_calloc(1, 1028);\n
                if (!v6)\n
                {\n
                    cgc_printf(v0 - 7024);\n
                    v8 = -1;\n
                    return v8;\n
                }\n
                cgc_strncpy(v6, *((v2 + 4)), 1023);\n
                v6->field_400 = 0;\n
                cgc_insert_node(&v7, v6, v0 - 11620);\n
                goto LABEL_40561b;\n
            }\n
            else\n
            {\n
                cgc_free(v2);\n
                continue;\n
            }\n
        }\n
        if (*(*(v2)) == 102 && v1 == 2)\n
        {\n
            cgc_find_matches(v7, v1, v2);\n
            goto LABEL_40561b;\n
        }\n
        if (*(*(v2)) == 100 && v1 == 2)\n
        {\n
            cgc_delete_matches(&v7, v1, v2);\n
            goto LABEL_40561b;\n
        }\n
        if (*(*(v2)) == 120)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (*(*(v2)) == 119)\n
        {\n
            cgc_walk_tree(v7);\n
        }\n
        else if (*(*(v2)) == 115)\n
        {\n
            cgc_bzero(&v5, 12);\n
            cgc_count_bst_stats(v7, &v5);\n
            cgc_printf(v0 - 6997);\n
            cgc_printf(v0 - 6981);\n
            cgc_printf(v0 - 6963);\n
        }\n
LABEL_40561b:\n
        cgc_free(v2);\n
    }\n
}\n
", "4216394:sub_40564a": null, "4216400:cgc_str_token": "int cgc_str_token(char *v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (v0 = 5381; *(v2); v2 += 1)\n
    {\n
        v0 = 33 * v0 + *(v2);\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4216500:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:cgc_deallocate": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}