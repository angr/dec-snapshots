{"4198400:_init": "extern struct_0 *g_40647c;\n
\n
int _init()\n
{\n
    if (g_40647c)\n
    {\n
        g_40647c();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 21395;\n
    v6 = v5 + 43;\n
    v7 = v5 + 43;\n
    if (v7 == v6)\n
        return v5 + 43;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 21331;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 43;\n
    v9 = (v6 + 43 - (v6 + 43) >> 31) + (43 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_406478;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_406478)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // ecx\n
    unsigned int v4;  // eax\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
        return 0;\n
    v4 = a0;\n
    if (!v4)\n
        return 0;\n
    tmp_2 = v4;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v6 = v4 * v2;\n
    v7 = cgc_malloc();\n
    if (v7)\n
    {\n
        v0 = v6;\n
        return cgc_memset(v7, 0);\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4198993:sub_401251": null, "4199008:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4199027:sub_401273": null, "4199040:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199056:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199072:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199088:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4199102:sub_4012be": null, "4199104:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4199126:sub_4012d6": null, "4199136:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4199158:sub_4012f6": null, "4199168:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4199190:sub_401316": null, "4199200:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4199222:sub_401336": null, "4199232:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return *((4210696 + v0));\n
}\n
", "4199257:sub_401359": null, "4199264:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4199289:sub_401379": null, "4199296:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return *((4210824 + v0));\n
}\n
", "4199321:sub_401399": null, "4199328:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199336:sub_4013a8": null, "4199344:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4199363:sub_4013c3": null, "4199376:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4199395:sub_4013e3": null, "4199408:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v4;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        v3 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            v4 = cgc_coalesce();\n
            return v4;\n
        }\n
        v0 = *(v3);\n
        v4 = cgc_deallocate(v3);\n
        return v4;\n
    }\n
}\n
", "4199487:sub_40143f": null, "4199488:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_4065b4;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // esi\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct struct_1 **v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
    struct_1 *v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13[6];  // eax\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        v11 = 0;\n
        if (v10 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[4 * v10]);\n
                if (v12)\n
                {\n
                    do\n
                    {\n
                        if (*(v12) >= v9)\n
                        {\n
                            v11 = v12;\n
                            goto LABEL_40151f;\n
                        }\n
                        v12 = *((v12 + 8));\n
                    } while (v12);\n
                }\n
                v10 += 1;\n
            } while (v10 != 32);\n
        }\n
LABEL_40151f:\n
        if (v11)\n
        {\n
LABEL_401523:\n
            cgc_remove_from_flist();\n
            v14 = *(v11) - v9;\n
            if (v14 >= 49)\n
            {\n
                v15 = v9 + v11;\n
                *((&v9->field_0 + v11)) = v14;\n
                *(&v9->padding_4[v11]) = 1;\n
                *((8 + &v9->field_0 + v11)) = 0;\n
                *(&v9->padding_c[v11]) = 0;\n
                *(v11) = v9;\n
                *((20 + &v9->field_0 + v11)) = v11;\n
                *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
                v16 = *((v11 + 16));\n
                if (v16)\n
                    v16->field_14 = v15;\n
                *((v11 + 16)) = v15;\n
                cgc_insert_into_flist();\n
            }\n
            v5 = v11 + 24;\n
            return v5;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v13 = *(&v2);\n
            if (v13)\n
            {\n
                v13[0] = 0x40000;\n
                v13[1] = 1;\n
                v13[3] = 0;\n
                v13[2] = 0;\n
                v13[5] = 0;\n
                v13[4] = 0;\n
                cgc_insert_into_flist();\n
                v11 = g_4065b4;\n
                goto LABEL_401523;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            v5 = v8 + 1;\n
            return v5;\n
        }\n
        return 0;\n
    }\n
}\n
", "4199915:sub_4015eb": null, "4199920:cgc_get_size_class": "extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int *v2;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v2 = &size_class_limits;\n
    while (true)\n
    {\n
        if (*(v2) >= v0)\n
            return v1;\n
        v1 += 1;\n
        v2 += 4;\n
        if (v1 == 32)\n
            return 32;\n
    }\n
}\n
", "4199973:sub_401625": null, "4199984:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // ecx\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    while (*(v3) < v1[0])\n
    {\n
        v2 += 1;\n
        v3 += 4;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    v1[1] = 1;\n
    v4 = *((4220216 + 4 * v2));\n
    if (!v4)\n
    {\n
        *((4220216 + 4 * v2)) = v1;\n
        return \"lc\";\n
    }\n
    v1[2] = v4;\n
    *((*((4220216 + 4 * v2)) + 12)) = v1;\n
    *((4220216 + 4 * v2)) = v1;\n
    v1[3] = 0;\n
    return \"lc\";\n
}\n
", "4200093:sub_40169d": null, "4200096:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v4;  // esi\n
    struct_0 *v5;  // edi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    do\n
    {\n
        if (*(v3) >= v1->field_0)\n
        {\n
            v4 = v1->field_c;\n
            if (v4)\n
                v4->field_8 = v1->field_8;\n
            v5 = v1->field_8;\n
            if (v5)\n
                v5->field_c = v4;\n
            if (*((4220216 + 4 * v2)) == v1)\n
            {\n
                *((4220216 + 4 * v2)) = v5;\n
                goto LABEL_4016fb;\n
            }\n
        }\n
        v2 += 1;\n
        v3 += 4;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4016fb:\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v0;\n
}\n
", "4200211:sub_401713": null, "4200224:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char size_class_limits;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // ebx\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // edi\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // ebx\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // ebx\n
    unsigned int v41;  // ebx\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // esi\n
    unsigned int v47;  // edx\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // edi\n
    unsigned int v50;  // ebx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edx\n
    unsigned int v53;  // edx\n
    unsigned int v54;  // ecx\n
    unsigned int v55;  // edx\n
    unsigned int v56;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
    {\n
        v3 = *((v1 + 16));\n
        if (v3 && *((v3 + 4)))\n
        {\n
            v6 = 0;\n
            v4 = &size_class_limits;\n
            do\n
            {\n
                if (*(v4) >= *(v2))\n
                {\n
LABEL_401784:\n
                    v7 = *((v2 + 12));\n
                    if (v7)\n
                        *((v7 + 8)) = *((v2 + 8));\n
                    v10 = *((v2 + 8));\n
                    if (v10)\n
                        *((v10 + 12)) = v7;\n
                    if (*((4220216 + 4 * v6)) == v2)\n
                        *((4220216 + 4 * v6)) = v10;\n
                    *((v2 + 8)) = 0;\n
                    *((v2 + 12)) = 0;\n
                    *((v2 + 4)) = 0;\n
                    v15 = *((v1 + 16));\n
                    v16 = 0;\n
                    v17 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v17) >= *(v15))\n
                        {\n
LABEL_4017e4:\n
                            v20 = *((v15 + 12));\n
                            if (v20)\n
                                *((v20 + 8)) = *((v15 + 8));\n
                            v25 = *((v15 + 8));\n
                            if (v25)\n
                                *((v25 + 12)) = v20;\n
                            if (*((4220216 + 4 * v16)) == v15)\n
                                *((4220216 + 4 * v16)) = v25;\n
                            *((v15 + 8)) = 0;\n
                            *((v15 + 12)) = 0;\n
                            *((v15 + 4)) = 0;\n
                            v30 = *(v1);\n
                            v31 = 0;\n
                            v32 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v32) >= v30)\n
                                {\n
LABEL_401844:\n
                                    v35 = *((v1 + 12));\n
                                    if (v35)\n
                                        *((v35 + 8)) = *((v1 + 8));\n
                                    v41 = *((v1 + 8));\n
                                    if (v41)\n
                                        *((v41 + 12)) = v35;\n
                                    if (*((4220216 + 4 * v31)) == v1)\n
                                        *((4220216 + 4 * v31)) = v41;\n
                                    *((v1 + 8)) = 0;\n
                                    *((v1 + 12)) = 0;\n
                                    *((v1 + 4)) = 0;\n
                                    v46 = *((v1 + 20));\n
                                    v47 = v30 + *(v46);\n
                                    *(v46) = v47;\n
                                    v48 = v47 + *(*((v1 + 16)));\n
                                    *(v46) = v48;\n
                                    v49 = 0;\n
                                    v50 = &size_class_limits;\n
                                    do\n
                                    {\n
                                        if (*(v50) >= v48)\n
                                        {\n
LABEL_4018b4:\n
                                            *((v46 + 4)) = 1;\n
                                            v52 = *((4220216 + 4 * v49));\n
                                            if (!v52)\n
                                            {\n
                                                *((4220216 + 4 * v49)) = v46;\n
                                            }\n
                                            else\n
                                            {\n
                                                *((v46 + 8)) = v52;\n
                                                *((*((4220216 + 4 * v49)) + 12)) = v46;\n
                                                *((4220216 + 4 * v49)) = v46;\n
                                                *((v46 + 12)) = 0;\n
                                            }\n
                                            v53 = *((v1 + 16));\n
                                            v54 = *((v53 + 20));\n
                                            if (v54)\n
                                                *((v54 + 16)) = *((v53 + 16));\n
                                            v55 = *((v53 + 16));\n
                                            if (v55)\n
                                            {\n
                                                *((v55 + 20)) = v54;\n
                                                goto LABEL_401b96;\n
                                            }\n
                                        }\n
                                        v49 += 1;\n
                                        v50 += 4;\n
                                    } while (v49 != 32);\n
                                    v49 = 32;\n
                                    goto LABEL_4018b4;\n
                                }\n
                                v31 += 1;\n
                                v32 += 4;\n
                            } while (v31 != 32);\n
                            v31 = 32;\n
                            goto LABEL_401844;\n
                        }\n
                        v16 += 1;\n
                        v17 += 4;\n
                    } while (v16 != 32);\n
                    v16 = 32;\n
                    goto LABEL_4017e4;\n
                }\n
                v6 += 1;\n
                v4 += 4;\n
            } while (v6 != 32);\n
            v6 = 32;\n
            goto LABEL_401784;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
    {\n
        v5 = *((v1 + 16));\n
        if (v5 && !*((v5 + 4)))\n
        {\n
            v8 = 0;\n
            v9 = &size_class_limits;\n
            do\n
            {\n
                if (*(v9) >= *(v2))\n
                {\n
                    v12 = *((v2 + 12));\n
                    if (v12)\n
                        *((v12 + 8)) = *((v2 + 8));\n
                    v18 = *((v2 + 8));\n
                    if (v18)\n
                        *((v18 + 12)) = v12;\n
                    if (*((4220216 + 4 * v8)) == v2)\n
                        *((4220216 + 4 * v8)) = v18;\n
                    *((v2 + 8)) = 0;\n
                    *((v2 + 12)) = 0;\n
                    *((v2 + 4)) = 0;\n
                    v22 = *(v1);\n
                    v23 = 0;\n
                    v24 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v24) >= v22)\n
                        {\n
LABEL_401af4:\n
                            v26 = *((v1 + 12));\n
                            if (v26)\n
                                *((v26 + 8)) = *((v1 + 8));\n
                            v33 = *((v1 + 8));\n
                            if (v33)\n
                                *((v33 + 12)) = v26;\n
                            if (*((4220216 + 4 * v23)) == v1)\n
                                *((4220216 + 4 * v23)) = v33;\n
                            *((v1 + 8)) = 0;\n
                            *((v1 + 12)) = 0;\n
                            *((v1 + 4)) = 0;\n
                            v37 = *((v1 + 20));\n
                            v38 = v22 + *(v37);\n
                            *(v37) = v38;\n
                            v39 = 0;\n
                            v40 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v40) >= v38)\n
                                {\n
LABEL_401b54:\n
                                    *((v37 + 4)) = 1;\n
                                    v42 = *((4220216 + 4 * v39));\n
                                    if (!v42)\n
                                    {\n
                                        *((4220216 + 4 * v39)) = v37;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((v37 + 8)) = v42;\n
                                        *((*((4220216 + 4 * v39)) + 12)) = v37;\n
                                        *((4220216 + 4 * v39)) = v37;\n
                                        *((v37 + 12)) = 0;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                }\n
                                v39 += 1;\n
                                v40 += 4;\n
                            } while (v39 != 32);\n
                            v39 = 32;\n
                            goto LABEL_401b54;\n
                        }\n
                        v23 += 1;\n
                        v24 += 4;\n
                    } while (v23 != 32);\n
                    v23 = 32;\n
                    goto LABEL_401af4;\n
                }\n
                v8 += 1;\n
                v9 += 4;\n
            } while (v8 != 32);\n
            v8 = 32;\n
LABEL_401b96:\n
            v56 = *((v1 + 20));\n
            if (v56)\n
                *((v56 + 16)) = *((v1 + 16));\n
            v1 = *((v1 + 16));\n
            if (!v1)\n
                return v1;\n
            *((v1 + 20)) = v56;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
        return v1;\n
    v11 = *((v1 + 16));\n
    if (!v11)\n
        return v1;\n
    if (!*((v11 + 4)))\n
        return v1;\n
    v13 = 0;\n
    v14 = &size_class_limits;\n
    do\n
    {\n
        if (*(v14) >= *(v11))\n
        {\n
LABEL_401954:\n
            v19 = *((v11 + 12));\n
            if (v19)\n
                *((v19 + 8)) = *((v11 + 8));\n
            v21 = *((v11 + 8));\n
            if (v21)\n
                *((v21 + 12)) = v19;\n
            if (*((4220216 + 4 * v13)) == v11)\n
                *((4220216 + 4 * v13)) = v21;\n
            *((v11 + 8)) = 0;\n
            *((v11 + 12)) = 0;\n
            *((v11 + 4)) = 0;\n
            v27 = *(v1);\n
            v28 = 0;\n
            v29 = &size_class_limits;\n
            do\n
            {\n
                if (*(v29) >= v27)\n
                {\n
LABEL_4019b4:\n
                    v34 = *((v1 + 12));\n
                    if (v34)\n
                        *((v34 + 8)) = *((v1 + 8));\n
                    v36 = *((v1 + 8));\n
                    if (v36)\n
                        *((v36 + 12)) = v34;\n
                    if (*((4220216 + 4 * v28)) == v1)\n
                        *((4220216 + 4 * v28)) = v36;\n
                    *((v1 + 8)) = 0;\n
                    *((v1 + 12)) = 0;\n
                    *((v1 + 4)) = 0;\n
                    v43 = v27 + *(*((v1 + 16)));\n
                    *(v1) = v43;\n
                    v44 = 0;\n
                    v45 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v45) >= v43)\n
                        {\n
LABEL_401a14:\n
                            *((v1 + 4)) = 1;\n
                            v51 = *((4220216 + 4 * v44));\n
                            if (!v51)\n
                            {\n
                                *((4220216 + 4 * v44)) = v1;\n
                            }\n
                            else\n
                            {\n
                                *((v1 + 8)) = v51;\n
                                *((*((4220216 + 4 * v44)) + 12)) = v1;\n
                                *((4220216 + 4 * v44)) = v1;\n
                                *((v1 + 12)) = 0;\n
                            }\n
                            v1 = *((v1 + 16));\n
                            goto LABEL_401b96;\n
                        }\n
                        v44 += 1;\n
                        v45 += 4;\n
                    } while (v44 != 32);\n
                    v44 = 32;\n
                    goto LABEL_401a14;\n
                }\n
                v28 += 1;\n
                v29 += 4;\n
            } while (v28 != 32);\n
            v28 = 32;\n
            goto LABEL_4019b4;\n
        }\n
        v13 += 1;\n
        v14 += 4;\n
    } while (v13 != 32);\n
    v13 = 32;\n
    goto LABEL_401954;\n
    goto LABEL_401b96;\n
}\n
", "4201393:sub_401bb1": null, "4201408:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4201464:sub_401bf8": null, "4201472:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4201533:sub_401c3d": null, "4201536:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4201585:sub_401c71": null, "4201600:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ecx<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v5 = v1;\n
            do\n
            {\n
                *((v3 + v1 - 1)) = v2[1 + v1];\n
                v5 -= 1;\n
                v1 = v5;\n
            } while (v5 != 1);\n
            return v0;\n
        }\n
    }\n
}\n
", "4201683:sub_401cd3": null, "4201696:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    char *v1;  // eax\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // esi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = a0;\n
        v3 += 1;\n
    } while (v2 != v3);\n
    return v0;\n
}\n
", "4201744:cgc_output_number_printf": "int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    char v12;  // al\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    char v16;  // al\n
\n
    v6 = a3;\n
    v7 = a2;\n
    v8 = a1;\n
    v9 = a0;\n
    v14 = v5;\n
    if (v9 < v8)\n
    {\n
        v3 = v9;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v9) /m v8;\n
        v3 = tmp_9 >> 32;\n
        v14 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v9) /m v8, v8, v7 - 1, v6);\n
    }\n
    v12 = v6;\n
    if (v7 > 0 && !v2)\n
    {\n
        tmp_2 = v7;\n
        v13 = v7 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                if ((v12 & 1))\n
                    v1 = 48;\n
                else\n
                    v1 = 32;\n
                v0 = &v4;\n
                cgc_transmit(v14, &v1, 1);\n
                v12 = v6;\n
                v14 = v5;\n
                tmp_6 = v13;\n
                v13 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
    }\n
    if (!(v12 & 2))\n
    {\n
        v15 = v3;\n
        v16 = v15 + 87;\n
    }\n
    else\n
    {\n
        v15 = v3;\n
        v16 = v15 + 55;\n
    }\n
    if (v15 < 10)\n
        v16 = v15 + 48;\n
    v1 = v16;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4201865:sub_401d89": null, "4201985:sub_401e01": null, "4202000:cgc_fdprintf": "int cgc_fdprintf(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    char v6;  // [bp+0xc]\n
    unsigned int v7;  // [bp+0x10]\n
    unsigned int v8;  // [bp+0x14]\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // edi\n
\n
    v3 = &v6;\n
    v9 = a0;\n
    if (!*(v9))\n
        return 0;\n
    v10 = &v2;\n
    do\n
    {\n
        a0 = v9 + 1;\n
        *(&v9) = *(v9);\n
        if (v1 == 37)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                v11 = a0;\n
                a0 = v11 + 1;\n
                v17 = *(v11);\n
                v12 = v17;\n
                if (v12 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(v11, &a0);\n
            }\n
            switch (v12)\n
            {\n
            case 88:\n
                break;\n
            case 100:\n
                v14 = v3;\n
                v3 = v14 + 4;\n
                if (*(v14) < 0)\n
                {\n
LABEL_401fff:\n
                    v1 = 45;\n
                    v0 = &v2;\n
                    cgc_transmit(v14, &v1, 1);\n
                }\n
                goto LABEL_401fd6;\n
            case 115:\n
                v15 = v3;\n
                v3 = v15 + 4;\n
                v16 = *(v15);\n
                v10 = &v2;\n
                if (cgc_strlen())\n
                {\n
                    v18 = 0;\n
                    do\n
                    {\n
                        v1 = *((v16 + v18));\n
                        v0 = v10;\n
                        cgc_transmit(v5, &v1, 1);\n
                        v18 += 1;\n
                        v10 = &v2;\n
                    } while (v18 < cgc_strlen(v16, &v1, 1));\n
                }\n
                goto LABEL_401e68;\n
            case 117:\n
                v3 += 4;\n
                goto LABEL_401fd6;\n
            case 120:\n
                break;\n
            case 99:\n
                v17 = v3;\n
                v3 = v17 + 4;\n
                *(&v17) = *(v17);\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
LABEL_401f14:\n
                v1 = v17;\n
                goto LABEL_401fe3;\n
            default:\n
                if (v12 == 37)\n
                {\n
                    v1 = 37;\n
LABEL_401fe3:\n
                    v0 = &v2;\n
                    goto LABEL_401fff;\n
                }\n
                if (v12 == 48)\n
                    goto LABEL_0x401ee0;\n
                else\n
                    goto LABEL_401f14;\n
            }\n
            v3 += 4;\n
LABEL_401fd6:\n
            cgc_output_number_printf(v5, a0, *(&v6), v7, v8);\n
            v10 = &v2;\n
            goto LABEL_401e68;\n
        }\n
        v1 = v9;\n
        v0 = v10;\n
        cgc_transmit(v5, &v1, 1);\n
        v10 = &v2;\n
LABEL_401e68:\n
        v9 = a0;\n
    } while (*(v9));\n
    return 0;\n
}\n
", "4202050:sub_401e42": null, "4202130:sub_401e92": null, "4202218:sub_401eea": null, "4202572:sub_40204c": null, "4202576:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    void* v13;  // eax, Other Possible Types: unsigned int\n
    char v14;  // bl\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // esi\n
    unsigned int v18;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v13 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v13 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
    }\n
    v14 = a4;\n
    if (v9 > 0 && !v13)\n
    {\n
        tmp_2 = v9;\n
        v15 = v9 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                *(v11)->field_0 = ((v14 & 1) * 16) | 32;\n
                *(v11) = *(v11) + 1;\n
                *(v12) = *(v12) + 1;\n
                tmp_12 = v15;\n
                v15 -= 1;\n
            } while (tmp_12 != 1);\n
        }\n
    }\n
    v16 = v0;\n
    *(&*(v11)) = (!(v16 < 10) ? 48 : ((!(v14 & 2)) * 32 + 55)) + v16;\n
    *(v11) = *(v11) + 1;\n
    *(v12) = *(v12) + 1;\n
    v18 = v13 + 1;\n
    return v18;\n
}\n
", "4202775:sub_402117": null, "4202784:cgc_sprintf": "int cgc_sprintf(char *v8, struct struct_0 **a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct struct_1 **v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct struct_0 **v10;  // eax\n
    char *v11;  // ecx\n
    unsigned int v12;  // eax\n
    struct struct_0 **v13;  // ecx\n
    struct struct_0 **v14;  // dl\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    char *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // edi\n
    struct struct_1 **v18;  // ecx\n
    char *v19;  // ecx, Other Possible Types: unsigned int\n
    struct struct_1 **v20;  // eax\n
    char *v21;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v22;  // edi\n
    struct struct_1 **v23;  // ecx\n
    char *v24;  // edx\n
    unsigned int v25;  // edi\n
    char *v26;  // eax\n
\n
    v5 = 0;\n
    v6 = &v9;\n
    while (true)\n
    {\n
        v10 = a0;\n
        if (!*(v10))\n
            break;\n
        a0 = v10 + 1;\n
        *(&v10) = *(v10);\n
        if (*(&v10) != 37)\n
        {\n
            v11 = v8;\n
            *(v11) = v10;\n
            v8 = v11 + 1;\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            v15 = 0;\n
            while (true)\n
            {\n
                v12 = v15 | 1;\n
                do\n
                {\n
                    v17 = v15;\n
                    v13 = a0;\n
                    a0 = v13 + 1;\n
                    v14 = *(v13);\n
                    v15 = v12;\n
                } while (v14 == 48);\n
                switch (v14)\n
                {\n
                case 37:\n
                    v16 = v8;\n
                    *(v16) = 37;\n
                    goto LABEL_4022a7;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v4 = 10;\n
                    v7 = cgc_strtol(v13, &a0);\n
                    v15 = v17;\n
                    continue;\n
                case 100:\n
                    v18 = v6;\n
                    v6 = v18 + 1;\n
                    v19 = *(v18);\n
                    if (v19 < 0)\n
                    {\n
                        v24 = v8;\n
                        *(v24) = 45;\n
                        v8 = v24 + 1;\n
                        v5 += 1;\n
                        v19 = -(v19);\n
                    }\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 10;\n
                    v0 = v19;\n
LABEL_40222e:\n
                    cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                    break;\n
                case 115:\n
                    v20 = v6;\n
                    v6 = v20 + 1;\n
                    v21 = v8;\n
                    v22 = v5;\n
                    if (cgc_strlen())\n
                    {\n
                        v7 = v22;\n
                        v25 = 0;\n
                        do\n
                        {\n
                            v21[v25] = (*(v20))[v25].field_0;\n
                            v25 += 1;\n
                        } while (v25 < cgc_strlen());\n
                        v21 = &v21[v25];\n
                        v22 = v7 + v25;\n
                    }\n
                    v8 = v21;\n
                    v5 = v22;\n
                    break;\n
                case 88:\n
                    v17 |= 2;\n
                case 120:\n
                    v23 = v6;\n
                    v6 = v23 + 1;\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 16;\n
                    v0 = &*(v23)->field_0;\n
                    goto LABEL_40222e;\n
                default:\n
                    v16 = v8;\n
                    *(v16) = v14;\n
LABEL_4022a7:\n
                    v8 = v16 + 1;\n
                    v5 += 1;\n
                    break;\n
                }\n
            }\n
        }\n
    }\n
    v26 = v8;\n
    v8 = v26 + 1;\n
    *(v26) = 0;\n
    return v5;\n
}\n
", "4202820:sub_402144": null, "4203216:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
    {\n
        v5 = cgc_malloc(v1);\n
        return v5;\n
    }\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            return v5;\n
        }\n
    }\n
    return 0;\n
}\n
", "4203334:sub_402346": null, "4203344:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v6 = v0[0];\n
    while (true)\n
    {\n
        if (!v6)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        v3 = *(v1);\n
        if (!v3)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        if (v6 != v3)\n
        {\n
            v5 = cgc_tolower(v6);\n
            if (v5 != cgc_tolower(*(v1)))\n
                return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        }\n
        v1 += 1;\n
        v6 = *((v2 + 1));\n
        v2 += 1;\n
    }\n
}\n
", "4203466:sub_4023ca": null, "4203472:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4203529:sub_402409": null, "4203536:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4203578:sub_40243a": null, "4203584:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4203648:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v5 = v4 + 1;\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 = v5;\n
        } while (v3);\n
    }\n
    v2[v5] = 0;\n
    return v0;\n
}\n
", "4203708:sub_4024bc": null, "4203712:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    return v2;\n
}\n
", "4203792:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_strncasecmp": "int cgc_strncasecmp(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char v4;  // cl\n
    char *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    for (v5 = v0; v1 != 1; v2 += 1)\n
    {\n
        v3 = *(v5);\n
        if (!v3)\n
            break;\n
        v4 = *(v2);\n
        if (!v4)\n
            break;\n
        if (v3 != v4)\n
        {\n
            v1 = a1;\n
            if (cgc_tolower(v3) != cgc_tolower(*(v2)))\n
                break;\n
        }\n
        v5 += 1;\n
    }\n
    v6 = cgc_tolower(*(v5)) - cgc_tolower(*(v2));\n
    return v6;\n
}\n
", "4203861:sub_402555": null, "4203972:sub_4025c4": null, "4203984:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    unsigned int v6;  // edx\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    void* v8;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v7 = v0;\n
    tmp_4 = v1;\n
    v6 = v1 - 1;\n
    if (tmp_4 != 1)\n
    {\n
        v3 = &v7[v6];\n
        v4 = &v2[v6];\n
        while (true)\n
        {\n
            v5 = *(v7);\n
            if (!v5)\n
                break;\n
            if (!*(v2))\n
                break;\n
            if (v5 != *(v2))\n
                break;\n
            v7 += 1;\n
            v2 += 1;\n
            tmp_8 = v6;\n
            v6 -= 1;\n
            if (tmp_8 == 1)\n
            {\n
                v7 = v3;\n
                v2 = v4;\n
                break;\n
            }\n
        }\n
    }\n
    v8 = *(v7) - *(v2);\n
    return v8;\n
}\n
", "4204064:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, char *a1)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v4 = 0;\n
        if (0 >= v1)\n
            return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v4));\n
            v2[v4] = v3;\n
            if (!v3)\n
                break;\n
            v4 += 1;\n
            if (v1 == v4)\n
            {\n
                v4 = v1;\n
                break;\n
            }\n
        }\n
        if (v4 >= v1)\n
            return v0;\n
    }\n
    do\n
    {\n
        v2[v4] = 0;\n
        v4 += 1;\n
    } while (v1 != v4);\n
    return v0;\n
}\n
", "4204150:sub_402676": null, "4204160:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // esi\n
    char v2[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // al, Other Possible Types: char\n
    unsigned int v4;  // eax\n
    char v6[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a0, v3);\n
            if (v4)\n
                break;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
            if (!v3)\n
                break;\n
        }\n
    }\n
    if (!*(v2))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        v6 = v2 + 1;\n
    }\n
    *(v1) = v6;\n
    return *(v1);\n
}\n
", "4204270:sub_4026ee": null, "4204272:cgc_strtol": "int cgc_strtol(char *v3, unsigned int *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // esi\n
    unsigned int *v5;  // ecx, Other Possible Types: unsigned int\n
    char *v6;  // edx, Other Possible Types: unsigned int\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    char *v8;  // ebx, Other Possible Types: unsigned int\n
    char v9;  // bl\n
    char *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ecx\n
    void* v13;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    char *v17;  // esi, Other Possible Types: unsigned int\n
\n
    v4 = a1;\n
    v5 = a0;\n
    v6 = v3;\n
    v7 = 0;\n
    if (v4 > 36)\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
        if (v4 != 1)\n
        {\n
            v10 = v6;\n
            while (true)\n
            {\n
                v9 = *(v10);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v9 != 32)\n
                    break;\n
                v10 += 1;\n
            }\n
            v11 = 0;\n
            *(&v11) = v9 == 45;\n
            v12 = (*((v10 + v11)) == 43) + v11;\n
            v0 = v10 + v12;\n
            if (!v4)\n
            {\n
                v4 = 10;\n
                if (*(v0) == 48)\n
                {\n
                    if ((*((v10 + v12 + 1)) | 32) == 120)\n
                    {\n
                        v0 = v10 + v12 + 2;\n
                        v4 = 16;\n
                    }\n
                    else\n
                    {\n
                        v0 = v10 + v12 + 1;\n
                        v4 = 8;\n
                    }\n
                }\n
            }\n
            else if (v4 == 16)\n
            {\n
                v4 = 16;\n
                if (*(v0) == 48 && (*((v10 + v12 + 1)) | 32) == 120)\n
                    v0 = v10 + v12 + 2;\n
            }\n
            v13 = 0;\n
            v14 = 0;\n
            v1 = v4;\n
            while (true)\n
            {\n
                v15 = *((v0 + v14));\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                {\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                        break;\n
                    v2 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, ((cl<1> & 0xdf<8>) - 0x41<8>)), 0x1a<32>, 0x0<32>);\n
                }\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v16 = v15 - 48;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else if (v2)\n
                {\n
                    v16 = v15 + [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x1a<32>, 0x0<32>) * 32 - 87;\n
                    v4 = v1;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else\n
                {\n
                    v16 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>);\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                v13 = v4 * v13 + v16;\n
                v14 += 1;\n
            }\n
            v7 = -(v13);\n
            if (v9 != 45)\n
                v7 = v13;\n
            v8 = v14;\n
            v0 += v14;\n
            v5 = a0;\n
            v6 = v3;\n
        }\n
    }\n
    if (!v5)\n
        return v7;\n
    v17 = v0;\n
    if (!v8)\n
        v17 = v6;\n
    *(v5) = v17;\n
    return v7;\n
}\n
", "4204319:sub_40271f": null, "4204558:sub_40280e": null, "4204663:sub_402877": null, "4204672:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4204713:sub_4028a9": null, "4204720:cgc_compute_guard": "int cgc_compute_guard(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    void* v2;  // edi, Other Possible Types: unsigned int\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = *((v0 + v3)) + v2 ^ v2 * 0x400;\n
        v3 += 1;\n
        v2 = v4;\n
    } while (v1 != v3);\n
    return v4;\n
}\n
", "4204779:sub_4028eb": null, "4204784:cgc_decode_data": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
} struct_0;\n
\n
int cgc_decode_data(struct_0 *v0, struct struct_1 *a0[3])\n
{\n
    int tmp_3;  // tmp #3\n
    struct struct_1 *v1[3];  // esi\n
    char *v2;  // ecx\n
    struct_0 *v3;  // edi\n
    char *v4;  // eax\n
    char *v5;  // edx\n
    char *v7;  // ecx, Other Possible Types: unsigned int\n
    char *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v1[2];\n
    if (v2 < 4)\n
        return 0;\n
    v3 = v0;\n
    if ((v3->field_8 & 15) == 7)\n
    {\n
        v4 = v1[1];\n
        cgc_memmove(v4, v4 + 4, v2);\n
    }\n
    v5 = v1[2];\n
    tmp_3 = v5;\n
    v8 = v5 + 4;\n
    v1[2] = v8;\n
    if (tmp_3 != 4)\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            (v1[1])[v7].field_0 = (v1[1])[v7].field_0 ^ *((v3->field_0 + ((0 CONCAT v7) /m v3->field_4 >> 32)));\n
            v7 += 1;\n
            v8 = v1[2];\n
        } while (v7 < v8);\n
    }\n
    if ((v3->field_8 & 15) == 7)\n
        return 1;\n
    (v1[1])[v8].field_0 = 0;\n
}\n
", "4204920:sub_402978": null, "4204928:cgc_parse_msg": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char field_8;\n
    char padding_9[3];\n
    char *field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
    char field_10;\n
} struct_1;\n
\n
int cgc_parse_msg(char *v1, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // [bp+0xc]\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v4;  // eax\n
    char *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    void* v7;  // edi, Other Possible Types: unsigned int\n
    char *v9;  // ebp, Other Possible Types: unsigned int\n
    char *v11;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // eax, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    char *v17;  // eax\n
    unsigned int v18;  // eax\n
    char *v19;  // eax\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // ecx\n
    void* v22;  // edi, Other Possible Types: unsigned int\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
\n
    v3 = 0;\n
    if (a0 >= 4)\n
    {\n
        v4 = cgc_malloc(20);\n
        v3 = 0;\n
        if (v4)\n
        {\n
            v9 = v1;\n
            v3 = v4;\n
            cgc_memset(v4, 0, 20);\n
            v7 = a0;\n
            if (v7 >= 5)\n
            {\n
                v5 = v1;\n
                v21 = a0;\n
                do\n
                {\n
                    v6 = *(v5);\n
                    v9 = v5 + 4;\n
                    v7 = v21 - 4;\n
                    if (v6 > 1415071059)\n
                    {\n
                        if (v6 == 1415071060)\n
                        {\n
                            strncpy(v3 + 4, \"TEXT\", 4);\n
                            if (v7 >= 4)\n
                            {\n
                                *((v3 + 12)) = *((eax<4> + 4));\n
                                v7 = v21 - 8;\n
                                v9 = eax<4> + 8;\n
                            }\n
                            v14 = *((v3 + 12));\n
                            if (v14 >= 1025)\n
                                if (v7 < v14)\n
                                    goto LABEL_402c6f;\n
                                else\n
                                    goto LABEL_402bbe;\n
LABEL_402bbe:\n
                            if (!v14)\n
                                continue;\n
                            v17 = cgc_malloc(v14 + 1);\n
                            *((v3 + 8)) = v17;\n
                            if (!v17)\n
                                goto LABEL_402c6f;\n
                            cgc_memset(v17, 0, *((v3 + 12)) + 1);\n
                        }\n
                        else\n
                        {\n
                            if (!(v6 == 1482245451))\n
                                continue;\n
                            strncpy(v3 + 4, \"KEYX\", 4);\n
                            *((v3 + 16)) = *((eax<4> + 4));\n
                            v7 = v21 - 5;\n
                            if (v7 < 4)\n
                            {\n
                                v13 = eax<4> + 5;\n
                            }\n
                            else\n
                            {\n
                                *((v3 + 12)) = *((eax<4> + 5));\n
                                v13 = eax<4> + 9;\n
                                v7 = v21 - 9;\n
                            }\n
                            v9 = v13;\n
                            v15 = *((v3 + 12));\n
                            if (!(v15 <= 128))\n
                                goto LABEL_402c6f;\n
                            if (v7 < v15)\n
                                goto LABEL_402c6f;\n
                            if (!v15)\n
                                continue;\n
                            v18 = cgc_malloc(v15);\n
                            *((v3 + 8)) = v18;\n
                            if (!v18)\n
                                goto LABEL_402c6f;\n
                        }\n
                        cgc_memmove(v1, a0, v2);\n
                        v20 = *((v3 + 12));\n
                    }\n
                    else if (v6 != 1096040772)\n
                    {\n
                        if (v6 == 1330398536)\n
                        {\n
                            strncpy(v3 + 4, \"HELO\", 4);\n
                            *((v3 + 8)) = *((eax<4> + 4));\n
                            if (v21 != 5)\n
                            {\n
                                v11 = eax<4> + 6;\n
                                *((v3 + 9)) = *((eax<4> + 5));\n
                                v7 = v21 - 6;\n
                            }\n
                            else\n
                            {\n
                                v11 = eax<4> + 5;\n
                                v7 = 0;\n
                            }\n
                            v9 = v11;\n
                            if (v7 >= 4)\n
                            {\n
                                *((v3 + 12)) = *(v11);\n
                                v9 = v11 + 4;\n
                                v7 -= 4;\n
                            }\n
                        }\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        strncpy(v3 + 4, \"DATA\", 4);\n
                        if (v7 >= 4)\n
                        {\n
                            *((v3 + 8)) = *((eax<4> + 4));\n
                            v7 = v21 - 8;\n
                            v9 = eax<4> + 8;\n
                        }\n
                        if (*((v3 + 8)) <= 0)\n
                            goto LABEL_402c6f;\n
                        if (v7 >= 4)\n
                        {\n
                            *((v3 + 16)) = *(v9);\n
                            v9 += 4;\n
                            v7 -= 4;\n
                        }\n
                        v16 = *((v3 + 16));\n
                        if (v16 >= 513)\n
                            if (v7 < v16)\n
                                goto LABEL_402c6f;\n
                            else\n
                                goto LABEL_402b39;\n
LABEL_402b39:\n
                        if (!v16)\n
                            continue;\n
                        v19 = cgc_malloc(v16 + 1);\n
                        *((v3 + 12)) = v19;\n
                        if (!v19)\n
                            goto LABEL_402c6f;\n
                        cgc_memset(v19, 0, *((v3 + 16)) + 1);\n
                        cgc_memmove(*((v3 + 12)), v9, *((v3 + 16)));\n
                        v20 = *((v3 + 16));\n
                    }\n
                    v9 += v20;\n
                    v7 -= v20;\n
                    v5 = v9;\n
                    v21 = v7;\n
                } while (v7 > 4);\n
                goto LABEL_402c6f;\n
            }\n
            if (v7 == 4)\n
            {\n
                v0 = *(v9);\n
                if (a0 != 4)\n
                {\n
                    v22 = 0;\n
                    v23 = 0;\n
                    do\n
                    {\n
                        v24 = v1[v23] + v22 ^ v22 * 0x400;\n
                        v23 += 1;\n
                        v22 = v24;\n
                    } while (a0 + 4 != v23);\n
                    if (v0 == v24)\n
                        return v3;\n
                }\n
                else if (!v0)\n
                {\n
                    return v3;\n
                }\n
            }\n
        }\n
    }\n
LABEL_402c6f:\n
    if (v3)\n
        cgc_free(v3);\n
    return 0;\n
}\n
", "4205117:sub_402a3d": null, "4205213:sub_402a9d": null, "4205281:sub_402ae1": null, "4205447:sub_402b87": null, "4205707:sub_402c8b": null, "4205712:cgc_sorted": "int cgc_sorted(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        return 0;\n
    }\n
    else if (!*((v1 + 4)))\n
    {\n
        return v1;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v1 + 4));\n
            if (!v2)\n
            {\n
LABEL_402cb0:\n
                *((v1 + 4)) = v2;\n
                v2 = v1;\n
                continue;\n
            }\n
            else\n
            {\n
                v4 = *(*(v1));\n
                v6 = v2;\n
                if (v4 < *(*(v2)))\n
                    goto LABEL_402cb0;\n
                while (true)\n
                {\n
                    v5 = v6;\n
                    v6 = *((v6 + 4));\n
                    if (!v6)\n
                        break;\n
                    if (v4 < *(*(v5)))\n
                        break;\n
                }\n
                *((v1 + 4)) = v6;\n
                *((v5 + 4)) = v1;\n
            }\n
            v1 = v3;\n
        } while (v3);\n
        return v2;\n
    }\n
}\n
", "4205734:sub_402ca6": null, "4205811:sub_402cf3": null, "4205824:cgc_queue_msg": "extern char cgc_head;\n
extern char cgc_tail;\n
\n
int cgc_queue_msg(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v1;\n
    v2 = &cgc_tail;\n
    if (cgc_head)\n
    {\n
        v3 = cgc_tail;\n
    }\n
    else\n
    {\n
        v3 = &cgc_tail;\n
        v2 = &cgc_head;\n
    }\n
    *(v3) = v1;\n
    *(v2) = v1;\n
    v1 = cgc_fdprintf(1, \"QUEUED\\n
\");\n
    return v1;\n
}\n
", "4205908:sub_402d54": null, "4205920:cgc_clear_queue": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern struct_0 *cgc_head;\n
\n
int cgc_clear_queue()\n
{\n
    struct_0 *v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = cgc_head;\n
    if (!cgc_head)\n
        return cgc_fdprintf(1, \"QUEUE CLEARED\\n
\");\n
    do\n
    {\n
        v2 = *((v1 + 4));\n
        if (v2 == 1096040772)\n
        {\n
            v3 = *((v1 + 12));\n
            if (!v3)\n
                continue;\n
        }\n
        else\n
        {\n
            if (v2 != 1415071060 && !(v2 == 1482245451))\n
                continue;\n
            v3 = *((v1 + 8));\n
            if (!v3)\n
                continue;\n
        }\n
        cgc_free(v3);\n
        cgc_free(v1);\n
        v1 = *(v1);\n
    } while (v1);\n
    return cgc_fdprintf(1, \"QUEUE CLEARED\\n
\");\n
}\n
", "4205977:sub_402d99": null, "4206033:sub_402dd1": null, "4206065:sub_402df1": null, "4206080:cgc_process": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_head;\n
extern char g_4;\n
\n
int cgc_process()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // ebp\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // ebx\n
\n
    v4 = \"lc\";\n
    v10 = cgc_head;\n
    if (!cgc_head)\n
    {\n
        v6 = 0;\n
        v12 = 0;\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        v6 = 0;\n
        v12 = 0;\n
        v5 = 0;\n
        v8 = 0;\n
        do\n
        {\n
            if (v12 && v11 > *((v12 + &g_4)))\n
                break;\n
            v13 = *((v10 + &g_4));\n
            if (v13 <= 1415071059)\n
            {\n
                if (v13 != 1096040772)\n
                {\n
                    if (v13 == 1330398536 && !v12)\n
                    {\n
                        if (*((v10 + 8)) != 103)\n
                        {\n
                            cgc_fdprintf(1, v4 - 8550);\n
                            v12 = 0;\n
                            goto LABEL_402e70;\n
                        }\n
                        else\n
                        {\n
                            v12 = v10 + 8;\n
                            v14 = v4;\n
                            v16 = v14 - 8557;\n
                            if (!*((v10 + 9)))\n
                                v16 = v14 - 8554;\n
                            v1 = v16;\n
                            v0 = 103;\n
                            cgc_fdprintf(1, v14 - 8597);\n
                        }\n
                    }\n
                    continue;\n
                }\n
                if (v12)\n
                {\n
                    if (!*((v12 + 1)))\n
                    {\n
                        v21 = v4 - 8450;\n
                        goto LABEL_40313c;\n
                    }\n
                    else if (!v6)\n
                    {\n
                        v6 = 0;\n
                        v21 = v4 - 8430;\n
                        goto LABEL_40313c;\n
                    }\n
                    else\n
                    {\n
                        v7 = v10 + 8;\n
                        v3 = *((v10 + 16));\n
                        v2 = *((v10 + 8));\n
                        cgc_fdprintf(1, v4 - 8412);\n
                        v15 = cgc_malloc(8);\n
                        if (v5)\n
                        {\n
                            *((v8 + &g_4)) = v15;\n
                            if (v15)\n
                            {\n
                                *(v15) = v7;\n
                                *((v15 + &g_4)) = 0;\n
                                v8 = v15;\n
                                goto LABEL_402e70;\n
                            }\n
                        }\n
                        else if (!v15)\n
                        {\n
                            v5 = 0;\n
                            goto LABEL_402e70;\n
                        }\n
                        else\n
                        {\n
                            *(v15) = v7;\n
                            *((v15 + &g_4)) = 0;\n
                            v5 = v15;\n
                            v8 = v15;\n
                        }\n
                        continue;\n
                    }\n
                }\n
            }\n
            if (v13 == 1415071060)\n
            {\n
                if (v12)\n
                {\n
                    if (*((v12 + 1)))\n
                    {\n
                        v21 = v4 - 8388;\n
                        goto LABEL_40313c;\n
                    }\n
                    else if (!v2)\n
                    {\n
                        v21 = v4 - 8372;\n
                        goto LABEL_40313c;\n
                    }\n
                    else\n
                    {\n
                        v3 = *((v10 + 8));\n
                        v2 = *((v10 + 12));\n
                        cgc_fdprintf(1, v4 - 8359);\n
                        continue;\n
                    }\n
                }\n
LABEL_4030ea:\n
                v12 = 0;\n
                break;\n
            }\n
            else\n
            {\n
                if (!(v13 == 1482245451))\n
                    continue;\n
                if (!v12)\n
                    goto LABEL_4030ea;\n
                if (!(!v6))\n
                    continue;\n
                v6 = 0;\n
                if (!*((v12 + 1)))\n
                {\n
                    v21 = v4 - 8533;\n
                    goto LABEL_40313c;\n
                }\n
                else if (*((v10 + 12)))\n
                {\n
                    v7 = v12;\n
                    v17 = v4;\n
                    cgc_fdprintf(1, v17 - 8505);\n
                    cgc_fdprintf(1, v17 - 8499);\n
                    v18 = v17 - 8479;\n
                    if ((*((v10 + 16)) & 15) == 7)\n
                        v18 = v17 - 8490;\n
                    cgc_fdprintf(1, v18);\n
                    if ((*((v10 + 16)) & 240) != 48)\n
                    {\n
                        cgc_fdprintf(1, v17 - 8458);\n
                    }\n
                    else\n
                    {\n
                        cgc_fdprintf(1, v17 - 8469);\n
                        if (*((v10 + 12)))\n
                        {\n
                            v19 = 0;\n
                            do\n
                            {\n
                                v20 = *((v10 + 8));\n
                                *((v20 + v19)) = ~(*((v20 + v19)));\n
                                v19 += 1;\n
                            } while (v19 < *((v10 + 12)));\n
                        }\n
                    }\n
                    v6 = v10 + 8;\n
                    v2 = *((v10 + 12));\n
                    cgc_fdprintf(1, v4 - 8398);\n
                    v12 = v7;\n
                }\n
                else\n
                {\n
                    v21 = v4 - 8513;\n
LABEL_40313c:\n
                    cgc_fdprintf(1, v21);\n
                    break;\n
                }\n
            }\n
LABEL_402e70:\n
            v10 = *(v10);\n
            v11 += 1;\n
        } while (v10);\n
    }\n
    v32 = v4;\n
    if (!v12)\n
        cgc_fdprintf(1, v32 - 8335);\n
    v22 = v5;\n
    if (!v22)\n
    {\n
        cgc_fdprintf(1, v32 - 8269);\n
        *((v32 + 308)) = 0;\n
        *((v32 + 304)) = 0;\n
        return cgc_clear_queue();\n
    }\n
    if (!*((v22 + &g_4)))\n
    {\n
        v30 = v22;\n
    }\n
    else\n
    {\n
        v30 = 0;\n
        do\n
        {\n
            v23 = v22;\n
            v24 = *((v22 + &g_4));\n
            if (!v30)\n
            {\n
LABEL_403180:\n
                *((v23 + &g_4)) = v30;\n
                v30 = v23;\n
                continue;\n
            }\n
            else\n
            {\n
                v25 = *(*(v22));\n
                v26 = v30;\n
                if (v25 < *(*(v30)))\n
                    goto LABEL_403180;\n
                while (true)\n
                {\n
                    v27 = v26;\n
                    v26 = *((v26 + &g_4));\n
                    if (!v26)\n
                        break;\n
                    if (v25 < *(*(v27)))\n
                        break;\n
                }\n
                *((v30 + &g_4)) = v26;\n
                *((v27 + &g_4)) = v30;\n
            }\n
            v22 = v24;\n
        } while (v24);\n
    }\n
    cgc_fdprintf(1, v4 - 8321);\n
    if (v30)\n
    {\n
        v5 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v28 = *(v30);\n
            v29 = *(v28);\n
            if (v31 != v29)\n
            {\n
                v31 = v5;\n
                if (v31 != v29)\n
                {\n
                    v2 = v31;\n
                    cgc_fdprintf(1, v4 - 8290);\n
                }\n
                else\n
                {\n
                    if (cgc_decode_data(v6, v28))\n
                    {\n
                        v2 = *((*(v30) + &g_4));\n
                        cgc_fdprintf(1, v4 - 8272);\n
                    }\n
                    v30 = *((v30 + &g_4));\n
                }\n
                v5 = v31 + 1;\n
                if (!v30)\n
                    break;\n
            }\n
            else\n
            {\n
                v2 = v31;\n
                cgc_fdprintf(1, v4 - 8304);\n
                v30 = *((v30 + &g_4));\n
                if (!v30)\n
                    break;\n
            }\n
        }\n
    }\n
    v32 = v4;\n
    cgc_fdprintf(1, v32 - 8306);\n
}\n
", "4206310:sub_402ee6": null, "4206972:sub_40317c": null, "4207321:sub_4032d9": null, "4207328:cgc_quit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_quit()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // ebx\n
\n
    v0 = v2;\n
    v3 = \"lc\";\n
    cgc_fdprintf(1, \"QUIT\\n
\");\n
    cgc__terminate(0, \"QUIT\\n
\");\n
    main();\n
    return;\n
}\n
", "4207392:main": "extern char cgc_head;\n
extern char cgc_tail;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x838]\n
    unsigned int v1;  // [bp-0x834]\n
    char v2;  // [bp-0x820]\n
    unsigned int v3;  // [bp-0x81c]\n
    unsigned int v4;  // [bp-0x818]\n
    unsigned int v5;  // [bp-0x814]\n
    char v6;  // [bp-0x810]\n
    char v7;  // [bp-0x80c]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edx\n
\n
    v1 = 4;\n
    if (cgc_read_n(0, &v2) <= 0)\n
        return -1;\n
    v3 = \"FAILED TO QUEUE\\n
\";\n
    v5 = &cgc_head;\n
    v4 = \"QUEUED\\n
\";\n
    while (true)\n
    {\n
        if (v1 - 2049 < -2045)\n
            return -1;\n
        v1 = *(&v2);\n
        if (cgc_read_n(0, &v6) <= 0)\n
            return -1;\n
        v10 = *(&v6);\n
        if (!v10)\n
        {\n
            v11 = cgc_parse_msg(&v7, *(&v2) - 4);\n
            if (!v11)\n
            {\n
                v0 = v3;\n
            }\n
            else\n
            {\n
                v12 = &cgc_tail;\n
                v13 = v5;\n
                if (cgc_head)\n
                {\n
                    v12 = cgc_tail;\n
                    v13 = &cgc_tail;\n
                }\n
                *(v12) = v11;\n
                *(v13) = v11;\n
                v0 = v4;\n
            }\n
            cgc_fdprintf(1, v0);\n
        }\n
        else\n
        {\n
            if (v10 != 1)\n
                break;\n
            cgc_process();\n
        }\n
        v1 = 4;\n
        if (cgc_read_n(0, &v2) <= 0)\n
            return -1;\n
    }\n
    if (v10 == 2)\n
    {\n
        cgc_fdprintf(1, \"QUIT\\n
\");\n
        cgc__terminate(0);\n
        return cgc_read_until();\n
    }\n
    return -1;\n
}\n
", "4207484:sub_40337c": null, "4207590:sub_4033e6": null, "4207728:cgc_read_until": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_until(unsigned int v2, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_17;  // tmp #17\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // ebp\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
    void* v6;  // ecx\n
    unsigned int v7;  // esi\n
\n
    v3 = a1;\n
    v4 = a0;\n
    if (a1)\n
    {\n
        v4 = a0;\n
        do\n
        {\n
            v0 = &v1;\n
            v5 = 1;\n
            if (!cgc_receive(v2, v4, 1) && *(&v1))\n
            {\n
                v6 = 0;\n
                tmp_17 = *(v4);\n
                v4 += 1;\n
                *(&v6) = tmp_17 == a2;\n
                v5 = v6 * 2;\n
            }\n
            if (v5)\n
            {\n
                if (v5 != 2)\n
                    return -1;\n
                break;\n
            }\n
            tmp_2 = v3;\n
            v3 -= 1;\n
        } while (tmp_2 != 1);\n
    }\n
    *((v4 - 1)) = 0;\n
    v7 = v4 - a0;\n
    return v7;\n
}\n
", "4207866:sub_4034fa": null, "4207872:cgc_read_n": "int cgc_read_n(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // ebp\n
    unsigned int v6;  // eax\n
\n
    if (!a1)\n
        return a0 - a0;\n
    v4 = 1;\n
    v3 = a0;\n
    while (true)\n
    {\n
        v5 = v3;\n
        v0 = &v1;\n
        v6 = cgc_receive(v2, v3, 1);\n
        tmp_12 = !*(&v1) | v6;\n
        v3 = ((!*(&v1) | v6) ^ 1) + v5;\n
        if (tmp_12 == 1)\n
            return v3 - a0;\n
        v4 += 1;\n
        if (1 >= a1)\n
            return v3 - a0;\n
    }\n
}\n
", "4207992:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}