{"4198400:_init": "extern struct_0 *g_406318;\n
\n
int _init()\n
{\n
    if (g_406318)\n
    {\n
        g_406318();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198496:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198512:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198550:sub_401096": null, "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198603:sub_4010cb": null, "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198612:sub_4010d4": null, "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 21055;\n
    v6 = v5 + 47;\n
    v7 = v5 + 47;\n
    if (v7 == v6)\n
        return v5 + 47;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
", "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 20991;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 47;\n
    v9 = (v6 + 47 - (v6 + 47) >> 31) + (47 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_406314;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_406314)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198861:sub_4011cd": null, "4198864:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4198943:sub_40121f": null, "4198944:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4198977:sub_401241": null, "4198992:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4199011:sub_401263": null, "4199024:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199040:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199056:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199072:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4199086:sub_4012ae": null, "4199088:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4199110:sub_4012c6": null, "4199120:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4199142:sub_4012e6": null, "4199152:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4199174:sub_401306": null, "4199184:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4199206:sub_401326": null, "4199216:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8988 + v0];\n
}\n
", "4199241:sub_401349": null, "4199248:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4199273:sub_401369": null, "4199280:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8860 + v0];\n
}\n
", "4199305:sub_401389": null, "4199312:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199320:sub_401398": null, "4199328:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4199347:sub_4013b3": null, "4199360:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4199379:sub_4013d3": null, "4199392:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4199481:sub_401439": null, "4199488:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_406460;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_4014f7;\n
            else\n
                goto LABEL_0x401510;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_406460;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (true)\n
            {\n
LABEL_4014f7:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_4014f7;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4199914:sub_4015ea": null, "4199920:cgc_get_size_class": "extern unsigned int g_406354;\n
extern unsigned int g_406358;\n
extern unsigned int g_40635c;\n
extern unsigned int g_406360;\n
extern unsigned int g_406364;\n
extern unsigned int g_406368;\n
extern unsigned int g_40636c;\n
extern unsigned int g_406370;\n
extern unsigned int g_406374;\n
extern unsigned int g_406378;\n
extern unsigned int g_40637c;\n
extern unsigned int g_406380;\n
extern unsigned int g_406384;\n
extern unsigned int g_406388;\n
extern unsigned int g_40638c;\n
extern unsigned int g_406390;\n
extern unsigned int g_406394;\n
extern unsigned int g_406398;\n
extern unsigned int g_40639c;\n
extern unsigned int g_4063a0;\n
extern unsigned int g_4063a4;\n
extern unsigned int g_4063a8;\n
extern unsigned int g_4063ac;\n
extern unsigned int g_4063b0;\n
extern unsigned int g_4063b4;\n
extern unsigned int g_4063b8;\n
extern unsigned int g_4063bc;\n
extern unsigned int g_4063c0;\n
extern unsigned int g_4063c4;\n
extern unsigned int g_4063c8;\n
extern unsigned int g_4063cc;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_406354 < v1)\n
    {\n
        v2 = 2;\n
        if (g_406358 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40635c < v1)\n
            {\n
                v2 = 4;\n
                if (g_406360 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_406364 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_406368 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40636c < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_406370 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_406374 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_406378 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40637c < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_406380 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_406384 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_406388 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_40638c < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_406390 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_406394 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_406398 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_40639c < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_4063a0 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_4063a4 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_4063a8 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_4063ac < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_4063b0 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_4063b4 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_4063b8 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_4063bc < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_4063c0 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_4063c4 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_4063c8 < v1)\n
                                                                                                                            v2 = 31 + (g_4063cc < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4200439:sub_4017f7": null, "4200448:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]);\n
    if (!v3)\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v1;\n
        return v2;\n
    }\n
    v1[2] = v3;\n
    *((*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) + 12)) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v1;\n
    v1[3] = 0;\n
    return v2;\n
}\n
", "4200541:sub_40185d": null, "4200544:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ecx\n
    struct_1 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4200639:sub_4018bf": null, "4200640:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!*((v1 + 20)))\n
        return v34;\n
    v12 = *((v1 + 16));\n
    if (!*((v2 + 4)))\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!*((v12 + 4)))\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(*(v12));\n
            v6 = *((v12 + 12));\n
            if (v6)\n
                *((v6 + 8)) = *((v12 + 8));\n
            v10 = *((v12 + 8));\n
            if (v10)\n
                *((v10 + 12)) = v6;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[48 + v4] == v12)\n
                (&_GLOBAL_OFFSET_TABLE_)[48 + v4] = v10;\n
            *((v12 + 8)) = 0;\n
            *((v12 + 12)) = 0;\n
            *((v12 + 4)) = 0;\n
            v14 = *(v1);\n
            v15 = cgc_get_size_class(v14);\n
            v17 = *((v1 + 12));\n
            if (v17)\n
                *((v17 + 8)) = *((v1 + 8));\n
            v22 = *((v1 + 8));\n
            if (v22)\n
                *((v22 + 12)) = v17;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[48 + v15] == v1)\n
                (&_GLOBAL_OFFSET_TABLE_)[48 + v15] = v22;\n
            *((v1 + 8)) = 0;\n
            *((v1 + 12)) = 0;\n
            *((v1 + 4)) = 0;\n
            v26 = v14 + *(*((v1 + 16)));\n
            *(v1) = v26;\n
            v27 = cgc_get_size_class(v26);\n
            *((v1 + 4)) = 1;\n
            v29 = (&_GLOBAL_OFFSET_TABLE_)[48 + v27];\n
            if (v29)\n
            {\n
                *((v1 + 8)) = v29;\n
                *(((&_GLOBAL_OFFSET_TABLE_)[48 + v27] + 12)) = v1;\n
                (&_GLOBAL_OFFSET_TABLE_)[48 + v27] = v1;\n
                *((v1 + 12)) = 0;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_401c3a;\n
            }\n
            else\n
            {\n
                (&_GLOBAL_OFFSET_TABLE_)[48 + v27] = v1;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_401c3a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_401c3a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_401c41:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && *((v12 + 4)))\n
    {\n
        v3 = cgc_get_size_class(*(v2));\n
        v5 = *((v2 + 12));\n
        if (v5)\n
            *((v5 + 8)) = *((v2 + 8));\n
        v8 = *((v2 + 8));\n
        if (v8)\n
            *((v8 + 12)) = v5;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[48 + v3] == v2)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[48 + v3] = v8;\n
            v12 = *((v1 + 16));\n
        }\n
        *((v2 + 8)) = 0;\n
        *((v2 + 12)) = 0;\n
        *((v2 + 4)) = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            *((v16 + 8)) = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            *((v20 + 12)) = v16;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[48 + v13] == v12)\n
            (&_GLOBAL_OFFSET_TABLE_)[48 + v13] = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = *(v1);\n
        v25 = cgc_get_size_class(v24);\n
        v28 = *((v1 + 12));\n
        if (v28)\n
            *((v28 + 8)) = *((v1 + 8));\n
        v35 = *((v1 + 8));\n
        if (v35)\n
            *((v35 + 12)) = v28;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[48 + v25] == v1)\n
            (&_GLOBAL_OFFSET_TABLE_)[48 + v25] = v35;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 4)) = 0;\n
        v38 = *((v1 + 20));\n
        v39 = v24 + *(*((v1 + 20)));\n
        *(*((v1 + 20))) = v39;\n
        v40 = v39 + *(*((v1 + 16)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 4)) = 1;\n
        v42 = (&_GLOBAL_OFFSET_TABLE_)[48 + v41];\n
        if (v42)\n
        {\n
            *((v38 + 8)) = v42;\n
            *(((&_GLOBAL_OFFSET_TABLE_)[48 + v41] + 12)) = v38;\n
            (&_GLOBAL_OFFSET_TABLE_)[48 + v41] = v38;\n
            *((v38 + 12)) = 0;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_401a31;\n
        }\n
        else\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[48 + v41] = v38;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_401a31;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_401a31:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            *((v45 + 20)) = v44;\n
            v34 = *((v1 + 20));\n
            if (!v34)\n
                goto LABEL_401b40;\n
            goto LABEL_401b3a;\n
        }\n
    }\n
    v34 = *((v1 + 16));\n
    if (!v34)\n
        return *((v1 + 16));\n
    if (*((v34 + 4)))\n
        return *((v1 + 16));\n
    v7 = cgc_get_size_class(*(v2));\n
    v9 = *((v2 + 12));\n
    if (v9)\n
        *((v9 + 8)) = *((v2 + 8));\n
    v11 = *((v2 + 8));\n
    if (v11)\n
        *((v11 + 12)) = v9;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[48 + v7] == v2)\n
        (&_GLOBAL_OFFSET_TABLE_)[48 + v7] = v11;\n
    *((v2 + 8)) = 0;\n
    *((v2 + 12)) = 0;\n
    *((v2 + 4)) = 0;\n
    v18 = *(v1);\n
    v19 = cgc_get_size_class(v18);\n
    v21 = *((v1 + 12));\n
    if (v21)\n
        *((v21 + 8)) = *((v1 + 8));\n
    v23 = *((v1 + 8));\n
    if (v23)\n
        *((v23 + 12)) = v21;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[48 + v19] == v1)\n
        (&_GLOBAL_OFFSET_TABLE_)[48 + v19] = v23;\n
    *((v1 + 8)) = 0;\n
    *((v1 + 12)) = 0;\n
    *((v1 + 4)) = 0;\n
    v30 = *((v1 + 20));\n
    v31 = v18 + *(*((v1 + 20)));\n
    *(*((v1 + 20))) = v31;\n
    v32 = cgc_get_size_class(v31);\n
    *((v30 + 4)) = 1;\n
    v36 = (&_GLOBAL_OFFSET_TABLE_)[48 + v32];\n
    if (v36)\n
    {\n
        *((v30 + 8)) = v36;\n
        *(((&_GLOBAL_OFFSET_TABLE_)[48 + v32] + 12)) = v30;\n
        (&_GLOBAL_OFFSET_TABLE_)[48 + v32] = v30;\n
        *((v30 + 12)) = 0;\n
    }\n
    else\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[48 + v32] = v30;\n
        v34 = *((v1 + 20));\n
        if (!v34)\n
            goto LABEL_401b40;\n
LABEL_401b3a:\n
        *((v34 + 16)) = *((v1 + 16));\n
LABEL_401b40:\n
        v37 = *((v1 + 16));\n
        if (!v37)\n
            return v34;\n
        goto LABEL_401c41;\n
    }\n
    v34 = *((v1 + 20));\n
    if (!v34)\n
        goto LABEL_401b40;\n
    goto LABEL_401b3a;\n
}\n
", "4201616:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4201673:sub_401cc9": null, "4201680:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4201743:sub_401d0f": null, "4201744:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4201874:sub_401d92": null, "4201888:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4202144:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4202254:sub_401f0e": null, "4202256:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
\n
    v6 = a2;\n
    v7 = a1;\n
    v8 = a0;\n
    v11 = v5;\n
    if (v8 < v7)\n
    {\n
        v3 = v8;\n
        v2 = 0;\n
        if (v6 <= 0)\n
            goto LABEL_401feb;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v8) /m v7;\n
        v3 = tmp_9 >> 32;\n
        v11 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v8) /m v7, v7, v6 - 1, a3);\n
        if (v6 <= 0)\n
            goto LABEL_401feb;\n
    }\n
    if (!v2)\n
    {\n
        tmp_2 = v6;\n
        v12 = v6 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_401feb:\n
    if (!(a3 & 2))\n
    {\n
        v13 = v3;\n
        v14 = v13 + 87;\n
    }\n
    else\n
    {\n
        v13 = v3;\n
        v14 = v13 + 55;\n
    }\n
    if (v13 < 10)\n
        v14 = v13 + 48;\n
    v1 = v14;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4202548:sub_402034": null, "4202560:cgc_fdprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fdprintf(unsigned int v10, struct struct_1 **a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x38]\n
    struct_0 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    struct struct_2 **v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x14]\n
    char v11;  // [bp+0xc]\n
    struct struct_1 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_0 *v14;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    struct struct_1 **v19;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v20;  // eax, Other Possible Types: unsigned int\n
    char *v21;  // edx, Other Possible Types: unsigned int\n
    struct struct_2 **v22;  // eax\n
    struct struct_2 **v23;  // eax\n
    unsigned int v24;  // edi\n
    struct struct_2 **v25;  // eax\n
    struct struct_2 **v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v20 = v12 + 1;\n
        a0 = v20;\n
        *(&v12) = *(v12);\n
        if (v6 == 37)\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            v19 = v20;\n
            while (true)\n
            {\n
                v20 = v19 + 1;\n
                a0 = v20;\n
                v16 = *(v19);\n
                v17 = v16;\n
                if (v17 - 49 >= 9)\n
                    break;\n
                v18 = cgc_strtol(v19, &a0);\n
                v19 = a0;\n
            }\n
            switch (v17)\n
            {\n
            case 88:\n
                v21 = v9 | 2;\n
                goto LABEL_4021f9;\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
                v6 = v16;\n
                break;\n
            case 99:\n
                v22 = v8;\n
                v8 = v22 + 1;\n
                v6 = *(v22);\n
                break;\n
            case 100:\n
                v23 = v8;\n
                v8 = v23 + 1;\n
                v24 = *(v23);\n
                if (v24 >= 0)\n
                {\n
                    v28 = v10;\n
                }\n
                else\n
                {\n
LABEL_402237:\n
                    v6 = 45;\n
                    v5 = &v7;\n
                    v28 = v10;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v24 = -(v24);\n
                }\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                v0 = v24;\n
                goto LABEL_402262;\n
            case 115:\n
                v25 = v8;\n
                v8 = v25 + 1;\n
                v9 = &*(v25)->field_0;\n
                v27 = v10;\n
                v14 = &v7;\n
                v15 = &v6;\n
                if (cgc_strlen())\n
                {\n
                    v29 = 0;\n
                    do\n
                    {\n
                        v6 = v9[v29];\n
                        v5 = v14;\n
                        v4 = v15;\n
                        cgc_transmit(v27, v15, 1);\n
                        v29 += 1;\n
                        v15 = &v6;\n
                        v14 = &v7;\n
                    } while (v29 < cgc_strlen(v9, v4, 1));\n
                }\n
                goto LABEL_402097;\n
            case 117:\n
                v26 = v8;\n
                v8 = v26 + 1;\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                goto LABEL_40220b;\n
            case 120:\n
                v21 = v9;\n
LABEL_4021f9:\n
                v26 = v8;\n
                v8 = v26 + 4;\n
                v3 = v21;\n
                v2 = v18;\n
                v1 = 16;\n
LABEL_40220b:\n
                v0 = *(v26);\n
                v28 = v10;\n
LABEL_402262:\n
                cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                v27 = v28;\n
                v14 = &v7;\n
                v15 = &v6;\n
                goto LABEL_402097;\n
            default:\n
                if (v17 == 37)\n
                    goto LABEL_402213;\n
                else\n
                    goto LABEL_0x402101;\n
            }\n
LABEL_402213:\n
            v6 = 37;\n
            v5 = &v7;\n
            v15 = &v6;\n
            cgc_transmit(v10, &v6, 1);\n
            v27 = v10;\n
            goto LABEL_402237;\n
        }\n
        v6 = v12;\n
        v5 = v14;\n
        cgc_transmit(v13, v15, 1);\n
        v27 = v13;\n
        v14 = &v7;\n
LABEL_402097:\n
        v13 = v27;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4202614:sub_402076": null, "4203140:sub_402284": null, "4203152:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4023b4;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4023b4;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_4023b4:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4203498:sub_4023ea": null, "4203504:cgc_sprintf": "typedef struct struct_1 {\n
    char field_-1;\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
int cgc_sprintf(char v8[2], struct_1 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_1 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_1 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_1 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_0 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_0 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_402597;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_402517:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_402517;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_402597:\n
                        v8 = v20 + 1;\n
                        goto LABEL_40243d;\n
                    }\n
                }\n
            }\n
LABEL_40243d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4203558:sub_402426": null, "4203957:sub_4025b5": null, "4203968:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
    {\n
        v6 = cgc_malloc(v1);\n
        return v6;\n
    }\n
    else if (v1)\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (!v3)\n
        {\n
            v5 = 0;\n
        }\n
        else\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
        }\n
        return v5;\n
    }\n
    else\n
    {\n
        cgc_free(v2);\n
        v6 = cgc_malloc(8);\n
        return v6;\n
    }\n
}\n
", "4204098:sub_402642": null, "4204112:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4026ba;\n
        }\n
    }\n
LABEL_4026ba:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4204151:sub_402677": null, "4204256:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4204313:sub_402719": null, "4204320:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4204362:sub_40274a": null, "4204368:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4204436:sub_402794": null, "4204448:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4204513:sub_4027e1": null, "4204528:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4204604:sub_40283c": null, "4204608:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4204635:sub_40285b": null, "4204640:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4204722:sub_4028b2": null, "4204791:sub_4028f7": null, "4204800:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(v0) - *(a0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v4);\n
        }\n
    }\n
}\n
", "4204882:sub_402952": null, "4204896:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4205034:sub_4029ea": null, "4205040:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_402a5d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_402a5d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4205159:sub_402a67": null, "4205168:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4205211:sub_402a9b": null, "4205383:sub_402b47": null, "4205479:sub_402ba7": null, "4205488:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4205529:sub_402bd9": null, "4205536:cgc_read_bytes": "extern char ikey;\n
\n
int cgc_read_bytes(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_1;  // tmp #1\n
    int tmp_9;  // tmp #9\n
    int tmp_17;  // tmp #17\n
    int tmp_25;  // tmp #25\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ebp\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    char v9;  // cl\n
    unsigned int v10;  // edx\n
    char *v11;  // edx\n
    void* v12;  // ebp\n
\n
    v4 = a0;\n
    if (!a0)\n
        return 1;\n
    v5 = v3;\n
    do\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(0, v5, v4))\n
            return 0;\n
        v7 = *(&v2);\n
        if (!v7)\n
            return 0;\n
        v1 = v4;\n
        v9 = ikey;\n
        v8 = v7 & 3;\n
        v10 = 0;\n
        if (v7 - 1 >= 3)\n
        {\n
            v10 = 0;\n
            do\n
            {\n
                tmp_1 = v5[v10] ^ v9;\n
                v5[v10] = v5[v10] ^ v9;\n
                tmp_9 = v5[1 + v10] ^ tmp_1 + v9;\n
                v5[1 + v10] = v5[1 + v10] ^ tmp_1 + v9;\n
                tmp_17 = v5[2 + v10] ^ tmp_9 + tmp_1 + v9;\n
                v5[2 + v10] = v5[2 + v10] ^ tmp_9 + tmp_1 + v9;\n
                tmp_25 = v5[3 + v10] ^ tmp_17 + tmp_9 + tmp_1 + v9;\n
                v5[3 + v10] = v5[3 + v10] ^ tmp_17 + tmp_9 + tmp_1 + v9;\n
                v9 = tmp_25 + tmp_17 + tmp_9 + tmp_1 + v9;\n
                v10 += 4;\n
            } while ((v7 & -0x4) != v10);\n
        }\n
        if (v8)\n
        {\n
            v11 = v10 + v5;\n
            v12 = 0;\n
            do\n
            {\n
                tmp_1 = *(v11) ^ v9;\n
                *((v11 + v12)) = *((v11 + v12)) ^ v9;\n
                v9 += tmp_1;\n
            } while (v8 != 1);\n
        }\n
        ikey = v9;\n
        v5 += v7;\n
        v4 = v1 - v7;\n
    } while (v1 != v7);\n
}\n
", "4205573:sub_402c05": null, "4205795:sub_402ce3": null, "4205808:cgc_read_until": "extern char ikey;\n
\n
int cgc_read_until(unsigned int v5, unsigned int a0, char a1)\n
{\n
    return 1;\n
}\n
", "4205863:sub_402d27": null, "4206070:sub_402df6": null, "4206142:sub_402e3e": null, "4206144:cgc_write_bytes": "typedef struct struct_0 {\n
    char padding_0[173];\n
    char field_ad;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write_bytes(char *v3, unsigned int a0)\n
{\n
    int tmp_49;  // tmp #49\n
    int tmp_13;  // tmp #13\n
    int tmp_21;  // tmp #21\n
    int tmp_18;  // tmp #18\n
    unsigned int v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
    char *v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // ebx\n
    char v8;  // al\n
    char v9;  // al\n
    char v10;  // al\n
    char v11;  // cl\n
    unsigned int v12;  // edx\n
    char *v13;  // edx\n
    void* v14;  // ebp\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = a0;\n
    if (!v5)\n
        return &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = v3;\n
    v11 = v1->field_ad;\n
    v7 = v5 & 3;\n
    if (v5 - 1 < 3)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        do\n
        {\n
            v8 = v6[v12];\n
            tmp_49 = v6[1 + v12];\n
            v6[v12] = v11 ^ v8;\n
            v6[1 + v12] = v11 + v8 ^ tmp_49;\n
            tmp_13 = v11 + v8 + tmp_49;\n
            v9 = v6[2 + v12];\n
            v6[2 + v12] = tmp_13 ^ v9;\n
            tmp_21 = tmp_13 + v9;\n
            v10 = v6[3 + v12];\n
            v6[3 + v12] = tmp_21 ^ v10;\n
            v11 = tmp_21 + v10;\n
            v12 += 4;\n
        } while ((v5 & -0x4) != v12);\n
    }\n
    if (v7)\n
    {\n
        v13 = &v6[v12];\n
        v14 = 0;\n
        do\n
        {\n
            tmp_18 = *(v13);\n
            *((v13 + v14)) = v11 ^ *((v13 + v14));\n
            v11 += tmp_18;\n
        } while (v7 != 1);\n
    }\n
    v4 = v1;\n
    *((v4 + 173)) = v11;\n
    if (!v5)\n
        return v1;\n
    while (true)\n
    {\n
        v0 = &v2;\n
        v4 = cgc_transmit(1, v6, v5);\n
        if (v4)\n
            return v4;\n
        v4 = *(&v2);\n
        if (!v4)\n
            return v4;\n
        v5 -= v4;\n
        v6 += v4;\n
        if (!v5)\n
            return v4;\n
    }\n
}\n
", "4206393:sub_402f39": null, "4206400:cgc_write_string": "extern char okey;\n
\n
int cgc_write_string(char *v4)\n
{\n
    int tmp_42;  // tmp #42\n
    int tmp_13;  // tmp #13\n
    int tmp_21;  // tmp #21\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // edi\n
    char *v6;  // edi, Other Possible Types: unsigned int\n
    char v7;  // cl\n
    char v8;  // cl\n
    char v9;  // cl\n
    unsigned int v10;  // edx\n
    char *v11;  // edx\n
    char v12;  // cl\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
\n
    v3 = v5;\n
    v6 = v4;\n
    v13 = cgc_strlen(v6);\n
    if (!v13)\n
        return v13;\n
    v14 = v13;\n
    *(&v13) = okey;\n
    v1 = v14 & 3;\n
    if (v14 - 1 < 3)\n
    {\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        *(&v13) = okey;\n
        do\n
        {\n
            tmp_42 = v6[v10];\n
            v7 = v6[1 + v10];\n
            v6[v10] = v6[v10] ^ v13;\n
            v6[1 + v10] = v7 ^ tmp_42 + v13;\n
            tmp_13 = tmp_42 + v13 + v7;\n
            v8 = v6[2 + v10];\n
            v6[2 + v10] = v8 ^ tmp_13;\n
            tmp_21 = tmp_13 + v8;\n
            v9 = v6[3 + v10];\n
            v6[3 + v10] = v9 ^ tmp_21;\n
            *(&v13) = tmp_21 + v9;\n
            v10 += 4;\n
            *(&v13) = tmp_21 + v9;\n
        } while ((v14 & -0x4) != v10);\n
    }\n
    if (v1)\n
    {\n
        v11 = &v6[v10];\n
        do\n
        {\n
            v12 = *(v11);\n
            *(v11) = v12 ^ v13;\n
            *(&v13) = v13 + v12;\n
        } while (v1 != 1);\n
    }\n
    okey = v13;\n
    while (true)\n
    {\n
        v0 = &v2;\n
        v13 = cgc_transmit(1, v6, v14);\n
        if (v13)\n
            return v13;\n
        v13 = *(&v2);\n
        if (!v13)\n
            return v13;\n
        v14 -= v13;\n
        v6 += v13;\n
        if (!v14)\n
            return v13;\n
    }\n
}\n
", "4206649:sub_403039": null, "4206656:cgc_handle_msg_ping": "int cgc_handle_msg_ping(char *v2, unsigned int a0)\n
{\n
    unsigned short v0;  // [bp-0x12]\n
    unsigned short v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
\n
    v3 = a0;\n
    v0 = 0;\n
    if (v3 <= 32767)\n
    {\n
        v1 = __ROL__(v3, 8);\n
        v4 = 4;\n
    }\n
    else\n
    {\n
        v1 = __buildin_bswap32(v3 | 0x80000000);\n
        v4 = 6;\n
    }\n
    cgc_write_bytes(&v0, v4);\n
    cgc_write_bytes(v2, v3);\n
    return 1;\n
}\n
", "4206772:sub_4030b4": null, "4206784:main": "extern unsigned int cgc_handlers;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x224]\n
    int tmp_2;  // tmp #2\n
    void* v1;  // [bp-0x21c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x216]\n
    char v3;  // [bp-0x214]\n
    char v4;  // [bp-0x212]\n
    char v5;  // [bp-0x210]\n
    unsigned int v8;  // edi\n
    unsigned short v9;  // ebp\n
    char *v10;  // eax\n
    unsigned int v11;  // esi\n
\n
    cgc_init_vault();\n
    v0 = 12;\n
    cgc_store_in_vault(0, &cgc_handlers);\n
    if (!cgc_read_bytes(&v2, 4))\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v8 = __ROL__(*(&v3), 8);\n
            if ((v8 & 0x8000))\n
            {\n
                if (!cgc_read_bytes(&v4, 2))\n
                    break;\n
                v8 = __buildin_bswap32(*(&v3) & -129);\n
            }\n
            v9 = __ROL__(*(&v2), 8);\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0x5<32>, Conv(16->32, ebp<2>), 0x3<32>, 0x0<32>)))\n
            {\n
LABEL_4031d0:\n
                if (!v8)\n
                    continue;\n
                while (true)\n
                {\n
                    v11 = (v8 < 0x200 ? 0x200 : v8);\n
                    if (!cgc_read_bytes(&v5, v11))\n
                        break;\n
                    tmp_2 = v8;\n
                    v8 -= v11;\n
                    if (tmp_2 == v11)\n
                        goto LABEL_403120;\n
                }\n
            }\n
            else\n
            {\n
                v10 = cgc_realloc(v1, v8);\n
                if (!v10)\n
                    goto LABEL_4031d0;\n
                if (cgc_read_bytes(v10, v8))\n
                {\n
                    *(&(&_GLOBAL_OFFSET_TABLE_)[296 + 4 * v9])(v10);\n
                    v1 = v10;\n
                }\n
                else\n
                {\n
                    v1 = v10;\n
                    break;\n
                }\n
            }\n
LABEL_403120:\n
        } while (cgc_read_bytes(&v2, 4));\n
    }\n
    cgc_free(v1);\n
    return 0;\n
}\n
", "4206865:sub_403111": null, "4207049:sub_4031c9": null, "4207152:cgc_handle_msg_time": "extern unsigned int _GLOBAL_OFFSET_TABLE_[47];\n
extern unsigned int cgc_current_time;\n
extern unsigned int g_4063dc;\n
\n
int cgc_handle_msg_time(unsigned int *v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    int tmp_6;  // tmp #6\n
    unsigned int v2;  // eax\n
    unsigned int v3[47];  // ebx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
\n
    v0 = v2;\n
    v3 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v10 = 0;\n
    if (a0 < 8)\n
        return v10;\n
    v5 = __buildin_bswap32(v1) * 1000 >> 32;\n
    v6 = __buildin_bswap32(*(v1)) * 1000 >> 32;\n
    v7 = v5 + (v6 < v6);\n
    v8 = v6 - cgc_current_time;\n
    v9 = v7 - v3[46] - (v6 < v3[45]);\n
    v10 = 1;\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ecx<4>, Xor(Load(addr=(ebx<4> + 0xb8<32>), size=4, endness=Iend_LE), Conv(1->32, (edx<4> < Load(addr=(ebx<4> + 0xb4<32>), size=4, endness=Iend_LE)))), Conv(1->32, (edx<4> < Load(addr=0x4063d8<32>, size=4, endness=Iend_LE))))))\n
    {\n
        v0 = 0;\n
        tmp_6 = v0;\n
        v0 = v0 - v9 - (240000 < v6 - cgc_current_time);\n
        if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ecx<4>, Xor(Load(addr=(ebx<4> + 0xb8<32>), size=4, endness=Iend_LE), Conv(1->32, (edx<4> < Load(addr=(ebx<4> + 0xb4<32>), size=4, endness=Iend_LE)))), Conv(1->32, (edx<4> < Load(addr=0x4063d8<32>, size=4, endness=Iend_LE))))))\n
        {\n
            cgc_current_time = v6;\n
            g_4063dc = v7;\n
        }\n
    }\n
}\n
", "4207273:sub_4032a9": null, "4207280:cgc_init_vault": "extern struct_0 *the_vault;\n
\n
int cgc_init_vault()\n
{\n
    the_vault = cgc_malloc(4016);\n
    the_vault->field_0 = 3498402176;\n
    the_vault->field_4 = 844;\n
    the_vault->field_8 = 3600000;\n
    the_vault->field_fac = 0;\n
    return the_vault;\n
}\n
", "4207349:sub_4032f5": null, "4207360:cgc_handle_msg_vault": "typedef struct struct_0 {\n
    char field_0;\n
    unsigned int field_1;\n
} struct_0;\n
\n
extern unsigned int cgc_current_time;\n
extern struct_1 *the_vault;\n
\n
int cgc_handle_msg_vault(struct_0 *v7, unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x38]\n
    int tmp_2;  // tmp #2\n
    unsigned short v1;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned short v2;  // [bp-0x22], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x20]\n
    unsigned int v4[2];  // [bp-0x1c]\n
    unsigned int v5[1004];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    struct_0 *v9;  // ebp\n
    char v10;  // al\n
    unsigned int v11;  // esi\n
    unsigned int v12[2];  // ecx\n
    unsigned int v13;  // edi\n
    unsigned int *v14;  // eax\n
    unsigned int v15[2];  // eax\n
    unsigned int *v16;  // esi\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edx\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int v22;  // ax, Other Possible Types: unsigned short\n
    unsigned int v23[2];  // esi, Other Possible Types: unsigned int\n
    unsigned int v24[1004];  // ecx\n
    unsigned int v25[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v26;  // edx\n
    unsigned int v27[1004];  // eax\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // edx\n
    unsigned int v31[1004];  // ecx\n
    unsigned int v32;  // esi\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // esi\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // edi\n
    char *v39;  // eax\n
    unsigned int v40;  // edx\n
    unsigned int v41[2];  // eax\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
    void* v46;  // edi, Other Possible Types: unsigned int\n
\n
    v8 = a0;\n
    if (!v8)\n
        return 0;\n
    v9 = v7;\n
    v10 = v7->field_0;\n
    v11 = v8 - 1;\n
    v12 = &(&v7->field_0)[1];\n
    if (v7->field_0 == 2)\n
    {\n
        v13 = the_vault->field_fac;\n
        v18 = 0;\n
        if (v13 <= 499)\n
        {\n
            v4[0] = v12;\n
            v5[0] = the_vault;\n
            the_vault->field_fac = v13 + 1;\n
            v15 = cgc_malloc(v11);\n
            if (v15)\n
            {\n
                v18 = &v5[2 * v13 + 3];\n
                v0[0] = v4;\n
                v4[0] = v15;\n
                cgc_memcpy(v15, v0, v11);\n
                v27 = v5;\n
                v27[3 + 2 * v13] = v4;\n
                v27[4 + 2 * v13] = v11;\n
            }\n
        }\n
        v6 = __buildin_bswap32(v18);\n
        v1 = 0x5000200;\n
        v3 = 2;\n
        goto LABEL_403636;\n
    }\n
    else\n
    {\n
        if (v10 == 1)\n
        {\n
            v14 = cgc_malloc(the_vault->field_fac * 8);\n
            if (!v14)\n
            {\n
                v1 = 0x1000200;\n
                v3 = 1;\n
                cgc_write_bytes(&v1, 5);\n
                goto LABEL_403659;\n
            }\n
            else\n
            {\n
                v16 = v14;\n
                if (!the_vault->field_fac)\n
                {\n
                    v1 = 0x200;\n
                    v21 = 0;\n
                    v22 = 1;\n
                }\n
                else\n
                {\n
                    v19 = &the_vault->padding_c;\n
                    v20 = 0;\n
                    do\n
                    {\n
                        v14[2 * v20] = __buildin_bswap32(v19);\n
                        v14[1 + 2 * v20] = __buildin_bswap32(*(&the_vault->padding_c[4 + 8 * v20]));\n
                        v20 += 1;\n
                        v28 = the_vault->field_fac;\n
                        v19 += 8;\n
                    } while (v20 < v28);\n
                    v22 = v28 * 8 + 1;\n
                    v21 = v28 * 8;\n
                    v1 = 0x200;\n
                    if (v22 > 32767)\n
                    {\n
                        v2 = __buildin_bswap32(v21 | 2147483649);\n
                        v36 = 7;\n
                        v37 = 6;\n
                        goto LABEL_4035a1;\n
                    }\n
                }\n
                v2 = __ROL__(v22, 8);\n
                v36 = 5;\n
                v37 = 4;\n
LABEL_4035a1:\n
                *(&v1 + v37) = 1;\n
                cgc_write_bytes(&v1, v36);\n
                cgc_write_bytes(v16, v21);\n
                cgc_free(v16);\n
                goto LABEL_40365e;\n
            }\n
        }\n
        if (v11 >= 4 && v10 == 3)\n
        {\n
            v17 = *(&(&v9->field_0)[1]);\n
            if (v17)\n
            {\n
                v23 = __buildin_bswap32(v17);\n
                v24 = the_vault;\n
                v25 = 0;\n
                if (&v24[2 * v24[1003] + 3] <= v23)\n
                    goto LABEL_403623;\n
                v29 = &the_vault->padding_c;\n
                if (!(v29 <= v23))\n
                    goto LABEL_403623;\n
                if (!(!((v23 - v29) & 7)))\n
                    goto LABEL_403623;\n
            }\n
            else\n
            {\n
                v26 = the_vault->field_fac;\n
                v25 = 0;\n
                if (!(v26 <= 499))\n
                    goto LABEL_403623;\n
                the_vault->field_fac = v26 + 1;\n
                v23 = &(&the_vault->field_0)[2 * v26 + 3];\n
            }\n
            v38 = v8 - 5;\n
            v39 = cgc_malloc(v38);\n
            if (!v39)\n
            {\n
                v25 = 0;\n
            }\n
            else\n
            {\n
                cgc_memcpy(v39, &v9->field_1 + 1, v38);\n
                *(v23) = v39;\n
                *((v23 + 4)) = v38;\n
                v25 = v23;\n
            }\n
LABEL_403623:\n
            v6 = __buildin_bswap32(v25);\n
            v1 = 0x5000200;\n
            v3 = 3;\n
LABEL_403636:\n
            cgc_write_bytes(&v1, 5);\n
LABEL_403659:\n
            cgc_write_bytes(v7, a0);\n
LABEL_40365e:\n
            return 1;\n
        }\n
        if (v11 < 4)\n
        {\n
            return 1;\n
        }\n
        else if (v10 != 4)\n
        {\n
            return 1;\n
        }\n
        else\n
        {\n
            v4[0] = __buildin_bswap32(v12[0]);\n
            v6[0] = v4;\n
            v30 = cgc_current_time;\n
            v31 = the_vault;\n
            v32 = the_vault->field_0;\n
            v33 = the_vault->field_4;\n
            v5 = cgc_current_time;\n
            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, Load(addr=0x4063dc<32>, size=4, endness=Iend_LE), Xor(edi<4>, Conv(1->32, (edx<4> < esi<4>))), Conv(1->32, (edx<4> < esi<4>))))\n
            {\n
LABEL_403529:\n
                v46 = 0;\n
                write_msg();\n
            }\n
            else\n
            {\n
                tmp_2 = v32;\n
                v34 = v32 + the_vault->field_8;\n
                v35 = v33 + (tmp_2 + the_vault->field_8 < tmp_2);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, Load(addr=0x4063dc<32>, size=4, endness=Iend_LE), Xor(edi<4>, Conv(1->32, (Load(addr=stack_base-24, size=4, endness=Iend_LE) < esi<4>))), Conv(1->32, (Load(addr=stack_base-24, size=4, endness=Iend_LE) < esi<4>)))))\n
                    goto LABEL_403529;\n
                v40 = &the_vault->padding_c;\n
                if (!(v40 <= v4))\n
                    goto LABEL_403529;\n
                if (&v31[2 * v31[1003] + 3] <= v4)\n
                    goto LABEL_403529;\n
                if (!(!((v4 - v40) & 7)))\n
                    goto LABEL_403529;\n
                v41 = v4;\n
                v46 = v41[0];\n
                v42 = v41[1];\n
                v41[0] = 0;\n
                v41[1] = 0;\n
                if (!v46)\n
                    goto LABEL_403529;\n
                v43 = v42 + 1;\n
                v1 = 0x200;\n
                if (v43 <= 32767)\n
                {\n
                    v2 = __ROL__(v43, 8);\n
                    v44 = 5;\n
                    v45 = 4;\n
                }\n
                else\n
                {\n
                    v2 = __buildin_bswap32(v43 | 0x80000000);\n
                    v44 = 7;\n
                    v45 = 6;\n
                }\n
                *(&v1 + v45) = 4;\n
                cgc_write_bytes(&v1, v44);\n
                cgc_write_bytes(v46, v42);\n
            }\n
            cgc_free(v46);\n
            return 1;\n
        }\n
    }\n
}\n
", "4208364:sub_4036ec": null, "4208368:write_msg": "int write_msg(unsigned int v2)\n
{\n
    unsigned short v0;  // [bp-0x14]\n
    unsigned short v1;  // [bp-0x12], Other Possible Types: unsigned int\n
    unsigned int v3;  // edx\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edx\n
    char v8;  // cl\n
\n
    v5 = v2 + 1;\n
    v0 = 0x200;\n
    if (v5 <= 32767)\n
    {\n
        v1 = __ROL__(v5, 8);\n
        v6 = 5;\n
        v7 = 4;\n
    }\n
    else\n
    {\n
        v1 = __buildin_bswap32(v5 | 0x80000000);\n
        v6 = 7;\n
        v7 = 6;\n
    }\n
    *(&v0 + v7) = v8;\n
    cgc_write_bytes(&v0, v6);\n
    return cgc_write_bytes(v3, v2);\n
}\n
", "4208486:sub_403766": null, "4208496:cgc_store_in_vault": "typedef struct struct_0 {\n
    char padding_0[4012];\n
    unsigned int field_fac;\n
} struct_0;\n
\n
extern struct_0 *the_vault;\n
\n
int cgc_store_in_vault(unsigned int v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1[2];  // edi, Other Possible Types: unsigned int\n
    struct_0 *v2;  // ecx\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ebp\n
    char *v6;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        v3 = the_vault->field_fac;\n
        if (v3 > 499)\n
            return 0;\n
        the_vault->field_fac = v3 + 1;\n
        v1 = &the_vault->padding_0[8 * v3 + 12];\n
    }\n
    else\n
    {\n
        v2 = the_vault;\n
        if (&v2->padding_0[8 * v2->field_fac + 12] <= v1)\n
            return 0;\n
        v4 = &the_vault->padding_0[12];\n
        if (v4 > v1)\n
        {\n
            return 0;\n
        }\n
        else if (((v1 - v4) & 7))\n
        {\n
            return 0;\n
        }\n
    }\n
    v5 = a1;\n
    v6 = cgc_malloc(a1);\n
    if (!v6)\n
        return 0;\n
    cgc_memcpy(v6, a0, v5);\n
    *(v1) = v6;\n
    *((v1 + 4)) = v5;\n
    return v1;\n
}\n
", "4208660:sub_403814": null, "4208672:cgc_retrieve_from_vault": "extern unsigned int cgc_current_time;\n
extern struct_0 *the_vault;\n
\n
int cgc_retrieve_from_vault(unsigned int v0[2], unsigned int *a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // esi\n
    unsigned int v2[1004];  // ecx\n
    unsigned int v3;  // ebx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // edi\n
    unsigned int v7[2];  // edx\n
    unsigned int v8;  // esi\n
    void* v9;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = cgc_current_time;\n
    v2 = the_vault;\n
    v3 = the_vault->field_0;\n
    v9 = 0;\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, Load(addr=0x4063dc<32>, size=4, endness=Iend_LE), Xor(edi<4>, Conv(1->32, (esi<4> < ebx<4>))), Conv(1->32, (esi<4> < ebx<4>)))))\n
    {\n
        tmp_2 = v3;\n
        v5 = v3 + the_vault->field_8;\n
        v6 = the_vault->field_4 + (tmp_2 + the_vault->field_8 < tmp_2);\n
        if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, Load(addr=0x4063dc<32>, size=4, endness=Iend_LE), Xor(edi<4>, Conv(1->32, (esi<4> < ebx<4>))), Conv(1->32, (esi<4> < ebx<4>))))\n
        {\n
            v7 = v0;\n
            v8 = &the_vault->padding_c;\n
            if (v8 <= v7 && &v2[2 * v2[1003] + 3] > v7 && !((v7 - v8) & 7))\n
            {\n
                v9 = v7[0];\n
                *(a0) = v7[1];\n
                v7[0] = 0;\n
                v7[1] = 0;\n
            }\n
        }\n
    }\n
    return v9;\n
}\n
", "4208800:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_transmit": null, "5242888:cgc_allocate": null, "5242892:cgc_deallocate": null, "5242896:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}