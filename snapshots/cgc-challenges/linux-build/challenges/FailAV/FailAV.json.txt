{"4202496:_init": "extern struct_0 *g_40a89c;\n
\n
int _init()\n
{\n
    if (g_40a89c)\n
    {\n
        g_40a89c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202640:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202688:sub_4020c0": "int sub_4020c0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202694:sub_4020c6": null, "4202704:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202747:sub_4020fb": null, "4202748:sub_4020fc": "int sub_4020fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202752:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202756:sub_402104": null, "4202768:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 34703;\n
    v6 = v5 + 799;\n
    v7 = v5 + 799;\n
    if (v7 == v6)\n
        return v5 + 799;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202819:sub_402143": "int sub_402143()\n
{\n
}\n
", "4202825:sub_402149": "int sub_402149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202832:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 34639;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 799;\n
    v9 = (v6 + 799 - (v6 + 799) >> 31) + (799 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202903:sub_402197": "int sub_402197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202912:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a890;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a890)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020c0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202987:sub_4021eb": "int sub_4021eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202992:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203001:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203005:sub_4021fd": null, "4203008:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203098:sub_40225a": null, "4203100:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 1;\n
}\n
", "4203129:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 2;\n
}\n
", "4203158:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 16;\n
}\n
", "4203187:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 14;\n
}\n
", "4203216:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 12;\n
}\n
", "4203245:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 4;\n
}\n
", "4203274:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 8;\n
}\n
", "4203303:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 64;\n
}\n
", "4203332:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 32;\n
}\n
", "4203361:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14492 + v0] & 4294967168;\n
}\n
", "4203390:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14492 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[14492 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[14492 + v1] & 2) >> 1);\n
}\n
", "4203449:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14492 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203483:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[14492 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14492 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203545:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14492 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203579:sub_40243b": null, "4203580:__cxa_pure_virtual": "int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
\n
    v1 = v3;\n
    v0 = 1;\n
    cgc__terminate();\n
}\n
", "4203608:cgc_exit": "int cgc_exit(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
\n
    v1 = v3;\n
    v0 = v2;\n
    cgc__terminate();\n
}\n
", "4203636:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // edi\n
    char *v7;  // edx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    void* v10;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    v5 = v3->field_8;\n
    if (v5 == -1)\n
        return 0;\n
    if (v4->field_4 != 1)\n
    {\n
        v6 = v4->field_c;\n
        v7 = v4->field_10;\n
        v8 = v6 - v5;\n
        if (v7 && v8)\n
        {\n
            do\n
            {\n
                *(24 + &v4->field_0 + v5) = v7[*(24 + &v4->field_0 + v5)];\n
                v5 += 1;\n
            } while (v6 != v5);\n
            v5 = v4->field_8;\n
            v8 = v4->field_c - v5;\n
        }\n
        v1 = v4->field_0;\n
        v9 = 24 + v5 + v4;\n
        v10 = 0;\n
        while (v8 > v10)\n
        {\n
            v0 = &v2;\n
            v11 = cgc_transmit(v1, v9 + v10, v8 - v10);\n
            v10 += *(&v2);\n
            if (v11)\n
            {\n
                v12 = -1;\n
                v4 = v3;\n
                goto LABEL_40250a;\n
            }\n
        }\n
        v4 = v3;\n
    }\n
    v12 = 0;\n
LABEL_40250a:\n
    *((v4 + 12)) = 0;\n
    *((v4 + 8)) = 0;\n
    return v12;\n
}\n
", "4203802:cgc_fbuffered": "int cgc_fbuffered(unsigned int v0[4], unsigned int a0)\n
{\n
    unsigned int v1[4];  // esi\n
\n
    v1 = v0;\n
    if (v1[2] != -1)\n
        cgc_fflush(v1);\n
    v1[2] = -(a0 < 1);\n
    v1[3] = 0;\n
    return -(a0 < 1);\n
}\n
", "4203864:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4203942:sub_4025a6": null, "4203944:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v3, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edi\n
    char *v9;  // ebp\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    char *v12;  // ecx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a1;\n
    v5 = v4->field_8;\n
    if (v5 == v4->field_c)\n
    {\n
        cgc__refill(v3);\n
        v5 = v4->field_8;\n
    }\n
    v7 = a0;\n
    v14 = v3;\n
    if (v5 == -1)\n
    {\n
        v8 = 0;\n
    }\n
    else\n
    {\n
        v8 = v4->field_c - v5;\n
        if (v8 > v7)\n
            v8 = v7;\n
        v2 = v8;\n
        cgc_memcpy();\n
        v6 = v4->field_8 + v8;\n
        v4->field_8 = v6;\n
        if (v6 == v4->field_c)\n
        {\n
            v4->field_c = 0;\n
            v4->field_8 = 0;\n
        }\n
        v7 = a0;\n
    }\n
    if (v8 >= v7)\n
        return v8;\n
    while (true)\n
    {\n
        v9 = v14 + v8;\n
        v0 = &v2;\n
        if (cgc_receive(*(v4), v9, v7 - v8))\n
            break;\n
        v10 = v8;\n
        v11 = v2;\n
        if (!v11)\n
            break;\n
        v12 = *((v4 + 20));\n
        if (v12)\n
        {\n
            v13 = 0;\n
            do\n
            {\n
                v9[v13] = v12[v9[v13]];\n
                v13 += 1;\n
            } while (v11 != v13);\n
        }\n
        v8 = v10 + v11;\n
        v7 = a0;\n
        v4 = a1;\n
        v14 = v3;\n
        if (v8 >= v7)\n
            return v8;\n
    }\n
    return -1;\n
}\n
", "4204178:cgc__refill": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc__refill()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    struct_0 *v3;  // ecx\n
    struct_0 *v4;  // esi\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    char *v9;  // eax\n
    void* v10;  // edx, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    v5 = v3->field_c;\n
    if (v3->field_8 == v5)\n
    {\n
        v5 = 0;\n
        v3->field_c = 0;\n
        v3->field_8 = 0;\n
    }\n
    v6 = 24 + v3 + v5;\n
    v0 = &v1;\n
    v7 = cgc_receive(v4->field_0, v6, 0x400 - v5);\n
    if (v7)\n
        return -1;\n
    v8 = *(&v1);\n
    if (!v8)\n
        return -1;\n
    v4->field_c = v8;\n
    v9 = v4->field_14;\n
    if (!v9)\n
        return v8;\n
    v10 = 0;\n
    do\n
    {\n
        *(24 + &v4->field_0 + v10) = v9[*(24 + &v4->field_0 + v10)];\n
        v10 += 1;\n
    } while (v8 != v10);\n
}\n
", "4204299:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // ebp\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
\n
    v1 = a1;\n
    v2 = 0;\n
    v5 = a0 - 1;\n
    if (v5)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc();\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == v1)\n
                break;\n
            *((v0 + v2)) = v3;\n
            v2 += 1;\n
            goto LABEL_402752;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v2;\n
    if (!(v2 == tmp_1))\n
        goto LABEL_402766;\n
LABEL_402752:\n
    while (true)\n
    {\n
        v4 = cgc__getc();\n
        if (v4 == -1)\n
            break;\n
        if (v4 == v1)\n
            goto LABEL_402766;\n
    }\n
LABEL_402766:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4204413:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    struct struct_0 **v1;  // [bp-0xd]\n
    char v2;  // [bp-0xc]\n
    struct_1 *v4;  // ecx\n
    unsigned int v5;  // eax\n
    struct struct_0 **v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // ecx\n
\n
    v5 = v4->field_8;\n
    if (v5 == -1)\n
    {\n
        v0 = &v2;\n
        v6 = -1;\n
        if (cgc_receive(v4->field_0, &v1, 1))\n
        {\n
            return -1;\n
        }\n
        else if (!*(&v2))\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v7 = v4->field_14;\n
            *(&v6) = v1;\n
            if (!v7)\n
                return v6;\n
            *(&v6) = *(v7 + v6);\n
        }\n
    }\n
    else\n
    {\n
        if (v5 == v4->field_c)\n
        {\n
            if (cgc__refill() >= 0)\n
                v5 = v4->field_8;\n
            else\n
                return -1;\n
        }\n
        v4->field_8 = v5 + 1;\n
        v6 = *(24 + &v4->field_0 + v5);\n
        return v6;\n
    }\n
}\n
", "4204541:sub_4027fd": null, "4204544:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4204584:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fwrite(unsigned int v5, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x420]\n
    unsigned int v1;  // [bp-0x41c]\n
    unsigned int v2;  // [bp-0x418]\n
    char v3;  // [bp-0x414]\n
    char v4;  // [bp-0x410]\n
    struct_0 *v6;  // edi\n
    unsigned int v7;  // ebp\n
    unsigned int v8;  // eax\n
    char *v9;  // edi\n
    unsigned int v10;  // eax\n
    void* v11;  // esi, Other Possible Types: unsigned int\n
    void* v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // eax\n
    void* v15;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v16;  // eax\n
    void* v17;  // ecx, Other Possible Types: unsigned int\n
\n
    v6 = a1;\n
    v7 = a0;\n
    if (v6->field_8 != -1)\n
    {\n
        if (v7 >= 0x400)\n
        {\n
            cgc_fflush(v6);\n
        }\n
        else\n
        {\n
            v8 = v6->field_c;\n
            v12 = 0;\n
            if (v8 + v7 >= 0x400)\n
            {\n
                v12 = 0x400 - v8;\n
                cgc_memcpy(&v6[1].padding_4[v8], v5);\n
                v6->field_c = v6->field_c + v12;\n
                cgc_fflush(v6);\n
            }\n
            if (v12 >= v7)\n
                return v12;\n
            cgc_memcpy(&v6[1].padding_4[v6->field_c], v5 + v12);\n
            v6->field_c = v6->field_c + a0 - v12;\n
            return a0;\n
        }\n
    }\n
    v1 = v6->field_0;\n
    v9 = v6->field_10;\n
    if (!v9)\n
    {\n
        v11 = 0;\n
        do\n
        {\n
            if (v11 >= v7)\n
                return a0;\n
            v0 = &v4;\n
            v10 = cgc_transmit(v1, v5 + v11, v7 - v11);\n
            v11 += *(&v4);\n
        } while (!v10);\n
    }\n
    else\n
    {\n
        if (!v7)\n
            return a0;\n
        v17 = 0;\n
LABEL_40288d:\n
        v13 = v7 - v17;\n
        if (v13 >= 0x400)\n
            v13 = 0x400;\n
        v2 = v17;\n
        cgc_memcpy();\n
        if (v13)\n
        {\n
            v14 = 0;\n
            do\n
            {\n
                (&v4)[v14] = v9[(&v4)[v14]];\n
                v14 += 1;\n
            } while (v13 != v14);\n
        }\n
        v15 = 0;\n
        do\n
        {\n
            if (v13 <= v15)\n
            {\n
                v17 = v2 + v13;\n
                v7 = a0;\n
                if (v17 >= a0)\n
                    return a0;\n
                goto LABEL_40288d;\n
            }\n
            v0 = &v3;\n
            v16 = cgc_transmit(v1, &(&v4)[v15], v13 - v15);\n
            v15 += *(&v3);\n
        } while (!v16);\n
    }\n
    return -1;\n
}\n
", "4205010:sub_4029d2": null, "4205012:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_45;  // tmp #45\n
    int tmp_71;  // tmp #71\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    unsigned int v4;  // eax\n
    char v5[256];  // esi\n
    char *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v4 = v3[4];\n
    if (!a0)\n
    {\n
        cgc_free(v4);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return 0;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v4);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v4) = *(v2);\n
    if (!*(v2))\n
    {\n
        v8 = 826981510;\n
    }\n
    else\n
    {\n
        v7 = v2 + 1;\n
        v8 = 826981510;\n
        do\n
        {\n
            v8 = __ROL__(v8 + v8 * 36 ^ v4, 13);\n
            tmp_45 = *(v7);\n
            *(&v4) = *(v7);\n
            v7 += 1;\n
        } while (tmp_45);\n
    }\n
    v9 = 0;\n
    do\n
    {\n
        v5[v9] = v9;\n
        v9 += 1;\n
    } while (v9 != 0x100);\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v8;\n
        v12 = v8 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v8 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        tmp_71 = v5[v10];\n
        v5[v10] = v5[v13];\n
        v5[v13] = tmp_71;\n
        v10 -= 1;\n
    }\n
}\n
", "4205230:sub_402aae": null, "4205232:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4205272:cgc_malloc_alloc": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    char padding_4[516];\n
    struct struct_0 *field_208;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_1 *field_c;\n
} struct_1;\n
\n
int cgc_malloc_alloc(struct_2 *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    void* v4;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    struct_0 *v8;  // edx\n
    struct_0 *v9;  // ebp\n
    struct_2 *v10;  // edi\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    void* v13;  // edi\n
    unsigned int v14[2];  // ecx\n
\n
    v3 = a0;\n
    v4 = 0;\n
    if (v3 < 0)\n
    {\n
LABEL_402cca:\n
        return v4;\n
    }\n
    v6 = v3 + 3 & -0x4;\n
    if (!v6)\n
    {\n
LABEL_402b13:\n
        return cgc_tiny_alloc();\n
    }\n
    else if (v6 <= 15)\n
    {\n
        goto LABEL_402b13;\n
    }\n
    else if (v6 <= 131071)\n
    {\n
        v8 = v6 + 23;\n
        v9 = v8 & -0x10;\n
        if (!(v8 & -0x10))\n
        {\n
            v12 = -1;\n
        }\n
        else if (v9 < 513)\n
        {\n
            v12 = (v8 >> 4) + 2;\n
            v13 = 0;\n
            if (v6 <= 2040)\n
                goto LABEL_0x402c7f;\n
            else\n
                goto LABEL_0x402b57;\n
        }\n
        else if (v9 <= 0x1200)\n
        {\n
            v12 = (v9 + 64 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v12 = 130;\n
            if (v9 <= 0x20000)\n
                v12 = (v9 + 576 >> 11) + 66;\n
        }\n
    }\n
    else\n
    {\n
        v10 = v2;\n
        v11 = v6 + 4103 & -0x1000;\n
        v0 = &v1;\n
        v4 = 0;\n
        if (!cgc_allocate(v11, 0))\n
        {\n
            v14 = *(&v1);\n
            v14[0] = v10;\n
            v14[1] = v11;\n
            v4 = v14 + 1;\n
            goto LABEL_402cca;\n
        }\n
    }\n
}\n
", "4205780:cgc_tiny_alloc": "int cgc_tiny_alloc()\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // edi\n
    struct struct_0 *v3[1160];  // ecx\n
    struct struct_0 *v4[1160];  // esi\n
    unsigned int v5;  // ebp\n
    unsigned short *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned short v7[2];  // edx, Other Possible Types: unsigned int\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edi\n
\n
    v2 = v1;\n
    v4 = v3;\n
    if (v1 <= 15)\n
    {\n
        v5 = v1 / 4 - 1;\n
    }\n
    else if (v1 <= 0x200)\n
    {\n
        v5 = (v1 >> 4) + 2;\n
    }\n
    else if (v1 <= 0x1200)\n
    {\n
        v5 = (v1 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v5 = 130;\n
        if (v1 <= 0x20000)\n
            v5 = (v1 - 0x1200 >> 11) + 66;\n
    }\n
    v6 = v3[v5];\n
    if (v6)\n
    {\n
        v3[v5] = *(&v6);\n
        return v3[v5];\n
    }\n
    v7 = v3[1155 + v5];\n
    if (v7)\n
    {\n
        v8 = v7[0];\n
        v9 = v7[1];\n
    }\n
    else\n
    {\n
        v10 = v3[1158];\n
        if (v10)\n
        {\n
            v6 = v4[1159];\n
        }\n
        else\n
        {\n
            v10 = cgc_run_alloc();\n
            v4[1158] = v10;\n
            v6 = 0;\n
            if (!v10)\n
                return 0;\n
        }\n
        v7 = v6 + v10;\n
        v4[1155 + v5] = v7;\n
        *((v6 + v10)) = v2;\n
        *((v6 + v10 + 2)) = v2;\n
        v11 = v6 + 0x1000;\n
        v4[1159] = v11;\n
        if (v11 == 0x100000)\n
            v4[1158] = 0;\n
        v8 = v2;\n
        v9 = v2;\n
    }\n
    v12 = v2 + v9;\n
    *((v7 + 2)) = v12;\n
    if (v8 + v12 < 4097)\n
        return v9 + v7;\n
    v4[1155 + v5] = 0;\n
}\n
", "4206057:malloc_free": "int malloc_free(unsigned int v8, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v6;  // [bp-0x4]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    char v11;  // cl\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // edx\n
    char v21;  // cl\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // eax\n
\n
    v9 = a0;\n
    if (!v9)\n
        return v9;\n
    v10 = v8;\n
    v11 = *((v10 + (v9 >> 20) + 524));\n
    if (v11 == 2)\n
    {\n
        if (!(v9 & 7))\n
        {\n
            v22 = v9 - 8;\n
            v13 = *((v22 + 4));\n
            if ((v13 & 1))\n
            {\n
                v15 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            }\n
            else\n
            {\n
                if (v13 - 131073 <= -131058)\n
                {\n
                    v15 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
                }\n
                else\n
                {\n
                    v14 = v22 - *(v22);\n
                    if (!*(v22))\n
                        v14 = *(v22);\n
                    v18 = v13 + v22;\n
                    if (!v14)\n
                    {\n
                        if (*((v22 + v13)) == v13)\n
                            goto LABEL_402fcc;\n
                    }\n
                    else\n
                    {\n
                        v3 = v22;\n
                        v2 = v18;\n
                        v19 = *((v14 + 4));\n
                        if (!((v19 & -2) == v14))\n
                            goto LABEL_4030e8;\n
                        v18 = v2;\n
                        tmp_2 = v13;\n
                        v21 = v19;\n
                        v22 = v3;\n
                        if (*(v18) == tmp_2)\n
                        {\n
                            if ((v21 & 1))\n
                            {\n
                                if (v14 > 15 && v14 > 0x200 && v14 > 0x1200 && !(v14 <= 0x20000))\n
                                    goto LABEL_402fa9;\n
LABEL_402fa9:\n
                                cgc_small_unlink_free();\n
                                v23 = *((v14 + 4)) + *((v22 + 4));\n
                                *((v14 + 4)) = v23;\n
                                v18 = v2;\n
                                *(v18) = v23;\n
                                v22 = v14;\n
                            }\n
LABEL_402fcc:\n
                            v24 = v18;\n
                            v25 = *((v18 + 4));\n
                            if ((v25 & 1))\n
                            {\n
                                v26 = v25 & -2;\n
                                if (v26 > 15 && v26 > 0x200 && v26 > 0x1200 && !(v26 <= 0x20000))\n
                                    goto LABEL_403026;\n
LABEL_403026:\n
                                cgc_small_unlink_free();\n
                                v27 = *((v22 + 4)) + *((v24 + 4));\n
                                *((v22 + 4)) = v27;\n
                                *((v22 + v27)) = v27;\n
                            }\n
                            v28 = *((v22 + 4));\n
                            if (v28 > 15 && v28 > 0x200 && v28 > 0x1200 && !(v28 <= 0x20000))\n
                                goto LABEL_403088;\n
LABEL_403088:\n
                            v9 = cgc_small_insert_free();\n
LABEL_403095:\n
                            return v9;\n
                        }\n
                    }\n
                    v15 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
                    v0 = v9;\n
                    goto LABEL_4030e2;\n
                }\n
            }\n
LABEL_4030e1:\n
            v6 = v9;\n
            while (true)\n
            {\n
LABEL_4030e2:\n
                v6 = v15;\n
                v9 = cgc_heap_error(*(&v7));\n
LABEL_4030e8:\n
                v15 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                v5 = v9;\n
                v4 = v14;\n
            }\n
        }\n
LABEL_4030c2:\n
        v15 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
        goto LABEL_4030e1;\n
    }\n
    else if (v11 == 1)\n
    {\n
        v12 = (*((v9 & -0x1000)) <= 15 ? (*((v9 & -0x1000)) <= 0x200 ? (*((v9 & -0x1000)) <= 0x1200 ? (*((v9 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v9 & -0x1000)) - 0x200 >> 7) + 34) : (*((v9 & -0x1000)) >> 4) + 2) : *((v9 & -0x1000)) / 4 - 1);\n
        *(v9) = *((v10 + v12 * 4));\n
        *((v10 + v12 * 4)) = v9;\n
    }\n
    else if (!v11)\n
    {\n
        if ((v9 & 4095) != 8)\n
        {\n
            v15 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4030e1;\n
        }\n
        v16 = *((v9 - 8));\n
        if (v16 != v10)\n
        {\n
            v17 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
            v1 = v10;\n
        }\n
        else\n
        {\n
            v16 = *((v9 - 4));\n
            if (v16 - 0x20000 <= 2147356671 && !(v16 & 4095))\n
            {\n
                v9 = cgc_deallocate(v9 - 8);\n
                goto LABEL_403095;\n
            }\n
            v17 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
        }\n
        v0 = v16;\n
        v9 = cgc_heap_error(v17, v9);\n
        goto LABEL_4030c2;\n
    }\n
}\n
", "4206837:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4206886:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(void* v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    void* v5;  // ecx\n
    unsigned int v6;  // ebp\n
    void* v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 >= 0)\n
    {\n
        v4 = a0;\n
        v5 = v1;\n
        if (!([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>)))\n
        {\n
            if (!v4)\n
                return cgc_malloc_alloc(v5, v2);\n
            v6 = v4 / 0x100000;\n
            if (!(*(524 + v5 + (v4 >> 20)) & 253))\n
            {\n
                v8 = *(&v4->field_0) - 8;\n
            }\n
            else\n
            {\n
                v8 = 0;\n
                if (*(524 + v5 + (v4 >> 20)) == 1)\n
                    v8 = *((v4 & -0x1000));\n
            }\n
            if (v8 >= v2)\n
            {\n
                v3 = v4;\n
                goto LABEL_4031f9;\n
            }\n
            else\n
            {\n
                v9 = cgc_malloc_alloc(v1, v2);\n
                if (!v9)\n
                    goto LABEL_4031f9;\n
                v3 = v9;\n
                v10 = v1;\n
                *(&v8) = *((v10 + v6 + 524));\n
                if (!(*((v10 + v6 + 524)) & 253))\n
                {\n
                    v11 = *(&v4->field_0) - 8;\n
                }\n
                else\n
                {\n
                    v11 = 0;\n
                    if (v8 == 1)\n
                        v11 = *((v4 & -0x1000));\n
                }\n
                v0 = v11;\n
                cgc_memcpy(v3, v4);\n
            }\n
        }\n
        malloc_free(v1, a0);\n
    }\n
LABEL_4031f9:\n
    return v3;\n
}\n
", "4207107:cgc_run_alloc": "int cgc_run_alloc()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    char v7;  // dl\n
\n
    v0 = &v1;\n
    if (cgc_allocate(0x200000, 0))\n
        return 0;\n
    v4 = *(&v1);\n
    v3 = v4 + 1048575 & -0x100000;\n
    if (v3 > v4)\n
        cgc_deallocate(v4);\n
    v5 = v3 + 0x100000;\n
    if (v4 + 0x200000 > v5)\n
        cgc_deallocate(v5);\n
    *((v6 + (v4 + 1048575 >> 20) + 524)) = v7;\n
    return v4 + 1048575 & -0x100000;\n
}\n
", "4207259:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
int cgc_small_unlink_free(struct_2 *v1)\n
{\n
    struct_2 *v0;  // [bp-0x28]\n
    struct_2 *v2;  // ebp\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // esi\n
    struct_1 *v5;  // edi\n
    unsigned int *v6;  // ecx\n
    unsigned int v7;  // edx\n
\n
    v2 = v1;\n
    v3 = v1->field_4;\n
    if (!(v3 & 1))\n
    {\n
        v0 = v2;\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\");\n
    }\n
    v2->field_4 = v3 & -2;\n
    v4 = v2->field_8;\n
    if (v4)\n
        v4->field_c = v2->field_c;\n
    v5 = v2->field_c;\n
    if (v5)\n
        v5->field_8 = v4;\n
    if (v6[v7] != v2)\n
    {\n
        v2->field_8 = 0;\n
        v2->field_c = 0;\n
        return 0;\n
    }\n
    v6[v7] = v5;\n
}\n
", "4207358:cgc_small_insert_free": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_small_insert_free(struct_1 *v2)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    struct_1 *v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int *v6;  // ecx\n
    unsigned int v7;  // edx\n
    struct_0 *v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    v5 = v4->field_4;\n
    if ((v5 & 1))\n
    {\n
        v0 = v4;\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
    }\n
    v4->field_4 = v5 | 1;\n
    v4->field_8 = 0;\n
    v4->field_c = v6[v7];\n
    v6[v7] = v4;\n
    v8 = v4->field_c;\n
    if (!v8)\n
        return v2->field_c;\n
    v8->field_8 = v4;\n
}\n
", "4207438:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4207496:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        v1 -= 1;\n
        if (!v1)\n
            return 0;\n
    }\n
}\n
", "4207534:sub_4033ae": null, "4207536:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4207584:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4207618:sub_403402": null, "4207620:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            v1 -= 1;\n
        } while (v1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4207675:sub_40343b": null, "4207676:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4207705:sub_403459": null, "4207708:cgc_printf": "extern unsigned int cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = &v3;\n
    return cgc_vfprintf(cgc_stdout, v2);\n
}\n
", "4207759:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4207804:cgc_fprintf": "int cgc_fprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = &v3;\n
    return cgc_vfprintf(v2, a0);\n
}\n
", "4207852:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4207949:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4207997:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4208040:cgc__vsfprintf": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
int cgc__vsfprintf(unsigned int v8, char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x61]\n
    int tmp_11;  // tmp #11\n
    int tmp_2;  // tmp #2\n
    int tmp_4;  // tmp #4\n
    struct_0 *v1;  // [bp-0x60], Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // [bp-0x5c]\n
    struct_0 *v3;  // [bp-0x58], Other Possible Types: char\n
    char v4;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x50]\n
    unsigned int v6;  // [bp-0xc]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // edi\n
    char *v10;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v11;  // ecx\n
    struct struct_0 **v12;  // edx\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // eax, Other Possible Types: unsigned int\n
    void* v15;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v16;  // edx, Other Possible Types: unsigned int\n
    unsigned int v17;  // ecx\n
    struct_0 *v18;  // eax\n
    struct_0 *v19;  // ecx\n
    unsigned int v20;  // edx\n
    struct struct_0 **v21;  // eax\n
    unsigned int v22;  // ebp\n
    struct_0 *v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    void* v26;  // eax\n
    struct_0 *v27;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // cc_op\n
    char *v29;  // cc_dep1\n
    struct_0 *v30;  // cc_dep2\n
    struct_0 *v31;  // edi, Other Possible Types: unsigned int\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // cc_op\n
    unsigned int v34;  // cc_dep1\n
    char *v35;  // cc_dep2\n
    struct_0 *v36;  // ebp, Other Possible Types: unsigned int\n
    void* v37;  // eax\n
    void* v38;  // eax\n
    struct_0 *v40;  // eax\n
    unsigned int v41;  // cc_op\n
    char *v42;  // cc_dep1\n
    struct_0 *v43;  // cc_dep2\n
    unsigned int v44;  // cc_op\n
    char *v45;  // cc_dep1\n
    unsigned int v46;  // cc_dep2\n
    void* v47;  // edx, Other Possible Types: unsigned int\n
    unsigned int v48;  // cc_op\n
    char *v49;  // cc_dep1\n
    void* v50;  // cc_dep2\n
    char *v51;  // esi, Other Possible Types: unsigned int\n
    unsigned int v52;  // edi\n
    unsigned int v53;  // ecx\n
    unsigned int v54;  // cc_op\n
    unsigned int v55;  // cc_dep1\n
    char *v56;  // cc_dep2\n
    unsigned int v57;  // edi\n
    struct_0 *v58;  // eax, Other Possible Types: unsigned int, char\n
    struct_0 *v59;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v60;  // ecx, Other Possible Types: unsigned int\n
    char *v61;  // ecx\n
    struct_0 *v62;  // ebp, Other Possible Types: unsigned int\n
    void* v63;  // eax\n
    struct_0 *v64;  // eax\n
    char *v65;  // ecx\n
\n
    v6 = v9;\n
    v10 = a0;\n
    v59 = v11 + 1;\n
    v1 = v59;\n
    v58 = *(v11);\n
    if (!*(v11))\n
    {\n
        v51 = 0;\n
    }\n
    else\n
    {\n
        v2 = v12;\n
        v47 = v8;\n
        v51 = 0;\n
        while (true)\n
        {\n
            if (v58 != 37)\n
            {\n
                if (v51 < 2147483647)\n
                {\n
                    *(&v0) = v58;\n
                    if (v47)\n
                    {\n
                        cgc_fwrite(&v0, 1, v47);\n
                        v10 = a0;\n
                        v47 = v8;\n
                    }\n
                    if (v10)\n
                        *((v10 + v51)) = v0;\n
                    v59 = v1;\n
                }\n
                else if (v51 == -1)\n
                {\n
                    goto LABEL_403af5;\n
                }\n
                v51 += 1;\n
                v1 = v59 + 1;\n
                v58 = *(v59);\n
                v59 = v1;\n
                goto LABEL_403640;\n
            }\n
            v14 = v59 + 1;\n
            v1 = v14;\n
            v13 = *(v59);\n
            *(&v3) = 32;\n
            if (v13 != 32)\n
            {\n
                if (v13 == 48)\n
                {\n
                    v3 = 48;\n
                }\n
                else\n
                {\n
                    if (!v13)\n
                        goto LABEL_403a4f;\n
                    v1 = v59;\n
                    v14 = v59;\n
                }\n
            }\n
            v15 = 0;\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>)))\n
            {\n
                v15 = cgc_strtoul(v14, &v1);\n
                v14 = v1;\n
            }\n
            v16 = v14 + 1;\n
            v1 = v16;\n
            v17 = *(v14);\n
            v4 = 1;\n
            if (v17 == 104)\n
            {\n
                if (*((v14 + 1)) == 104)\n
                    v16 = v14 + 2;\n
            }\n
            else\n
            {\n
                if (v17 == 108)\n
                {\n
                    tmp_11 = *((v14 + 1));\n
                    v18 = v14 + 2;\n
                    v4 = tmp_11 != 108;\n
                    if (tmp_11 == 108)\n
                        v16 = v18;\n
                }\n
                else\n
                {\n
                    if (!v17)\n
                        goto LABEL_403a48;\n
                    goto LABEL_4036e0;\n
                }\n
            }\n
            v14 = v16;\n
LABEL_4036e0:\n
            v19 = v14 + 1;\n
            v1 = v19;\n
            *(&v14) = *(v14);\n
            v20 = *(&v14);\n
            if (v20 > 114)\n
            {\n
                if (v20 == 115)\n
                {\n
                    v21 = v2;\n
                    v22 = *(v21);\n
                    v2 = v21 + 1;\n
                    v23 = cgc_strlen();\n
                    if (v51 >= 2147483647)\n
                    {\n
                        v28 = 3;\n
                        v29 = v51;\n
                        v30 = v23;\n
                        v51 += v23;\n
                        goto LABEL_4039bc;\n
                    }\n
                    else\n
                    {\n
                        v31 = 2147483647 - v51;\n
                        v3 = v23;\n
                        if (v31 > v23)\n
                            v31 = v23;\n
                        v37 = v8;\n
                        if (v37)\n
                            cgc_fwrite(v22, v31, v37);\n
                        v10 = a0;\n
                        if (a0)\n
                        {\n
                            cgc_memcpy(&v10[v51], v22, v31);\n
                            v10 = a0;\n
                        }\n
                        v41 = 3;\n
                        v42 = v51;\n
                        v43 = v3;\n
                        v51 += v3;\n
                        goto LABEL_403a25;\n
                    }\n
                }\n
                if (v20 != 117 && !(v20 == 120))\n
                    goto LABEL_4039ac;\n
LABEL_40372a:\n
                if (v14 != 100)\n
                {\n
                    if (v4)\n
                    {\n
LABEL_4037f6:\n
                        cgc__convert_unsigned(*(&v7));\n
                        v4 = cgc_strlen();\n
                        if (v15 <= v4)\n
                        {\n
                            v10 = a0;\n
                            v47 = v8;\n
                        }\n
                        else\n
                        {\n
                            v52 = v4 - v15;\n
                            v10 = a0;\n
                            v47 = v8;\n
                            do\n
                            {\n
                                if (v51 < 2147483647)\n
                                {\n
                                    *(&v0) = v3;\n
                                    if (v47)\n
                                    {\n
                                        cgc_fwrite(&v0, 1, v47);\n
                                        v10 = a0;\n
                                        v47 = v8;\n
                                    }\n
                                    v48 = 15;\n
                                    v49 = v10;\n
                                    v50 = 0;\n
                                    if (v10)\n
                                        *((v10 + v51)) = v0;\n
                                }\n
                                else\n
                                {\n
                                    v44 = 6;\n
                                    v45 = v51;\n
                                    v46 = -1;\n
                                    if (!(v51 == -1))\n
                                        continue;\n
                                }\n
                                v51 += 1;\n
                                v52 += 1;\n
                            } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
                        }\n
                        v2 += 1;\n
                        if (v51 < 2147483647)\n
                        {\n
                            v57 = 2147483647 - v51;\n
                            if (v57 > v57)\n
                                v57 = v4;\n
                            if (v47)\n
                            {\n
                                cgc_fwrite(&v5, v57, v47);\n
                                v10 = a0;\n
                                v47 = v8;\n
                            }\n
                            if (v10)\n
                            {\n
                                cgc_memcpy(v51 + v10, &v5, v57);\n
                                v10 = a0;\n
                                v47 = v8;\n
                            }\n
                        }\n
                        tmp_2 = v51;\n
                        v51 += v4;\n
                        if ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t2, Load(addr=stack_base-84, size=4, endness=Iend_LE), 0x0<32>))\n
                            goto LABEL_403af5;\n
                        goto LABEL_403a32;\n
                    }\n
                }\n
                else\n
                {\n
                    if (v4)\n
                    {\n
                        if (*(v2) < 0)\n
                            v5 = 45;\n
                        goto LABEL_4037f6;\n
                    }\n
                }\n
LABEL_403a48:\n
                v10 = a0;\n
                goto LABEL_403a4f;\n
            }\n
            else\n
            {\n
                if (v20 > 98)\n
                {\n
                    if (v20 == 99)\n
                    {\n
                        v24 = v2;\n
                        if (v51 < 2147483647)\n
                        {\n
                            *(&v0) = *(v24);\n
                            v26 = v8;\n
                            if (v26)\n
                                cgc_fwrite(&v0, 1, v26);\n
                            v10 = a0;\n
                            if (a0)\n
                                *((v10 + v51)) = v0;\n
                        }\n
                        else\n
                        {\n
                            v10 = a0;\n
                            if (v51 == -1)\n
                                goto LABEL_403af5;\n
                        }\n
                        v51 += 1;\n
                        v2 = v24 + 1;\n
                        v47 = v8;\n
                        goto LABEL_403a32;\n
                    }\n
                    if (!(v20 == 100))\n
                        goto LABEL_4039ac;\n
                    goto LABEL_40372a;\n
                }\n
                if (v20 == 88)\n
                    goto LABEL_40372a;\n
                if (!v20)\n
                {\n
                    v60 = v19 - v59;\n
                    if (v51 >= 2147483647)\n
                    {\n
                        v61 = v60 + v51;\n
                        tmp_4 = v51;\n
                        v51 = v61;\n
                        v10 = a0;\n
                        if (v61 < tmp_4)\n
                            goto LABEL_403af5;\n
                    }\n
                    else\n
                    {\n
                        v62 = 2147483647 - v51;\n
                        if (2147483647 - v51 > v60)\n
                            v62 = v60;\n
                        v63 = v8;\n
                        if (v63)\n
                        {\n
                            v3 = v60;\n
                            cgc_fwrite(v59, v62, v63);\n
                            v60 = v3;\n
                        }\n
                        v64 = v62;\n
                        v10 = a0;\n
                        if (a0)\n
                        {\n
                            cgc_memcpy(&v10[v51], v59, v64);\n
                            v10 = a0;\n
                        }\n
                        v65 = v60 + v51;\n
                        tmp_4 = v51;\n
                        v51 = v65;\n
                        if (v65 < tmp_4)\n
                            goto LABEL_403af5;\n
                    }\n
LABEL_403a4f:\n
                    if (v51 < 2147483647)\n
                        break;\n
                    if (v51 == -1)\n
                    {\n
LABEL_403af5:\n
                        cgc__terminate();\n
                    }\n
                    return v51;\n
                }\n
LABEL_4039ac:\n
                v27 = v19 - v59;\n
                if (v51 < 2147483647)\n
                {\n
                    v36 = 2147483647 - v51;\n
                    if (2147483647 - v51 > v27)\n
                        v36 = v27;\n
                    v38 = v8;\n
                    if (v38)\n
                    {\n
                        v3 = v27;\n
                        cgc_fwrite(v59, v36, v38);\n
                        v27 = v3;\n
                    }\n
                    v40 = v36;\n
                    v10 = a0;\n
                    if (a0)\n
                    {\n
                        cgc_memcpy(&v10[v51], v59, v40);\n
                        v10 = a0;\n
                    }\n
                    v53 = v27 + v51;\n
                    v54 = 6;\n
                    v55 = v53;\n
                    v56 = v51;\n
                    v51 = v53;\n
LABEL_403a25:\n
                    v47 = v8;\n
                    if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                        goto LABEL_403af5;\n
LABEL_403a32:\n
                    v58 = v1;\n
                    v59 = v58 + 1;\n
                    v1 = v59;\n
                    *(&v58) = *(v58);\n
LABEL_403640:\n
                    if (!v58)\n
                        goto LABEL_403a4f;\n
                }\n
                else\n
                {\n
                    v32 = v27 + v51;\n
                    v33 = 6;\n
                    v34 = v32;\n
                    v35 = v51;\n
                    v51 = v32;\n
LABEL_4039bc:\n
                    v10 = a0;\n
                    goto LABEL_403a25;\n
                }\n
            }\n
        }\n
    }\n
    if (v10)\n
        *((v10 + v51)) = 0;\n
    return v51;\n
}\n
", "4209409:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_unsigned(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_11;  // tmp #11\n
    char v1[20];  // [bp-0x14]\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // esi\n
    char *v5;  // ebx, Other Possible Types: unsigned int\n
    char v6[20];  // ecx\n
    unsigned int v7;  // ebp\n
    struct_0 *v8;  // edi, Other Possible Types: unsigned int\n
    char v9[20];  // ecx\n
\n
    v4 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = \"0123456789ABCDEF\";\n
    if (!a0)\n
        v5 = \"0123456789abcdef\";\n
    v6[19] = 0;\n
    *(&v1[0]) = v6;\n
    if (!v3)\n
    {\n
        v8 = &v6[18];\n
        v6[18] = *(v5);\n
        v9 = v1;\n
        return cgc_memmove(v9, v8, 20 + v8 - v9);\n
    }\n
    v7 = v2;\n
    v8 = &v6[19];\n
    do\n
    {\n
        *((v8 - 1)) = *((v5 + ((0 CONCAT v4) /m v7 >> 32)));\n
        v8 -= 1;\n
        tmp_11 = v4;\n
        v4 = (0 CONCAT v4) /m v7;\n
    } while (tmp_11 >= v7);\n
    v9 = v1;\n
    return cgc_memmove(v9, v8, 20 + v8 - v9);\n
}\n
", "4209536:cgc_realloc": "extern void g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4209580:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    int tmp_15;  // tmp #15\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    unsigned int v2;  // al, Other Possible Types: char\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            tmp_15 = *(v3);\n
            *(&v2) = *(v3);\n
            v3 += 1;\n
        } while (tmp_15);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4209680:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4209769:sub_403c69": null, "4209772:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char v2[2];  // ecx\n
    char v3;  // bl\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    v4 = 0;\n
    if (v2[0])\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v2[1]);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4209831:sub_403ca7": null, "4209832:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    int tmp_13;  // tmp #13\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (*(v2))\n
    {\n
        v3 = v2 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v4 - *(v1);\n
            if (v4 != *(v1))\n
                return v4 - *(v1);\n
            v1 += 1;\n
            tmp_13 = *(v3);\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (tmp_13);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4209878:sub_403cd6": null, "4209880:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    int tmp_15;  // tmp #15\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            tmp_15 = *(v3);\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (tmp_15);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4209915:sub_403cfb": null, "4209916:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4209994:sub_403d4a": null, "4209996:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4210023:sub_403d67": null, "4210024:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // al, Other Possible Types: char\n
    unsigned int v5;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    for (v4 = v1[0]; v4; v3 += 1)\n
    {\n
        if (!*(v2))\n
            break;\n
        v4 = cgc_tolower(v4);\n
        if (v4 != cgc_tolower(*(v2)))\n
            break;\n
        if (v3 >= v0)\n
            break;\n
        v2 += 1;\n
        *(&v4) = *((v3 + 1));\n
    }\n
    v5 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v5;\n
}\n
", "4210141:sub_403ddd": null, "4210144:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = v2[0];\n
    v6 = 0;\n
    v5 = v3;\n
    if (v2[0] && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v2[1])\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4210216:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4210305:sub_403e81": null, "4210308:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char a0[2])\n
{\n
    char *v0;  // [bp-0x14]\n
    int tmp_13;  // tmp #13\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_403ee0;\n
                goto LABEL_403ede;\n
            }\n
            v5 += 1;\n
            tmp_13 = *(v4);\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (tmp_13);\n
        goto LABEL_403ee0;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_403ede:\n
    v4 = 0;\n
LABEL_403ee0:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4210433:sub_403f01": null, "4210436:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(v1, a0))\n
        {\n
            tmp_7 = *((v1 + 1));\n
            v1 += 1;\n
            if (!tmp_7)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v1;\n
        }\n
    }\n
}\n
", "4210510:sub_403f4e": null, "4210512:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_10;  // tmp #10\n
    int tmp_5;  // tmp #5\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // al, Other Possible Types: char\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    char v21[2];  // ebp, Other Possible Types: unsigned int\n
    void* v22;  // esi, Other Possible Types: unsigned int\n
    void* v23;  // edi, Other Possible Types: unsigned int\n
    char v24[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v21 = v10;\n
    if (cgc_isspace(v10[0]))\n
    {\n
        v21 = v10;\n
        do\n
        {\n
            if (!*(v21))\n
            {\n
                v23 = 0;\n
                v12 = 1;\n
                v13 = 1;\n
                v22 = 0;\n
                v14 = a0;\n
                goto LABEL_4040d4;\n
            }\n
            v15 = *((v21 + 1));\n
            v21 += 1;\n
        } while (cgc_isspace(v15));\n
    }\n
    v11 = a1;\n
    if (*(v21) == 45)\n
    {\n
        v21 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v21) == 43)\n
            v21 += 1;\n
    }\n
    if (v11)\n
    {\n
        if (!(v11 == 16))\n
            goto LABEL_404040;\n
        v15 = *(v21);\n
        v11 = 16;\n
        if (!(*(v21) == 48))\n
            goto LABEL_404043;\n
        v21 += (cgc_tolower(*((v21 + 1))) == 120) * 2;\n
        goto LABEL_404022;\n
    }\n
    else\n
    {\n
        v15 = *(v21);\n
        if (*(v21) != 48)\n
        {\n
LABEL_40402c:\n
            v15 = cgc_isdigit(v15);\n
            v11 = 10;\n
            if (!v15)\n
                goto LABEL_4040b7;\n
LABEL_404040:\n
            *(&v15) = *(v21);\n
LABEL_404043:\n
            if (v15)\n
            {\n
LABEL_404047:\n
                v13 = 1;\n
                v22 = 0;\n
                v23 = 0;\n
                v1 = v11;\n
                do\n
                {\n
                    v2 = v13;\n
                    v15 = cgc_isdigit(v15);\n
                    v16 = *(v21);\n
                    if (v15)\n
                    {\n
                        v17 = v16 - 48;\n
                    }\n
                    else\n
                    {\n
                        v15 = cgc_islower(v16);\n
                        v18 = *(v21);\n
                        if (v15)\n
                        {\n
                            v17 = v18 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v18))\n
                                goto LABEL_4040c8;\n
                            v17 = *(v21) - 55;\n
                        }\n
                    }\n
                    v19 = v1;\n
                    if (v17 >= v19)\n
                    {\n
LABEL_4040c8:\n
                        v14 = a0;\n
                        v12 = v0;\n
                        v13 = v2;\n
                        goto LABEL_4040d4;\n
                    }\n
                    v20 = v19 * v22;\n
                    tmp_5 = v20;\n
                    v22 = v20 + v17;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v23 = 1;\n
                    tmp_10 = *((v21 + 1));\n
                    *(&v15) = *((v21 + 1));\n
                    v21 += 1;\n
                    v13 = 0;\n
                } while (tmp_10);\n
            }\n
            else\n
            {\n
LABEL_4040b7:\n
                v23 = 0;\n
                v13 = 1;\n
                v22 = 0;\n
                v14 = a0;\n
                v12 = v0;\n
            }\n
        }\n
        else\n
        {\n
            v15 = *((v21 + 1));\n
            if ((v15 & 248) == 48)\n
            {\n
                v21 += 1;\n
                v11 = 8;\n
                goto LABEL_404047;\n
            }\n
            v15 = cgc_tolower(v15);\n
            if (v15 != 120)\n
            {\n
                *(&v15) = *(v21);\n
                goto LABEL_40402c;\n
            }\n
            else\n
            {\n
                v21 += 2;\n
            }\n
LABEL_404022:\n
            v11 = 16;\n
            goto LABEL_404040;\n
        }\n
    }\n
LABEL_4040d4:\n
    if (v14)\n
    {\n
        tmp_2 = v13;\n
        v24 = v6;\n
        if (!tmp_2)\n
            v24 = v21;\n
        *(v14) = v24;\n
    }\n
    v25 = (!v23 ? 0x80000000 : -(v22));\n
    v26 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v22);\n
    if (v12 < 0)\n
        v26 = v25;\n
    return v26;\n
}\n
", "4210950:sub_404106": null, "4210952:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_10;  // tmp #10\n
    int tmp_59;  // tmp #59\n
    int tmp_37;  // tmp #37\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // esi\n
    void* v17;  // edi, Other Possible Types: unsigned int\n
    void* v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
    char v25[2];  // ebx\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v30;  // edx\n
    char v31[2];  // ebp\n
    unsigned int v32;  // edi\n
    void* v33;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v34;  // ecx\n
    char v35[2];  // ebp, Other Possible Types: unsigned int\n
    void* v36;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v37;  // eax, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // cc_dep2\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = cgc_isspace(v12[0]);\n
    v35 = v12;\n
    if (v14)\n
    {\n
        v35 = v12;\n
        do\n
        {\n
            if (!*(v35))\n
                goto LABEL_40417a;\n
            v13 = *((v35 + 1));\n
            v35 += 1;\n
            v14 = cgc_isspace(v13);\n
        } while (v14);\n
    }\n
    v15 = a1;\n
    if (*(v35) == 45)\n
    {\n
LABEL_40417a:\n
        v35 += 1;\n
        v16 = -1;\n
    }\n
    else\n
    {\n
        v16 = 1;\n
        if (*(v35) == 43)\n
            v35 += 1;\n
    }\n
    v3 = v16;\n
    if (v15)\n
    {\n
        if (!(v15 == 16))\n
            goto LABEL_404209;\n
        *(&v14) = *(v35);\n
        v15 = 16;\n
        if (!(*(v35) == 48))\n
            goto LABEL_40420c;\n
        v35 += (cgc_tolower(*((v35 + 1))) == 120) * 2;\n
        goto LABEL_4041e7;\n
    }\n
    else\n
    {\n
        *(&v14) = *(v35);\n
        if (*(v35) != 48)\n
        {\n
LABEL_4041f1:\n
            v14 = cgc_isdigit(v14);\n
            v15 = 10;\n
            if (!v14)\n
                goto LABEL_4042b7;\n
LABEL_404209:\n
            *(&v14) = *(v35);\n
LABEL_40420c:\n
            if (v14)\n
            {\n
                v0 = v15;\n
LABEL_404218:\n
                v36 = 0;\n
                v34 = 1;\n
                v17 = 0;\n
                v33 = 0;\n
                do\n
                {\n
                    v4 = v34;\n
                    v2 = v33;\n
                    v19 = cgc_isdigit(v14);\n
                    v20 = *(v35);\n
                    if (v19)\n
                    {\n
                        v21 = v20 - 48;\n
                    }\n
                    else\n
                    {\n
                        v23 = *(v35);\n
                        if (cgc_islower(v20))\n
                        {\n
                            v21 = v23 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v23))\n
                                goto LABEL_4042c6;\n
                            v21 = *(v35) - 55;\n
                        }\n
                    }\n
                    v24 = v0;\n
                    if (v21 >= v24)\n
                    {\n
LABEL_4042c6:\n
                        v37 = a0;\n
                        v33 = v2;\n
                        v34 = v4;\n
                        goto LABEL_4042d2;\n
                    }\n
                    v25 = v35;\n
                    v26 = v36 * (v24 >> 31);\n
                    v27 = v36;\n
                    tmp_59 = v27 * v24;\n
                    v14 = tmp_59;\n
                    v30 = v24 * v17 + v26 + (v27 * v24 >> 32);\n
                    v31 = v25;\n
                    v32 = v21 >> 31;\n
                    v36 = v14 + v21;\n
                    tmp_37 = v32;\n
                    v17 = v32 + v30 + (v14 + v21 < v14);\n
                    v33 = v2;\n
                    if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>))\n
                        v33 = 1;\n
                    tmp_10 = v31[1];\n
                    *(&v14) = v31[1];\n
                    v35 = &v31[1];\n
                    v34 = 0;\n
                } while (tmp_10);\n
                goto LABEL_4042d2;\n
            }\n
LABEL_4042b7:\n
            v3 = 1;\n
            v33 = 0;\n
            v34 = 1;\n
            v36 = 0;\n
            v18 = 0;\n
            v37 = a0;\n
        }\n
        else\n
        {\n
            *(&v14) = *((v35 + 1));\n
            if ((v14 & 248) == 48)\n
            {\n
                v35 += 1;\n
                v0 = 8;\n
                goto LABEL_404218;\n
            }\n
            v14 = cgc_tolower(v14);\n
            if (v14 != 120)\n
            {\n
                *(&v14) = *(v35);\n
                goto LABEL_4041f1;\n
            }\n
            else\n
            {\n
                v35 += 2;\n
            }\n
LABEL_4041e7:\n
            v15 = 16;\n
            goto LABEL_404209;\n
        }\n
    }\n
LABEL_4042d2:\n
    if (v37)\n
    {\n
        tmp_2 = v34;\n
        v38 = v8;\n
        if (!tmp_2)\n
            v38 = v35;\n
        *(v37) = v38;\n
    }\n
    v39 = -(v36);\n
    v40 = v3;\n
    if ((v40 >> 31 & 1 ^ 1))\n
        v39 = v36;\n
    v41 = -(0 < v33) | v39;\n
    v42 = -1;\n
    v43 = v36 < 2147483649;\n
    if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>))\n
        v42 = v41;\n
    if ((v40 >> 31 & 1 ^ 1))\n
        v42 = v41;\n
    return v42;\n
}\n
", "4211472:_ZN8DatabaseC2Ev": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
int Database::__base_ctor__(unsigned int *v1)\n
{\n
    char v0;  // [bp-0x8]\n
    struct_0 *v2;  // eax\n
\n
    v2 = operator new(12);\n
    v2->field_0 = v2->field_0 & 252 | 1;\n
    v2->field_1 = 0;\n
    v2->field_2 = 0;\n
    *(v1) = v2;\n
    return Database::rebuild_fsm(v1, *(&v0));\n
}\n
", "4211539:sub_404353": null, "4211540:_ZN8Database11rebuild_fsmEv": "typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    unsigned short field_2;\n
    struct struct_0 *field_4;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 *g_8;\n
\n
int Database::rebuild_fsm(struct struct_2 **v3)\n
{\n
    struct_1 *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_1 *v2;  // [bp-0x14]\n
    struct struct_2 **v4;  // esi\n
    struct_3 *v5;  // eax, Other Possible Types: unsigned int, struct_1 *\n
    struct_2 *v6;  // edi, Other Possible Types: unsigned int\n
    void* v7;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v8;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v9;  // esi, Other Possible Types: unsigned int\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v11;  // ecx, Other Possible Types: struct_3 *, unsigned int\n
    struct_0 *v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13;  // esi\n
    void* v14;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v15;  // ebx, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    v5 = _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_();\n
    v6 = *(v4);\n
    if (!v6->field_2)\n
        return v5;\n
    v7 = 0;\n
    v5 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v11 = *((v6 + v7 * 4 + 12));\n
        if (!v8)\n
            v8 = v11;\n
        if (v5)\n
        {\n
            *((v5 + &g_8)) = v11;\n
            v6 = *(v4);\n
        }\n
        v11->field_4 = v6;\n
        v7 += 1;\n
        v6 = *(v4);\n
        v5 = v11;\n
    } while (v7 < *((v6 + 2)));\n
    if (!v8)\n
        return v11;\n
    do\n
    {\n
        v9 = *((v8 + &g_8));\n
        v5 = (!v9 ? v11 : v9);\n
        v1 = *((v8 + 2));\n
        if (!v1)\n
        {\n
            v11 = v5;\n
        }\n
        else\n
        {\n
            v10 = 0;\n
            v0 = v8;\n
            do\n
            {\n
                v11 = *((v8 + v10 * 4 + 12));\n
                v12 = *((v8 + 4));\n
                if (!v9)\n
                    v9 = v11;\n
                v2 = v9;\n
                if (v5)\n
                    *((v5 + &g_8)) = v11;\n
                while (true)\n
                {\n
                    v13 = *((v12 + 2));\n
                    if (v13)\n
                    {\n
                        v14 = 0;\n
                        while (true)\n
                        {\n
                            v15 = (&v12[1].field_4)[v14];\n
                            if (v15->field_1 == v11->field_1)\n
                                break;\n
                            v14 += 1;\n
                            if (v13 == v14)\n
                                goto LABEL_4043f8;\n
                        }\n
                    }\n
LABEL_4043f8:\n
                    if (!(*(v12) & 1))\n
                    {\n
                        v12 = *((v12 + 4));\n
                    }\n
                    else\n
                    {\n
                        v15 = v12;\n
                        break;\n
                    }\n
                }\n
                v11->field_4 = v15;\n
                v10 += 1;\n
                v5 = v11;\n
                v8 = v0;\n
                v9 = v2;\n
            } while (v10 != v1);\n
        }\n
        v8 = v9;\n
    } while (v9);\n
    return v5;\n
}\n
", "4211753:sub_404429": null, "4211754:_ZN8DatabaseD1Ev": "int Database::__dtor__(unsigned int *v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    Database::PrefixNode::__base_dtor__(*(v1), *(&v0));\n
    return cgc_free(*(v1));\n
}\n
", "4211799:sub_404457": null, "4211800:_ZN8Database10PrefixNode3addEPPS0_PKhj": "typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
int Database::PrefixNode::add(struct struct_1 **v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_39;  // tmp #39\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    struct struct_1 **v4;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    char v7[2];  // edx\n
    struct_1 *v8;  // eax\n
    unsigned int v10;  // eax\n
    void* v11;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v12;  // eax\n
    unsigned int v13;  // eax\n
\n
    v0 = a1;\n
    v1 = a0;\n
    v4 = v3;\n
    while (true)\n
    {\n
        v5 = *(v4);\n
        v6 = v5->field_2;\n
        if (v6)\n
        {\n
            v11 = 0;\n
            do\n
            {\n
                v7 = *(&v5[3 + v11].padding_0);\n
                if (v7[1] == *(v1))\n
                {\n
                    v13 = v0;\n
                    if (v13 == 1)\n
                    {\n
                        v7[0] = v7[0] | 2;\n
                        return v0;\n
                    }\n
                    goto LABEL_404553;\n
                }\n
                v11 += 1;\n
            } while (v6 != v11);\n
            goto LABEL_404553;\n
        }\n
        v8 = cgc_realloc(v5, v6 * 4 + 16);\n
        *(v4) = v8;\n
        if (!v8)\n
        {\n
            cgc__terminate();\n
            return Database::PrefixNode::remove();\n
        }\n
        v5 = v8;\n
        v10 = v8->field_2 + 1;\n
        *((v5 + 2)) = v10;\n
        v2 = v10;\n
        v11 = v2 - 1;\n
        *((v5 + v2 * 4 + 8)) = cgc_malloc(12);\n
        v12 = operator new(12);\n
        tmp_39 = *(v1);\n
        v12->field_0 = v12->field_0 & 252 | (v0 == 1) * 2;\n
        v12->field_1 = tmp_39;\n
        v12->field_2 = 0;\n
        cgc_memcpy(*((v5 + v2 * 4 + 8)), v12, 12);\n
        Database::PrefixNode::__base_dtor__(v12, v12);\n
        operator delete(v12);\n
        v13 = v0;\n
LABEL_404553:\n
        if (v13 < 2)\n
            return v13;\n
        v4 = v5 + v11 * 4 + 12;\n
        v1 += 1;\n
        v0 = v13 - 1;\n
    }\n
}\n
", "4212100:_ZN8Database10PrefixNode6removeEPPS0_PKhj": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_1;\n
\n
int Database::PrefixNode::remove(struct struct_0 **v1, char *a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int, char *\n
    unsigned int v3;  // edx\n
    struct_1 *v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ebp\n
    struct struct_1 **v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    struct_1 *v10;  // esi\n
    unsigned int v11;  // eax, Other Possible Types: unsigned short\n
\n
    v2 = *(v1);\n
    v0 = v2;\n
    v3 = v2->field_2;\n
    if (!v3)\n
        return v2;\n
    v2 = a0;\n
    v8 = v0 + 3;\n
    v7 = 1;\n
    do\n
    {\n
        v5 = *(v8);\n
        if (v5->field_1 == *(v2))\n
        {\n
            v9 = a1;\n
            if (v9 != 1)\n
                v2 = Database::PrefixNode::remove(v8, v2 + 1, v9 - 1);\n
            else\n
                v5->field_0 = v5->field_0 & 253;\n
            v10 = *(v8);\n
            if (!v10->field_2)\n
            {\n
                if (!(v10->field_0 & 2))\n
                {\n
                    v11 = v0->field_2;\n
                    if (v11 >= 2 && v7 - 1 < v11 - 1)\n
                    {\n
                        cgc_memmove(v8, v8 + 4, (v11 - v7) * 4);\n
                        v11 = v0->field_2;\n
                    }\n
                    v0->field_2 = v11 - 1;\n
                    Database::PrefixNode::__base_dtor__();\n
                    v2 = cgc_free(v10);\n
                    return v2;\n
                }\n
                break;\n
            }\n
        }\n
        v8 += 4;\n
        v6 = -(v3) + v7 + 1;\n
        v7 += 1;\n
    } while (v6 != 1);\n
}\n
", "4212321:sub_404661": null, "4212322:_ZN8Database3addEPKhj": "int Database::add(struct struct_1 **v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v0 = v4;\n
    Database::PrefixNode::add(v2, a0, a1);\n
    return Database::rebuild_fsm(v2);\n
}\n
", "4212373:sub_404695": null, "4212374:_ZN8Database6removeEPKhj": "int Database::remove(struct struct_0 **v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v0 = v4;\n
    Database::PrefixNode::remove(v2, a0, a1);\n
    return Database::rebuild_fsm(v2);\n
}\n
", "4212425:sub_4046c9": null, "4212426:_ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
int _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_()\n
{\n
    void* v1;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v2;  // ecx\n
\n
    v1 = 0;\n
    v2->field_4 = 0;\n
    v2->field_8 = 0;\n
    if (!v2->field_2)\n
        return v2->field_2;\n
    do\n
    {\n
        _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_();\n
        v1 += 1;\n
    } while (v1 < v2->field_2);\n
    return v2->field_2;\n
}\n
", "4212480:_ZNK8Database5queryEPKhj": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
int Database::query const(struct struct_0 **v0, unsigned int a0, unsigned int a1)\n
{\n
    char *v1;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // eax, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v4;  // esi\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char v6;  // ch\n
    struct_0 *v7;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v8;  // edi, Other Possible Types: unsigned int, char [2]\n
\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = v0;\n
        v8 = *(v2);\n
        *(&v2) = 1;\n
        while (true)\n
        {\n
            v3 = *((a0 + v1));\n
            v7 = v8;\n
            while (true)\n
            {\n
                v4 = *((v7 + 2));\n
                if (v4)\n
                {\n
                    v5 = 0;\n
                    do\n
                    {\n
                        v8 = (&v7[1].field_4)[v5];\n
                        if (v8[1] == v3)\n
                        {\n
                            v6 = v8[0];\n
                            goto LABEL_404744;\n
                        }\n
                        v5 += 1;\n
                    } while (v4 != v5);\n
                }\n
                v6 = *(v7);\n
                if (!(*(v7) & 1))\n
                {\n
                    v7 = *((v7 + 4));\n
                }\n
                else\n
                {\n
                    v8 = v7;\n
                    break;\n
                }\n
            }\n
LABEL_404744:\n
            if ((v6 & 2))\n
                break;\n
            v1 += 1;\n
            *(&v2) = v1 < a1;\n
            if (v1 == a1)\n
                break;\n
        }\n
    }\n
    *(&v2) = v2 & 1;\n
    return v2;\n
}\n
", "4212578:_ZN8Database10PrefixNodeD2Ev": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
int Database::PrefixNode::__base_dtor__(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    void* v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1->field_2)\n
        return v0->field_2;\n
    v2 = 0;\n
    do\n
    {\n
        Database::PrefixNode::__base_dtor__(*(&v1[3 + v2].padding_0));\n
        cgc_free(*(&v1[3 + v2].padding_0));\n
        v2 += 1;\n
    } while (v2 < v1->field_2);\n
    return v0->field_2;\n
}\n
", "4212649:sub_4047a9": null, "4212652:_ZN8EmulatorC1EPvS0_": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[32784];\n
    unsigned int field_801c;\n
    char padding_8020[16];\n
    char field_8030;\n
    char padding_8031[3];\n
    unsigned int field_8034;\n
    unsigned int field_8038;\n
} struct_0;\n
\n
int Emulator::__ctor__(struct_0 *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v2->field_4 = v1;\n
    v2->field_8 = a1;\n
    v2->field_8034 = 0;\n
    v2->field_8038 = 0;\n
    v3 = -60;\n
    do\n
    {\n
        *(&v2[1].padding_c[48 + v3]) = 0;\n
        v3 += 20;\n
    } while (true);\n
    cgc_memset(&v2->padding_c[0x8000], 0, 32);\n
    v2->field_801c = v1 + 0x10000;\n
    v2->field_8030 = v2->field_8030 & 252;\n
    return cgc_memset(&v0->padding_c, 0, 0x8000);\n
}\n
", "4212795:sub_40483b": null, "4212796:_ZN8EmulatorD1Ev": "int Emulator::__dtor__()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4212797:sub_40483d": null, "4212798:_ZN8Emulator5resetEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[32784];\n
    unsigned int field_801c;\n
    char padding_8020[16];\n
    char field_8030;\n
} struct_0;\n
\n
int Emulator::reset(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x9c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    char v4;  // [bp+0xc]\n
    struct_0 *v5;  // ebp\n
    void* v6;  // edx, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
    void* v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax, Other Possible Types: char\n
\n
    v1 = 0;\n
    v5 = v3;\n
    v6 = 0;\n
    do\n
    {\n
        v10 = v5->padding_c[v6];\n
        if (v5->padding_c[v6])\n
        {\n
            v9 = 0;\n
            v8 = v1;\n
            while (true)\n
            {\n
                v0 = v10;\n
                v10 = v0;\n
                if (((*(&v0 + ((v9 & 31) >> 3)) >> (v9 & 31 & 7)) & 1) == 1)\n
                {\n
                    v2 = v8;\n
                    v10 = cgc_memset(v5->field_8 + v8, 0, 0x1000);\n
                    v8 = v2;\n
                }\n
                if (v9 == 7)\n
                    break;\n
                *(&v10) = *((v5 + v6 + 12));\n
                v8 += 0x1000;\n
                v9 += 1;\n
            }\n
        }\n
        v6 += 1;\n
        v10 = 0x8000;\n
        v1 += 0x8000;\n
    } while (v6 != 0x8000);\n
    cgc_memset(v5->field_4, 0, 0x10000);\n
    cgc_memset(&v5->padding_c[0x8000], 0, 32);\n
    v5->field_801c = 0x10000 + v5->field_4;\n
    v5->field_8030 = v5->field_8030 & 252;\n
    return cgc_memset(&v4, 0, 0x8000);\n
}\n
", "4213010:_ZN8Emulator6set_ipEi": "typedef struct struct_0 {\n
    char padding_0[32812];\n
    unsigned int field_802c;\n
} struct_0;\n
\n
int Emulator::set_ip(struct_0 *v0, unsigned int a0)\n
{\n
    v0->field_802c = a0;\n
    return a0;\n
}\n
", "4213025:sub_404921": null, "4213026:_ZN8Emulator4stepEv": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned int field_8;\n
    char padding_c[32768];\n
    unsigned int field_800c;\n
    unsigned int field_8010;\n
    unsigned int field_8014;\n
    unsigned int field_8018;\n
    char padding_801c[4];\n
    unsigned int field_8020;\n
    unsigned int field_8024;\n
    unsigned int field_8028;\n
    unsigned int field_802c;\n
    char field_8030;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Emulator::step(struct_1 *v19)\n
{\n
    int tmp_19;  // tmp #19\n
    struct_0 *v0;  // [bp-0x9c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x94]\n
    unsigned int v2;  // [bp-0x8c]\n
    char v3;  // [bp-0x88]\n
    char v4;  // [bp-0x84]\n
    char v5;  // [bp-0x80]\n
    char v6;  // [bp-0x6c]\n
    unsigned int v9;  // [bp-0x40]\n
    unsigned int v10;  // [bp-0x3c]\n
    unsigned int v11;  // [bp-0x28], Other Possible Types: char\n
    unsigned int v12;  // [bp-0x24]\n
    void* v13;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x1c]\n
    void* v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x10]\n
    unsigned int v17;  // [bp-0xc]\n
    unsigned int v18;  // [bp-0x8]\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // esi\n
    struct_1 *v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // d\n
    unsigned int *v31;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v32;  // esi, Other Possible Types: unsigned int\n
    void* v33;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v35;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v36;  // esi, Other Possible Types: unsigned int\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // esi\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // eax\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // cc_dep1\n
    unsigned int v48;  // cc_dep1\n
    unsigned int v49;  // cc_dep1\n
    unsigned int v50;  // eax\n
    void* v51;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v52;  // ecx\n
    unsigned int v53;  // eax\n
\n
    v18 = v23;\n
    v17 = v24;\n
    v16 = v25;\n
    v26 = v19;\n
    v27 = v19->field_802c;\n
    if (v27 <= 1073741823)\n
    {\n
        v1 = 0x40000000 - v27;\n
        Instruction::disassemble(&v4, v26->field_8 + v27);\n
        v28 = *(&v4);\n
        if (v28)\n
        {\n
            v31 = &v26[1].padding_1[2];\n
            v29 = 17;\n
            for (v32 = &v3; v29; v32 += v30 * 4)\n
            {\n
                v29 -= 1;\n
                *(v31) = *(v32);\n
                v31 += v30 * 4;\n
            }\n
            v33 = *(&v4);\n
            v26->field_802c = v26->field_802c + v33;\n
            v26->field_0 = 0;\n
            switch (v28)\n
            {\n
            case 2:\n
                v35 = &v5;\n
                v37 = Emulator::get_operand(v26);\n
                v38 = Emulator::get_operand(v26);\n
                tmp_19 = v38;\n
                v45 = v38 + v37;\n
                v46 = (v38 >> 31) + (v37 >> 31) + (tmp_19 + v37 < tmp_19);\n
                v26->field_8030 = ((v45 >> 31 ^ v46)) * 2 | v26->field_8030 & 252 | !v45;\n
                goto LABEL_404af7;\n
            case 4:\n
                v35 = &v5;\n
                v39 = Emulator::get_operand(v26);\n
                v40 = Emulator::get_operand(v26);\n
                v26->field_8030 = ((v39 - v40 >> 31 ^ (v39 >> 31) - (v40 >> 31) - (v39 < v40))) * 2 | v26->field_8030 & 252 | v39 == v40;\n
                goto LABEL_404af7;\n
            case 6:\n
                v35 = &v5;\n
                v47 = Emulator::get_operand(v26) & Emulator::get_operand(v26);\n
                goto LABEL_404ae3;\n
            case 7:\n
                v35 = &v5;\n
                v48 = Emulator::get_operand(v26);\n
                goto LABEL_404ae3;\n
            case 8:\n
                v35 = &v5;\n
                v49 = Emulator::get_operand(v26) ^ Emulator::get_operand(v26);\n
LABEL_404ae3:\n
                v26->field_8030 = v26->field_8030 & 252 | [D] x86g_calculate_condition(0x4<32>, 0xf<32>, cc_dep1<4>, 0x0<32>, 0x0<32>);\n
LABEL_404af7:\n
                v0 = v35;\n
                goto LABEL_404f70;\n
            case 9:\n
                v36 = &v5;\n
                goto LABEL_404c41;\n
            case 10:\n
                if (*(&v6) == 2)\n
                {\n
                    v0 = &v5;\n
                    goto LABEL_404f70;\n
                }\n
            case 11:\n
                v41 = Emulator::get_operand(v26);\n
                v33 = Emulator::get_operand(v26);\n
                v26->field_8030 = ((v41 - v33 >> 31 ^ (v41 >> 31) - (v33 >> 31) - (v41 < v33))) * 2 | v26->field_8030 & 252 | v41 == v33;\n
                break;\n
            case 12:\n
                v36 = &v11;\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = 0;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::get_operand(v26);\n
                Emulator::set_operand(v26, &v5);\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                v50 = Emulator::get_operand(v26) + 4;\n
                goto LABEL_404f6b;\n
            case 13:\n
                v36 = &v11;\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                Emulator::get_operand(v26);\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = 0;\n
                v14 = -1;\n
                v15 = 0;\n
LABEL_404c41:\n
                Emulator::get_operand(v26);\n
                goto LABEL_404f6b;\n
            case 14:\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = 0;\n
                v14 = -1;\n
                v15 = 0;\n
                v2 = Emulator::get_operand(v26);\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                Emulator::get_operand(v26);\n
                Emulator::set_operand(v26, &v11);\n
                v33 = v2;\n
                if (v33 < 0x40000000)\n
                {\n
                    v26->field_802c = v33;\n
                    break;\n
                }\n
            case 17:\n
                if (!(!(v26->field_8030 & 1)))\n
                    break;\n
                goto LABEL_404d4c;\n
            case 18:\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                Emulator::get_operand(v26);\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = 0;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                goto LABEL_404d4c;\n
            case 19:\n
                v36 = &v5;\n
                v42 = Emulator::get_operand(v26) + 1;\n
                goto LABEL_404f6b;\n
            case 20:\n
                v36 = &v5;\n
                v43 = Emulator::get_operand(v26) - 1;\n
                goto LABEL_404f6b;\n
            case 21:\n
                v36 = &v11;\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -0x4;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -8;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -12;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -0x10;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -20;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -24;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -28;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -32;\n
                v14 = -1;\n
                v15 = 0;\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                v53 = Emulator::get_operand(v26) - 32;\n
LABEL_404f6b:\n
                v0 = v36;\n
LABEL_404f70:\n
                v33 = Emulator::set_operand(v26, v0);\n
                break;\n
            case 22:\n
                v11 = 1;\n
                v12 = 4;\n
                v9 = 1;\n
                v10 = 4;\n
                Emulator::get_operand(v26);\n
                Emulator::set_operand(v26, &v11);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -0x4;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_800c = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -8;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_8010 = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -12;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_8014 = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -0x10;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_8018 = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -24;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_8020 = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -28;\n
                v14 = -1;\n
                v15 = 0;\n
                v26->field_8024 = Emulator::get_operand(v26);\n
                v11 = 2;\n
                v12 = 4;\n
                v13 = -32;\n
                v14 = -1;\n
                v15 = 0;\n
                v33 = Emulator::get_operand(v26);\n
                v26->field_8028 = v33;\n
                break;\n
            case 16:\n
                if (!(v26->field_8030 & 1))\n
                    break;\n
            case 15:\n
LABEL_404d4c:\n
                v33 = Emulator::get_operand(v26);\n
                v51 = 0;\n
                if (*(&v5) == 3)\n
                    v51 = v26->field_802c;\n
                v52 = v51 + v33;\n
                if (v52 < 0x40000000)\n
                {\n
                    v26->field_802c = v52;\n
                    break;\n
                }\n
                v26->field_0 = 1;\n
                break;\n
            }\n
            *(&v33) = !v26->field_0;\n
            goto LABEL_404f80;\n
        }\n
    }\n
    v33 = 0;\n
LABEL_404f80:\n
    return v33;\n
}\n
", "4215114:_ZN8Emulator11get_operandERK7Operand": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
int Emulator::get_operand(struct_0 *v0, struct_1 *a0)\n
{\n
    struct_1 *v1;  // esi\n
    unsigned int v2;  // ecx\n
    struct_0 *v3;  // edx\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // eax\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
\n
    v1 = a0;\n
    v2 = v1->field_0;\n
    if (v2 == 3)\n
        return v1->field_4;\n
    v3 = v0;\n
    if (v2 != 2)\n
    {\n
        v8 = 0;\n
        if (v2 != 1)\n
            return v8;\n
        v8 = (&v3[2731].field_8)[v1->field_4];\n
    }\n
    else\n
    {\n
        v4 = v1->field_4;\n
        v6 = (v4 == -1 ? (&v3[2731].field_8)[v4] : 0);\n
        v5 = v1->field_c;\n
        if (v5 != -1)\n
            v6 += (&v3[2731].field_8)[v5] << (v1->field_10 & 31);\n
        v7 = v6 + v1->field_8;\n
        if (v7 >= 0x1000)\n
        {\n
            if (v7 <= 1073741820)\n
            {\n
                v8 = *((v3->field_8 + v7));\n
                return v8;\n
            }\n
            v9 = v7 - v3->field_4;\n
            if (v9 <= 65535 && v9 + 3 <= 65535)\n
            {\n
                v8 = *(v7);\n
                return v8;\n
            }\n
        }\n
        v3->field_0 = 1;\n
        return 0;\n
    }\n
}\n
", "4215262:_ZN8Emulator11set_operandERK7Operandi": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
int Emulator::set_operand(struct_1 *v0, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    struct_0 *v2;  // edi\n
    struct_1 *v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // esi\n
    unsigned int v11;  // ecx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = v2->field_0;\n
    if (v4 != 2)\n
    {\n
        if (v4 != 1)\n
            return v0;\n
        (&v3[2731].field_8)[v2->field_4] = v1;\n
    }\n
    else\n
    {\n
        v5 = v2->field_4;\n
        v6 = (v5 == -1 ? (&v3[2731].field_8)[v5] : 0);\n
        v7 = v2->field_c;\n
        if (v7 != -1)\n
            v6 += (&v3[2731].field_8)[v7] << (v2->field_10 & 31);\n
        v8 = v6 + v2->field_8;\n
        if (v8 > 4095)\n
        {\n
            if (v8 <= 1073741820)\n
            {\n
                *((v3->field_8 + v8)) = v1;\n
                (&v3[1].field_0)[v8 / 0x8000] = (&v3[1].field_0)[v8 / 0x8000] | 1 << (v8 / 0x1000 & 7 & 31);\n
                return v0;\n
            }\n
            v11 = v8 - v3->field_4;\n
            if (v11 <= 65535 && v11 + 3 <= 65535)\n
            {\n
                *(v8) = v1;\n
                return v0;\n
            }\n
        }\n
        v3->field_0 = 1;\n
        return v0;\n
    }\n
}\n
", "4215428:_ZN8Emulator15get_operand_memERK7Operand": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_0;\n
\n
int Emulator::get_operand_mem(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // edx\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v1->field_4;\n
    v4 = (v3 == -1 ? *((v2 + v3 * 4 + 32780)) : 0);\n
    v5 = v1->field_c;\n
    if (v5 != -1)\n
        v4 += *((v2 + v5 * 4 + 32780)) << (v1->field_10 & 31);\n
    return v4 + a0->field_8;\n
}\n
", "4215483:sub_4052bb": null, "4215484:_ZN8Emulator11print_stateEv": "extern unsigned int cgc_stderr;\n
extern unsigned int g_4071cd;\n
\n
int Emulator::print_state(unsigned int v5[8204])\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // esi\n
    unsigned int v7[8204];  // ecx\n
    void* v8;  // ebp, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v7 = v5;\n
    v1 = v7[1];\n
    v0 = v7[8203];\n
    cgc_fprintf(cgc_stderr, \"IP: %08X\\tStack: %08X\\tHeap: %08X\\n
\");\n
    v8 = 0;\n
    do\n
    {\n
        v3 = v5[8195 + v8];\n
        v2 = v8;\n
        cgc_fprintf(cgc_stderr, \"R%d: %08X\\n
\");\n
        v8 += 1;\n
    } while (v8 != 8);\n
    return cgc_fprintf(cgc_stderr, &g_4071cd);\n
}\n
", "4215606:sub_405336": null, "4215608:_ZN6EngineC2Ev": "int Engine::__base_ctor__(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int *v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    Database::__base_ctor__(v4);\n
    Database::__base_ctor__(v4 + 1);\n
    v0 = v4 + 2;\n
    v5 = cgc_allocate(0x40000000, 0);\n
    if (v5)\n
    {\n
        cgc__terminate();\n
        return Engine::__base_dtor__();\n
    }\n
    return v5;\n
}\n
", "4215698:_ZN6EngineD2Ev": "int Engine::__base_dtor__(unsigned int *v0)\n
{\n
    Database::__dtor__(v0 + 1);\n
    return Database::__dtor__(v0);\n
}\n
", "4215742:_ZN6Engine7processEPhj": "typedef struct struct_0 {\n
    char padding_0[12];\n
    char field_c;\n
} struct_0;\n
\n
int Engine::process(struct_0 *v1, unsigned short a0[4], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // ebp\n
    unsigned short v4[4];  // edi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // eax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = v1;\n
    v5->field_c = 0;\n
    if (Database::query const(&v5->padding_0[4], v4, a1))\n
        return 0;\n
    v6 = Database::query const(v5, v4, v3);\n
    if (v6)\n
        v5->field_c = 1;\n
    if (v3 >= 40)\n
    {\n
        v6 = v4[0];\n
        if (v6 == 43456 && !v4[1])\n
        {\n
            v6 = v4[2] * v4[3] * 3;\n
            if (v6 != v3 - 40)\n
                v5->field_c = 1;\n
        }\n
    }\n
    else if (v3 < 32)\n
    {\n
        goto LABEL_40545c;\n
    }\n
    if (*(&v4[0]) == 1311151218)\n
        v6 = Engine::process_exe(v5, v4);\n
LABEL_40545c:\n
    *(&v6) = v5->field_c;\n
    return v6;\n
}\n
", "4215915:sub_40546b": null, "4215916:_ZN6Engine6is_bmpEPhj": "int Engine::is_bmp()\n
{\n
    char v1;  // [bp+0xc]\n
\n
    if (*(&v1) >= 40)\n
        return;\n
    return;\n
}\n
", "4215942:_ZN6Engine11process_bmpEPhj": "typedef struct struct_0 {\n
    char padding_0[12];\n
    char field_c;\n
} struct_0;\n
\n
int Engine::process_bmp(struct_0 *v0, unsigned short a0[4], unsigned int a1)\n
{\n
    unsigned short v1[4];  // eax, Other Possible Types: unsigned int\n
    unsigned short v2[4];  // edx\n
    unsigned int v3;  // eax\n
\n
    v1 = a0;\n
    if (v1[0] != 43456)\n
    {\n
        return v1;\n
    }\n
    else if (v1[1])\n
    {\n
        return v1;\n
    }\n
    else\n
    {\n
        v2 = v1[2];\n
        v3 = v1[3];\n
        v1 = v2 * v3 * 3;\n
        if (v1 == a1 - 40)\n
            return v1;\n
        v0->field_c = 1;\n
        return v0;\n
    }\n
}\n
", "4215999:sub_4054bf": null, "4216000:_ZN6Engine6is_exeEPhj": "int Engine::is_exe()\n
{\n
    char v1;  // [bp+0xc]\n
\n
    if (*(&v1) >= 32)\n
        return;\n
    return;\n
}\n
", "4216024:_ZN6Engine11process_exeEPhj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char field_c;\n
} struct_0;\n
\n
int Engine::process_exe(struct_0 *v5, unsigned int a0[8], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18098]\n
    int tmp_5;  // tmp #5\n
    struct_0 *v1;  // [bp-0x18094]\n
    char v2;  // [bp-0x1808c]\n
    char v3;  // [bp-0x10058]\n
    char v4;  // [bp-0x10010]\n
    unsigned int v6[8];  // edi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edi\n
\n
    v6 = a0;\n
    Emulator::__ctor__(&v2, &v4, v5->field_8);\n
    Emulator::reset(&v2);\n
    if (v6[0] != 1311151218)\n
    {\n
        return Emulator::__dtor__();\n
    }\n
    else if (v6[1] > 1073741823)\n
    {\n
        return Emulator::__dtor__();\n
    }\n
    else\n
    {\n
        v7 = v6[2];\n
        if (v7 > 1073741823)\n
            return Emulator::__dtor__();\n
        v8 = v6[3];\n
        if (v8 > a1 - 32)\n
        {\n
            return Emulator::__dtor__();\n
        }\n
        else if (v8 + v7 <= 1073741823)\n
        {\n
            v0 = v6 + 1;\n
            cgc_memcpy(v7 + v5->field_8, v0, v8);\n
            v9 = v6[4];\n
            if (v9 > 1073741823)\n
                return Emulator::__dtor__();\n
            v10 = v6[5];\n
            if (v10 + v9 > 1073741823)\n
                return Emulator::__dtor__();\n
            v11 = v6[3];\n
            if (v10 > a1 - 32 - v11)\n
                return Emulator::__dtor__();\n
            cgc_memcpy(v9 + v5->field_8, v0 + v11, v10);\n
            v12 = v6[6];\n
            if (v12 > 1073741823)\n
                return Emulator::__dtor__();\n
            v13 = v6[7];\n
            if (v13 + v12 > 1073741823)\n
                return Emulator::__dtor__();\n
            cgc_memset(v12 + v5->field_8, 0, v13);\n
            Emulator::set_ip(&v2, v6[1]);\n
            v14 = 9999;\n
            while (true)\n
            {\n
                tmp_5 = v14;\n
                v14 -= 1;\n
                *(&v13) = tmp_5 < 1;\n
                if (!Emulator::step(&v2))\n
                    break;\n
                if (*(&v3) == 22)\n
                    break;\n
                if (v13)\n
                    break;\n
            }\n
            v1 = v5;\n
            _ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_();\n
            if (Database::query const(v1, &v4, 0x10000))\n
            {\n
                v5->field_c = 1;\n
                return Emulator::__dtor__();\n
            }\n
            return Emulator::__dtor__();\n
        }\n
        else\n
        {\n
            return Emulator::__dtor__();\n
        }\n
    }\n
}\n
", "4216478:_ZN6Engine12update_rulesEPhj": "int Engine::update_rules(struct struct_0 **v1, char a0[5], unsigned int a1)\n
{\n
    int tmp_2;  // tmp #2\n
    char v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v2;  // esi\n
    char v3[5];  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    char v6;  // dl\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ebp\n
    char *v10;  // ecx\n
    unsigned int v11;  // eax\n
\n
    v2 = a1;\n
    if (v2 < 8)\n
        return 0;\n
    v3 = a0;\n
    v4 = 305419896;\n
    v5 = 4;\n
    do\n
    {\n
        v4 += v3[v5];\n
        v5 += 1;\n
    } while (v2 != v5);\n
    tmp_2 = v4;\n
    v11 = v4 + *(&v3[0]);\n
    if (!tmp_2 + *(&v3[0]))\n
    {\n
        if (*(&v0) >= 5)\n
        {\n
            v9 = 4;\n
            v0 = v2 - 4;\n
            while (true)\n
            {\n
                v6 = v3[v9];\n
                if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, Load(addr=(edi<4> + ebp<4>), size=1, endness=Iend_LE)), 0x1<32>, 0x0<32>)))\n
                    break;\n
                v7 = *(&v3[1 + v9]);\n
                if (!(v7 <= v2))\n
                    break;\n
                v8 = v9 + 5;\n
                v9 = v7 + v8;\n
                if (!(v7 + v8 <= v2))\n
                    break;\n
                v10 = &v3[v8];\n
                if (v6)\n
                    v11 = Database::remove(v1, v10, v7);\n
                else\n
                    v11 = Database::add(v1, v10, v7);\n
                if (v9 >= v0)\n
                    goto LABEL_405730;\n
            }\n
        }\n
LABEL_405730:\n
        *(&v11) = 1;\n
        return v11;\n
    }\n
}\n
", "4216638:_ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char field_c;\n
} struct_0;\n
\n
int _ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_(struct_0 *v2)\n
{\n
    void* v0;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x18]\n
    void* v3;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // edx\n
    void* v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
\n
    v0 = 0;\n
    v1 = v2;\n
    v3 = 0;\n
    do\n
    {\n
        v5 = v4;\n
        *(&v5) = *((v4 + v3 + 12));\n
        if (*(&v5))\n
        {\n
            v7 = 0;\n
            v8 = v0;\n
            while (true)\n
            {\n
                v5 = v5;\n
                if (((*(&v5 + ((v7 & 31) >> 3)) >> (v7 & 31 & 7)) & 1) == 1)\n
                {\n
                    v6 = v1;\n
                    if (Database::query const(v6, v6->field_8 + v8, ((v8 != 0x3ffff000) << 12) + 0x1000))\n
                        v1->field_c = 1;\n
                }\n
                if (v7 == 7)\n
                    break;\n
                v5 = v4;\n
                *(&v5) = *(12 + v4 + v3);\n
                v8 += 0x1000;\n
                v7 += 1;\n
            }\n
        }\n
        v3 += 1;\n
        v0 += 0x8000;\n
    } while (v3 != 0x8000);\n
    return 0x8000;\n
}\n
", "4216801:sub_4057e1": null, "4216802:_ZN6Engine9whitelistEPhj": "int Engine::whitelist(unsigned int v0, char *a0, unsigned int a1)\n
{\n
    return Database::add(v0 + 4, a0, a1);\n
}\n
", "4216847:sub_40580f": null, "4216848:_ZN11Instruction11disassembleEPhj": "typedef struct struct_2 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[2];\n
    struct struct_1 *field_4;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern struct_2 _ZL7parsers;\n
\n
int Instruction::disassemble(unsigned int v5[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    char v1;  // [bp-0x54]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    unsigned int v12[2];  // ebp\n
    char *v13;  // eax\n
    unsigned int v14;  // ecx\n
    struct_2 *v15;  // edx, Other Possible Types: unsigned int\n
    unsigned int v16;  // esi\n
    struct_0 *v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    unsigned int v19[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v20;  // d\n
\n
    v4 = v9;\n
    v3 = v10;\n
    v2 = v11;\n
    v12 = v5;\n
    v13 = a0;\n
    v5[0] = 0;\n
    v5[1] = 0;\n
    v14 = -60;\n
    do\n
    {\n
        *((68 + &v12[0] + v14)) = 0;\n
        v14 += 20;\n
    } while (true);\n
    v15 = &_ZL7parsers.field_0;\n
    v16 = 25;\n
    do\n
    {\n
        if ((*((v15 + 1)) & *(v13)) == *(v15))\n
        {\n
            v17 = &v1;\n
            v0 = a1;\n
            *((v15 + 4))(&v1, v13);\n
            v18 = 17;\n
            v19 = v12;\n
            while (v18)\n
            {\n
                v18 -= 1;\n
                *(v19) = *(v17);\n
                v19 += v20 * 4;\n
                v17 += v20 * 4;\n
                goto LABEL_405880;\n
            }\n
        }\n
        v15 += 8;\n
        v16 -= 1;\n
    } while (true);\n
LABEL_405880:\n
    return v5;\n
}\n
", "4216972:_ZN3$_18__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_1::__invoke(unsigned int v6[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x7c]\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    void* v3;  // [bp-0x64]\n
    char v4;  // [bp-0x50]\n
    char v5;  // [bp-0x24]\n
    unsigned int v7[2];  // ebp\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // d\n
    struct_0 *v12;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v13;  // esi, Other Possible Types: unsigned int\n
    unsigned int v14;  // ecx\n
    struct_0 *v15;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v16;  // esi, Other Possible Types: unsigned int\n
    unsigned int v17;  // ecx\n
    struct_0 *v18;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v20;  // esi, Other Possible Types: unsigned int\n
    unsigned int v21;  // ecx\n
    unsigned int v22[2];  // edi, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v1 = 2;\n
    v2 = 1;\n
    v8 = 8;\n
    do\n
    {\n
        *((&v1 + v8)) = 0;\n
        v8 += 20;\n
    } while (v8 != 68);\n
    v0 = a1;\n
    if (parse_modrm())\n
    {\n
        if ((*(a0) & 2))\n
        {\n
            v10 = 5;\n
            v12 = &v5;\n
            for (v13 = &v3; v10; v13 += v11 * 4)\n
            {\n
                v10 -= 1;\n
                *(v12) = *(v13);\n
                v12 += v11 * 4;\n
            }\n
            v14 = 5;\n
            v15 = &v3;\n
            for (v16 = &v4; v14; v16 += v11 * 4)\n
            {\n
                v14 -= 1;\n
                *(v15) = *(v16);\n
                v15 += v11 * 4;\n
            }\n
            v17 = 5;\n
            v18 = &v4;\n
            for (v19 = &v5; v17; v19 += v11 * 4)\n
            {\n
                v17 -= 1;\n
                *(v18) = *(v19);\n
                v18 += v11 * 4;\n
            }\n
        }\n
        v20 = &v1;\n
        v21 = 17;\n
        for (v22 = v7; v21; v20 += v11 * 4)\n
        {\n
            v21 -= 1;\n
            *(v22) = *(v20);\n
            v22 += v11 * 4;\n
        }\n
        return v6;\n
    }\n
    v7[0] = 0;\n
    v7[1] = 0;\n
    v9 = -60;\n
    while (true)\n
    {\n
        *((68 + &v7[0] + v9)) = 0;\n
        v9 += 20;\n
    }\n
}\n
", "4217170:_ZL11parse_modrmR11InstructionPhj": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    char padding_8[20];\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int parse_modrm(unsigned int v3)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v4;  // ecx\n
    char *v5;  // ebx\n
    char *v6;  // eax\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    unsigned int v12;  // ebx\n
\n
    v5 = v4->field_4;\n
    v6 = v5 + 1;\n
    if (v6 > v3)\n
        return 0;\n
    v1 = v7;\n
    v8 = v5[v7];\n
    v4->field_4 = v6;\n
    v4->field_1c = 1;\n
    v4->field_20 = v8 / 8 & 7;\n
    if (((v8 & 7) == 4 & v8 / 64 != 3) == 1)\n
    {\n
        v12 = v5 + 2;\n
        if (v12 > v3)\n
            return 0;\n
        v0 = 1;\n
        v2 = v6[v1];\n
        v4->field_4 = v12;\n
    }\n
    goto 4237476 + *((4237476 + edi<4> * 4 - 13596));\n
}\n
", "4217312:sub_4059e0": "int sub_4059e0()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v1;  // [bp+0x4]\n
    char v2;  // [bp+0x8]\n
    char v3;  // [bp+0x20]\n
    unsigned int *v4;  // ebx\n
    unsigned int v5;  // eax\n
    unsigned int v6[7];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // esi\n
    char v8;  // dl\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
\n
    if (&v0 != 5)\n
    {\n
        v6[2] = 2;\n
        v6[3] = &v0;\n
        v6[4] = 0;\n
        v6[5] = -1;\n
        v6[6] = 0;\n
    }\n
    else\n
    {\n
        v5 = v4 + 1;\n
        if (!(v5 <= *(&v3)))\n
            goto LABEL_0x405971;\n
        v7 = *((v1 + v4));\n
        *((v6 + 8)) = 2;\n
        *((v6 + 12)) = -1;\n
        *((v6 + 16)) = v7;\n
        *((v6 + 20)) = -1;\n
        *((v6 + 24)) = 0;\n
        *((v6 + 4)) = v5;\n
    }\n
    if (!v8)\n
        goto LABEL_0x405973;\n
    v9 = *(&v2);\n
    v10 = -1;\n
    v10 = v9 / 8 & 7;\n
    *((v6 + 12)) = v9 & 7;\n
    *((v6 + 20)) = v10;\n
    *((v6 + 24)) = v9 / 64;\n
}\n
", "4217370:sub_405a1a": "int sub_405a1a()\n
{\n
    char v0;  // [bp+0x0]\n
    char v1;  // [bp+0x3]\n
    unsigned int v2;  // [bp+0x4]\n
    char v3;  // [bp+0x20]\n
    unsigned int *v4;  // ebx\n
    char v5;  // dl\n
    unsigned int v6;  // esi\n
    unsigned int v7[6];  // ecx\n
\n
    if (!(v4 + 1 <= *(&v3)))\n
        goto LABEL_0x405971;\n
    v1 = v5;\n
    v6 = *((v2 + v4));\n
    v7[2] = 2;\n
    v7[3] = &v0;\n
    v7[4] = v6;\n
    v7[5] = -1;\n
}\n
", "4217396:sub_405a34": "int sub_405a34()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2[4];  // ecx\n
\n
    v2[2] = 1;\n
    v2[3] = &v0;\n
}\n
", "4217408:sub_405a40": "int sub_405a40()\n
{\n
    char v0;  // [bp+0x3]\n
    char v2;  // [bp+0x20]\n
    unsigned int v3;  // ebx\n
    char v4;  // dl\n
\n
    if (!(v3 + 1 <= *(&v2)))\n
        goto LABEL_0x405971;\n
    v0 = v4;\n
}\n
", "4217547:sub_405acb": null, "4217548:_ZN3$_28__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_1;\n
\n
int $_2::__invoke(unsigned int v7[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v6;  // [bp-0x8]\n
    unsigned int v8[2];  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int *v10;  // edx, Other Possible Types: unsigned int\n
\n
    v8 = v7;\n
    if (a1 > 4)\n
    {\n
        v0 = 2;\n
        v1 = 5;\n
        v10 = -60;\n
        while (true)\n
        {\n
            *(&(&v6)[v10]) = 0;\n
            v10 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v8[0] = 0;\n
        v8[1] = 0;\n
        v9 = -60;\n
        while (true)\n
        {\n
            *((68 + &v8[0] + v9)) = 0;\n
            v9 += 20;\n
        }\n
    }\n
}\n
", "4217674:_ZN3$_38__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_3::__invoke(unsigned int v5[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    void* v2;  // [bp-0x64]\n
    char v3;  // [bp-0x50]\n
    char v4;  // [bp-0x24]\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // d\n
    struct_0 *v11;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    struct_0 *v17;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v18;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int v20;  // ecx\n
    unsigned int v21[2];  // edi, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    v0 = 4;\n
    v1 = 1;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (parse_modrm(a1))\n
    {\n
        if ((*(a0) & 2))\n
        {\n
            v9 = 5;\n
            v11 = &v4;\n
            for (v12 = &v2; v9; v12 += v10 * 4)\n
            {\n
                v9 -= 1;\n
                *(v11) = *(v12);\n
                v11 += v10 * 4;\n
            }\n
            v13 = 5;\n
            v14 = &v2;\n
            for (v15 = &v3; v13; v15 += v10 * 4)\n
            {\n
                v13 -= 1;\n
                *(v14) = *(v15);\n
                v14 += v10 * 4;\n
            }\n
            v16 = 5;\n
            v17 = &v3;\n
            for (v18 = &v4; v16; v18 += v10 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v18);\n
                v17 += v10 * 4;\n
            }\n
        }\n
        v19 = &v0;\n
        v20 = 17;\n
        for (v21 = v6; v20; v19 += v10 * 4)\n
        {\n
            v20 -= 1;\n
            *(v21) = *(v19);\n
            v21 += v10 * 4;\n
        }\n
        return v5;\n
    }\n
    v6[0] = 0;\n
    v6[1] = 0;\n
    v8 = -60;\n
    while (true)\n
    {\n
        *((68 + &v6[0] + v8)) = 0;\n
        v8 += 20;\n
    }\n
}\n
", "4217872:_ZN3$_48__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_1;\n
\n
int $_4::__invoke(unsigned int v7[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v6;  // [bp-0x8]\n
    unsigned int v8[2];  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int *v10;  // edx, Other Possible Types: unsigned int\n
\n
    v8 = v7;\n
    if (a1 > 4)\n
    {\n
        v0 = 4;\n
        v1 = 5;\n
        v10 = -60;\n
        while (true)\n
        {\n
            *(&(&v6)[v10]) = 0;\n
            v10 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v8[0] = 0;\n
        v8[1] = 0;\n
        v9 = -60;\n
        while (true)\n
        {\n
            *((68 + &v8[0] + v9)) = 0;\n
            v9 += 20;\n
        }\n
    }\n
}\n
", "4217998:_ZN3$_58__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_5::__invoke(unsigned int v5[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    void* v2;  // [bp-0x64]\n
    char v3;  // [bp-0x50]\n
    char v4;  // [bp-0x24]\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // d\n
    struct_0 *v11;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    struct_0 *v17;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v18;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int v20;  // ecx\n
    unsigned int v21[2];  // edi, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    v0 = 11;\n
    v1 = 1;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (parse_modrm(a1))\n
    {\n
        if ((*(a0) & 2))\n
        {\n
            v9 = 5;\n
            v11 = &v4;\n
            for (v12 = &v2; v9; v12 += v10 * 4)\n
            {\n
                v9 -= 1;\n
                *(v11) = *(v12);\n
                v11 += v10 * 4;\n
            }\n
            v13 = 5;\n
            v14 = &v2;\n
            for (v15 = &v3; v13; v15 += v10 * 4)\n
            {\n
                v13 -= 1;\n
                *(v14) = *(v15);\n
                v14 += v10 * 4;\n
            }\n
            v16 = 5;\n
            v17 = &v3;\n
            for (v18 = &v4; v16; v18 += v10 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v18);\n
                v17 += v10 * 4;\n
            }\n
        }\n
        v19 = &v0;\n
        v20 = 17;\n
        for (v21 = v6; v20; v19 += v10 * 4)\n
        {\n
            v20 -= 1;\n
            *(v21) = *(v19);\n
            v21 += v10 * 4;\n
        }\n
        return v5;\n
    }\n
    v6[0] = 0;\n
    v6[1] = 0;\n
    v8 = -60;\n
    while (true)\n
    {\n
        *((68 + &v6[0] + v8)) = 0;\n
        v8 += 20;\n
    }\n
}\n
", "4218196:_ZN3$_68__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_1;\n
\n
int $_6::__invoke(unsigned int v7[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v6;  // [bp-0x8]\n
    unsigned int v8[2];  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int *v10;  // edx, Other Possible Types: unsigned int\n
\n
    v8 = v7;\n
    if (a1 > 4)\n
    {\n
        v0 = 11;\n
        v1 = 5;\n
        v10 = -60;\n
        while (true)\n
        {\n
            *(&(&v6)[v10]) = 0;\n
            v10 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v8[0] = 0;\n
        v8[1] = 0;\n
        v9 = -60;\n
        while (true)\n
        {\n
            *((68 + &v8[0] + v9)) = 0;\n
            v9 += 20;\n
        }\n
    }\n
}\n
", "4218322:_ZN3$_78__invokeEPhj": "int $_7::__invoke(unsigned int v0[4], char *a0)\n
{\n
    unsigned int v1[4];  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 19;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    v3 = *(a0) & 7;\n
    v1[2] = 1;\n
    v1[3] = v3;\n
    return v0;\n
}\n
", "4218380:_ZN3$_88__invokeEPhj": "int $_8::__invoke(unsigned int v0[4], char *a0)\n
{\n
    unsigned int v1[4];  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 20;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    v3 = *(a0) & 7;\n
    v1[2] = 1;\n
    v1[3] = v3;\n
    return v0;\n
}\n
", "4218438:_ZN3$_98__invokeEPhj": "int $_9::__invoke(unsigned int v0[4], char *a0)\n
{\n
    unsigned int v1[4];  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 13;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    v3 = *(a0) & 7;\n
    v1[2] = 1;\n
    v1[3] = v3;\n
    return v0;\n
}\n
", "4218496:_ZN4$_108__invokeEPhj": "int $_10::__invoke(unsigned int v0[4], char *a0)\n
{\n
    unsigned int v1[4];  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 12;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    v3 = *(a0) & 7;\n
    v1[2] = 1;\n
    v1[3] = v3;\n
    return v0;\n
}\n
", "4218554:_ZN4$_118__invokeEPhj": "int $_11::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 21;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4218592:_ZN4$_128__invokeEPhj": "int $_12::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 22;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4218630:_ZN4$_138__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
int $_13::__invoke(unsigned int v5[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v4;  // [bp-0x8]\n
    unsigned int v6[2];  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (a1 > 1)\n
    {\n
        v0 = 16;\n
        v1 = 2;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4218743:sub_405f77": null, "4218744:_ZN4$_148__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
int $_14::__invoke(unsigned int v5[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v4;  // [bp-0x8]\n
    unsigned int v6[2];  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (a1 > 1)\n
    {\n
        v0 = 17;\n
        v1 = 2;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4218857:sub_405fe9": null, "4218858:_ZN4$_158__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_15::__invoke(unsigned int v5[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int *v1;  // [bp-0x50], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34], Other Possible Types: char\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int *v11;  // ecx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ecx\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // d\n
\n
    v6 = v5;\n
    v7 = a1;\n
    v0 = 0;\n
    v1 = 1;\n
    v8 = 8;\n
    do\n
    {\n
        *((&v0 + v8)) = 0;\n
        v8 += 20;\n
    } while (v8 != 68);\n
    if (parse_modrm(v7))\n
    {\n
        v9 = *(&v4);\n
        switch (v9)\n
        {\n
        case 0:\n
            v0 = 2;\n
            break;\n
        case 1:\n
            v0 = 7;\n
            break;\n
        case 2:\n
            v0 = 3;\n
            break;\n
        case 3:\n
            v0 = 5;\n
            break;\n
        case 4:\n
            v0 = 6;\n
            break;\n
        case 5:\n
            v0 = 4;\n
            break;\n
        case 6:\n
            v0 = 8;\n
            break;\n
        case 7:\n
            v0 = 11;\n
            break;\n
        }\n
        v11 = v1;\n
        if (v1 > v7)\n
        {\n
            v6[0] = 0;\n
            v6[1] = 0;\n
            v13 = -60;\n
            while (true)\n
            {\n
                *((68 + &v6[0] + v13)) = 0;\n
                v13 += 20;\n
            }\n
        }\n
        else\n
        {\n
            v14 = *((a0 + v11));\n
            v15 = &v0;\n
            v3 = 3;\n
            v4 = v14;\n
            v1 = v11 + 1;\n
            v16 = 17;\n
            for (v17 = v6; v16; v15 += v18 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v15);\n
                v17 += v18 * 4;\n
            }\n
            return v5;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v10 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v10)) = 0;\n
            v10 += 20;\n
        }\n
    }\n
}\n
", "4219151:sub_40610f": null, "4219152:_ZN4$_168__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_16::__invoke(unsigned int v5[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    char *v1;  // [bp-0x50], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    char v4;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    char *v11;  // ecx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ecx\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // d\n
\n
    v6 = v5;\n
    v7 = a1;\n
    v0 = 0;\n
    v1 = 1;\n
    v8 = 8;\n
    do\n
    {\n
        *((&v0 + v8)) = 0;\n
        v8 += 20;\n
    } while (v8 != 68);\n
    if (parse_modrm(v7))\n
    {\n
        v9 = *(&v4);\n
        switch (v9)\n
        {\n
        case 0:\n
            v0 = 2;\n
            break;\n
        case 1:\n
            v0 = 7;\n
            break;\n
        case 2:\n
            v0 = 3;\n
            break;\n
        case 3:\n
            v0 = 5;\n
            break;\n
        case 4:\n
            v0 = 6;\n
            break;\n
        case 5:\n
            v0 = 4;\n
            break;\n
        case 6:\n
            v0 = 8;\n
            break;\n
        case 7:\n
            v0 = 11;\n
            break;\n
        }\n
        v11 = v1;\n
        if (v1 > v7)\n
        {\n
            v6[0] = 0;\n
            v6[1] = 0;\n
            v13 = -60;\n
            while (true)\n
            {\n
                *((68 + &v6[0] + v13)) = 0;\n
                v13 += 20;\n
            }\n
        }\n
        else\n
        {\n
            v14 = v11[a0];\n
            v15 = &v0;\n
            v3 = 3;\n
            v4 = v14;\n
            v1 = v11 + 1;\n
            v16 = 17;\n
            for (v17 = v6; v16; v15 += v18 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v15);\n
                v17 += v18 * 4;\n
            }\n
            return v5;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v10 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v10)) = 0;\n
            v10 += 20;\n
        }\n
    }\n
}\n
", "4219446:_ZN4$_178__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_17::__invoke(unsigned int v5[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    void* v2;  // [bp-0x64]\n
    char v3;  // [bp-0x50]\n
    char v4;  // [bp-0x24]\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // d\n
    struct_0 *v11;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    struct_0 *v17;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v18;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int v20;  // ecx\n
    unsigned int v21[2];  // edi, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    v0 = 9;\n
    v1 = 1;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (parse_modrm(a1))\n
    {\n
        if ((*(a0) & 2))\n
        {\n
            v9 = 5;\n
            v11 = &v4;\n
            for (v12 = &v2; v9; v12 += v10 * 4)\n
            {\n
                v9 -= 1;\n
                *(v11) = *(v12);\n
                v11 += v10 * 4;\n
            }\n
            v13 = 5;\n
            v14 = &v2;\n
            for (v15 = &v3; v13; v15 += v10 * 4)\n
            {\n
                v13 -= 1;\n
                *(v14) = *(v15);\n
                v14 += v10 * 4;\n
            }\n
            v16 = 5;\n
            v17 = &v3;\n
            for (v18 = &v4; v16; v18 += v10 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v18);\n
                v17 += v10 * 4;\n
            }\n
        }\n
        v19 = &v0;\n
        v20 = 17;\n
        for (v21 = v6; v20; v19 += v10 * 4)\n
        {\n
            v20 -= 1;\n
            *(v21) = *(v19);\n
            v21 += v10 * 4;\n
        }\n
        return v5;\n
    }\n
    v6[0] = 0;\n
    v6[1] = 0;\n
    v8 = -60;\n
    while (true)\n
    {\n
        *((68 + &v6[0] + v8)) = 0;\n
        v8 += 20;\n
    }\n
}\n
", "4219644:_ZN4$_188__invokeEPhj": "int $_18::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 1;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4219677:sub_40631d": null, "4219678:_ZN4$_198__invokeEPhj": "int $_19::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 23;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4219716:_ZN4$_208__invokeEPhj": "int $_20::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 24;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4219754:_ZN4$_218__invokeEPhj": "int $_21::__invoke(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = v0;\n
    v1[0] = 14;\n
    v1[1] = 1;\n
    v2 = -60;\n
    do\n
    {\n
        *((68 + &v1[0] + v2)) = 0;\n
        v2 += 20;\n
    } while (true);\n
    return v0;\n
}\n
", "4219792:_ZN4$_228__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int $_22::__invoke(unsigned int v5[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int *v1;  // [bp-0x50], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34], Other Possible Types: char\n
    unsigned int v6[2];  // ebp\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int *v9;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ecx\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // d\n
\n
    v6 = v5;\n
    v7 = a1;\n
    v0 = 9;\n
    v1 = 1;\n
    v8 = 8;\n
    do\n
    {\n
        *((&v0 + v8)) = 0;\n
        v8 += 20;\n
    } while (v8 != 68);\n
    if (!parse_modrm(v7))\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v11 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v11)) = 0;\n
            v11 += 20;\n
        }\n
    }\n
    else if (!*(&v4))\n
    {\n
        v9 = v1;\n
        if (v1 > v7)\n
        {\n
            v6[0] = 0;\n
            v6[1] = 0;\n
            v13 = -60;\n
            while (true)\n
            {\n
                *((68 + &v6[0] + v13)) = 0;\n
                v13 += 20;\n
            }\n
        }\n
        else\n
        {\n
            v14 = *((a0 + v9));\n
            v15 = &v0;\n
            v3 = 3;\n
            v4 = v14;\n
            v1 = v9 + 1;\n
            v16 = 17;\n
            for (v17 = v6; v16; v15 += v18 * 4)\n
            {\n
                v16 -= 1;\n
                *(v17) = *(v15);\n
                v17 += v18 * 4;\n
            }\n
            return v5;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v12 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v12)) = 0;\n
            v12 += 20;\n
        }\n
    }\n
}\n
", "4220021:sub_406475": null, "4220022:_ZN4$_238__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_1;\n
\n
int $_23::__invoke(unsigned int v5[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v4;  // [bp-0x8]\n
    unsigned int v6[2];  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (a1 > 4)\n
    {\n
        v0 = 18;\n
        v1 = 5;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4220134:_ZN4$_248__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_1;\n
\n
int $_24::__invoke(unsigned int v5[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v4;  // [bp-0x8]\n
    unsigned int v6[2];  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (a1 > 4)\n
    {\n
        v0 = 15;\n
        v1 = 5;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4220246:_ZN4$_258__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
int $_25::__invoke(unsigned int v5[2], struct_1 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v4;  // [bp-0x8]\n
    unsigned int v6[2];  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    if (a1 > 1)\n
    {\n
        v0 = 15;\n
        v1 = 2;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        v6[0] = 0;\n
        v6[1] = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + &v6[0] + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4220359:sub_4065c7": null, "4220360:_ZN9InterfaceC2ER6Engine": "int Interface::__base_ctor__(unsigned int *v0, unsigned int a0)\n
{\n
    *(v0) = a0;\n
    return a0;\n
}\n
", "4220371:sub_4065d3": null, "4220372:_ZN9InterfaceD1Ev": "int Interface::__dtor__()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4220373:sub_4065d5": null, "4220374:_ZN9Interface7processEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdout;\n
\n
int Interface::process(unsigned int *v1, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax, Other Possible Types: char\n
    unsigned int v3;  // ecx\n
    unsigned int *v4;  // edx\n
    void* *v5;  // eax\n
    unsigned int v6;  // esi\n
    char *v7;  // edx\n
    unsigned int v8;  // ecx\n
    struct_0 *v9;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v2 = 1;\n
    if (v3 < 4)\n
        return v2;\n
    v4 = a0;\n
    v5 = v1;\n
    v6 = *(v4);\n
    v7 = v4 + 1;\n
    v8 = v3 - 4;\n
    if (v6 > 914075212)\n
    {\n
        if (v6 != 914075213)\n
        {\n
            if (v6 == 1902178598)\n
            {\n
                v0 = 1875200410;\n
                cgc_fwrite(&v0, 4, cgc_stdout);\n
                return 0;\n
            }\n
        }\n
        else\n
        {\n
            if (!Engine::process(*(v5), v7, v8))\n
                goto LABEL_406691;\n
        }\n
    }\n
    else\n
    {\n
        if (v6 == 262473119)\n
        {\n
            Engine::whitelist(*(v5), v7, v8);\n
LABEL_406691:\n
            v9 = &v0;\n
            v0 = 1875200410;\n
LABEL_406699:\n
            v2 = cgc_fwrite(v9, 4, cgc_stdout);\n
            *(&v2) = v2 == 4;\n
            return v2;\n
        }\n
        else if (v6 == 816306970 && !(!Engine::update_rules(*(v5), v7, v8)))\n
        {\n
            goto LABEL_406691;\n
        }\n
    }\n
    v9 = &v0;\n
    v0 = 1107835781;\n
    goto LABEL_406699;\n
}\n
", "4220603:sub_4066bb": null, "4220604:_ZN9Interface13send_responseEj": "extern void* cgc_stdout;\n
\n
int Interface::send_response()\n
{\n
    char v1;  // [bp+0x8]\n
    unsigned int v2;  // eax\n
\n
    v2 = cgc_fwrite(&v1, 4, cgc_stdout);\n
    *(&v2) = v2 == 4;\n
    return v2;\n
}\n
", "4220657:sub_4066f1": null, "4220660:main": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
extern unsigned int cgc_stderr;\n
extern void* cgc_stdin;\n
\n
int main()\n
{\n
    char v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb4]\n
    struct_0 *v2;  // [bp-0xac]\n
    void* v3;  // [bp-0x9c], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x98]\n
    unsigned int v5;  // [bp-0x97]\n
    char v6;  // [bp-0x93]\n
    struct_0 *v8;  // esi, Other Possible Types: unsigned int\n
    void* v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
\n
    v8 = &v2;\n
    Engine::__base_ctor__(&v2);\n
    Interface::__base_ctor__(&v1, &v2);\n
    v3 = 0;\n
    v4 = 0;\n
    v5 = 128;\n
    cgc_memcpy(&v6, 0x4347c000, 128);\n
    v9 = 0;\n
    v10 = 4;\n
    do\n
    {\n
        v9 -= *(&v3 + v10);\n
        v10 += 1;\n
    } while (v10 != 137);\n
    v3 = v9 - 305419896;\n
    if (!Engine::update_rules(&v2, &v3, 137))\n
    {\n
        cgc_fprintf(cgc_stderr, \"failed to add secret rule\\n
\");\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        while (cgc_fread(&v0, 4, cgc_stdin) == 4)\n
        {\n
            if (*(&v0) > 0x40000000)\n
                break;\n
            cgc_free(v13);\n
            v11 = cgc_malloc(*(&v0));\n
            if (!v11)\n
            {\n
                v13 = 0;\n
                break;\n
            }\n
            else\n
            {\n
                v13 = v11;\n
                v12 = cgc_fread(v11, *(&v0), cgc_stdin);\n
                if (v12 != *(&v0))\n
                    break;\n
                if (!Interface::process(&v1, v13, v12))\n
                    break;\n
            }\n
        }\n
        cgc_free(v13);\n
        v8 = &v2;\n
    }\n
    Interface::__dtor__();\n
    Engine::__base_dtor__(v8);\n
    return 0;\n
}\n
", "4221016:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:__libc_start_main": null, "5242888:cgc_receive": null, "5242892:cgc_allocate": null, "5242896:cgc__terminate": null, "5242900:_ZdlPv": null, "5242904:cgc_deallocate": null, "5242908:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}