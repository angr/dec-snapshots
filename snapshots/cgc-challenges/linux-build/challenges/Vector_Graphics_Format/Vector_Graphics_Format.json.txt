{"4198400:_init": "extern struct_0 *g_40699c;\n
\n
int _init()\n
{\n
    if (g_40699c)\n
    {\n
        g_40699c();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198550:sub_401096": null, "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198603:sub_4010cb": null, "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198612:sub_4010d4": null, "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 22723;\n
    v6 = v5 + 10;\n
    v7 = v5 + 10;\n
    if (v7 == v6)\n
        return v5 + 10;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
", "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 22659;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 10;\n
    v9 = (v6 + 10 - (v6 + 10) >> 31) + (10 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_406998;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_406998)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198861:sub_4011cd": null, "4198864:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4198956:sub_40122c": null, "4198960:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[44];\n
    struct struct_1 *field_2c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_2c->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_2c == v9)\n
        {\n
            v1->field_2c = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_2c == v9)\n
    {\n
        v1->field_2c = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4199643:sub_4014db": null, "4199648:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned int field_2c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_2c;\n
    v7->field_2c = v3;\n
    return v3;\n
}\n
", "4199848:sub_4015a8": null, "4199856:cgc_free": "typedef struct struct_0 {\n
    char padding_0[44];\n
    struct struct_1 *field_2c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: unsigned int, struct_0 *, struct struct_1 *[2], struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_2c != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_2c = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_2c;\n
    v2[1] = 0;\n
    if (v9->field_2c)\n
    {\n
        v12 = v1;\n
        *((&v12->field_2c->field_0 + (v12->field_2c->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_2c = v7;\n
    return v1;\n
}\n
", "4200320:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4200412:sub_4017dc": null, "4200416:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v12, struct struct_1 **a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    char *v2;  // [bp-0x68]\n
    char *v3;  // [bp-0x64], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x5c]\n
    char *v6;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x38], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x34]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
    struct struct_1 **v13;  // eax\n
    struct struct_1 **v14;  // eax\n
    struct struct_1 **v15;  // eax\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    struct_0 *v19;  // eax\n
    unsigned int v20;  // eax\n
    char *v21;  // eax\n
    struct_0 *v22;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    if (!v12)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        if (!*(v12))\n
        {\n
            v11 = v10;\n
            return v11;\n
        }\n
        if (*(v12) == 36)\n
            break;\n
        cgc_putc(*(v12));\n
        v12 += 1;\n
        v10 += 1;\n
LABEL_401b4d:\n
    }\n
    v12 += 1;\n
    v0 = *(v12);\n
    if (!v0)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    if (v0 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_401b1c;\n
    }\n
    if (v0 != 88)\n
    {\n
        if (v0 == 100)\n
        {\n
            v13 = a0;\n
            a0 = v13 + 1;\n
            v6 = &*(v13)->field_0;\n
            v7 = 0;\n
            if (v6 < 0)\n
            {\n
                v6 = -(v6);\n
                cgc_putc(45);\n
                v10 += 1;\n
            }\n
            else\n
            {\n
                if (!v6)\n
                {\n
                    v7 = 1;\n
                    v8 = 48;\n
                }\n
            }\n
            while (v6)\n
            {\n
                v20 = v7;\n
                v7 = v20 + 1;\n
                (&v8)[v20] = ((v6 >> 31 CONCAT v6) /m 10 >> 32) + 48;\n
                v21 = v6;\n
                v6 = (v21 >> 31 CONCAT v21) /m 10;\n
                if (v7 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v22 = v7;\n
                v7 = v22 + 1;\n
                if (v22 <= 0)\n
                    break;\n
                cgc_putc((&v8)[v7]);\n
                v10 += 1;\n
            }\n
            goto LABEL_401b1c;\n
        }\n
        else if (v0 == 115)\n
        {\n
            v14 = a0;\n
            a0 = v14 + 1;\n
            v9 = &*(v14)->field_0;\n
            while (*(v9))\n
            {\n
                cgc_putc(*(v9));\n
                v10 += 1;\n
                v9 += 1;\n
                if (!v9)\n
                    break;\n
            }\n
            goto LABEL_401b1c;\n
        }\n
        else if (v0 != 120)\n
        {\n
            v11 = -1;\n
            return v11;\n
        }\n
    }\n
    v15 = a0;\n
    a0 = v15 + 1;\n
    v3 = &*(v15)->field_0;\n
    v4 = 0;\n
    while (v3)\n
    {\n
        v2 = v3 & 15;\n
        v3 >>= 4;\n
        if (v2 < 10)\n
        {\n
            v16 = v4;\n
            v4 = v16 + 1;\n
            *((&v5 + v16)) = v2 + 48;\n
        }\n
        else if (*(v12) == 120)\n
        {\n
            v17 = v4;\n
            v4 = v17 + 1;\n
            (&v5)[v17] = v2 + 87;\n
        }\n
        else\n
        {\n
            v18 = v4;\n
            v4 = v18 + 1;\n
            (&v5)[v18] = v2 + 55;\n
        }\n
        if (v4 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v19 = v4;\n
        v4 = v19 + 1;\n
        if (v19 <= 0)\n
            break;\n
        cgc_putc((&v5)[v4]);\n
        v10 += 1;\n
    }\n
LABEL_401b1c:\n
    v12 += 1;\n
    goto LABEL_401b4d;\n
}\n
", "4201313:sub_401b61": null, "4201328:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4201386:sub_401baa": null, "4201392:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4201486:sub_401c0e": null, "4201488:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201542:sub_401c46": null, "4201552:cgc_isnan": null, "4201575:sub_401c67": null, "4201584:cgc_isinf": null, "4201631:sub_401c9f": null, "4201632:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4201690:sub_401cda": null, "4201696:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4201754:sub_401d1a": null, "4201760:cgc_strcmp": "int cgc_strcmp(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!*((v2 + v0)) && !*((a0 + v0)))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!*((v2 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (!*((a0 + v0)))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) < *((a0 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) <= *((a0 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4201998:sub_401e0e": null, "4202000:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4202091:sub_401e6b": null, "4202096:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!*((a0 + v0)))\n
            break;\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4202202:sub_401eda": null, "4202208:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a1; v0 += 4)\n
        {\n
            *((v1 + v0)) = *((a0 + v0));\n
        }\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v1;\n
}\n
", "4202352:cgc_memset": "int cgc_memset(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = a0;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; v2 + 3 < a1; v2 += 4)\n
        {\n
            *(&v2[v3]) = v0;\n
        }\n
    }\n
    for (; v2 < a1; v2 += 1)\n
    {\n
        v2[v3] = v1;\n
    }\n
    return v3;\n
}\n
", "4202521:sub_402019": null, "4202528:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4202932:sub_4021b4": null, "4202944:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4202999:sub_4021f7": null, "4203008:cgc_abs": "int cgc_abs(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 0)\n
    {\n
        v0 = -(v1);\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_setup_io": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentReadFD;\n
extern unsigned int g_currentWriteFD;\n
\n
int cgc_setup_io(unsigned int v0, unsigned int a0)\n
{\n
    g_currentReadFD = v0;\n
    g_currentWriteFD = a0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4203097:sub_402259": null, "4203104:cgc_read_u8": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentReadFD;\n
\n
int cgc_read_u8()\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0xd]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    v0 = &v2;\n
    v4 = cgc_receive(g_currentReadFD, &v3, 1);\n
    if (v4)\n
    {\n
        cgc__terminate();\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4203206:sub_4022c6": null, "4203216:cgc_read_u16": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentReadFD;\n
\n
int cgc_read_u16()\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0xe]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    v0 = &v2;\n
    v4 = cgc_receive(g_currentReadFD, &v3, 2);\n
    if (v4)\n
    {\n
        cgc__terminate();\n
        return *(&v3);\n
    }\n
    return *(&v3);\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_read_u32": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentReadFD;\n
\n
int cgc_read_u32()\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    v0 = &v2;\n
    v4 = cgc_receive(g_currentReadFD, &v3, 4);\n
    if (v4)\n
    {\n
        cgc__terminate();\n
        return *(&v3);\n
    }\n
    return *(&v3);\n
}\n
", "4203429:sub_4023a5": null, "4203440:cgc_write_u8": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentWriteFD;\n
\n
int cgc_write_u8(char v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    v0 = &v2;\n
    v7 = cgc_transmit(g_currentWriteFD, &v5, 1);\n
    v3 = v7;\n
    if (v7)\n
    {\n
        v7 = cgc__terminate();\n
        return v7;\n
    }\n
    return v7;\n
}\n
", "4203541:sub_402415": null, "4203552:cgc_write_u16": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentWriteFD;\n
\n
int cgc_write_u16(unsigned short v4)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 0;\n
    v6 = cgc_transmit(g_currentWriteFD, &v4, 2);\n
    v2 = v6;\n
    if (v6)\n
    {\n
        v6 = cgc__terminate();\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4203650:sub_402482": null, "4203664:cgc_write_u32": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_currentWriteFD;\n
\n
int cgc_write_u32(unsigned int v4)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 0;\n
    v6 = cgc_transmit(g_currentWriteFD, &v4, 4);\n
    v2 = v6;\n
    if (v6)\n
    {\n
        v6 = cgc__terminate();\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4203761:sub_4024f1": null, "4203776:cgc_pm_write_u32": "int cgc_pm_write_u32(unsigned int *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int *v1;  // eax\n
\n
    *((v0 + *(a0))) = a1;\n
    v1 = a0;\n
    *(v1) = *(v1) + 4;\n
    return 4;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_pm_write_u16": "int cgc_pm_write_u16(unsigned short *v0, unsigned int *a0, unsigned short a1)\n
{\n
    unsigned int *v1;  // eax\n
\n
    *((v0 + *(a0))) = a1;\n
    v1 = a0;\n
    *(v1) = *(v1) + 2;\n
    return 2;\n
}\n
", "4203870:sub_40255e": null, "4203872:cgc_pm_write_u8": "int cgc_pm_write_u8(char *v0, unsigned int *a0, char a1)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v0[*(a0)] = a1;\n
    v1 = a0;\n
    *(v1) = *(v1) + 1;\n
    return 1;\n
}\n
", "4203915:sub_40258b": null, "4203920:cgc_pixelmap_write_file": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pixelmap_write_file(struct struct_0 **v29, unsigned int *a0, char *a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    char v2;  // [bp-0x67]\n
    char v3;  // [bp-0x66]\n
    char v4;  // [bp-0x65]\n
    void* v5;  // [bp-0x64], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x60], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x5c]\n
    unsigned int v8;  // [bp-0x58]\n
    unsigned int v9;  // [bp-0x54]\n
    unsigned int v10;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x4c]\n
    unsigned short v12;  // [bp-0x48]\n
    unsigned short v13;  // [bp-0x46]\n
    void* v14;  // [bp-0x44]\n
    unsigned int v15;  // [bp-0x40]\n
    unsigned int v16;  // [bp-0x3c]\n
    unsigned int v17;  // [bp-0x38]\n
    void* v18;  // [bp-0x34]\n
    void* v19;  // [bp-0x30]\n
    unsigned short v20;  // [bp-0x2c]\n
    unsigned int v21;  // [bp-0x2a]\n
    unsigned short v22;  // [bp-0x26]\n
    unsigned short v23;  // [bp-0x24]\n
    unsigned int v24;  // [bp-0x22]\n
    void* v25;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v26;  // [bp-0x14]\n
    unsigned int v27;  // [bp-0x10]\n
    char *v28;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v30;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a2 && a3)\n
    {\n
        if (a1)\n
        {\n
            v24 = 54;\n
            v20 = 19792;\n
            v22 = 0;\n
            v23 = 0;\n
            v8 = a2 * 3;\n
            if ((v8 & 3))\n
                v8 = (v8 & -0x4) + 4;\n
            v27 = a3 * v8;\n
            v21 = v27 + 54;\n
            if ((v21 & 3))\n
                v21 = (v21 & -0x4) + 4;\n
            v11 = a3;\n
            v10 = a2;\n
            v9 = 40;\n
            v13 = 24;\n
            v14 = 0;\n
            v12 = 1;\n
            v18 = 0;\n
            v19 = 0;\n
            v16 = 2835;\n
            v17 = 2835;\n
            v15 = v27;\n
            *(v29) = cgc_malloc(v21);\n
            *(a0) = v21;\n
            v7 = &*(v29)->field_0;\n
            v6 = 0;\n
            cgc_memcpy(v7 + v6, &v20, 14);\n
            v6 += 14;\n
            cgc_memcpy(v7 + v6, &v9, 40);\n
            v6 += 40;\n
            for (v26 = a3; v26 > 0; v26 -= 1)\n
            {\n
                v5 = 0;\n
                for (v25 = 0; v25 < a2; v25 += 1)\n
                {\n
                    v1 = a2 * 3 * (v26 - 1);\n
                    v4 = a1[2 + 3 * v25 + v1];\n
                    v3 = a1[1 + 3 * v25 + v1];\n
                    v2 = a1[3 * v25 + v1];\n
                    cgc_pm_write_u8(v7, &v6, v4);\n
                    cgc_pm_write_u8(v7, &v6, v3);\n
                    cgc_pm_write_u8(v7, &v6, v2);\n
                    v5 += 3;\n
                }\n
                for (; (v5 & 3); v5 += 1)\n
                {\n
                    v30 = v6;\n
                    v6 = v30 + 1;\n
                    v7[v30] = 0;\n
                }\n
            }\n
            v28 = v6;\n
            return v28;\n
        }\n
        else\n
        {\n
            v28 = -1;\n
            return v28;\n
        }\n
    }\n
    v28 = -1;\n
    return v28;\n
}\n
", "4204627:sub_402853": null, "4204640:cgc_pixelmap_get_size": "int cgc_pixelmap_get_size(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v1 = 54;\n
    v0 = v2 * 3;\n
    if ((v0 >> 31 CONCAT v0) /m 4 >> 32)\n
        v0 = (v0 & -0x4) + 4;\n
    v1 += a0 * v0;\n
    return v1;\n
}\n
", "4204721:sub_4028b1": null, "4204736:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v16, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x3c]\n
    char *v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    char *v10;  // [bp-0x24], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x20]\n
    unsigned short v12;  // [bp-0x1a]\n
    char v13;  // [bp-0x18]\n
    void* v14;  // [bp-0x14]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
\n
    v15 = v17;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    cgc_setup_io(0, 1);\n
    v12 = cgc_read_u16();\n
    if (v12 > 20000)\n
        cgc__terminate();\n
    v11 = cgc_malloc(20000);\n
    v10 = 0;\n
    for (v10 = 0; v10 < v12; v10 += 1)\n
    {\n
        v11[v10] = cgc_read_u8();\n
    }\n
    if (v10 != v12)\n
        cgc__terminate();\n
    if (cgc_vgf_parse_data(v11, v12))\n
        cgc__terminate();\n
    cgc_free(v11);\n
    v9 = cgc_vgf_get_render_size();\n
    if (v9 <= 0)\n
        cgc__terminate();\n
    v7 = v9;\n
    v8 = cgc_malloc(v7);\n
    if (cgc_vgf_render_file(*(&v13), v8))\n
        cgc__terminate();\n
    v0 = v8;\n
    v1 = cgc_vgf_get_width();\n
    if (cgc_pixelmap_write_file(&v5, &v6, v0, v1, cgc_vgf_get_height()) <= 0)\n
        cgc__terminate();\n
    cgc_free(v8);\n
    v4 = v6;\n
    for (v3 = 0; v3 < v4; v3 += 1)\n
    {\n
        cgc_write_u8(v5[v3]);\n
    }\n
    cgc_free(v5);\n
    cgc_vgf_destroy_file();\n
    return 0;\n
}\n
", "4205348:sub_402b24": null, "4205360:cgc_vgf_get_width": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned short field_8;\n
} struct_0;\n
\n
int cgc_vgf_get_width(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned short v1;  // [bp-0x6]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2->field_8;\n
    return v1;\n
}\n
", "4205408:cgc_vgf_get_height": "typedef struct struct_0 {\n
    char padding_0[6];\n
    unsigned short field_6;\n
} struct_0;\n
\n
int cgc_vgf_get_height(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned short v1;  // [bp-0x6]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2->field_6;\n
    return v1;\n
}\n
", "4205456:cgc_vgf_parse_data": "typedef struct struct_2 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char field_10;\n
    char padding_11[3];\n
    unsigned int field_14;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    char field_a;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned short field_8;\n
    char padding_a[2];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_parse_data(struct_0 *v12, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_1 *v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    char v4;  // [bp-0x29]\n
    struct_1 *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    struct_2 *v6;  // [bp-0x24]\n
    struct_0 *v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    struct_0 *v9;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x10]\n
    struct_1 *v13;  // eax\n
    struct_0 *v14;  // ecx\n
    unsigned int v15;  // edx\n
    struct_1 *v16;  // eax\n
    struct_0 *v17;  // ecx\n
    unsigned int v18;  // edx\n
    struct_1 *v19;  // eax\n
    struct_0 *v20;  // ecx\n
    unsigned int v21;  // edx\n
    struct_1 *v22;  // eax\n
    struct_0 *v23;  // ecx\n
    unsigned int v24;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = -1;\n
    v6 = 0;\n
    *(a1) = 0;\n
    v9 = 0;\n
    v7 = v12;\n
    if (v9 + 1 > a0)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    else if (*(&v7->field_0) != 2016610569)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    else if (v7->field_4 == 1)\n
    {\n
        if (v7->field_6 <= 0x200 && v7->field_8 <= 0x200)\n
        {\n
            if (v7->field_a <= 6)\n
            {\n
                v9 += 1;\n
                v6 = cgc_malloc(24);\n
                v6->field_c = 0;\n
                v6->field_10 = 0;\n
                v6->field_14 = 0;\n
                cgc_memcpy(v6, v7, 11);\n
                v5 = 0;\n
                do\n
                {\n
                    v4 = 0;\n
                    v3 = &(&v12->field_0)[v9];\n
                    if (v9 + 4 > a0)\n
                    {\n
                        v8 = -1;\n
                        goto LABEL_402fb8;\n
                    }\n
                    v9 += 4;\n
                    v2 = cgc_malloc(20);\n
                    v2->field_10 = 0;\n
                    if (v5)\n
                        v5->field_10 = v2;\n
                    else\n
                        v6->field_c = v2;\n
                    v5 = v2;\n
                    v2->field_0 = *(&v3);\n
                    v0 = *(v3);\n
                    if (!v0)\n
                    {\n
                        if (v9 + 8 <= a0)\n
                        {\n
                            v13 = v2;\n
                            v14 = v12;\n
                            v15 = v9;\n
                            v13->field_4 = *(&(&v14->field_0)[v15]);\n
                            *(&v13->field_8) = *(&(&v14->field_0)[v15 + 4]);\n
                            v9 += 8;\n
                        }\n
                        else\n
                        {\n
                            v8 = -1;\n
                            goto LABEL_402fb8;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v0 == 1)\n
                        {\n
                            if (v9 + 12 <= a0)\n
                            {\n
                                v16 = v2;\n
                                v17 = v12;\n
                                v18 = v9;\n
                                v16->field_4 = *(&(&v17->field_0)[v18]);\n
                                *(&v16->field_8) = *(&(&v17->field_0)[v18 + 4]);\n
                                v16->field_c = *(&(&v17->field_0)[v18 + 8]);\n
                                v9 += 12;\n
                            }\n
                            else\n
                            {\n
                                v8 = -1;\n
                                goto LABEL_402fb8;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (v0 == 2)\n
                            {\n
                                if (v9 + 8 <= a0)\n
                                {\n
                                    v19 = v2;\n
                                    v20 = v12;\n
                                    v21 = v9;\n
                                    v19->field_4 = *(&(&v20->field_0)[v21]);\n
                                    *(&v19->field_8) = *(&(&v20->field_0)[v21 + 4]);\n
                                    v9 += 8;\n
                                }\n
                                else\n
                                {\n
                                    v8 = -1;\n
                                    goto LABEL_402fb8;\n
                                }\n
                            }\n
                            else\n
                            {\n
                                if (v0 == 3)\n
                                {\n
                                    if (v9 + 6 <= a0)\n
                                    {\n
                                        v22 = v2;\n
                                        v23 = v12;\n
                                        v24 = v9;\n
                                        v22->field_4 = *(&(&v23->field_0)[v24]);\n
                                        v22->field_8 = *(&(&v23->field_0)[v24 + 4]);\n
                                        v9 += 6;\n
                                    }\n
                                    else\n
                                    {\n
                                        v8 = -1;\n
                                        goto LABEL_402fb8;\n
                                    }\n
                                }\n
                                else\n
                                {\n
                                    if (v0 == 100)\n
                                    {\n
                                        v4 = 1;\n
                                    }\n
                                    else\n
                                    {\n
                                        v8 = -1;\n
                                        goto LABEL_402fb8;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                } while (!v4);\n
                if (v9 + 1 > a0)\n
                {\n
                    v8 = -1;\n
                }\n
                else\n
                {\n
                    v6->field_10 = (&v12->field_0)[v9];\n
                    v9 += 1;\n
                    if (v6->field_10 > 0)\n
                    {\n
                        v6->field_14 = cgc_malloc(v6->field_10 * 3);\n
                        v10 = 0;\n
                        while (v10 < v6->field_10)\n
                        {\n
                            if (&v9->padding_1[2] > a0)\n
                            {\n
                                v8 = -1;\n
                                goto LABEL_402fb8;\n
                            }\n
                            else\n
                            {\n
                                cgc_memcpy(v6->field_14 + v10 * 3, v12 + v9, 3);\n
                                v9 = &v9->padding_1[2];\n
                                v10 += 1;\n
                            }\n
                        }\n
                    }\n
                    v8 = 0;\n
                }\n
LABEL_402fb8:\n
                if (v6 && v8)\n
                    cgc_vgf_destroy_file();\n
                if (!v8)\n
                    *(a1) = v6;\n
                v11 = v8;\n
                return v11;\n
            }\n
            else\n
            {\n
                v11 = -1;\n
                return v11;\n
            }\n
        }\n
        v11 = -1;\n
        return v11;\n
    }\n
    else\n
    {\n
        v11 = -2;\n
        return v11;\n
    }\n
}\n
", "4206588:sub_402ffc": null, "4206592:cgc_vgf_destroy_file": "typedef struct struct_1 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
    char padding_10[4];\n
    unsigned int field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_destroy_file(struct_1 *v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    if (v3->field_c)\n
    {\n
        for (v2 = v3->field_c; v2; v2 = v1)\n
        {\n
            v1 = v2->field_10;\n
            cgc_free(v2);\n
        }\n
    }\n
    if (!v3->field_14)\n
        return cgc_free(v3);\n
    cgc_free(v3->field_14);\n
}\n
", "4206753:sub_4030a1": null, "4206768:cgc_vgf_get_render_size": "int cgc_vgf_get_render_size(unsigned short v3[5])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    if (!v3)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = v3[3] * v3[4];\n
    v0 = v1 * 3;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4206840:sub_4030f8": null, "4206848:cgc_vgf_render_file": "typedef struct struct_1 {\n
    char padding_0[6];\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[1];\n
    struct struct_0 *field_c;\n
    char field_10;\n
    char padding_11[3];\n
    unsigned int field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_render_file(struct_1 *v18, char *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x54]\n
    unsigned int v3;  // [bp-0x50]\n
    unsigned short v4;  // [bp-0x4c]\n
    char v5;  // [bp-0x4a]\n
    char v6;  // [bp-0x49]\n
    struct_0 *v7;  // [bp-0x48], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x41]\n
    unsigned short *v9;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x3c]\n
    char v11;  // [bp-0x22]\n
    char v12;  // [bp-0x21]\n
    unsigned short v13;  // [bp-0x20]\n
    unsigned short v14;  // [bp-0x1e]\n
    unsigned short *v15;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v16;  // [bp-0x18]\n
    unsigned int v17;  // [bp-0x14]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v8 = 0;\n
    if (v18 && a0 && a1)\n
    {\n
        v14 = v18->field_8;\n
        v13 = v18->field_6;\n
        v16 = v13 * v14;\n
        v12 = v18->field_a;\n
        for (v11 = 0; v11 < v12; v11 += 1)\n
        {\n
            (&v10)[v11] = cgc_malloc(v16 * 2);\n
            for (v15 = 0; v15 < v16; v15 = v15 + 1)\n
            {\n
                *(((&v10)[v11] + v15 * 2)) = 65535;\n
            }\n
        }\n
        v7 = v18->field_c;\n
        while (true)\n
        {\n
            if (!v7)\n
            {\n
                v9 = cgc_malloc(v16 * 2);\n
                for (v15 = 0; v15 < v16; v15 = v15 + 1)\n
                {\n
                    *((v9 + v15 * 2)) = 65535;\n
                }\n
                for (v11 = 0; v11 < v12; v11 += 1)\n
                {\n
                    for (v15 = 0; v15 < v16; v15 = v15 + 1)\n
                    {\n
                        if (*(((&v10)[v11] + (v15 << 1))) != 65535)\n
                            *((v9 + v15 * 2)) = *(((&v10)[v11] + v15 * 2));\n
                    }\n
                }\n
                if (*(a1) < v16 * 3)\n
                {\n
                    v8 = 255;\n
                    break;\n
                }\n
                else\n
                {\n
                    v3 = 0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        if (v15 >= v16)\n
                        {\n
                            v8 = 0;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (*((v9 + (v15 << 1))) == 65535)\n
                            {\n
                                a0[v3] = 0;\n
                                a0[1 + v3] = 0;\n
                                a0[2 + v3] = 0;\n
                            }\n
                            else if (*((v9 + (v15 << 1))) < v18->field_10)\n
                            {\n
                                a0[v3] = *((v18->field_14 + *((v9 + v15 * 2)) * 3));\n
                                a0[1 + v3] = *((v18->field_14 + *((v9 + v15 * 2)) * 3 + 1));\n
                                a0[2 + v3] = *((v18->field_14 + *((v9 + v15 * 2)) * 3 + 2));\n
                            }\n
                            else\n
                            {\n
                                v8 = 255;\n
                                break;\n
                            }\n
                            v3 += 3;\n
                            v15 = v15 + 1;\n
                        }\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                v6 = v7->field_1;\n
                v5 = v7->field_2;\n
                v4 = v7->field_3;\n
                if (v6 >= v12)\n
                {\n
                    v8 = 255;\n
                    break;\n
                }\n
                else if (v5 >= v18->field_10)\n
                {\n
                    v8 = 255;\n
                    break;\n
                }\n
                else\n
                {\n
                    v1 = v7->field_0;\n
                    if (!v1)\n
                    {\n
                        v0 = v13;\n
                        cgc_vgf_render_rect(&v7->padding_4, (&v10)[v6], v4, v5, v14);\n
                    }\n
                    else if (v1 == 1)\n
                    {\n
                        v0 = v13;\n
                        cgc_vgf_render_triangle(&v7->padding_4, (&v10)[v6], v4, v5, v14);\n
                    }\n
                    else if (v1 == 2)\n
                    {\n
                        v0 = v13;\n
                        cgc_vgf_render_line(&v7->padding_4, (&v10)[v6], v4, v5, v14);\n
                    }\n
                    else if (v1 == 3)\n
                    {\n
                        v0 = v13;\n
                        cgc_vgf_render_circle(&v7->padding_4, (&v10)[v6], v4, v5, v14);\n
                    }\n
                    else if (v1 != 100)\n
                    {\n
                        v8 = 255;\n
                        break;\n
                    }\n
                    v7 = v7->field_10;\n
                }\n
            }\n
        }\n
        if (v9)\n
            cgc_free(v9);\n
        for (v11 = 0; v11 < v12; v11 += 1)\n
        {\n
            if ((&v10)[v11])\n
                cgc_free((&v10)[v11]);\n
        }\n
        v17 = v8;\n
        return v17;\n
    }\n
    v17 = -1;\n
    return v17;\n
}\n
", "4208199:sub_403647": null, "4208208:cgc_vgf_render_rect": "int cgc_vgf_render_rect(unsigned short v6[4], unsigned short *a0, char a1, char a2, unsigned short a3, unsigned short a4)\n
{\n
    unsigned short v0;  // [bp-0x18]\n
    unsigned short v1;  // [bp-0x16]\n
    unsigned short v2;  // [bp-0x14]\n
    unsigned short v3;  // [bp-0x12]\n
    unsigned short v4;  // [bp-0x10]\n
    unsigned short v5;  // [bp-0xe]\n
    unsigned short v7[4];  // eax, Other Possible Types: unsigned int\n
\n
    if (!v6)\n
        return v6;\n
    v3 = v6[0];\n
    v2 = v6[1];\n
    v1 = v6[0] + v6[2];\n
    v0 = v6[1] + v6[3];\n
    v7 = v3;\n
    if (v7 >= a3)\n
        return v7;\n
    v7 = v2;\n
    if (v7 < a4)\n
    {\n
        v7 = v1;\n
        if (v7 < a3)\n
        {\n
            v7 = v0;\n
            if (v7 < a4)\n
            {\n
                v7 = v3;\n
                if (v7 > v1)\n
                    return v3;\n
                v7 = v2;\n
                if (v7 > v0)\n
                    return v2;\n
                v5 = v3;\n
                for (v4 = v2; v5 < v1; v5 += 1)\n
                {\n
                    a0[a3 * v4 + v5] = a2;\n
                }\n
                for (; v4 < v0; v4 += 1)\n
                {\n
                    a0[a3 * v4 + v5] = a2;\n
                }\n
                for (; v5 > v3; v5 -= 1)\n
                {\n
                    a0[a3 * v4 + v5] = a2;\n
                }\n
                for (; v4 > v2; v4 -= 1)\n
                {\n
                    a0[a3 * v4 + v5] = a2;\n
                }\n
                v7 = a1 & 1;\n
                if (!v7)\n
                    return a1 & 1;\n
                v5 = v3 + 1;\n
                while (true)\n
                {\n
                    v7 = v5;\n
                    if (v7 >= v1)\n
                        break;\n
                    for (v4 = v2 + 1; v4 < v0; v4 += 1)\n
                    {\n
                        a0[a3 * v4 + v5] = a2;\n
                    }\n
                    v5 += 1;\n
                }\n
                return v5;\n
            }\n
        }\n
    }\n
}\n
", "4208861:sub_4038dd": null, "4208864:cgc_vgf_render_triangle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_render_triangle(unsigned short v47[6], unsigned int a0, char a1, char a2, unsigned short a3, unsigned short a4)\n
{\n
    unsigned int v0;  // [bp-0x9c]\n
    unsigned int v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x80]\n
    unsigned short v3;  // [bp-0x78]\n
    unsigned short v4;  // [bp-0x76]\n
    unsigned short v5;  // [bp-0x74]\n
    unsigned short v6;  // [bp-0x72]\n
    unsigned short v7;  // [bp-0x70]\n
    unsigned short v8;  // [bp-0x6e]\n
    unsigned int v9;  // [bp-0x6c]\n
    unsigned int v10;  // [bp-0x68]\n
    unsigned int v11;  // [bp-0x64]\n
    unsigned int v12;  // [bp-0x60]\n
    unsigned int v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x56]\n
    unsigned short v15;  // [bp-0x54]\n
    unsigned short v16;  // [bp-0x52]\n
    unsigned short v17;  // [bp-0x50]\n
    unsigned short v18;  // [bp-0x4e]\n
    unsigned short v19;  // [bp-0x4c]\n
    unsigned short v20;  // [bp-0x4a]\n
    unsigned short v21;  // [bp-0x48]\n
    unsigned short v22;  // [bp-0x46]\n
    unsigned short v23;  // [bp-0x44]\n
    unsigned short v24;  // [bp-0x42]\n
    void* v25;  // [bp-0x40], Other Possible Types: unsigned int\n
    void* v26;  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned short v27;  // [bp-0x38]\n
    unsigned short v28;  // [bp-0x36]\n
    unsigned short v29;  // [bp-0x34]\n
    unsigned short v30;  // [bp-0x32]\n
    unsigned short v31;  // [bp-0x30]\n
    unsigned short v32;  // [bp-0x2e]\n
    unsigned short v33;  // [bp-0x2c]\n
    unsigned short v34;  // [bp-0x2a]\n
    unsigned short v35;  // [bp-0x28]\n
    unsigned short v36;  // [bp-0x26]\n
    unsigned short v37;  // [bp-0x24]\n
    unsigned short v38;  // [bp-0x22]\n
    unsigned short v39;  // [bp-0x20]\n
    unsigned short v40;  // [bp-0x1e]\n
    unsigned short v41;  // [bp-0x1c]\n
    unsigned short v42;  // [bp-0x1a]\n
    unsigned short v43;  // [bp-0x18]\n
    unsigned short v44;  // [bp-0x16]\n
    unsigned short v45;  // [bp-0x14]\n
    unsigned short v46;  // [bp-0x12]\n
    unsigned int v48;  // eax\n
    unsigned short v49;  // bx\n
    unsigned short v50;  // di\n
    unsigned short v51;  // si\n
    unsigned int v52;  // ebx\n
    unsigned int v53;  // ebx\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // esi\n
    unsigned int v56;  // eax\n
    unsigned short v57;  // di\n
    unsigned short v58;  // si\n
    unsigned int v59;  // ebx\n
    unsigned int v60;  // eax\n
    unsigned short v61;  // di\n
    unsigned short v62;  // si\n
    unsigned int v63;  // eax\n
    unsigned int v65;  // eax\n
    unsigned short v67;  // bx\n
    unsigned short v68;  // di\n
    unsigned short v69;  // si\n
    unsigned int v71;  // ebx\n
    unsigned int v72;  // edi\n
    unsigned int v73;  // esi\n
    unsigned short v74;  // bx\n
    unsigned short v75;  // di\n
    unsigned short v76;  // si\n
    unsigned int v77;  // ebx\n
    unsigned short v78;  // bx\n
    unsigned short v79;  // di\n
    unsigned short v80;  // si\n
    unsigned int v81;  // ebx\n
    unsigned int v82;  // edi\n
    unsigned int v83;  // esi\n
    unsigned int v84;  // eax\n
    unsigned int v86;  // eax\n
    unsigned int v88;  // ebx\n
\n
    v13 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v47)\n
        return v47;\n
    v46 = v47[0];\n
    v45 = v47[1];\n
    v44 = v47[2];\n
    v43 = v47[3];\n
    v42 = v47[4];\n
    v41 = v47[5];\n
    v48 = v46;\n
    if (v48 >= a3)\n
        return v48;\n
    v48 = v45;\n
    if (v48 < a4)\n
    {\n
        v48 = v44;\n
        if (v48 < a3)\n
        {\n
            v48 = v43;\n
            if (v48 < a4)\n
            {\n
                v48 = v42;\n
                if (v48 < a3)\n
                {\n
                    v48 = v41;\n
                    if (v48 < a4)\n
                    {\n
                        if ((a1 & 1))\n
                        {\n
                            if (v45 > v43)\n
                            {\n
                                v40 = v45;\n
                                v45 = v43;\n
                                v43 = v40;\n
                                v39 = v46;\n
                                v46 = v44;\n
                                v44 = v39;\n
                            }\n
                            if (v43 > v41)\n
                            {\n
                                v38 = v43;\n
                                v43 = v41;\n
                                v41 = v38;\n
                                v37 = v44;\n
                                v44 = v42;\n
                                v42 = v37;\n
                            }\n
                            if (v45 > v43)\n
                            {\n
                                v36 = v45;\n
                                v45 = v43;\n
                                v43 = v36;\n
                                v35 = v46;\n
                                v46 = v44;\n
                                v44 = v35;\n
                            }\n
                            if (v45 != v41)\n
                            {\n
                                v32 = v42 - v46;\n
                                v31 = v41 - v45;\n
                                v30 = v42 - v44;\n
                                v29 = v41 - v43;\n
                                v28 = v43 - v45;\n
                                v27 = v44 - v46;\n
                                v26 = 0;\n
                                v25 = 0;\n
                                if (v43 == v41)\n
                                    v24 = v43;\n
                                else\n
                                    v24 = v43 - 1;\n
                                if (v45 == v43)\n
                                {\n
                                    v22 = v46;\n
                                    v21 = v44;\n
                                    if (v22 > v21)\n
                                    {\n
                                        v20 = v22;\n
                                        v22 = v21;\n
                                        v21 = v20;\n
                                    }\n
                                    v74 = v22;\n
                                    v75 = v45;\n
                                    v76 = v21 - v22;\n
                                    v0 = v77;\n
                                    v71 = v13;\n
                                    cgc_vgf_hline_helper(v0, v72, v73, a0, a2, a3);\n
                                    v23 = v43;\n
                                }\n
                                else\n
                                {\n
                                    for (v23 = v45; v23 <= v24; v23 += 1)\n
                                    {\n
                                        v11 = v46;\n
                                        v63 = v25;\n
                                        v19 = v11 + ((v63 >> 31 CONCAT v63) /m v31);\n
                                        v12 = v46;\n
                                        v65 = v26;\n
                                        v18 = v12 + ((v65 >> 31 CONCAT v65) /m v28);\n
                                        v25 = v32 + v25;\n
                                        v26 = v27 + v26;\n
                                        if (v18 > v19)\n
                                        {\n
                                            v17 = v18;\n
                                            v18 = v19;\n
                                            v19 = v17;\n
                                        }\n
                                        v67 = v18;\n
                                        v68 = v23;\n
                                        v69 = v19 - v18;\n
                                        v0 = ebx<4>;\n
                                        v71 = v13;\n
                                        cgc_vgf_hline_helper(v0, edi<4>, esi<4>, a0, a2, a3);\n
                                    }\n
                                }\n
                                v25 = (v23 - v45) * v32;\n
                                v26 = (v23 - v43) * v30;\n
                                while (true)\n
                                {\n
                                    v48 = v23;\n
                                    if (v48 > v41)\n
                                        break;\n
                                    v9 = v46;\n
                                    v84 = v25;\n
                                    v16 = v9 + ((v84 >> 31 CONCAT v84) /m v31);\n
                                    v10 = v44;\n
                                    v86 = v26;\n
                                    v15 = v10 + ((v86 >> 31 CONCAT v86) /m v29);\n
                                    v25 = v32 + v25;\n
                                    v26 = v30 + v26;\n
                                    if (v15 > v16)\n
                                    {\n
                                        v14 = v15;\n
                                        v15 = v16;\n
                                        v16 = v14;\n
                                    }\n
                                    *(&v71) = v15;\n
                                    *(&v72) = v23;\n
                                    *(&v73) = v16 - v15;\n
                                    v0 = v71;\n
                                    v88 = v13;\n
                                    cgc_vgf_hline_helper(v0, v72, v73, a0, a2, a3);\n
                                    v23 += 1;\n
                                }\n
                            }\n
                            else\n
                            {\n
                                v33 = v46;\n
                                v34 = v46;\n
                                if (v44 < v34)\n
                                {\n
                                    v34 = v44;\n
                                }\n
                                else if (v44 > v33)\n
                                {\n
                                    v33 = v44;\n
                                }\n
                                if (v42 < v34)\n
                                {\n
                                    v34 = v42;\n
                                }\n
                                else if (v42 > v33)\n
                                {\n
                                    v33 = v42;\n
                                }\n
                                v78 = v34;\n
                                v79 = v45;\n
                                v80 = v33 - v34;\n
                                v48 = cgc_vgf_hline_helper(v81, v82, v83, a0, a2, a3);\n
                            }\n
                            return v48;\n
                        }\n
                        else\n
                        {\n
                            v3 = v46;\n
                            v49 = v45;\n
                            v50 = v44;\n
                            v51 = v43;\n
                            v4 = a3;\n
                            v1 = v52;\n
                            v53 = v13;\n
                            v2 = a4;\n
                            v56 = cgc_vgf_line_helper(v3, v1, v54, v55, a0, a2, v4);\n
                            v5 = v44;\n
                            *(&v53) = v43;\n
                            v57 = v42;\n
                            v58 = v41;\n
                            v6 = a3;\n
                            *(&v56) = v5;\n
                            v0 = v56;\n
                            *(&v56) = v6;\n
                            v1 = v53;\n
                            v59 = v13;\n
                            v2 = a4;\n
                            v60 = cgc_vgf_line_helper(v0, v1, edi<4>, esi<4>, a0, a2, v56);\n
                            v7 = v42;\n
                            *(&v59) = v41;\n
                            v61 = v46;\n
                            v62 = v45;\n
                            v8 = a3;\n
                            *(&v60) = v7;\n
                            v0 = v60;\n
                            *(&v60) = v8;\n
                            v2 = a4;\n
                            v48 = cgc_vgf_line_helper(v0, v59, edi<4>, esi<4>, a0, a2, v60);\n
                            return v48;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4210697:sub_404009": null, "4210704:cgc_vgf_render_line": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_render_line(unsigned short v8[4], unsigned int a0, char a1, char a2, unsigned short a3, unsigned short a4)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned short v1;  // [bp-0x20]\n
    unsigned short v2;  // [bp-0x1e]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short v4;  // [bp-0x18]\n
    unsigned short v5;  // [bp-0x16]\n
    unsigned short v6;  // [bp-0x14]\n
    unsigned short v7;  // [bp-0x12]\n
    unsigned short v9[4];  // eax, Other Possible Types: unsigned int\n
    unsigned short v10;  // bx\n
    unsigned short v11;  // di\n
    unsigned short v12;  // si\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // esi\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
        return v8;\n
    v7 = v8[0];\n
    v6 = v8[1];\n
    v5 = v8[2];\n
    v4 = v8[3];\n
    v9 = v7;\n
    if (v9 >= a3)\n
        return v9;\n
    v9 = v6;\n
    if (v9 < a4)\n
    {\n
        v9 = v5;\n
        if (v9 < a3)\n
        {\n
            v9 = v4;\n
            if (v9 < a4)\n
            {\n
                v9 = v7;\n
                if (v9 > v5)\n
                    return v7;\n
                v9 = v6;\n
                if (v9 <= v4)\n
                {\n
                    v1 = v7;\n
                    v10 = v6;\n
                    v11 = v5;\n
                    v12 = v4;\n
                    v2 = a3;\n
                    v0 = a4;\n
                    cgc_vgf_line_helper(v1, v13, v14, v15, a0, a2, v2);\n
                    v9 = a1 & 1;\n
                    if ((Not (Not (eax<4> == 0x0<32>)))) { Goto None } else { Goto None }\n
                    return a1 & 1;\n
                }\n
                return v6;\n
            }\n
        }\n
    }\n
}\n
", "4211049:sub_404169": null, "4211056:cgc_vgf_render_circle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_render_circle(unsigned short v18[3], unsigned short *a0, char a1, char a2, unsigned short a3[3], unsigned short a4)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned short v3;  // [bp-0x2e]\n
    unsigned short v4;  // [bp-0x2c]\n
    unsigned short v5;  // [bp-0x2a]\n
    unsigned short v6;  // [bp-0x28]\n
    unsigned short v7;  // [bp-0x26]\n
    unsigned short v8;  // [bp-0x24]\n
    unsigned short v9;  // [bp-0x22]\n
    unsigned short v10;  // [bp-0x20]\n
    unsigned short v11;  // [bp-0x1e]\n
    unsigned short v12;  // [bp-0x1c]\n
    unsigned short v13;  // [bp-0x1a]\n
    unsigned short v14;  // [bp-0x18]\n
    unsigned short v15;  // [bp-0x16]\n
    unsigned short v16;  // [bp-0x14]\n
    unsigned short v17;  // [bp-0x12]\n
    unsigned int v19;  // eax\n
    unsigned short v20;  // di\n
    unsigned short v21[3];  // eax\n
    unsigned short v22;  // si\n
    unsigned int v24;  // ebx\n
    unsigned short v27;  // di\n
    unsigned short v28[3];  // eax\n
    unsigned short v29;  // si\n
    unsigned int v30;  // ebx\n
    unsigned short v31;  // di\n
    unsigned short v32[3];  // eax\n
    unsigned short v33;  // si\n
    unsigned int v34;  // ebx\n
    unsigned short v35;  // si\n
    unsigned int v36;  // ebx, Other Possible Types: unsigned short\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v18)\n
        return v18;\n
    v19 = v18[0];\n
    if (v19 >= a3)\n
        return v19;\n
    v19 = v18[1];\n
    if (v19 < a4)\n
    {\n
        v19 = v18[0] + v18[2];\n
        if (v19 >= a3)\n
            return v19;\n
        v19 = v18[1] + v18[2];\n
        if (v19 < a4)\n
        {\n
            if ((a1 & 1))\n
            {\n
                v17 = v18[0];\n
                v16 = v18[1];\n
                v15 = 0;\n
                v14 = v18[2];\n
                v13 = 1 - v18[2];\n
                v12 = 1;\n
                v11 = v18[2] * 65534;\n
                v36 = v17;\n
                while (true)\n
                {\n
                    v20 = v16 - v14;\n
                    v21 = v14 * 2;\n
                    v22 = v21[0];\n
                    v21[0] = a3;\n
                    v0 = v36;\n
                    v24 = v2;\n
                    v1 = a4;\n
                    cgc_vgf_vline_helper(v0, edi<4>, esi<4>, a0, a2, v21);\n
                    v19 = v15;\n
                    if (v19 >= v14)\n
                        break;\n
                    if (v13 >= 0)\n
                    {\n
                        v14 -= 1;\n
                        v11 += 2;\n
                        v13 += v11;\n
                    }\n
                    v15 += 1;\n
                    v12 += 2;\n
                    v13 += v12;\n
                    *(&v24) = v17 + v15;\n
                    v27 = v16 - v14;\n
                    v28 = v14 * 2;\n
                    v29 = v28[0];\n
                    v28[0] = a3;\n
                    v0 = v24;\n
                    v30 = v2;\n
                    v1 = a4;\n
                    cgc_vgf_vline_helper(v0, edi<4>, esi<4>, a0, a2, v28);\n
                    *(&v30) = v17 + v14;\n
                    v31 = v16 - v15;\n
                    v32 = v15 * 2;\n
                    v33 = v32[0];\n
                    v32[0] = a3;\n
                    v0 = v30;\n
                    v34 = v2;\n
                    v1 = a4;\n
                    cgc_vgf_vline_helper(v0, edi<4>, esi<4>, a0, a2, v32);\n
                    *(&v34) = v17 - v15;\n
                    v35 = v32[0];\n
                    v32[0] = a3;\n
                    v0 = v34;\n
                    v36 = v2;\n
                    v1 = a4;\n
                    cgc_vgf_vline_helper(v0, edi<4>, esi<4>, a0, a2, v32);\n
                    *(&v36) = v17 - v14;\n
                }\n
                return v15;\n
            }\n
            else\n
            {\n
                v10 = v18[0];\n
                v9 = v18[1];\n
                v8 = 0;\n
                v7 = v18[2];\n
                v6 = 1 - v18[2];\n
                v5 = 1;\n
                v4 = v18[2] * 65534;\n
                v3 = v18[2];\n
                a0[a3 * (v9 + v3) + v10] = a2;\n
                a0[a3 * (v9 - v3) + v10] = a2;\n
                a0[a3 * v9 + v3 + v10] = a2;\n
                a0[a3 * v9 + v10 + -1 * v3] = a2;\n
                while (true)\n
                {\n
                    v19 = v8;\n
                    if (v19 >= v7)\n
                        break;\n
                    if (v6 >= 0)\n
                    {\n
                        v7 -= 1;\n
                        v4 += 2;\n
                        v6 += v4;\n
                    }\n
                    v8 += 1;\n
                    v5 += 2;\n
                    v6 += v5;\n
                    a0[a3 * (v9 + v7) + v8 + v10] = a2;\n
                    a0[a3 * (v9 + v7) + v10 + -1 * v8] = a2;\n
                    a0[a3 * (v9 - v7) + v8 + v10] = a2;\n
                    a0[a3 * (v9 - v7) + v10 + -1 * v8] = a2;\n
                    a0[a3 * (v9 + v8) + v7 + v10] = a2;\n
                    a0[a3 * (v9 + v8) + v10 + -1 * v7] = a2;\n
                    a0[a3 * (v9 - v8) + v7 + v10] = a2;\n
                    a0[a3 * (v9 - v8) + v10 + -1 * v7] = a2;\n
                }\n
                return v8;\n
            }\n
        }\n
    }\n
}\n
", "4212619:sub_40478b": null, "4212624:cgc_vgf_hline_helper": "int cgc_vgf_hline_helper(unsigned short v2, unsigned short a0, unsigned short a1, unsigned short *a2, char a3, unsigned short a4, unsigned short a5)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned short v1;  // [bp-0xe]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v0 = v3;\n
    v4 = v2;\n
    if (v4 >= a4)\n
        return v2;\n
    v4 = a0;\n
    if (v4 >= a5)\n
        return a0;\n
    v1 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 >= a1)\n
            return v1;\n
        v4 = v2 + v1;\n
        if (v4 >= a4)\n
            return v2 + v1;\n
        a2[a4 * a0 + v1 + v2] = a3;\n
        v1 += 1;\n
    }\n
}\n
", "4212814:sub_40484e": null, "4212816:cgc_vgf_vline_helper": "int cgc_vgf_vline_helper(unsigned short v2, unsigned short a0, unsigned short a1, unsigned short *a2, char a3, unsigned short a4, unsigned short a5)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned short v1;  // [bp-0xe]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v0 = v3;\n
    v4 = v2;\n
    if (v4 >= a4)\n
        return v2;\n
    v4 = a0;\n
    if (v4 >= a5)\n
        return a0;\n
    v1 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 >= a1)\n
            return v1;\n
        v4 = a0 + v1;\n
        if (v4 >= a5)\n
            return a0 + v1;\n
        a2[a4 * (a0 + v1) + v2] = a3;\n
        v1 += 1;\n
    }\n
}\n
", "4213006:sub_40490e": null, "4213008:cgc_vgf_line_helper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vgf_line_helper(unsigned short v12, unsigned short a0, unsigned short a1, unsigned short a2, unsigned short *a3, char a4, unsigned short a5, unsigned short a6)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned short v1;  // [bp-0x24]\n
    unsigned short v2;  // [bp-0x22]\n
    unsigned short v3;  // [bp-0x20]\n
    unsigned short v4;  // [bp-0x1e]\n
    unsigned short v5;  // [bp-0x1c]\n
    unsigned short v6;  // [bp-0x1a]\n
    unsigned short v7;  // [bp-0x18]\n
    unsigned short v8;  // [bp-0x16]\n
    unsigned short v9;  // [bp-0x14]\n
    unsigned short v10;  // [bp-0x12]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v12;\n
    v2 = a0;\n
    v10 = cgc_abs(a1 - v12);\n
    v9 = cgc_abs(a2 - a0);\n
    if (v10 > v9)\n
        v4 = v10;\n
    else\n
        v4 = v9;\n
    if (v12 < a1)\n
        v8 = 1;\n
    else\n
        v8 = 65535;\n
    if (a0 < a2)\n
        v7 = 1;\n
    else\n
        v7 = 65535;\n
    v6 = 0;\n
    v5 = 0;\n
    for (v1 = 0; v1 <= v4 + 1; v1 += 1)\n
    {\n
        a3[a5 * v2 + v3] = a4;\n
        v6 += v10;\n
        v5 += v9;\n
        if (v6 > v4)\n
        {\n
            v6 -= v4;\n
            v3 += v8;\n
        }\n
        if (v5 > v4)\n
        {\n
            v5 -= v4;\n
            v2 += v7;\n
        }\n
    }\n
    return v1;\n
}\n
", "4213444:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}