{"4202496:_init": "extern struct_0 *g_40926c;\n
\n
int _init()\n
{\n
    if (g_40926c)\n
    {\n
        g_40926c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 29059;\n
    v6 = v5 + 44;\n
    v7 = v5 + 44;\n
    if (v7 == v6)\n
        return v5 + 44;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28995;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 44;\n
    v9 = (v6 + 44 - (v6 + 44) >> 31) + (44 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409268;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409268)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4203157:sub_402295": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203257:sub_4022f9": null, "4203264:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203449:sub_4023b9": null, "4203456:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4203483:sub_4023db": null, "4203488:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4203533:sub_40240d": null, "4203536:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4203581:sub_40243d": null, "4203584:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203661:sub_40248d": null, "4203664:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4203709:sub_4024bd": null, "4203712:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8816 + v0];\n
}\n
", "4203743:sub_4024df": null, "4203744:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4203799:sub_402517": null, "4203808:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8688 + v0];\n
}\n
", "4203839:sub_40253f": null, "4203840:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203854:sub_40254e": null, "4203856:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4203927:sub_402597": null, "4203936:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4204007:sub_4025e7": null, "4204016:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4204151:sub_402677": null, "4204160:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4204208:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        if (v7 >= 0x80000000)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 180 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4204641:sub_402861": null, "4204656:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4204818:sub_402912": null, "4204832:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 180 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205010:sub_4029d2": null, "4205024:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4205218:sub_402aa2": null, "4205232:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 44)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4205343:sub_402b1f": null, "4205344:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[11 + 1 + v1])\n
    {\n
        v5 = v0;\n
        v5[11 + 1 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[11 + 1 + v1];\n
    *((v6[11 + 1 + v1] + 12)) = v3;\n
    v6[11 + 1 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4205502:sub_402bbe": null, "4205504:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 180)) == v3)\n
        *((v0 + v1 * 4 + 180)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4205678:sub_402c6e": null, "4205680:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_402e5c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_402e5c:\n
    return v6;\n
}\n
", "4206188:sub_402e6c": null, "4206192:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_remove_from_blist(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
\n
    if (v0->field_14)\n
        v0->field_14->field_10 = v0->field_10;\n
    v1 = v0;\n
    if (v1->field_10)\n
    {\n
        v1 = v0->field_10;\n
        *((v1 + 20)) = v0->field_14;\n
    }\n
    return v1;\n
}\n
", "4206256:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206352:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*(v2) == *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *(v2) - *(a0);\n
            return v1;\n
        }\n
    }\n
}\n
", "4206480:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4206566:sub_402fe6": null, "4206576:cgc_memmove": "int cgc_memmove(char *v3, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v0 = v3;\n
    if (v0 >= v1)\n
    {\n
        if (v0 <= v1)\n
            return v3;\n
        for (v2 = a1; v2 > 0; v2 += 1)\n
        {\n
            v2[1 + v0] = *((v1 + v2 + 1));\n
        }\n
    }\n
    else\n
    {\n
        for (v2 = 0; v2 < a1; v2 += 1)\n
        {\n
            *((v0 + v2)) = v1[v2];\n
        }\n
        return v3;\n
    }\n
}\n
", "4206755:sub_4030a3": null, "4206768:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4206897:sub_403131": null, "4206912:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a0 >= a1)\n
    {\n
        v7 = cgc_output_number_printf(v8, (0 CONCAT a0) /m a1, a1, a2 - 1, a3);\n
        a0 = (0 CONCAT a0) /m a1 >> 32;\n
    }\n
    if (!v7 && a2 > 0)\n
    {\n
        while (true)\n
        {\n
            a2 -= 1;\n
            if (!a2)\n
                break;\n
            if (!(a3 & 1))\n
            {\n
                v5 = 32;\n
                cgc_transmit(v8, &v5, 1);\n
            }\n
            else\n
            {\n
                v6 = 48;\n
                cgc_transmit(v8, &v6, 1);\n
            }\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (a0 < 10)\n
            v1 = a0 + 48;\n
        else\n
            v1 = a0 + 55;\n
        v4 = v1;\n
        cgc_transmit(v8, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (a0 < 10)\n
            v0 = a0 + 48;\n
        else\n
            v0 = a0 + 87;\n
        v3 = v0;\n
        cgc_transmit(v8, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4207411:sub_403333": null, "4207424:cgc_fdprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fdprintf(unsigned int v20, char *a0)\n
{\n
    char *v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    char v4;  // [bp-0x61]\n
    char v5;  // [bp-0x59]\n
    char v6;  // [bp-0x51]\n
    char v7;  // [bp-0x49]\n
    char v8;  // [bp-0x41]\n
    char v9;  // [bp-0x39]\n
    char v10;  // [bp-0x31]\n
    struct struct_0 **v11;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v12;  // [bp-0x2c]\n
    void* v13;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    char *v17;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v18;  // [bp-0x11]\n
    char *v19;  // [bp-0x10]\n
    char v21;  // [bp+0xc]\n
    char *v22;  // eax\n
    char *v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = 0;\n
    v14 = 0;\n
    v13 = 0;\n
    v11 = &v21;\n
    while (*(a0))\n
    {\n
        v22 = a0;\n
        a0 = v22 + 1;\n
        v10 = *(v22);\n
        if (v10 != 37)\n
        {\n
            v4 = v10;\n
            cgc_transmit(v20, &v4, 1);\n
LABEL_403716:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v23 = a0;\n
                    a0 = v23 + 1;\n
                    v10 = *(v23);\n
                    v2 = v10;\n
                    if (v2 != 48)\n
                        break;\n
                    v14 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v10;\n
            if (v1 == 37)\n
            {\n
                v9 = 37;\n
                cgc_transmit(v20, &v9, 1);\n
                goto LABEL_4036cf;\n
            }\n
            if (v1 == 88)\n
            {\n
                v14 |= 2;\n
            }\n
            else if (v1 == 99)\n
            {\n
                v24 = v11;\n
                v11 = v24 + 1;\n
                v18 = *(v24);\n
                v6 = v18;\n
                cgc_transmit(v20, &v6, 1);\n
                goto LABEL_4036cf;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v25 = v11;\n
                    v11 = v25 + 1;\n
                    v17 = &*(v25)->field_0;\n
                    if (v17 < 0)\n
                    {\n
                        v7 = 45;\n
                        cgc_transmit(v20, &v7, 1);\n
                        v17 = -(v17);\n
                    }\n
                    cgc_output_number_printf(v20, v17, 10, v13, v14);\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v26 = v11;\n
                    v11 = v26 + 1;\n
                    v19 = &*(v26)->field_0;\n
                    v16 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v16;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v8 = v19[v16];\n
                        cgc_transmit(v20, &v8, 1);\n
                        v16 += 1;\n
                    }\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 == 117)\n
                {\n
                    v27 = v11;\n
                    v11 = v27 + 1;\n
                    v12 = &*(v27)->field_0;\n
                    cgc_output_number_printf(v20, v12, 10, v13, v14);\n
                    goto LABEL_4036cf;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v10;\n
                    cgc_transmit(v20, &v5, 1);\n
LABEL_4036cf:\n
                    v13 = 0;\n
                    v14 = 0;\n
                    goto LABEL_403716;\n
                }\n
            }\n
            v28 = v11;\n
            v11 = v28 + 1;\n
            v12 = &*(v28)->field_0;\n
            cgc_output_number_printf(v20, v12, 16, v13, v14);\n
            goto LABEL_4036cf;\n
        }\n
    }\n
    return v15;\n
}\n
", "4208424:sub_403728": null, "4208432:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v8, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    unsigned int *v10;  // eax\n
    struct struct_0 **v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a1 >= a2)\n
    {\n
        v7 = cgc_output_number_sprintf(v8, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (!v7 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v9 = a0;\n
            *(v9) = *(v9) + 1;\n
            v10 = v8;\n
            *(v10) = *(v10) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v11 = a0;\n
    *(v11) = *(v11) + 1;\n
    v12 = v8;\n
    *(v12) = *(v12) + 1;\n
    return v7 + 1;\n
}\n
", "4208917:sub_403915": null, "4208928:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    char *v16;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_403c2f:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_403bf2;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = &*(v22)->field_0;\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_403bf2;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_403bf2;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_403bf2:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403c2f;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = *(v24);\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_403bf2;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4209741:sub_403c4d": null, "4209744:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4210002:sub_403d52": null, "4210016:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v6, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v6;\n
    v4 = a0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v5))\n
            v2 = *(v4);\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    return v0 - cgc_tolower(*(v4));\n
}\n
", "4210255:sub_403e4f": null, "4210256:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    v0 = a0;\n
    cgc_strcpy(v2 + cgc_strlen());\n
    v6 = v3;\n
    return v4;\n
}\n
", "4210333:sub_403e9d": null, "4210336:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4210442:sub_403f0a": null, "4210448:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4210576:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4210660:sub_403fe4": null, "4210672:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen() + 1;\n
    v1 = cgc_malloc(v2);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4210796:sub_40406c": null, "4210800:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4210852:sub_4040a4": null, "4210864:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v7, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v7;\n
    v4 = a0;\n
    v8 = a1;\n
    a1 = v8 - 1;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (a1)\n
        {\n
            v2 = 0;\n
            if (*(v5))\n
                v2 = *(v4);\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    v6 = v0 - cgc_tolower(*(v4));\n
    return v6;\n
}\n
", "4211164:sub_4041dc": null, "4211168:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v3 = a1;\n
    a1 = v3 - 1;\n
    if (!v3)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        v0 = 0;\n
        if (v4)\n
        {\n
            v0 = 0;\n
            if (*(v2))\n
                v0 = *(a0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    v1 = *(v2) - *(a0);\n
    return v1;\n
}\n
", "4211369:sub_4042a9": null, "4211376:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
        if (!v0[v1])\n
            break;\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4211518:sub_40433e": null, "4211520:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4211736:sub_404418": null, "4211744:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_404468:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_404468;\n
        if (a1 < 0)\n
            goto LABEL_404468;\n
        while (true)\n
        {\n
            if (*(v6) != 32 && *(v6) != 9 && *(v6) != 12 && *(v6) != 10 && *(v6) != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_40455f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_40455f;\n
                v6 += 1;\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_4045d4;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_4045d4:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_404732;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4046f2;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4046f2:\n
                if (v8 >= a1)\n
                    goto LABEL_404732;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = v6 + 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4046e9;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4046e9:\n
                v8 += 10;\n
                goto LABEL_4046f2;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_404668;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_404668:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_404732:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4212606:sub_40477e": null, "4212608:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4212667:sub_4047bb": null, "4212672:cgc_dict_new": "int cgc_dict_new()\n
{\n
    return cgc_calloc(4, 0x100);\n
}\n
", "4212717:sub_4047ed": null, "4212720:cgc__hash": "int cgc__hash(char *v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
    char *v3;  // ecx\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 5419; *(v1); v0 = v0 * 32 + v0 * 4 + v0 + *(v3))\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
    }\n
    return v0;\n
}\n
", "4212820:sub_404854": null, "4212832:cgc_dict_find": "typedef struct struct_1 {\n
    char *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dict_find(struct struct_0 **v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct struct_0 **v1;  // [bp-0x14]\n
    struct_1 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v2 = &v1[cgc__hash(a0)]->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (!cgc_strcmp(v2->field_0, a0))\n
        {\n
            v3 = *((v2 + 4));\n
            return v3;\n
        }\n
        v2 = v2->field_8;\n
    }\n
}\n
", "4212974:sub_4048ee": null, "4212976:cgc_dict_insert": "typedef struct struct_0 {\n
    unsigned int field_0[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dict_insert(unsigned int *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int [3]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6[3];  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = cgc_dict_find(v4, a0);\n
    v1[0] = v6;\n
    if (v1)\n
    {\n
LABEL_4049aa:\n
        return v6;\n
    }\n
    v6 = cgc_malloc(12);\n
    v1 = &v6[0];\n
    if (v1)\n
    {\n
        v1->field_0 = cgc_strdup(a0);\n
        v6 = v1;\n
        if (v6[0])\n
        {\n
            v1->field_4 = a1;\n
            v2 = cgc__hash(a0);\n
            v1->field_8 = v4[v2];\n
            v6 = v4;\n
            *((v6 + v2 * 4)) = v1;\n
            goto LABEL_4049aa;\n
        }\n
    }\n
    if (!v1)\n
        return v6;\n
    if (v1->field_0)\n
        cgc_free(v1->field_0);\n
    v6 = cgc_free(v1);\n
    return v6;\n
}\n
", "4213225:sub_4049e9": null, "4213232:cgc_dict_remove": "typedef struct struct_0 {\n
    unsigned int field_0[2];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dict_remove(unsigned int v6, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_1 *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_1 **v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = cgc__hash(a0);\n
    v2 = *((v6 + v3 * 4));\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!v2)\n
            return v4;\n
        if (!cgc_strcmp(v2->field_0, a0))\n
            break;\n
        v1 = v2;\n
        v2 = v2->field_8;\n
    }\n
    if (!v1)\n
        *((v6 + v3 * 4)) = *((v2 + 8));\n
    else\n
        *((v1 + 8)) = *((v2 + 8));\n
    v4 = *((v2 + 4));\n
    cgc_free(*(v2));\n
    cgc_free(v2);\n
    return v4;\n
}\n
", "4213457:sub_404ad1": null, "4213472:cgc_print_menu": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_menu()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_fdprintf(1, \"1. Define variables\\n
\");\n
    cgc_fdprintf(1, v0 - 8468);\n
    cgc_fdprintf(1, v0 - 8449);\n
    cgc_fdprintf(1, v0 - 8423);\n
    cgc_fdprintf(1, v0 - 8407);\n
    v4 = v1;\n
    return cgc_fdprintf(1, v0 - 7978);\n
}\n
", "4213647:sub_404b8f": null, "4213648:cgc_define_vars": "typedef struct struct_1 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_4071aa;\n
\n
int cgc_define_vars()\n
{\n
}\n
", "4214753:sub_404fe1": null, "4214768:cgc_view_vars": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_view_vars(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3[2];  // [bp-0x1c]\n
    unsigned int *v4;  // [bp-0x18]\n
    struct_0 *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
\n
    v8 = v10;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    cgc_fdprintf(1, \"-- Current variables:\\n
\");\n
    for (v7 = 0; v7 < 0x100; v7 = v7 + 1)\n
    {\n
        for (v5 = *((v9 + v7 * 4)); v5; v5 = v5->field_8)\n
        {\n
            v4 = *((v5 + 4));\n
            v3[0] = cgc_sadface_var2str();\n
            if (v3)\n
            {\n
                v0 = *(v5);\n
                v1 = v3;\n
                cgc_fdprintf(1, v2 - 8131);\n
                if (*(v4))\n
                    cgc_free(v3);\n
                v6 += 1;\n
            }\n
        }\n
    }\n
    if (!v6)\n
    {\n
        v11 = cgc_fdprintf(1, v2 - 8094);\n
        return v11;\n
    }\n
    v0 = v6;\n
    v11 = cgc_fdprintf(1, v2 - 8119);\n
    return v11;\n
}\n
", "4215087:sub_40512f": null, "4215088:cgc_submit_text": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_submit_text(char *v3, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_memset(v3, 0, a0);\n
    cgc_fdprintf(1, v1 - 8085);\n
    v0 = 0;\n
    v5 = cgc_read_until(0, v3, a0);\n
    if (v5 < 0)\n
    {\n
        v5 = cgc_fdprintf(1, v1 - 8049);\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4215248:cgc_render_text": "extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_render_text(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (cgc_sadface_init(&v1, 0, v5, a0, &_GLOBAL_OFFSET_TABLE_) < 0)\n
    {\n
        v7 = cgc_fdprintf(1, v0 - 8049);\n
        return v7;\n
    }\n
    v2 = 0x1000;\n
    v3 = cgc_calloc(1, v2);\n
    if (v3 && cgc_sadface_render(v1, v3) >= 0)\n
    {\n
        cgc_fdprintf(1, v0 - 8041);\n
        cgc_fdprintf(1, v0 - 8123);\n
        v7 = cgc_fdprintf(1, v0 - 8023);\n
        return v7;\n
    }\n
    v7 = cgc_fdprintf(1, v0 - 8049);\n
    return v7;\n
}\n
", "4215563:sub_40530b": null, "4215568:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v2;  // [bp-0x2018]\n
    unsigned int v3;  // [bp-0x2014]\n
    void* v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
\n
    v6 = v12;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v3 = cgc_dict_new();\n
    cgc_fdprintf(1, v2 - 7991);\n
}\n
", "4216079:sub_40550f": null, "4216080:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_read_until(v2, v3);\n
    return;\n
}\n
", "4216112:cgc_read_until": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_until(unsigned int v6, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    struct_0 *v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
        {\n
LABEL_4055e0:\n
            *((v3 - 1)) = 0;\n
            v5 = v3 - a0;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(v6, v3, 1))\n
        {\n
LABEL_4055a2:\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (!*(&v2))\n
            goto LABEL_4055a2;\n
        v7 = v3;\n
        v3 = &v7->field_0;\n
        if (v7->field_-1 == a2)\n
            goto LABEL_4055e0;\n
        v4 += 1;\n
    }\n
}\n
", "4216315:sub_4055fb": null, "4216320:cgc_read_n": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_n(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v3 - a0;\n
        v0 = &v2;\n
        if (cgc_receive(v5, v3, 1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v3 += 1;\n
        v4 += 1;\n
    }\n
    return v3 - a0;\n
}\n
", "4216473:sub_405699": null, "4216480:cgc_strstr": "int cgc_strstr(char *v4, char *a0)\n
{\n
    char v0;  // [bp-0x11]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc]\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    unsigned int v6;  // eax\n
    char *v7;  // ecx\n
\n
    if (v4 && a0)\n
    {\n
        for (; *(v4); v4 += 1)\n
        {\n
            v2 = v4;\n
            v1 = a0;\n
            do\n
            {\n
                v0 = 0;\n
                if (*(v2))\n
                {\n
                    v0 = 0;\n
                    if (*(v1))\n
                    {\n
                        v5 = v2;\n
                        v2 = v5 + 1;\n
                        v6 = *(v5);\n
                        v7 = v1;\n
                        v1 = v7 + 1;\n
                        v0 = v6 == *(v7);\n
                    }\n
                }\n
            } while ((v0 & 1));\n
            if (!*(v1))\n
            {\n
                v3 = v4;\n
                return v3;\n
            }\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4216695:sub_405777": null, "4216704:cgc_sadface_init": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8[2];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sadface_init(unsigned int *v3, unsigned int a0[2], char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[6];  // [bp-0x10], Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = 0;\n
    if (v3)\n
    {\n
        v1 = cgc_malloc(24);\n
        if (v1)\n
        {\n
            if (!a0)\n
            {\n
                v4 = v0;\n
                v1->field_0 = v4 - 7912;\n
                v1->field_4 = v4 - 7909;\n
            }\n
            else\n
            {\n
                if (!a0[0])\n
                    v1->field_0 = v0 - 7912;\n
                else\n
                    v1->field_0 = a0[0];\n
                if (!a0[1])\n
                    v1->field_4 = v0 - 7909;\n
                else\n
                    v1->field_4 = a0[1];\n
            }\n
            v1->field_8 = cgc_strdup(a1);\n
            if (v1->field_8)\n
            {\n
                v1->field_c = cgc_strlen(a1);\n
                v1->field_10 = 0;\n
                v1->field_14 = a2;\n
                *(v3) = v1;\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
    }\n
    if (v1)\n
    {\n
        if (v1->field_8)\n
            cgc_free(*((v1 + 8)));\n
        cgc_free(v1);\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4217096:sub_405908": null, "4217104:cgc_sadface_var2str": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sadface_var2str()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int *v6;  // [bp+0x4]\n
    unsigned int v25;  // ebx\n
\n
    v4 = v25;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_calloc(1, 0x100);\n
    if (!v2)\n
        goto LABEL_0x405ad6;\n
    v0 = *(v6);\n
    if (!(v0 <= 3))\n
        goto LABEL_0x405ad1;\n
    goto *(((stack_base)[64] + (stack_base)[68] * 4 - 7944)) + (stack_base)[64];\n
}\n
", "4217573:sub_405ae5": null, "4217584:cgc__find_sadface": "typedef struct struct_0 {\n
    char *field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__find_sadface(struct_0 *v7, unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_strstr(v7->field_8 + v7->field_10, v7->field_0);\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v1 = v4;\n
    v3 = cgc_strstr(v1 + cgc_strlen(v7->field_0), v7->field_4);\n
    if (!v3)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    *(a0) = v4 - v7->field_8;\n
    v0 = v3 - v7->field_8;\n
    *(a1) = v0 + cgc_strlen(v7->field_4);\n
    v5 = 1;\n
    return v5;\n
}\n
", "4217815:sub_405bd7": null, "4217824:cgc_parse_sadface": "typedef struct struct_2 {\n
    char *field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    struct struct_0 **field_14;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_sadface(struct_2 *v28)\n
{\n
    unsigned int v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    unsigned int v4;  // [bp-0x64]\n
    unsigned int v5;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x58]\n
    struct_1 *v8;  // [bp-0x54]\n
    unsigned int v9[5];  // [bp-0x50]\n
    char *v10;  // [bp-0x4c]\n
    unsigned int v11;  // [bp-0x48]\n
    unsigned int v12;  // [bp-0x44]\n
    unsigned int v13[4];  // [bp-0x40]\n
    unsigned int *v14;  // [bp-0x3c]\n
    struct_1 *v15;  // [bp-0x38]\n
    unsigned int v16[5];  // [bp-0x34]\n
    char *v17;  // [bp-0x30]\n
    unsigned int v18;  // [bp-0x2c]\n
    unsigned int v19[4];  // [bp-0x28]\n
    unsigned int v20[4];  // [bp-0x24]\n
    unsigned int v21;  // [bp-0x20]\n
    struct_1 *v22;  // [bp-0x1c]\n
    unsigned int *v23;  // [bp-0x18]\n
    void* v24;  // [bp-0x14]\n
    void* v25;  // [bp-0x10]\n
    unsigned int *v26;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v27;  // [bp-0x8]\n
    unsigned int v29;  // ebx\n
    struct_0 *v30;  // eax\n
\n
    v27 = v29;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v25 = 0;\n
    v24 = 0;\n
    v21 = cgc_stack_new();\n
    v23 = cgc_malloc(20);\n
    if (!v21)\n
    {\n
LABEL_405c3f:\n
    }\n
    else\n
    {\n
        if (!v23)\n
            goto LABEL_405c3f;\n
        cgc_memset(v23, 0, 20);\n
        *(v23) = 0;\n
        cgc_stack_push(v21);\n
        while (true)\n
        {\n
            if (v28->field_10 >= v28->field_c)\n
            {\n
LABEL_4061ca:\n
                cgc_stack_destroy();\n
                v26 = v23;\n
                return v26;\n
            }\n
            if (cgc__find_sadface(v28, &v25, &v24) <= 0)\n
            {\n
                v20[0] = cgc_malloc(20);\n
                if (!v20)\n
                    break;\n
                cgc_memset(v20, 0, 20);\n
                v20[0] = 1;\n
                v20[1] = 0;\n
                v20[2] = v28->field_10;\n
                v20[3] = v28->field_c - v28->field_10;\n
                v22 = cgc_stack_pop(v21, 0);\n
                v22->field_4 = v20;\n
                cgc_stack_push(v21);\n
                v28->field_10 = v28->field_c;\n
                goto LABEL_4061ca;\n
            }\n
            else\n
            {\n
                if (v28->field_10 != v25)\n
                {\n
                    v19[0] = cgc_malloc(20);\n
                    if (!v19)\n
                        break;\n
                    cgc_memset(v19, 0, 20);\n
                    v19[0] = 1;\n
                    v19[1] = 0;\n
                    v19[2] = v28->field_10;\n
                    v19[3] = v25 - v28->field_10;\n
                    v22 = cgc_stack_pop(v21, 0);\n
                    v22->field_4 = v19;\n
                    cgc_stack_push(v21);\n
                    v28->field_10 = v25;\n
                }\n
                v2 = v24 - v25;\n
                v3 = v2 - cgc_strlen(v28->field_0);\n
                v18 = v3 - cgc_strlen(v28->field_4);\n
                v30 = v28;\n
                v5 = v30->field_8;\n
                v4 = v25;\n
                v17 = v5 + v4 + cgc_strlen(v30->field_0);\n
                v6 = *(v17);\n
                if (v6 == 35)\n
                {\n
                    v28->field_10 = v24;\n
LABEL_4061c5:\n
                }\n
                else\n
                {\n
                    if (v6 != 47)\n
                    {\n
                        if (v6 != 64)\n
                        {\n
                            v10 = cgc_calloc(v18 + 1, 1);\n
                            if (!v10)\n
                                break;\n
                            cgc_memset(v10, 0, v18 + 1);\n
                            v0 = v25;\n
                            v11 = v0 + cgc_strlen(v28->field_0);\n
                            cgc_strncpy(v10, v28->field_8 + v11, v18);\n
                            v9[0] = cgc_malloc(20);\n
                            if (!v9)\n
                                break;\n
                            cgc_memset(v9, 0, 20);\n
                            v9[0] = 2;\n
                            v9[2] = v11;\n
                            v9[3] = v18;\n
                            v9[4] = cgc_dict_find(v28->field_14, v10);\n
                            cgc_free(v10);\n
                            v8 = cgc_stack_pop();\n
                            v8->field_4 = v9;\n
                            cgc_stack_push(v21);\n
                            v28->field_10 = v24;\n
                            goto LABEL_4061c5;\n
                        }\n
                        else\n
                        {\n
                            v14 = cgc_malloc(20);\n
                            v16[0] = cgc_malloc(20);\n
                            if (v14 && v16)\n
                            {\n
                                cgc_memset(v14, 0, 20);\n
                                *(v14) = 0;\n
                                cgc_memset(v16, 0, 20);\n
                                v16[0] = 3;\n
                                v1 = v25;\n
                                v16[2] = v1 + cgc_strlen(v28->field_0) + 1;\n
                                v16[3] = v18 - 1;\n
                                v16[4] = v14;\n
                                v15 = cgc_stack_pop();\n
                                v15->field_4 = v16;\n
                                cgc_stack_push(v21);\n
                                cgc_stack_push(v21);\n
                                v28->field_10 = v24;\n
                                goto LABEL_4061c5;\n
                            }\n
                            break;\n
                        }\n
                    }\n
                    v12 = cgc_stack_pop();\n
                    v13[0] = cgc_stack_peek();\n
                    if (v13 && v13[0] == 3)\n
                    {\n
                        if (cgc_strncmp(v28->field_8 + v13[2], v17 + 1, v13[3]))\n
                            break;\n
                        v28->field_10 = v24;\n
                        goto LABEL_4061c5;\n
                    }\n
                    break;\n
                }\n
            }\n
        }\n
    }\n
    if (v21)\n
        cgc_stack_destroy();\n
    cgc_sadface_destroy();\n
    v26 = 0;\n
    return v26;\n
}\n
", "4219420:sub_40621c": null, "4219424:cgc_sadface_destroy": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8[2];\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sadface_destroy(struct_1 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v1)\n
        return v1;\n
    if (!v1->field_8)\n
        return cgc_free(v1);\n
    cgc_free(v1->field_8);\n
}\n
", "4219509:sub_406275": null, "4219520:cgc_sadface_render": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[8];\n
    struct struct_2 *field_14;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sadface_render()\n
{\n
    unsigned int v1;  // [bp-0x40]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20]\n
    void* v5;  // [bp-0x1c]\n
    struct_0 *v6;  // [bp-0x18]\n
    struct_0 *v7;  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int *v12;  // [bp+0x4]\n
    unsigned int v26;  // ebx\n
\n
    v10 = v26;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v7 = cgc_parse_sadface(v12);\n
    if (v7)\n
    {\n
        v8 = cgc_stack_new();\n
        if (v8)\n
            v6 = v7;\n
    }\n
}\n
", "4220281:sub_406579": null, "4220288:cgc_stack_new": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stack_new(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[3];  // [bp-0x10]\n
    unsigned int v2[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = cgc_malloc(12);\n
    if (!v1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v1[0] = 0;\n
    v1[1] = v4;\n
    v1[2] = cgc_malloc(v4 * 4);\n
    v2 = v1;\n
    return v2;\n
}\n
", "4220408:sub_4065f8": null, "4220416:cgc__stack_resize": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8[2];\n
} struct_0;\n
\n
int cgc__stack_resize(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0[3];  // [bp-0xc]\n
    unsigned int v2[3];  // eax, Other Possible Types: unsigned int\n
\n
    v2 = cgc_realloc(v1->field_8, a0 * 4);\n
    v0[0] = v2;\n
    if (v0)\n
    {\n
        v1->field_8 = &v0[0];\n
        v2 = v1;\n
        *((v2 + 4)) = a0;\n
        return v1;\n
    }\n
    return v2;\n
}\n
", "4220502:sub_406656": null, "4220512:cgc_stack_push": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stack_push(unsigned int v1[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[3];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[0] == v1[1])\n
        cgc__stack_resize(v1, v1[1] * 2);\n
    *((v1[2] + v1[0] * 4)) = a0;\n
    v2 = v1;\n
    v2[0] = v2[0] + 1;\n
    return v1;\n
}\n
", "4220617:sub_4066c9": null, "4220624:cgc_stack_pop": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stack_pop(unsigned int v2[3])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3[3];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v2[0] <= 0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (v2[0] == v2[1] >> 1)\n
        cgc__stack_resize(v2, v2[1] >> 1);\n
    v3 = v2;\n
    v3[0] = v3[0] - 1;\n
    v1 = *((v2[2] + v2[0] * 4));\n
    return v1;\n
}\n
", "4220758:sub_406756": null, "4220768:cgc_stack_peek": "int cgc_stack_peek(unsigned int v1[3])\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1[0] <= 0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *((v1[2] + (v1[0] - 1) * 4));\n
    return v0;\n
}\n
", "4220827:sub_40679b": null, "4220832:cgc_stack_destroy": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stack_destroy(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v1)\n
        return v1;\n
    if (v1->field_8)\n
        cgc_free(v1->field_8);\n
    v1->field_0 = 0;\n
    v1->field_4 = 0;\n
    v1->field_8 = 0;\n
    return v1;\n
}\n
", "4220932:sub_406804": null, "4220944:cgc_strtof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtof(char *v18, unsigned int *a0)\n
{\n
    char v0;  // [bp-0x4d]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    char *v6;  // [bp-0x38]\n
    void* v7;  // [bp-0x34], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x30]\n
    void* v9;  // [bp-0x2c], Other Possible Types: unsigned long\n
    void* v10;  // [bp-0x28]\n
    void* v11;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x1c]\n
    unsigned int v13;  // [bp-0x18]\n
    char v14;  // [bp-0x11]\n
    char *v15;  // [bp-0x10]\n
    void* v16;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v17;  // [bp-0x8]\n
    unsigned int v19;  // ebx\n
    unsigned int v21;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int *v41;  // eax, Other Possible Types: unsigned int, char *\n
\n
    v17 = v19;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v18;\n
    v12 = -1;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0x3ff00000;\n
    v7 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v18))\n
            v0 = cgc_isspace(*(v18));\n
        if (!(v0 & 1))\n
            break;\n
        v18 += 1;\n
    }\n
    if (*(v18) != 45 && !(*(v18) == 43))\n
        goto LABEL_4068ea;\n
    if (*(v18) == 45)\n
        v12 = 1;\n
    v18 += 1;\n
LABEL_4068ea:\n
    v6 = v18;\n
    while (true)\n
    {\n
        v14 = *(v18);\n
        if (!v14)\n
            break;\n
        if (v14 == 46)\n
        {\n
            v11 = 1;\n
            goto LABEL_406999;\n
        }\n
        if (v14 < 48)\n
        {\n
LABEL_40699e:\n
            break;\n
        }\n
        else\n
        {\n
            if (!(v14 <= 57))\n
                goto LABEL_40699e;\n
            v13 = v14 - 48;\n
            if (v11)\n
            {\n
                v21 = v36 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v24 = v21 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v24 = v21 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v25 = v24 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v28 = v25 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v28 = v25 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t7,1] = t8\n
                [D] PutI(136:I8x8)[t7,1] = 0x01\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v30 = v28 + 1;\n
                v7 = ([D] GetI(136:I8x8)[t32,0] ? [D] GetI(72:F64x8)[t32,0] : nan);\n
                [D] PutI(136:I8x8)[t32,0] = 0x00\n
                [D] PutI(72:F64x8)[t41,0] = t44\n
                [D] PutI(136:I8x8)[t41,0] = 0x01\n
                v32 = v30 - 0 - 1;\n
                [D] PutI(72:F64x8)[t53,0] = t56\n
                [D] PutI(136:I8x8)[t53,0] = 0x01\n
                v4 = v13;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t71,0] = t74\n
                [D] PutI(136:I8x8)[t71,0] = 0x01\n
                [D] PutI(72:F64x8)[t82,1] = t83\n
                [D] PutI(136:I8x8)[t82,1] = 0x01\n
                [D] PutI(136:I8x8)[t82,0] = 0x00\n
                v34 = v33 + 1;\n
                [D] PutI(72:F64x8)[t102,1] = t103\n
                [D] PutI(136:I8x8)[t102,1] = 0x01\n
                [D] PutI(136:I8x8)[t102,0] = 0x00\n
                v35 = v34 + 1;\n
                v9 = ([D] GetI(136:I8x8)[t127,0] ? [D] GetI(72:F64x8)[t127,0] : nan);\n
                [D] PutI(136:I8x8)[t127,0] = 0x00\n
                v36 = v35 + 1;\n
            }\n
            else\n
            {\n
                v23 = v36 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v26 = v23 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v26 = v23 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v5 = v13;\n
                v27 = v26 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v29 = v27 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v29 = v27 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v37 = v29 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v38 = v37 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v38 = v37 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,2] = t2\n
                [D] PutI(136:I8x8)[t1,2] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v39 = v38 + 1;\n
                [D] PutI(72:F64x8)[t21,1] = t22\n
                [D] PutI(136:I8x8)[t21,1] = 0x01\n
                [D] PutI(136:I8x8)[t21,0] = 0x00\n
                v9 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                [D] PutI(136:I8x8)[t46,0] = 0x00\n
                v36 = v39 + 1 + 1;\n
            }\n
LABEL_406999:\n
            v18 += 1;\n
        }\n
    }\n
    v41 = v6;\n
    if (v41 != v18)\n
    {\n
        if (a0)\n
            *(a0) = v18;\n
        v41 = v1;\n
        v3 = -(v12);\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t3,1] = t4\n
        [D] PutI(136:I8x8)[t3,1] = 0x01\n
        [D] PutI(136:I8x8)[t3,0] = 0x00\n
        [D] PutI(72:F64x8)[t23,1] = t24\n
        [D] PutI(136:I8x8)[t23,1] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        v2 = ([D] GetI(136:I8x8)[t49,0] ? [D] GetI(72:F64x8)[t49,0] : nan);\n
        [D] PutI(136:I8x8)[t49,0] = 0x00\n
        [D] PutI(72:F64x8)[t60,0] = t63\n
        [D] PutI(136:I8x8)[t60,0] = 0x01\n
        v16 = ([D] GetI(136:I8x8)[t77,0] ? [D] GetI(72:F64x8)[t77,0] : nan);\n
        [D] PutI(136:I8x8)[t77,0] = 0x00\n
    }\n
    else\n
    {\n
        if (a0)\n
        {\n
            v41 = a0;\n
            *(v41) = v15;\n
        }\n
        v16 = 0;\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v41;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v41;\n
}\n
", "4221476:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}