{"4198400:_init": "extern struct_0 *g_406b30;\n
\n
int _init()\n
{\n
    if (g_406b30)\n
    {\n
        g_406b30();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198496:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198512:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198550:sub_401096": null, "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198603:sub_4010cb": null, "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198612:sub_4010d4": null, "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 23127;\n
    v6 = v5 + 42;\n
    v7 = v5 + 42;\n
    if (v7 == v6)\n
        return v5 + 42;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
", "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 23063;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 42;\n
    v9 = (v6 + 42 - (v6 + 42) >> 31) + (42 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_406b2c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_406b2c)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198861:sub_4011cd": null, "4198864:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4199045:sub_401285": null, "4199056:cgc_isascii": "int cgc_isascii(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 0)\n
        v1 = v2 < 128;\n
    return v1 & 1;\n
}\n
", "4199104:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = !(*((v0 + v3 - 6964)) & 32);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199196:sub_40131c": null, "4199200:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 7);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199292:sub_40137c": null, "4199296:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 3);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199388:sub_4013dc": null, "4199392:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 1);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199484:sub_40143c": null, "4199488:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 2);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199580:sub_40149c": null, "4199584:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 16);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199676:sub_4014fc": null, "4199680:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = 0;\n
    if (cgc_isascii(v3))\n
    {\n
        v1 = (*((v0 + v3 - 6964)) & 8);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4199772:sub_40155c": null, "4199776:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4199847:sub_4015a7": null, "4199856:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 - 32;\n
    return v0;\n
}\n
", "4199927:sub_4015f7": null, "4199936:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = \" j\";\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4200071:sub_401687": null, "4200080:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4200128:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 172 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4200536:sub_401858": null, "4200544:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4200706:sub_401902": null, "4200720:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = \" j\";\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 172 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4200898:sub_4019c2": null, "4200912:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = \" j\";\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4201106:sub_401a92": null, "4201120:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 40)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4201231:sub_401b0f": null, "4201232:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = \" j\";\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[10 + 3 + v1])\n
    {\n
        v5 = v0;\n
        v5[10 + 3 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[10 + 3 + v1];\n
    *((v6[10 + 3 + v1] + 12)) = v3;\n
    v6[10 + 3 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4201390:sub_401bae": null, "4201392:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \" j\";\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 172)) == v3)\n
        *((v0 + v1 * 4 + 172)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4201566:sub_401c5e": null, "4201568:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = \" j\";\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_401e4c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_401e4c:\n
    return v6;\n
}\n
", "4202076:sub_401e5c": null, "4202080:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_remove_from_blist(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
\n
    if (v0->field_14)\n
        v0->field_14->field_10 = v0->field_10;\n
    v1 = v0;\n
    if (v1->field_10)\n
    {\n
        v1 = v0->field_10;\n
        *((v1 + 20)) = v0->field_14;\n
    }\n
    return v1;\n
}\n
", "4202144:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[v2] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4202245:sub_401f05": null, "4202256:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < a1)\n
        {\n
            if (*(v2) != *(v1))\n
            {\n
                v3 = *(v2) - *(v1);\n
                return v3;\n
            }\n
            v2 += 1;\n
            v1 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4202396:sub_401f9c": null, "4202400:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4202486:sub_401ff6": null, "4202496:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4202625:sub_402081": null, "4202640:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v2 = \" j\";\n
    v7 = 0;\n
    if (v8 >= a0)\n
    {\n
        v7 = cgc_output_number_printf((0 CONCAT v8) /m a0, a0, a1 - 1, a2);\n
        v8 = (0 CONCAT v8) /m a0 >> 32;\n
    }\n
    if (!v7 && a1 > 0)\n
    {\n
        while (true)\n
        {\n
            a1 -= 1;\n
            if (!a1)\n
                break;\n
            if ((a2 & 1))\n
            {\n
                v6 = 48;\n
                cgc_transmit(1, &v6, 1);\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                cgc_transmit(1, &v5, 1);\n
            }\n
        }\n
    }\n
    if ((a2 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v4 = v1;\n
        cgc_transmit(1, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v3 = v0;\n
        cgc_transmit(1, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4203131:sub_40227b": null, "4203136:cgc_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf(char *v18)\n
{\n
    char *v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x58]\n
    char v4;  // [bp-0x51]\n
    char v5;  // [bp-0x49]\n
    char v6;  // [bp-0x41]\n
    char v7;  // [bp-0x39]\n
    char v8;  // [bp-0x31]\n
    char v9;  // [bp-0x29]\n
    struct struct_0 **v10;  // [bp-0x28], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x24]\n
    void* v12;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x18]\n
    unsigned int v15;  // [bp-0x14]\n
    unsigned int v16;  // [bp-0x10]\n
    char *v17;  // [bp-0xc]\n
    char v19;  // [bp+0x8]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
\n
    v3 = \" j\";\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(v18))\n
    {\n
        v20 = v18;\n
        v18 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            cgc_transmit(1, &v4, 1);\n
LABEL_4025a5:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = v18;\n
                    v18 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(v18 - 1, &v18);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                cgc_transmit(1, &v8, 1);\n
                goto LABEL_40255d;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = *(v22);\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        cgc_transmit(1, &v6, 1);\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_printf(v16, 10, v12, v13);\n
                    goto LABEL_40255d;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        cgc_transmit(1, &v7, 1);\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_40255d;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    cgc_transmit(1, &v5, 1);\n
LABEL_40255d:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_4025a5;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_printf(v11, 16, v12, v13);\n
            goto LABEL_40255d;\n
        }\n
    }\n
    return v14;\n
}\n
", "4203955:sub_4025b3": null, "4203968:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    struct struct_0 **v8;  // eax\n
    unsigned int *v9;  // eax\n
    struct struct_0 **v10;  // eax\n
    unsigned int *v11;  // eax\n
\n
    v2 = \" j\";\n
    if (a1 >= a2)\n
    {\n
        cgc_output_number_sprintf(v7, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (a1 < a2 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v8 = a0;\n
            *(v8) = *(v8) + 1;\n
            v9 = v7;\n
            *(v9) = *(v9) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v10 = a0;\n
    *(v10) = *(v10) + 1;\n
    v11 = v7;\n
    *(v11) = *(v11) + 1;\n
    return v11;\n
}\n
", "4204439:sub_402797": null, "4204448:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    char *v16;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = \" j\";\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_402aaf:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_402a72;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = &*(v22)->field_0;\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_402a72;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_402a72;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_402a72:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_402aaf;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_402a72;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4205261:sub_402acd": null, "4205264:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \" j\";\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4205522:sub_402bd2": null, "4205536:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v3 = v0;\n
        v0 = v3 + 1;\n
        if (*(v3) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4205620:sub_402c34": null, "4205632:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(a0) - *(v2);\n
}\n
", "4205760:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4205844:sub_402d14": null, "4205856:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4205908:sub_402d54": null, "4205920:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4206136:sub_402e38": null, "4206144:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_402e88:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_402e88;\n
        if (a1 < 0)\n
            goto LABEL_402e88;\n
        while (true)\n
        {\n
            if (*(v6) != 32 && *(v6) != 9 && *(v6) != 12 && *(v6) != 10 && *(v6) != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_402f7f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_402f7f;\n
                v6 += 1;\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_402ff4;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_402ff4:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_403152;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_403112;\n
            }\n
            if (!v7)\n
            {\n
LABEL_403112:\n
                if (v8 >= a1)\n
                    goto LABEL_403152;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_403109;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_403109:\n
                v8 += 10;\n
                goto LABEL_403112;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_403088;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_403088:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_403152:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4207006:sub_40319e": null, "4207008:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4207067:sub_4031db": null, "4207072:cgc_read_n": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_n(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    v3 = a0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v3 - a0;\n
        v0 = &v2;\n
        if (cgc_receive(v5, v3, 1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v3 += 1;\n
        v4 += 1;\n
    }\n
    return v3 - a0;\n
}\n
", "4207225:sub_403279": null, "4207232:cgc_readuntil": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readuntil(unsigned int v5, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v6;  // eax\n
\n
    v1 = \" j\";\n
    v3 = a0;\n
    for (v4 = 0; v4 < a1; v4 += 1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5, v3, 1))\n
        {\n
LABEL_4032f2:\n
            break;\n
        }\n
        else\n
        {\n
            if (!*(&v2))\n
                goto LABEL_4032f2;\n
            v6 = v3;\n
            v3 = &v6->field_0;\n
            if (v6->field_-1 == a2)\n
                break;\n
        }\n
    }\n
    *((v3 - 1)) = 0;\n
    return v3 - a0;\n
}\n
", "4207422:sub_40333e": null, "4207424:cgc_cleanup_input": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_cleanup_input(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = \" j\";\n
    if (!v1)\n
        return v1;\n
    if (v1->field_8)\n
        cgc_free_pkk();\n
    if (!v1->field_10)\n
        return cgc_free(v1);\n
    cgc_free(v1->field_10);\n
}\n
", "4207539:sub_4033b3": null, "4207552:cgc_parse_input": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned short field_c;\n
    unsigned short field_e;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_input()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x18]\n
    char v4;  // [bp-0x12]\n
    char v5;  // [bp-0x10]\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = \" j\";\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = cgc_malloc(20);\n
    if (!v3)\n
    {\n
LABEL_4037a1:\n
        cgc_cleanup_input(v3);\n
        v6 = 0;\n
        return v6;\n
    }\n
    if (cgc_read_n(0, &v5, 4) == 4 && *(&v5) == 3630920913)\n
    {\n
        v2 += 4;\n
        if (!(cgc_read_n(0, &v5, 4) == 4))\n
            goto LABEL_4037a1;\n
        v2 += 4;\n
        v3->field_0 = *(&v5);\n
        if (cgc_read_n(0, &v5, 4) == 4 && *(&v5) == 52793398)\n
        {\n
            v2 += 4;\n
            if (!(cgc_read_n(0, &v5, 4) == 4))\n
                goto LABEL_4037a1;\n
            v2 += 4;\n
            v3->field_4 = *(&v5);\n
            if (v3->field_4 > 0 && v3->field_4 < 0x100000)\n
            {\n
                v1 = cgc_malloc(v3->field_4);\n
                if (!(cgc_read_n(0, v1, v3->field_4) == v3->field_4))\n
                    goto LABEL_4037a1;\n
                v3->field_8 = cgc_parse_pkk(v1);\n
                if (!v3->field_8)\n
                    goto LABEL_4037a1;\n
                v2 = v3->field_4 + v2;\n
            }\n
            if (cgc_read_n(0, &v5, 4) == 4 && *(&v5) == 3146098460)\n
            {\n
                v2 += 4;\n
                if (!(cgc_read_n(0, &v4, 2) == 2))\n
                    goto LABEL_4037a1;\n
                v2 += 2;\n
                v3->field_c = *(&v4);\n
                if (cgc_read_n(0, &v5, 4) == 4 && *(&v5) == 3220168169)\n
                {\n
                    v2 += 4;\n
                    if (!(cgc_read_n(0, &v4, 2) == 2))\n
                        goto LABEL_4037a1;\n
                    v2 += 2;\n
                    v3->field_e = *(&v4);\n
                    if (v3->field_e > 0)\n
                    {\n
                        if (!(v3->field_e <= 1000))\n
                            goto LABEL_4037a1;\n
                        v3->field_10 = cgc_malloc(v3->field_e);\n
                        if (!(cgc_read_n(0, v3->field_10, v3->field_e) == v3->field_e))\n
                            goto LABEL_4037a1;\n
                        v2 = v3->field_e + v2;\n
                    }\n
                    if (cgc_read_n(0, &v5, 4) == 4 && *(&v5) == 2875591408)\n
                    {\n
                        v2 += 4;\n
                        if (v2 == v3->field_0)\n
                        {\n
                            v6 = v3;\n
                            return v6;\n
                        }\n
                        goto LABEL_4037a1;\n
                    }\n
                    goto LABEL_4037a1;\n
                }\n
                goto LABEL_4037a1;\n
            }\n
            goto LABEL_4037a1;\n
        }\n
        goto LABEL_4037a1;\n
    }\n
    goto LABEL_4037a1;\n
}\n
", "4208575:sub_4037bf": null, "4208576:cgc_embed_text": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_embed_text(struct_0 *v10, char *a0, unsigned short a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    char v2;  // [bp-0x25]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    char *v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0xc]\n
\n
    v0 = \" j\";\n
    if (v10 && a0 && v10->field_8)\n
    {\n
        v5 = &v10->field_8->field_0;\n
        v8 = a1 + 10;\n
        if (v10->field_4 * v10->field_0 * 3 >> 3 < v8)\n
        {\n
            v9 = -1;\n
            return v9;\n
        }\n
        v7 = cgc_malloc(v8);\n
        if (!v7)\n
        {\n
            v9 = -1;\n
            return v9;\n
        }\n
        v6 = v7;\n
        *(&v6) = 3045274566;\n
        v6 += 4;\n
        *(&v6) = a1;\n
        v6 += 2;\n
        cgc_memcpy(v6, a0, a1);\n
        v6 = &v6[a1];\n
        *(&v6) = 84385816;\n
        for (v4 = 0; v4 < v8; v4 += 1)\n
        {\n
            v2 = v7[v4];\n
            for (v3 = 1; v3 <= 8; v3 += 1)\n
            {\n
                v1 = *(v5) & 1;\n
                if (v1 != (v2 >> ((8 - v3) & 31) & 1))\n
                {\n
                    if (!v1)\n
                        *(v5) = *(v5) | 1;\n
                    else\n
                        *(v5) = *(v5) & 4294967294;\n
                }\n
                v5 += 1;\n
            }\n
        }\n
        v9 = 0;\n
        return v9;\n
    }\n
    v9 = -1;\n
    return v9;\n
}\n
", "4209041:sub_403991": null, "4209056:cgc_recover_byte": "int cgc_recover_byte(struct struct_0 **v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // eax\n
\n
    v1 = 0;\n
    for (v2 = 0; v2 < 8; v2 += 1)\n
    {\n
        v1 *= 2;\n
        v0 = *(v3)->field_0 & 1;\n
        v1 |= v0;\n
        v4 = v3;\n
        *(v4) = *(v4) + 1;\n
    }\n
    return v1;\n
}\n
", "4209155:sub_403a03": null, "4209168:cgc_extract_text": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extract_text(struct_0 *v9, char *a0)\n
{\n
    char v0;  // [bp-0x2d]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned short v3;  // [bp-0x22]\n
    void* v4;  // [bp-0x20], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x14]\n
    char v7;  // [bp-0xd]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v2 = \" j\";\n
    if (v9 && a0 && v9->field_8)\n
    {\n
        v4 = 0;\n
        v6 = v9->field_8;\n
        for (v5 = 0; v5 < 4; v5 += 1)\n
        {\n
            v7 = cgc_recover_byte(&v6);\n
            v4 = v7 << (v5 * 8 & 31) & 255 << (v5 * 8 & 31) | v4;\n
        }\n
        if (v4 != 3045274566)\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
        for (v5 = 0; v5 < 2; v5 += 1)\n
        {\n
            v7 = cgc_recover_byte(&v6);\n
            v1 = v7 << (v5 * 8 & 31);\n
            v3 |= v1 & (255 << (v5 * 8 & 31));\n
        }\n
        v5 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v5 < v3)\n
                v0 = v5 < 1000;\n
            if (!(v0 & 1))\n
                break;\n
            v7 = cgc_recover_byte(&v6);\n
            a0[v5] = v7;\n
            v5 += 1;\n
        }\n
        v4 = 0;\n
        for (v5 = 0; v5 < 4; v5 += 1)\n
        {\n
            v7 = cgc_recover_byte(&v6);\n
            v4 = v7 << (v5 * 8 & 31) & 255 << (v5 * 8 & 31) | v4;\n
        }\n
        if (v4 == 84385816)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        v8 = -1;\n
        return v8;\n
    }\n
    v8 = -1;\n
    return v8;\n
}\n
", "4209686:sub_403c16": null, "4209696:main": "typedef struct struct_0 {\n
    char padding_0[8];\n
    void* field_8;\n
    unsigned short field_c;\n
    unsigned short field_e;\n
    char *field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v9, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x410]\n
    unsigned int v1;  // [bp-0x408]\n
    unsigned int v2;  // [bp-0x404]\n
    struct_0 *v3;  // [bp-0x400]\n
    unsigned int v4[2];  // [bp-0x3fc]\n
    char v5;  // [bp-0x3f8]\n
    char v6;  // [bp-0x3f4]\n
    void* v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v2 = \" j\";\n
    v7 = 0;\n
    v3 = cgc_parse_input();\n
    if (!v3)\n
    {\n
        cgc_printf(v2 - 6836);\n
        v7 = -1;\n
        return v7;\n
    }\n
    v1 = v3->field_c;\n
    if (v1 == 4919)\n
    {\n
        if (cgc_embed_text(v3->field_8, v3->field_10, v3->field_e))\n
        {\n
            cgc_printf(v2 - 6804);\n
        }\n
        else\n
        {\n
            v4[0] = cgc_output_pkk(v3->field_8);\n
            if (v4)\n
            {\n
                v0 = 0;\n
                cgc_transmit(1, v4, *(&v5));\n
                cgc_free(v4);\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (v1 != 29489)\n
        {\n
            cgc_printf(v2 - 6708);\n
        }\n
        else if (!cgc_extract_text(v3->field_8, &v6))\n
        {\n
            cgc_printf(v2 - 6725);\n
        }\n
        else\n
        {\n
            cgc_printf(v2 - 6765);\n
        }\n
    }\n
    cgc_cleanup_input(v3);\n
    v7 = 0;\n
    return v7;\n
}\n
", "4210218:sub_403e2a": null, "4210224:cgc_skip_whitespace": "int cgc_skip_whitespace(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (*(v2) != 10)\n
        {\n
            v1 = 1;\n
            if (*(v2) != 13)\n
            {\n
                v1 = 1;\n
                if (*(v2) != 32)\n
                    v1 = *(v2) == 9;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        if (!a0)\n
            break;\n
        v2 += 1;\n
        a0 -= 1;\n
    }\n
    return v2;\n
}\n
", "4210371:sub_403ec3": null, "4210384:cgc_parse_pkk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_pkk(char *v8, unsigned int a0)\n
{\n
    char v0;  // [bp-0x25]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4[3];  // [bp-0x18], Other Possible Types: struct_0 *\n
    char *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10]\n
    unsigned int v7[3];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \" j\";\n
    v6 = 0;\n
    v5 = v8;\n
    v4[0] = 0;\n
    if (v8)\n
    {\n
        v4[0] = cgc_malloc(12);\n
        if (v4 && !cgc_memcmp(v5, v1 - 6685, 3))\n
        {\n
            v5 += 3;\n
            v5 = cgc_skip_whitespace(v5, a0 - 3);\n
            if (&v8[a0] > v5)\n
            {\n
                while (*(v5) == 35)\n
                {\n
                    while (true)\n
                    {\n
                        v0 = 0;\n
                        if (*(v5) != 10)\n
                            v0 = v5 < &v8[a0];\n
                        if (!(v0 & 1))\n
                            break;\n
                        v5 += 1;\n
                    }\n
                }\n
                if (&v8[a0] > v5)\n
                {\n
                    v2 = cgc_strtoul(v5, &v5, 10);\n
                    v3 = cgc_strtoul(v5, &v5, 10);\n
                    v5 = cgc_skip_whitespace(v5, &v8[a0] - v5);\n
                    if (cgc_strtoul(v5, &v5, 10) == 255)\n
                    {\n
                        v5 += 1;\n
                        v4 = cgc_malloc(12);\n
                        v4->field_0 = v3;\n
                        v4->field_4 = v2;\n
                        if (3 <= (0 CONCAT (0 CONCAT -1) /m v3) /m v2 && v5 - v8 + v2 * v3 * 3 <= a0)\n
                        {\n
                            v4->field_8 = cgc_malloc(v2 * v3 * 3);\n
                            if (v4->field_8)\n
                            {\n
                                cgc_memcpy(v4->field_8, v5, v2 * v3 * 3);\n
                                v7[0] = v4;\n
                                return v7;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_free_pkk();\n
    v7 = 0;\n
    return v7;\n
}\n
", "4211083:sub_40418b": null, "4211088:cgc_free_pkk": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8[2];\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_pkk(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = \" j\";\n
    if (!v1)\n
        return v1;\n
    if (!v1->field_8)\n
        return cgc_free(v1);\n
    cgc_free(v1->field_8);\n
}\n
", "4211173:sub_4041e5": null, "4211184:cgc_output_pkk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_pkk(unsigned int v9[3], unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    char *v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20]\n
    char v4[3];  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6[3];  // [bp-0x14], Other Possible Types: unsigned int\n
    char v7[3];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v1 = \" j\";\n
    v5 = v9[1] * v9[0] * 3 + 58;\n
    *(&v4) = 0;\n
    *(&v4) = cgc_malloc(v5);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v5);\n
        *(&v6) = v4;\n
        cgc_strcpy(v6, v1 - 6685);\n
        *(&v6) = v6 + 1;\n
        v0 = v9[0];\n
        v3 = cgc_sprintf(v6, v1 - 6681);\n
        if (v3 != -1)\n
        {\n
            *(&v6) = &v6[v3];\n
            for (v2 = 0; v2 < v9[1] * v9[0]; v2 += 1)\n
            {\n
                *(v6) = *((v9[2] + v2 * 3));\n
                *((v6 + 1)) = *((v9[2] + v2 * 3 + 1));\n
                *((v6 + 2)) = *((v9[2] + v2 * 3 + 2));\n
                v6 += 1;\n
            }\n
            *(a0) = v6 - v4;\n
            *(&v7) = v4;\n
            return v7;\n
        }\n
    }\n
    if (v4)\n
        cgc_free(v4);\n
    *(a0) = 0;\n
    v7 = 0;\n
    return v7;\n
}\n
", "4211608:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_transmit": null, "5242888:cgc_allocate": null, "5242892:cgc_deallocate": null, "5242896:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}