{"4202496:_init": "extern struct_0 *g_40a124;\n
\n
int _init()\n
{\n
    if (g_40a124)\n
    {\n
        g_40a124();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 32827;\n
    v6 = v5 + 798;\n
    v7 = v5 + 798;\n
    if (v7 == v6)\n
        return v5 + 798;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32763;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 798;\n
    v9 = (v6 + 798 - (v6 + 798) >> 31) + (798 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a120;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a120)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203066:sub_40223a": null, "4203072:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 1;\n
}\n
", "4203101:sub_40225d": null, "4203104:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 2;\n
}\n
", "4203133:sub_40227d": null, "4203136:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 16;\n
}\n
", "4203165:sub_40229d": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 14;\n
}\n
", "4203197:sub_4022bd": null, "4203200:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 12;\n
}\n
", "4203229:sub_4022dd": null, "4203232:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 4;\n
}\n
", "4203261:sub_4022fd": null, "4203264:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 8;\n
}\n
", "4203293:sub_40231d": null, "4203296:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 64;\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 32;\n
}\n
", "4203357:sub_40235d": null, "4203360:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 4294967168;\n
}\n
", "4203389:sub_40237d": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8488 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 2) >> 1);\n
}\n
", "4203451:sub_4023bb": null, "4203456:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203490:sub_4023e2": null, "4203504:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203566:sub_40242e": null, "4203568:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203602:sub_402452": null, "4203616:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203648:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_4025bd;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_4025bd:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4203987:sub_4025d3": null, "4204000:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204352:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204448:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_0 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_0 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_0 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_4029f1;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_4029f1:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4204799:sub_4028ff": null, "4205051:sub_4029fb": null, "4205056:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_402a58;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402a70;\n
LABEL_402a58:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402a70;\n
    }\n
LABEL_402a70:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205193:sub_402a89": null, "4205200:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct struct_0 **v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    struct struct_0 **v10;  // ecx\n
    unsigned int v11;  // edx\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ebp\n
    char *v14;  // edi\n
    unsigned int v15;  // ebx\n
    struct struct_0 **v16;  // eax, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v8 = v6->field_8;\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(v6->field_0, &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = v6->field_14;\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *(v9 + v16);\n
    }\n
    else if (v8 != v6->field_c)\n
    {\n
LABEL_402b89:\n
        v7->field_8 = v8 + 1;\n
        v16 = *(24 + &v7->field_0 + v8);\n
        return v16;\n
    }\n
    else\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (cgc_receive(v6->field_0, v6 + 1, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            v6->field_c = v13;\n
            v10 = v6->field_14;\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *(24 + &v7->field_0 + v12) = *(v10 + *(24 + &v7->field_0 + v12));\n
                        *(25 + &v7->field_0 + v12) = *(v10 + *(25 + &v7->field_0 + v12));\n
                        *(26 + &v7->field_0 + v12) = *(v10 + *(26 + &v7->field_0 + v12));\n
                        *(27 + &v7->field_0 + v12) = *(v10 + *(27 + &v7->field_0 + v12));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = 24 + v12 + v7;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v14[v15] = *(v10 + v14[v15]);\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = v7->field_8;\n
                goto LABEL_402b89;\n
            }\n
        }\n
    }\n
}\n
", "4205537:sub_402be1": null, "4205552:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205592:sub_402c18": null, "4205600:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_1 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402c8e:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402c8e;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206190:sub_402e6e": null, "4206192:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206560:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206600:sub_403008": null, "4206608:cgc_malloc_alloc": "extern char g_408108;\n
extern char g_40813a;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v4;  // [bp-0x14]\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v43;  // eax\n
\n
    v9 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_403324:\n
        return v9;\n
    }\n
    v10 = v8;\n
    v11 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 <= 15)\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 > 131071)\n
    {\n
        v14 = v11 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v9 = 0;\n
        if (!cgc_allocate(v14, 0))\n
        {\n
            v17 = *(&v4);\n
            *(v17) = v8;\n
            *((v17 + 4)) = v14;\n
            v9 = v17 + 8;\n
            goto LABEL_403324;\n
        }\n
    }\n
    v12 = v11 + 23;\n
    v13 = v12 & -0x10;\n
    v2 = v13;\n
    if (!(v12 & -0x10))\n
    {\n
        v15 = -1;\n
        v16 = *((v10 + -0x4));\n
        if (!v16)\n
            goto LABEL_0x403294;\n
        else\n
            goto LABEL_0x4032b0;\n
    }\n
    else if (v13 < 513)\n
    {\n
        v15 = (v12 >> 4) + 2;\n
        v16 = 0;\n
    }\n
    else if (v13 <= 0x1200)\n
    {\n
        v15 = (v13 - 0x200 >> 7) + 34;\n
        v16 = *((v10 + v15 * 4));\n
        if (!v16)\n
            goto LABEL_0x403294;\n
        else\n
            goto LABEL_0x4032b0;\n
    }\n
    else\n
    {\n
        v15 = 130;\n
        if (v13 <= 0x20000)\n
        {\n
            v15 = (v13 - 0x1200 >> 11) + 66;\n
            v16 = *((v10 + v15 * 4));\n
            if (!v16)\n
                goto LABEL_0x403294;\n
            else\n
                goto LABEL_0x4032b0;\n
        }\n
    }\n
}\n
", "4207456:tiny_alloc": "int tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4207887:sub_40350f": null, "4207888:malloc_free": "int malloc_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v15;  // cl\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = v13;\n
    v38 = a0;\n
    if (!v38)\n
    {\n
LABEL_403831:\n
        return v38;\n
    }\n
    v23 = v10;\n
    v15 = *((v23 + (v38 >> 20) + 524));\n
    if (v15 != 2)\n
    {\n
        if (v15 == 1)\n
        {\n
            v24 = *((v38 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v17 = v24 / 4 - 1;\n
                goto LABEL_403696;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v17 = (v24 >> 4) + 2;\n
                goto LABEL_403696;\n
            }\n
        }\n
        if (!(!v15))\n
            goto LABEL_403831;\n
        if ((v38 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else\n
        {\n
            v20 = *((v38 - 8));\n
            if (v20 != v23)\n
            {\n
                v22 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v23;\n
            }\n
            else\n
            {\n
                v20 = *((v38 - 4));\n
                if (v20 - 0x20000 <= 2147356671 && !(v20 & 4095))\n
                {\n
                    v38 = cgc_deallocate(v38 - 8);\n
                    goto LABEL_403831;\n
                }\n
                v22 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v20;\n
            v38 = cgc_heap_error(v22, v38);\n
        }\n
    }\n
    else if (!(v38 & 7))\n
    {\n
        v24 = v38 - 8;\n
        v16 = *((v24 + 4));\n
        if ((v16 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else if (v16 - 131073 <= -131058)\n
        {\n
            v19 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else\n
        {\n
            v21 = *(v24);\n
            v12 = v24 - *(v24);\n
            if (!*(v24))\n
                v12 = v21;\n
            v23 = v16 + v24;\n
            v2 = v24;\n
            if (v12)\n
            {\n
                v4 = v23;\n
                v3 = *((v12 + 4));\n
                if (!((v3 & -2) == v21))\n
                    goto LABEL_403894;\n
                v23 = v4;\n
                v24 = v3;\n
                if (*(v23) == v16)\n
                {\n
                    if ((v24 & 1))\n
                    {\n
                        if (v21 <= 15)\n
                        {\n
                            v25 = v24 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v21 <= 0x200)\n
                            {\n
                                v25 = (v24 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v21 <= 0x1200)\n
                                {\n
                                    v25 = (v21 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v25 = 130;\n
                                    if (v21 <= 0x20000)\n
                                        v25 = (v21 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v12 + 4)) = v21;\n
                        v26 = *((v12 + 8));\n
                        if (v26)\n
                            *((v26 + 12)) = *((v12 + 12));\n
                        v27 = *((v12 + 12));\n
                        if (v27)\n
                            *((v27 + 8)) = v26;\n
                        if (*((v10 + (v25 << 2))) == v12)\n
                            *((v10 + v25 * 4)) = v27;\n
                        *((v12 + 8)) = 0;\n
                        *((v12 + 12)) = 0;\n
                        v28 = v21 + *((v2 + 4));\n
                        *((v12 + 4)) = v28;\n
                        *(v23) = v28;\n
                        v2 = v12;\n
                    }\n
LABEL_40371c:\n
                    v29 = *((v23 + 4));\n
                    v30 = v10;\n
                    v12 = v2;\n
                    if ((v29 & 1))\n
                    {\n
                        v31 = v29 & -2;\n
                        if (v31 <= 15)\n
                        {\n
                            v32 = v29 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v31 <= 0x200)\n
                            {\n
                                v32 = (v29 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v31 <= 0x1200)\n
                                {\n
                                    v32 = (v31 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v32 = 130;\n
                                    if (v31 <= 0x20000)\n
                                        v32 = (v31 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v23 + 4)) = v31;\n
                        v33 = *((v23 + 8));\n
                        if (v33)\n
                            *((v33 + 12)) = *((v23 + 12));\n
                        v34 = *((v23 + 12));\n
                        if (*((v23 + 12)))\n
                            *((v34 + 8)) = v33;\n
                        v30 = v10;\n
                        if (*((v30 + (v32 << 2))) == v23)\n
                            *((v30 + v32 * 4)) = v34;\n
                        *((v23 + 8)) = 0;\n
                        *((v23 + 12)) = 0;\n
                        v12 = v2;\n
                        v35 = v31 + *((v12 + 4));\n
                        *((v12 + 4)) = v35;\n
                        *((v12 + v35)) = v35;\n
                    }\n
                    v36 = *((v12 + 4));\n
                    if (v36 <= 15)\n
                    {\n
                        v37 = v36 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v36 <= 0x200)\n
                        {\n
                            v37 = (v36 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v36 <= 0x1200)\n
                            {\n
                                v37 = (v36 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v37 = 130;\n
                                if (v36 <= 0x20000)\n
                                    v37 = (v36 - 0x1200 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(!(v36 & 1)))\n
                        goto LABEL_403884;\n
                    *((v12 + 4)) = v36 | 1;\n
                    *((v12 + 8)) = 0;\n
                    *((v12 + 12)) = *((v30 + v37 * 4));\n
                    *((v30 + v37 * 4)) = v12;\n
                    v38 = *((v12 + 12));\n
                    if (v38)\n
                    {\n
                        *((v38 + 8)) = v12;\n
                        goto LABEL_403831;\n
                    }\n
                }\n
            }\n
            else if (*((v24 + v16)) == v16)\n
            {\n
                goto LABEL_40371c;\n
            }\n
            v0 = v38;\n
            v38 = cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v23);\n
            v17 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_403696:\n
            *(v38) = *((v23 + v17 * 4));\n
            *((v23 + v17 * 4)) = v38;\n
            goto LABEL_403831;\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40387d:\n
    v8 = v38;\n
    v7 = v19;\n
    cgc_heap_error(*(&v9));\n
LABEL_403884:\n
    v6 = v12;\n
    v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v38 = cgc_heap_error(*(&v9));\n
LABEL_403894:\n
    v7 = v38;\n
    v6 = v12;\n
    v5 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v10, a0);\n
    return cgc_malloc_size(v10, a0);\n
}\n
", "4208816:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208865:sub_4038e1": null, "4208880:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_4039c5:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4039bd:\n
        malloc_free(v1, a0);\n
        goto LABEL_4039c5;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4039a0;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4039a0:\n
        v3 = v4;\n
        goto LABEL_4039c5;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_4039c5;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4039bd;\n
}\n
", "4209103:sub_4039cf": null, "4209104:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4209168:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v2 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4209223:sub_403a47": null, "4209232:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4209295:sub_403a8f": null, "4209296:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209426:sub_403b12": null, "4209440:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209734:sub_403c46": null, "4209744:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4209854:sub_403cbe": null, "4209856:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4209969:sub_403d31": null, "4209984:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4210091:sub_403dab": null, "4210096:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4210205:sub_403e1d": null, "4210208:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4210311:sub_403e87": null, "4210320:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210368:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210411:sub_403eeb": null, "4210416:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // ebx\n
    unsigned int v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    char v78;  // eax\n
    unsigned int v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210486:sub_403f36": null, "4212000:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4212044:sub_40454c": null, "4212048:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2;  // al, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212166:sub_4045c6": null, "4212176:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212265:sub_404629": null, "4212272:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v0[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4212342:sub_404676": null, "4212352:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212420:sub_4046c4": null, "4212432:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212484:sub_404704": null, "4212496:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212576:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212608:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212736:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4212817:sub_404851": null, "4212832:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4212921:sub_4048b9": null, "4212928:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_404921;\n
                goto LABEL_40491f;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_404921;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_40491f:\n
    v4 = 0;\n
LABEL_404921:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4213058:sub_404942": null, "4213072:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4213160:sub_4049a8": null, "4213168:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    char v11;  // al\n
    unsigned int v12;  // eax, Other Possible Types: char\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ecx\n
    char v25[2];  // ebp, Other Possible Types: unsigned int\n
    void* v26;  // esi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v25 = v10;\n
    if (v12)\n
    {\n
        v25 = v10;\n
        do\n
        {\n
            if (!*(v25))\n
            {\n
                v21 = 0;\n
                v23 = 1;\n
                v24 = 1;\n
                v26 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404ba0;\n
            }\n
            v11 = *((v25 + 1));\n
            v25 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v25) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v25) == 43)\n
            v25 += 1;\n
        if (!v13)\n
            goto LABEL_404a78;\n
    }\n
    else\n
    {\n
        v25 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404a78:\n
            *(&v12) = *(v25);\n
            if (*(v25) != 48)\n
            {\n
LABEL_404ab3:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404b80;\n
LABEL_404acb:\n
                *(&v12) = *(v25);\n
LABEL_404ace:\n
                if (!v12)\n
                {\n
LABEL_404b80:\n
                    v21 = 0;\n
                    v24 = 1;\n
                    v26 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404ba0;\n
LABEL_404b95:\n
                    tmp_2 = v24;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v25;\n
                    *(v22) = v27;\n
                    goto LABEL_404ba0;\n
                }\n
LABEL_404ad6:\n
                v26 = 0;\n
                v21 = 0;\n
                v24 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v24;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v25);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                        v17 = v1;\n
                        if (!(v16 < v17))\n
                            goto LABEL_404bc3;\n
                    }\n
                    else\n
                    {\n
                        v19 = *(v25);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v19 - 87;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404bc3;\n
                        }\n
                        else if (!cgc_isupper(v19))\n
                        {\n
LABEL_404bc3:\n
                            v22 = a0;\n
                            v23 = v0;\n
                            v24 = v2;\n
                            if (!v22)\n
                                goto LABEL_404ba0;\n
                            goto LABEL_404b95;\n
                        }\n
                        else\n
                        {\n
                            v16 = *(v25) - 55;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404bc3;\n
                        }\n
                    }\n
                    v20 = v17 * v26;\n
                    tmp_5 = v20;\n
                    v26 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v21 = 1;\n
                    v12 = *((v25 + 1));\n
                    v25 += 1;\n
                    v24 = 0;\n
                } while (v12);\n
                goto LABEL_404b95;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v25 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v25 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404ad6;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v25);\n
                    goto LABEL_404ab3;\n
                }\n
                else\n
                {\n
                    v25 += 2;\n
                }\n
            }\n
LABEL_404aa9:\n
            v13 = 16;\n
            goto LABEL_404acb;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_404acb;\n
    *(&v12) = *(v25);\n
    v13 = 16;\n
    if (!(*(v25) == 48))\n
        goto LABEL_404ace;\n
    v25 += (cgc_tolower(*((v25 + 1))) == 120) * 2;\n
    goto LABEL_404aa9;\n
LABEL_404ba0:\n
    v28 = (!v21 ? 0x80000000 : -(v26));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v26);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213527:sub_404b17": null, "4213717:sub_404bd5": null, "4213728:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax, Other Possible Types: char\n
    void* v16;  // edi\n
    void* v17;  // edi\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    char v32[2];  // ebp\n
    unsigned int v33;  // edi\n
    char v34[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax, Other Possible Types: unsigned int\n
    unsigned int v36;  // edx\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404cdc;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) != 45)\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (!v15)\n
            goto LABEL_404ca6;\n
        goto LABEL_404c50;\n
    }\n
    else\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (v15)\n
        {\n
LABEL_404c50:\n
            if (v15 == 16)\n
            {\n
                *(&v15) = *(v34);\n
                if (*(v34) == 48)\n
                {\n
                    v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
                    v0 = 16;\n
                    goto LABEL_404d45;\n
                }\n
                else\n
                {\n
                    v0 = 16;\n
                    if (!(!v15))\n
                        goto LABEL_404d4c;\n
                    goto LABEL_404cda;\n
                }\n
            }\n
        }\n
        else\n
        {\n
LABEL_404ca6:\n
            *(&v15) = *(v34);\n
            if (*(v34) == 48)\n
            {\n
                *(&v15) = *((v34 + 1));\n
                if ((v15 & 248) == 48)\n
                {\n
                    v1 = v36;\n
                    v34 += 1;\n
                    v0 = 8;\n
                    goto LABEL_404d50;\n
                }\n
                v15 = cgc_tolower(v15);\n
                if (v15 != 120)\n
                {\n
                    *(&v15) = *(v34);\n
                }\n
                else\n
                {\n
                    v34 += 2;\n
                    v0 = 16;\n
                    goto LABEL_404d45;\n
                }\n
            }\n
            v1 = v36;\n
            v15 = cgc_isdigit(v15);\n
            v0 = 10;\n
            if (!v15)\n
            {\n
                v14 = 0;\n
                v37 = 1;\n
                v2 = 0;\n
                v16 = 0;\n
                v35 = a0;\n
                v36 = v1;\n
                if (!v35)\n
                    goto LABEL_404e67;\n
LABEL_404e5c:\n
                tmp_2 = v37;\n
                v38 = v8;\n
                if (!tmp_2)\n
                    v38 = v34;\n
                *(v35) = v38;\n
            }\n
            else\n
            {\n
                v36 = v1;\n
LABEL_404d45:\n
                *(&v15) = *(v34);\n
                if (*(v34))\n
                {\n
LABEL_404d4c:\n
                    v1 = v36;\n
LABEL_404d50:\n
                    v2 = 0;\n
                    v18 = 0;\n
                    v14 = 0;\n
                    v37 = 1;\n
                    do\n
                    {\n
                        *(&v3) = v37;\n
                        v19 = cgc_isdigit(v15);\n
                        v20 = *(v34);\n
                        if (v19)\n
                        {\n
                            v21 = v20 - 48;\n
                            v22 = v0;\n
                            if (!(v21 < v22))\n
                                goto LABEL_404e2d;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v34);\n
                            if (cgc_islower(v20))\n
                            {\n
                                v21 = v24 - 87;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e2d;\n
                            }\n
                            else if (!cgc_isupper(v24))\n
                            {\n
LABEL_404e2d:\n
                                v35 = a0;\n
                                v36 = v1;\n
                                v37 = v3;\n
                                if (!v35)\n
                                    goto LABEL_404e67;\n
                                goto LABEL_404e5c;\n
                            }\n
                            else\n
                            {\n
                                v21 = *(v34) - 55;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e2d;\n
                            }\n
                        }\n
                        *(&v3) = v34;\n
                        v25 = v2;\n
                        v26 = v25 * (v22 >> 31);\n
                        v27 = v14;\n
                        v28 = v22;\n
                        tmp_67 = v25 * v22;\n
                        v29 = v25 * v22 >> 32;\n
                        v30 = tmp_67;\n
                        v31 = v28 * v18 + v26 + v29;\n
                        v32 = v3;\n
                        v33 = v21 >> 31;\n
                        v2 = v30 + v21;\n
                        tmp_41 = v33;\n
                        v18 = v33 + v31 + (v30 + v21 < v30);\n
                        v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                        v15 = v32[1];\n
                        v34 = &v32[1];\n
                        v37 = 0;\n
                    } while (v15);\n
                    goto LABEL_404e67;\n
                }\n
LABEL_404cda:\n
                v14 = 0;\n
LABEL_404cdc:\n
                v37 = 1;\n
                v2 = 0;\n
                v17 = 0;\n
                v35 = a0;\n
                if (!v35)\n
                    goto LABEL_404e67;\n
                goto LABEL_404e5c;\n
            }\n
        }\n
    }\n
LABEL_404e67:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214171:sub_404d9b": null, "4214424:sub_404e98": null, "4214432:cgc_print_menu": "int cgc_print_menu()\n
{\n
    cgc_printf(\"1. Compress\\n
\");\n
    cgc_printf(\"2. Decompress\\n
\");\n
    return cgc_printf(\"3. Quit\\n
\");\n
}\n
", "4214495:sub_404edf": null, "4214496:cgc_handle_compress": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_compress()\n
{\n
    unsigned short v0;  // [bp-0x109a]\n
    void* v1;  // [bp-0x1098]\n
    void* v2;  // [bp-0x1094]\n
    unsigned short v3;  // [bp-0x108e]\n
    unsigned int v4;  // [bp-0x108c]\n
    unsigned int v5;  // [bp-0x1088]\n
    unsigned int v6;  // [bp-0x1084]\n
    void* v7;  // [bp-0x1080]\n
    unsigned int v8;  // [bp-0x107c]\n
    void* v9;  // [bp-0x1078]\n
    char v10;  // [bp-0x1070]\n
    unsigned int v11;  // [bp-0x106f]\n
    char v13;  // [bp-0x1010]\n
    unsigned int v15[26];  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ecx\n
    char v19;  // dl\n
    unsigned int v20;  // ecx\n
    char v21;  // dl\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_printf(\"Key?\\n
\");\n
    v15 = 0;\n
    v16 = \"error.\\n
\";\n
    if (cgc_fread(&v11, 95, cgc_stdin) == 95)\n
    {\n
        cgc_memset(&v13, 0, 0x1000);\n
        v17 = 1;\n
        while (true)\n
        {\n
            v18 = (&v10)[v17];\n
            if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x7f<8>)), 0xa1<32>, 0x0<32>))\n
                break;\n
            v19 = (&v13)[v18];\n
            (&v13)[v18] = v19 + 1;\n
            if (v19)\n
                break;\n
            if (v17 == 95)\n
            {\n
                cgc_printf(\"Data?\\n
\");\n
                cgc_memset(&v13, 0, 0x1000);\n
                cgc_fflush(cgc_stdout);\n
                if (cgc_freaduntil(&v13, 0x1000, 0, cgc_stdin) >= 0)\n
                {\n
                    v15 = cgc_sc_new();\n
                    *((v15 + 96)) = &v13;\n
                    *((v15 + 100)) = cgc_strlen(&v13);\n
                    if (cgc_sc_scompress(v15, &v2) >= 0)\n
                    {\n
                        cgc_printf(\"Original Size: %d\\n
\");\n
                        v6 = v1;\n
                        v7 = 0;\n
                        if ([D] GetI(136:I8x8)[t14,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v8 = *((v15 + 100));\n
                        v9 = 0;\n
                        if (![D] GetI(136:I8x8)[t14,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t20,1] = t21\n
                        [D] PutI(136:I8x8)[t20,1] = 0x01\n
                        [D] PutI(136:I8x8)[t20,0] = 0x00\n
                        [D] PutI(72:F64x8)[t42,0] = t43\n
                        [D] PutI(136:I8x8)[t42,0] = 0x01\n
                        v0 = [D] x86g_create_fpucw(fpround<4>);\n
                        v3 = v0 | 0xc00;\n
                        v5 = ([D] GetI(136:I8x8)[t80,0] ? [D] GetI(72:F64x8)[t80,0] : nan);\n
                        [D] PutI(136:I8x8)[t80,0] = 0x00\n
                        cgc_printf(\"Compressed Size: %d (%d%%)\\n
\");\n
                        cgc_printf(\"Compressed Data: \");\n
                        v16 = \"\\n
\";\n
                        if (v1)\n
                        {\n
                            v4 = \"\\n
\";\n
                            v22 = 0;\n
                            while (true)\n
                            {\n
                                cgc_printf(\"%02X\");\n
                                if (v22 > 30)\n
                                    break;\n
                                v22 += 1;\n
                                if (v22 >= v1)\n
                                    break;\n
                            }\n
                            v16 = v4;\n
                            break;\n
                        }\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                v20 = *(&v11 + v17);\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x7f<8>)), 0xa1<32>, 0x0<32>))\n
                    break;\n
                v21 = (&v13)[v20];\n
                (&v13)[v20] = v21 + 1;\n
                if (v21)\n
                    break;\n
                v17 += 2;\n
            }\n
        }\n
    }\n
    cgc_printf(v16);\n
    if (v15)\n
        cgc_free(v15);\n
    v23 = v2;\n
    if (v23)\n
        v23 = cgc_free(v23);\n
    return v23;\n
}\n
", "4215173:sub_405185": null, "4215184:cgc_handle_decompress": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_decompress()\n
{\n
    void* v0;  // [bp-0x1080]\n
    unsigned int v1;  // [bp-0x107c]\n
    void* v2;  // [bp-0x1078]\n
    unsigned int v3;  // [bp-0x1074]\n
    char v4;  // [bp-0x1070]\n
    unsigned int v5;  // [bp-0x106f]\n
    char v7;  // [bp-0x1010]\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
    char v11;  // dl\n
    unsigned int v12;  // ecx\n
    char v13;  // dl\n
    unsigned int v14;  // eax\n
    unsigned int v15[26];  // esi\n
    void* v16;  // edi\n
\n
    v0 = 0;\n
    v2 = 0;\n
    cgc_printf(\"Key?\\n
\");\n
    if (cgc_fread(&v5, 95, cgc_stdin) == 95)\n
    {\n
        cgc_memset(&v7, 0, 0x1000);\n
        v9 = 1;\n
        while (true)\n
        {\n
            v10 = (&v4)[v9];\n
            if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x7f<8>)), 0xa1<32>, 0x0<32>))\n
                break;\n
            v11 = (&v7)[v10];\n
            (&v7)[v10] = v11 + 1;\n
            if (!(!v11))\n
                break;\n
            if (v9 == 95)\n
            {\n
                cgc_printf(\"Length?\\n
\");\n
                cgc_memset(&v7, 0, 0x1000);\n
                v3 = cgc_stdout;\n
                cgc_fflush(cgc_stdout);\n
                if (cgc_freaduntil(&v7, 0x1000, 10, cgc_stdin) < 0)\n
                    break;\n
                v1 = cgc_strtoul(&v7, NULL, 10);\n
                if (v1 > 0x1000)\n
                    break;\n
                cgc_printf(\"Data?\\n
\");\n
                cgc_memset(&v7, 0, 0x1000);\n
                if (cgc_fread(&v7, v1, cgc_stdin) < 0)\n
                    break;\n
                v15 = cgc_sc_new();\n
                v15[24] = &v7;\n
                v15[25] = v1;\n
                if (cgc_sc_sdecompress(v15, &v0) < 0)\n
                {\n
                    cgc_printf(\"error.\\n
\");\n
                }\n
                else\n
                {\n
                    cgc_printf(\"Compressed Size: %d\\n
\");\n
                    cgc_strlen(v0);\n
                    cgc_printf(\"Original Size: %d\\n
\");\n
                    cgc_printf(\"Original Data: \");\n
                    v16 = v3;\n
                    cgc_fwrite(v0, v2, v16);\n
                    cgc_fwrite(\"\\n
\", 1, v16);\n
                }\n
                cgc_free(v15);\n
                v14 = v0;\n
                if (!v14)\n
                    return v14;\n
                v14 = cgc_free(v14);\n
                goto LABEL_4053c1;\n
                goto LABEL_4053c1;\n
            }\n
            else\n
            {\n
                v12 = *(&v5 + v9);\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x7f<8>)), 0xa1<32>, 0x0<32>))\n
                    break;\n
                v13 = (&v7)[v12];\n
                (&v7)[v12] = v13 + 1;\n
                if (v13)\n
                    break;\n
                v9 += 2;\n
            }\n
        }\n
    }\n
    v14 = cgc_printf(\"error.\\n
\");\n
LABEL_4053c1:\n
    return v14;\n
}\n
", "4215808:main": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    char v5[2];  // [bp-0x18]\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
\n
    cgc_fbuffered(cgc_stdin, 1);\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"\\n
\");\n
    v2 = \"1. Compress\\n
\";\n
    cgc_printf(\"1. Compress\\n
\");\n
    v1 = \"2. Decompress\\n
\";\n
    cgc_printf(\"2. Decompress\\n
\");\n
    v0 = \"3. Quit\\n
\";\n
    cgc_printf(\"3. Quit\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(v5, 8, 10, cgc_stdin) < 0)\n
        return -1;\n
    v7 = cgc_strtoul(v5, NULL, 10);\n
    if (v7 == 1)\n
    {\n
        cgc_handle_compress();\n
    }\n
    else if (v7 == 2)\n
    {\n
        cgc_handle_decompress();\n
    }\n
    else if (v7 != 3)\n
    {\n
        cgc_printf(\"Invalid menu.\\n
\");\n
    }\n
    else\n
    {\n
        cgc_printf(\"Bye.\\n
\");\n
        cgc_fflush(cgc_stdout);\n
        cgc_exit();\n
    }\n
    cgc_printf(v2);\n
    cgc_printf(v1);\n
    cgc_printf(v0);\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(v5, 8, 10, v5) < 0)\n
        return -1;\n
    v4 = \"Bye.\\n
\";\n
    v3 = \"Invalid menu.\\n
\";\n
    do\n
    {\n
        v8 = cgc_strtoul(v5, NULL, 10);\n
        if (v8 == 3)\n
        {\n
            cgc_printf(v4);\n
            cgc_fflush(cgc_stdout);\n
            cgc_exit();\n
        }\n
        else if (v8 == 2)\n
        {\n
            cgc_handle_decompress();\n
        }\n
        else if (v8 == 1)\n
        {\n
            cgc_handle_compress();\n
        }\n
        else\n
        {\n
            cgc_printf(v3);\n
        }\n
        cgc_printf(v2);\n
        cgc_printf(v1);\n
        cgc_printf(v0);\n
        cgc_fflush(cgc_stdout);\n
    } while (cgc_freaduntil(v5, 8, 10, v5) >= 0);\n
    return -1;\n
}\n
", "4216275:sub_4055d3": null, "4216446:sub_40567e": null, "4216458:sub_40568a": null, "4216494:sub_4056ae": null, "4216496:cgc_bit_new": "int cgc_bit_new(unsigned int v0)\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = cgc_malloc(12);\n
    v1[0] = v0;\n
    v1[1] = 0;\n
    v1[2] = 0;\n
    return v1;\n
}\n
", "4216549:sub_4056e5": null, "4216560:cgc_bit_read": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_bit_read(struct_0 *v3, unsigned int a0)\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_37;  // tmp #37\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x14]\n
    unsigned int v4;  // esi\n
    struct_0 *v5;  // ebp\n
    char *v6;  // edx\n
    char *v7;  // ecx, Other Possible Types: unsigned int\n
    void* v8;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // esi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = a0;\n
    if (!v4)\n
        return 0;\n
    v5 = v3;\n
    v7 = v3->field_0;\n
    v8 = v3->field_8;\n
    v2 = v7;\n
    v1 = v3->field_4;\n
    v0 = v7[v1];\n
    v10 = v4 - 1;\n
    v11 = 0;\n
    do\n
    {\n
        if (v8 == 8)\n
        {\n
            v6 = v1 + 1;\n
            v5->field_4 = v6;\n
            v7 = v2;\n
            v8 = 0;\n
            v1 = v6;\n
        }\n
        v0 = v7;\n
        *(&v11) = v11 | ((1 << (7 - v8 & 31) & v7) >> (7 - v8 & 31)) << (v10 & 31);\n
        v8 += 1;\n
        v5->field_8 = v8;\n
        tmp_37 = v10;\n
        v9 = v10 - 1;\n
        v10 = v9;\n
    } while ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t37, 0xffffffff<32>, 0x0<32>));\n
    return v11;\n
}\n
", "4216610:sub_405722": null, "4216710:sub_405786": null, "4216720:cgc_bit_write": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_bit_write(struct_0 *v1, char a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx, Other Possible Types: char\n
    unsigned int v5;  // esi\n
    void* v6;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v7;  // edi, Other Possible Types: unsigned int\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    char v9;  // dl\n
    unsigned int v10;  // edi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v8 = v3->field_0;\n
    v5 = v3->field_4;\n
    v4 = v3->field_0[v5].field_0;\n
    if (!a1)\n
    {\n
        v9 = v4;\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v6 = v3->field_8;\n
        v3 = 7;\n
        do\n
        {\n
            if (v6 != 8)\n
            {\n
                v7 = v1;\n
            }\n
            else\n
            {\n
                *((v8 + v5)) = v4;\n
                v7 = v1;\n
                v8 = v7->field_0;\n
                v4 = v7->field_4;\n
                v5 = v4 + 1;\n
                v7->field_4 = v5;\n
                *(&v4) = *((v8 + v4 + 1));\n
                v6 = 0;\n
            }\n
            v9 = ((1 << (v3 & 31) & v0) >> (v3 & 31)) << (7 - v6 & 31) | v4;\n
            v6 += 1;\n
            *((v7 + 8)) = v6;\n
            v10 = a1 + v3 - 1;\n
            v3 -= 1;\n
            *(&v4) = v9;\n
        } while (v10 != 7);\n
    }\n
    *((v8 + v5)) = v9;\n
    return v3;\n
}\n
", "4216763:sub_4057bb": null, "4216866:sub_405822": null, "4216880:cgc__find_char": "int cgc__find_char(char *v0, char a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v2 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4216930:sub_405862": null, "4216944:cgc__sc_compare": "int cgc__sc_compare(char *v0, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    char *v3;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    void* v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
\n
    v1 = a2;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = *((a0 + v3));\n
        v5 = *((a1 + v3));\n
        if (v4 != v5)\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                if (v2[v6] == v4)\n
                {\n
                    v7 = &v2[v6];\n
                    goto LABEL_4058c2;\n
                }\n
                v6 += 1;\n
            } while (v1 != v6);\n
            v7 = 0;\n
LABEL_4058c2:\n
            v8 = 0;\n
            while (true)\n
            {\n
                if (v2[v8] != v5)\n
                {\n
                    v8 += 1;\n
                    if (v1 == v8)\n
                        goto LABEL_4058ea;\n
                }\n
                else\n
                {\n
                    if (v7)\n
                        return v7 - v2 - v8;\n
LABEL_4058ea:\n
                    return v4 - v5;\n
                }\n
            }\n
        }\n
        v3 += 1;\n
    } while (v1 != v3);\n
}\n
", "4217073:sub_4058f1": null, "4217088:cgc_sc_new": "typedef struct struct_0 {\n
    char padding_0[104];\n
    unsigned int field_68;\n
} struct_0;\n
\n
int cgc_sc_new(char *v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = cgc_malloc(108);\n
    cgc_memset(v1, 0, 108);\n
    cgc_memcpy(v1, v0, 95);\n
    v1->field_68 = cgc__sc_compare;\n
    return v1;\n
}\n
", "4217165:sub_40594d": null, "4217168:cgc_sc_scompress": "int cgc_sc_scompress(unsigned int v3[26], unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: char\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4[26];  // ebp\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // ecx\n
    unsigned int *v8;  // esi\n
\n
    v4 = v3;\n
    if (!v3)\n
    {\n
        return -1;\n
    }\n
    else if (!a0)\n
    {\n
        return -1;\n
    }\n
    else if (!*(&v0))\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v1 = v4[24];\n
        v2 = v4[25];\n
        v0 = a1;\n
        v6 = cgc_sc_bwt(v4, 0);\n
        if (v6)\n
        {\n
            v4[24] = v6;\n
            v7 = a1;\n
            v4[25] = *(v7);\n
            v0 = v7;\n
            v8 = a0;\n
            *(v8) = cgc_sc_mtf(v4, 0);\n
            cgc_free(v6);\n
            v4[24] = v1;\n
            v4[25] = v2;\n
            return -(*(v8) < 1);\n
        }\n
        return -1;\n
    }\n
}\n
", "4217324:sub_4059ec": null, "4217328:cgc_sc_bwt": "typedef struct struct_1 {\n
    char padding_0[96];\n
    struct struct_2 *field_60;\n
    unsigned int field_64;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[100];\n
    unsigned int field_64;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sc_bwt(struct_1 *v18, unsigned int a0, unsigned int *a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x248]\n
    int tmp_8;  // tmp #8\n
    struct struct_0 **v1;  // [bp-0x244]\n
    struct struct_0 **v2;  // [bp-0x240], Other Possible Types: char\n
    struct struct_0 **v3;  // [bp-0x23c]\n
    struct struct_0 **v4;  // [bp-0x238]\n
    unsigned int v5;  // [bp-0x234]\n
    struct struct_0 **v6;  // [bp-0x230], Other Possible Types: unsigned int\n
    unsigned short *v7;  // [bp-0x22c]\n
    struct struct_0 **v8;  // [bp-0x228]\n
    struct struct_0 **v9;  // [bp-0x224]\n
    unsigned int v10;  // [bp-0x220]\n
    unsigned short *v11;  // [bp-0x21c], Other Possible Types: unsigned int\n
    unsigned short *v12;  // [bp-0x218]\n
    unsigned int v13;  // [bp-0x214]\n
    char v14;  // [bp-0x210]\n
    char v15;  // [bp-0x20f]\n
    char v16;  // [bp-0x20e]\n
    char v17;  // [bp-0x20d]\n
    struct_1 *v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // edi\n
    unsigned int *v23;  // edi\n
    struct struct_0 **v24;  // esi\n
    char *v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // esi\n
    unsigned short *v29;  // edx\n
    unsigned short *v30;  // edi, Other Possible Types: unsigned int\n
    unsigned short *v31;  // eax\n
    struct struct_0 **v32;  // edi, Other Possible Types: unsigned int\n
    unsigned int v33;  // esi\n
    struct struct_0 **v34;  // edi, Other Possible Types: unsigned int\n
    unsigned int v35;  // esi\n
    struct struct_0 **v36;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v37;  // ebx, Other Possible Types: unsigned int\n
    struct struct_0 **v38;  // ebp\n
    struct struct_0 **v39;  // edi, Other Possible Types: unsigned int\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // esi\n
    char *v42;  // ebp\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // edx\n
    unsigned int v45;  // eax\n
    struct struct_0 **v46;  // ebp\n
    unsigned int v47;  // ebx\n
    unsigned int v48;  // edi\n
    struct struct_0 **v49;  // eax, Other Possible Types: unsigned int\n
    char *v50;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v51;  // esi\n
    unsigned short *v52;  // esi\n
    void* v53;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v54;  // esi, Other Possible Types: unsigned int\n
    unsigned int v55;  // eax\n
    struct struct_0 **v56;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v57;  // esi, Other Possible Types: unsigned int\n
    unsigned int v58;  // edi\n
    char *v59;  // ecx\n
    char *v60;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v61;  // ebx\n
    struct struct_0 **v62;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v63;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v64;  // eax\n
    unsigned int v65;  // edx\n
    char *v66;  // eax\n
    unsigned int v68;  // edx\n
    unsigned int v69;  // ebp\n
    unsigned int v70;  // esi\n
    unsigned int v71;  // edx\n
    unsigned int v73;  // edi\n
    unsigned int v74;  // eax\n
    struct struct_0 **v75;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v76;  // edx\n
    struct struct_0 **v77;  // edx, Other Possible Types: unsigned int\n
    void* v78;  // edi, Other Possible Types: unsigned int, unsigned short\n
    struct struct_0 **v79;  // esi\n
    struct struct_0 **v80;  // ecx\n
    unsigned int v81;  // edx\n
    struct struct_0 **v82;  // ecx\n
    struct struct_0 **v84;  // edi, Other Possible Types: unsigned int\n
    unsigned int v85;  // ebx\n
    unsigned int v86;  // edx\n
    struct struct_0 **v87;  // ecx\n
    char *v88;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v89;  // esi, Other Possible Types: unsigned int\n
    unsigned int v90;  // edi\n
\n
    v19 = v18;\n
    v20 = v18->field_64;\n
    if (v20 > 0x1000)\n
        return 0;\n
    v23 = a1;\n
    *(v23) = v20 + ((v20 >> 9) - -1 - ((v20 & 511) < 1)) * 2;\n
    v24 = cgc_malloc(0x800);\n
    v7 = cgc_malloc(*(v23));\n
    cgc_memset(v7, 0, *(v23));\n
    v26 = 0;\n
    do\n
    {\n
        v25 = cgc_malloc(0x200);\n
        v24[v26] = v25;\n
        cgc_memset(v25, 0, 0x200);\n
        v26 += 1;\n
    } while (v26 != 0x200);\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v24;\n
    if (a0)\n
    {\n
        *(a1) = 0;\n
        v27 = v19->field_64;\n
        if (v27)\n
        {\n
            v29 = v7;\n
            v10 = &v29[1] + 1;\n
            v53 = 0;\n
            v11 = v29;\n
            v30 = 0;\n
            while (true)\n
            {\n
                v4 = *((*((v19 + 96)) + v30));\n
                v12 = v30;\n
                v33 = v30 + 2;\n
                v34 = v27 - v33;\n
                if (v34 >= 0x200)\n
                    v34 = 0x200;\n
                *(a1) = v53 + v34;\n
                cgc_memset(&v14, 0, 0x200);\n
                v13 = v33;\n
                v2 = v34;\n
                cgc_memcpy(&v14, *((v19 + 96)) + v33, v34);\n
                v35 = 0;\n
                do\n
                {\n
                    cgc_memset(v0[v35], 0, 0x200);\n
                    v35 += 1;\n
                } while (v35 != 0x200);\n
                v36 = v2;\n
                if (v36 > 0)\n
                {\n
                    v1 = v36 * 4;\n
                    v6 = v36 + 1;\n
                    v37 = v36 & 3;\n
                    v38 = v36 & 1020;\n
                    v39 = v36;\n
                    v9 = v37;\n
                    v8 = v36 & 1020;\n
                    do\n
                    {\n
                        v3 = v39;\n
                        v39 -= 1;\n
                        v40 = 0;\n
                        v41 = v0;\n
                        if (v6 >= 3)\n
                        {\n
                            v40 = 0;\n
                            do\n
                            {\n
                                *((*((v41 + v40 * 4)) + v39)) = (&v14)[v40];\n
                                *((*((v41 + v40 * 4 + 4)) + v39)) = (&v15)[v40];\n
                                *((*((v41 + v40 * 4 + 8)) + v39)) = (&v16)[v40];\n
                                *((*((v41 + v40 * 4 + 12)) + v39)) = (&v17)[v40];\n
                                v40 += 4;\n
                            } while (v38 != v40);\n
                        }\n
                        if (v37)\n
                        {\n
                            v42 = &v0[v40];\n
                            v43 = &(&v14)[v40];\n
                            v44 = 0;\n
                            do\n
                            {\n
                                *((*(&v42[4 * v44]) + v39)) = *((v43 + v44));\n
                                v44 += 1;\n
                            } while (v37 != v44);\n
                        }\n
                        v45 = cgc_malloc(v1);\n
                        v36 = v2;\n
                        cgc__msort(v0, v45, 0, v36);\n
                        cgc_free(v45);\n
                        v37 = v9;\n
                        v46 = v8;\n
                    } while (v3 > 1);\n
                }\n
                v47 = v0;\n
                v48 = v4;\n
                if (v36)\n
                {\n
                    v49 = v36 & 3;\n
                    v50 = 0;\n
                    if (v36 - 1 >= 3)\n
                    {\n
                        v51 = v10 + v12;\n
                        v50 = 0;\n
                        do\n
                        {\n
                            v48 = v4;\n
                            *((v51 + v50 - 3)) = *((*((v47 + v4 * 4)) + v50));\n
                            *((v51 + v50 - 2)) = *((*((v47 + v48 * 4)) + v50 + 1));\n
                            *((v51 + v50 - 1)) = *((*((v47 + v48 * 4)) + v50 + 2));\n
                            *((v51 + v50)) = *((*((v47 + v48 * 4)) + v50 + 3));\n
                            v50 += 4;\n
                        } while ((v2 & 1020) != v50);\n
                    }\n
                    v36 = v2;\n
                    if (v49)\n
                    {\n
                        do\n
                        {\n
                            *((v12 + v11 + v50)) = *((*((v47 + v48 * 4)) + v50));\n
                            v50 += 1;\n
                            tmp_8 = v49;\n
                            v49 -= 1;\n
                        } while (tmp_8 != 1);\n
                    }\n
                }\n
                v52 = v36 + v13;\n
                v19 = v18;\n
                v27 = v18->field_64;\n
                if (v48 >= v27)\n
                    break;\n
                v53 = *(a1);\n
                v10 -= 2;\n
                v11 += 1;\n
                v48 = v52;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v28 = v19->field_64;\n
        if (v28)\n
        {\n
            v31 = v7;\n
            v8 = &v31[2] + 1;\n
            v9 = &v31[1];\n
            v6 = 0;\n
            v32 = 0;\n
            do\n
            {\n
                v54 = v28 - v32;\n
                if (v54 >= 0x200)\n
                    v54 = 0x200;\n
                cgc_memset(&v14, 0, 0x200);\n
                cgc_memcpy(&v14, *((v19 + 96)) + v32, v54);\n
                v4 = v54;\n
                v1 = v32;\n
                if (!v54)\n
                {\n
                    v55 = cgc_malloc(v54 * 4);\n
                    cgc__msort(v0, v55, 0, v54);\n
                    cgc_free(v55);\n
                    goto LABEL_405df2;\n
                }\n
                else\n
                {\n
                    v56 = v54;\n
                    v57 = 0;\n
                    do\n
                    {\n
                        v58 = v0;\n
                        cgc_memcpy(*((v58 + v57 * 4)), &v14, v56);\n
                        v59 = *((v58 + v57 * 4));\n
                        v60 = 0;\n
                        v61 = v56;\n
                        v3 = v57;\n
                        while (true)\n
                        {\n
                            v62 = v61;\n
                            v63 = v57;\n
                            do\n
                            {\n
                                v64 = v63;\n
                                v63 = v62;\n
                                v62 = (v64 >> 31 CONCAT v64) /m v62 >> 32;\n
                            } while (v62);\n
                            if (v60 >= v63)\n
                                break;\n
                            v2 = *((v59 + v60));\n
                            v65 = v60 + v57;\n
                            v66 = v60;\n
                            v68 = v65 - (v65 < v61 ? v61 : 0);\n
                            v69 = v60;\n
                            if (v68 != v60)\n
                            {\n
                                v70 = v60;\n
                                do\n
                                {\n
                                    v69 = v68;\n
                                    v59[v70] = v59[v68];\n
                                    v71 = v3 + v68;\n
                                    v60 = v66;\n
                                    v68 = v71 - (v71 < v61 ? v61 : 0);\n
                                    v70 = v69;\n
                                } while (v68 != v66);\n
                            }\n
                            v59[v69] = v2;\n
                            v73 = v60 + 1;\n
                            v57 = v3;\n
                        }\n
                        v57 = v57 + 1;\n
                        v56 = v61;\n
                    } while (v57 != v61);\n
                    v74 = cgc_malloc(v61 * 4);\n
                    v19 = v18;\n
                    cgc__msort(v0, v74, 0, v61);\n
                    cgc_free(v74);\n
                    if (!v61)\n
                    {\n
LABEL_405df2:\n
                        v75 = v1;\n
                        v76 = v6;\n
                        *((v7 + v75 + 0x2 * v76)) = 0;\n
                        v77 = v76 + 1;\n
                    }\n
                    else\n
                    {\n
                        v78 = 0;\n
                        v79 = v4;\n
                        while (cgc_memcmp(v0[v78], &v14, v79))\n
                        {\n
                            v78 += 1;\n
                            if (v79 == v78)\n
                            {\n
                                v78 = v79;\n
                                break;\n
                            }\n
                        }\n
                        v80 = v6;\n
                        v3 = v80 + 1;\n
                        v81 = v1 + 0x2 * v80;\n
                        *((v7 + v81)) = v78;\n
                        if (v79)\n
                        {\n
                            v82 = v79;\n
                            v2 = v82 & 3;\n
                            v84 = 0;\n
                            v85 = v0;\n
                            if (v79 + 1 >= 3)\n
                            {\n
                                v86 = v81 + v8;\n
                                v84 = 0;\n
                                do\n
                                {\n
                                    *((v86 + v84 - 3)) = *(-1 + *((v85 + v84 * 4)) + v82);\n
                                    *((v86 + v84 - 2)) = *(-1 + *((v85 + v84 * 4 + 4)) + v82);\n
                                    *((v86 + v84 - 1)) = *(-1 + *((v85 + v84 * 4 + 8)) + v82);\n
                                    *((v86 + v84)) = *(-1 + *((v85 + v84 * 4 + 12)) + v82);\n
                                    v84 += 4;\n
                                } while ((v82 & 1020) != v84);\n
                            }\n
                            v87 = v2;\n
                            if (!v87)\n
                            {\n
                                v19 = v18;\n
                            }\n
                            else\n
                            {\n
                                v88 = 0;\n
                                v19 = v18;\n
                                do\n
                                {\n
                                    *((0x2 * v6 + v1 + v84 + v9 + v88)) = *((v0[v88 + v84] + v4 - 1));\n
                                    v88 += 1;\n
                                } while (v87 != v88);\n
                            }\n
                        }\n
                        v75 = v1;\n
                        v77 = v3;\n
                    }\n
                }\n
                v32 = v75 + v4;\n
                v28 = *((v19 + 100));\n
                v6 = v77;\n
            } while (v28 > v32);\n
        }\n
    }\n
    v89 = 0;\n
    v90 = v0;\n
    do\n
    {\n
        cgc_free(*((v90 + v89 * 4)));\n
        v89 += 1;\n
    } while (v89 != 0x200);\n
    cgc_free(v90);\n
    return v7;\n
}\n
", "4217799:sub_405bc7": null, "4218023:sub_405ca7": null, "4218293:sub_405db5": null, "4218481:sub_405e71": null, "4218550:sub_405eb6": null, "4218698:sub_405f4a": null, "4219124:sub_4060f4": null, "4219136:cgc_sc_mtf": "typedef struct struct_1 {\n
    char padding_0[96];\n
    struct struct_2 *field_60;\n
    unsigned int field_64;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_0 *field_0;\n
    struct struct_0 *field_4;\n
    unsigned int field_8;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sc_mtf(struct_1 *v19, unsigned int a0, unsigned int *a1)\n
{\n
    struct_0 *v0;  // [bp-0x928]\n
    struct_3 *v1;  // [bp-0x924]\n
    char *v2;  // [bp-0x920]\n
    unsigned int v3;  // [bp-0x91c]\n
    struct_3 *v4;  // [bp-0x918]\n
    unsigned int v5;  // [bp-0x914]\n
    char v6;  // [bp-0x910], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x90c]\n
    unsigned int v8;  // [bp-0x908]\n
    unsigned int v9;  // [bp-0x904]\n
    unsigned int v10;  // [bp-0x900]\n
    unsigned int v11;  // [bp-0x8fc]\n
    unsigned int v12;  // [bp-0x8f8]\n
    unsigned int v13;  // [bp-0x8f4]\n
    char v14;  // [bp-0x8f0]\n
    char v18;  // [bp-0x810]\n
    struct_1 *v20;  // esi\n
    unsigned int v21;  // edi\n
    struct_0 *v23;  // edi\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // ebx\n
    void* v28;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v29;  // edx\n
    unsigned int v30;  // ebp\n
    void* v31;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v32;  // edx\n
    void* v33;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v34;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v35;  // ecx\n
    void* v36;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v37;  // ecx\n
    void* v38;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v39;  // ecx\n
    void* v40;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v41;  // ecx\n
    void* v42;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v43;  // ecx\n
    void* v44;  // eax, Other Possible Types: unsigned int\n
    unsigned int v45;  // ecx\n
    struct_0 *v46;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v47;  // edx\n
    void* v48;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v49;  // eax\n
    char *v50;  // eax, Other Possible Types: unsigned int\n
    unsigned int v51;  // edi\n
    void* v52;  // ecx, Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v53;  // eax\n
    char v54;  // cl\n
    unsigned int v55;  // eax\n
    struct_1 *v56;  // edx\n
    unsigned int v57;  // ecx\n
    char *v58;  // edi, Other Possible Types: unsigned int\n
    unsigned int v59;  // edi\n
    char *v60;  // esi, Other Possible Types: unsigned int\n
    char *v61;  // esi\n
    struct_4 *v63;  // edi\n
    unsigned int v64;  // ebp\n
    unsigned int v65;  // eax\n
    struct_0 *v67;  // edx, Other Possible Types: unsigned int\n
    unsigned int v68;  // esi\n
    void* v69;  // ebx, Other Possible Types: unsigned int, char\n
    struct_0 *v70;  // eax\n
    struct_0 *v71;  // eax\n
    void* v72;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v73;  // eax, Other Possible Types: unsigned int, char\n
    void* v74;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v75;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v76;  // eax\n
    unsigned int v77;  // ebp\n
    struct_0 *v78;  // eax, Other Possible Types: unsigned int, char\n
    struct_0 *v79;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v80;  // esi\n
    char *v81;  // ebx, Other Possible Types: unsigned int, char\n
    void* v82;  // edx, Other Possible Types: unsigned int\n
    void* v83;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v84;  // eax\n
    void* v85;  // edx, Other Possible Types: unsigned int\n
    void* v86;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v87;  // eax\n
    void* v88;  // edx, Other Possible Types: unsigned int\n
    void* v89;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v90;  // eax\n
    void* v91;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v92;  // eax\n
    void* v93;  // edx, Other Possible Types: unsigned int\n
    void* v94;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v95;  // eax\n
    void* v96;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v97;  // eax\n
\n
    v20 = v19;\n
    if (!a0)\n
    {\n
        v58 = cgc_malloc(v20->field_64 * 2 + 4);\n
        *(&v58) = v20->field_64;\n
        v1 = cgc_malloc(v20->field_64);\n
        cgc_memset(v1, 0, v20->field_64);\n
        v6 = 0x3020100;\n
        v7 = 117835012;\n
        v8 = 185207048;\n
        v9 = 252579084;\n
        v10 = 319951120;\n
        v11 = 387323156;\n
        v12 = 454695192;\n
        v13 = 522067228;\n
        cgc_memcpy(&v14, v20, 95);\n
        v24 = 127;\n
        do\n
        {\n
            *(&v6 + v24) = v24;\n
            *(&v6 + v24) = v24 + 1;\n
            *(&v6 + v24) = v24 + 2;\n
            v24 += 3;\n
        } while (v24 != 0x100);\n
        v49 = v19;\n
        v2 = v58;\n
        if (!v49->field_64)\n
        {\n
            v52 = 0;\n
        }\n
        else\n
        {\n
            v50 = v49->field_60;\n
            v51 = 0;\n
            do\n
            {\n
                v54 = *((v50 + v51));\n
                v55 = 0;\n
                do\n
                {\n
                    if (v54 == *(&v6 + v55))\n
                    {\n
LABEL_4064e3:\n
                        v1[v51].field_0 = v55;\n
                        goto LABEL_4064ea;\n
                    }\n
                    if (v54 == *(&v6 + v55))\n
                    {\n
                        v55 += 1;\n
                        goto LABEL_4064e3;\n
                    }\n
                    if (v54 == *(&v6 + v55))\n
                    {\n
                        v55 += 2;\n
                        goto LABEL_4064e3;\n
                    }\n
                    if (v54 == *(&v6 + v55))\n
                    {\n
                        v55 += 3;\n
                        goto LABEL_4064e3;\n
                    }\n
                    v55 += 4;\n
                } while (v55 != 0x100);\n
                v55 = 0x100;\n
LABEL_4064ea:\n
                cgc_memmove(&v6, &v6, v55);\n
                v56 = v19;\n
                v50 = v56->field_60;\n
                v6 = *((v50 + v51));\n
                v51 += 1;\n
                v57 = v56->field_64;\n
            } while (v51 < v57);\n
            v52 = v57 * 2;\n
            v58 = v2;\n
        }\n
        v61 = v58 + 4;\n
        cgc_memset(v61, 0, v52);\n
        v3 = &_GLOBAL_OFFSET_TABLE_;\n
        v63 = cgc_malloc(12);\n
        v63->field_0 = &v61;\n
        v63->field_4 = 0;\n
        v63->field_8 = 0;\n
        if (!v19->field_64)\n
        {\n
            v65 = 4;\n
        }\n
        else\n
        {\n
            v64 = 0;\n
            do\n
            {\n
                v67 = v63->field_0;\n
                v68 = v63->field_4;\n
                *(&v52) = *(&v67->field_0 + v68);\n
                v69 = v63->field_8;\n
                v4 = v64;\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, Load(addr=(Load(addr=stack_base-2340, size=4, endness=Iend_LE) + ebp<4>), size=1, endness=Iend_LE)), 0x10<32>, 0x0<32>)))\n
                {\n
                    if (v69 == 8)\n
                    {\n
                        v67 = v63->field_0;\n
                        v70 = v63->field_4;\n
                        v68 = &v70->field_0 + 1;\n
                        v63->field_4 = v68;\n
                        *(&v52) = *(1 + v67 + &v70->field_0);\n
                        v69 = 0;\n
                    }\n
                    v63->field_8 = v69 + 1;\n
                    *((v67 + v68)) = v52;\n
                    v0 = v1[v64].field_0;\n
                    v72 = v63->field_8;\n
                    if (v72 != 8)\n
                    {\n
                        v75 = v63->field_0;\n
                        v77 = v63->field_4;\n
                        v78 = v75 + v63->field_4;\n
                    }\n
                    else\n
                    {\n
                        v75 = v63->field_0;\n
                        v76 = v63->field_4;\n
                        v77 = &v76->field_0 + 1;\n
                        v63->field_4 = &v76->field_0 + 1;\n
                        v78 = v76 + v75 + 1;\n
                        v72 = 0;\n
                    }\n
                    *(&v69) = (v0 >> 7) << (7 - v72 & 31) | *(v78);\n
                    v82 = v72 + 1;\n
                    v63->field_8 = v82;\n
                    if (v82 == 8)\n
                    {\n
                        *((v75 + v77)) = v69;\n
                        v75 = v63->field_0;\n
                        v78 = v63->field_4;\n
                        v77 = v78 + 1;\n
                        v63->field_4 = v78 + 1;\n
                        v69 = *((v75 + v78 + 1));\n
                        v82 = 0;\n
                    }\n
                    *(&v78) = ((v0 >> 6) & 1) << (7 - v82 & 31) | v69;\n
                    v85 = v82 + 1;\n
                    v63->field_8 = v85;\n
                    if (v85 == 8)\n
                    {\n
                        *((v75 + v77)) = v78;\n
                        v75 = v63->field_0;\n
                        v87 = v63->field_4;\n
                        v77 = &v87->field_0 + 1;\n
                        v63->field_4 = &v87->field_0 + 1;\n
                        v78 = *(1 + v75 + &v87->field_0);\n
                        v85 = 0;\n
                    }\n
                    *(&v69) = ((v0 >> 5) & 1) << (7 - v85 & 31) | v78;\n
                    v88 = v85 + 1;\n
                    v63->field_8 = v88;\n
                    if (v88 == 8)\n
                    {\n
                        *((v75 + v77)) = v69;\n
                        v75 = v63->field_0;\n
                        v78 = v63->field_4;\n
                        v77 = v78 + 1;\n
                        v63->field_4 = v78 + 1;\n
                        v69 = *((v75 + v78 + 1));\n
                        v88 = 0;\n
                    }\n
                    *(&v78) = ((v0 >> 4) & 1) << (7 - v88 & 31) | v69;\n
                    v91 = v88 + 1;\n
                    v63->field_8 = v91;\n
                    if (v91 == 8)\n
                    {\n
                        *((v75 + v77)) = v78;\n
                        v75 = v63->field_0;\n
                        v92 = v63->field_4;\n
                        v77 = &v92->field_0 + 1;\n
                        v63->field_4 = &v92->field_0 + 1;\n
                        v78 = *(1 + v75 + &v92->field_0);\n
                        v91 = 0;\n
                    }\n
                    *(&v69) = ((v0 >> 3) & 1) << (7 - v91 & 31) | v78;\n
                    v93 = v91 + 1;\n
                    v63->field_8 = v93;\n
                    if (v93 == 8)\n
                    {\n
                        *((v75 + v77)) = v69;\n
                        v75 = v63->field_0;\n
                        v78 = v63->field_4;\n
                        v77 = v78 + 1;\n
                        v63->field_4 = v78 + 1;\n
                        v69 = *((v75 + v78 + 1));\n
                        v93 = 0;\n
                    }\n
                    *(&v78) = ((v0 >> 2) & 1) << (7 - v93 & 31) | v69;\n
                    v94 = v93 + 1;\n
                    v63->field_8 = v94;\n
                    if (v94 == 8)\n
                    {\n
                        *((v75 + v77)) = v78;\n
                        v75 = v63->field_0;\n
                        v95 = v63->field_4;\n
                        v77 = &v95->field_0 + 1;\n
                        v63->field_4 = &v95->field_0 + 1;\n
                        v78 = *(1 + v75 + &v95->field_0);\n
                        v94 = 0;\n
                    }\n
                    *(&v69) = ((v0 >> 1) & 1) << (7 - v94 & 31) | v78;\n
                    v96 = v94 + 1;\n
                    v63->field_8 = v96;\n
                    if (v96 == 8)\n
                    {\n
                        *((v75 + v77)) = v69;\n
                        v75 = v63->field_0;\n
                        v97 = v63->field_4;\n
                        v77 = &v97->field_0 + 1;\n
                        v63->field_4 = &v97->field_0 + 1;\n
                        v69 = *(1 + v75 + &v97->field_0);\n
                        v96 = 0;\n
                    }\n
                    v63->field_8 = v96 + 1;\n
                    *((v75 + v77)) = (v0 & 1) << (7 - v96 & 31) | v69;\n
                }\n
                else\n
                {\n
                    if (v69 == 8)\n
                    {\n
                        v67 = v63->field_0;\n
                        v71 = v63->field_4;\n
                        v68 = &v71->field_0 + 1;\n
                        v63->field_4 = v68;\n
                        *(&v52) = *(1 + v67 + &v71->field_0);\n
                        v69 = 0;\n
                    }\n
                    v63->field_8 = v69 + 1;\n
                    *((v67 + v68)) = (1 << (7 - v69 & 31)) | v52;\n
                    v73 = v1[v64].field_0;\n
                    *(&v73) = v73 * 16;\n
                    v74 = v63->field_8;\n
                    if (v74 == 8)\n
                    {\n
                        v79 = v63->field_0;\n
                        v52 = v63->field_4;\n
                        v80 = &v52->field_0 + 1;\n
                        v63->field_4 = v80;\n
                        v81 = v52 + v79 + 1;\n
                        v74 = 0;\n
                    }\n
                    else\n
                    {\n
                        v79 = v63->field_0;\n
                        v80 = v63->field_4;\n
                        v81 = v80 + v63->field_0;\n
                    }\n
                    v0 = v73;\n
                    *(&v73) = v73 / 128 << (7 - v74 & 31) | *(v81);\n
                    v83 = v74 + 1;\n
                    v63->field_8 = v83;\n
                    if (v83 == 8)\n
                    {\n
                        *((v79 + v80)) = v73;\n
                        v79 = v63->field_0;\n
                        v84 = v63->field_4;\n
                        v80 = &v84->field_0 + 1;\n
                        v63->field_4 = v80;\n
                        v73 = *(1 + v79 + &v84->field_0);\n
                        v83 = 0;\n
                    }\n
                    *(&v81) = ((v0 >> 6) & 1) << (7 - v83 & 31) | v73;\n
                    v86 = v83 + 1;\n
                    v63->field_8 = v86;\n
                    if (v86 == 8)\n
                    {\n
                        *((v79 + v80)) = v81;\n
                        v79 = v63->field_0;\n
                        v73 = v63->field_4;\n
                        v80 = v73 + 1;\n
                        v63->field_4 = v80;\n
                        v81 = *((v79 + v73 + 1));\n
                        v86 = 0;\n
                    }\n
                    *(&v73) = ((v0 >> 5) & 1) << (7 - v86 & 31) | v81;\n
                    v89 = v86 + 1;\n
                    v63->field_8 = v89;\n
                    if (v89 == 8)\n
                    {\n
                        *((v79 + v80)) = v73;\n
                        v79 = v63->field_0;\n
                        v90 = v63->field_4;\n
                        v80 = &v90->field_0 + 1;\n
                        v63->field_4 = v80;\n
                        v73 = *(1 + v79 + &v90->field_0);\n
                        v89 = 0;\n
                    }\n
                    v63->field_8 = v89 + 1;\n
                    *((v79 + v80)) = ((v0 >> 4) & 1) << (7 - v89 & 31) | v73;\n
                }\n
                v64 = v4 + 1;\n
            } while (v4 + 1 < v19->field_64);\n
            v65 = 7 + &v63->field_4[357913941].field_0 - (v63->field_8 < 1);\n
        }\n
        *(a1) = v65;\n
        cgc_free(v63);\n
        cgc_free(v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v21 = *(&v20->field_60);\n
        if (v21 > 0x1000)\n
            return 0;\n
        v2 = cgc_malloc(v21);\n
        cgc_memset(&v18, 0, 0x800);\n
        v46 = v20->field_60 + 4;\n
        v3 = &_GLOBAL_OFFSET_TABLE_;\n
        v23 = cgc_malloc(12);\n
        v23->field_0 = v46;\n
        *(&v23->padding_4[0]) = 0;\n
        v23->field_8 = 0;\n
        v5 = v21;\n
        if (v5)\n
        {\n
            v4 = v5 - 1;\n
            v48 = 0;\n
            v47 = 0;\n
            v1 = 0;\n
            while (true)\n
            {\n
                v25 = v47;\n
                v26 = *((v46 + v47));\n
                v27 = (1 << (7 - v48 & 31) & v26) >> (7 - v48 & 31);\n
                v28 = v48 + 1;\n
                v23->field_8 = v28;\n
                v0 = v46;\n
                if (v27)\n
                {\n
                    if (v28 == 8)\n
                    {\n
                        v25 += 1;\n
                        *(&v23->padding_4[0]) = v25;\n
                        v28 = 0;\n
                    }\n
                    v29 = v46;\n
                    v30 = *((v46 + v25));\n
                    *(&v27) = ((1 << (7 - v28 & 31) & v30) >> (7 - v28 & 31)) * 8;\n
                    v31 = v28 + 1;\n
                    v23->field_8 = v31;\n
                    if (!(v31 == 8))\n
                        goto LABEL_406348;\n
                    v34 = v25 + 1;\n
                    *(&v23->padding_4[0]) = v34;\n
                    v30 = *(1 + &v29->field_0 + v25);\n
                }\n
                else\n
                {\n
                    if (v28 == 8)\n
                    {\n
                        v25 += 1;\n
                        *(&v23->padding_4[0]) = v25;\n
                        v28 = 0;\n
                    }\n
                    v32 = v46;\n
                    v30 = *((v46 + v25));\n
                    *(&v27) = ((1 << (7 - v28 & 31) & v30) >> (7 - v28 & 31)) * 128;\n
                    v33 = v28 + 1;\n
                    v23->field_8 = v33;\n
                    if (v33 == 8)\n
                    {\n
                        v35 = v25 + 1;\n
                        *(&v23->padding_4[0]) = v35;\n
                        v30 = *(1 + &v32->field_0 + v25);\n
                        v33 = 0;\n
                        v25 = v35;\n
                    }\n
                    *(&v27) = v27 | (((1 << (7 - v33 & 31) & v30) >> (7 - v33 & 31)) * 64);\n
                    v36 = v33 + 1;\n
                    v23->field_8 = v36;\n
                    if (v36 == 8)\n
                    {\n
                        v37 = v25 + 1;\n
                        *(&v23->padding_4[0]) = v37;\n
                        v30 = *(1 + &v0->field_0 + v25);\n
                        v36 = 0;\n
                        v25 = v37;\n
                    }\n
                    *(&v27) = v27 | (((1 << (7 - v36 & 31) & v30) >> (7 - v36 & 31)) * 32);\n
                    v38 = v36 + 1;\n
                    v23->field_8 = v38;\n
                    if (v38 == 8)\n
                    {\n
                        v39 = v25 + 1;\n
                        *(&v23->padding_4[0]) = v39;\n
                        v30 = *(1 + &v0->field_0 + v25);\n
                        v38 = 0;\n
                        v25 = v39;\n
                    }\n
                    *(&v27) = v27 | (((1 << (7 - v38 & 31) & v30) >> (7 - v38 & 31)) * 16);\n
                    v40 = v38 + 1;\n
                    v23->field_8 = v40;\n
                    if (v40 == 8)\n
                    {\n
                        v41 = v25 + 1;\n
                        *(&v23->padding_4[0]) = v41;\n
                        v30 = *(1 + &v0->field_0 + v25);\n
                        v40 = 0;\n
                        v25 = v41;\n
                    }\n
                    *(&v27) = v27 | (((1 << (7 - v40 & 31) & v30) >> (7 - v40 & 31)) * 8);\n
                    v31 = v40 + 1;\n
                    v23->field_8 = v31;\n
                    if (!(v31 == 8))\n
                        goto LABEL_406348;\n
                    v34 = v25 + 1;\n
                    *(&v23->padding_4[0]) = v34;\n
                    v30 = *(1 + &v0->field_0 + v25);\n
                }\n
                v31 = 0;\n
                v25 = v34;\n
LABEL_406348:\n
                *(&v27) = v27 | (((1 << (7 - v31 & 31) & v30) >> (7 - v31 & 31)) * 4);\n
                v42 = v31 + 1;\n
                v23->field_8 = v42;\n
                if (v42 == 8)\n
                {\n
                    v43 = v25 + 1;\n
                    *(&v23->padding_4[0]) = v43;\n
                    v30 = *(1 + &v0->field_0 + v25);\n
                    v42 = 0;\n
                    v25 = v43;\n
                }\n
                *(&v27) = v27 | ((1 << (7 - v42 & 31) & v30) >> (7 - v42 & 31)) * 2;\n
                v44 = v42 + 1;\n
                v23->field_8 = v44;\n
                if (v44 == 8)\n
                {\n
                    *(&v23->padding_4[0]) = v25 + 1;\n
                    v30 = *(1 + &v0->field_0 + v25);\n
                    v44 = 0;\n
                }\n
                v23->field_8 = v44 + 1;\n
                v45 = v1;\n
                (&v18)[v45] = ((1 << (7 - v44 & 31) & v30) >> (7 - v44 & 31)) | v27;\n
                if (v4 == v45)\n
                    break;\n
                v46 = v23->field_0;\n
                v47 = v23->padding_4;\n
                v48 = v23->field_8;\n
                v1 = v45 + 1;\n
            }\n
        }\n
        v0 = v23;\n
        v6 = 0x3020100;\n
        v7 = 117835012;\n
        v8 = 185207048;\n
        v9 = 252579084;\n
        v10 = 319951120;\n
        v11 = 387323156;\n
        v12 = 454695192;\n
        v13 = 522067228;\n
        cgc_memcpy(&v14, v19, 95);\n
        v53 = 127;\n
        do\n
        {\n
            *(&v6 + v53) = v53;\n
            *(&v6 + v53) = v53 + 1;\n
            *(&v6 + v53) = v53 + 2;\n
            v53 += 3;\n
        } while (v53 != 0x100);\n
        v59 = v5;\n
        v60 = v2;\n
        if (v59)\n
        {\n
            do\n
            {\n
                *((v60 + 0)) = *(&v6 + v18);\n
                cgc_memmove(&v6, &v6, v18);\n
                v60 = v2;\n
                v6 = *(v60);\n
            } while (v59 != 1);\n
        }\n
        *(a1) = v59;\n
        cgc_free(v0);\n
        return v60;\n
    }\n
}\n
", "4219441:sub_406231": null, "4220233:sub_406549": null, "4220617:sub_4066c9": null, "4220775:sub_406767": null, "4220875:sub_4067cb": null, "4221263:sub_40694f": null, "4221502:sub_406a3e": null, "4221504:cgc_sc_sdecompress": "int cgc_sc_sdecompress(unsigned int v2[26], unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3[26];  // ebp\n
    unsigned int *v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int *v7;  // ecx\n
    unsigned int *v8;  // esi\n
\n
    v3 = v2;\n
    if (!v2)\n
    {\n
        return -1;\n
    }\n
    else if (!a0)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v5 = a1;\n
        if (!v5)\n
            return -1;\n
        v0 = v3[24];\n
        v1 = v3[25];\n
        v6 = cgc_sc_mtf(v3, 1, v5);\n
        if (v6)\n
        {\n
            v3[24] = v6;\n
            v7 = a1;\n
            v3[25] = *(v7);\n
            v8 = a0;\n
            *(v8) = cgc_sc_bwt(v3, 1, v7);\n
            cgc_free(v6);\n
            v3[24] = v0;\n
            v3[25] = v1;\n
            return -(*(v8) < 1);\n
        }\n
        return -1;\n
    }\n
}\n
", "4221660:sub_406adc": null, "4221664:cgc_sc_set_data": "int cgc_sc_set_data(unsigned int v0[26], char *a0, unsigned int a1)\n
{\n
    unsigned int v1[26];  // esi\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // eax\n
    char *v5;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v2 = a1;\n
    v3 = v1[24];\n
    if (v3)\n
        cgc_free(v3);\n
    v5 = cgc_malloc(v2);\n
    v1[24] = v5;\n
    cgc_memcpy(v5, a0, v2);\n
    v1[25] = v2;\n
    return 0;\n
}\n
", "4221761:sub_406b41": null, "4221776:cgc__gcd": "int cgc__gcd(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    do\n
    {\n
        v3 = v1;\n
        v1 = (v2 >> 31 CONCAT v2) /m v1 >> 32;\n
        v2 = v3;\n
    } while (v1);\n
    return v3;\n
}\n
", "4221806:sub_406b6e": null, "4221808:cgc__rot_left": "int cgc__rot_left(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14], Other Possible Types: char\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // eax\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ebp\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // edx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // edi\n
    char v24;  // dl\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // ebx\n
    unsigned int v27;  // ebp\n
    char v28;  // dl\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // esi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v10 = a0;\n
    v4 = v1;\n
    if (v10)\n
    {\n
        v5 = v10;\n
        v6 = 0;\n
        while (true)\n
        {\n
            v8 = v5;\n
            v9 = v3;\n
            do\n
            {\n
                v7 = v9;\n
                v9 = v8;\n
                v8 = (v7 >> 31 CONCAT v7) /m v8 >> 32;\n
            } while (v8);\n
            v10 = v1;\n
            if (v6 >= v9)\n
                break;\n
            v0 = *((v10 + v6));\n
            v11 = v6 + v3;\n
            v12 = v6;\n
            v14 = v11 - (v11 < v5 ? v5 : 0);\n
            v15 = v12;\n
            v16 = v12;\n
            v17 = v3;\n
            if (v14 != v12)\n
            {\n
                v18 = v12;\n
                do\n
                {\n
                    v16 = v14;\n
                    v19 = v1;\n
                    *((v19 + v18)) = *((v19 + v16));\n
                    v20 = v17 + v16;\n
                    v14 = v20 - (v20 < v5 ? v5 : 0);\n
                    v15 = v12;\n
                    v18 = v16;\n
                } while (v14 != v12);\n
            }\n
            *((v1 + v16)) = v0;\n
            v22 = v15 + 1;\n
            v3 = v17;\n
        }\n
        return v1;\n
    }\n
    else if (v3 <= 0)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v3 != 1)\n
        {\n
            v0 = v3 & -2;\n
            v10 = 0;\n
            v23 = v4;\n
            do\n
            {\n
                v24 = *((v4 + v10));\n
                v25 = v3;\n
                v26 = v3 + v23;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v23 + v27)) = *((v26 + v27));\n
                } while (v25 + v25);\n
                *(v23) = v24;\n
                v28 = *((v1 + (v10 | 1)));\n
                do\n
                {\n
                    *((v23 + 1)) = *((v26 + 1));\n
                } while (v25 + 1 + v25 != 1);\n
                *((v23 + 1)) = v28;\n
                v10 += 2;\n
                v23 += 2;\n
                v3 = v25;\n
                v4 = v1;\n
            } while (v10 != v0);\n
        }\n
        if (!(v3 & 1))\n
            return v10;\n
        v29 = v4 + v10;\n
        *(&v10) = *((v4 + v10));\n
        v30 = 0;\n
        do\n
        {\n
            *((v29 + v30)) = *((v29 + v3 + v30));\n
            v30 += v3;\n
        } while (v3 + v30);\n
        *((v30 + v29)) = v10;\n
        return v10;\n
    }\n
}\n
", "4221839:sub_406b8f": null, "4222170:sub_406cda": null, "4222176:cgc__merge": "typedef struct struct_1 {\n
    char padding_0[104];\n
    struct struct_0 *field_68;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__merge(unsigned int v4, unsigned int a0, unsigned int *a1, unsigned int *a2, unsigned int a3, struct_1 *a4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_10;  // tmp #10\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int *v5;  // edx\n
    unsigned int *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    unsigned int *v8;  // esi\n
    struct_1 *v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int *v12;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int *v14;  // edx\n
    unsigned int v15;  // edi\n
    unsigned int *v16;  // edx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int *v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // esi\n
    unsigned int *v27;  // esi\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a1;\n
    v6 = v5;\n
    v7 = a2;\n
    v12 = v5;\n
    if (v5 < v7)\n
    {\n
        v13 = v4;\n
        v12 = a1;\n
        v6 = a1;\n
        v7 = a2;\n
        if (v7 < a3)\n
        {\n
            v6 = a1;\n
            v12 = v6;\n
            v7 = a2;\n
            while (true)\n
            {\n
                v8 = v7;\n
                v1 = 0x200;\n
                v0 = *((v13 + v7 * 4));\n
                v10 = v9->field_68(a4, *((v13 + v6 * 4)), v0);\n
                v11 = (v10 < 0 ? v8 : v6);\n
                v6 = (v10 >> 31) + v6;\n
                v7 = (~(v10) >> 31) + v8;\n
                *((a0 + v12 * 4)) = *((v4 + v11 * 4));\n
                v12 += 1;\n
                if (v6 >= a2)\n
                    break;\n
                v13 = v4;\n
                if (v7 >= a3)\n
                    break;\n
            }\n
        }\n
    }\n
    v14 = a2;\n
    if (v6 < v14)\n
    {\n
        v3 = ~(v6) + v14;\n
        v15 = v14 - v6 & 3;\n
        if (v15)\n
        {\n
            do\n
            {\n
                *((a0 + v12 * 4)) = *((v4 + v6 * 4));\n
                v6 += 1;\n
                v12 += 1;\n
                tmp_10 = v15;\n
                v15 -= 1;\n
            } while (tmp_10 != 1);\n
        }\n
        if (v3 >= 3)\n
        {\n
            v16 = a0 + v12 * 4 + 12;\n
            v17 = a2 - v6;\n
            v18 = v4 + v6 * 4 + 12;\n
            v19 = 0;\n
            do\n
            {\n
                v16[3 + v19] = *((v18 + v19 * 4 - 12));\n
                v16[2 + v19] = *((v18 + v19 * 4 - 8));\n
                v16[1 + v19] = *((v18 + v19 * 4 - 4));\n
                v16[v19] = *((v18 + v19 * 4));\n
                v19 += 4;\n
            } while (v17 != v19);\n
            v12 += v19;\n
        }\n
    }\n
    if (v7 >= a3)\n
    {\n
        v27 = a1;\n
        return cgc_memcpy(v4 + v27 * 4, a0 + v27 * 4, (a3 - v27) * 4);\n
    }\n
    v20 = a3;\n
    v21 = ~(v7) + v20;\n
    v22 = v20 - v7 & 3;\n
    if (v22)\n
    {\n
        do\n
        {\n
            *((a0 + v12 * 4)) = *((v4 + v7 * 4));\n
            v7 += 1;\n
            v12 += 1;\n
            tmp_10 = v22;\n
            v22 -= 1;\n
        } while (tmp_10 != 1);\n
    }\n
    if (v21 < 3)\n
    {\n
        v27 = a1;\n
        return cgc_memcpy(v4 + v27 * 4, a0 + v27 * 4, (a3 - v27) * 4);\n
    }\n
    v23 = a0 + v12 * 4 + 12;\n
    v24 = a3 - v7;\n
    v25 = v4 + v7 * 4 + 12;\n
    v26 = 0;\n
    do\n
    {\n
        v23[3 + v26] = *((v25 + v26 * 4 - 12));\n
        v23[2 + v26] = *((v25 + v26 * 4 - 8));\n
        v23[1 + v26] = *((v25 + v26 * 4 - 4));\n
        v23[v26] = *((v25 + v26 * 4));\n
        v26 += 4;\n
    } while (v24 != v26);\n
    v27 = a1;\n
    return cgc_memcpy(v4 + v27 * 4, a0 + v27 * 4, (a3 - v27) * 4);\n
}\n
", "4222679:sub_406ed7": null, "4222688:cgc__msort": "typedef struct struct_1 {\n
    char padding_0[104];\n
    struct struct_0 *field_68;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__msort(unsigned int *v6, unsigned int *a0, unsigned int *a1, unsigned int a2, struct_1 *a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_10;  // tmp #10\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // ebp\n
    unsigned int *v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int *v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int *v12;  // ebx\n
    unsigned int *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v17;  // esi\n
    struct_1 *v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // esi\n
    unsigned int *v24;  // edx\n
    unsigned int v25;  // ebx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // edx\n
    unsigned int *v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int *v33;  // ecx\n
\n
    v7 = a2;\n
    v8 = a1;\n
    v9 = a2 - v8;\n
    if (v9 < 2)\n
        return a2 - v8;\n
    v5 = v9;\n
    v3 = v9 / 2;\n
    v10 = v3 + v8;\n
    cgc__msort(v6, a0, v8, v10, a3);\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__msort(v11, a0, v10, v7, a3);\n
    v11 = v6;\n
    v12 = a1;\n
    v15 = v12;\n
    v16 = v10;\n
    v14 = v12;\n
    v2 = v10;\n
    if (v2 < v7)\n
    {\n
        v15 = a1;\n
        v14 = v15;\n
        v16 = v2;\n
        do\n
        {\n
            v17 = v16;\n
            v1 = 0x200;\n
            v0 = *((v21 + v16 * 4));\n
            v19 = v18->field_68(a3, *((v21 + v15 * 4)), v0);\n
            v20 = (v19 < 0 ? v17 : v15);\n
            v15 = (v19 >> 31) + v15;\n
            v16 = (~(v19) >> 31) + v17;\n
            a0[v14] = v6[v20];\n
            v14 += 1;\n
            if (v15 >= v2)\n
            {\n
                v7 = a2;\n
                if (!(v15 < v2))\n
                    goto LABEL_40707b;\n
                goto LABEL_406fe3;\n
            }\n
            v7 = a2;\n
            v21 = v6;\n
        } while (v16 < a2);\n
        goto LABEL_40707b;\n
    }\n
    if (!(v15 < v2))\n
        goto LABEL_40707b;\n
LABEL_406fe3:\n
    v3 += a1;\n
    v2 = ~(v15) + v3;\n
    v22 = v3 - v15 & 3;\n
    if (v22)\n
    {\n
        v23 = v22 * 4;\n
        do\n
        {\n
            a0[v14] = v6[v15];\n
            v15 += 1;\n
            v14 += 1;\n
            tmp_10 = v23;\n
            v23 -= 4;\n
        } while (tmp_10 != 4);\n
    }\n
    v7 = a2;\n
    if (v2 >= 3)\n
    {\n
        v24 = &a0[v14 + 3];\n
        v25 = v3 - v15;\n
        v26 = &v6[v15 + 3];\n
        v27 = 0;\n
        do\n
        {\n
            v24[3 + v27] = *((v26 + v27 * 4 - 12));\n
            v24[2 + v27] = *((v26 + v27 * 4 - 8));\n
            v24[1 + v27] = *((v26 + v27 * 4 - 4));\n
            v24[v27] = *((v26 + v27 * 4));\n
            v27 += 4;\n
        } while (v25 != v27);\n
        v14 += v27;\n
        v7 = a2;\n
    }\n
LABEL_40707b:\n
    if (v16 < v7)\n
    {\n
        v2 = ~(v16) + v7;\n
        v28 = v7 - v16 & 3;\n
        if (v28)\n
        {\n
            do\n
            {\n
                a0[v14] = v6[v16];\n
                v16 += 1;\n
                v14 += 1;\n
                tmp_10 = v28;\n
                v28 -= 1;\n
            } while (tmp_10 != 1);\n
        }\n
        if (v2 >= 3)\n
        {\n
            v29 = &a0[v14 + 3];\n
            v30 = v7 - v16;\n
            v31 = &v6[v16 + 3];\n
            v32 = 0;\n
            do\n
            {\n
                v29[3 + v32] = *((v31 + v32 * 4 - 12));\n
                v29[2 + v32] = *((v31 + v32 * 4 - 8));\n
                v29[1 + v32] = *((v31 + v32 * 4 - 4));\n
                v29[v32] = *((v31 + v32 * 4));\n
                v32 += 4;\n
            } while (v30 != v32);\n
        }\n
    }\n
    v33 = a1;\n
    v9 = cgc_memcpy(v6 + 0x4 * v33, a0 + 0x4 * v33, v5 * 4);\n
    return v9;\n
}\n
", "4223269:sub_407125": null, "4223280:cgc__sort": "int cgc__sort(unsigned int *v0, unsigned int a0, void* a1)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int *v2;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_malloc(v1 * 4);\n
    cgc__msort(v0, v2, NULL, v1, a1);\n
    return cgc_free(v2);\n
}\n
", "4223364:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}