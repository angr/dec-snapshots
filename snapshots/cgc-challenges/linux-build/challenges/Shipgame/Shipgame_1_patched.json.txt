{"4198400:_init": "extern struct_0 *g_4046c0;\n
\n
int _init()\n
{\n
    if (g_4046c0)\n
    {\n
        g_4046c0();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 13783;\n
    v6 = v5 + 373;\n
    v7 = v5 + 373;\n
    if (v7 == v6)\n
        return v5 + 373;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 13719;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 373;\n
    v9 = (v6 + 373 - (v6 + 373) >> 31) + (373 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4046bc;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__TMC_END__)\n
        return;\n
    if (g_4046bc)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __TMC_END__ = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_readLine": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readLine(unsigned int v8, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v6;  // [bp-0xd]\n
    char *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v2 = a1;\n
    if (!a0)\n
    {\n
        v7 = -3;\n
        return v7;\n
    }\n
    do\n
    {\n
        v0 = &v3;\n
        v5 = cgc_receive(v8, &v6, 1);\n
        if (!v5 && !(!*(&v3)))\n
            continue;\n
        cgc__terminate();\n
        v4[a0] = v6;\n
        v4 += 1;\n
        if (v4 >= v2)\n
            v4 = v2 - 1;\n
    } while (v6 != 10);\n
    v4[a0] = 0;\n
    v7 = v4;\n
    return v7;\n
}\n
", "4199120:cgc_printf_setFlushOnNewline": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_gbFlushOnNewline;\n
\n
int cgc_printf_setFlushOnNewline(unsigned int v0)\n
{\n
    cgc_gbFlushOnNewline = v0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4199149:sub_4012ed": null, "4199152:cgc_fflush": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fflush(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v0 = v8;\n
    v2 = cgc_getPrintfInfo();\n
    if (!v2)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v0 = v2;\n
    v4 = cgc_pflush();\n
    if (v4 == -1)\n
    {\n
        v0 = 1;\n
        cgc__terminate();\n
    }\n
    v6 = v4;\n
    return v6;\n
}\n
", "4199291:sub_40137b": null, "4199296:cgc_getPrintfInfo": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_gPrintfHead;\n
\n
int cgc_getPrintfInfo(unsigned int v5)\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &cgc_gPrintfHead;\n
    for (v2 = 0; *(v3); v3 = &*(v3)->field_10)\n
    {\n
        if (*(v3)->field_0 == v5)\n
        {\n
            v4[0] = *(v3);\n
            return v4;\n
        }\n
    }\n
    v0 = v3;\n
    v2 = cgc_allocate(280, 0);\n
    if (v2)\n
        cgc__terminate();\n
    *(*(v3)) = v5;\n
    *((*(v3) + 20)) = *(v3) + 24;\n
    *((*(v3) + 4)) = 200;\n
    *((*(v3) + 8)) = 0;\n
    *((*(v3) + 12)) = 0;\n
    *(v3)->field_10 = 0;\n
    v4 = *(v3);\n
    return v4;\n
}\n
", "4199550:sub_40147e": null, "4199552:cgc_pflush": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pflush(unsigned int v6[6])\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[6];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v6)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    if (v6[2] && v6[0] != -1)\n
    {\n
        while (true)\n
        {\n
            v0 = &v4;\n
            v2 = cgc_transmit(v6[0], v6[5] + v3, v6[2] - v3);\n
            if (v2)\n
                break;\n
            if (!v4)\n
                break;\n
            v3 = v4 + v3;\n
            if (v3 >= v6[2])\n
            {\n
                v7 = v6;\n
                v7[3] = v6[2] + v7[3];\n
                v6[2] = 0;\n
                v5 = v3;\n
                return v5;\n
            }\n
        }\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4199812:sub_401584": null, "4199824:cgc_printfProcessString": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
    char padding_c[8];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printfProcessString(struct_0 *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_29;  // tmp #29\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v6;  // eax\n
    struct_0 *v7;  // esi\n
    unsigned int v8;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (a0)\n
    {\n
        for (v1 = 0; a0[v1]; v1 += 1)\n
        {\n
            tmp_29 = a0[v1];\n
            v6 = v5->field_14;\n
            v7 = v5;\n
            v8 = v7->field_8;\n
            v7->field_8 = v8 + 1;\n
            v6[v8] = tmp_29;\n
            if (v5->field_8 >= v5->field_4)\n
            {\n
                if (v5->field_0 != -1)\n
                {\n
                    v2 = cgc_pflush(v5);\n
                    if (v2 == -1)\n
                        cgc__terminate();\n
                    v3 = v2 + v3;\n
                }\n
                else\n
                {\n
                    v4 = v5->field_4;\n
                    return v4;\n
                }\n
            }\n
        }\n
        if (v5->field_0 == -1)\n
        {\n
            v4 = v1;\n
            return v4;\n
        }\n
        v4 = v3;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4200131:sub_4016c3": null, "4200144:cgc_snprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_snprintf(unsigned int v10, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    void* v5;  // [bp-0x1c]\n
    void* v6;  // [bp-0x18]\n
    void* v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v11;  // [bp+0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v2 = &v11;\n
    v3 = -1;\n
    v8 = v10;\n
    v4 = 200;\n
    v5 = 0;\n
    v6 = 0;\n
    v7 = 0;\n
    v4 = a0;\n
    v0 = v2;\n
    v9 = cgc__pprintf(&v3, a1);\n
    return v9;\n
}\n
", "4200276:sub_401754": null, "4200288:cgc__pprintf": "typedef struct struct_2 {\n
    char padding_0[1500];\n
    unsigned int field_5dc;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    char padding_c[8];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__pprintf(struct_0 *v12, char *a0, unsigned int *a1)\n
{\n
    void* v0;  // [bp-0x40], Other Possible Types: unsigned int\n
    int tmp_40;  // tmp #40\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    struct_2 *v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    void* v6;  // [bp-0x28], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    struct_0 *v14;  // esi\n
    unsigned int v15;  // edx\n
    char *v16;  // eax\n
    struct_0 *v17;  // edx\n
    unsigned int v18;  // ecx\n
    char *v19;  // eax\n
    struct_0 *v20;  // edx\n
    unsigned int v21;  // ecx\n
    char *v22;  // eax\n
    struct_0 *v23;  // edx\n
    unsigned int v24;  // ecx\n
    char *v25;  // eax\n
    struct_0 *v26;  // edx\n
    unsigned int v27;  // ecx\n
    struct_0 *v28;  // ecx\n
    unsigned int *v29;  // eax\n
    char *v30;  // eax\n
    struct_0 *v31;  // edx\n
    unsigned int v32;  // ecx\n
    unsigned int *v33;  // eax\n
    struct_0 *v35;  // eax\n
    char *v36;  // eax\n
    struct_0 *v37;  // edx\n
    unsigned int v38;  // ecx\n
    char *v39;  // eax\n
    struct_0 *v40;  // edx\n
    unsigned int v41;  // ecx\n
    unsigned int *v42;  // eax\n
    char *v43;  // eax\n
    struct_0 *v44;  // edx\n
    unsigned int v45;  // ecx\n
    struct_0 *v46;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    if (!a0)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    else if (v12)\n
    {\n
        v7 = 0;\n
        v6 = 0;\n
        for (v5 = 0; a0[v7]; v10 = v9 + v10)\n
        {\n
            v3 = a0[v7];\n
            if (v3 == 35)\n
            {\n
                v7 += 1;\n
                if (a0[v7] == 48)\n
                {\n
                    v5 = 1;\n
                    v7 += 1;\n
                }\n
                v2 = a0[v7];\n
                if (v2 == 35)\n
                {\n
                    v22 = v12->field_14;\n
                    v23 = v12;\n
                    v24 = v23->field_8;\n
                    v23->field_8 = v24 + 1;\n
                    v22[v24] = 35;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else\n
                {\n
                    if (v2 == 88)\n
                    {\n
                        v28 = v12;\n
                        v29 = a1;\n
                        a1 = v29 + 2;\n
                        v0 = 1;\n
                        v8 = cgc_uint32ToHexStr(v28->field_14 + v28->field_8, *(v29), v5);\n
                        v35 = v12;\n
                        v35->field_8 = &v35->field_8[v8];\n
                        v10 = v8 + v10;\n
                        v7 += 1;\n
                    }\n
                    else\n
                    {\n
                        if (v2 == 115)\n
                        {\n
                            v33 = a1;\n
                            a1 = v33 + 1;\n
                            v8 = cgc_printfProcessString(v12, *(v33));\n
                            v10 = v8 + v10;\n
                            v7 += 1;\n
                        }\n
                        else\n
                        {\n
                            if (v2 != 120)\n
                            {\n
                                v43 = v12->field_14;\n
                                v44 = v12;\n
                                v45 = v44->field_8;\n
                                v44->field_8 = v45 + 1;\n
                                v43[v45] = 35;\n
                                v6 += 1;\n
                            }\n
                            else\n
                            {\n
                                v42 = a1;\n
                                a1 = v42 + 1;\n
                                v0 = 0;\n
                                v8 = cgc_uint32ToHexStr(v12->field_14 + v12->field_8, *(v42), v5);\n
                                v46 = v12;\n
                                v46->field_8 = &v46->field_8[v8];\n
                                v10 = v8 + v10;\n
                                v7 += 1;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            else if (v3 != 92)\n
            {\n
                tmp_40 = a0[v7];\n
                v13 = v12->field_14;\n
                v14 = v12;\n
                v15 = v14->field_8;\n
                v14->field_8 = v15 + 1;\n
                v13[v15] = tmp_40;\n
                v6 += 1;\n
                v7 += 1;\n
                if (v4->field_5dc && *((a0 + v7 + 1)) == 10)\n
                {\n
                    v9 = cgc_pflush(v12);\n
                    if (v9 == -1)\n
                        cgc__terminate();\n
                    v10 = v9 + v10;\n
                }\n
            }\n
            else\n
            {\n
                v7 += 1;\n
                v1 = a0[v7];\n
                if (v1 == 34)\n
                {\n
                    v16 = v12->field_14;\n
                    v17 = v12;\n
                    v18 = v17->field_8;\n
                    v17->field_8 = v18 + 1;\n
                    v16[v18] = 34;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else if (v1 == 39)\n
                {\n
                    v19 = v12->field_14;\n
                    v20 = v12;\n
                    v21 = v20->field_8;\n
                    v20->field_8 = v21 + 1;\n
                    v19[v21] = 39;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else if (v1 == 92)\n
                {\n
                    v25 = v12->field_14;\n
                    v26 = v12;\n
                    v27 = v26->field_8;\n
                    v26->field_8 = v27 + 1;\n
                    v25[v27] = 92;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else if (v1 == 110)\n
                {\n
                    v30 = v12->field_14;\n
                    v31 = v12;\n
                    v32 = v31->field_8;\n
                    v31->field_8 = v32 + 1;\n
                    v30[v32] = 10;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else if (v1 == 116)\n
                {\n
                    v36 = v12->field_14;\n
                    v37 = v12;\n
                    v38 = v37->field_8;\n
                    v37->field_8 = v38 + 1;\n
                    v36[v38] = 9;\n
                    v6 += 1;\n
                    v7 += 1;\n
                }\n
                else\n
                {\n
                    v39 = v12->field_14;\n
                    v40 = v12;\n
                    v41 = v40->field_8;\n
                    v40->field_8 = v41 + 1;\n
                    v39[v41] = 92;\n
                    v6 += 1;\n
                }\n
            }\n
            if (v12->field_8 >= v12->field_4)\n
            {\n
                v9 = cgc_pflush(v12);\n
                if (v9 == -1)\n
                    cgc__terminate();\n
            }\n
        }\n
        if (v12->field_0 != -1)\n
        {\n
            v11 = v10;\n
            return v11;\n
        }\n
        v11 = v10 + v6;\n
        return v11;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
}\n
", "4201559:sub_401c57": null, "4201568:cgc_fprintf": "int cgc_fprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = 0;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc__fprintf(v4, a0);\n
    return v2;\n
}\n
", "4201644:sub_401cac": null, "4201648:cgc__fprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__fprintf(unsigned int v3, char *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    v1 = cgc_getPrintfInfo(v3);\n
    v5 = v2;\n
    return cgc__pprintf(v1, a0, a1);\n
}\n
", "4201734:sub_401d06": null, "4201744:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int *v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v3;  // [bp+0x8]\n
\n
    v1 = 0;\n
    v0 = &v3;\n
    v1 = cgc__fprintf(1, v2, v0);\n
    return v1;\n
}\n
", "4201816:sub_401d58": null, "4201824:cgc_uint32ToHexStr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_uint32ToHexStr(char *v7, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    char v2;  // [bp-0x21]\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v5 = 24;\n
    for (v4 = 0; v5 > 0; v4 += 1)\n
    {\n
        v0 = a2;\n
        *((&v2 + v4)) = cgc__nibbleToHexChar(a0 >> (v5 + 4 & 31));\n
        if (!v3 && *((&v2 + v4)) != 48)\n
            v3 = v4;\n
        v4 += 1;\n
        v0 = a2;\n
        *((&v2 + v4)) = cgc__nibbleToHexChar(a0 >> (v5 & 31));\n
        if (!v3 && *((&v2 + v4)) != 48)\n
            v3 = v4;\n
        v5 -= 8;\n
    }\n
    if (a1)\n
        v3 = 0;\n
    v5 = v3;\n
    for (v4 = 0; v5 < 8; v4 += 1)\n
    {\n
        v7[v4] = (&v2)[v5];\n
        v5 += 1;\n
    }\n
    v6 = v4;\n
    return v6;\n
}\n
", "4202205:sub_401edd": null, "4202208:cgc__nibbleToHexChar": "int cgc__nibbleToHexChar(char v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char v1;  // [bp-0x9]\n
    unsigned int v3;  // eax\n
    char v4;  // cl\n
\n
    v0 = v3;\n
    v2 &= 15;\n
    if (v2 <= 9)\n
    {\n
        v1 = v2 + 48;\n
        return v1;\n
    }\n
    if (!a0)\n
        v4 = 97;\n
    else\n
        v4 = 65;\n
    v1 = v2 - 10 + v4;\n
    return v1;\n
}\n
", "4202298:sub_401f3a": null, "4202304:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_strncpy(v1, -1);\n
}\n
", "4202361:sub_401f79": null, "4202368:cgc_strncpy": "int cgc_strncpy(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xd]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    if (v3 && a1 && a0)\n
    {\n
        v1[v3] = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*((a1 + v1)))\n
                v0 = v1 < a0 - 1;\n
            if (!(v0 & 1))\n
                break;\n
            v1[v3] = *((a1 + v1));\n
            v1 += 1;\n
            v1[v3] = 0;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4202555:sub_40203b": null, "4202560:cgc_strcmp": "int cgc_strcmp(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (v2)\n
    {\n
        if (a0)\n
        {\n
            for (v0 = 0; v2[v0]; v0 += 1)\n
            {\n
                if (!*((a0 + v0)))\n
                {\n
                    v1 = 1;\n
                    return v1;\n
                }\n
                else if (v2[v0] < *((a0 + v0)))\n
                {\n
                    v1 = -1;\n
                    return v1;\n
                }\n
                else if (v2[v0] > *((a0 + v0)))\n
                {\n
                    v1 = 1;\n
                    return v1;\n
                }\n
            }\n
            if (!*((a0 + v0)))\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
            v1 = -1;\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
    else\n
    {\n
        if (a0)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4202840:sub_402158": null, "4202848:cgc_strstr": "int cgc_strstr(char *v4, char *a0)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v1 = v4;\n
    v0 = a0;\n
    if (a0 && v4)\n
    {\n
        while (true)\n
        {\n
            if (*(v2))\n
            {\n
                v1 = v2;\n
                for (v0 = a0; *(v0); v0 += 1)\n
                {\n
                    if (!*(v1))\n
                    {\n
                        v3 = 0;\n
                        return v3;\n
                    }\n
                    if (*(v1) != *(v0))\n
                        break;\n
                    v1 += 1;\n
                }\n
                if (!*(v0))\n
                {\n
                    v3 = v2;\n
                    return v3;\n
                }\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4203087:sub_40224f": null, "4203088:cgc_strrstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strrstr(unsigned int v4, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    do\n
    {\n
        v3 = v2;\n
        v2 = cgc_strstr(v4 + v1, a0);\n
        v1 += 1;\n
    } while (v2);\n
    return v3;\n
}\n
", "4203198:sub_4022be": null, "4203200:cgc_strchr": "int cgc_strchr(char *v2, char a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*(v0) != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_strrchr": "int cgc_strrchr(char *v3, char a0)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v0 = 0; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
            v0 = v1;\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4203447:sub_4023b7": null, "4203456:cgc_strlen": "int cgc_strlen(char *v2)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (v0 = 0; v2[v0]; v0 += 1);\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203553:sub_402421": null, "4203568:cgc_strToUint32": "int cgc_strToUint32(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_26;  // tmp #26\n
    char v1;  // [bp-0x19]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v12;  // eax\n
\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*((v7 + v5)) >= 48)\n
            v1 = *((v7 + v5)) <= 57;\n
        if (!(v1 & 1))\n
            break;\n
        v2 = v5[v7] - 48;\n
        v8 = v3;\n
        v0 = v4;\n
        v3 = v8 * 10;\n
        v4 = (v8 * 10 >> 32) + v0 * 10;\n
        v9 = v2;\n
        v10 = v3;\n
        tmp_26 = v10;\n
        v12 = v4 + (tmp_26 + v9 < tmp_26);\n
        v3 = v10 + v9;\n
        v4 = v12;\n
        v5 += 1;\n
    }\n
    v6 = v3;\n
    return v6;\n
}\n
", "4203788:sub_40250c": null, "4203792:cgc_findFDs": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_findFDs(unsigned int v4, unsigned int *a0, unsigned int *a1)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4 && a0 && a1)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v2 < 10)\n
                v0 = *((v1 + 44 + v2 * 136));\n
            if (!(v0 & 1))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            else if (cgc_strcmp(v1 + 44 + v2 * 136, v4))\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = v1;\n
                *(a0) = *((v5 + 44 + v2 * 136 + 128));\n
                *(a1) = *((v5 + 44 + v2 * 136 + 132));\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4204077:sub_40262d": null, "4204080:cgc_sendGoodbyes": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendGoodbyes()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10]\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 3;\n
    v5 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v7 = 0;\n
        v1 = 0;\n
        if (v3 < 10)\n
        {\n
            v7 = *((v2 + 44 + v3 * 136));\n
            v1 = v7;\n
        }\n
        *(&v7) = v1;\n
        if (!(v1 & 1))\n
            break;\n
        v0 = 8;\n
        cgc_sendMsg(*((v2 + 44 + v3 * 136 + 132)), &v4);\n
        v3 += 1;\n
    }\n
    return v7;\n
}\n
", "4204251:sub_4026db": null, "4204256:cgc_sendMsg": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendMsg(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    do\n
    {\n
        v0 = &v4;\n
        v2 = cgc_transmit(v5, a0 + v3, a1 - v3);\n
        if (v2)\n
            cgc__terminate();\n
        v3 = v4 + v3;\n
    } while (v3 < a1);\n
    return v3;\n
}\n
", "4204406:sub_402776": null, "4204416:cgc_doGet": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_doGet(char *v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = 0;\n
    v3 = cgc_strlen(v5);\n
    cgc_sendMsg(a1, &v2, 8);\n
    cgc_sendMsg(a1, v5, v3);\n
    cgc_recvMsg(a0, &v2);\n
    if (v2 != 1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    while (v1 < v3)\n
    {\n
        if (v3 - v1 <= 0x1000)\n
        {\n
            cgc_recvMsg(a0, v0 + 1504);\n
            cgc_sendMsg(1, v0 + 1504, v3 - v1);\n
            v1 = v3;\n
        }\n
        else\n
        {\n
            cgc_recvMsg(a0, v0 + 1504);\n
            cgc_sendMsg(1, v0 + 1504, 0x1000);\n
            v1 += 0x1000;\n
        }\n
    }\n
    cgc_sendMsg(1, v0 + 1484, 5);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4204852:sub_402934": null, "4204864:cgc_recvMsg": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recvMsg(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    do\n
    {\n
        v0 = &v4;\n
        v2 = cgc_receive(v5, a0 + v3, a1 - v3);\n
        if (!v2 && !(!v4))\n
            continue;\n
        cgc__terminate();\n
        v3 = v4 + v3;\n
    } while (v3 < a1);\n
    return v3;\n
}\n
", "4205024:cgc_parseAndGetPage": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseAndGetPage(unsigned int v7, unsigned int *a0, unsigned int *a1, char *a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: void*\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    if (v7 && a0 && a1 && a2)\n
    {\n
        v0 = v7;\n
        v5 = v0 + cgc_strlen(a2);\n
        if (cgc_strstr(v5, v1 + 1457) != v5)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        v5 += 10;\n
        v4 = cgc_strrstr(v5, v1 + 1468);\n
        if (!v4)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        *(v4) = 0;\n
        v4 = cgc_strchr(v5, 47);\n
        if (v4)\n
        {\n
            *(v4) = 0;\n
            v4 += 1;\n
        }\n
        *(a0) = v5;\n
        *(a1) = v4;\n
        v3 = 0;\n
        v2 = 0;\n
        if (cgc_findFDs(v5, &v3, &v2))\n
        {\n
            cgc_printf(v1 - 5828);\n
            v6 = 0;\n
            return v6;\n
        }\n
        v6 = cgc_doGet(v4, v3, v2);\n
        return v6;\n
    }\n
    v6 = -1;\n
    return v6;\n
}\n
", "4205459:sub_402b93": null, "4205472:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v14, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x5c]\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x44], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x40]\n
    char v7;  // [bp-0x3c]\n
    void* v8;  // [bp-0x24]\n
    void* v9;  // [bp-0x20]\n
    void* v10;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x18]\n
    void* v12;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // eax\n
\n
    v13 = v15;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    cgc_printf_setFlushOnNewline(1);\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v12 = -1;\n
        return v12;\n
    }\n
    do\n
    {\n
        v5 = cgc_readLine(0, v11, 0x1000);\n
        if (v5 > 0)\n
            v11[1 + v5] = 0;\n
        v2 = v4;\n
        if (!v2)\n
        {\n
            if (cgc_strstr(v11, v3 + 1476) == v11)\n
            {\n
                v4 = 2;\n
            }\n
            else if (cgc_strstr(v11, v3 + 1404) != v11)\n
            {\n
                cgc_printf(v3 - 5790);\n
            }\n
            else\n
            {\n
                v10 = v11 + 11;\n
                cgc_random(&v6, 4);\n
                cgc_snprintf(&v7, 24, v3 - 5805);\n
                v16 = v3;\n
                v0 = &v7;\n
                v1 = v16 + 1437;\n
                cgc_printf(v16 - 5802);\n
                v4 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v2 == 1)\n
            {\n
                if (cgc_strstr(v11, v3 + 1476) == v11)\n
                {\n
                    v4 = 2;\n
                }\n
                else if (cgc_strstr(v11, &v7) != v11)\n
                {\n
                    cgc_printf(v3 - 5790);\n
                }\n
                else if (cgc_parseAndGetPage(v11, &v9, &v8, &v7))\n
                {\n
                    cgc_printf(v3 - 5790);\n
                }\n
            }\n
        }\n
    } while (v4 != 2);\n
    cgc_printf(v3 - 5794);\n
    cgc_sendGoodbyes();\n
    v12 = 0;\n
    return v12;\n
}\n
", "4206232:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}