{"4206592:_init": "extern struct_0 *g_40e330;\n
\n
int _init()\n
{\n
    if (g_40e330)\n
    {\n
        g_40e330();\n
        return;\n
    }\n
    return;\n
}\n
", "4206640:sub_403030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_403030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4206656:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4206672:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4206688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4206704:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206720:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4206736:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4206752:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206768:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4206784:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206800:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libstdc++.so::cgc_sin();\n
    return;\n
}\n
", "4206816:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4206832:sub_4030f0": "int sub_4030f0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4206838:sub_4030f6": null, "4206848:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4206891:sub_40312b": null, "4206892:sub_40312c": "int sub_40312c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4206896:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4206900:sub_403134": null, "4206912:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 45555;\n
    v6 = v5 + 802;\n
    v7 = v5 + 802;\n
    if (v7 == v6)\n
        return v5 + 802;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4206963:sub_403173": "int sub_403173()\n
{\n
}\n
", "4206969:sub_403179": "int sub_403179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4206976:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 45491;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 802;\n
    v9 = (v6 + 802 - (v6 + 802) >> 31) + (802 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4207047:sub_4031c7": "int sub_4031c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4207056:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40e324;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40e324)\n
    {\n
        v0 = __dso_handle;\n
        sub_4030f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4207131:sub_40321b": "int sub_40321b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4207136:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207145:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4207149:sub_40322d": null, "4207152:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, edi<4>, 0x0<32>))\n
        return 0;\n
    v5 = v1 * a0;\n
    v6 = cgc_malloc_alloc(&g_heap);\n
    if (v6)\n
    {\n
        v0 = v5;\n
        cgc_memset(v6, 0);\n
        return v6;\n
    }\n
    return 0;\n
}\n
", "4207243:sub_40328b": null, "4207248:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 1;\n
}\n
", "4207285:sub_4032b5": null, "4207296:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 2;\n
}\n
", "4207333:sub_4032e5": null, "4207344:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 16;\n
}\n
", "4207381:sub_403315": null, "4207392:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 14;\n
}\n
", "4207429:sub_403345": null, "4207440:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 12;\n
}\n
", "4207477:sub_403375": null, "4207488:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 4;\n
}\n
", "4207525:sub_4033a5": null, "4207536:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 8;\n
}\n
", "4207573:sub_4033d5": null, "4207584:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 64;\n
}\n
", "4207621:sub_403405": null, "4207632:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 32;\n
}\n
", "4207669:sub_403435": null, "4207680:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13104 + v0] & 4294967168;\n
}\n
", "4207717:sub_403465": null, "4207728:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[13104 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[13104 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[13104 + v1] & 2) >> 1);\n
}\n
", "4207795:sub_4034b3": null, "4207808:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[13104 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207850:sub_4034ea": null, "4207856:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[13104 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[13104 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4207929:sub_403539": null, "4207936:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[13104 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207978:sub_40356a": null, "4207984:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v2;  // [bp-0x4]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v2;\n
    v1 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_exit();\n
    return;\n
}\n
", "4208032:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v2;  // [bp-0x4]\n
    unsigned int v3;  // [bp+0x4]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v2;\n
    v1 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v3;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4208080:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // eax\n
\n
    v5 = v4;\n
    v6 = v5->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v1 = v6;\n
            v10 = v8 + ~(v6);\n
            v2 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v1 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            if (v2)\n
            {\n
                v14 = 24 + v4 + v13 + v1;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v2 != v15);\n
            }\n
            v5 = v4;\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v2 = *(v5);\n
        v1 = v5 + v6 + 24;\n
        v17 = 0;\n
        while (v16 > v17)\n
        {\n
            v0 = &v3;\n
            v18 = cgc_transmit(v2, v1 + v17, v16 - v17);\n
            v17 += *(&v3);\n
            if (v18)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_40370d;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_40370d:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4208421:sub_403725": null, "4208432:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fbuffered(struct_0 *v5, unsigned int a0)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int *v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x18]\n
    unsigned int v6;  // eax\n
    struct_0 *v7;  // edx, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
    unsigned int *v9;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    char *v11;  // ecx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edi\n
    char *v14;  // esi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // edi\n
    void* v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // eax\n
\n
    v6 = a0;\n
    v7 = v5;\n
    v8 = v7->field_8;\n
    if (v8 == -1)\n
    {\n
        v23 = -(v6 < 1);\n
        *((v7 + 8)) = v23;\n
        *((v7 + 12)) = 0;\n
        return v23;\n
    }\n
    if (v7->field_4 == 1)\n
    {\n
        v9 = &v7->field_c;\n
    }\n
    else\n
    {\n
        v10 = v7->field_c;\n
        v11 = v7->field_10;\n
        v17 = v10 - v8;\n
        if (v11 && v17)\n
        {\n
            v2 = v8;\n
            v12 = v10 + ~(v8);\n
            v1 = v17 & 3;\n
            v14 = 0;\n
            if (v12 >= 3)\n
            {\n
                v13 = 27 + v2 + v5;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v11[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v11[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v11[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v11[*((v13 + v14))];\n
                    v14 += 4;\n
                } while ((v17 & -0x4) != v14);\n
            }\n
            if (v1)\n
            {\n
                v15 = 24 + v5 + v14 + v2;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v11[v15[v16]];\n
                    v16 += 1;\n
                } while (v1 != v16);\n
            }\n
            v7 = v5;\n
            v8 = *((v7 + 8));\n
            v17 = *((v7 + 12)) - v8;\n
        }\n
        v1 = v17;\n
        v3 = v7 + 12;\n
        v2 = *(v7);\n
        v18 = v7 + v8 + 24;\n
        v19 = 0;\n
        while (true)\n
        {\n
            v20 = v1;\n
            tmp_3 = v20;\n
            v21 = v20 - v19;\n
            if (tmp_3 <= v19)\n
                break;\n
            v0 = &v4;\n
            v22 = cgc_transmit(v2, v18 + v19, v21);\n
            v19 += *(&v4);\n
            if (v22)\n
                break;\n
        }\n
        v7 = v5;\n
        v6 = a0;\n
        v9 = v3;\n
    }\n
    *(v9) = 0;\n
}\n
", "4208781:sub_40388d": null, "4208784:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2[6];  // eax\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4208886:sub_4038f6": null, "4208896:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v7, unsigned int a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char v6;  // [bp-0x18]\n
    struct_0 *v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    struct_0 *v11;  // eax\n
    char *v12;  // eax\n
    unsigned int v13;  // ecx\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edx\n
    void* v21;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v22;  // eax\n
    unsigned int v24;  // ebx\n
    char *v25;  // eax\n
    unsigned int v26;  // edx\n
    char *v27;  // esi, Other Possible Types: unsigned int\n
    unsigned int v28;  // ebx\n
    char *v29;  // esi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = a1;\n
    v9 = v8->field_8;\n
    if (v9 == v8->field_c)\n
    {\n
        v8->field_c = 0;\n
        v8->field_8 = 0;\n
        if (!cgc_receive(v8->field_0, v8 + 1, 0x400))\n
        {\n
            v10 = *(&v6);\n
            if (v10)\n
            {\n
                v11 = a1;\n
                v11->field_c = v10;\n
                v12 = v11->field_14;\n
                if (v12)\n
                {\n
                    v13 = v10 & 3;\n
                    v15 = 0;\n
                    if (v10 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &a1->field_0 + v15) = v12[*(24 + &a1->field_0 + v15)];\n
                            *(25 + &a1->field_0 + v15) = v12[*(25 + &a1->field_0 + v15)];\n
                            *(26 + &a1->field_0 + v15) = v12[*(26 + &a1->field_0 + v15)];\n
                            *(27 + &a1->field_0 + v15) = v12[*(27 + &a1->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v10 & -0x4) != v15);\n
                    }\n
                    if (v13)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v12[v16[v17]];\n
                            v17 += 1;\n
                        } while (v13 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v8 = a1;\n
        v9 = *((v8 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v7;\n
    if (v9 != -1)\n
    {\n
        v20 = *((v8 + 12)) - v9;\n
        if (v20 > v18)\n
            v20 = v18;\n
        v0 = v20;\n
        v4 = v20;\n
        cgc_memcpy();\n
        v21 = v0;\n
        v22 = *((v8 + 8)) + v21;\n
        *((v8 + 8)) = v22;\n
        if (v22 == *((v8 + 12)))\n
        {\n
            *((v8 + 12)) = 0;\n
            *((v8 + 8)) = 0;\n
        }\n
        v19 = v7;\n
        if (!(v21 < v18))\n
            goto LABEL_403ba3;\n
    }\n
    else\n
    {\n
        v21 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_403ba3:\n
            return v21;\n
        }\n
    }\n
    v5 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = v21;\n
        if (cgc_receive(*(v8), v7 + v21, v18 - v21, &v4))\n
            return -1;\n
        v2 = v4;\n
        v24 = v0;\n
        if (!v2)\n
            return -1;\n
        v25 = *((v8 + 20));\n
        if (v25)\n
        {\n
            v26 = v2;\n
            v3 = v26 & 3;\n
            v27 = 0;\n
            if (v26 - 1 >= 3)\n
            {\n
                v28 = v5 + v0;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v25[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v25[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v25[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v25[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            v8 = a1;\n
            v24 = v0;\n
            if (v3)\n
            {\n
                v29 = v27 + v24 + v7;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v25[v29[v30]];\n
                    v30 += 1;\n
                } while (v3 != v30);\n
            }\n
        }\n
        v21 = v24 + v2;\n
        v18 = a0;\n
        if (v21 >= v18)\n
            return v21;\n
    }\n
}\n
", "4209282:sub_403a82": null, "4209581:sub_403bad": null, "4209584:cgc_freaduntil": "int cgc_freaduntil(unsigned int v1, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_26;  // tmp #26\n
    int tmp_1;  // tmp #1\n
    unsigned int v2;  // eax\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    char *v4;  // edi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    char *v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v2 = a0;\n
    v0 = a1;\n
    v3 = 0;\n
    tmp_26 = v2;\n
    v6 = v2 - 1;\n
    if (tmp_26 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = v6;\n
            v5 = cgc__getc();\n
            if (v5 == -1)\n
                goto LABEL_403c3d;\n
            if (v5 == v0)\n
                break;\n
            *((v1 + v3)) = v5;\n
            v3 += 1;\n
            v6 = v4;\n
            if (v4 == v3)\n
                goto LABEL_403c14;\n
        }\n
        v6 = v4;\n
    }\n
    tmp_1 = v6;\n
    v6 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_403c34;\n
LABEL_403c14:\n
    v7 = v6;\n
    while (true)\n
    {\n
        v8 = cgc__getc();\n
        if (v8 == -1)\n
            break;\n
        if (v8 == v0)\n
        {\n
            v6 = v7;\n
LABEL_403c34:\n
            *((v1 + v6)) = 0;\n
            return v6;\n
        }\n
    }\n
LABEL_403c3d:\n
    return -1;\n
}\n
", "4209738:sub_403c4a": null, "4209744:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct struct_0 **v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20], Other Possible Types: char\n
    char v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x18]\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ecx\n
    unsigned int v12;  // edx\n
    unsigned int v14;  // edx\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edi\n
    unsigned int v17;  // ebx\n
    struct struct_0 **v18;  // eax, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v8 = v6->field_8;\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v18 = -1;\n
        if (cgc_receive(v6->field_0, &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v10 = v6->field_14;\n
        *(&v18) = v1;\n
        if (!v10)\n
            return v18;\n
        *(&v18) = *(v10 + v18);\n
    }\n
    else if (v8 != v6->field_c)\n
    {\n
LABEL_403d5c:\n
        v7->field_8 = v8 + 1;\n
        v18 = *(24 + &v7->field_0 + v8);\n
        return v18;\n
    }\n
    else\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (!(!cgc_receive(v6->field_0, v6 + 1, 0x400) && *(&v2)))\n
            return -1;\n
        v2 = *(&v4);\n
        v6->field_c = *(&v2);\n
        v11 = v6->field_14;\n
        if (v11)\n
        {\n
            v12 = v2;\n
            v14 = v12 & 3;\n
            v15 = 0;\n
            if (v12 - 1 >= 3)\n
            {\n
                v15 = 0;\n
                do\n
                {\n
                    *(24 + &v7->field_0 + v15) = *(v11 + *(24 + &v7->field_0 + v15));\n
                    *(25 + &v7->field_0 + v15) = *(v11 + *(25 + &v7->field_0 + v15));\n
                    *(26 + &v7->field_0 + v15) = *(v11 + *(26 + &v7->field_0 + v15));\n
                    *(27 + &v7->field_0 + v15) = *(v11 + *(27 + &v7->field_0 + v15));\n
                    v15 += 4;\n
                } while ((v2 & -0x4) != v15);\n
            }\n
            if (v14)\n
            {\n
                v16 = 24 + v15 + v7;\n
                v17 = 0;\n
                do\n
                {\n
                    v16[v17] = *(v11 + v16[v17]);\n
                    v17 += 1;\n
                } while (v14 != v17);\n
            }\n
        }\n
        if (v2 >= 0)\n
        {\n
            v8 = v7->field_8;\n
            goto LABEL_403d5c;\n
        }\n
    }\n
}\n
", "4210100:sub_403db4": null, "4210112:cgc_free": "extern char g_heap;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = &g_heap;\n
    return malloc_free();\n
}\n
", "4210161:sub_403df1": null, "4210176:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v10, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x434]\n
    int tmp_3;  // tmp #3\n
    unsigned int v1;  // [bp-0x428]\n
    unsigned int v2;  // [bp-0x424]\n
    unsigned int v3;  // [bp-0x420]\n
    unsigned int v4;  // [bp-0x41c]\n
    char v5;  // [bp-0x418]\n
    char v6;  // [bp-0x414]\n
    unsigned int v7;  // [bp-0x413]\n
    unsigned int v8;  // [bp-0x412]\n
    unsigned int v9;  // [bp-0x411]\n
    struct_0 *v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // eax\n
    char *v14;  // esi\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    void* v19;  // edi, Other Possible Types: unsigned int\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // ebx\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ecx\n
    char *v25;  // ecx\n
    unsigned int v26;  // edx\n
    void* v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = a1;\n
    v12 = a0;\n
    if (v11->field_8 != -1)\n
    {\n
        if (v12 >= 0x400)\n
        {\n
            cgc_fflush(v11);\n
            v12 = a0;\n
        }\n
        else\n
        {\n
            v13 = v11->field_c;\n
            v19 = 0;\n
            if (v13 + v12 >= 0x400)\n
            {\n
                v19 = 0x400 - v13;\n
                cgc_memcpy(&v11[1].padding_4[v13], v10);\n
                v11->field_c = v11->field_c + v19;\n
                cgc_fflush(v11);\n
                v12 = a0;\n
            }\n
            if (v19 >= v12)\n
                return v19;\n
            v31 = v12 - v19;\n
            v32 = v10 + v19;\n
            cgc_memcpy(&v11[1].padding_4[v11->field_c], v32);\n
            v11->field_c = v11->field_c + v31;\n
            return a0;\n
        }\n
    }\n
    v3 = v11->field_0;\n
    v14 = v11->field_10;\n
    if (!v14)\n
    {\n
        v18 = 0;\n
        do\n
        {\n
            if (v18 >= v12)\n
                return v12;\n
            v16 = v12 - v18;\n
            v0 = &v6;\n
            v17 = cgc_transmit(v3, v10 + v18, v16);\n
            v12 = a0;\n
            v18 += *(&v6);\n
        } while (!v17);\n
    }\n
    else\n
    {\n
        if (!v12)\n
            return v12;\n
        v15 = 0;\n
LABEL_403e6a:\n
        v20 = v12 - v15;\n
        if (v20 >= 0x400)\n
            v20 = 0x400;\n
        v4 = v15;\n
        cgc_memcpy();\n
        v2 = v20;\n
        if (v20)\n
        {\n
            v21 = v2;\n
            v23 = v21 & 3;\n
            v24 = 0;\n
            if (v21 - 1 >= 3)\n
            {\n
                v24 = 0;\n
                do\n
                {\n
                    (&v6)[v24] = v14[(&v6)[v24]];\n
                    *(&v7 + v24) = v14[*(&v7 + v24)];\n
                    *(&v8 + v24) = v14[*(&v8 + v24)];\n
                    *(&v9 + v24) = v14[*(&v9 + v24)];\n
                    v24 += 4;\n
                } while ((v2 & 2044) != v24);\n
            }\n
            if (v23)\n
            {\n
                v25 = &(&v6)[v24];\n
                v26 = 0;\n
                do\n
                {\n
                    v25[v26] = v14[v25[v26]];\n
                    v26 += 1;\n
                } while (v23 != v26);\n
            }\n
        }\n
        v27 = 0;\n
        do\n
        {\n
            v28 = v2;\n
            tmp_3 = v28;\n
            v29 = v28 - v27;\n
            if (tmp_3 <= v27)\n
            {\n
                v15 = v4 + v2;\n
                v12 = a0;\n
                if (v15 >= v12)\n
                    return a0;\n
                goto LABEL_403e6a;\n
            }\n
            v0 = &v5;\n
            v30 = cgc_transmit(v3, &(&v6)[v27], v29);\n
            v27 += *(&v5);\n
        } while (!v30);\n
    }\n
    return -1;\n
}\n
", "4210530:sub_403f62": null, "4210760:sub_404048": null, "4210768:cgc_fxlat": "int cgc_fxlat(unsigned int v2[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int v3[6];  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v6;  // esi\n
    char *v7;  // eax\n
    char *v8;  // ebx\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ecx, Other Possible Types: char\n
    char *v11;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // edx\n
    char v17;  // al\n
\n
    v3 = v2;\n
    v4 = v3[4];\n
    if (!a0)\n
    {\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return cgc_free(v4);\n
    }\n
    v0 = 0x100;\n
    v6 = cgc_realloc(v4);\n
    v3[4] = v6;\n
    v0 = 0x100;\n
    v7 = cgc_realloc(v3[5]);\n
    v3[5] = v7;\n
    v8 = a0;\n
    v10 = *(v8);\n
    if (!*(v8))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v11 = v8 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v10, 13);\n
            v10 = *(v11);\n
            v11 += 1;\n
        } while (v10);\n
    }\n
    v1 = v7;\n
    v12 = 0;\n
    do\n
    {\n
        *((v6 + v12)) = v12;\n
        *((v6 + v12 + 1)) = v12 + 1;\n
        *((v6 + v12 + 2)) = v12 + 2;\n
        *((v6 + v12 + 3)) = v12 + 3;\n
        *((v6 + v12 + 4)) = v12 + 4;\n
        *((v6 + v12 + 5)) = v12 + 5;\n
        *((v6 + v12 + 6)) = v12 + 6;\n
        *((v6 + v12 + 7)) = v12 + 7;\n
        v12 += 8;\n
    } while (v12 != 0x100);\n
    v13 = 255;\n
    while (true)\n
    {\n
        v14 = v9;\n
        v15 = v9 * 3;\n
        v16 = (0 CONCAT v14) /m v13 >> 32;\n
        v9 = v15 / 0x200000 ^ __ROL__(v15, 13);\n
        v17 = *((v6 + v13));\n
        *((v6 + v13)) = *((v6 + v16));\n
        *((v6 + v16)) = v17;\n
        v13 -= 1;\n
    }\n
}\n
", "4211136:cgc_malloc": "extern char g_heap;\n
\n
int cgc_malloc(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = &g_heap;\n
    return cgc_malloc_alloc();\n
}\n
", "4211185:sub_4041f1": null, "4211200:cgc_malloc_alloc": "extern char g_40b108;\n
extern char g_40b13a;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    int tmp_5;  // tmp #5\n
    unsigned int v2;  // [bp-0x20]\n
    char v4;  // [bp-0x18]\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // ecx\n
\n
    v9 = a0;\n
    if (v9 < 0)\n
        return 0;\n
    v11 = v8;\n
    v12 = v9 + 3 & -0x4;\n
    if (!v12)\n
    {\n
        v10 = tiny_alloc();\n
        return v10;\n
    }\n
    else if (v12 <= 15)\n
    {\n
        v10 = tiny_alloc();\n
        return v10;\n
    }\n
    else\n
    {\n
        if (v12 > 131071)\n
        {\n
            v15 = v12 + 4103 & -0x1000;\n
            v0 = &v4;\n
            tmp_5 = cgc_allocate(v15, 0);\n
            if (tmp_5)\n
                return 0;\n
            v18 = *(&v4);\n
            *(v18) = v8;\n
            v16 = v18;\n
            *((v18 + 4)) = v15;\n
        }\n
        v13 = v12 + 23;\n
        v14 = v13 & -0x10;\n
        v2 = v14;\n
        if (!(v13 & -0x10))\n
        {\n
            v17 = -1;\n
            v16 = *((v11 + -0x4));\n
            if (!v16)\n
                goto LABEL_0x4044a6;\n
            else\n
                goto LABEL_0x4044c0;\n
        }\n
        else if (v14 < 513)\n
        {\n
            v17 = (v13 >> 4) + 2;\n
            v16 = 0;\n
        }\n
        else if (v14 <= 0x1200)\n
        {\n
            v17 = (v14 - 0x200 >> 7) + 34;\n
            v16 = *((v11 + v17 * 4));\n
            if (!v16)\n
                goto LABEL_0x4044a6;\n
            else\n
                goto LABEL_0x4044c0;\n
        }\n
        else\n
        {\n
            v17 = 130;\n
            if (v14 <= 0x20000)\n
            {\n
                v17 = (v14 - 0x1200 >> 11) + 66;\n
                v16 = *((v11 + v17 * 4));\n
                if (!v16)\n
                    goto LABEL_0x4044a6;\n
                else\n
                    goto LABEL_0x4044c0;\n
            }\n
        }\n
    }\n
}\n
", "4212080:tiny_alloc": "int tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned short v1;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct struct_0 *v2[1160];  // [bp-0x28]\n
    unsigned short *v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned short *v5;  // [bp-0x1c]\n
    char v6;  // [bp-0x18]\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // esi\n
    struct struct_0 *v10[1160];  // edi, Other Possible Types: unsigned int\n
    unsigned short v11[2];  // edx, Other Possible Types: unsigned int\n
    unsigned int v12;  // ebx\n
    unsigned short *v13;  // edx, Other Possible Types: unsigned int\n
    unsigned short *v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    struct struct_0 *v16[1160];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // eax\n
    unsigned short v20;  // si\n
\n
    v9 = v8;\n
    if (v8 <= 15)\n
    {\n
        v10 = v8 / 4 - 1;\n
    }\n
    else if (v8 <= 0x200)\n
    {\n
        v10 = (v8 >> 4) + 2;\n
    }\n
    else if (v8 <= 0x1200)\n
    {\n
        v10 = (v8 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v8 <= 0x20000)\n
            v10 = (v8 - 0x1200 >> 11) + 66;\n
    }\n
    v14 = *((v16 + v10 * 4));\n
    if (v14)\n
    {\n
        *((v16 + v10 * 4)) = *(&v14);\n
        return *((v16 + v10 * 4));\n
    }\n
    v11 = *((v16 + v10 * 4 + 4620));\n
    v2[0] = v16;\n
    if (v11)\n
    {\n
        v1 = v11[0];\n
        v12 = v11[1];\n
    }\n
    else\n
    {\n
        v13 = *((v16 + 4632));\n
        if (v13)\n
        {\n
            v14 = *((v16 + 4636));\n
        }\n
        else\n
        {\n
            v0 = &v6;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v2[1158] = 0;\n
                return 0;\n
            }\n
            v15 = *(&v6);\n
            v5 = v15 + 1048575;\n
            v13 = v5 & -0x100000;\n
            v1 = v15;\n
            v16 = v2;\n
            v3 = v13;\n
            if (v13 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v13 = v3;\n
                v16 = v2;\n
            }\n
            v4 = v13 + 0x100000;\n
            v17 = v1 + 0x200000;\n
            v1 = v17 - v4;\n
            if (v17 > v4)\n
            {\n
                cgc_deallocate(v4);\n
                v13 = v3;\n
                v16 = v2;\n
            }\n
            *((v16 + (v5 >> 20) + 524)) = 1;\n
            *((v16 + 4632)) = v13;\n
            v14 = 0;\n
            if (!v13)\n
                return 0;\n
        }\n
        v18 = v13;\n
        v11 = v13 + v14;\n
        *((v16 + v10 * 4 + 4620)) = v11;\n
        *((v14 + v18)) = v9;\n
        *((v14 + v18 + 2)) = v9;\n
        v19 = v14 + 0x1000;\n
        *((v16 + 4636)) = v19;\n
        if (v19 == 0x100000)\n
            *((v16 + 4632)) = 0;\n
        v1 = v9;\n
        v12 = v9;\n
    }\n
    v20 = v9 + v12;\n
    *((v11 + 2)) = v20;\n
    if (v1 + v20 < 4097)\n
        return v12 + v11;\n
    v2[1155 + v10] = 0;\n
}\n
", "4212556:sub_40474c": null, "4212560:malloc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int malloc_free(unsigned int v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v9;  // [bp-0x4]\n
    char v10;  // [bp+0x0]\n
    char v12;  // [bp+0x10]\n
    char v13;  // [bp+0x18]\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // esi\n
    char v16;  // cl\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // edx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // edx\n
    unsigned int v40;  // esi\n
    unsigned int v41;  // edi\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // edx\n
\n
    v14 = a0;\n
    if (!v14)\n
        return v14;\n
    v15 = v11;\n
    v16 = *((v15 + (v14 >> 20) + 524));\n
    if (v16 != 2)\n
    {\n
        if (v16 == 1)\n
        {\n
            v24 = *((v14 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v20 = v24 / 4 - 1;\n
                goto LABEL_4048ef;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v20 = (v24 >> 4) + 2;\n
                goto LABEL_4048ef;\n
            }\n
        }\n
        if (v16)\n
            return v14;\n
        if ((v14 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_404ae4;\n
        }\n
        else\n
        {\n
            v25 = *((v14 - 8));\n
            if (v25 != v15)\n
            {\n
                v26 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v15;\n
            }\n
            else\n
            {\n
                v25 = *((v14 - 4));\n
                if (v25 - 0x20000 <= 2147356671 && !(v25 & 4095))\n
                {\n
                    v14 = cgc_deallocate(v14 - 8);\n
                    return v14;\n
                }\n
                v26 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v25;\n
            v14 = cgc_heap_error(v26, v14);\n
        }\n
    }\n
    else if (!(v14 & 7))\n
    {\n
        v17 = v14 - 8;\n
        v18 = *((v17 + 4));\n
        if ((v18 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_404ae4;\n
        }\n
        else\n
        {\n
            v3 = &_GLOBAL_OFFSET_TABLE_;\n
            v15 = v18 - 131073;\n
            if (v15 <= -131058)\n
            {\n
                v19 = v3 - 12518;\n
                goto LABEL_404ae4;\n
            }\n
            else\n
            {\n
                v21 = v18;\n
                v22 = *(v17);\n
                v23 = v17;\n
                v24 = v17 - v22;\n
                if (!v22)\n
                    v24 = v22;\n
                v15 = v21 + v23;\n
                v2 = v15;\n
                v4 = v23;\n
                if (v24)\n
                {\n
                    v5 = v24;\n
                    v27 = *((v24 + 4));\n
                    if (!((v27 & -2) == v22))\n
                        goto LABEL_404aff;\n
                    if (*(v2) == v21)\n
                    {\n
                        if ((v27 & 1))\n
                        {\n
                            v28 = v22;\n
                            if (v22 <= 15)\n
                            {\n
                                v29 = v27 / 4 - 1;\n
                                v30 = v5;\n
                            }\n
                            else\n
                            {\n
                                tmp_2 = v22;\n
                                v30 = v5;\n
                                if (tmp_2 <= 0x200)\n
                                {\n
                                    v29 = (v27 >> 4) + 2;\n
                                }\n
                                else\n
                                {\n
                                    if (v28 <= 0x1200)\n
                                    {\n
                                        v29 = (v28 - 0x200 >> 7) + 34;\n
                                    }\n
                                    else\n
                                    {\n
                                        v29 = 130;\n
                                        if (v28 <= 0x20000)\n
                                            v29 = (v28 - 0x1200 >> 11) + 66;\n
                                    }\n
                                }\n
                            }\n
                            v31 = v29;\n
                            *((v30 + 4)) = v28;\n
                            v32 = *((v30 + 8));\n
                            if (v32)\n
                                *((v32 + 12)) = *((v30 + 12));\n
                            v33 = *((v30 + 12));\n
                            if (v33)\n
                                *((v33 + 8)) = v32;\n
                            if (*((v11 + (v31 << 2))) == v30)\n
                                *((v11 + v31 * 4)) = v33;\n
                            *((v30 + 8)) = 0;\n
                            *((v30 + 12)) = 0;\n
                            v34 = v28 + *((v4 + 4));\n
                            *((v30 + 4)) = v34;\n
                            *(v2) = v34;\n
                            v4 = v30;\n
                        }\n
LABEL_404977:\n
                        v35 = v2;\n
                        v36 = *((v35 + 4));\n
                        v37 = v11;\n
                        v15 = v4;\n
                        if ((v36 & 1))\n
                        {\n
                            v38 = v36 & -2;\n
                            if (v38 <= 15)\n
                            {\n
                                v39 = v36 / 4 - 1;\n
                            }\n
                            else\n
                            {\n
                                if (v38 <= 0x200)\n
                                {\n
                                    v39 = (v36 >> 4) + 2;\n
                                }\n
                                else\n
                                {\n
                                    if (v38 <= 0x1200)\n
                                    {\n
                                        v39 = (v38 - 0x200 >> 7) + 34;\n
                                    }\n
                                    else\n
                                    {\n
                                        v39 = 130;\n
                                        if (v38 <= 0x20000)\n
                                            v39 = (v38 - 0x1200 >> 11) + 66;\n
                                    }\n
                                }\n
                            }\n
                            *((v35 + 4)) = v38;\n
                            v40 = *((v35 + 8));\n
                            if (v40)\n
                                *((v40 + 12)) = *((v35 + 12));\n
                            v41 = *((v35 + 12));\n
                            if (v41)\n
                                *((v41 + 8)) = v40;\n
                            v37 = v11;\n
                            v42 = v2;\n
                            if (*((v37 + (v39 << 2))) == v42)\n
                                *((v37 + v39 * 4)) = v41;\n
                            *((v42 + 8)) = 0;\n
                            *((v42 + 12)) = 0;\n
                            v15 = v4;\n
                            v43 = v38 + *((v15 + 4));\n
                            *((v15 + 4)) = v43;\n
                            *((v15 + v43)) = v43;\n
                        }\n
                        v44 = *((v15 + 4));\n
                        if (v44 <= 15)\n
                        {\n
                            v45 = v44 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v44 <= 0x200)\n
                            {\n
                                v45 = (v44 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v44 <= 0x1200)\n
                                {\n
                                    v45 = (v44 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v45 = 130;\n
                                    if (v44 <= 0x20000)\n
                                        v45 = (v44 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        if (!(v44 & 1))\n
                        {\n
                            *((v15 + 4)) = v44 | 1;\n
                            *((v15 + 8)) = 0;\n
                            *((v15 + 12)) = *((v37 + v45 * 4));\n
                            *((v37 + v45 * 4)) = v15;\n
                            v14 = *((v15 + 12));\n
                            if (!v14)\n
                                return *((v15 + 12));\n
                            *((v14 + 8)) = v15;\n
                        }\n
                        goto LABEL_404aeb;\n
                    }\n
                }\n
                else if (*((v23 + v21)) == v21)\n
                {\n
                    goto LABEL_404977;\n
                }\n
                v0 = v14;\n
                v14 = cgc_heap_error(v3 - 12425, v2);\n
                v20 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_4048ef:\n
                *(v14) = *((v15 + v20 * 4));\n
                *((v15 + v20 * 4)) = v14;\n
                return v14;\n
            }\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_404ae4:\n
    v9 = v14;\n
    v8 = v19;\n
    cgc_heap_error(*(&v10));\n
LABEL_404aeb:\n
    v7 = v15;\n
    v6 = *(&v12) - 12848;\n
    v14 = cgc_heap_error(*(&v10));\n
LABEL_404aff:\n
    v8 = v14;\n
    v7 = *(&v13);\n
    v6 = *(&v12) - 12477;\n
    cgc_heap_error(v11, a0);\n
    return cgc_malloc_size(v11, a0);\n
}\n
", "4213536:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4213595:sub_404b5b": null, "4213600:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    int tmp_7;  // tmp #7\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // edi\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    struct_0 *v9;  // edx, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v13;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_404c40:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_404c38:\n
        malloc_free(v1, a0);\n
        goto LABEL_404c40;\n
    }\n
    if (!v4)\n
    {\n
        v13 = cgc_malloc_alloc(v7, v2);\n
        return v13;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + v5);\n
    if ((*(524 + v7 + v5) & 253))\n
    {\n
        v7 = 0;\n
        tmp_7 = v6;\n
        v9 = a0;\n
        if (tmp_7 == 1)\n
            v7 = *((v9 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_404c17;\n
    }\n
    else\n
    {\n
        v9 = a0;\n
        if (*((v9 - 4)) - 8 >= v2)\n
        {\n
LABEL_404c17:\n
            v3 = v9;\n
            goto LABEL_404c40;\n
        }\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_404c40;\n
    v3 = v8;\n
    v10 = v1;\n
    *(&v7) = *((v10 + v5 + 524));\n
    if (!(*((v10 + v5 + 524)) & 253))\n
    {\n
        v12 = a0;\n
        v11 = *((v12 - 4)) - 8;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        tmp_7 = v7;\n
        v12 = a0;\n
        if (tmp_7 == 1)\n
            v11 = *((v12 & -0x1000));\n
    }\n
    v0 = v11;\n
    cgc_memcpy(v3, v12);\n
    goto LABEL_404c38;\n
}\n
", "4213834:sub_404c4a": null, "4213840:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x8]\n
    char v5;  // [bp-0x4]\n
    unsigned int v6;  // [bp+0x4]\n
    char v7;  // [bp+0x8]\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v8 = &v5;\n
    v4 = v9;\n
    v10 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v7;\n
    v2 = &v7;\n
    v1 = v6;\n
    v0 = cgc_stderr;\n
    cgc_vfprintf();\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_memchr();\n
    return;\n
}\n
", "4213904:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4213962:sub_404cca": null, "4213968:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4214033:sub_404d11": null, "4214048:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4214182:sub_404da6": null, "4214192:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // ebx\n
    char *v3;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edx\n
    char *v8;  // edx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v12;  // edi\n
    char *v13;  // edi, Other Possible Types: unsigned int\n
    unsigned int v14;  // ebx\n
    char *v15;  // ecx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // edi\n
    unsigned int v20;  // esi\n
\n
    v2 = a1;\n
    v3 = a0;\n
    if (v1 > v3)\n
    {\n
        if (!v2)\n
            return v1;\n
        v5 = v2 - 1;\n
        v0 = v2 & 3;\n
        v13 = 0;\n
        if (v5 >= 3)\n
        {\n
            v8 = &v1[v5];\n
            v9 = &v3[v5];\n
            v10 = 0;\n
            do\n
            {\n
                v8[v10] = *((v9 + v10));\n
                v8[1 + v10] = *((v9 + v10 - 1));\n
                v8[2 + v10] = *((v9 + v10 - 2));\n
                v8[3 + v10] = *((v9 + v10 - 3));\n
                v10 -= 4;\n
            } while (!(a1 & -0x4) != v10);\n
            v13 = -(v10);\n
        }\n
        v14 = v0;\n
        if (!v14)\n
            return v1;\n
        v17 = ~(v13) + a1;\n
        v20 = 0;\n
        do\n
        {\n
            v1[v20 + v17] = v3[v20 + v17];\n
            v20 -= 1;\n
        } while (-(v14) != v20);\n
        return v1;\n
    }\n
    else\n
    {\n
        if (!v2)\n
            return v1;\n
        v6 = v2 & 3;\n
        v12 = 0;\n
        v7 = v1;\n
        if (v2 - 1 >= 3)\n
        {\n
            v12 = 0;\n
            do\n
            {\n
                *((v7 + v12)) = v3[v12];\n
                *((v7 + v12 + 1)) = v3[1 + v12];\n
                *((v7 + v12 + 2)) = v3[2 + v12];\n
                *((v7 + v12 + 3)) = v3[3 + v12];\n
                v12 += 4;\n
            } while ((v2 & -0x4) != v12);\n
        }\n
        if (!v6)\n
            return v1;\n
        v15 = &v3[v12];\n
        v16 = 0;\n
        do\n
        {\n
            v1[v16 + v12] = v15[v16];\n
            v16 += 1;\n
        } while (v6 != v16);\n
        return v1;\n
    }\n
}\n
", "4214489:sub_404ed9": null, "4214496:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4214610:sub_404f52": null, "4214624:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4214742:sub_404fd6": null, "4214752:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4214864:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4214977:sub_4050c1": null, "4214992:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x1c]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4215099:sub_40513b": null, "4215104:cgc_sprintf": "int cgc_sprintf(unsigned int v3, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x18]\n
    char v4;  // [bp+0xc]\n
\n
    v2 = &v4;\n
    v1 = v3;\n
    v0 = 0;\n
    return cgc__vsfprintf();\n
}\n
", "4215158:sub_405176": null, "4215168:cgc_vsprintf": "int cgc_vsprintf(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = 0;\n
    return cgc__vsfprintf();\n
}\n
", "4215218:sub_4051b2": null, "4215232:cgc__vsfprintf": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x78]\n
    struct_0 *v5;  // [bp-0x68]\n
    unsigned int v6;  // [bp-0x64]\n
    unsigned int v8;  // [bp-0x58]\n
    char v9;  // [bp-0x54]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    char v13;  // [bp-0x4]\n
    char v16;  // [bp+0x8]\n
    unsigned int v33;  // ebp\n
    unsigned int v34;  // ebx\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // edx\n
    struct struct_0 **v38;  // ecx\n
    char *v69;  // ebx\n
    unsigned int v70;  // esi\n
    struct_0 *v71;  // eax\n
\n
    v33 = &v13;\n
    v12 = v34;\n
    v11 = v35;\n
    v69 = *(&v16);\n
    v5 = v38 + 1;\n
    v71 = *(v38);\n
    if (!*(v38))\n
    {\n
        v70 = 0;\n
    }\n
    else\n
    {\n
        v6 = v36;\n
        v8 = 20 + -0x1 * &v9;\n
        v70 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4215305:sub_405209": null, "4216784:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4216836:sub_405804": null, "4216848:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v1, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    char v5;  // al, Other Possible Types: unsigned int\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v5 = *(v3);\n
    if (*(v3))\n
    {\n
        v4 = v3 + 1;\n
        do\n
        {\n
            if (!*(v2))\n
                return v5 - *(v2);\n
            v5 = cgc_tolower(v5);\n
            v0 = v5;\n
            if (v0 != cgc_tolower(*(v2)))\n
                return *((v4 - 1)) - *(v2);\n
            v2 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v2);\n
}\n
", "4216969:sub_405889": null, "4216976:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4217083:sub_4058fb": null, "4217088:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4217160:sub_405948": null, "4217168:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4217240:sub_405998": null, "4217248:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4217304:sub_4059d8": null, "4217312:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4217399:sub_405a37": null, "4217408:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4217446:sub_405a66": null, "4217456:cgc_strncasecmp": "int cgc_strncasecmp(char v2[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v3;  // edi, Other Possible Types: unsigned int\n
    char v4[2];  // esi, Other Possible Types: unsigned int\n
    char v5;  // al\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v3 = a0;\n
    v4 = v2;\n
    v0 = &v4[a1];\n
    v5 = v4[0];\n
    if (v4[0])\n
    {\n
        while (*(v3))\n
        {\n
            v6 = cgc_tolower(v5);\n
            v1 = v6;\n
            if (v1 != cgc_tolower(*(v3)))\n
                break;\n
            if (v4 >= v0)\n
                break;\n
            v3 += 1;\n
            v5 = *((v4 + 1));\n
            v4 += 1;\n
            if (!v5)\n
                break;\n
        }\n
    }\n
    v7 = (v4 == v0 ? *(v4) - *(v3) : 0);\n
    return v7;\n
}\n
", "4217587:sub_405af3": null, "4217600:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4217701:sub_405b65": null, "4217712:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4217807:sub_405bcf": null, "4217808:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // esi, Other Possible Types: unsigned int\n
    void* v5;  // edi, Other Possible Types: unsigned int\n
    char *v6;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_405c32;\n
                goto LABEL_405c30;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_405c32;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_405c30:\n
    v4 = 0;\n
LABEL_405c32:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4217937:sub_405c51": null, "4217952:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(v1, a0))\n
        {\n
            tmp_7 = *((v1 + 1));\n
            v1 += 1;\n
            if (!tmp_7)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v1;\n
        }\n
    }\n
}\n
", "4218040:sub_405cb8": null, "4218048:cgc_strtol": "int cgc_strtol(char v7[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
    char v11[2];  // esi\n
    char v12;  // al\n
    unsigned int v13;  // eax, Other Possible Types: char\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ecx\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // edx\n
    void* v26;  // ebx, Other Possible Types: unsigned int\n
    void* v27;  // esi, Other Possible Types: unsigned int\n
    char v28[2];  // edi, Other Possible Types: unsigned int\n
    char v29[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
\n
    v6 = v8;\n
    v5 = v9;\n
    v4 = v10;\n
    v11 = v7;\n
    v13 = cgc_isspace(v11[0]);\n
    v28 = v11;\n
    if (v13)\n
    {\n
        v28 = v11;\n
        do\n
        {\n
            if (!*(v28))\n
            {\n
                v26 = 0;\n
                v25 = 1;\n
                v15 = 1;\n
                v27 = 0;\n
                v16 = a0;\n
                if (!v16)\n
                    goto LABEL_405eb5;\n
            }\n
            v12 = *((v28 + 1));\n
            v28 += 1;\n
            v13 = cgc_isspace(v12);\n
        } while (v13);\n
    }\n
    v14 = a1;\n
    if (*(v28) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v28) == 43)\n
            v28 += 1;\n
        if (!v14)\n
            goto LABEL_405d82;\n
    }\n
    else\n
    {\n
        v28 += 1;\n
        v0 = -1;\n
        if (!v14)\n
        {\n
LABEL_405d82:\n
            *(&v13) = *(v28);\n
            if (*(v28) != 48)\n
            {\n
LABEL_405dbb:\n
                v13 = cgc_isdigit(v13);\n
                v14 = 10;\n
                if (!v13)\n
                    goto LABEL_405e97;\n
LABEL_405dd3:\n
                *(&v13) = *(v28);\n
LABEL_405dd5:\n
                if (!v13)\n
                {\n
LABEL_405e97:\n
                    v26 = 0;\n
                    v15 = 1;\n
                    v27 = 0;\n
                    v16 = a0;\n
                    v25 = v0;\n
                    if (!v16)\n
                        goto LABEL_405eb5;\n
LABEL_405eab:\n
                    tmp_2 = v15;\n
                    v29 = v7;\n
                    if (!tmp_2)\n
                        v29 = v28;\n
                    *(v16) = v29;\n
                    goto LABEL_405eb5;\n
                }\n
LABEL_405ddd:\n
                v27 = 0;\n
                v1 = 0;\n
                v15 = 1;\n
                v2 = v14;\n
                while (true)\n
                {\n
                    v3 = v15;\n
                    v17 = cgc_isdigit(v13);\n
                    v18 = *(v28);\n
                    if (v17)\n
                    {\n
                        v19 = v18 - 48;\n
                        v20 = v2;\n
                        if (!(v19 < v20))\n
                            break;\n
                        goto LABEL_405e60;\n
                    }\n
                    v22 = *(v28);\n
                    if (cgc_islower(v18))\n
                    {\n
                        v19 = v22 - 87;\n
                        v20 = v2;\n
                        if (!(v19 < v20))\n
                            break;\n
                        goto LABEL_405e60;\n
                    }\n
                    if (!cgc_isupper(v22))\n
                        break;\n
                    v19 = *(v28) - 55;\n
                    v20 = v2;\n
                    if (!(v19 < v20))\n
                        break;\n
LABEL_405e60:\n
                    v23 = v20 * v27;\n
                    tmp_5 = v23;\n
                    v27 = v23 + v19;\n
                    v24 = v1;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v1 = v24;\n
                    v13 = *((v28 + 1));\n
                    v28 += 1;\n
                    v15 = 0;\n
                    if (!v13)\n
                    {\n
                        v16 = a0;\n
                        v25 = v0;\n
                        v26 = v1;\n
                        if (!v16)\n
                            goto LABEL_405eb5;\n
                        goto LABEL_405eab;\n
                    }\n
                }\n
                v16 = a0;\n
                v25 = v0;\n
                v26 = v1;\n
                v15 = v3;\n
                if (!v16)\n
                    goto LABEL_405eb5;\n
            }\n
            else\n
            {\n
                *(&v13) = *((v28 + 1));\n
                if ((v13 & 248) == 48)\n
                {\n
                    v28 += 1;\n
                    v14 = 8;\n
                    goto LABEL_405ddd;\n
                }\n
                v13 = cgc_tolower(v13);\n
                if (v13 != 120)\n
                {\n
                    *(&v13) = *(v28);\n
                    goto LABEL_405dbb;\n
                }\n
                else\n
                {\n
                    v28 += 2;\n
                }\n
            }\n
LABEL_405db2:\n
            v14 = 16;\n
            goto LABEL_405dd3;\n
        }\n
    }\n
    if (!(v14 == 16))\n
        goto LABEL_405dd3;\n
    *(&v13) = *(v28);\n
    v14 = 16;\n
    if (!(*(v28) == 48))\n
        goto LABEL_405dd5;\n
    v28 += (cgc_tolower(*((v28 + 1))) == 120) * 2;\n
    goto LABEL_405db2;\n
LABEL_405eb5:\n
    v30 = (!v26 ? 0x80000000 : -(v27));\n
    v31 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, ebx<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v27);\n
    if (v25 < 0)\n
        v31 = v30;\n
    return v31;\n
}\n
", "4218390:sub_405e16": null, "4218605:sub_405eed": null, "4218608:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v10[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_39;  // tmp #39\n
    int tmp_86;  // tmp #86\n
    char v1[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v14[2];  // esi\n
    char v15;  // al\n
    char v16[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax, Other Possible Types: char\n
    unsigned int v18;  // ecx\n
    char v19[2];  // esi, Other Possible Types: unsigned int\n
    void* v20;  // edi\n
    void* v21;  // edi\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // ecx\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // esi\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    char v34[2];  // esi\n
    void* v35;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v36;  // eax, Other Possible Types: unsigned int\n
    unsigned int v37;  // esi\n
    void* v38;  // edx, Other Possible Types: unsigned int\n
    void* v39;  // ebx, Other Possible Types: unsigned int\n
    char v40[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // cc_dep2\n
    unsigned int v44;  // eax\n
\n
    v9 = v11;\n
    v8 = v12;\n
    v7 = v13;\n
    v14 = v10;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v17 = cgc_isspace(v14[0]);\n
    v16 = v14;\n
    if (v17)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                *(&v1) = v16;\n
                v38 = 0;\n
                v37 = 1;\n
                goto LABEL_405fa5;\n
            }\n
            v15 = *((v16 + 1));\n
            v16 += 1;\n
            v17 = cgc_isspace(v15);\n
        } while (v17);\n
    }\n
    v18 = a1;\n
    if (*(v16) != 45)\n
    {\n
        v37 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        v4 = 1;\n
        if (!v18)\n
            goto LABEL_405fd1;\n
        goto LABEL_405f65;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v37 = -1;\n
        v4 = -1;\n
        if (v18)\n
        {\n
LABEL_405f65:\n
            if (!(v18 == 16))\n
                goto LABEL_40602f;\n
            *(&v17) = *(v16);\n
            v18 = 16;\n
            if (!(*(v16) == 48))\n
                goto LABEL_406031;\n
            v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
            goto LABEL_40600a;\n
        }\n
        else\n
        {\n
LABEL_405fd1:\n
            *(&v17) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_406013:\n
                v17 = cgc_isdigit(v17);\n
                v18 = 10;\n
                if (!v17)\n
                {\n
                    *(&v1) = v16;\n
                    v38 = 0;\n
LABEL_405fa5:\n
                    v2 = 1;\n
                    v39 = 0;\n
                    v20 = 0;\n
                    v36 = a0;\n
                    if (!v36)\n
                        goto LABEL_406166;\n
LABEL_406157:\n
                    v40 = v10;\n
                    if (!v2)\n
                        v40 = v1;\n
                    *(v36) = v40;\n
                }\n
                else\n
                {\n
LABEL_40602f:\n
                    *(&v17) = *(v16);\n
LABEL_406031:\n
                    if (v17)\n
                    {\n
                        v5 = v18;\n
                        v19 = v16;\n
                    }\n
                    else\n
                    {\n
                        v1 = v16;\n
                        v38 = 0;\n
                        v2 = 1;\n
                        v39 = 0;\n
                        v21 = 0;\n
                        v36 = a0;\n
                        v37 = v4;\n
                        if (!v36)\n
                            goto LABEL_406166;\n
                        goto LABEL_406157;\n
                    }\n
LABEL_40603f:\n
                    v3 = 0;\n
                    v35 = 0;\n
                    v38 = 0;\n
                    v2 = 1;\n
                    while (true)\n
                    {\n
                        v6 = v38;\n
                        v22 = cgc_isdigit(v17);\n
                        v23 = *(v19);\n
                        v1 = v19;\n
                        if (v22)\n
                        {\n
                            v24 = v23 - 48;\n
                            v25 = v5;\n
                            if (!(v24 < v25))\n
                                break;\n
                            goto LABEL_4060e0;\n
                        }\n
                        v27 = *(v19);\n
                        if (cgc_islower(v23))\n
                        {\n
                            v24 = v27 - 87;\n
                            v25 = v5;\n
                            if (!(v24 < v25))\n
                                break;\n
                            goto LABEL_4060e0;\n
                        }\n
                        if (!cgc_isupper(v27))\n
                            break;\n
                        v24 = *(v1) - 55;\n
                        v25 = v5;\n
                        if (!(v24 < v25))\n
                            break;\n
LABEL_4060e0:\n
                        v28 = v3;\n
                        v29 = v28 * (v25 >> 31);\n
                        v30 = v28 * v25 >> 32;\n
                        v31 = v28 * v25;\n
                        v32 = v25 * v35 + v29 + v30;\n
                        v33 = v24 >> 31;\n
                        v3 = v31 + v24;\n
                        tmp_39 = v33;\n
                        tmp_86 = v32 ^ v31 + v24 < v31;\n
                        v35 = v33 + v32 + (v31 + v24 < v31);\n
                        v38 = v6;\n
                        if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t39, t86, Conv(1->32, ((eax<4> + ebx<4>) < eax<4>))))\n
                            v38 = 1;\n
                        v34 = v1;\n
                        v17 = v34[1];\n
                        v19 = &v34[1];\n
                        v2 = 0;\n
                        if (!v17)\n
                        {\n
                            v1 = v19;\n
                            v36 = a0;\n
                            v37 = v4;\n
                            v39 = v3;\n
                            if (!v36)\n
                                goto LABEL_406166;\n
                            goto LABEL_406157;\n
                        }\n
                    }\n
                    v36 = a0;\n
                    v37 = v4;\n
                    v38 = v6;\n
                    v39 = v3;\n
                    if (!v36)\n
                        goto LABEL_406166;\n
                    goto LABEL_406157;\n
                }\n
            }\n
            else\n
            {\n
                *(&v17) = *((v16 + 1));\n
                if ((v17 & 248) == 48)\n
                {\n
                    v19 = v16 + 1;\n
                    v5 = 8;\n
                    goto LABEL_40603f;\n
                }\n
                v17 = cgc_tolower(v17);\n
                if (v17 != 120)\n
                {\n
                    *(&v17) = *(v16);\n
                    goto LABEL_406013;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
LABEL_40600a:\n
                v18 = 16;\n
                goto LABEL_40602f;\n
            }\n
        }\n
    }\n
LABEL_406166:\n
    v41 = -(v39);\n
    if ((v37 >> 31 & 1 ^ 1))\n
        v41 = v39;\n
    v42 = -(0 < v38) | v41;\n
    v43 = v39 < 2147483649;\n
    v44 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v42);\n
    if ((v37 >> 31 & 1 ^ 1))\n
        v44 = v42;\n
    return v44;\n
}\n
", "4219018:sub_40608a": null, "4219325:sub_4061bd": null, "4219328:_ZN11AudioStreamC1Ej": "int AudioStream::__ctor__(unsigned int v0[3], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2[3];  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v2[0] = v1;\n
    v2[1] = v1;\n
    v4 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, ecx<4>, 0x4<32>, 0x0<32>) ? -1 : v1 * 4));\n
    v2[2] = v4;\n
    return v4;\n
}\n
", "4219397:sub_406205": null, "4219408:_ZN11AudioStreamD2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int AudioStream::__base_dtor__(struct_0 *v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0->field_8;\n
    if (v1)\n
        v1 = operator delete(v1);\n
    return v1;\n
}\n
", "4219454:sub_40623e": null, "4219456:_ZN11AudioStream11fromSilenceEj": "int AudioStream::fromSilence(unsigned int v0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2[3];  // esi\n
    unsigned int *v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v7;  // edx\n
    unsigned int *v8;  // eax\n
    unsigned int v9;  // edx\n
\n
    v1 = v0;\n
    v2 = operator new(12);\n
    v2[0] = v1;\n
    v2[1] = v1;\n
    v4 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, edi<4>, 0x4<32>, 0x0<32>) ? -1 : v1 * 4));\n
    v2[2] = v4;\n
    if (!v1)\n
        return v2;\n
    v5 = v1 & 7;\n
    v7 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            v4[v7] = 0;\n
            v4[1 + v7] = 0;\n
            v4[2 + v7] = 0;\n
            v4[3 + v7] = 0;\n
            v4[4 + v7] = 0;\n
            v4[5 + v7] = 0;\n
            v4[6 + v7] = 0;\n
            v4[7 + v7] = 0;\n
            v7 += 8;\n
        } while ((v1 & -8) != v7);\n
    }\n
    if (!v5)\n
        return v2;\n
    v8 = &v4[v7];\n
    v9 = 0;\n
    do\n
    {\n
        v8[v9] = 0;\n
        v9 += 1;\n
    } while (v5 != v9);\n
    return v2;\n
}\n
", "4219672:sub_406318": null, "4219680:_ZN11AudioStream12fromSineWaveEjj": null, "4219925:sub_406415": null, "4219936:_ZN11AudioStream14fromSquareWaveEjj": "int AudioStream::fromSquareWave(unsigned int v16, unsigned int a0)\n
{\n
    unsigned short v0;  // [bp-0x4c]\n
    unsigned short v1;  // [bp-0x4a]\n
    unsigned short v2;  // [bp-0x48]\n
    unsigned short v3;  // [bp-0x46]\n
    unsigned short v4;  // [bp-0x44]\n
    unsigned short v5;  // [bp-0x42]\n
    unsigned int v6[3];  // [bp-0x40]\n
    unsigned int v7;  // [bp-0x3c]\n
    unsigned int v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0x34]\n
    unsigned int *v10;  // [bp-0x30]\n
    void* v11;  // [bp-0x2c]\n
    unsigned int v12;  // [bp-0x28]\n
    void* v13;  // [bp-0x24]\n
    unsigned int v14;  // [bp-0x20]\n
    void* v15;  // [bp-0x1c]\n
    unsigned int v17;  // edi\n
    unsigned int v18[3];  // esi, Other Possible Types: unsigned int\n
    unsigned int *v20;  // eax\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // fpround\n
\n
    v17 = v16;\n
    v18 = operator new(12);\n
    v18[0] = v17;\n
    v18[1] = v17;\n
    v20 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, edi<4>, 0x4<32>, 0x0<32>) ? -1 : v17 * 4));\n
    v18[2] = v20;\n
    v14 = a0;\n
    v15 = 0;\n
    v22 = v21 - 1;\n
    if ([D] GetI(136:I8x8)[t10,0])\n
    {\n
        v23 = v22 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v23 = v22 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t10,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t4\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t4\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if (!v17)\n
    {\n
        [D] PutI(72:F64x8)[t11,0] = t12\n
        [D] PutI(136:I8x8)[t11,0] = 0x01\n
        [D] PutI(136:I8x8)[t11,0] = 0x00\n
        return v18;\n
    }\n
    v6[0] = v18;\n
    v26 = 0;\n
    v24 = v23 - 1;\n
    [D] PutI(72:F64x8)[t10,0] = t13\n
    [D] PutI(136:I8x8)[t10,0] = 0x01\n
    if (v17 != 1)\n
    {\n
        [D] PutI(72:F64x8)[t7,0] = t8\n
        [D] PutI(136:I8x8)[t7,0] = 0x01\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
        v26 = 0;\n
        v27 = v24 + 1 - 1;\n
        [D] PutI(72:F64x8)[t22,0] = t25\n
        [D] PutI(136:I8x8)[t22,0] = 0x01\n
        do\n
        {\n
            v28 = v27 - 1;\n
            [D] PutI(72:F64x8)[t59,0] = t62\n
            [D] PutI(136:I8x8)[t59,0] = 0x01\n
            [D] PutI(72:F64x8)[t68,0] = t69\n
            [D] PutI(136:I8x8)[t68,0] = 0x01\n
            v1 = [D] x86g_create_fpucw(fpround<4>);\n
            v4 = v1 | 0xc00;\n
            v8 = ([D] GetI(136:I8x8)[t111,0] ? [D] GetI(72:F64x8)[t111,0] : nan);\n
            [D] PutI(136:I8x8)[t111,0] = 0x00\n
            v20[v26] = (!(v8 & 1) ? 3221225473 : 1073741823);\n
            v12 = v26 + 1;\n
            v13 = 0;\n
            v31 = v28 + 1 - 1;\n
            [D] PutI(72:F64x8)[t152,0] = t155\n
            [D] PutI(136:I8x8)[t152,0] = 0x01\n
            [D] PutI(72:F64x8)[t165,0] = t166\n
            [D] PutI(136:I8x8)[t165,0] = 0x01\n
            v0 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-74, size=2, endness=Iend_LE)))));\n
            v3 = v0 | 0xc00;\n
            v9 = ([D] GetI(136:I8x8)[t208,0] ? [D] GetI(72:F64x8)[t208,0] : nan);\n
            [D] PutI(136:I8x8)[t208,0] = 0x00\n
            v27 = v31 + 1;\n
            v32 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-76, size=2, endness=Iend_LE)));\n
            v20[1 + v26] = (!(v9 & 1) ? 3221225473 : 1073741823);\n
            [D] PutI(72:F64x8)[t243,0] = t244\n
            [D] PutI(136:I8x8)[t243,0] = 0x01\n
            v26 += 2;\n
        } while ((v16 & -2) != v26);\n
    }\n
    [D] PutI(72:F64x8)[t4,0] = t5\n
    [D] PutI(136:I8x8)[t4,0] = 0x01\n
    [D] PutI(136:I8x8)[t4,0] = 0x00\n
    v18 = v6;\n
    if ((v16 & 1))\n
    {\n
        v10 = v26;\n
        v11 = 0;\n
        if ([D] GetI(136:I8x8)[t10,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t20,1] = t21\n
        [D] PutI(136:I8x8)[t20,1] = 0x01\n
        [D] PutI(136:I8x8)[t20,0] = 0x00\n
        v2 = [D] x86g_create_fpucw(fpround<4>);\n
        v5 = v2 | 0xc00;\n
        v7 = ([D] GetI(136:I8x8)[t66,0] ? [D] GetI(72:F64x8)[t66,0] : nan);\n
        [D] PutI(136:I8x8)[t66,0] = 0x00\n
        v20[v26] = (!(v7 & 1) ? 3221225473 : 1073741823);\n
        [D] PutI(72:F64x8)[t98,0] = t101\n
        [D] PutI(136:I8x8)[t98,0] = 0x01\n
    }\n
}\n
", "4220318:sub_40659e": null, "4220320:_ZN11AudioStream7enlargeEj": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_0;\n
\n
int AudioStream::enlarge(unsigned int v1[3], unsigned int a0)\n
{\n
    int tmp_3;  // tmp #3\n
    char *v0;  // [bp-0x18]\n
    unsigned int v2;  // edi\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v9 = v3->field_0;\n
    if (v9 >= v2)\n
        return v3->field_0;\n
    v4 = v3->field_4;\n
    if (v4 >= v2)\n
    {\n
        v6 = v3->field_8;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = v4 * 2;\n
            tmp_3 = v4;\n
            v4 += 0x8000;\n
            if (tmp_3 < 0x8000)\n
                v4 = v5;\n
        } while (v4 < v2);\n
        v3->field_4 = v4;\n
        v7 = ([D] x86g_calculate_condition(0x1<32>, 0x24<32>, ecx<4>, 0x4<32>, 0x0<32>) ? -1 : v4 * 4);\n
        v0 = operator new[](v7);\n
        cgc_memcpy(v0, v3->field_8, v3->field_0 * 4);\n
        v8 = v3->field_8;\n
        if (v8)\n
            operator delete[](v8);\n
        v3 = v1;\n
        v6 = v0;\n
        *((v3 + 8)) = v6;\n
        v9 = *(v3);\n
    }\n
    v9 = cgc_memset(v6 + v9 * 4, 0, (v2 - v9) * 4);\n
    *(v3) = v2;\n
    return v9;\n
}\n
", "4220518:sub_406666": null, "4220528:_ZN11AudioStream9setLengthEj": "int AudioStream::setLength(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int *v2;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (*(v2) <= v1)\n
        return AudioStream::enlarge(v0, a0);\n
    *(v2) = v1;\n
    return v0;\n
}\n
", "4220587:sub_4066ab": null, "4220592:_ZN11AudioStream10addSilenceEj": "int AudioStream::addSilence(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    return AudioStream::enlarge(v1, *(v1) + a0);\n
}\n
", "4220641:sub_4066e1": null, "4220656:_ZN11AudioStream3mixERKS_4Gain": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int AudioStream::mix(struct_0 *v11, struct_0 *a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_16;  // tmp #16\n
    unsigned short v1;  // [bp-0x30]\n
    unsigned short v2;  // [bp-0x2e]\n
    unsigned short v3;  // [bp-0x2c]\n
    unsigned short v4;  // [bp-0x2a]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    struct_0 *v12;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int *v23;  // edx\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // ftop\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // eax\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // esi\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // esi\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ebx\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // esi\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ecx\n
    unsigned int v61;  // esi\n
    unsigned int v62;  // ecx\n
    unsigned int v64;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = a0;\n
    v13 = v11;\n
    v14 = v12->field_0;\n
    [D] PutI(72:F64x8)[t44,0] = t47\n
    [D] PutI(136:I8x8)[t44,0] = 0x01\n
    v17 = v15 - 1 - 1;\n
    [D] PutI(72:F64x8)[t54,0] = t57\n
    [D] PutI(136:I8x8)[t54,0] = 0x01\n
    if (v13->field_0 < v14)\n
    {\n
        [D] PutI(72:F64x8)[t11,1] = t12\n
        [D] PutI(136:I8x8)[t11,1] = 0x01\n
        [D] PutI(136:I8x8)[t11,0] = 0x00\n
        [D] PutI(72:F64x8)[t23,0] = t24\n
        [D] PutI(136:I8x8)[t23,0] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        return v12;\n
    }\n
    [D] PutI(72:F64x8)[t3,1] = t4\n
    [D] PutI(136:I8x8)[t3,1] = 0x01\n
    [D] PutI(136:I8x8)[t3,0] = 0x00\n
    v18 = v17 + 1;\n
    [D] PutI(72:F64x8)[t15,0] = t16\n
    [D] PutI(136:I8x8)[t15,0] = 0x01\n
    [D] PutI(136:I8x8)[t15,0] = 0x00\n
    v19 = v18 - 0;\n
    [D] PutI(72:F64x8)[t27,0] = t30\n
    [D] PutI(136:I8x8)[t27,0] = 0x01\n
    v20 = v19 - 1;\n
    [D] PutI(72:F64x8)[t37,0] = t40\n
    [D] PutI(136:I8x8)[t37,0] = 0x01\n
    if (v14)\n
    {\n
        [D] PutI(72:F64x8)[t15,1] = t16\n
        [D] PutI(136:I8x8)[t15,1] = 0x01\n
        [D] PutI(136:I8x8)[t15,0] = 0x00\n
        v21 = v20 + 1;\n
        [D] PutI(72:F64x8)[t27,0] = t28\n
        [D] PutI(136:I8x8)[t27,0] = 0x01\n
        [D] PutI(136:I8x8)[t27,0] = 0x00\n
        v22 = v21 + 1;\n
        v23 = v13->field_8;\n
        v5 = a0->field_8;\n
        v10 = *(&a1);\n
        v24 = v22 - 1;\n
        [D] PutI(72:F64x8)[t59,0] = t62\n
        [D] PutI(136:I8x8)[t59,0] = 0x01\n
        [D] PutI(72:F64x8)[t75,0] = t76\n
        [D] PutI(136:I8x8)[t75,0] = 0x01\n
        v25 = v24 - 1;\n
        [D] PutI(72:F64x8)[t86,0] = t89\n
        [D] PutI(136:I8x8)[t86,0] = 0x01\n
        [D] PutI(72:F64x8)[t99,0] = t103\n
        [D] PutI(136:I8x8)[t99,0] = 0x01\n
        [D] PutI(72:F64x8)[t99,1] = t96\n
        [D] PutI(136:I8x8)[t99,1] = 0x01\n
        [D] PutI(72:F64x8)[t130,1] = t131\n
        [D] PutI(136:I8x8)[t130,1] = 0x01\n
        [D] PutI(136:I8x8)[t130,0] = 0x00\n
        v26 = v25 - 0;\n
        [D] PutI(72:F64x8)[t142,0] = t145\n
        [D] PutI(136:I8x8)[t142,0] = 0x01\n
        v27 = v26 - 1;\n
        [D] PutI(72:F64x8)[t159,0] = t162\n
        [D] PutI(136:I8x8)[t159,0] = 0x01\n
        [D] PutI(72:F64x8)[t168,0] = t169\n
        [D] PutI(136:I8x8)[t168,0] = 0x01\n
        [D] PutI(72:F64x8)[t188,0] = t192\n
        [D] PutI(136:I8x8)[t188,0] = 0x01\n
        [D] PutI(72:F64x8)[t188,2] = t185\n
        [D] PutI(136:I8x8)[t188,2] = 0x01\n
        [D] PutI(72:F64x8)[t203,0] = t204\n
        [D] PutI(136:I8x8)[t203,0] = 0x01\n
        [D] PutI(72:F64x8)[t220,1] = t221\n
        [D] PutI(136:I8x8)[t220,1] = 0x01\n
        [D] PutI(136:I8x8)[t220,0] = 0x00\n
        v28 = v27 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t119,0] ? [D] GetI(72:F64x8)[t119,0] : nan), ([D] GetI(136:I8x8)[t119,1] ? [D] GetI(72:F64x8)[t119,1] : nan)) & 1) != 1)\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v33 = 0;\n
            v34 = v28 + 1 - 1;\n
            [D] PutI(72:F64x8)[t15,0] = t18\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t10,0] = t11\n
                [D] PutI(136:I8x8)[t10,0] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v50 = v34 + 1;\n
                v51 = v23[v33];\n
                v9 = *((v5 + v33 * 4));\n
                [D] PutI(72:F64x8)[t45,0] = t48\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                [D] PutI(72:F64x8)[t56,0] = t57\n
                [D] PutI(136:I8x8)[t56,0] = 0x01\n
                v53 = v50 - 1 - 1;\n
                [D] PutI(72:F64x8)[t73,0] = t76\n
                [D] PutI(136:I8x8)[t73,0] = 0x01\n
                [D] PutI(72:F64x8)[t86,0] = t90\n
                [D] PutI(136:I8x8)[t86,0] = 0x01\n
                [D] PutI(72:F64x8)[t86,1] = t83\n
                [D] PutI(136:I8x8)[t86,1] = 0x01\n
                [D] PutI(72:F64x8)[t117,1] = t118\n
                [D] PutI(136:I8x8)[t117,1] = 0x01\n
                [D] PutI(136:I8x8)[t117,0] = 0x00\n
                v54 = v53 + 1;\n
                v55 = 2147483647;\n
                if ((CmpF(([D] GetI(136:I8x8)[t106,0] ? [D] GetI(72:F64x8)[t106,0] : nan), ([D] GetI(136:I8x8)[t106,1] ? [D] GetI(72:F64x8)[t106,1] : nan)) & 1) == 1)\n
                {\n
                    v55 = 0x80000000;\n
                    v56 = v54 - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v57 = v56 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v57 = v56 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v54 = v57 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v1 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-48, size=2, endness=Iend_LE)))));\n
                        v3 = v1 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v8 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v58 = v54 + 1;\n
                        }\n
                        else\n
                        {\n
                            v8 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v58 = v54 + 1;\n
                        }\n
                        v55 = v8;\n
                        v54 = v58 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t51,0] = t52\n
                [D] PutI(136:I8x8)[t51,0] = 0x01\n
                [D] PutI(136:I8x8)[t51,0] = 0x00\n
                v59 = v54 + 1;\n
                v60 = v55 >> 31;\n
                tmp_16 = v55;\n
                v61 = v55 + v51;\n
                v62 = v60 + (v51 >> 31) + (tmp_16 + v51 < tmp_16);\n
                v64 = ([D] x86g_calculate_condition(0xc<32>, 0xc<32>, 0x0<32>, Xor(ecx<4>, Conv(1->32, (0x7ffffffe<32> < esi<4>))), Conv(1->32, (0x7ffffffe<32> < esi<4>))) ? 2147483647 : ([D] x86g_calculate_condition(0xc<32>, 0xc<32>, ecx<4>, Xor(0xffffffff<32>, Conv(1->32, (esi<4> < 0x80000001<32>))), Conv(1->32, (esi<4> < 0x80000001<32>))) ? 0x80000000 : v61));\n
                v23[v33] = v64;\n
                v33 += 1;\n
                v12 = a0;\n
                v34 = v59 - 1;\n
                [D] PutI(72:F64x8)[t138,0] = t141\n
                [D] PutI(136:I8x8)[t138,0] = 0x01\n
            } while (v33 < *(v12));\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t5,1] = t6\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v30 = 0;\n
            v31 = v28 + 1 - 1;\n
            [D] PutI(72:F64x8)[t17,0] = t20\n
            [D] PutI(136:I8x8)[t17,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,0] = t34\n
            [D] PutI(136:I8x8)[t30,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,1] = t27\n
            [D] PutI(136:I8x8)[t30,1] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v35 = v31 + 1;\n
                v36 = v23[v30];\n
                v7 = *((v5 + v30 * 4));\n
                [D] PutI(72:F64x8)[t45,0] = t48\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                [D] PutI(72:F64x8)[t56,0] = t57\n
                [D] PutI(136:I8x8)[t56,0] = 0x01\n
                v38 = v35 - 1 - 1;\n
                [D] PutI(72:F64x8)[t73,0] = t76\n
                [D] PutI(136:I8x8)[t73,0] = 0x01\n
                [D] PutI(72:F64x8)[t86,0] = t90\n
                [D] PutI(136:I8x8)[t86,0] = 0x01\n
                [D] PutI(72:F64x8)[t86,1] = t83\n
                [D] PutI(136:I8x8)[t86,1] = 0x01\n
                [D] PutI(72:F64x8)[t117,1] = t118\n
                [D] PutI(136:I8x8)[t117,1] = 0x01\n
                [D] PutI(136:I8x8)[t117,0] = 0x00\n
                v39 = v38 + 1;\n
                v40 = 2147483647;\n
                if ((CmpF(([D] GetI(136:I8x8)[t106,0] ? [D] GetI(72:F64x8)[t106,0] : nan), ([D] GetI(136:I8x8)[t106,1] ? [D] GetI(72:F64x8)[t106,1] : nan)) & 1) == 1)\n
                {\n
                    v40 = 0x80000000;\n
                    v41 = v39 - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v42 = v41 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v42 = v41 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v39 = v42 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v2 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-46, size=2, endness=Iend_LE)))));\n
                        v4 = v2 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v6 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v43 = v39 + 1;\n
                        }\n
                        else\n
                        {\n
                            v6 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v43 = v39 + 1;\n
                        }\n
                        v40 = v6;\n
                        v39 = v43 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t53,0] = t54\n
                [D] PutI(136:I8x8)[t53,0] = 0x01\n
                [D] PutI(136:I8x8)[t53,0] = 0x00\n
                v44 = v39 + 1;\n
                v45 = v40 >> 31;\n
                tmp_16 = v40;\n
                v46 = v40 + v36;\n
                v47 = v45 + (v36 >> 31) + (tmp_16 + v36 < tmp_16);\n
                v49 = ([D] x86g_calculate_condition(0xc<32>, 0xc<32>, 0x0<32>, Xor(esi<4>, Conv(1->32, (0x7ffffffe<32> < ecx<4>))), Conv(1->32, (0x7ffffffe<32> < ecx<4>))) ? 2147483647 : ([D] x86g_calculate_condition(0xc<32>, 0xc<32>, esi<4>, Xor(0xffffffff<32>, Conv(1->32, (ecx<4> < 0x80000001<32>))), Conv(1->32, (ecx<4> < 0x80000001<32>))) ? 0x80000000 : v46));\n
                v23[v30] = v49;\n
                v30 += 1;\n
                v12 = a0;\n
                v31 = v44 - 1;\n
                [D] PutI(72:F64x8)[t140,0] = t143\n
                [D] PutI(136:I8x8)[t140,0] = 0x01\n
                [D] PutI(72:F64x8)[t153,0] = t157\n
                [D] PutI(136:I8x8)[t153,0] = 0x01\n
                [D] PutI(72:F64x8)[t153,1] = t150\n
                [D] PutI(136:I8x8)[t153,1] = 0x01\n
            } while (v30 < *(v12));\n
        }\n
    }\n
}\n
", "4220796:sub_40677c": null, "4220999:sub_406847": null, "4221204:sub_406914": null, "4221216:_ZN10AudioTrackC1Ev": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char field_18;\n
} struct_0;\n
\n
int AudioTrack::__ctor__(struct_0 *v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = v0;\n
    v1->field_10 = 0;\n
    v1->field_14 = 0;\n
    v1->field_18 = 0;\n
    return v0;\n
}\n
", "4221247:sub_40693f": null, "4221248:_ZN10AudioTrackC1EP11AudioStream": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char field_18;\n
} struct_0;\n
\n
int AudioTrack::__ctor__(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // ecx\n
\n
    v1 = v0;\n
    v1->field_10 = 0;\n
    v1->field_14 = 0;\n
    v1->field_18 = 0;\n
    v1->field_4 = 0;\n
    v1->field_8 = a0;\n
    return a0;\n
}\n
", "4221289:sub_406969": null, "4221296:_ZN10AudioTrackC2EP11AudioStreamS1_": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char field_18;\n
} struct_0;\n
\n
int AudioTrack::__base_ctor__(struct_0 *v0, unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v2;  // ecx\n
    struct_0 *v3;  // edx\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v3->field_10 = 0;\n
    v3->field_14 = 0;\n
    v3->field_18 = 0;\n
    v3->field_4 = 1;\n
    v3->field_8 = v2;\n
    v3->field_c = v1;\n
    v4 = *(v2);\n
    v5 = *(v1);\n
    if (v4 >= v5 && [D] x86g_calculate_condition(0x6<32>, 0x6<32>, edx<4>, esi<4>, 0x0<32>))\n
        return a1;\n
    v1 = AudioStream::setLength(v0, a0);\n
    return v1;\n
}\n
", "4221390:sub_4069ce": null, "4221392:_ZN10AudioTrackD2Ev": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
int AudioTrack::__base_dtor__(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    void* v2;  // edi\n
    unsigned int v3;  // eax\n
    void* v4;  // esi\n
\n
    v1 = v0;\n
    v2 = v1->field_8;\n
    if (v2)\n
    {\n
        AudioStream::__base_dtor__(v2);\n
        v3 = operator delete(v2);\n
    }\n
    if (!v1->field_4)\n
        return v3;\n
    v4 = v1->field_c;\n
    if (v4)\n
    {\n
        AudioStream::__base_dtor__(v4);\n
        v3 = operator delete(v4);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4221479:sub_406a27": null, "4221488:_ZN10AudioTrack9setLengthEj": "typedef struct struct_1 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int *field_8;\n
    unsigned int *field_c;\n
} struct_0;\n
\n
int AudioTrack::setLength(struct_1 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // edi\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = v1;\n
    v5 = AudioStream::setLength(v4->field_8, v3);\n
    if (v4->field_4)\n
    {\n
        v5 = AudioStream::setLength(v4->field_c, v3);\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4221562:sub_406a7a": null, "4221568:_ZN10AudioTrack3mixERKS_": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int AudioTrack::mix(struct_2 *v39, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x9c]\n
    int tmp_10;  // tmp #10\n
    unsigned short v1;  // [bp-0x98]\n
    unsigned short v2;  // [bp-0x96]\n
    unsigned short v3;  // [bp-0x94]\n
    unsigned short v4;  // [bp-0x92]\n
    unsigned short v5;  // [bp-0x90]\n
    unsigned short v6;  // [bp-0x8e]\n
    unsigned short v7;  // [bp-0x8c]\n
    unsigned short v8;  // [bp-0x8a]\n
    unsigned short v9;  // [bp-0x88]\n
    unsigned short v10;  // [bp-0x86]\n
    unsigned short v11;  // [bp-0x84]\n
    unsigned short v12;  // [bp-0x82]\n
    unsigned short v13;  // [bp-0x80]\n
    unsigned short v14;  // [bp-0x7e]\n
    unsigned short v15;  // [bp-0x7c]\n
    unsigned short v16;  // [bp-0x7a]\n
    unsigned int v17;  // [bp-0x78]\n
    unsigned int v18;  // [bp-0x70]\n
    unsigned int v19;  // [bp-0x68]\n
    unsigned int v20;  // [bp-0x60]\n
    unsigned int v21;  // [bp-0x58]\n
    unsigned int v22;  // [bp-0x54]\n
    unsigned int v23;  // [bp-0x50]\n
    unsigned int v24;  // [bp-0x4c]\n
    unsigned int v25;  // [bp-0x48]\n
    unsigned int v26;  // [bp-0x44]\n
    unsigned int v27;  // [bp-0x40]\n
    unsigned int v28;  // [bp-0x3c]\n
    unsigned int v29;  // [bp-0x38]\n
    unsigned int v30;  // [bp-0x34]\n
    unsigned int v31;  // [bp-0x30]\n
    unsigned int v32;  // [bp-0x2c]\n
    unsigned int v33;  // [bp-0x28]\n
    unsigned int v34;  // [bp-0x24]\n
    unsigned int v35;  // [bp-0x20]\n
    unsigned int v36;  // [bp-0x1c]\n
    unsigned int v37;  // [bp-0x18]\n
    unsigned int v38;  // [bp-0x8]\n
    unsigned int v40;  // ebx\n
    struct_0 *v41;  // ecx\n
    struct_0 *v42;  // esi\n
    unsigned int v43;  // edi\n
    unsigned int *v44;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v45;  // edx, Other Possible Types: unsigned int\n
    unsigned int v46;  // edi\n
    struct_0 *v48;  // ebx\n
    struct_2 *v49;  // esi\n
    unsigned int *v50;  // edi\n
    unsigned int v51;  // edx\n
    unsigned int *v52;  // ecx\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v64;  // ftop\n
    unsigned int v67;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70;  // ftop\n
    unsigned int v71;  // ftop\n
    unsigned int v72;  // ftop\n
    unsigned int v73;  // ftop\n
    unsigned int v74;  // ftop\n
    unsigned int v75;  // ftop\n
    unsigned int v76;  // ftop\n
    unsigned int v77;  // ftop\n
    unsigned int v79;  // ftop\n
    unsigned int v81;  // ftop\n
    unsigned int v83;  // ftop\n
    unsigned int v85;  // edx\n
    unsigned int v86;  // edx\n
    unsigned int v87;  // fpround\n
    unsigned int v88;  // fpround\n
    unsigned int v89;  // fpround\n
    unsigned int v90;  // fpround\n
    unsigned int v91;  // ecx\n
    unsigned int v93;  // ecx\n
    unsigned int v95;  // edx\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx, Other Possible Types: char\n
    unsigned int *v98;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v99;  // ecx, Other Possible Types: unsigned int\n
\n
    v38 = v40;\n
    v41 = a0;\n
    v45 = v39;\n
    v44 = v45->field_8;\n
    v42 = v41;\n
    v43 = v41->field_8->field_0;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (*(v44) < v43)\n
    {\n
        v44 = AudioStream::setLength(v44, v43);\n
        v45 = v39;\n
        if (*((v45 + 4)))\n
        {\n
            v44 = AudioStream::setLength(*((v45 + 12)), v43);\n
            v45 = v39;\n
        }\n
    }\n
    *(&v44) = v41->field_4;\n
    if (*((v45 + 4)))\n
    {\n
        v46 = v41->field_14;\n
        v48 = v42;\n
        v49 = v45;\n
        tmp_10 = v46;\n
        v50 = v48->field_8;\n
        v51 = ([D] x86g_calculate_condition(0xf<32>, 0xf<32>, t10, 0x0<32>, 0x0<32>) ? 0 : -(v46));\n
        v52 = v49->field_8;\n
        if (v44)\n
        {\n
            v37 = v48->field_10;\n
            v54 = v53 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v57 = v54 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v57 = v54 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v59 = v57 - 1;\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            v60 = v59 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
                v64 = v60 - 1 + 1;\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v64 = v60 - 1 + 1;\n
            }\n
            v36 = v51;\n
            v69 = v64 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v71 = v69 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v71 = v69 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v73 = v71 - 1;\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            v74 = v73 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                v77 = v74 - 1;\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                v79 = v74 - 1;\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            [D] PutI(72:F64x8)[t3,1] = t4\n
            [D] PutI(136:I8x8)[t3,1] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v85 = 0;\n
            [D] PutI(72:F64x8)[t23,0] = t26\n
            [D] PutI(136:I8x8)[t23,0] = 0x01\n
            [D] PutI(136:I8x8)[t38,0] = 0x00\n
            if (((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69) >> 6)) & 1) == 1)\n
            {\n
                v85 = 0x80000000;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v85 = 2147483647;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(72:F64x8)[t36,1] = t37\n
                    [D] PutI(136:I8x8)[t36,1] = 0x01\n
                    [D] PutI(136:I8x8)[t36,0] = 0x00\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
                    {\n
                        [D] PutI(72:F64x8)[t2,0] = t5\n
                        [D] PutI(136:I8x8)[t2,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,0] = t19\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,1] = t12\n
                        [D] PutI(136:I8x8)[t15,1] = 0x01\n
                        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
                        {\n
                            [D] PutI(72:F64x8)[t18,0] = t19\n
                            [D] PutI(136:I8x8)[t18,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,0] = t42\n
                            [D] PutI(136:I8x8)[t38,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,1] = t35\n
                            [D] PutI(136:I8x8)[t38,1] = 0x01\n
                            [D] PutI(72:F64x8)[t53,0] = t54\n
                            [D] PutI(136:I8x8)[t53,0] = 0x01\n
                            [D] PutI(72:F64x8)[t63,1] = t64\n
                            [D] PutI(136:I8x8)[t63,1] = 0x01\n
                            [D] PutI(136:I8x8)[t63,0] = 0x00\n
                            [D] PutI(72:F64x8)[t85,0] = t86\n
                            [D] PutI(136:I8x8)[t85,0] = 0x01\n
                            [D] PutI(72:F64x8)[t99,0] = t100\n
                            [D] PutI(136:I8x8)[t99,0] = 0x01\n
                            v3 = [D] x86g_create_fpucw(fpround<4>);\n
                            v11 = v3 | 0xc00;\n
                            v34 = ([D] GetI(136:I8x8)[t136,0] ? [D] GetI(72:F64x8)[t136,0] : nan);\n
                            [D] PutI(136:I8x8)[t136,0] = 0x00\n
                            v87 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-148, size=2, endness=Iend_LE)));\n
                            v85 = v34;\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t21,0] = t25\n
                            [D] PutI(136:I8x8)[t21,0] = 0x01\n
                            [D] PutI(72:F64x8)[t21,1] = t18\n
                            [D] PutI(136:I8x8)[t21,1] = 0x01\n
                            [D] PutI(72:F64x8)[t36,0] = t37\n
                            [D] PutI(136:I8x8)[t36,0] = 0x01\n
                            [D] PutI(72:F64x8)[t46,1] = t47\n
                            [D] PutI(136:I8x8)[t46,1] = 0x01\n
                            [D] PutI(136:I8x8)[t46,0] = 0x00\n
                            [D] PutI(72:F64x8)[t68,0] = t69\n
                            [D] PutI(136:I8x8)[t68,0] = 0x01\n
                            [D] PutI(72:F64x8)[t82,0] = t83\n
                            [D] PutI(136:I8x8)[t82,0] = 0x01\n
                            v4 = [D] x86g_create_fpucw(fpround<4>);\n
                            v12 = v4 | 0xc00;\n
                            v35 = ([D] GetI(136:I8x8)[t119,0] ? [D] GetI(72:F64x8)[t119,0] : nan);\n
                            [D] PutI(136:I8x8)[t119,0] = 0x00\n
                            v88 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-146, size=2, endness=Iend_LE)));\n
                            v85 = v35;\n
                        }\n
                        [D] PutI(72:F64x8)[t0,0] = t3\n
                        [D] PutI(136:I8x8)[t0,0] = 0x01\n
                    }\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t13,0] = t14\n
            [D] PutI(136:I8x8)[t13,0] = 0x01\n
            [D] PutI(136:I8x8)[t13,0] = 0x00\n
            v18 = v85;\n
            AudioStream::mix(v52, v50, v18);\n
            v98 = v39->field_c;\n
            v91 = v48->field_14;\n
            v99 = v48->field_c;\n
            v33 = v48->field_10;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            v32 = v91 >> 31 & v91;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            [D] PutI(72:F64x8)[t3,1] = t4\n
            [D] PutI(136:I8x8)[t3,1] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v95 = 0;\n
            [D] PutI(72:F64x8)[t23,0] = t26\n
            [D] PutI(136:I8x8)[t23,0] = 0x01\n
            [D] PutI(136:I8x8)[t38,0] = 0x00\n
            if (((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69) >> 6)) & 1) == 1)\n
            {\n
                v95 = 0x80000000;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v95 = 2147483647;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(72:F64x8)[t36,1] = t37\n
                    [D] PutI(136:I8x8)[t36,1] = 0x01\n
                    [D] PutI(136:I8x8)[t36,0] = 0x00\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
                    {\n
                        [D] PutI(72:F64x8)[t2,0] = t5\n
                        [D] PutI(136:I8x8)[t2,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,0] = t19\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,1] = t12\n
                        [D] PutI(136:I8x8)[t15,1] = 0x01\n
                        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
                        {\n
                            [D] PutI(72:F64x8)[t18,0] = t19\n
                            [D] PutI(136:I8x8)[t18,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,0] = t42\n
                            [D] PutI(136:I8x8)[t38,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,1] = t35\n
                            [D] PutI(136:I8x8)[t38,1] = 0x01\n
                            [D] PutI(72:F64x8)[t53,0] = t54\n
                            [D] PutI(136:I8x8)[t53,0] = 0x01\n
                            [D] PutI(72:F64x8)[t63,1] = t64\n
                            [D] PutI(136:I8x8)[t63,1] = 0x01\n
                            [D] PutI(136:I8x8)[t63,0] = 0x00\n
                            [D] PutI(72:F64x8)[t85,0] = t86\n
                            [D] PutI(136:I8x8)[t85,0] = 0x01\n
                            [D] PutI(72:F64x8)[t99,0] = t100\n
                            [D] PutI(136:I8x8)[t99,0] = 0x01\n
                            v1 = [D] x86g_create_fpucw(fpround<4>);\n
                            v9 = v1 | 0xc00;\n
                            v30 = ([D] GetI(136:I8x8)[t136,0] ? [D] GetI(72:F64x8)[t136,0] : nan);\n
                            [D] PutI(136:I8x8)[t136,0] = 0x00\n
                            v95 = v30;\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t21,0] = t25\n
                            [D] PutI(136:I8x8)[t21,0] = 0x01\n
                            [D] PutI(72:F64x8)[t21,1] = t18\n
                            [D] PutI(136:I8x8)[t21,1] = 0x01\n
                            [D] PutI(72:F64x8)[t36,0] = t37\n
                            [D] PutI(136:I8x8)[t36,0] = 0x01\n
                            [D] PutI(72:F64x8)[t46,1] = t47\n
                            [D] PutI(136:I8x8)[t46,1] = 0x01\n
                            [D] PutI(136:I8x8)[t46,0] = 0x00\n
                            [D] PutI(72:F64x8)[t68,0] = t69\n
                            [D] PutI(136:I8x8)[t68,0] = 0x01\n
                            [D] PutI(72:F64x8)[t82,0] = t83\n
                            [D] PutI(136:I8x8)[t82,0] = 0x01\n
                            v2 = [D] x86g_create_fpucw(fpround<4>);\n
                            v10 = v2 | 0xc00;\n
                            v31 = ([D] GetI(136:I8x8)[t119,0] ? [D] GetI(72:F64x8)[t119,0] : nan);\n
                            [D] PutI(136:I8x8)[t119,0] = 0x00\n
                            v95 = v31;\n
                        }\n
                        [D] PutI(72:F64x8)[t0,0] = t3\n
                        [D] PutI(136:I8x8)[t0,0] = 0x01\n
                    }\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t5,0] = t6\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v17 = v95;\n
            v97 = v17;\n
        }\n
        else\n
        {\n
            v29 = v48->field_10;\n
            v56 = v55 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v58 = v56 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v58 = v56 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v61 = v58 - 1;\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            v62 = v61 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
                v67 = v62 - 1 + 1;\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v67 = v62 - 1 + 1;\n
            }\n
            v28 = v51;\n
            v70 = v67 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v72 = v70 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v72 = v70 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v75 = v72 - 1;\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            v76 = v75 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                v81 = v76 - 1;\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                v83 = v76 - 1;\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            [D] PutI(72:F64x8)[t3,1] = t4\n
            [D] PutI(136:I8x8)[t3,1] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v86 = 0;\n
            [D] PutI(72:F64x8)[t23,0] = t26\n
            [D] PutI(136:I8x8)[t23,0] = 0x01\n
            [D] PutI(136:I8x8)[t38,0] = 0x00\n
            if (((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69) >> 6)) & 1) == 1)\n
            {\n
                v86 = 0x80000000;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v86 = 2147483647;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(72:F64x8)[t36,1] = t37\n
                    [D] PutI(136:I8x8)[t36,1] = 0x01\n
                    [D] PutI(136:I8x8)[t36,0] = 0x00\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
                    {\n
                        [D] PutI(72:F64x8)[t2,0] = t5\n
                        [D] PutI(136:I8x8)[t2,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,0] = t19\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,1] = t12\n
                        [D] PutI(136:I8x8)[t15,1] = 0x01\n
                        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
                        {\n
                            [D] PutI(72:F64x8)[t18,0] = t19\n
                            [D] PutI(136:I8x8)[t18,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,0] = t42\n
                            [D] PutI(136:I8x8)[t38,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,1] = t35\n
                            [D] PutI(136:I8x8)[t38,1] = 0x01\n
                            [D] PutI(72:F64x8)[t53,0] = t54\n
                            [D] PutI(136:I8x8)[t53,0] = 0x01\n
                            [D] PutI(72:F64x8)[t63,1] = t64\n
                            [D] PutI(136:I8x8)[t63,1] = 0x01\n
                            [D] PutI(136:I8x8)[t63,0] = 0x00\n
                            [D] PutI(72:F64x8)[t85,0] = t86\n
                            [D] PutI(136:I8x8)[t85,0] = 0x01\n
                            [D] PutI(72:F64x8)[t99,0] = t100\n
                            [D] PutI(136:I8x8)[t99,0] = 0x01\n
                            v7 = [D] x86g_create_fpucw(fpround<4>);\n
                            v15 = v7 | 0xc00;\n
                            v26 = ([D] GetI(136:I8x8)[t136,0] ? [D] GetI(72:F64x8)[t136,0] : nan);\n
                            [D] PutI(136:I8x8)[t136,0] = 0x00\n
                            v89 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-140, size=2, endness=Iend_LE)));\n
                            v86 = v26;\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t21,0] = t25\n
                            [D] PutI(136:I8x8)[t21,0] = 0x01\n
                            [D] PutI(72:F64x8)[t21,1] = t18\n
                            [D] PutI(136:I8x8)[t21,1] = 0x01\n
                            [D] PutI(72:F64x8)[t36,0] = t37\n
                            [D] PutI(136:I8x8)[t36,0] = 0x01\n
                            [D] PutI(72:F64x8)[t46,1] = t47\n
                            [D] PutI(136:I8x8)[t46,1] = 0x01\n
                            [D] PutI(136:I8x8)[t46,0] = 0x00\n
                            [D] PutI(72:F64x8)[t68,0] = t69\n
                            [D] PutI(136:I8x8)[t68,0] = 0x01\n
                            [D] PutI(72:F64x8)[t82,0] = t83\n
                            [D] PutI(136:I8x8)[t82,0] = 0x01\n
                            v8 = [D] x86g_create_fpucw(fpround<4>);\n
                            v16 = v8 | 0xc00;\n
                            v27 = ([D] GetI(136:I8x8)[t119,0] ? [D] GetI(72:F64x8)[t119,0] : nan);\n
                            [D] PutI(136:I8x8)[t119,0] = 0x00\n
                            v90 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-138, size=2, endness=Iend_LE)));\n
                            v86 = v27;\n
                        }\n
                        [D] PutI(72:F64x8)[t0,0] = t3\n
                        [D] PutI(136:I8x8)[t0,0] = 0x01\n
                    }\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t13,0] = t14\n
            [D] PutI(136:I8x8)[t13,0] = 0x01\n
            [D] PutI(136:I8x8)[t13,0] = 0x00\n
            v20 = v86;\n
            AudioStream::mix(v52, v50, v20);\n
            v98 = v39->field_c;\n
            v93 = v48->field_14;\n
            v99 = v48->field_8;\n
            v25 = v48->field_10;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            v24 = v93 >> 31 & v93;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
            }\n
            [D] PutI(72:F64x8)[t3,1] = t4\n
            [D] PutI(136:I8x8)[t3,1] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v96 = 0;\n
            [D] PutI(72:F64x8)[t23,0] = t26\n
            [D] PutI(136:I8x8)[t23,0] = 0x01\n
            [D] PutI(136:I8x8)[t38,0] = 0x00\n
            if (((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan), ([D] GetI(136:I8x8)[t38,1] ? [D] GetI(72:F64x8)[t38,1] : nan)) & 69) >> 6)) & 1) == 1)\n
            {\n
                v96 = 0x80000000;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v96 = 2147483647;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(72:F64x8)[t36,1] = t37\n
                    [D] PutI(136:I8x8)[t36,1] = 0x01\n
                    [D] PutI(136:I8x8)[t36,0] = 0x00\n
                    if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
                    {\n
                        [D] PutI(72:F64x8)[t2,0] = t5\n
                        [D] PutI(136:I8x8)[t2,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,0] = t19\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                        [D] PutI(72:F64x8)[t15,1] = t12\n
                        [D] PutI(136:I8x8)[t15,1] = 0x01\n
                        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
                        {\n
                            [D] PutI(72:F64x8)[t18,0] = t19\n
                            [D] PutI(136:I8x8)[t18,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,0] = t42\n
                            [D] PutI(136:I8x8)[t38,0] = 0x01\n
                            [D] PutI(72:F64x8)[t38,1] = t35\n
                            [D] PutI(136:I8x8)[t38,1] = 0x01\n
                            [D] PutI(72:F64x8)[t53,0] = t54\n
                            [D] PutI(136:I8x8)[t53,0] = 0x01\n
                            [D] PutI(72:F64x8)[t63,1] = t64\n
                            [D] PutI(136:I8x8)[t63,1] = 0x01\n
                            [D] PutI(136:I8x8)[t63,0] = 0x00\n
                            [D] PutI(72:F64x8)[t85,0] = t86\n
                            [D] PutI(136:I8x8)[t85,0] = 0x01\n
                            [D] PutI(72:F64x8)[t99,0] = t100\n
                            [D] PutI(136:I8x8)[t99,0] = 0x01\n
                            v5 = [D] x86g_create_fpucw(fpround<4>);\n
                            v13 = v5 | 0xc00;\n
                            v22 = ([D] GetI(136:I8x8)[t136,0] ? [D] GetI(72:F64x8)[t136,0] : nan);\n
                            [D] PutI(136:I8x8)[t136,0] = 0x00\n
                            v96 = v22;\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t21,0] = t25\n
                            [D] PutI(136:I8x8)[t21,0] = 0x01\n
                            [D] PutI(72:F64x8)[t21,1] = t18\n
                            [D] PutI(136:I8x8)[t21,1] = 0x01\n
                            [D] PutI(72:F64x8)[t36,0] = t37\n
                            [D] PutI(136:I8x8)[t36,0] = 0x01\n
                            [D] PutI(72:F64x8)[t46,1] = t47\n
                            [D] PutI(136:I8x8)[t46,1] = 0x01\n
                            [D] PutI(136:I8x8)[t46,0] = 0x00\n
                            [D] PutI(72:F64x8)[t68,0] = t69\n
                            [D] PutI(136:I8x8)[t68,0] = 0x01\n
                            [D] PutI(72:F64x8)[t82,0] = t83\n
                            [D] PutI(136:I8x8)[t82,0] = 0x01\n
                            v6 = [D] x86g_create_fpucw(fpround<4>);\n
                            v14 = v6 | 0xc00;\n
                            v23 = ([D] GetI(136:I8x8)[t119,0] ? [D] GetI(72:F64x8)[t119,0] : nan);\n
                            [D] PutI(136:I8x8)[t119,0] = 0x00\n
                            v96 = v23;\n
                        }\n
                        [D] PutI(72:F64x8)[t0,0] = t3\n
                        [D] PutI(136:I8x8)[t0,0] = 0x01\n
                    }\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t5,0] = t6\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v19 = v96;\n
            v97 = v19;\n
        }\n
    }\n
    else if (!v44)\n
    {\n
        v98 = *((v45 + 8));\n
        v99 = v41->field_8;\n
        v21 = v42->field_10;\n
        v97 = v21;\n
    }\n
    else\n
    {\n
        return v44;\n
    }\n
    v44 = AudioStream::mix(v98, v99, v97);\n
    return v44;\n
}\n
", "4222956:sub_406fec": null, "4222960:_ZN10AudioTrack8toStereoEPS_": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int AudioTrack::toStereo(struct_0 *v1, struct_2 *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: char\n
    struct_0 *v2;  // esi\n
    struct_2 *v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // esi\n
\n
    v2 = v1;\n
    if (v2->field_4)\n
        return 0;\n
    v3 = a0;\n
    if (!v3->field_4)\n
    {\n
        v2->field_4 = 1;\n
        v2->field_c = v3->field_8;\n
        v3->field_8 = 0;\n
        if (v3->field_4 && *(&v0))\n
        {\n
            v0 = v3->field_c;\n
            AudioStream::__base_dtor__(*(&v0));\n
            operator delete(v0);\n
        }\n
        v4 = operator delete(v3);\n
        v5 = v2->field_8->field_0;\n
        v6 = v2->field_c->field_0;\n
        if (v5 >= v6)\n
        {\n
            *(&v4) = 1;\n
            if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, edx<4>, esi<4>, 0x0<32>))\n
                return v4;\n
        }\n
        v4 = AudioStream::setLength(v1, a0);\n
        *(&v4) = 1;\n
        return v4;\n
    }\n
}\n
", "4223117:sub_40708d": null, "4223120:_ZN11CompressionD1Ev": "int Compression::__dtor__()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4223130:sub_40709a": null, "4223136:_ZN11CompressionD0Ev": "int Compression::__deleting_dtor__()\n
{\n
}\n
", "4223143:sub_4070a7": "int sub_4070a7()\n
{\n
    return Compression::fromId();\n
}\n
", "4223152:_ZN11Compression6fromIdEj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Compression::fromId(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 2)\n
    {\n
        v2 = operator new(4);\n
        *(v2) = *(&(&_GLOBAL_OFFSET_TABLE_)[416 + 4 * v1]);\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4223213:sub_4070ed": null, "4223216:_ZNK13Compression325getIdEv": "int Compression32::getId const()\n
{\n
    return 0;\n
}\n
", "4223228:sub_4070fc": null, "4223232:_ZNK13Compression3216getMaxBufferSizeERK10AudioTrack": "int Compression32::getMaxBufferSize const()\n
{\n
    char v0;  // [bp-0x4]\n
    unsigned int v2;  // ebp\n
\n
    v2 = *(&v0);\n
    return;\n
}\n
", "4223266:sub_407122": null, "4223280:_ZNK13Compression328compressERK10AudioTrackPh": "typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int Compression32::compress const()\n
{\n
    char v1;  // [bp+0x8]\n
    char v2;  // [bp+0xc]\n
    struct_2 *v3;  // esi\n
    struct_0 *v4;  // eax\n
    unsigned int *v5;  // ecx\n
    unsigned int v6;  // edx\n
    struct_0 *v7;  // esi\n
    void* v8;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
\n
    v3 = *(&v1);\n
    v4 = v3->field_8;\n
    if (!v4->field_0)\n
        return;\n
    v5 = *(&v2);\n
    v6 = v4->field_8;\n
    if (v3->field_4)\n
    {\n
        v7 = v3->field_c;\n
        v9 = 0;\n
        do\n
        {\n
            v5[2 * v9] = *((v6 + v9 * 4));\n
            v8 = 0;\n
            if (v7->field_0 > v9)\n
                v8 = v7->field_8[v9].field_0;\n
            v5[1 + 2 * v9] = v8;\n
            v9 += 1;\n
        } while (v9 < v4->field_0);\n
        return;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        do\n
        {\n
            v5[v10] = *((v6 + v10 * 4));\n
            v10 += 1;\n
        } while (v10 < v4->field_0);\n
        return;\n
    }\n
}\n
", "4223319:sub_407157": null, "4223397:sub_4071a5": null, "4223408:_ZNK13Compression3210decompressER10AudioTrackPh": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_3 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Compression32::decompress const()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    char v4;  // [bp+0x8]\n
    char v5;  // [bp+0xc]\n
    struct_2 *v6;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v7[2];  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // ecx\n
    struct_0 *v9;  // esi\n
    unsigned int v10[2];  // edx, Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edx\n
    unsigned int *v13;  // edi, Other Possible Types: unsigned int\n
    char v14;  // cl\n
    unsigned int v15;  // edx\n
    unsigned int v16[2];  // edi\n
    unsigned int v17;  // esi\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = *((*(&v4) + 8));\n
    if (!v6->field_0)\n
        return;\n
    v7 = *(&v5);\n
    if (!*((*(&v4) + 4)))\n
    {\n
        v8 = v6->field_8;\n
        *(v8) = v7[0];\n
        if (v6->field_0 < 2)\n
            return;\n
        v15 = 1;\n
        do\n
        {\n
            v16 = v7;\n
            v17 = *((v7 + v15 * 4));\n
            *((v8 + v15 * 4)) = v17;\n
            v7 = v16;\n
            v15 += 1;\n
        } while (v15 < v6->field_0);\n
        return;\n
    }\n
    v13 = 0;\n
    v14 = 1;\n
    while (true)\n
    {\n
        v10 = v7;\n
        *((*((v6 + 8)) + v13 * 4)) = *(v7);\n
        if (!v14)\n
        {\n
            v7 += 4;\n
            v13 += 1;\n
            if (v13 >= *(v6))\n
                return;\n
        }\n
        else\n
        {\n
            v9 = *((*(&v4) + 12));\n
            v11 = v10[1];\n
            if (v9->field_0 <= v13)\n
            {\n
                v1 = v11;\n
                v2[0] = v10;\n
                AudioStream::setLength(v9, v13 + 1);\n
                v10 = v2;\n
                v6 = *((*(&v4) + 8));\n
                v11 = v1;\n
            }\n
            v12 = v10 + 8;\n
            v9->field_8[v13].field_0 = v11;\n
            v7 = v12;\n
            v13 += 1;\n
            if (v13 >= *(v6))\n
                return;\n
        }\n
        v14 = *((*(&v4) + 4));\n
    }\n
}\n
", "4223561:sub_407249": null, "4223641:sub_407299": null, "4223648:_ZN13Compression32D0Ev": "int Compression32::__deleting_dtor__(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
\n
    v0 = v2;\n
    Compression::__dtor__();\n
    return operator delete(v1);\n
}\n
", "4223697:sub_4072d1": null, "4223712:_ZNK16CompressionEight5getIdEv": "int CompressionEight::getId const()\n
{\n
    return 2;\n
}\n
", "4223727:sub_4072ef": null, "4223728:_ZNK16CompressionEight16getMaxBufferSizeERK10AudioTrack": "int CompressionEight::getMaxBufferSize const()\n
{\n
    char v0;  // [bp-0x4]\n
    unsigned int v2;  // ebp\n
\n
    v2 = *(&v0);\n
    return;\n
}\n
", "4223759:sub_40730f": null, "4223760:_ZNK16CompressionEight8compressERK10AudioTrackPh": "typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int CompressionEight::compress const()\n
{\n
    char v1;  // [bp+0x8]\n
    char v2;  // [bp+0xc]\n
    struct_2 *v3;  // esi\n
    struct_0 *v4;  // eax, Other Possible Types: unsigned int\n
    char v5[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx, Other Possible Types: char\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax\n
    void* v10;  // ebx, Other Possible Types: unsigned int, char\n
    unsigned int v11;  // eax\n
\n
    v3 = *(&v1);\n
    v4 = v3->field_8;\n
    if (!v4->field_0)\n
        return;\n
    v5 = *(&v2);\n
    v8 = 0;\n
    while (true)\n
    {\n
        v6 = *((*((v4 + 8)) + v8 * 4));\n
        v7 = v6 >> 31 ^ v6 >> 18;\n
        *(&v6) = ~(v6 / 0x1000000) & 128;\n
        if (v7 <= 30)\n
        {\n
            *(&v4) = (30 - v7 >> 1) + 112;\n
            goto LABEL_40736b;\n
        }\n
        if (v7 <= 94)\n
        {\n
            *(&v4) = (94 - (*((*((v4 + 8)) + v8 * 4)) >> 31 ^ *((*((v4 + 8)) + v8 * 4)) >> 18) >> 2) + 96;\n
            goto LABEL_4073a5;\n
        }\n
        else if (v7 > 222)\n
        {\n
            if (v7 <= 478)\n
            {\n
                *(&v6) = v6 | (222 - (*((*((v4 + 8)) + v8 * 4)) >> 31 ^ *((*((v4 + 8)) + v8 * 4)) >> 18) >> 4) | 64;\n
                goto LABEL_4073a9;\n
            }\n
            if (v7 <= 990)\n
            {\n
                *(&v4) = (990 - v7 >> 5) + 48;\n
                goto LABEL_40736b;\n
            }\n
            if (v7 <= 2014)\n
            {\n
                *(&v4) = (2014 - v7 >> 6) + 32;\n
                goto LABEL_40736b;\n
            }\n
            else if (v7 > 4062)\n
            {\n
                if (v7 <= 8190)\n
                    *(&v6) = v6 | ((8190 - (*((*((v4 + 8)) + v8 * 4)) >> 31 ^ *((*((v4 + 8)) + v8 * 4)) >> 18)) * 16257 >> 22);\n
LABEL_4073a9:\n
                *(v5) = v6;\n
                if (!v3->field_4)\n
                {\n
                    v5 += 1;\n
                    v8 += 1;\n
                    v4 = v3->field_8;\n
                    if (v8 >= *(v4))\n
                        return;\n
                    continue;\n
                }\n
                v9 = v3->field_c;\n
                v10 = 0;\n
                if (v9->field_0 > v8)\n
                    v10 = v9->field_8[v8].field_0;\n
                v11 = v10 >> 31 ^ v10 >> 18;\n
                *(&v10) = ~(v10 / 0x1000000) & 128;\n
                if (v11 <= 30)\n
                {\n
                    *(&v6) = (30 - v11 >> 1) + 112;\n
                    goto LABEL_4073e9;\n
                }\n
                if (v11 <= 94)\n
                {\n
                    *(&v6) = (94 - v11 >> 2) + 96;\n
                    goto LABEL_407412;\n
                }\n
                else if (v11 > 222)\n
                {\n
                    if (v11 <= 478)\n
                    {\n
                        *(&v10) = v10 | (222 - v11 >> 4) | 64;\n
                        goto LABEL_407416;\n
                    }\n
                    if (v11 <= 990)\n
                    {\n
                        *(&v6) = (990 - v11 >> 5) + 48;\n
                        goto LABEL_4073e9;\n
                    }\n
                    if (v11 <= 2014)\n
                    {\n
                        *(&v6) = (2014 - v11 >> 6) + 32;\n
                        goto LABEL_4073e9;\n
                    }\n
                    else if (v11 > 4062)\n
                    {\n
                        if (v11 <= 8190)\n
                            *(&v10) = v10 | ((8190 - v11) * 16257 >> 22);\n
LABEL_407416:\n
                        *((v5 + 1)) = v10;\n
                        v5 += 2;\n
                        v8 += 1;\n
                        v4 = v3->field_8;\n
                        if (v8 >= *(v4))\n
                            return;\n
                    }\n
                    else\n
                    {\n
                        *(&v6) = (4062 - v11 >> 7) + 16;\n
LABEL_4073e9:\n
                        v10 = v6 | v10;\n
                        goto LABEL_407416;\n
                    }\n
                }\n
                else\n
                {\n
                    *(&v6) = (222 - v11 >> 3) + 80;\n
LABEL_407412:\n
                    v10 = v6 | v10;\n
                    goto LABEL_407416;\n
                }\n
            }\n
            else\n
            {\n
                *(&v4) = (4062 - v7 >> 7) + 16;\n
LABEL_40736b:\n
                v6 = v4 | v6;\n
                goto LABEL_4073a9;\n
            }\n
        }\n
        else\n
        {\n
            *(&v4) = (222 - (*((*((v4 + 8)) + v8 * 4)) >> 31 ^ *((*((v4 + 8)) + v8 * 4)) >> 18) >> 3) + 80;\n
LABEL_4073a5:\n
            v6 = v4 | v6;\n
            goto LABEL_4073a9;\n
        }\n
    }\n
}\n
", "4223791:sub_40732f": null, "4223857:sub_407371": null, "4223983:sub_4073ef": null, "4224326:sub_407546": null, "4224336:_ZNK16CompressionEight10decompressER10AudioTrackPh": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CompressionEight::decompress const()\n
{\n
    char v0[2];  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v3;  // [bp+0x8]\n
    char v4;  // [bp+0xc]\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
    char v6[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // ecx\n
    struct_0 *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v9;  // esi, Other Possible Types: unsigned int\n
\n
    v5 = *((*(&v3) + 8));\n
    if (!v5->field_0)\n
        return;\n
    v6 = *(&v4);\n
    v9 = 0;\n
    while (true)\n
    {\n
        *(&v0) = v6;\n
        v7 = *(v6);\n
        *((*((v5 + 8)) + v9 * 4)) = (v7 / 128 - 1 ^ *(&(&_GLOBAL_OFFSET_TABLE_)[12132 + (v7 >> 2 & 28)]) * (v7 & 15) + *(&(&_GLOBAL_OFFSET_TABLE_)[12100 + (v7 >> 2 & 28)])) * 0x40000;\n
        if (*((*(&v3) + 4)))\n
        {\n
            v8 = *((*(&v3) + 12));\n
            if (v8->field_0 <= v9)\n
            {\n
                v1 = v8;\n
                AudioStream::setLength(v8, v9 + 1);\n
                v8 = v1;\n
                v5 = *((*(&v3) + 8));\n
            }\n
            *((*((v8 + 8)) + v9 * 4)) = ((v0[1] >> 7) - 1 ^ *(&(&_GLOBAL_OFFSET_TABLE_)[12132 + (v0[1] >> 2 & 28)]) * (v0[1] & 15) + *(&(&_GLOBAL_OFFSET_TABLE_)[12100 + (v0[1] >> 2 & 28)])) * 0x40000;\n
            v6 = v0 + 1;\n
            v9 += 1;\n
            if (v9 >= *(v5))\n
                return;\n
        }\n
        else\n
        {\n
            v6 = &v0[1];\n
            v9 += 1;\n
            if (v9 >= *(v5))\n
                return;\n
        }\n
    }\n
}\n
", "4224382:sub_40757e": null, "4224567:sub_407637": null, "4224602:sub_40765a": null, "4224608:_ZN16CompressionEightD0Ev": "int CompressionEight::__deleting_dtor__(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
\n
    v0 = v2;\n
    Compression::__dtor__();\n
    return operator delete(v1);\n
}\n
", "4224657:sub_407691": null, "4224672:_ZNK15CompressionFour5getIdEv": "int CompressionFour::getId const()\n
{\n
    return 1;\n
}\n
", "4224687:sub_4076af": null, "4224688:_ZNK15CompressionFour16getMaxBufferSizeERK10AudioTrack": "int CompressionFour::getMaxBufferSize const()\n
{\n
    char v1;  // [bp+0x8]\n
\n
    if (*((*(&v1) + 4)))\n
        return;\n
    return;\n
}\n
", "4224766:sub_4076fe": null, "4224768:_Z9bestIndexi": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 g_40b41c;\n
\n
int bestIndex(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    struct_0 *v3;  // [bp-0x14]\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ebx\n
    struct_0 *v17;  // edx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    void* v21;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v23;  // esi\n
    struct_0 *v24;  // eax, Other Possible Types: unsigned int\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = v4;\n
    v7 = -(v6);\n
    if (!(v6) < 0)\n
        v7 = v6;\n
    v1 = v7;\n
    v21 = 0;\n
    v23 = 1;\n
    v24 = &g_40b41c.field_-4;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v0 = v21;\n
        v8 = v1;\n
        v9 = v8 - *((v5 + v21 * 4 - 12068));\n
        v3 = v24;\n
        v10 = v8 - *((v24 - 4));\n
        v11 = -(v9);\n
        if (!(v9) < 0)\n
            v11 = v9;\n
        v12 = -(v10);\n
        if (!(v10) < 0)\n
            v12 = v10;\n
        v13 = v23;\n
        if (v12 >= v11)\n
            v13 = v0;\n
        v14 = v23 + 1;\n
        if (v14 == 90)\n
            break;\n
        v15 = v1;\n
        v16 = v15 - *((v5 + v13 * 4 - 12068));\n
        v0 = v13;\n
        v17 = v3;\n
        v18 = v15 - v17->field_-4;\n
        v19 = -(v16);\n
        if (!(v16) < 0)\n
            v19 = v16;\n
        v20 = -(v18);\n
        if (!(v18) < 0)\n
            v20 = v18;\n
        v21 = v14;\n
        if (v20 >= v19)\n
            v21 = v0;\n
        v23 = v14 + 1;\n
        v5 = v2;\n
        v24 = v17 + 1;\n
    }\n
    return v13;\n
}\n
", "4224825:sub_407739": null, "4224959:sub_4077bf": null, "4224960:_ZNK15CompressionFour8compressERK10AudioTrackPh": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    char padding_8[4];\n
    struct struct_2 *field_c;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[7];\n
    struct struct_2 *field_c;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CompressionFour::compress const()\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    int tmp_1;  // tmp #1\n
    int tmp_72;  // tmp #72\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x34], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c], Other Possible Types: char\n
    unsigned int v5;  // [bp-0x28], Other Possible Types: char\n
    char *v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    struct_0 *v10;  // [bp-0x14]\n
    char v12;  // [bp+0x8]\n
    char v13;  // [bp+0xc]\n
    struct_0 *v14;  // ecx\n
    unsigned int v15;  // eax\n
    unsigned int v17;  // edx\n
    struct_1 *v19;  // ecx\n
    struct_0 *v20;  // edx\n
    void* v21;  // esi, Other Possible Types: unsigned int\n
    unsigned int v22[3];  // eax\n
    void* v23;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v24;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v25;  // ecx\n
    void* v26;  // esi, Other Possible Types: unsigned int\n
    unsigned int v27;  // esi\n
    struct_0 *v28;  // esi\n
    struct_0 *v29;  // eax, Other Possible Types: unsigned int\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // esi\n
    struct_3 *v33;  // edx, Other Possible Types: unsigned int\n
    void* v34;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v35;  // edi\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // edi\n
    struct_0 *v44;  // ebx\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // ebx\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // edi\n
    unsigned int v50;  // ebx\n
    unsigned int v51;  // eax\n
    struct_0 *v53;  // edx\n
    char *v54;  // eax\n
    unsigned int v55;  // edx\n
    struct_4 *v56;  // ecx\n
    struct_0 *v57;  // eax, Other Possible Types: unsigned int\n
    unsigned int v58[3];  // eax\n
    unsigned int v59;  // esi\n
    struct_0 *v60;  // edi\n
    unsigned int v61;  // esi\n
    void* v62;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v63;  // ecx\n
    void* v64;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v65;  // edx\n
    struct_0 *v66;  // esi, Other Possible Types: unsigned int\n
    unsigned int v67;  // eax\n
    struct_0 *v68;  // ecx\n
    unsigned int v70;  // edx\n
    struct_0 *v71;  // edx\n
    struct_0 *v72;  // eax, Other Possible Types: unsigned int\n
    unsigned int v73;  // eax\n
    unsigned int v74;  // ecx\n
    unsigned int v75;  // edi\n
    struct_0 *v76;  // eax, Other Possible Types: unsigned int\n
    void* v77;  // edi, Other Possible Types: unsigned int\n
    unsigned int v78;  // esi\n
    struct_3 *v79;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v80;  // ebx\n
    unsigned int v81;  // eax\n
    unsigned int v82;  // ebx\n
    unsigned int v83;  // ecx\n
    unsigned int v84;  // eax\n
    void* v85;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v86;  // esi\n
    struct_0 *v87;  // edi\n
    unsigned int v88;  // eax\n
    unsigned int v89;  // ecx\n
    unsigned int v90;  // ebx\n
    unsigned int v91;  // eax\n
    unsigned int v92;  // eax\n
    char *v93;  // ecx\n
    unsigned int v94;  // edi\n
    struct_0 *v95;  // esi, Other Possible Types: unsigned int\n
    unsigned int v96;  // esi\n
    struct_0 *v97;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v98;  // esi\n
    unsigned int v99;  // eax\n
    unsigned int v100;  // esi\n
    unsigned int v101;  // eax\n
    unsigned int v102;  // ebx\n
    unsigned int v103;  // edi\n
    unsigned int v104;  // eax\n
    struct_0 *v105;  // eax, Other Possible Types: unsigned int\n
    unsigned int v106;  // edi\n
    unsigned int v107;  // eax\n
    struct_0 *v108;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v109;  // edx, Other Possible Types: unsigned int\n
    unsigned int v110;  // esi\n
    unsigned int v111;  // esi\n
    unsigned int v112;  // esi\n
    unsigned int v115;  // eax\n
    unsigned int v118;  // eax\n
    unsigned int v119;  // eax\n
    unsigned int v120;  // ecx\n
    unsigned int v121;  // eax\n
    unsigned int v122;  // eax\n
    char *v123;  // edx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = *((*(&v12) + 8));\n
    v15 = v14->field_0;\n
    if (!v15)\n
        return;\n
    v6 = 0;\n
    v9 = v17;\n
    v97 = 0;\n
    v24 = v14;\n
    do\n
    {\n
        v1 = *((v24 + 8));\n
        v26 = *((v1 + v97 * 4));\n
        v7 = v97;\n
        v8 = v85;\n
        if (!(v6 & 511))\n
        {\n
            v10 = v24;\n
            v20 = v26 >> 16;\n
            v21 = 0;\n
            v3 = v97 + 1;\n
            if (v15 > v3)\n
                v21 = *((v1 + v97 * 4 + 4));\n
            v27 = v21 >> 16;\n
            v1 = v20;\n
            v28 = v27 - v1;\n
            v29 = -(v28);\n
            if (!(v28) < 0)\n
                v29 = v28;\n
            v2 = v29;\n
            v32 = 1;\n
            v33 = v0 - 12060;\n
            v34 = 0;\n
            while (true)\n
            {\n
                v35 = v2;\n
                v36 = v35 - *((v0 + v34 * 4 - 12068));\n
                v37 = v35 - *((v33 - 4));\n
                v38 = v34;\n
                v39 = -(v36);\n
                if (!(v36) < 0)\n
                    v39 = v36;\n
                v40 = -(v37);\n
                if (!(v37) < 0)\n
                    v40 = v37;\n
                v41 = v32;\n
                if (v40 >= v39)\n
                    v41 = v38;\n
                v42 = v32 + 1;\n
                if (v42 == 90)\n
                    break;\n
                v43 = v41;\n
                v44 = v2;\n
                v45 = v44 - *((v0 + v41 * 4 - 12068));\n
                v46 = v44 - *(v33);\n
                v47 = -(v45);\n
                if (!(v45) < 0)\n
                    v47 = v45;\n
                v48 = -(v46);\n
                if (!(v46) < 0)\n
                    v48 = v46;\n
                tmp_1 = v47;\n
                v34 = v42;\n
                if (v48 >= tmp_1)\n
                    v34 = v43;\n
                v33 += 8;\n
                v32 = v42 + 1;\n
            }\n
            v4 = v41;\n
            v54 = *(&v13);\n
            v55 = v6;\n
            v95 = v1;\n
            *(&v54[v55]) = v95;\n
            *(&v54[2 + v55]) = v4;\n
            v56 = *(&v12);\n
            if (!v56->field_4)\n
            {\n
                v6 = v55 + 4;\n
                v94 = *(&v5);\n
                v85 = v8;\n
            }\n
            else\n
            {\n
                v58 = v56->field_c;\n
                v59 = v58[0];\n
                v64 = 0;\n
                v62 = 0;\n
                v60 = v7;\n
                if (v59 > v60)\n
                    v62 = *((v58[2] + v60 * 4));\n
                v63 = v62 >> 16;\n
                if (v59 > v3)\n
                    v64 = *((v58[2] + v60 * 4 + 4));\n
                v70 = v64 >> 16;\n
                v5 = v63;\n
                v71 = v70 - v5;\n
                v72 = -(v71);\n
                if (!(v71) < 0)\n
                    v72 = v71;\n
                v2 = v72;\n
                v77 = 0;\n
                v78 = 1;\n
                v79 = v0 - 12060;\n
                while (true)\n
                {\n
                    v80 = v2;\n
                    v81 = v80 - *((v0 + v77 * 4 - 12068));\n
                    v82 = v80 - *((v79 - 4));\n
                    v83 = -(v81);\n
                    if (!(v81) < 0)\n
                        v83 = v81;\n
                    v84 = -(v82);\n
                    if (!(v82) < 0)\n
                        v84 = v82;\n
                    v85 = v78;\n
                    if (v84 >= v83)\n
                        v85 = v77;\n
                    v86 = v78 + 1;\n
                    if (v86 == 90)\n
                        break;\n
                    v87 = v2;\n
                    v88 = v87 - *((v0 + v85 * 4 - 12068));\n
                    v89 = v87 - *(v79);\n
                    v8 = v85;\n
                    v90 = -(v88);\n
                    if (!(v88) < 0)\n
                        v90 = v88;\n
                    v91 = -(v89);\n
                    if (!(v89) < 0)\n
                        v91 = v89;\n
                    v77 = v86;\n
                    if (v91 >= v90)\n
                        v77 = v8;\n
                    v79 += 8;\n
                    v78 = v86 + 1;\n
                }\n
                v92 = *(&v13);\n
                v93 = v6;\n
                v94 = v5;\n
                *(&v93[4 + v92]) = v94;\n
                *(&v93[6 + v92]) = v85;\n
                v6 = v93 + 8;\n
                v95 = v1;\n
            }\n
            v24 = v10;\n
            v97 = v3;\n
            continue;\n
        }\n
        v19 = *(&v12);\n
        *(&v3) = v19->field_4;\n
        if (v19->field_4)\n
        {\n
            v22 = v19->field_c;\n
            v23 = 0;\n
            v24 = v7;\n
            if (v22[0] > v24)\n
                v23 = *((v22[2] + v24 * 4));\n
            v9 = v23 / 0x10000;\n
        }\n
        else\n
        {\n
            v25 = v7;\n
            if (v15 <= v7)\n
            {\n
                v7 = v7;\n
                v26 = 0;\n
            }\n
            else\n
            {\n
                v7 = &v25->field_0 + 1;\n
                v26 = *((v1 + v25 * 4 + 4));\n
            }\n
        }\n
        v30 = (v26 >> 16) - v2;\n
        v31 = -(v30);\n
        if (!(v30) < 0)\n
            v31 = v30;\n
        v49 = *(&v4);\n
        v50 = *((v0 + v49 * 4 - 12068));\n
        v51 = v31 * 4;\n
        v53 = (!(v24 < 7) ? (v51 >> 31 CONCAT v51) /m v50 : 7);\n
        v57 = v53 | 8;\n
        if ((v30 >> 31 & 1 ^ 1))\n
            v57 = v53;\n
        v1 = v57 & 7;\n
        v61 = -(v50);\n
        if (!(v57 & 8))\n
            v61 = v50;\n
        v65 = v57;\n
        v66 = (v61 >> 2 & -(v57 & 1)) + (v61 >> 1 & v57 * 0x40000000 >> 31) + (v57 * 0x20000000 >> 31 & v61) + v2;\n
        v67 = v0;\n
        v68 = v1;\n
        tmp_72 = v49;\n
        if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t72, Load(addr=((eax<4> + (ecx<4> << 0x2<8>)) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
        {\n
            v73 = 0;\n
            v74 = v9;\n
            v75 = v5;\n
        }\n
        else\n
        {\n
            v73 = 7;\n
            v4 = v49 + *((v67 + v68 * 4 - 11708));\n
            v74 = v9;\n
            v75 = v5;\n
            if (v4 < 8)\n
            {\n
                v76 = 32767;\n
                if (!(v66 <= 32766))\n
                    goto LABEL_407b88;\n
                goto LABEL_407b7b;\n
            }\n
        }\n
        v4 = v73;\n
        v76 = 32767;\n
        if (!(v66 <= 32766))\n
            goto LABEL_407b88;\n
LABEL_407b7b:\n
        v76 = -0x8000;\n
        if (!(v66 <= -0x8000))\n
            goto LABEL_407b8a;\n
LABEL_407b88:\n
        v66 = v76;\n
LABEL_407b8a:\n
        v1 = v66;\n
        *(&v65) = v65 * 16;\n
        v96 = v74;\n
        v5 = v75;\n
        v2 = v65;\n
        if (!v3)\n
        {\n
            v100 = v96 - v1;\n
            v101 = -(v100);\n
            if (!(v100) < 0)\n
                v101 = v100;\n
            v106 = *((v0 + v4 * 4 - 12068));\n
            v107 = v101 * 4;\n
            v108 = (v107 >> 31 CONCAT v107) /m v106;\n
            if (v108 >= 7)\n
                v108 = 7;\n
            v109 = v108 | 8;\n
            if ((v100 >> 31 & 1 ^ 1))\n
                v109 = v108;\n
            v3 = v109 & 7;\n
            v111 = -(v106);\n
            if (!(v109 & 8))\n
                v111 = v106;\n
            v95 = (v111 >> 2 & -(v109 & 1)) + (v111 >> 1 & v109 * 0x40000000 >> 31) + (v109 * 0x20000000 >> 31 & v111) + v1;\n
            v115 = v4;\n
            tmp_72 = v115;\n
            v118 = v115 + *((v0 + v3 * 4 - 11708));\n
            if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t72, Load(addr=((eax<4> + (ecx<4> << 0x2<8>)) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
            {\n
                v121 = 0;\n
                v85 = v8;\n
            }\n
            else\n
            {\n
                v120 = v118;\n
                v121 = 7;\n
                v4 = v120;\n
                v85 = v8;\n
                if (v4 < 8)\n
                {\n
                    v122 = 32767;\n
                    v94 = v5;\n
                    if (!(v95 <= 32766))\n
                        goto LABEL_4077ff;\n
                    goto LABEL_407d6b;\n
                }\n
            }\n
            v4 = v121;\n
            v122 = 32767;\n
            v94 = v5;\n
            if (!(v95 <= 32766))\n
                goto LABEL_4077ff;\n
LABEL_407d6b:\n
            v122 = -0x8000;\n
            if (!(v95 <= -0x8000))\n
                goto LABEL_407801;\n
LABEL_4077ff:\n
            v95 = v122;\n
            goto LABEL_407801;\n
        }\n
        v98 = v96 - v75;\n
        v99 = -(v98);\n
        if (!(v98) < 0)\n
            v99 = v98;\n
        v102 = v8;\n
        v103 = *((v0 + v102 * 4 - 12068));\n
        v104 = v99 * 4;\n
        v105 = (v104 >> 31 CONCAT v104) /m v103;\n
        if (v105 >= 7)\n
            v105 = 7;\n
        v109 = v105 | 8;\n
        if ((v98 >> 31 & 1 ^ 1))\n
            v109 = v105;\n
        v3 = v109 & 7;\n
        v110 = -(v103);\n
        if (!(v109 & 8))\n
            v110 = v103;\n
        v112 = (v110 >> 2 & -(v109 & 1)) + (v110 >> 1 & v109 * 0x40000000 >> 31) + (v109 * 0x20000000 >> 31 & v110) + v5;\n
        tmp_72 = v102;\n
        v85 = v102 + *((v0 + v3 * 4 - 11708));\n
        if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t72, Load(addr=((eax<4> + (ecx<4> << 0x2<8>)) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
        {\n
            v85 = 0;\n
            v119 = 32767;\n
            if (!(v112 <= 32766))\n
                goto LABEL_407d41;\n
        }\n
        else if (v85 >= 8)\n
        {\n
            v85 = 7;\n
            v119 = 32767;\n
            if (!(v112 <= 32766))\n
                goto LABEL_407d41;\n
        }\n
        else\n
        {\n
            v119 = 32767;\n
            if (!(v112 <= 32766))\n
                goto LABEL_407d41;\n
        }\n
        v94 = v112;\n
        v119 = -0x8000;\n
        if (!(v112 <= -0x8000))\n
            goto LABEL_407d43;\n
LABEL_407d41:\n
        v94 = v119;\n
LABEL_407d43:\n
        v95 = v1;\n
LABEL_407801:\n
        tmp_1 = v2 | v109;\n
        v123 = v6;\n
        v123[*(&v13)] = tmp_1;\n
        v6 = v123 + 1;\n
        v24 = *((*(&v12) + 8));\n
        v97 = v7 + 1;\n
        v5 = v94;\n
        v15 = *(v24);\n
        v2 = v95;\n
    } while (v97 < v15);\n
    return;\n
}\n
", "4225162:sub_40788a": null, "4225239:sub_4078d7": null, "4225355:sub_40794b": null, "4225481:sub_4079c9": null, "4225593:sub_407a39": null, "4225627:sub_407a5b": null, "4225886:sub_407b5e": null, "4226126:sub_407c4e": null, "4226150:sub_407c66": null, "4226441:sub_407d89": null, "4226448:_ZNK15CompressionFour10decompressER10AudioTrackPh": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CompressionFour::decompress const()\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    int tmp_80;  // tmp #80\n
    int tmp_72;  // tmp #72\n
    int tmp_3;  // tmp #3\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24], Other Possible Types: char\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    char v10;  // [bp+0x8]\n
    char v11;  // [bp+0xc]\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // esi\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // ebx\n
    unsigned int v41;  // ecx\n
    unsigned int v44;  // ebx\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // eax\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // edi\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // esi\n
    unsigned int v53;  // ebx\n
    unsigned int v54;  // esi\n
    unsigned int v55;  // edi\n
    unsigned int v56;  // eax\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ecx\n
    unsigned int v59;  // esi\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = *((*(&v10) + 8));\n
    if (!*(v12))\n
        return;\n
    v13 = *(&v11);\n
    v53 = 0;\n
    v57 = 0;\n
    while (true)\n
    {\n
        v4 = v53;\n
        if ((v57 & 511))\n
            break;\n
        v5 = *((v13 + v57 + 2));\n
        v3 = *((v13 + v57));\n
        v17 = *((v12 + 8));\n
        v59 = *(&v10);\n
        *((v17 + v53 * 4)) = v3 * 0x10000;\n
        if (*((v59 + 4)))\n
        {\n
            v8 = *((v13 + v57 + 6));\n
            v19 = *((v59 + 12));\n
            v7 = *((v13 + v57 + 4));\n
            if (*(v19) <= v53)\n
            {\n
                v2 = v19;\n
                v1 = v57;\n
                AudioStream::setLength(v2, v53 + 1);\n
                v19 = v2;\n
                v53 = v4;\n
                v57 = v1;\n
            }\n
            v57 += 8;\n
            *((*((v19 + 8)) + v53 * 4)) = v7 * 0x10000;\n
        }\n
        else\n
        {\n
            v57 += 4;\n
            v53 += 1;\n
            v12 = *((v59 + 8));\n
            if (v53 >= *(v12))\n
                return;\n
            continue;\n
        }\n
LABEL_407dd9:\n
        v13 = *(&v11);\n
        v53 += 1;\n
        v12 = *((v59 + 8));\n
        if (v53 >= *(v12))\n
            return;\n
    }\n
    v2 = v12;\n
    v1 = v57;\n
    v14 = *((v13 + v57));\n
    v15 = *((v0 + *(&v5) * 4 - 12068));\n
    v16 = v14 / 4 & 28;\n
    v18 = -(v15);\n
    if (!((v14 >> 4) & 8))\n
        v18 = v15;\n
    v20 = (v18 >> 1 & v14 * 0x4000000 >> 31) + (v14 * 0x2000000 >> 31 & v18) + v3;\n
    v21 = *(&v5);\n
    v3 = v14;\n
    v22 = (v18 >> 2 & v14 * 0x8000000 >> 31) + v20;\n
    v23 = v0;\n
    tmp_80 = v21;\n
    v24 = v21 + *((v23 + v16 - 11708));\n
    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t80, Load(addr=((ecx<4> + edi<4>) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
    {\n
        v25 = 0;\n
        v26 = v1;\n
    }\n
    else\n
    {\n
        v25 = 7;\n
        v26 = v1;\n
        if (v24 < 8)\n
        {\n
            v27 = 32767;\n
            if (!(v22 <= 32766))\n
                goto LABEL_407f52;\n
            goto LABEL_407f45;\n
        }\n
    }\n
    v24 = v25;\n
    v27 = 32767;\n
    if (!(v22 <= 32766))\n
        goto LABEL_407f52;\n
LABEL_407f45:\n
    v27 = -0x8000;\n
    if (!(v22 <= -0x8000))\n
        goto LABEL_407f54;\n
LABEL_407f52:\n
    v22 = v27;\n
LABEL_407f54:\n
    *((v6 + v4 * 4)) = v22 * 0x10000;\n
    v28 = v3 & 15;\n
    v1 = v26 + 1;\n
    v5 = v24;\n
    if (!*((*(&v10) + 4)))\n
    {\n
        v6 = *((v2 + 8));\n
        v32 = *((v0 + v24 * 4 - 12068));\n
        v3 = v28 & 7;\n
        v33 = v28;\n
        v34 = -(v32);\n
        if (!(v33 & 8))\n
            v34 = v32;\n
        v40 = v5;\n
        v41 = (v34 >> 2 & -(v33 & 1)) + (v34 >> 1 & v33 * 0x40000000 >> 31) + (v33 * 0x20000000 >> 31 & v34) + v22;\n
        v52 = v41;\n
        tmp_72 = v40;\n
        v44 = v40 + *((v0 + v3 * 4 - 11708));\n
        if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t80, Load(addr=((ecx<4> + edi<4>) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
        {\n
            v46 = 0;\n
        }\n
        else\n
        {\n
            v46 = 7;\n
            if (v44 < 8)\n
                goto LABEL_4080ed;\n
        }\n
        v44 = v46;\n
LABEL_4080ed:\n
        v5 = v44;\n
        v49 = 32767;\n
        tmp_3 = v41;\n
        v57 = v1;\n
        v58 = v4;\n
        if (tmp_3 <= 32766)\n
        {\n
            v49 = -0x8000;\n
            if (!(v52 <= -0x8000))\n
                goto LABEL_408115;\n
        }\n
        v52 = v49;\n
LABEL_408115:\n
        v53 = v58 + 1;\n
        v3 = v52;\n
        v54 = v52 * 0x10000;\n
        v55 = v2;\n
        v56 = v6;\n
        if (*(v55) <= v53)\n
        {\n
            v6 = v53;\n
            AudioStream::setLength(v55, v58 + 2);\n
            v53 = v6;\n
            v58 = v4;\n
            v57 = v1;\n
            v56 = *((v55 + 8));\n
        }\n
        *((v56 + v58 * 4 + 4)) = v54;\n
LABEL_407dd6:\n
        v59 = *(&v10);\n
        goto LABEL_407dd9;\n
    }\n
    v3 = v22;\n
    v29 = v8;\n
    v30 = *((v0 + v29 * 4 - 12068));\n
    v2 = v28 & 7;\n
    v31 = -(v30);\n
    if (!(v28 & 8))\n
        v31 = v30;\n
    v35 = (v31 >> 2 & -(v28 & 1)) + (v31 >> 1 & v28 * 0x40000000 >> 31) + (v28 * 0x20000000 >> 31 & v31) + v7;\n
    v36 = v35;\n
    tmp_72 = v29;\n
    v39 = v29 + *((v0 + v2 * 4 - 11708));\n
    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t80, Load(addr=((ecx<4> + edi<4>) - 0x2dbc<32>), size=4, endness=Iend_LE), 0x0<32>))\n
    {\n
        v45 = 0;\n
    }\n
    else\n
    {\n
        v45 = 7;\n
        if (v39 < 8)\n
            goto LABEL_408078;\n
    }\n
    v39 = v45;\n
LABEL_408078:\n
    v8 = v39;\n
    v47 = 32767;\n
    tmp_3 = v35;\n
    v57 = v1;\n
    v53 = v4;\n
    if (tmp_3 <= 32766)\n
    {\n
        v47 = -0x8000;\n
        if (!(v36 <= -0x8000))\n
            goto LABEL_4080a3;\n
    }\n
    v36 = v47;\n
LABEL_4080a3:\n
    v50 = *((*(&v10) + 12));\n
    v7 = v36;\n
    v51 = v36 * 0x10000;\n
    if (*(v50) <= v53)\n
    {\n
        AudioStream::setLength(v50, v53 + 1);\n
        v53 = v4;\n
        v57 = v1;\n
    }\n
    *((*((v50 + 8)) + v53 * 4)) = v51;\n
    goto LABEL_407dd6;\n
}\n
", "4226500:sub_407dc4": null, "4226712:sub_407e98": null, "4226850:sub_407f22": null, "4227068:sub_407ffc": null, "4227427:sub_408163": null, "4227440:_ZN15CompressionFourD0Ev": "int CompressionFour::__deleting_dtor__(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
\n
    v0 = v2;\n
    Compression::__dtor__();\n
    return operator delete(v1);\n
}\n
", "4227489:sub_4081a1": null, "4227504:_ZN6FxGainC1E4Gain": "int FxGain::__ctor__(unsigned int *v0, unsigned int a0)\n
{\n
    *(v0) = a0;\n
    return v0;\n
}\n
", "4227522:sub_4081c2": null, "4227536:_ZNK6FxGain5applyER10AudioTrack": "typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int FxGain::apply const(unsigned int *v10, struct_2 *a0)\n
{\n
    unsigned short v0;  // [bp-0x30]\n
    unsigned short v1;  // [bp-0x2e]\n
    unsigned short v2;  // [bp-0x2c]\n
    unsigned short v3;  // [bp-0x2a]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v11;  // ecx\n
    struct_0 *v12;  // esi\n
    unsigned int *v13;  // edi\n
    unsigned int v14;  // ebx\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // edx\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // fpround\n
    unsigned int v33;  // ftop\n
    struct_2 *v34;  // edx\n
    struct_0 *v35;  // edx\n
    unsigned int *v36;  // esi\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ebx\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // fpround\n
    unsigned int v54;  // edi\n
\n
    v11 = v10;\n
    v12 = a0->field_8;\n
    if (v12->field_0)\n
    {\n
        v13 = v12->field_8;\n
        v14 = 0;\n
        do\n
        {\n
            v9 = v13[v14];\n
            v16 = ftop<4> - 1;\n
            if ([D] GetI(136:I8x8)[t13,0])\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v8 = *(v11);\n
            v18 = v17 - 1;\n
            if ([D] GetI(136:I8x8)[t13,0])\n
            {\n
                v19 = v18 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v19 = v18 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if (![D] GetI(136:I8x8)[t13,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v20 = v19 - 1;\n
            [D] PutI(72:F64x8)[t2,0] = t5\n
            [D] PutI(136:I8x8)[t2,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,0] = t19\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            [D] PutI(72:F64x8)[t15,1] = t12\n
            [D] PutI(136:I8x8)[t15,1] = 0x01\n
            [D] PutI(72:F64x8)[t46,1] = t47\n
            [D] PutI(136:I8x8)[t46,1] = 0x01\n
            [D] PutI(136:I8x8)[t46,0] = 0x00\n
            v21 = v20 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(72:F64x8)[t27,1] = t28\n
                [D] PutI(136:I8x8)[t27,1] = 0x01\n
                [D] PutI(136:I8x8)[t27,0] = 0x00\n
                v23 = v21 - 1 + 1;\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t0,0] = t3\n
                [D] PutI(136:I8x8)[t0,0] = 0x01\n
                [D] PutI(72:F64x8)[t10,1] = t11\n
                [D] PutI(136:I8x8)[t10,1] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v23 = v21 - 1 + 1;\n
            }\n
            [D] PutI(72:F64x8)[t3,1] = t4\n
            [D] PutI(136:I8x8)[t3,1] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v25 = v23 + 1;\n
            v26 = 2147483647;\n
            [D] PutI(72:F64x8)[t25,0] = t28\n
            [D] PutI(136:I8x8)[t25,0] = 0x01\n
            [D] PutI(72:F64x8)[t38,0] = t42\n
            [D] PutI(136:I8x8)[t38,0] = 0x01\n
            [D] PutI(72:F64x8)[t38,1] = t35\n
            [D] PutI(136:I8x8)[t38,1] = 0x01\n
            [D] PutI(72:F64x8)[t69,1] = t70\n
            [D] PutI(136:I8x8)[t69,1] = 0x01\n
            [D] PutI(136:I8x8)[t69,0] = 0x00\n
            v28 = v25 - 1 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t58,0] ? [D] GetI(72:F64x8)[t58,0] : nan), ([D] GetI(136:I8x8)[t58,1] ? [D] GetI(72:F64x8)[t58,1] : nan)) & 1) == 1)\n
            {\n
                v26 = 0x80000000;\n
                v29 = v28 - 1;\n
                if (![D] GetI(136:I8x8)[t13,0])\n
                {\n
                    v30 = v29 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v30 = v29 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v28 = v30 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v1 = [D] x86g_create_fpucw(fpround<4>);\n
                    v3 = v1 | 0xc00;\n
                    if ([D] GetI(136:I8x8)[t13,0])\n
                    {\n
                        v7 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v31 = v28 + 1;\n
                    }\n
                    else\n
                    {\n
                        v7 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v31 = v28 + 1;\n
                    }\n
                    v32 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-46, size=2, endness=Iend_LE)));\n
                    v26 = v7;\n
                    v28 = v31 - 1;\n
                    [D] PutI(72:F64x8)[t15,0] = t18\n
                    [D] PutI(136:I8x8)[t15,0] = 0x01\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t8,0] = t9\n
            [D] PutI(136:I8x8)[t8,0] = 0x01\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v33 = v28 + 1;\n
            v13[v14] = v26;\n
            v14 += 1;\n
        } while (v14 < v12->field_0);\n
    }\n
    v34 = a0;\n
    if (!v34->field_4)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v35 = v34->field_c;\n
    if (!v35->field_0)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v36 = v35->field_8;\n
    v54 = 0;\n
    do\n
    {\n
        v6 = v36[v54];\n
        v37 = v33 - 1;\n
        if (![D] GetI(136:I8x8)[t13,0])\n
        {\n
            v38 = v37 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v38 = v37 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v5 = *(v11);\n
        v39 = v38 - 1;\n
        if ([D] GetI(136:I8x8)[t13,0])\n
        {\n
            v40 = v39 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v40 = v39 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if (![D] GetI(136:I8x8)[t13,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v41 = v40 - 1;\n
        [D] PutI(72:F64x8)[t2,0] = t5\n
        [D] PutI(136:I8x8)[t2,0] = 0x01\n
        [D] PutI(72:F64x8)[t15,0] = t19\n
        [D] PutI(136:I8x8)[t15,0] = 0x01\n
        [D] PutI(72:F64x8)[t15,1] = t12\n
        [D] PutI(136:I8x8)[t15,1] = 0x01\n
        [D] PutI(72:F64x8)[t46,1] = t47\n
        [D] PutI(136:I8x8)[t46,1] = 0x01\n
        [D] PutI(136:I8x8)[t46,0] = 0x00\n
        v42 = v41 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) == 1)\n
        {\n
            [D] PutI(72:F64x8)[t0,0] = t3\n
            [D] PutI(136:I8x8)[t0,0] = 0x01\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(72:F64x8)[t27,1] = t28\n
            [D] PutI(136:I8x8)[t27,1] = 0x01\n
            [D] PutI(136:I8x8)[t27,0] = 0x00\n
            v44 = v42 - 1 + 1;\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t0,0] = t3\n
            [D] PutI(136:I8x8)[t0,0] = 0x01\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(136:I8x8)[t10,0] = 0x00\n
            v44 = v42 - 1 + 1;\n
        }\n
        [D] PutI(72:F64x8)[t3,1] = t4\n
        [D] PutI(136:I8x8)[t3,1] = 0x01\n
        [D] PutI(136:I8x8)[t3,0] = 0x00\n
        v46 = v44 + 1;\n
        v47 = 2147483647;\n
        [D] PutI(72:F64x8)[t25,0] = t28\n
        [D] PutI(136:I8x8)[t25,0] = 0x01\n
        [D] PutI(72:F64x8)[t38,0] = t42\n
        [D] PutI(136:I8x8)[t38,0] = 0x01\n
        [D] PutI(72:F64x8)[t38,1] = t35\n
        [D] PutI(136:I8x8)[t38,1] = 0x01\n
        [D] PutI(72:F64x8)[t69,1] = t70\n
        [D] PutI(136:I8x8)[t69,1] = 0x01\n
        [D] PutI(136:I8x8)[t69,0] = 0x00\n
        v49 = v46 - 1 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t58,0] ? [D] GetI(72:F64x8)[t58,0] : nan), ([D] GetI(136:I8x8)[t58,1] ? [D] GetI(72:F64x8)[t58,1] : nan)) & 1) == 1)\n
        {\n
            v47 = 0x80000000;\n
            v50 = v49 - 1;\n
            if (![D] GetI(136:I8x8)[t13,0])\n
            {\n
                v51 = v50 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v51 = v50 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v49 = v51 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
            {\n
                v0 = [D] x86g_create_fpucw(fpround<4>);\n
                v2 = v0 | 0xc00;\n
                if ([D] GetI(136:I8x8)[t13,0])\n
                {\n
                    v4 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v52 = v49 + 1;\n
                }\n
                else\n
                {\n
                    v4 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v52 = v49 + 1;\n
                }\n
                v53 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-48, size=2, endness=Iend_LE)));\n
                v47 = v4;\n
                v49 = v52 - 1;\n
                [D] PutI(72:F64x8)[t15,0] = t18\n
                [D] PutI(136:I8x8)[t15,0] = 0x01\n
            }\n
        }\n
        [D] PutI(72:F64x8)[t8,0] = t9\n
        [D] PutI(136:I8x8)[t8,0] = 0x01\n
        [D] PutI(136:I8x8)[t8,0] = 0x00\n
        v33 = v49 + 1;\n
        v36[v54] = v47;\n
        v54 += 1;\n
    } while (v54 < v35->field_0);\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4227585:sub_408201": null, "4227661:sub_40824d": null, "4227779:sub_4082c3": null, "4227853:sub_40830d": null, "4227947:sub_40836b": null, "4227952:_ZNK6FxGain5applyER11AudioStream": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int FxGain::apply const(unsigned int *v5, struct_0 *a0)\n
{\n
    unsigned short v0;  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x1e]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_0 *v6;  // ecx\n
    unsigned int *v7;  // esi\n
    unsigned int v8;  // edi\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ebx\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
\n
    v6 = a0;\n
    if (!v6->field_0)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v7 = v6->field_8;\n
    v8 = 0;\n
    do\n
    {\n
        v4 = v7[v8];\n
        v10 = ftop<4> - 1;\n
        if ([D] GetI(136:I8x8)[t13,0])\n
        {\n
            v11 = v10 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v11 = v10 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v3 = *(v5);\n
        v12 = v11 - 1;\n
        if (![D] GetI(136:I8x8)[t13,0])\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t13,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v14 = v13 - 1;\n
        [D] PutI(72:F64x8)[t2,0] = t5\n
        [D] PutI(136:I8x8)[t2,0] = 0x01\n
        [D] PutI(72:F64x8)[t15,0] = t19\n
        [D] PutI(136:I8x8)[t15,0] = 0x01\n
        [D] PutI(72:F64x8)[t15,1] = t12\n
        [D] PutI(136:I8x8)[t15,1] = 0x01\n
        [D] PutI(72:F64x8)[t46,1] = t47\n
        [D] PutI(136:I8x8)[t46,1] = 0x01\n
        [D] PutI(136:I8x8)[t46,0] = 0x00\n
        v15 = v14 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan), ([D] GetI(136:I8x8)[t35,1] ? [D] GetI(72:F64x8)[t35,1] : nan)) & 1) != 1)\n
        {\n
            [D] PutI(72:F64x8)[t0,0] = t3\n
            [D] PutI(136:I8x8)[t0,0] = 0x01\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(136:I8x8)[t10,0] = 0x00\n
            v17 = v15 - 1 + 1;\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t0,0] = t3\n
            [D] PutI(136:I8x8)[t0,0] = 0x01\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(72:F64x8)[t27,1] = t28\n
            [D] PutI(136:I8x8)[t27,1] = 0x01\n
            [D] PutI(136:I8x8)[t27,0] = 0x00\n
            v17 = v15 - 1 + 1;\n
        }\n
        [D] PutI(72:F64x8)[t3,1] = t4\n
        [D] PutI(136:I8x8)[t3,1] = 0x01\n
        [D] PutI(136:I8x8)[t3,0] = 0x00\n
        v19 = v17 + 1;\n
        v20 = 2147483647;\n
        [D] PutI(72:F64x8)[t25,0] = t28\n
        [D] PutI(136:I8x8)[t25,0] = 0x01\n
        [D] PutI(72:F64x8)[t38,0] = t42\n
        [D] PutI(136:I8x8)[t38,0] = 0x01\n
        [D] PutI(72:F64x8)[t38,1] = t35\n
        [D] PutI(136:I8x8)[t38,1] = 0x01\n
        [D] PutI(72:F64x8)[t69,1] = t70\n
        [D] PutI(136:I8x8)[t69,1] = 0x01\n
        [D] PutI(136:I8x8)[t69,0] = 0x00\n
        v22 = v19 - 1 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t58,0] ? [D] GetI(72:F64x8)[t58,0] : nan), ([D] GetI(136:I8x8)[t58,1] ? [D] GetI(72:F64x8)[t58,1] : nan)) & 1) == 1)\n
        {\n
            v20 = 0x80000000;\n
            v23 = v22 - 1;\n
            if ([D] GetI(136:I8x8)[t13,0])\n
            {\n
                v24 = v23 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v24 = v23 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v22 = v24 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
            {\n
                v0 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-32, size=2, endness=Iend_LE)))));\n
                v1 = v0 | 0xc00;\n
                if (![D] GetI(136:I8x8)[t13,0])\n
                {\n
                    v2 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v25 = v22 + 1;\n
                }\n
                else\n
                {\n
                    v2 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v25 = v22 + 1;\n
                }\n
                v20 = v2;\n
                v22 = v25 - 1;\n
                [D] PutI(72:F64x8)[t15,0] = t18\n
                [D] PutI(136:I8x8)[t15,0] = 0x01\n
            }\n
        }\n
        [D] PutI(72:F64x8)[t8,0] = t9\n
        [D] PutI(136:I8x8)[t8,0] = 0x01\n
        [D] PutI(136:I8x8)[t8,0] = 0x00\n
        v26 = v22 + 1;\n
        v7[v8] = v20;\n
        v8 += 1;\n
    } while (v8 < v6->field_0);\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4227998:sub_40839e": null, "4228061:sub_4083dd": null, "4228155:sub_40843b": null, "4228160:_ZN5FxPanC1Ei": "int FxPan::__ctor__(unsigned int *v0, unsigned int a0)\n
{\n
    *(v0) = a0;\n
    return a0;\n
}\n
", "4228178:sub_408452": null, "4228192:_ZNK5FxPan5applyER10AudioTrack": "typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int FxPan::apply const(unsigned int *v18, struct_2 *a0)\n
{\n
    unsigned short v0;  // [bp-0x48]\n
    unsigned short v1;  // [bp-0x46]\n
    unsigned short v2;  // [bp-0x44]\n
    unsigned short v3;  // [bp-0x42]\n
    unsigned short v4;  // [bp-0x40]\n
    unsigned short v5;  // [bp-0x3e]\n
    unsigned short v6;  // [bp-0x3c]\n
    unsigned short v7;  // [bp-0x3a]\n
    unsigned int v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0x34]\n
    unsigned int v10;  // [bp-0x30]\n
    unsigned int v11;  // [bp-0x2c]\n
    unsigned int v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x24]\n
    unsigned int v14;  // [bp-0x20]\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    unsigned int v17;  // [bp-0x14]\n
    struct_2 *v19;  // edx\n
    unsigned int v20;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    struct_0 *v25;  // esi\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v29;  // edi\n
    unsigned int *v30;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // fpround\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v53;  // ecx\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // fpround\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    struct_0 *v63;  // edx\n
    unsigned int v64;  // ftop\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    unsigned int v67;  // ftop\n
    unsigned int v68;  // ecx\n
    unsigned int *v70;  // ecx\n
    unsigned int v71;  // ftop\n
    unsigned int v72;  // ftop\n
    unsigned int v73;  // ftop\n
    unsigned int v74;  // ftop\n
    unsigned int v75;  // ftop\n
    unsigned int v77;  // esi\n
    unsigned int v78;  // ftop\n
    unsigned int v80;  // esi\n
    unsigned int v81;  // ftop\n
    unsigned int v82;  // ftop\n
    unsigned int v84;  // edi\n
    unsigned int v85;  // ftop\n
    unsigned int v86;  // ftop\n
    unsigned int v87;  // ftop\n
    unsigned int v88;  // ftop\n
    unsigned int v89;  // ftop\n
    unsigned int v90;  // fpround\n
    unsigned int v91;  // ftop\n
    unsigned int v92;  // ftop\n
    unsigned int v94;  // edi\n
    unsigned int v95;  // ftop\n
    unsigned int v96;  // ftop\n
    unsigned int v97;  // ftop\n
    unsigned int v98;  // ftop\n
    unsigned int v99;  // ftop\n
    unsigned int v100;  // fpround\n
    unsigned int v101;  // ftop\n
\n
    v19 = a0;\n
    [D] PutI(72:F64x8)[t38,0] = t41\n
    [D] PutI(136:I8x8)[t38,0] = 0x01\n
    v22 = v20 - 1 - 1;\n
    [D] PutI(72:F64x8)[t48,0] = t51\n
    [D] PutI(136:I8x8)[t48,0] = 0x01\n
    if (!v19->field_4)\n
    {\n
        [D] PutI(72:F64x8)[t11,1] = t12\n
        [D] PutI(136:I8x8)[t11,1] = 0x01\n
        [D] PutI(136:I8x8)[t11,0] = 0x00\n
        [D] PutI(72:F64x8)[t23,0] = t24\n
        [D] PutI(136:I8x8)[t23,0] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    }\n
    [D] PutI(72:F64x8)[t5,1] = t6\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    v23 = v22 + 1;\n
    [D] PutI(72:F64x8)[t17,0] = t18\n
    [D] PutI(136:I8x8)[t17,0] = 0x01\n
    [D] PutI(136:I8x8)[t17,0] = 0x00\n
    v24 = v23 + 1;\n
    v25 = v19->field_8;\n
    v26 = v24 - 1;\n
    [D] PutI(72:F64x8)[t32,0] = t35\n
    [D] PutI(136:I8x8)[t32,0] = 0x01\n
    v40 = v26 - 1;\n
    [D] PutI(72:F64x8)[t42,0] = t45\n
    [D] PutI(136:I8x8)[t42,0] = 0x01\n
    if (v25->field_0)\n
    {\n
        [D] PutI(72:F64x8)[t23,1] = t24\n
        [D] PutI(136:I8x8)[t23,1] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        v27 = v40 + 1;\n
        [D] PutI(72:F64x8)[t35,0] = t36\n
        [D] PutI(136:I8x8)[t35,0] = 0x01\n
        [D] PutI(136:I8x8)[t35,0] = 0x00\n
        v29 = *(v18);\n
        v30 = 0;\n
        v32 = v25->field_8;\n
        v17 = (v29 <= 0 ? 0 : -(v29));\n
        v33 = v27 + 1 - 1;\n
        [D] PutI(72:F64x8)[t67,0] = t70\n
        [D] PutI(136:I8x8)[t67,0] = 0x01\n
        [D] PutI(72:F64x8)[t80,0] = t81\n
        [D] PutI(136:I8x8)[t80,0] = 0x01\n
        v34 = v33 - 1;\n
        [D] PutI(72:F64x8)[t91,0] = t94\n
        [D] PutI(136:I8x8)[t91,0] = 0x01\n
        [D] PutI(72:F64x8)[t104,0] = t108\n
        [D] PutI(136:I8x8)[t104,0] = 0x01\n
        [D] PutI(72:F64x8)[t104,1] = t101\n
        [D] PutI(136:I8x8)[t104,1] = 0x01\n
        [D] PutI(72:F64x8)[t135,1] = t136\n
        [D] PutI(136:I8x8)[t135,1] = 0x01\n
        [D] PutI(136:I8x8)[t135,0] = 0x00\n
        v35 = v34 - 0;\n
        [D] PutI(72:F64x8)[t147,0] = t150\n
        [D] PutI(136:I8x8)[t147,0] = 0x01\n
        v36 = v35 - 1;\n
        [D] PutI(72:F64x8)[t164,0] = t167\n
        [D] PutI(136:I8x8)[t164,0] = 0x01\n
        [D] PutI(72:F64x8)[t173,0] = t174\n
        [D] PutI(136:I8x8)[t173,0] = 0x01\n
        [D] PutI(72:F64x8)[t193,0] = t197\n
        [D] PutI(136:I8x8)[t193,0] = 0x01\n
        [D] PutI(72:F64x8)[t193,2] = t190\n
        [D] PutI(136:I8x8)[t193,2] = 0x01\n
        [D] PutI(72:F64x8)[t208,0] = t209\n
        [D] PutI(136:I8x8)[t208,0] = 0x01\n
        [D] PutI(72:F64x8)[t225,1] = t226\n
        [D] PutI(136:I8x8)[t225,1] = 0x01\n
        [D] PutI(136:I8x8)[t225,0] = 0x00\n
        v37 = v36 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t124,0] ? [D] GetI(72:F64x8)[t124,0] : nan), ([D] GetI(136:I8x8)[t124,1] ? [D] GetI(72:F64x8)[t124,1] : nan)) & 1) == 1)\n
        {\n
            [D] PutI(72:F64x8)[t5,1] = t6\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v39 = 0;\n
            v40 = v37 + 1 - 1;\n
            [D] PutI(72:F64x8)[t17,0] = t20\n
            [D] PutI(136:I8x8)[t17,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,0] = t34\n
            [D] PutI(136:I8x8)[t30,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,1] = t27\n
            [D] PutI(136:I8x8)[t30,1] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t7,1] = t8\n
                [D] PutI(136:I8x8)[t7,1] = 0x01\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v41 = v40 + 1;\n
                v14 = *((v32 + v39 * 4));\n
                [D] PutI(72:F64x8)[t34,0] = t37\n
                [D] PutI(136:I8x8)[t34,0] = 0x01\n
                [D] PutI(72:F64x8)[t45,0] = t46\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                v43 = 2147483647;\n
                v44 = v41 - 1 - 1;\n
                [D] PutI(72:F64x8)[t59,0] = t62\n
                [D] PutI(136:I8x8)[t59,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,0] = t76\n
                [D] PutI(136:I8x8)[t72,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,1] = t69\n
                [D] PutI(136:I8x8)[t72,1] = 0x01\n
                [D] PutI(72:F64x8)[t103,1] = t104\n
                [D] PutI(136:I8x8)[t103,1] = 0x01\n
                [D] PutI(136:I8x8)[t103,0] = 0x00\n
                v45 = v44 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
                {\n
                    v43 = 0x80000000;\n
                    v46 = v45 - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v47 = v46 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v47 = v46 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v45 = v47 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v3 = [D] x86g_create_fpucw(fpround<4>);\n
                        v7 = v3 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v13 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v48 = v45 + 1;\n
                        }\n
                        else\n
                        {\n
                            v13 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v48 = v45 + 1;\n
                        }\n
                        v49 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-66, size=2, endness=Iend_LE)));\n
                        v43 = v13;\n
                        v45 = v48 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t10,0] = t11\n
                [D] PutI(136:I8x8)[t10,0] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v50 = v45 + 1;\n
                *((v32 + v39 * 4)) = v43;\n
                v39 += 1;\n
                v40 = v50 - 1;\n
                [D] PutI(72:F64x8)[t27,0] = t30\n
                [D] PutI(136:I8x8)[t27,0] = 0x01\n
                [D] PutI(72:F64x8)[t40,0] = t44\n
                [D] PutI(136:I8x8)[t40,0] = 0x01\n
                [D] PutI(72:F64x8)[t40,1] = t37\n
                [D] PutI(136:I8x8)[t40,1] = 0x01\n
            } while (v39 < v25->field_0);\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t0,0] = t1\n
            [D] PutI(136:I8x8)[t0,0] = 0x01\n
            [D] PutI(136:I8x8)[t0,0] = 0x00\n
            v40 = v37 - 0;\n
            [D] PutI(72:F64x8)[t12,0] = t15\n
            [D] PutI(136:I8x8)[t12,0] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t7,0] = t8\n
                [D] PutI(136:I8x8)[t7,0] = 0x01\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v51 = v40 + 1;\n
                v16 = *((v32 + v30 * 4));\n
                [D] PutI(72:F64x8)[t34,0] = t37\n
                [D] PutI(136:I8x8)[t34,0] = 0x01\n
                [D] PutI(72:F64x8)[t45,0] = t46\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                v53 = 2147483647;\n
                v54 = v51 - 1 - 1;\n
                [D] PutI(72:F64x8)[t59,0] = t62\n
                [D] PutI(136:I8x8)[t59,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,0] = t76\n
                [D] PutI(136:I8x8)[t72,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,1] = t69\n
                [D] PutI(136:I8x8)[t72,1] = 0x01\n
                [D] PutI(72:F64x8)[t103,1] = t104\n
                [D] PutI(136:I8x8)[t103,1] = 0x01\n
                [D] PutI(136:I8x8)[t103,0] = 0x00\n
                v55 = v54 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
                {\n
                    v53 = 0x80000000;\n
                    v56 = v55 - 1;\n
                    if (![D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v57 = v56 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v57 = v56 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v55 = v57 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v2 = [D] x86g_create_fpucw(fpround<4>);\n
                        v6 = v2 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v15 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v58 = v55 + 1;\n
                        }\n
                        else\n
                        {\n
                            v15 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v58 = v55 + 1;\n
                        }\n
                        v59 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-68, size=2, endness=Iend_LE)));\n
                        v53 = v15;\n
                        v55 = v58 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t8,0] = t9\n
                [D] PutI(136:I8x8)[t8,0] = 0x01\n
                [D] PutI(136:I8x8)[t8,0] = 0x00\n
                v60 = v55 + 1;\n
                *((v32 + v30 * 4)) = v53;\n
                v30 += 1;\n
                v40 = v60 - 1;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
            } while (v30 < v25->field_0);\n
        }\n
    }\n
    [D] PutI(72:F64x8)[t5,1] = t6\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    v61 = v40 + 1;\n
    [D] PutI(72:F64x8)[t17,0] = t18\n
    [D] PutI(136:I8x8)[t17,0] = 0x01\n
    [D] PutI(136:I8x8)[t17,0] = 0x00\n
    v63 = v19->field_c;\n
    v64 = v61 + 1 - 1;\n
    [D] PutI(72:F64x8)[t32,0] = t35\n
    [D] PutI(136:I8x8)[t32,0] = 0x01\n
    v65 = v64 - 1;\n
    [D] PutI(72:F64x8)[t42,0] = t45\n
    [D] PutI(136:I8x8)[t42,0] = 0x01\n
    if (v63->field_0)\n
    {\n
        [D] PutI(72:F64x8)[t21,1] = t22\n
        [D] PutI(136:I8x8)[t21,1] = 0x01\n
        [D] PutI(136:I8x8)[t21,0] = 0x00\n
        v66 = v65 + 1;\n
        [D] PutI(72:F64x8)[t33,0] = t34\n
        [D] PutI(136:I8x8)[t33,0] = 0x01\n
        [D] PutI(136:I8x8)[t33,0] = 0x00\n
        v67 = v66 + 1;\n
        v68 = *(v18);\n
        v70 = v63->field_8;\n
        v12 = v68 >> 31 & v68;\n
        v71 = v67 - 1;\n
        [D] PutI(72:F64x8)[t69,0] = t72\n
        [D] PutI(136:I8x8)[t69,0] = 0x01\n
        [D] PutI(72:F64x8)[t82,0] = t83\n
        [D] PutI(136:I8x8)[t82,0] = 0x01\n
        v72 = v71 - 1;\n
        [D] PutI(72:F64x8)[t93,0] = t96\n
        [D] PutI(136:I8x8)[t93,0] = 0x01\n
        [D] PutI(72:F64x8)[t106,0] = t110\n
        [D] PutI(136:I8x8)[t106,0] = 0x01\n
        [D] PutI(72:F64x8)[t106,1] = t103\n
        [D] PutI(136:I8x8)[t106,1] = 0x01\n
        [D] PutI(72:F64x8)[t137,1] = t138\n
        [D] PutI(136:I8x8)[t137,1] = 0x01\n
        [D] PutI(136:I8x8)[t137,0] = 0x00\n
        v73 = v72 - 0;\n
        [D] PutI(72:F64x8)[t149,0] = t152\n
        [D] PutI(136:I8x8)[t149,0] = 0x01\n
        v74 = v73 - 1;\n
        [D] PutI(72:F64x8)[t166,0] = t169\n
        [D] PutI(136:I8x8)[t166,0] = 0x01\n
        [D] PutI(72:F64x8)[t175,0] = t176\n
        [D] PutI(136:I8x8)[t175,0] = 0x01\n
        [D] PutI(72:F64x8)[t195,0] = t199\n
        [D] PutI(136:I8x8)[t195,0] = 0x01\n
        [D] PutI(72:F64x8)[t195,2] = t192\n
        [D] PutI(136:I8x8)[t195,2] = 0x01\n
        [D] PutI(72:F64x8)[t210,0] = t211\n
        [D] PutI(136:I8x8)[t210,0] = 0x01\n
        [D] PutI(72:F64x8)[t227,1] = t228\n
        [D] PutI(136:I8x8)[t227,1] = 0x01\n
        [D] PutI(136:I8x8)[t227,0] = 0x00\n
        v75 = v74 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan), ([D] GetI(136:I8x8)[t126,1] ? [D] GetI(72:F64x8)[t126,1] : nan)) & 1) != 1)\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
            [D] PutI(136:I8x8)[t3,0] = 0x00\n
            v80 = 0;\n
            v81 = v75 + 1 - 1;\n
            [D] PutI(72:F64x8)[t15,0] = t18\n
            [D] PutI(136:I8x8)[t15,0] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t7,0] = t8\n
                [D] PutI(136:I8x8)[t7,0] = 0x01\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v92 = v81 + 1;\n
                v11 = v70[v80];\n
                [D] PutI(72:F64x8)[t34,0] = t37\n
                [D] PutI(136:I8x8)[t34,0] = 0x01\n
                [D] PutI(72:F64x8)[t45,0] = t46\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                v94 = 2147483647;\n
                v95 = v92 - 1 - 1;\n
                [D] PutI(72:F64x8)[t59,0] = t62\n
                [D] PutI(136:I8x8)[t59,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,0] = t76\n
                [D] PutI(136:I8x8)[t72,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,1] = t69\n
                [D] PutI(136:I8x8)[t72,1] = 0x01\n
                [D] PutI(72:F64x8)[t103,1] = t104\n
                [D] PutI(136:I8x8)[t103,1] = 0x01\n
                [D] PutI(136:I8x8)[t103,0] = 0x00\n
                v96 = v95 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
                {\n
                    v94 = 0x80000000;\n
                    v97 = v96 - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v98 = v97 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v98 = v97 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v96 = v98 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v0 = [D] x86g_create_fpucw(fpround<4>);\n
                        v4 = v0 | 0xc00;\n
                        if (![D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v10 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v99 = v96 + 1;\n
                        }\n
                        else\n
                        {\n
                            v10 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v99 = v96 + 1;\n
                        }\n
                        v100 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-72, size=2, endness=Iend_LE)));\n
                        v94 = v10;\n
                        v96 = v99 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t8,0] = t9\n
                [D] PutI(136:I8x8)[t8,0] = 0x01\n
                [D] PutI(136:I8x8)[t8,0] = 0x00\n
                v101 = v96 + 1;\n
                v70[v80] = v94;\n
                v80 += 1;\n
                v81 = v101 - 1;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
            } while (v80 < v63->field_0);\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t5,1] = t6\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v77 = 0;\n
            v78 = v75 + 1 - 1;\n
            [D] PutI(72:F64x8)[t17,0] = t20\n
            [D] PutI(136:I8x8)[t17,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,0] = t34\n
            [D] PutI(136:I8x8)[t30,0] = 0x01\n
            [D] PutI(72:F64x8)[t30,1] = t27\n
            [D] PutI(136:I8x8)[t30,1] = 0x01\n
            do\n
            {\n
                [D] PutI(72:F64x8)[t7,1] = t8\n
                [D] PutI(136:I8x8)[t7,1] = 0x01\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v82 = v78 + 1;\n
                v9 = v70[v77];\n
                [D] PutI(72:F64x8)[t34,0] = t37\n
                [D] PutI(136:I8x8)[t34,0] = 0x01\n
                [D] PutI(72:F64x8)[t45,0] = t46\n
                [D] PutI(136:I8x8)[t45,0] = 0x01\n
                v84 = 2147483647;\n
                v85 = v82 - 1 - 1;\n
                [D] PutI(72:F64x8)[t59,0] = t62\n
                [D] PutI(136:I8x8)[t59,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,0] = t76\n
                [D] PutI(136:I8x8)[t72,0] = 0x01\n
                [D] PutI(72:F64x8)[t72,1] = t69\n
                [D] PutI(136:I8x8)[t72,1] = 0x01\n
                [D] PutI(72:F64x8)[t103,1] = t104\n
                [D] PutI(136:I8x8)[t103,1] = 0x01\n
                [D] PutI(136:I8x8)[t103,0] = 0x00\n
                v86 = v85 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
                {\n
                    v84 = 0x80000000;\n
                    v87 = v86 - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v88 = v87 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v88 = v87 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                    v86 = v88 + 1;\n
                    if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                    {\n
                        v1 = [D] x86g_create_fpucw(fpround<4>);\n
                        v5 = v1 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v8 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v89 = v86 + 1;\n
                        }\n
                        else\n
                        {\n
                            v8 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            v89 = v86 + 1;\n
                        }\n
                        v90 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-70, size=2, endness=Iend_LE)));\n
                        v84 = v8;\n
                        v86 = v89 - 1;\n
                        [D] PutI(72:F64x8)[t15,0] = t18\n
                        [D] PutI(136:I8x8)[t15,0] = 0x01\n
                    }\n
                }\n
                [D] PutI(72:F64x8)[t10,0] = t11\n
                [D] PutI(136:I8x8)[t10,0] = 0x01\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v91 = v86 + 1;\n
                v70[v77] = v84;\n
                v77 += 1;\n
                v78 = v91 - 1;\n
                [D] PutI(72:F64x8)[t27,0] = t30\n
                [D] PutI(136:I8x8)[t27,0] = 0x01\n
                [D] PutI(72:F64x8)[t40,0] = t44\n
                [D] PutI(136:I8x8)[t40,0] = 0x01\n
                [D] PutI(72:F64x8)[t40,1] = t37\n
                [D] PutI(136:I8x8)[t40,1] = 0x01\n
            } while (v77 < v63->field_0);\n
        }\n
    }\n
}\n
", "4228326:sub_4084e6": null, "4228451:sub_408563": null, "4228652:sub_40862c": null, "4228773:sub_4086a5": null, "4228899:sub_408723": null, "4228912:_ZNK5FxPan5applyER11AudioStream4Gain": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int FxPan::apply const()\n
{\n
    unsigned short v0;  // [bp-0x28]\n
    unsigned short v1;  // [bp-0x26]\n
    unsigned short v2;  // [bp-0x24]\n
    unsigned short v3;  // [bp-0x22]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    char v10;  // [bp+0x8]\n
    char v11;  // [bp+0xc]\n
    struct_0 *v12;  // ecx\n
    unsigned int v13;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int *v18;  // edx\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // ftop\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v41;  // edi\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
\n
    v12 = *(&v10);\n
    [D] PutI(72:F64x8)[t30,0] = t33\n
    [D] PutI(136:I8x8)[t30,0] = 0x01\n
    v15 = v13 - 1 - 1;\n
    [D] PutI(72:F64x8)[t40,0] = t43\n
    [D] PutI(136:I8x8)[t40,0] = 0x01\n
    if (!v12->field_0)\n
    {\n
        [D] PutI(72:F64x8)[t9,1] = t10\n
        [D] PutI(136:I8x8)[t9,1] = 0x01\n
        [D] PutI(136:I8x8)[t9,0] = 0x00\n
        [D] PutI(72:F64x8)[t21,0] = t22\n
        [D] PutI(136:I8x8)[t21,0] = 0x01\n
        [D] PutI(136:I8x8)[t21,0] = 0x00\n
        return;\n
    }\n
    [D] PutI(72:F64x8)[t11,1] = t12\n
    [D] PutI(136:I8x8)[t11,1] = 0x01\n
    [D] PutI(136:I8x8)[t11,0] = 0x00\n
    v16 = v15 + 1;\n
    [D] PutI(72:F64x8)[t23,0] = t24\n
    [D] PutI(136:I8x8)[t23,0] = 0x01\n
    [D] PutI(136:I8x8)[t23,0] = 0x00\n
    v17 = v16 + 1;\n
    v18 = v12->field_8;\n
    v8 = *(&v11);\n
    v19 = v17 - 1;\n
    [D] PutI(72:F64x8)[t46,0] = t49\n
    [D] PutI(136:I8x8)[t46,0] = 0x01\n
    [D] PutI(72:F64x8)[t59,0] = t60\n
    [D] PutI(136:I8x8)[t59,0] = 0x01\n
    v20 = v19 - 1;\n
    [D] PutI(72:F64x8)[t70,0] = t73\n
    [D] PutI(136:I8x8)[t70,0] = 0x01\n
    [D] PutI(72:F64x8)[t83,0] = t87\n
    [D] PutI(136:I8x8)[t83,0] = 0x01\n
    [D] PutI(72:F64x8)[t83,1] = t80\n
    [D] PutI(136:I8x8)[t83,1] = 0x01\n
    [D] PutI(72:F64x8)[t114,1] = t115\n
    [D] PutI(136:I8x8)[t114,1] = 0x01\n
    [D] PutI(136:I8x8)[t114,0] = 0x00\n
    v21 = v20 - 0;\n
    [D] PutI(72:F64x8)[t126,0] = t129\n
    [D] PutI(136:I8x8)[t126,0] = 0x01\n
    v22 = v21 - 1;\n
    [D] PutI(72:F64x8)[t143,0] = t146\n
    [D] PutI(136:I8x8)[t143,0] = 0x01\n
    [D] PutI(72:F64x8)[t152,0] = t153\n
    [D] PutI(136:I8x8)[t152,0] = 0x01\n
    [D] PutI(72:F64x8)[t172,0] = t176\n
    [D] PutI(136:I8x8)[t172,0] = 0x01\n
    [D] PutI(72:F64x8)[t172,2] = t169\n
    [D] PutI(136:I8x8)[t172,2] = 0x01\n
    [D] PutI(72:F64x8)[t187,0] = t188\n
    [D] PutI(136:I8x8)[t187,0] = 0x01\n
    [D] PutI(72:F64x8)[t204,1] = t205\n
    [D] PutI(136:I8x8)[t204,1] = 0x01\n
    [D] PutI(136:I8x8)[t204,0] = 0x00\n
    v23 = v22 + 1;\n
    if ((CmpF(([D] GetI(136:I8x8)[t103,0] ? [D] GetI(72:F64x8)[t103,0] : nan), ([D] GetI(136:I8x8)[t103,1] ? [D] GetI(72:F64x8)[t103,1] : nan)) & 1) != 1)\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t4\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        [D] PutI(136:I8x8)[t3,0] = 0x00\n
        v28 = 0;\n
        v29 = v23 + 1 - 1;\n
        [D] PutI(72:F64x8)[t15,0] = t18\n
        [D] PutI(136:I8x8)[t15,0] = 0x01\n
        do\n
        {\n
            [D] PutI(72:F64x8)[t7,0] = t8\n
            [D] PutI(136:I8x8)[t7,0] = 0x01\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
            v39 = v29 + 1;\n
            v7 = v18[v28];\n
            [D] PutI(72:F64x8)[t34,0] = t37\n
            [D] PutI(136:I8x8)[t34,0] = 0x01\n
            [D] PutI(72:F64x8)[t45,0] = t46\n
            [D] PutI(136:I8x8)[t45,0] = 0x01\n
            v41 = 2147483647;\n
            v42 = v39 - 1 - 1;\n
            [D] PutI(72:F64x8)[t59,0] = t62\n
            [D] PutI(136:I8x8)[t59,0] = 0x01\n
            [D] PutI(72:F64x8)[t72,0] = t76\n
            [D] PutI(136:I8x8)[t72,0] = 0x01\n
            [D] PutI(72:F64x8)[t72,1] = t69\n
            [D] PutI(136:I8x8)[t72,1] = 0x01\n
            [D] PutI(72:F64x8)[t103,1] = t104\n
            [D] PutI(136:I8x8)[t103,1] = 0x01\n
            [D] PutI(136:I8x8)[t103,0] = 0x00\n
            v43 = v42 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
            {\n
                v41 = 0x80000000;\n
                v44 = v43 - 1;\n
                if (![D] GetI(136:I8x8)[t36,0])\n
                {\n
                    v45 = v44 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v45 = v44 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v43 = v45 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v0 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-40, size=2, endness=Iend_LE)))));\n
                    v2 = v0 | 0xc00;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v6 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v46 = v43 + 1;\n
                    }\n
                    else\n
                    {\n
                        v6 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v46 = v43 + 1;\n
                    }\n
                    v41 = v6;\n
                    v43 = v46 - 1;\n
                    [D] PutI(72:F64x8)[t15,0] = t18\n
                    [D] PutI(136:I8x8)[t15,0] = 0x01\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t8,0] = t9\n
            [D] PutI(136:I8x8)[t8,0] = 0x01\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v47 = v43 + 1;\n
            v18[v28] = v41;\n
            v28 += 1;\n
            v29 = v47 - 1;\n
            [D] PutI(72:F64x8)[t25,0] = t28\n
            [D] PutI(136:I8x8)[t25,0] = 0x01\n
        } while (v28 < v12->field_0);\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t5,1] = t6\n
        [D] PutI(136:I8x8)[t5,1] = 0x01\n
        [D] PutI(136:I8x8)[t5,0] = 0x00\n
        v25 = 0;\n
        v26 = v23 + 1 - 1;\n
        [D] PutI(72:F64x8)[t17,0] = t20\n
        [D] PutI(136:I8x8)[t17,0] = 0x01\n
        [D] PutI(72:F64x8)[t30,0] = t34\n
        [D] PutI(136:I8x8)[t30,0] = 0x01\n
        [D] PutI(72:F64x8)[t30,1] = t27\n
        [D] PutI(136:I8x8)[t30,1] = 0x01\n
        do\n
        {\n
            [D] PutI(72:F64x8)[t7,1] = t8\n
            [D] PutI(136:I8x8)[t7,1] = 0x01\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
            v30 = v26 + 1;\n
            v5 = v18[v25];\n
            [D] PutI(72:F64x8)[t34,0] = t37\n
            [D] PutI(136:I8x8)[t34,0] = 0x01\n
            [D] PutI(72:F64x8)[t45,0] = t46\n
            [D] PutI(136:I8x8)[t45,0] = 0x01\n
            v32 = 2147483647;\n
            v33 = v30 - 1 - 1;\n
            [D] PutI(72:F64x8)[t59,0] = t62\n
            [D] PutI(136:I8x8)[t59,0] = 0x01\n
            [D] PutI(72:F64x8)[t72,0] = t76\n
            [D] PutI(136:I8x8)[t72,0] = 0x01\n
            [D] PutI(72:F64x8)[t72,1] = t69\n
            [D] PutI(136:I8x8)[t72,1] = 0x01\n
            [D] PutI(72:F64x8)[t103,1] = t104\n
            [D] PutI(136:I8x8)[t103,1] = 0x01\n
            [D] PutI(136:I8x8)[t103,0] = 0x00\n
            v34 = v33 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan), ([D] GetI(136:I8x8)[t92,1] ? [D] GetI(72:F64x8)[t92,1] : nan)) & 1) == 1)\n
            {\n
                v32 = 0x80000000;\n
                v35 = v34 - 1;\n
                if ([D] GetI(136:I8x8)[t36,0])\n
                {\n
                    v36 = v35 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v36 = v35 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v34 = v36 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v1 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-38, size=2, endness=Iend_LE)))));\n
                    v3 = v1 | 0xc00;\n
                    if (![D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v4 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v37 = v34 + 1;\n
                    }\n
                    else\n
                    {\n
                        v4 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v37 = v34 + 1;\n
                    }\n
                    v32 = v4;\n
                    v34 = v37 - 1;\n
                    [D] PutI(72:F64x8)[t15,0] = t18\n
                    [D] PutI(136:I8x8)[t15,0] = 0x01\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t10,0] = t11\n
            [D] PutI(136:I8x8)[t10,0] = 0x01\n
            [D] PutI(136:I8x8)[t10,0] = 0x00\n
            v38 = v34 + 1;\n
            v18[v25] = v32;\n
            v25 += 1;\n
            v26 = v38 - 1;\n
            [D] PutI(72:F64x8)[t27,0] = t30\n
            [D] PutI(136:I8x8)[t27,0] = 0x01\n
            [D] PutI(72:F64x8)[t40,0] = t44\n
            [D] PutI(136:I8x8)[t40,0] = 0x01\n
            [D] PutI(72:F64x8)[t40,1] = t37\n
            [D] PutI(136:I8x8)[t40,1] = 0x01\n
        } while (v25 < v12->field_0);\n
    }\n
}\n
", "4229013:sub_408795": null, "4229141:sub_408815": null, "4229266:sub_408892": null, "4229280:_ZN8FxReverbC1Ej": "int FxReverb::__ctor__(unsigned int *v0, unsigned int a0)\n
{\n
    *(v0) = a0;\n
    return a0;\n
}\n
", "4229298:sub_4088b2": null, "4229312:_ZNK8FxReverb5applyER10AudioTrack": "typedef struct struct_3 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    struct struct_2 *field_c;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int FxReverb::apply const(unsigned int *v13, struct_3 *a0)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned short v0;  // [bp-0x40]\n
    unsigned short v1;  // [bp-0x3e]\n
    struct_0 *v2;  // [bp-0x3c]\n
    struct_2 *v3;  // [bp-0x38], Other Possible Types: unsigned int\n
    struct_2 *v4;  // [bp-0x34]\n
    unsigned short v5;  // [bp-0x30]\n
    unsigned short v6;  // [bp-0x2e]\n
    unsigned int v7;  // [bp-0x2c]\n
    unsigned int *v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x24]\n
    unsigned int v10;  // [bp-0x20]\n
    unsigned int v11;  // [bp-0x1c]\n
    unsigned int v12;  // [bp-0x18]\n
    unsigned int v15;  // ecx\n
    struct_0 *v16;  // edi\n
    struct_2 *v17;  // eax\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // fpround\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // eax\n
    struct_2 *v32;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v33;  // ecx, Other Possible Types: unsigned int\n
    struct_3 *v34;  // ecx\n
    unsigned int *v35;  // esi\n
    struct_2 *v36;  // edi\n
    struct_0 *v38;  // eax\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // fpround\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // ebx\n
    unsigned int v53;  // eax\n
    struct_0 *v54;  // esi, Other Possible Types: unsigned int\n
    unsigned int v55;  // ftop\n
    struct_2 *v56;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v57;  // eax\n
\n
    v15 = ([D] x86g_calculate_condition(0x1<32>, 0x24<32>, 0x4<32>, Load(addr=Load(addr=stack_base+4, size=4, endness=Iend_LE), size=4, endness=Iend_LE), 0x0<32>) ? -1 : 4 * *(v13));\n
    v16 = a0->field_8;\n
    v17 = operator new[](v15);\n
    cgc_memset(v17, 0, *(v13) * 4);\n
    v2 = v16;\n
    tmp_3 = v16->field_0;\n
    v32 = v17;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    if (tmp_3)\n
    {\n
        v8 = &v2->field_8->field_0;\n
        v33 = 0;\n
        v4 = v17;\n
        do\n
        {\n
            v3 = (0 CONCAT v33) /m *(v13) >> 32;\n
            v12 = *((v32 + v3 * 4));\n
            v19 = ftop<4> - 1;\n
            if (![D] GetI(136:I8x8)[t32,0])\n
            {\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if (![D] GetI(136:I8x8)[t32,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v21 = 2147483647;\n
            v22 = v20 - 1;\n
            if (![D] GetI(136:I8x8)[t32,0])\n
            {\n
                v23 = v22 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v23 = v22 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t5,0] = t9\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
            [D] PutI(72:F64x8)[t5,1] = t2\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(72:F64x8)[t36,1] = t37\n
            [D] PutI(136:I8x8)[t36,1] = 0x01\n
            [D] PutI(136:I8x8)[t36,0] = 0x00\n
            v24 = v23 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
            {\n
                v21 = 0x80000000;\n
                v25 = v24 - 1;\n
                if ([D] GetI(136:I8x8)[t32,0])\n
                {\n
                    v26 = v25 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v26 = v25 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v24 = v26 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v1 = [D] x86g_create_fpucw(fpround<4>);\n
                    v6 = v1 | 0xc00;\n
                    if (![D] GetI(136:I8x8)[t32,0])\n
                    {\n
                        v11 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v27 = v24 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v27 = v24 + 1;\n
                    }\n
                    v28 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-62, size=2, endness=Iend_LE)));\n
                    v21 = v11;\n
                    v24 = v27 - 1;\n
                    [D] PutI(72:F64x8)[t15,0] = t18\n
                    [D] PutI(136:I8x8)[t15,0] = 0x01\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t31,0] = t32\n
            [D] PutI(136:I8x8)[t31,0] = 0x01\n
            [D] PutI(136:I8x8)[t31,0] = 0x00\n
            v55 = v24 + 1;\n
            v29 = v8;\n
            v30 = *((v29 + v33 * 4));\n
            v31 = ([D] x86g_calculate_condition(0x0<32>, 0x3<32>, eax<4>, esi<4>, 0x0<32>) ? v21 + v30 >> 31 ^ 0x80000000 : v21 + v30);\n
            v32 = v4;\n
            *((v32 + v3 * 4)) = v31;\n
            *((v29 + v33 * 4)) = v31;\n
            v33 += 1;\n
        } while (v33 < v2->field_0);\n
    }\n
    v57 = operator delete(v32);\n
    v34 = a0;\n
    if (!v34->field_4)\n
        return v57;\n
    v35 = v13;\n
    v36 = v34->field_c;\n
    v38 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, 0x4<32>, Load(addr=esi<4>, size=4, endness=Iend_LE), 0x0<32>) ? -1 : 4 * *(v35)));\n
    v54 = v38;\n
    cgc_memset(v38, 0, *(v35) * 4);\n
    v3 = v36;\n
    if (v36->field_0)\n
    {\n
        v4 = v3->field_8;\n
        v56 = 0;\n
        v2 = v38;\n
        do\n
        {\n
            v40 = (0 CONCAT v56) /m *(v13) >> 32;\n
            v10 = *((v54 + v40 * 4));\n
            v41 = v55 - 1;\n
            if (![D] GetI(136:I8x8)[t32,0])\n
            {\n
                v42 = v41 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v42 = v41 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t32,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v43 = 2147483647;\n
            v44 = v42 - 1;\n
            if (![D] GetI(136:I8x8)[t32,0])\n
            {\n
                v45 = v44 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v45 = v44 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t5,0] = t9\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
            [D] PutI(72:F64x8)[t5,1] = t2\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(72:F64x8)[t36,1] = t37\n
            [D] PutI(136:I8x8)[t36,1] = 0x01\n
            [D] PutI(136:I8x8)[t36,0] = 0x00\n
            v46 = v45 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
            {\n
                v43 = 0x80000000;\n
                v47 = v46 - 1;\n
                if ([D] GetI(136:I8x8)[t32,0])\n
                {\n
                    v48 = v47 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v48 = v47 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(136:I8x8)[t5,0] = 0x00\n
                v46 = v48 + 1;\n
                if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
                {\n
                    v0 = [D] x86g_create_fpucw(fpround<4>);\n
                    v5 = v0 | 0xc00;\n
                    if ([D] GetI(136:I8x8)[t32,0])\n
                    {\n
                        v9 = [D] GetI(72:F64x8)[t7,0];\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v49 = v46 + 1;\n
                    }\n
                    else\n
                    {\n
                        v9 = nan;\n
                        [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        v49 = v46 + 1;\n
                    }\n
                    v50 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-64, size=2, endness=Iend_LE)));\n
                    v43 = v9;\n
                    v46 = v49 - 1;\n
                    [D] PutI(72:F64x8)[t15,0] = t18\n
                    [D] PutI(136:I8x8)[t15,0] = 0x01\n
                }\n
            }\n
            [D] PutI(72:F64x8)[t30,0] = t31\n
            [D] PutI(136:I8x8)[t30,0] = 0x01\n
            [D] PutI(136:I8x8)[t30,0] = 0x00\n
            v55 = v46 + 1;\n
            v51 = v4;\n
            v52 = *((v51 + v56 * 4));\n
            v53 = ([D] x86g_calculate_condition(0x0<32>, 0x3<32>, eax<4>, ebx<4>, 0x0<32>) ? v43 + v52 >> 31 ^ 0x80000000 : v43 + v52);\n
            v54 = v2;\n
            *((v54 + v40 * 4)) = v53;\n
            *((v51 + v56 * 4)) = v53;\n
            v56 += 1;\n
        } while (v56 < v3->field_0);\n
    }\n
    v57 = operator delete(v54);\n
    return v57;\n
}\n
", "4229436:sub_40893c": null, "4229710:sub_408a4e": null, "4229883:sub_408afb": null, "4229888:_ZNK8FxReverb5applyER11AudioStream": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int FxReverb::apply const(unsigned int *v7, struct_0 *a0)\n
{\n
    unsigned short v0;  // [bp-0x2e]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned short v2;  // [bp-0x26]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int *v8;  // esi\n
    unsigned int *v10;  // eax\n
    unsigned int *v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // edx\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // eax\n
    unsigned int *v27;  // ecx, Other Possible Types: unsigned int\n
\n
    v8 = v7;\n
    v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, 0x4<32>, Load(addr=esi<4>, size=4, endness=Iend_LE), 0x0<32>) ? -1 : 4 * *(v8)));\n
    v11 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_memset(v10, 0, *(v8) * 4);\n
    if (!a0->field_0)\n
        return operator delete(v10);\n
    v4 = &a0->field_8->field_0;\n
    v27 = 0;\n
    v3 = v10;\n
    v12 = v4;\n
    do\n
    {\n
        v13 = (0 CONCAT v27) /m *(v7) >> 32;\n
        v6 = *((v11 + v13 * 4));\n
        v15 = ftop<4> - 1;\n
        if (![D] GetI(136:I8x8)[t31,0])\n
        {\n
            v16 = v15 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v16 = v15 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if (![D] GetI(136:I8x8)[t31,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t4\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v17 = 2147483647;\n
        v18 = v16 - 1;\n
        if (![D] GetI(136:I8x8)[t31,0])\n
        {\n
            v19 = v18 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v19 = v18 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t5,0] = t9\n
        [D] PutI(136:I8x8)[t5,0] = 0x01\n
        [D] PutI(72:F64x8)[t5,1] = t2\n
        [D] PutI(136:I8x8)[t5,1] = 0x01\n
        [D] PutI(72:F64x8)[t36,1] = t37\n
        [D] PutI(136:I8x8)[t36,1] = 0x01\n
        [D] PutI(136:I8x8)[t36,0] = 0x00\n
        v20 = v19 + 1;\n
        if ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 1) == 1)\n
        {\n
            v17 = 0x80000000;\n
            v21 = v20 - 1;\n
            if ([D] GetI(136:I8x8)[t31,0])\n
            {\n
                v22 = v21 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v22 = v21 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(136:I8x8)[t5,0] = 0x00\n
            v20 = v22 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 1) == 1)\n
            {\n
                v0 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-46, size=2, endness=Iend_LE)))));\n
                v2 = v0 | 0xc00;\n
                if ([D] GetI(136:I8x8)[t31,0])\n
                {\n
                    v5 = [D] GetI(72:F64x8)[t7,0];\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v23 = v20 + 1;\n
                }\n
                else\n
                {\n
                    v5 = nan;\n
                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                    v23 = v20 + 1;\n
                }\n
                v17 = v5;\n
                v20 = v23 - 1;\n
                [D] PutI(72:F64x8)[t15,0] = t18\n
                [D] PutI(136:I8x8)[t15,0] = 0x01\n
            }\n
        }\n
        [D] PutI(72:F64x8)[t28,0] = t29\n
        [D] PutI(136:I8x8)[t28,0] = 0x01\n
        [D] PutI(136:I8x8)[t28,0] = 0x00\n
        v24 = v20 + 1;\n
        v25 = *((v12 + v27 * 4));\n
        v26 = ([D] x86g_calculate_condition(0x0<32>, 0x3<32>, eax<4>, esi<4>, 0x0<32>) ? v17 + v25 >> 31 ^ 0x80000000 : v17 + v25);\n
        v11 = v3;\n
        *((v11 + v13 * 4)) = v26;\n
        *((v12 + v27 * 4)) = v26;\n
        v27 += 1;\n
    } while (v27 < a0->field_0);\n
    return operator delete(v3);\n
}\n
", "4230003:sub_408b73": null, "4230188:sub_408c2c": null, "4230192:_ZN9InterfaceC1Ev": "int Interface::__ctor__(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return Mixer::__base_ctor__();\n
}\n
", "4230231:sub_408c57": null, "4230240:_ZN9InterfaceD1Ev": "int Interface::__dtor__(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return Mixer::__base_dtor__();\n
}\n
", "4230279:sub_408c87": null, "4230288:_ZN9Interface3runEv": "int Interface::run(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return Interface::menuMain();\n
}\n
", "4230327:sub_408cb7": null, "4230336:_ZN9Interface8menuMainEv": "typedef struct struct_6 {\n
    char field_0;\n
} struct_6;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_5;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int Interface::menuMain(struct_2 *v19)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    unsigned int v2;  // [bp-0xbc]\n
    char *v3;  // [bp-0xa8]\n
    char *v4;  // [bp-0xa4]\n
    unsigned short v5;  // [bp-0x9e]\n
    unsigned short v6;  // [bp-0x9c]\n
    unsigned short v7;  // [bp-0x9a]\n
    unsigned short v8;  // [bp-0x98]\n
    unsigned short v9;  // [bp-0x96]\n
    unsigned int v10;  // [bp-0x94]\n
    unsigned int v11;  // [bp-0x90]\n
    unsigned int v12;  // [bp-0x8c]\n
    unsigned int v13;  // [bp-0x88]\n
    unsigned int v14;  // [bp-0x84]\n
    unsigned int v15;  // [bp-0x80]\n
    unsigned int v16;  // [bp-0x7c]\n
    char v17;  // [bp-0x78]\n
    unsigned int v18;  // [bp-0x10]\n
    unsigned int v20;  // esi\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    struct_6 *v22;  // esi, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    char v24[2];  // eax\n
    char v25[2];  // eax\n
    char v26[2];  // eax\n
    void* v27;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v28;  // eax\n
    unsigned int v29;  // edx\n
    struct_1 *v30;  // edi, Other Possible Types: unsigned int\n
    unsigned int v31;  // eax\n
    struct_3 *v32;  // eax\n
    struct_4 *v33;  // eax\n
    struct_0 *v34;  // eax\n
    char v36[2];  // eax\n
    struct_4 *v37;  // esi\n
    char v38[2];  // eax\n
    struct_0 *v39;  // esi\n
    char v40[2];  // eax\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // eax\n
    struct_5 *v43;  // eax\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // fpround\n
    unsigned int v52;  // fpround\n
    char *v53;  // esi\n
    unsigned int v54;  // eax\n
\n
    v18 = v20;\n
    v21 = cgc_stdout;\n
    v12 = \"1) New track...\\n
2) Import track\\n
3) Export...\\n
4) List tracks\\n
5) Change gain [track] [hundredths]\\n
6) Change pan [track] [hundredths]\\n
7) Combine/split [track] [?track]\\n
8) Effects...\\n
9) Quit\\n
\";\n
    cgc_fwrite(\"1) New track...\\n
2) Import track\\n
3) Export...\\n
4) List tracks\\n
5) Change gain [track] [hundredths]\\n
6) Change pan [track] [hundredths]\\n
7) Combine/split [track] [?track]\\n
8) Effects...\\n
9) Quit\\n
\", cgc_strlen(\"1) New track...\\n
2) Import track\\n
3) Export...\\n
4) List tracks\\n
5) Change gain [track] [hundredths]\\n
6) Change pan [track] [hundredths]\\n
7) Combine/split [track] [?track]\\n
8) Effects...\\n
9) Quit\\n
\"), cgc_stdout);\n
    v22 = &v17;\n
    v11 = cgc_stdin;\n
    if (cgc_freaduntil(&v17, 100, 10, cgc_stdin) >= 0)\n
    {\n
        v3 = \" \";\n
        v10 = \"Invalid choice\\n
\";\n
        do\n
        {\n
            if (v17 == 57)\n
            {\n
                v54 = cgc_fprintf(v21, \"Thank you for trying out Grit! Please leave us a nice review on the app store.\\n
\");\n
                *(&v54) = 1;\n
                return v54;\n
            }\n
            v4 = v22;\n
            cgc_strsep(&v4, v3);\n
            v23 = v17 - 49;\n
            switch (v23)\n
            {\n
            case 0:\n
                v27 = v21;\n
                if (!Interface::menuNew())\n
                    goto LABEL_409172;\n
                continue;\n
            case 1:\n
                v27 = v21;\n
                if (!Interface::importAudio())\n
                    goto LABEL_409172;\n
                continue;\n
            case 2:\n
                v27 = v21;\n
                if (!Interface::menuExport())\n
                    goto LABEL_409172;\n
                continue;\n
            case 3:\n
                v27 = v21;\n
                v30 = v19->field_8;\n
                if (v30)\n
                {\n
                    v13 = v27;\n
                    do\n
                    {\n
                        v28 = *((v30 + 8));\n
                        v29 = \"stereo\";\n
                        if (!v28->field_4)\n
                            v29 = \"mono\";\n
                        v1 = v29;\n
                        v0 = v28->field_0;\n
                        v27 = v13;\n
                        cgc_fprintf(v27, \"%d) %s samples=%d\\n
\");\n
                        v30 = *(v30);\n
                    } while (v30);\n
                }\n
            case 4:\n
                v24 = cgc_strsep(&v4, v3);\n
                if (v24)\n
                {\n
                    cgc_strtol(v24, NULL, 10);\n
                    v32 = Mixer::getTrack const(v19);\n
                    if (v32)\n
                    {\n
                        v36 = cgc_strsep(&v4, v3);\n
                        if (!v36)\n
                        {\n
                            v31 = \"Missing gain\\n
\";\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v41 = cgc_strtol(v36, NULL, 10);\n
                            if (v41 - 1001 <= -2002)\n
                            {\n
                                v31 = \"Invalid gain (-10.00...10.00)\\n
\";\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v9 = v41;\n
                                v45 = v50 - 1;\n
                                if ([D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    v46 = v45 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    v46 = v45 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                if (![D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                if ([D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                if (![D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                v6 = [D] x86g_create_fpucw(fpround<4>);\n
                                v8 = v6 | 0xc00;\n
                                if (![D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    v14 = nan;\n
                                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                                    v50 = v46 + 1;\n
                                }\n
                                else\n
                                {\n
                                    v14 = [D] GetI(72:F64x8)[t7,0];\n
                                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                                    v50 = v46 + 1;\n
                                }\n
                                v52 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-156, size=2, endness=Iend_LE)));\n
                                v32->field_10 = v14;\n
                                goto LABEL_409157;\n
                            }\n
                        }\n
                    }\n
                }\n
            case 5:\n
                v25 = cgc_strsep(&v4, v3);\n
                if (v25)\n
                {\n
                    cgc_strtol(v25, NULL, 10);\n
                    v33 = Mixer::getTrack const(v19);\n
                    if (v33)\n
                    {\n
                        v37 = v33;\n
                        v38 = cgc_strsep(&v4, v3);\n
                        if (!v38)\n
                        {\n
                            v31 = \"Missing pan\\n
\";\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v42 = cgc_strtol(v38, NULL, 10);\n
                            if (v42 - 101 <= -202)\n
                            {\n
                                v31 = \"Invalid pan (-1.00...1.00)\\n
\";\n
                                break;\n
                            }\n
                            else if (v42 == 100)\n
                            {\n
                                v37->field_14 = 2147483647;\n
                                goto LABEL_409157;\n
                            }\n
                            else\n
                            {\n
                                v15 = v42;\n
                                v48 = v50 - 1;\n
                                if ([D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    v49 = v48 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    v49 = v48 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                if (![D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                if (![D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    [D] PutI(72:F64x8)[t3,0] = t4\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                v5 = [D] x86g_create_fpucw(fpround<4>);\n
                                v7 = v5 | 0xc00;\n
                                if ([D] GetI(136:I8x8)[t36,0])\n
                                {\n
                                    v16 = [D] GetI(72:F64x8)[t7,0];\n
                                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                                    v50 = v49 + 1;\n
                                }\n
                                else\n
                                {\n
                                    v16 = nan;\n
                                    [D] PutI(136:I8x8)[t7,0] = 0x00\n
                                    v50 = v49 + 1;\n
                                }\n
                                v51 = [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-158, size=2, endness=Iend_LE)));\n
                                v37->field_14 = v16;\n
                                goto LABEL_409157;\n
                            }\n
                        }\n
                    }\n
                    v31 = \"Invalid track\\n
\";\n
                    break;\n
                }\n
                v31 = \"Missing track\\n
\";\n
                break;\n
            case 6:\n
                v26 = cgc_strsep(&v4, v3);\n
                if (!v26)\n
                {\n
                    v31 = \"Missing track 1\\n
\";\n
                    break;\n
                }\n
                cgc_strtol(v26, NULL, 10);\n
                v34 = Mixer::getTrack const(v19);\n
                if (!v34)\n
                {\n
                    v31 = \"Invalid track 1\\n
\";\n
                    break;\n
                }\n
                v39 = v34;\n
                v40 = cgc_strsep(&v4, v3);\n
                if (v40)\n
                {\n
                    cgc_strtol(v40, NULL, 10);\n
                    v43 = Mixer::getTrack const(v19);\n
                    if (v43)\n
                    {\n
                        if (v39->field_4)\n
                        {\n
LABEL_40901b:\n
                            v31 = \"Cannot combine a stereo track\\n
\";\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (!(!v43->field_4))\n
                                goto LABEL_40901b;\n
                            Mixer::combineTracks(v19, v39->field_0);\n
LABEL_409157:\n
                            v27 = v21;\n
                            goto LABEL_408d60;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v31 = \"Invalid track 2\\n
\";\n
                        v2 = v31;\n
LABEL_409151:\n
                        cgc_fprintf(v21, v2);\n
                        goto LABEL_409157;\n
                    }\n
                }\n
                else if (v39->field_4)\n
                {\n
                    Mixer::splitTrack(v19);\n
                    goto LABEL_409157;\n
                }\n
                else\n
                {\n
                    v31 = \"Cannot split a mono track\\n
\";\n
                    break;\n
                }\n
            case 7:\n
                Interface::menuEffects();\n
                goto LABEL_409157;\n
            default:\n
                v2 = v10;\n
                goto LABEL_409151;\n
            }\n
LABEL_408d60:\n
            v21 = v27;\n
            v53 = v12;\n
            cgc_fwrite(v53, cgc_strlen(v53), v21);\n
            v22 = &v17;\n
        } while (cgc_freaduntil(&v17, 100, 10, v11) >= 0);\n
    }\n
LABEL_409172:\n
    return 0;\n
}\n
", "4231571:sub_409193": null, "4231584:_ZN9Interface7menuNewEv": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int Interface::menuNew(unsigned int v12)\n
{\n
    char *v0;  // [bp-0xb0]\n
    char *v1;  // [bp-0x9c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x98], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x94]\n
    unsigned int v4;  // [bp-0x90]\n
    unsigned int v5;  // [bp-0x8c]\n
    unsigned int v6;  // [bp-0x88]\n
    unsigned int v7;  // [bp-0x84]\n
    unsigned int v8;  // [bp-0x80]\n
    unsigned int v9;  // [bp-0x7c]\n
    char v10;  // [bp-0x78]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v13;  // esi\n
    struct_0 *v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    char *v17;  // esi\n
    char v18[2];  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    char v22[2];  // eax\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // eax\n
    void* v25;  // edi\n
    unsigned int v26;  // eax\n
    unsigned int v28;  // eax, Other Possible Types: char\n
    void* v29;  // edi, Other Possible Types: unsigned int\n
    unsigned int v30;  // eax\n
\n
    v11 = v13;\n
    v2 = cgc_stdin;\n
    v8 = cgc_stdout;\n
    v9 = \"1) Silence [number of samples]\\n
2) Sine Wave [number of samples] [HZ]\\n
3) Square Wave [number of samples] [HZ]\\n
4) White Noise [number of samples]\\n
5) Cancel\\n
\";\n
    cgc_fwrite(\"1) Silence [number of samples]\\n
2) Sine Wave [number of samples] [HZ]\\n
3) Square Wave [number of samples] [HZ]\\n
4) White Noise [number of samples]\\n
5) Cancel\\n
\", cgc_strlen(\"1) Silence [number of samples]\\n
2) Sine Wave [number of samples] [HZ]\\n
3) Square Wave [number of samples] [HZ]\\n
4) White Noise [number of samples]\\n
5) Cancel\\n
\"), cgc_stdout);\n
    v14 = &v10;\n
    v15 = cgc_freaduntil(&v10, 100, 10, v2);\n
    v28 = v15 / 0x80000000;\n
    if (v15 >= 0 && v10 != 53)\n
    {\n
        v1 = \" \";\n
        v7 = \"Missing samples\\n
\";\n
        v6 = \"Invalid samples\\n
\";\n
        v4 = \"Invalid choice\\n
\";\n
        v5 = \"Missing frequency\\n
\";\n
        do\n
        {\n
            v3 = v14;\n
            v17 = v1;\n
            cgc_strsep(&v3, v17);\n
            v18 = cgc_strsep(&v3, v17);\n
            v23 = v7;\n
            if (v18)\n
            {\n
                v19 = cgc_strtoul(v18, NULL, 10);\n
                v23 = v6;\n
                if (v19 >= 0)\n
                {\n
                    v20 = v19;\n
                    v21 = v10;\n
                    if (v21 - 50 >= 2)\n
                    {\n
                        if (v21 == 52)\n
                        {\n
                            AudioTrack::__ctor__(operator new(28), Mixer::generateWhiteNoise(v12));\n
                            goto LABEL_409408;\n
                        }\n
                        v23 = v4;\n
                        if (v21 == 49)\n
                        {\n
                            v29 = operator new(28);\n
                            v30 = AudioStream::fromSilence(v20);\n
LABEL_4093fa:\n
                            AudioTrack::__ctor__(v29, v30);\n
LABEL_409408:\n
                            v28 = Mixer::addTrack(v12);\n
                            *(&v28) = 1;\n
                            return v28;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v22 = cgc_strsep(&v3, v1);\n
                        v23 = v5;\n
                        if (v22)\n
                        {\n
                            v24 = cgc_strtoul(v22, NULL, 10);\n
                            if (v24 > 49999)\n
                            {\n
                                v23 = \"Invalid frequency\\n
\";\n
                            }\n
                            else\n
                            {\n
                                v1 = v24;\n
                                v2 = v10;\n
                                v29 = operator new(28);\n
                                if (v2 != 50)\n
                                    v30 = AudioStream::fromSquareWave(v20, v1);\n
                                else\n
                                    v30 = AudioStream::fromSineWave(v20, v1);\n
                                goto LABEL_4093fa;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v25 = v8;\n
            cgc_fprintf(v25, v23);\n
            v0 = v9;\n
            v14 = &v10;\n
            cgc_fwrite(v9, cgc_strlen(v0), v25);\n
            v26 = cgc_freaduntil(&v10, 100, 10, v2);\n
            v28 = v26 / 0x80000000;\n
            if (v26 < 0)\n
                break;\n
            continue;\n
        } while (v10 != 53);\n
    }\n
    *(&v28) = v28 ^ 1;\n
    return v28;\n
}\n
", "4232215:sub_409417": null, "4232224:_ZN9Interface11importAudioEv": "extern void* cgc_stdin;\n
\n
int Interface::importAudio(unsigned int v4)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7[6];  // esi\n
    struct struct_1 **v8;  // eax\n
    struct struct_1 **v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
\n
    v3 = v5;\n
    if (cgc_fread(&v2, 4, cgc_stdin) != 4)\n
        return 0;\n
    v6 = *(&v2);\n
    if (v6 - 2147483647 >= 2147483674)\n
    {\n
        v7 = operator new[](v6);\n
        if (cgc_fread(v7, *(&v2), cgc_stdin) == *(&v2))\n
        {\n
            if (v7[0] == 778138980 && v7[1] == 24 && v7[2] <= 2147483646 && v7[4] == 8000)\n
            {\n
                v8 = Compression::fromId(v7[3]);\n
                if (v8)\n
                {\n
                    v9 = v8;\n
                    v1 = v7[5];\n
                    v0 = operator new(28);\n
                    v10 = AudioStream::fromSilence(v7[2]);\n
                    if (v1 == 1)\n
                    {\n
                        AudioTrack::__ctor__(v0, v10);\n
                    }\n
                    else\n
                    {\n
                        v1 = v10;\n
                        AudioTrack::__base_ctor__(v0, v1, AudioStream::fromSilence(v7[2]));\n
                    }\n
                    *(v9)->field_14(v9, v0);\n
                    Mixer::addTrack(v4);\n
                    *(v9)->field_4(v9);\n
                }\n
            }\n
            v11 = operator delete(v7);\n
            *(&v11) = 1;\n
            return v11;\n
        }\n
    }\n
}\n
", "4232592:_ZN9Interface10menuExportEv": "extern char _ZTV13Compression32;\n
extern char _ZTV15CompressionFour;\n
extern char _ZTV16CompressionEight;\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int Interface::menuExport(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x88]\n
    void* v1;  // [bp-0x84], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x80]\n
    unsigned int v3;  // [bp-0x7c]\n
    char v4;  // [bp-0x78]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    char v9;  // cl\n
    unsigned int v11;  // eax\n
    char v12;  // eax\n
\n
    v5 = v7;\n
    cgc_fwrite(\"1) Uncompressed 32-bit signed\\n
2) Compressed 4-bit\\n
3) Compressed 8-bit\\n
4) Cancel\\n
\", cgc_strlen(\"1) Uncompressed 32-bit signed\\n
2) Compressed 4-bit\\n
3) Compressed 8-bit\\n
4) Cancel\\n
\"), cgc_stdout);\n
    v3 = cgc_stdin;\n
    if (cgc_freaduntil(&v4, 100, 10, cgc_stdin) < 0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v2 = \"Invalid choice\\n
\";\n
    while (true)\n
    {\n
        v8 = v4;\n
        v9 = v8 == 52;\n
        v1 = ecx<4>;\n
        if (v8 == 52)\n
            return v1;\n
        if (v8 == 51)\n
        {\n
            v11 = &_ZTV16CompressionEight;\n
            break;\n
        }\n
        else if (v8 == 50)\n
        {\n
            v11 = &_ZTV15CompressionFour;\n
            break;\n
        }\n
        else if (v8 != 49)\n
        {\n
            cgc_fprintf(cgc_stdout, v2);\n
            cgc_fwrite(\"1) Uncompressed 32-bit signed\\n
2) Compressed 4-bit\\n
3) Compressed 8-bit\\n
4) Cancel\\n
\", cgc_strlen(\"1) Uncompressed 32-bit signed\\n
2) Compressed 4-bit\\n
3) Compressed 8-bit\\n
4) Cancel\\n
\"), cgc_stdout);\n
            if (cgc_freaduntil(&v4, 100, 10, v3) < 0)\n
                return v1;\n
        }\n
        else\n
        {\n
            v11 = &_ZTV13Compression32;\n
            break;\n
        }\n
    }\n
    v0 = v11 + 8;\n
    Interface::exportAudio(v6);\n
    v12 = Compression::__dtor__();\n
    v12 = 1;\n
    *(&v1) = v12;\n
    return v1;\n
}\n
", "4232888:sub_4096b8": null, "4232896:_ZN9Interface10listTracksEv": "typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int cgc_stdout;\n
\n
int Interface::listTracks(struct_3 *v6)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18]\n
    struct_3 *v7;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v8;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax\n
    unsigned int v10;  // ecx\n
\n
    v7 = v6;\n
    v8 = v7->field_8;\n
    if (!v8)\n
        return v6;\n
    v5 = cgc_stdout;\n
    v4 = \"mono\";\n
    v3 = \"stereo\";\n
    do\n
    {\n
        v9 = *((v8 + 8));\n
        v10 = v3;\n
        if (!v9->field_4)\n
            v10 = v4;\n
        v2 = v9->field_8->field_0;\n
        v1 = v10;\n
        v0 = v9->field_0;\n
        v7 = cgc_fprintf(v5, \"%d) %s samples=%d\\n
\");\n
        v8 = *(v8);\n
    } while (v8);\n
    return v7;\n
}\n
", "4233029:sub_409745": null, "4233040:_ZN9Interface11menuEffectsEv": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int Interface::menuEffects(unsigned int v23)\n
{\n
    unsigned int v0;  // [bp-0xcc]\n
    void* v1;  // [bp-0xc8]\n
    char *v2;  // [bp-0xbc]\n
    char *v3;  // [bp-0xb8]\n
    unsigned short v4;  // [bp-0xb4]\n
    unsigned short v5;  // [bp-0xb2]\n
    unsigned int v6;  // [bp-0xb0]\n
    unsigned short v7;  // [bp-0xaa]\n
    unsigned short v8;  // [bp-0xa8]\n
    unsigned short v9;  // [bp-0xa6]\n
    unsigned int v10;  // [bp-0xa4]\n
    unsigned int v11;  // [bp-0xa0]\n
    unsigned int v12;  // [bp-0x9c]\n
    unsigned int v13;  // [bp-0x98]\n
    unsigned int v14;  // [bp-0x94]\n
    unsigned int v15;  // [bp-0x90]\n
    unsigned int v16;  // [bp-0x8c]\n
    unsigned int v17;  // [bp-0x88]\n
    unsigned int v18;  // [bp-0x84]\n
    unsigned int v19;  // [bp-0x80]\n
    unsigned int v20;  // [bp-0x7c]\n
    char v21;  // [bp-0x78]\n
    unsigned int v22;  // [bp-0x10]\n
    unsigned int v24;  // esi\n
    struct_2 *v25;  // esi, Other Possible Types: unsigned int\n
    unsigned int v26;  // eax\n
    char *v28;  // esi\n
    char v29[2];  // eax\n
    struct_0 *v30;  // eax\n
    struct_0 *v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    char v34[2];  // eax\n
    char v35[2];  // eax\n
    char v36[2];  // eax\n
    char v37[2];  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // eax\n
    void* v42;  // esi\n
    char *v43;  // edi\n
    unsigned int v44;  // eax\n
    unsigned int v46;  // eax, Other Possible Types: char\n
    struct_2 *v47;  // esi, Other Possible Types: unsigned int\n
\n
    v22 = v24;\n
    v10 = cgc_stdin;\n
    v17 = cgc_stdout;\n
    v16 = \"1) Apply gain [track] [hundredths]\\n
2) Apply pan [track] [hundredths]\\n
3) Echo [track] [delay in samples]\\n
4) Add silence [track] [number of samples]\\n
5) Cancel\\n
\";\n
    cgc_fwrite(\"1) Apply gain [track] [hundredths]\\n
2) Apply pan [track] [hundredths]\\n
3) Echo [track] [delay in samples]\\n
4) Add silence [track] [number of samples]\\n
5) Cancel\\n
\", cgc_strlen(\"1) Apply gain [track] [hundredths]\\n
2) Apply pan [track] [hundredths]\\n
3) Echo [track] [delay in samples]\\n
4) Add silence [track] [number of samples]\\n
5) Cancel\\n
\"), cgc_stdout);\n
    v25 = &v21;\n
    v26 = cgc_freaduntil(&v21, 100, 10, v10);\n
    v46 = v26 / 0x80000000;\n
    if (v26 >= 0 && v21 != 53)\n
    {\n
        v2 = \" \";\n
        v15 = \"Missing track\\n
\";\n
        v14 = \"Invalid track\\n
\";\n
        v13 = \"Invalid choice\\n
\";\n
        v12 = \"Missing gain\\n
\";\n
        do\n
        {\n
            v3 = v25;\n
            v28 = v2;\n
            cgc_strsep(&v3, v28);\n
            v29 = cgc_strsep(&v3, v28);\n
            v33 = v15;\n
            if (!v29)\n
                goto LABEL_4099b0;\n
            cgc_strtol(v29, NULL, 10);\n
            v30 = Mixer::getTrack const(v23);\n
            v33 = v14;\n
            if (!v30)\n
                goto LABEL_4099b0;\n
            v31 = v30;\n
            v32 = v21 - 49;\n
            v33 = v13;\n
            switch (v32)\n
            {\n
            case 0:\n
                v34 = cgc_strsep(&v3, v2);\n
                v33 = v12;\n
                if (v34)\n
                {\n
                    v38 = cgc_strtol(v34, NULL, 10);\n
                    if (v38 - 1001 < -2001)\n
                    {\n
                        v33 = \"Invalid gain (-10.00...10.00)\\n
\";\n
                        goto LABEL_4099b0;\n
                    }\n
                    else\n
                    {\n
                        v9 = v38;\n
                        if (![D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t4\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v5 = [D] x86g_create_fpucw(fpround<4>);\n
                        v8 = v5 | 0xc00;\n
                        if ([D] GetI(136:I8x8)[t36,0])\n
                        {\n
                            v18 = [D] GetI(72:F64x8)[t7,0];\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        }\n
                        else\n
                        {\n
                            v18 = nan;\n
                            [D] PutI(136:I8x8)[t7,0] = 0x00\n
                        }\n
                        v11 = v18;\n
                        FxGain::__ctor__(&v6, v11);\n
                        v46 = FxGain::apply const(&v6, v31);\n
                        break;\n
                    }\n
                }\n
            case 1:\n
                v35 = cgc_strsep(&v3, v2);\n
                if (!v35)\n
                {\n
                    v33 = \"Missing pan\\n
\";\n
                    goto LABEL_4099b0;\n
                }\n
                else\n
                {\n
                    v39 = cgc_strtol(v35, NULL, 10);\n
                    if (v39 - 101 < -201)\n
                    {\n
                        v33 = \"Invalid pan (-1.00...1.00)\\n
\";\n
                        goto LABEL_4099b0;\n
                    }\n
                    else\n
                    {\n
                        if (v39 == 100)\n
                        {\n
                            v47 = &v6;\n
                            v0 = 2147483647;\n
                        }\n
                        else\n
                        {\n
                            v19 = v39;\n
                            if ([D] GetI(136:I8x8)[t36,0])\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            else\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            if ([D] GetI(136:I8x8)[t36,0])\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t4\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            else\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t4\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            if ([D] GetI(136:I8x8)[t36,0])\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t4\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            else\n
                            {\n
                                [D] PutI(72:F64x8)[t3,0] = t4\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            v4 = [D] x86g_create_fpucw(fpround<4>);\n
                            v7 = v4 | 0xc00;\n
                            if ([D] GetI(136:I8x8)[t36,0])\n
                            {\n
                                v20 = [D] GetI(72:F64x8)[t7,0];\n
                                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            }\n
                            else\n
                            {\n
                                v20 = nan;\n
                                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                            }\n
                            v47 = &v6;\n
                            v0 = v20;\n
                        }\n
                        FxPan::__ctor__(v47, v0);\n
                        v46 = FxPan::apply const(v47, v31);\n
                        break;\n
                    }\n
                }\n
            case 2:\n
                v36 = cgc_strsep(&v3, v2);\n
                if (!v36)\n
                {\n
                    v33 = \"Missing delay\\n
\";\n
                    goto LABEL_4099b0;\n
                }\n
                else\n
                {\n
                    v40 = cgc_strtol(v36, NULL, 10);\n
                    if (v40 <= 0)\n
                    {\n
                        v33 = \"Invalid delay (>0)\\n
\";\n
                        goto LABEL_4099b0;\n
                    }\n
                    else\n
                    {\n
                        FxReverb::__ctor__(&v6, v40);\n
                        v46 = FxReverb::apply const(&v6, v31);\n
                        break;\n
                    }\n
                }\n
            case 3:\n
                v37 = cgc_strsep(&v3, v2);\n
                if (!v37)\n
                {\n
                    v33 = \"Missing samples\\n
\";\n
                    goto LABEL_4099b0;\n
                }\n
                else\n
                {\n
                    v41 = cgc_strtol(v37, NULL, 10);\n
                    if (v41 > 0)\n
                    {\n
                        v46 = AudioTrack::setLength(v31, v41 + v31->field_8->field_0);\n
                        *(&v46) = 1;\n
                        return v46;\n
                    }\n
                    v33 = \"Invalid samples (>0)\\n
\";\n
                    goto LABEL_4099b0;\n
                }\n
            default:\n
LABEL_4099b0:\n
                v42 = v17;\n
                cgc_fprintf(v42, v33);\n
                v43 = v16;\n
                v1 = v42;\n
                v25 = &v21;\n
                cgc_fwrite(v43, cgc_strlen(v43), v1);\n
                v44 = cgc_freaduntil(&v21, 100, 10, v10);\n
                v46 = v44 / 0x80000000;\n
                if (v44 < 0)\n
                    goto LABEL_409a02;\n
                continue;\n
            }\n
        } while (v21 != 53);\n
    }\n
LABEL_409a02:\n
    *(&v46) = v46 ^ 1;\n
    return v46;\n
}\n
", "4233989:sub_409b05": null, "4234000:_ZN9Interface11exportAudioERK11Compression": "typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_3 *field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
extern void* cgc_stdout;\n
\n
int Interface::exportAudio(unsigned int v2, struct struct_1 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_2 *v1;  // [bp-0x18]\n
    struct struct_1 **v3;  // edi\n
    struct_2 *v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6[6];  // edi\n
    struct struct_1 **v7;  // edx\n
\n
    v4 = Mixer::exportMix();\n
    v5 = *(v3)->field_c(a0) + 24;\n
    v0 = v5;\n
    v6 = operator new[](v0);\n
    strncpy(v6, \"dua.\", 4);\n
    v6[1] = 24;\n
    v6[2] = v4->field_8->field_0;\n
    v6[3] = *(a0)->field_8();\n
    v6[4] = 8000;\n
    v1 = v4;\n
    v6[5] = 2 - (v4->field_4 < 1);\n
    *(v7)->field_10(a0, v4);\n
    cgc_fwrite(&v0, 4, cgc_stdout);\n
    cgc_fwrite(v6, v0, cgc_stdout);\n
    operator delete(v6);\n
    AudioTrack::__base_dtor__(v1);\n
    return operator delete(v1);\n
}\n
", "4234240:_ZN5MixerC2Ev": "int Mixer::__base_ctor__(unsigned int v1[5])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2[5];  // eax\n
\n
    v2 = v1;\n
    v2[0] = 0;\n
    v2[1] = LinkedList::deleteDestructor;\n
    v2[2] = 0;\n
    v2[3] = 0;\n
    v2[4] = 0;\n
    v0 = v2 + 1;\n
    return Random::__base_ctor__();\n
}\n
", "4234318:sub_409c4e": null, "4234320:_ZN5MixerD2Ev": "int Mixer::__base_dtor__(struct struct_0 *v0[3])\n
{\n
    struct struct_0 *v1[3];  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // esi\n
    struct struct_0 **v4;  // eax\n
\n
    v1 = v0;\n
    v2 = v1[2];\n
    if (!v2)\n
        return v0;\n
    do\n
    {\n
        v3 = *(v2);\n
        if (v0[1])\n
            v4();\n
        v1 = operator delete(v2);\n
        v2 = v3;\n
    } while (v3);\n
    return v1;\n
}\n
", "4234362:sub_409c7a": null, "4234404:sub_409ca4": null, "4234416:_ZNK5Mixer9getLengthEv": "typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int Mixer::getLength const(struct_3 *v0)\n
{\n
    struct_2 *v1;  // ecx, Other Possible Types: unsigned int\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v3;  // esi\n
    unsigned int v4;  // ecx\n
\n
    v1 = v0->field_8;\n
    v2 = 0;\n
    if (!v1)\n
        return 0;\n
    do\n
    {\n
        v3 = *(v1);\n
        v4 = *(*((*((v1 + 8)) + 8)));\n
        if (v2 > v2)\n
            v2 = v4;\n
        v1 = v3;\n
    } while (v3);\n
    return v2;\n
}\n
", "4234475:sub_409ceb": null, "4234480:_ZN5Mixer8addTrackEP10AudioTrack": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
    struct struct_3 *field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
int Mixer::addTrack(struct_2 *v0, unsigned int *a0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int *v2;  // edi\n
    unsigned int v3;  // eax\n
    struct_1 *v4;  // eax\n
    unsigned int *v5;  // ecx\n
    struct_0 *v6;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = a0;\n
    v3 = v1->field_0;\n
    v1->field_0 = v3 + 1;\n
    *(v2) = v3;\n
    v4 = operator new(12);\n
    v4->field_8 = v2;\n
    v5 = v1->field_c;\n
    if (v5)\n
    {\n
        v4->field_0 = *(v5);\n
        *(v5) = v4;\n
        v6 = v4->field_0;\n
        v4->field_4 = v5;\n
        if (!v6)\n
            goto LABEL_409d3f;\n
    }\n
    else\n
    {\n
        v6 = v1->field_8;\n
        v4->field_0 = v6;\n
        v1->field_8 = &v4->field_0;\n
        v4->field_4 = v5;\n
        if (!v6)\n
            goto LABEL_409d3f;\n
    }\n
    *((v6 + 4)) = v4;\n
LABEL_409d3f:\n
    v1->field_c = &v4->field_0;\n
    v1->field_10 = v1->field_10 + 1;\n
    return v4;\n
}\n
", "4234591:sub_409d5f": null, "4234592:_ZNK5Mixer8getTrackEj": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int Mixer::getTrack const(struct_2 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v2;  // eax\n
\n
    v1 = v0->field_8;\n
    if (!v1)\n
        return 0;\n
    while (true)\n
    {\n
        v2 = *((v1 + 8));\n
        if (*(v2) == a0)\n
            return *((v1 + 8));\n
        v1 = *(v1);\n
        if (!v1)\n
            return 0;\n
    }\n
}\n
", "4234649:sub_409d99": null, "4234656:_ZN5Mixer11removeTrackEj": "int Mixer::removeTrack(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v1 = *((v1 + 8));\n
    while (true)\n
    {\n
        v2 = *((v1 + 8));\n
        if (*(v2) == a0)\n
            break;\n
        v1 = *(v1);\n
        if (!v1)\n
            return v1;\n
    }\n
    if (v1)\n
        *((v1 + 4)) = *((v1 + 4));\n
    v3 = *((v1 + 4));\n
    if (v3)\n
        *(v3) = v1;\n
    v4 = v0;\n
    *((v4 + 8)) = *(v1);\n
    if (*((v4 + 12)) == v1)\n
        *((v4 + 12)) = v3;\n
    operator delete(v1);\n
    *((v4 + 16)) = *((v4 + 16)) - 1;\n
    AudioTrack::__base_dtor__(v2);\n
    v1 = operator delete(v2);\n
    return v1;\n
}\n
", "4234805:sub_409e35": null, "4234816:_ZN5Mixer10splitTrackEj": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    struct struct_3 *field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[7];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
int Mixer::splitTrack(struct_2 *v0, unsigned int a0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v2;  // edi\n
    unsigned int *v3;  // esi\n
    unsigned int v4;  // eax\n
    struct_2 *v5;  // esi\n
    unsigned int *v6;  // ecx\n
    struct_1 *v7;  // edx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = v0->field_8;\n
    if (!v1)\n
        return 0;\n
    do\n
    {\n
        v2 = *((v1 + 8));\n
        if (v2->field_0 == a0)\n
        {\n
            if (!v2->field_4)\n
                break;\n
            v2->field_4 = 0;\n
            v3 = operator new(28);\n
            AudioTrack::__ctor__(v3, v2->field_c);\n
            v4 = v0->field_0;\n
            v0->field_0 = v4 + 1;\n
            *(v3) = v4;\n
            v8 = operator new(12);\n
            *((v8 + 8)) = v3;\n
            v5 = v0;\n
            v6 = v5->field_c;\n
            if (v6)\n
            {\n
                *(v8) = *(v6);\n
                *(v6) = v8;\n
                v7 = *(v8);\n
                *((v8 + 4)) = v6;\n
                if (!v7)\n
                    goto LABEL_409ee0;\n
            }\n
            else\n
            {\n
                v7 = v5->field_8;\n
                *(v8) = v7;\n
                v5->field_8 = v8;\n
                *((v8 + 4)) = v6;\n
                if (!v7)\n
                    goto LABEL_409ee0;\n
            }\n
            *((v7 + 4)) = v8;\n
LABEL_409ee0:\n
            v5->field_c = v8;\n
            v5->field_10 = v5->field_10 + 1;\n
            *(&v8) = 1;\n
            return v8;\n
        }\n
        v1 = *(v1);\n
    } while (v1);\n
}\n
", "4235014:sub_409f06": null, "4235024:_ZN5Mixer13combineTracksEjj": "typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int Mixer::combineTracks(struct_3 *v1, unsigned int a0, unsigned int a1)\n
{\n
    struct_1 *v0;  // [bp-0x20]\n
    struct_1 *v2;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v3;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // ecx\n
    struct_0 *v5;  // edx\n
    unsigned int v6;  // eax\n
    struct_1 *v7;  // ecx\n
    unsigned int *v8;  // eax\n
    struct_3 *v9;  // edx\n
\n
    v2 = v1->field_8;\n
    if (!v2)\n
        return 0;\n
    v3 = v2;\n
    do\n
    {\n
        v4 = *((v3 + 8));\n
        if (v4->field_0 == a0 && !v4->field_4)\n
        {\n
            do\n
            {\n
                v5 = *((v2 + 8));\n
                if (v5->field_0 == a1 && !v5->field_4)\n
                {\n
                    if (AudioTrack::toStereo(v4, v5))\n
                    {\n
                        v7 = *(v2);\n
                        if (v7)\n
                            v7->field_4 = *((v2 + 4));\n
                        v8 = *((v2 + 4));\n
                        v9 = v1;\n
                        if (v8)\n
                            *(v8) = v7;\n
                        if (v9->field_8 == v2)\n
                            v9->field_8 = *(v2);\n
                        if (v9->field_c == v2)\n
                            v9->field_c = v8;\n
                        v0 = v2;\n
                        v6 = operator delete(v0);\n
                        v9->field_10 = v9->field_10 - 1;\n
                        *(&v6) = 1;\n
                        return v6;\n
                    }\n
                    break;\n
                }\n
                v2 = *(v2);\n
            } while (v2);\n
        }\n
        v3 = *(v3);\n
    } while (v3);\n
}\n
", "4235103:sub_409f5f": null, "4235199:sub_409fbf": null, "4235200:_ZN5Mixer9exportMixEv": "typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int Mixer::exportMix(struct_3 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x18]\n
    struct_2 *v2;  // eax, Other Possible Types: unsigned int\n
    void* v3;  // edi, Other Possible Types: unsigned int\n
    struct_2 *v4;  // edx\n
    unsigned int v5;  // eax\n
    void* v6;  // esi\n
    struct_2 *v7;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = v1->field_8;\n
    v3 = 0;\n
    if (v2)\n
    {\n
        do\n
        {\n
            v4 = *(v2);\n
            v5 = *(*((*((v2 + 8)) + 8)));\n
            if (v3 > v3)\n
                v3 = v5;\n
            v2 = v4;\n
        } while (v4);\n
    }\n
    v6 = operator new(28);\n
    v0 = AudioStream::fromSilence(v3);\n
    AudioTrack::__base_ctor__(v6, v0, AudioStream::fromSilence(v3));\n
    v7 = v1->field_8;\n
    if (!v7)\n
        return v6;\n
    do\n
    {\n
        AudioTrack::mix(v6, *((v7 + 8)));\n
        v7 = *(v7);\n
    } while (v7);\n
    return v6;\n
}\n
", "4235375:sub_40a06f": null, "4235376:_ZN5Mixer18generateWhiteNoiseEj": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int Mixer::generateWhiteNoise(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v5;  // esi\n
    struct_0 *v6;  // eax\n
    unsigned int *v8;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v9;  // esi, Other Possible Types: unsigned int\n
    unsigned int v10;  // ecx\n
\n
    v5 = a0;\n
    v3 = v4 + 20;\n
    v0 = 0x1000;\n
    Random::addEntropy();\n
    v6 = AudioStream::fromSilence(v5);\n
    if (!v5)\n
        return v6;\n
    v9 = 0;\n
    v1 = v6;\n
    do\n
    {\n
        v10 = v1;\n
        v8 = v9 + 1;\n
        if (*(v10) <= v9)\n
        {\n
            v2 = v8;\n
            AudioStream::setLength(v10, v8);\n
            v8 = v2;\n
            v10 = v1;\n
        }\n
        *((*((v10 + 8)) + v9 * 4)) = Random::randomInt32() >> 1;\n
        v9 = v8;\n
    } while (a0 != v8);\n
    return v10;\n
}\n
", "4235459:sub_40a0c3": null, "4235548:sub_40a11c": null, "4235552:_ZN10LinkedListIP10AudioTrackE16deleteDestructorES1_": "int LinkedList::deleteDestructor(unsigned int v0)\n
{\n
    void* v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    if (v1)\n
    {\n
        AudioTrack::__base_dtor__(v1);\n
        v2 = operator delete(v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4235605:sub_40a155": null, "4235616:_ZN6RandomC2Ev": "int Random::__base_ctor__(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 3735928559;\n
    v1[0] = 305419896;\n
    return v0;\n
}\n
", "4235642:sub_40a17a": null, "4235648:_ZN6Random10addEntropyEPKhj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Random::addEntropy(unsigned int v5[2], struct struct_0 **a0, unsigned int a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    int tmp_19;  // tmp #19\n
    int tmp_31;  // tmp #31\n
    int tmp_104;  // tmp #104\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    struct struct_0 **v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // esi\n
    struct struct_0 **v17;  // ecx\n
    struct struct_0 **v18;  // edi\n
    unsigned int v19;  // ebx\n
    void* v21;  // ebx, Other Possible Types: unsigned int\n
    char *v22;  // ecx\n
    unsigned int v23;  // ebx\n
    unsigned int v24[2];  // ecx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ebx\n
    struct struct_0 **v27;  // ecx\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // esi\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // ebx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // esi\n
    struct struct_0 **v35;  // esi\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // eax\n
    unsigned int v40[2];  // ecx\n
\n
    v4 = v6;\n
    v7 = a1;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = operator new[](v7 + 3 & -0x4);\n
    if (!v7)\n
        return operator delete(v8);\n
    v13 = a0;\n
    v10 = v7 & 3;\n
    v11 = 0;\n
    v0 = v7 - 1;\n
    if (v0 >= 3)\n
    {\n
        v11 = 0;\n
        do\n
        {\n
            *(v8 + v11) = *((v13 + v11)) ^ 85;\n
            *(1 + v8 + v11) = *((v13 + v11 + 1)) ^ 85;\n
            *(2 + v8 + v11) = *((v13 + v11 + 2)) ^ 85;\n
            *(3 + v8 + v11) = *((v13 + v11 + 3)) ^ 85;\n
            v11 += 4;\n
        } while ((a1 & -0x4) != v11);\n
    }\n
    if (v10)\n
    {\n
        v12 = v8 + v11;\n
        v13 += v11;\n
        v14 = 0;\n
        do\n
        {\n
            *((v12 + v14)) = *((v13 + v14)) ^ 85;\n
            v14 += 1;\n
        } while (v10 != v14);\n
    }\n
    v15 = a1;\n
    if (v15 >= 2)\n
    {\n
        *(&v13) = *(v8);\n
        v16 = v15 - 2;\n
        v17 = v0;\n
        v18 = v17 & 3;\n
        v19 = 1;\n
        if (v16 >= 3)\n
        {\n
            v21 = 0;\n
            do\n
            {\n
                tmp_7 = (v13 >> 1) ^ *(1 + v8 + v21);\n
                *(1 + v8 + v21) = (v13 >> 1) ^ *(1 + v8 + v21);\n
                tmp_19 = (tmp_7 >> 1) ^ *(2 + v8 + v21);\n
                *(2 + v8 + v21) = (tmp_7 >> 1) ^ *(2 + v8 + v21);\n
                tmp_31 = (tmp_19 >> 1) ^ *(3 + v8 + v21);\n
                *(3 + v8 + v21) = (tmp_19 >> 1) ^ *(3 + v8 + v21);\n
                *(&v13) = (tmp_31 >> 1) ^ *(4 + v8 + v21);\n
                *(4 + v8 + v21) = (tmp_31 >> 1) ^ *(4 + v8 + v21);\n
                v21 += 4;\n
            } while ((v17 & -0x4) != v21);\n
            v19 = v21 + 1;\n
        }\n
        v15 = a1;\n
        if (v18)\n
        {\n
            v22 = v8 + v19;\n
            v23 = 0;\n
            do\n
            {\n
                *(&v13) = (v13 >> 1) ^ v22[v23];\n
                v22[v23] = *(&v13);\n
                v23 += 1;\n
            } while (v18 != v23);\n
        }\n
    }\n
    if (!v15)\n
        return operator delete(v8);\n
    v24 = v5;\n
    v25 = v24[0];\n
    v26 = v24[1];\n
    v27 = v0;\n
    v1 = (v27 >> 2) + 1;\n
    if (v27 < 4)\n
    {\n
        v28 = 0;\n
    }\n
    else\n
    {\n
        v29 = v1 & -2;\n
        v28 = 0;\n
        do\n
        {\n
            v3 = v29;\n
            v0 = v28;\n
            v30 = *((v8 + v28)) & 2004318071 ^ ((v26 CONCAT v25) * 0x2000000 >> 32) ^ v25;\n
            v31 = v30 * 0x20000 ^ v30;\n
            v32 = ((v26 / 128 ^ v26 CONCAT v30) * 0x20000 >> 32) ^ v26 / 128 ^ v26;\n
            v33 = *((v8 + v0 + 4)) & 2004318071 ^ v31 ^ ((v32 CONCAT v31) * 0x2000000 >> 32);\n
            v25 = v33 * 0x20000 ^ v33;\n
            v26 = ((v32 / 128 ^ v32 CONCAT v33) * 0x20000 >> 32) ^ v32 / 128 ^ v32;\n
            v34 = v3;\n
            v28 = v0 + 2;\n
            tmp_104 = v34;\n
            v29 = v34 - 2;\n
        } while (tmp_104 != 2);\n
    }\n
    if ((v1 & 1))\n
    {\n
        v35 = v8;\n
        v36 = 2004318071 & *((v8 + v28));\n
        v37 = v26 / 128 ^ v26;\n
        v38 = v36 ^ ((v26 CONCAT v25) * 0x2000000 >> 32) ^ v25;\n
        v25 = v38 * 0x20000 ^ v38;\n
        v8 = v35;\n
        v26 = ((v37 CONCAT v38) * 0x20000 >> 32) ^ v37;\n
    }\n
    v40 = v5;\n
    v40[0] = v25;\n
    v40[1] = v26;\n
    return operator delete(v8);\n
}\n
", "4236192:_ZN6Random11randomInt32Ev": "int Random::randomInt32(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // ecx\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // esi\n
\n
    v1 = v0;\n
    v2 = v1[0];\n
    v3 = v1[1];\n
    v5 = v3 / 128 ^ v3;\n
    v6 = ((v3 CONCAT v2) * 0x2000000 >> 32) ^ v2;\n
    v1[0] = v6 * 0x20000 ^ v6;\n
    v1[1] = ((v5 CONCAT v6) * 0x20000 >> 32) ^ v5;\n
    return (v3 CONCAT v2) * 0x4000000 >> 32;\n
}\n
", "4236256:main": "int main()\n
{\n
    char v0;  // [bp-0x2c]\n
\n
    Interface::__ctor__(&v0);\n
    Interface::run(&v0);\n
    Interface::__dtor__(&v0);\n
    return 0;\n
}\n
", "4236316:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:__libc_start_main": null, "5242888:cgc_receive": null, "5242892:_Znaj": null, "5242896:cgc_allocate": null, "5242900:cgc__terminate": null, "5242904:_ZdlPv": null, "5242908:cgc_deallocate": null, "5242912:_ZdaPv": null, "5242916:cgc_sin": null, "5242920:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}