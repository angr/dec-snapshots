{"4198400:_init": "extern struct_0 *g_407118;\n
\n
int _init()\n
{\n
    if (g_407118)\n
    {\n
        g_407118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198550:sub_401096": null, "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198603:sub_4010cb": null, "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198612:sub_4010d4": null, "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24639;\n
    v6 = v5 + 76;\n
    v7 = v5 + 76;\n
    if (v7 == v6)\n
        return v5 + 76;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
", "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24575;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 76;\n
    v9 = (v6 + 76 - (v6 + 76) >> 31) + (76 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407114)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198861:sub_4011cd": null, "4198864:cgc_read_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4199013:sub_401265": null, "4199024:cgc_write_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4199173:sub_401305": null, "4199184:cgc_read_line": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_line(unsigned int v7, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1c]\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x11]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!a0)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v5 != 10)\n
            v1 = v4 < 4095;\n
        if (!(v1 & 1))\n
            break;\n
        v0 = &v3;\n
        if (cgc_receive(v7, &v5, 1))\n
        {\n
LABEL_4013b9:\n
            v6 = -1;\n
            return v6;\n
        }\n
        if (!(*(&v3) == 1))\n
            goto LABEL_4013b9;\n
        v8 = v4;\n
        v4 = v8 + 1;\n
        *((v2 + v8 + 308)) = v5;\n
    }\n
    v9 = cgc_calloc();\n
    *(a0) = v9;\n
    if (!v9)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    cgc_memcpy(*(a0), v2 + 308);\n
    v6 = v4;\n
    return v6;\n
}\n
", "4199486:sub_40143e": null, "4199488:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v1 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v1;\n
        v1 = v5 + 1;\n
        *(v5) = tmp_19;\n
    }\n
    return v2;\n
}\n
", "4199574:sub_401496": null, "4199584:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a0;\n
    }\n
    return v1;\n
}\n
", "4199654:sub_4014e6": null, "4199664:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
    char *v5;  // eax\n
    char *v6;  // eax\n
    char *v7;  // eax\n
\n
    v1 = v3;\n
    v0 = a0;\n
    if (v1 == v0)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    if (v0 < v1)\n
    {\n
        while (true)\n
        {\n
            v4 = a1;\n
            a1 = v4 + 1;\n
            if (!v4)\n
                break;\n
            v1[a1] = *((v0 + a1));\n
        }\n
    }\n
    else\n
    {\n
        while (true)\n
        {\n
            v5 = a1;\n
            a1 = v5 + 1;\n
            if (!v5)\n
                break;\n
            v6 = v0;\n
            v0 = v6 + 1;\n
            tmp_19 = *(v6);\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            *(v7) = tmp_19;\n
        }\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4199859:sub_4015b3": null, "4199872:cgc_memcmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_memcmp(struct_0 *v3, struct_0 *a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
    struct_0 *v7;  // ecx\n
\n
    v1 = v3;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        if (!v4)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v5 = v1;\n
        v1 = &v5->field_0;\n
        v6 = v5->field_-1;\n
        v7 = v0;\n
        v0 = &v7->field_0;\n
        if (v6 != v7->field_-1)\n
        {\n
            v2 = *((v1 - 1)) - *((v0 - 1));\n
            return v2;\n
        }\n
    }\n
}\n
", "4199999:sub_40163f": null, "4200000:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4200056:sub_401678": null, "4200064:cgc_strnlen": "int cgc_strnlen(char *v2, unsigned int a0)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // ecx\n
    char *v4;  // eax\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v3 = a0;\n
        a0 = v3 - 1;\n
        v0 = 0;\n
        if (v3)\n
        {\n
            v4 = v2;\n
            v2 = v4 + 1;\n
            v0 = *(v4);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4200169:sub_4016e9": null, "4200176:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4200289:sub_401761": null, "4200304:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        v1 = 0;\n
        if (a1)\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4200443:sub_4017fb": null, "4200448:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4200531:sub_401853": null, "4200544:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = v1[a0];\n
        if (!(v0 & 1))\n
            break;\n
        v1[v2] = v1[a0];\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        v1[v2] = 0;\n
    }\n
    return v2;\n
}\n
", "4200699:sub_4018fb": null, "4200704:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v3;\n
    v3 = &v3[cgc_strlen(v3)];\n
    cgc_strcpy(v3, a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4200785:sub_401951": null, "4200800:cgc_strncat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncat(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v3;\n
    v3 = &v3[cgc_strlen(v3)];\n
    cgc_strncpy(v3, a0, a1);\n
    v3[a1] = 0;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4200901:sub_4019c5": null, "4200912:cgc_strchr": "int cgc_strchr(char *v1, char a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (!*(v1))\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else if (*(v1) != a0)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
}\n
", "4200997:sub_401a25": null, "4201008:cgc_strrchr": "int cgc_strrchr(char *v2, char a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v2); v2 += 1);\n
    while (true)\n
    {\n
        if (v2 < v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*(v2) != a0)\n
        {\n
            v2 -= 1;\n
        }\n
        else\n
        {\n
            v1 = v2;\n
            return v1;\n
        }\n
    }\n
}\n
", "4201137:sub_401ab1": null, "4201152:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[4404];\n
    struct struct_1 *field_1134;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(unsigned int v4, char a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v4)\n
    {\n
LABEL_401b1c:\n
        if (v4)\n
            v0->field_1134 = v4;\n
        for (; v0->field_1134->field_0 == a0; v5->field_1134 = v5->field_1134 + 1)\n
        {\n
            v5 = v0;\n
        }\n
        if (!cgc_strlen(v0->field_1134))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v6 = v0;\n
        v1 = &v6->field_1134->field_0;\n
        v2 = cgc_strchr(v6->field_1134, a0);\n
        if (!v2)\n
        {\n
            v0->field_1134 = 0;\n
        }\n
        else\n
        {\n
            *(v2) = 0;\n
            v0->field_1134 = &v2[1];\n
        }\n
        v3 = v1;\n
        return v3;\n
    }\n
    else\n
    {\n
        if (v0->field_1134 && !(!cgc_strlen(v0->field_1134)))\n
            goto LABEL_401b1c;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4201456:cgc_to_hex": "int cgc_to_hex(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 < 10)\n
    {\n
        v1 = v2 + 48;\n
        return v1;\n
    }\n
    else if (v2 < 16)\n
    {\n
        v1 = v2 + 87;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4201535:sub_401c3f": null, "4201536:cgc_to_bin": "int cgc_to_bin(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 >= 48 && v2 <= 57)\n
    {\n
        v1 = v2 - 48;\n
        return v1;\n
    }\n
    if (v2 >= 97 && v2 <= 102)\n
    {\n
        v1 = v2 + -87;\n
        return v1;\n
    }\n
    if (v2 >= 65 && v2 <= 70)\n
    {\n
        v1 = v2 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4201685:sub_401cd5": null, "4201696:cgc_bin_to_hex": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_bin_to_hex(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_18;  // tmp #18\n
    int tmp_11;  // tmp #11\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = a0;\n
    for (v2 = 0; v2 < a1; v2 += 1)\n
    {\n
        tmp_18 = cgc_to_hex(v1[v2] >> 4);\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(v4) = tmp_18;\n
        tmp_11 = cgc_to_hex(v1[v2] & 15);\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = tmp_11;\n
    }\n
    return v3;\n
}\n
", "4201859:sub_401d83": null, "4201872:cgc_hex_to_uint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_hex_to_uint(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    for (v2 = 4; v2 > 0; v2 -= 1)\n
    {\n
        v0 = v3 * 0x100;\n
        v3 = v0 | cgc_to_bin(v4[2 + 2 * v2]) * 16;\n
        v3 = cgc_to_bin(v4[1 + 2 * v2]) | v3;\n
    }\n
    return v3;\n
}\n
", "4202033:sub_401e31": null, "4202048:cgc_itoa": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_itoa(unsigned int v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0xd]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v6;  // eax\n
    char *v7;  // eax\n
    unsigned int v8;  // eax\n
    char *v9;  // eax\n
    char *v10;  // eax\n
    char *v11;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = a0;\n
    v1 = a0;\n
    if (!v5)\n
    {\n
        v4 = cgc_strcpy(a0, v0 - 4380);\n
        return v4;\n
    }\n
    if (v5 < 0)\n
    {\n
        a0 += 1;\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        *(v6) = 45;\n
        v5 = -(v5);\n
    }\n
    for (; v5; v5 = (v8 >> 31 CONCAT v8) /m 10)\n
    {\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        *(v7) = ((v5 >> 31 CONCAT v5) /m 10 >> 32) + 48;\n
        v8 = v5;\n
    }\n
    v9 = v2;\n
    v2 = v9 + 1;\n
    for (*(v9) = 0; v2 - a0 > 0; *(v11) = v3)\n
    {\n
        v3 = *(a0);\n
        v10 = a0;\n
        a0 = v10 + 1;\n
        *(v10) = *(v2);\n
        v11 = v2;\n
        v2 = v11 + 1;\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4202331:sub_401f5b": null, "4202336:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x29]\n
    unsigned int v5;  // [bp-0x28]\n
    struct_0 *v6;  // [bp-0x24]\n
    unsigned int *v7;  // [bp-0x20]\n
    unsigned int *v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    if ((v13 + 3 & -0x4) + 8 < v13)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v13 = (v13 + 3 & -0x4) + 8;\n
    if (v13 < v6->field_28)\n
        v13 = v6->field_28;\n
    if (v13 > 4095)\n
    {\n
        v12 = cgc_allocate_large_chunk();\n
        return v12;\n
    }\n
    v5 = cgc_log_base_two();\n
    v10 = v5 - cgc_log_base_two();\n
    if (v10 >= 8)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (!v11)\n
            v4 = v10 < 8;\n
        if (!(v4 & 1))\n
            break;\n
        v14 = v6;\n
        v15 = v10;\n
        v10 = v15 + 1;\n
        v0 = v13;\n
        v9 = cgc_list_find(&v14[100].padding_0[12 + 8 * v15], &v14[455].padding_0[32]);\n
        if (!v9)\n
            v3 = 0;\n
        else\n
            v3 = -5 + v9;\n
        v8 = v3;\n
        v11 = v8;\n
    }\n
    if (!v11)\n
    {\n
        v11 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v7 = v11;\n
        v2 = &v6[100].padding_0[12 + 8 + 8 * v10];\n
        if (!v7)\n
            v1 = 0;\n
        else\n
            v1 = v7 + 1;\n
        ::0x4023b0::cgc_list_remove(v2);\n
    }\n
    cgc_mark_allocated();\n
    if ((*(v11) & -2) > v13)\n
        v11 = cgc_split_chunk(v11);\n
    v12 = cgc_chunk_to_ptr();\n
    return v12;\n
}\n
", "4202894:sub_40218e": null, "4202896:cgc_allocate_large_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_large_chunk(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = v5;\n
    cgc_mark_allocated();\n
    v3 = cgc_chunk_to_ptr();\n
    return v3;\n
}\n
", "4203018:sub_40220a": null, "4203024:cgc_log_base_two": "int cgc_log_base_two(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4203078:sub_402246": null, "4203088:cgc_list_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_find(struct struct_0 **v4, struct struct_0 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        if (v2)\n
        {\n
            v0 = a1;\n
            if (a0(v2))\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_find_fit": "int cgc_find_fit(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    v4 = a0;\n
    v2 = v5;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    v3 = v1;\n
    return !((*(v3) & -2) < v4);\n
}\n
", "4203316:sub_402334": null, "4203328:cgc_grow_heap": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_grow_heap()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = 0x1000;\n
    cgc_mark_free();\n
    v3 = v2;\n
    return v3;\n
}\n
", "4203438:sub_4023ae": null, "4203440:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4203550:sub_40241e": null, "4203552:cgc_mark_allocated": "int cgc_mark_allocated(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) | 1;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4203590:sub_402446": null, "4203600:cgc_split_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_sizes;\n
\n
int cgc_split_chunk(unsigned int *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4 + a0;\n
    v1 = *(v4) & -2;\n
    if ((*(v4) & -2) <= a0 + size_class_sizes)\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
    *(v4) = a0;\n
    cgc_mark_allocated(v4);\n
    *(v2) = v1 - a0;\n
    cgc_mark_allocated(v2);\n
    cgc_chunk_to_ptr();\n
    cgc_free();\n
    v3 = v4;\n
    return v3;\n
}\n
", "4203771:sub_4024fb": null, "4203776:cgc_chunk_to_ptr": "int cgc_chunk_to_ptr(unsigned int v0)\n
{\n
    return v0 + 4;\n
}\n
", "4203794:sub_402512": null, "4203808:cgc_free": "extern unsigned int _GLOBAL_OFFSET_TABLE_[1103];\n
\n
int cgc_free(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[1103];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v9[1103];  // ebx\n
\n
    v5 = v7;\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v8 = cgc_ptr_to_chunk();\n
    v4 = v8;\n
    if (!v6)\n
        return v8;\n
    cgc_mark_free();\n
    if (v2[1102])\n
        v4 = cgc_coalesce();\n
    v1 = cgc_log_base_two(*(v4) & -2);\n
    v3 = v1 - cgc_log_base_two(v2[10]);\n
    if (v3 >= 8)\n
        v3 = 7;\n
    v9 = v2;\n
    v0 = &v9[4 + 185];\n
    v8 = cgc_list_insert_in_order(&v9[2 * v3] + 1, v4 + 4);\n
    return v8;\n
}\n
", "4204026:sub_4025fa": null, "4204032:cgc_ptr_to_chunk": "int cgc_ptr_to_chunk(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4204101:sub_402645": null, "4204112:cgc_mark_free": "int cgc_mark_free(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) & -2;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4204150:sub_402676": null, "4204160:cgc_coalesce": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_1 *v12)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[2];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    unsigned int *v7;  // [bp-0x1c]\n
    unsigned int *v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    v10 = 0;\n
    if ((v12 & 4095))\n
        v10 = v12 + -(v12->field_0 & -2);\n
    if (((v12 + (v12->field_-4 & -2)) & 4095))\n
        v11 = v12 + (v12->field_-4 & -2);\n
    if (v10 && !(*(v10) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v10) & -2);\n
        v9 = v5 - cgc_log_base_two(v6->field_28);\n
        if (v9 < 8)\n
        {\n
            v8 = v10;\n
            v4[0] = &v6[100].padding_0[12 + 8 * v9];\n
            if (!v8)\n
                v3 = 0;\n
            else\n
                v3 = v8 + 1;\n
            ::0x4023b0::cgc_list_remove(v4, v3);\n
            *(v10) = (v12->field_-4 & -2) + (*(v10) & -2);\n
            cgc_mark_free(v10);\n
            v12 = v10;\n
        }\n
    }\n
    if (!v11)\n
    {\n
        return v12;\n
    }\n
    else if ((*(v11) & 1))\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v11) & -2);\n
        v9 = v2 - cgc_log_base_two(v6->field_28);\n
        if (v9 >= 8)\n
            return v12;\n
        v7 = v11;\n
        v1[0] = &v6[100].padding_0[12 + 8 * v9];\n
        if (!v7)\n
            v0 = 0;\n
        else\n
            v0 = v7 + 1;\n
        ::0x4023b0::cgc_list_remove(v1, v0);\n
        *(v12) = (*(v12) & -2) + (*(v11) & -2);\n
        cgc_mark_free(v12);\n
    }\n
}\n
", "4204713:sub_4028a9": null, "4204720:cgc_list_insert_in_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_in_order(struct struct_0 **v3, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct struct_0 **v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v3)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v4 = cgc_list_push_back(v3);\n
            return v4;\n
        }\n
        else if (a1(a0) < 0)\n
        {\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v0 = a0;\n
            v4 = ::0x402b30::cgc_list_insert_before(v3, v2);\n
            return v4;\n
        }\n
    }\n
}\n
", "4204877:sub_40294d": null, "4204880:cgc_size_cmp": "int cgc_size_cmp(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int *v4;  // [bp-0x14]\n
    unsigned int *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int *v7;  // [bp-0x8]\n
\n
    v6 = v8;\n
    if (!v6)\n
        v1 = 0;\n
    else\n
        v1 = -5 + v6;\n
    v5 = v1;\n
    v7 = v5;\n
    v3 = a0;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v3;\n
    v2 = v0;\n
    v4 = v2;\n
    return (*(v4) & -2) - (*(v7) & -2);\n
}\n
", "4205031:sub_4029e7": null, "4205040:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc(v3);\n
    if (v1)\n
    {\n
        cgc_memset(v1, 0, v3);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4205129:sub_402a49": null, "4205136:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = cgc_malloc(a0);\n
        return v6;\n
    }\n
    v5 = (*(cgc_ptr_to_chunk(v7)) & -2) - 8;\n
    if (a0 == v5)\n
    {\n
        v6 = v7;\n
        return v6;\n
    }\n
    v4 = cgc_malloc(a0);\n
    v1 = v4;\n
    v2 = v7;\n
    if (a0 < v5)\n
        v0 = a0;\n
    else\n
        v0 = v5;\n
    cgc_memcpy(v1, v2, v0);\n
    cgc_free(v7);\n
    v6 = v4;\n
    return v6;\n
}\n
", "4205359:sub_402b2f": null, "4205360:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_insert_before(struct_1 *v0, struct_3 *a0, unsigned int a1[2])\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4205616:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_push_back(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return ::0x402c70::cgc_list_insert_after(v1, v1->field_4);\n
}\n
", "4205675:sub_402c6b": null, "4205680:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(void* *v1, void* *a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        v2 = ::0x402b30::cgc_list_insert_before(v1, *(a0), a1);\n
        return v2;\n
    }\n
    v2 = ::0x402b30::cgc_list_insert_before(v1, *(v1), a1);\n
    return v2;\n
}\n
", "4205792:cgc_run_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_command()\n
{\n
    unsigned int v3;  // [bp+0x0]\n
    unsigned int v4;  // [bp+0x4]\n
    unsigned int v6;  // [bp+0xffffc]\n
    unsigned int v7;  // [bp+0x10000c]\n
    unsigned int v8;  // [bp+0x100010]\n
\n
    v3 = v7;\n
    v4 = v8;\n
    v6 = cgc_get_mark_command(v7);\n
    return;\n
}\n
", "4206248:sub_402ea8": null, "4206256:cgc_append_command": "int cgc_append_command(unsigned int v1, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    *(a0) = 0;\n
    v0 = 1;\n
    return cgc_do_insert(v1, a0);\n
}\n
", "4206322:sub_402ef2": null, "4206336:cgc_change_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_change_command(unsigned int v3, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    *(a0) = 0;\n
    if (cgc_delete_command(v3))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = cgc_append_command(v3, a0);\n
    return v1;\n
}\n
", "4206445:sub_402f6d": null, "4206448:cgc_delete_command": "extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
extern unsigned int state;\n
\n
int cgc_delete_command(unsigned int v22, unsigned int *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x68]\n
    void* v1;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0x54], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // [bp-0x50], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x4c], Other Possible Types: unsigned int\n
    struct struct_0 **v6;  // [bp-0x48]\n
    char v7;  // [bp-0x41]\n
    unsigned int v8[48];  // [bp-0x40]\n
    unsigned int v9;  // [bp-0x3c]\n
    unsigned int v10;  // [bp-0x38]\n
    struct struct_0 **v11;  // [bp-0x34]\n
    struct struct_0 **v12;  // [bp-0x30]\n
    struct struct_0 **v13;  // [bp-0x2c]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct struct_0 **v16;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct struct_0 **v17;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int *v18;  // [bp-0x18]\n
    struct struct_0 **v19;  // [bp-0x14]\n
    void* v20;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v21;  // [bp-0xc]\n
    unsigned int v23[48];  // eax\n
\n
    v8[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v16 = 0;\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v21 = -1;\n
        return v21;\n
    }\n
    v19 = cgc_get_line_by_address();\n
    if (!v19)\n
    {\n
        v21 = -1;\n
        return v21;\n
    }\n
    v18 = cgc_get_line_by_address();\n
    if (!v18)\n
    {\n
        v21 = -1;\n
        return v21;\n
    }\n
    v17 = v19;\n
    while (true)\n
    {\n
        v7 = 0;\n
        if (v17)\n
        {\n
            v6 = v17;\n
            v15 = *(v18);\n
            if (v15)\n
                v5 = v15;\n
            else\n
                v5 = 0;\n
            v14 = v5;\n
            v7 = v6 != v14;\n
        }\n
        if (!(v7 & 1))\n
            break;\n
        cgc_free(v16);\n
        v16 = v17;\n
        for (v20 = 0; v20 < 28; v20 += 1)\n
        {\n
            if (v8[20 + v20] == v17)\n
                v8[20 + v20] = 0;\n
        }\n
        v13 = v17;\n
        if (!v13)\n
            v4 = 0;\n
        else\n
            v4 = v13;\n
        v0 = v4;\n
        ::0x404a50::cgc_list_remove(&v8[18]);\n
        v12 = &*(v17)->field_0;\n
        if (v12)\n
            v3 = v12;\n
        else\n
            v3 = 0;\n
        v11 = v3;\n
        v17 = v11;\n
    }\n
    cgc_free(v16);\n
    v23 = v8;\n
    v23[46] = cgc_get_line_by_address();\n
    if (!v23[19])\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v10 = v8[19];\n
        if (!v10)\n
            v2 = 0;\n
        else\n
            v2 = v10;\n
        v9 = v2;\n
        v1 = v9;\n
    }\n
    v8[47] = v1;\n
    v21 = 0;\n
    return v21;\n
}\n
", "4207064:sub_4031d8": null, "4207072:cgc_search_command": "int cgc_search_command(unsigned int v1, unsigned int *a0)\n
{\n
    void* v0;  // [bp-0x14]\n
\n
    *(a0) = 0;\n
    v0 = 0;\n
    return cgc_do_search_command(v1, a0);\n
}\n
", "4207140:sub_403224": null, "4207152:cgc_insert_command": "int cgc_insert_command(unsigned int v1, unsigned int *a0)\n
{\n
    void* v0;  // [bp-0x14]\n
\n
    *(a0) = 0;\n
    v0 = 0;\n
    return cgc_do_insert(v1, a0);\n
}\n
", "4207220:sub_403274": null, "4207232:cgc_join_command": "extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
extern unsigned int state;\n
\n
int cgc_join_command(unsigned int v36, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    void* v1;  // [bp-0x94], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x90], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8c], Other Possible Types: struct struct_0 **\n
    struct struct_0 **v4;  // [bp-0x88], Other Possible Types: unsigned int\n
    struct struct_0 **v5;  // [bp-0x84], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x80], Other Possible Types: struct struct_0 **\n
    void* v7;  // [bp-0x7c], Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // [bp-0x78]\n
    char v9;  // [bp-0x71]\n
    struct struct_0 **v10;  // [bp-0x70], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x6c], Other Possible Types: unsigned int\n
    struct struct_0 **v12;  // [bp-0x68]\n
    char v13;  // [bp-0x61]\n
    unsigned int v14[48];  // [bp-0x60]\n
    unsigned int v15;  // [bp-0x5c]\n
    unsigned int v16;  // [bp-0x58]\n
    struct struct_0 **v17;  // [bp-0x54]\n
    struct struct_0 **v18;  // [bp-0x50]\n
    struct struct_0 **v19;  // [bp-0x4c]\n
    struct struct_0 **v20;  // [bp-0x48]\n
    unsigned int v21;  // [bp-0x44]\n
    unsigned int v22;  // [bp-0x40]\n
    struct struct_0 **v23;  // [bp-0x3c]\n
    struct struct_0 **v24;  // [bp-0x38]\n
    unsigned int v25;  // [bp-0x34]\n
    unsigned int v26;  // [bp-0x30]\n
    unsigned int v27;  // [bp-0x2c]\n
    struct struct_0 **v28;  // [bp-0x28], Other Possible Types: void*\n
    struct struct_0 **v29;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v30;  // [bp-0x20]\n
    unsigned int *v31;  // [bp-0x1c]\n
    struct struct_0 **v32;  // [bp-0x18]\n
    void* v33;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v34;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v35;  // [bp-0xc]\n
    unsigned int v37[48];  // eax\n
\n
    v14[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v33 = 0;\n
    v28 = 0;\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v35 = -1;\n
        return v35;\n
    }\n
    v32 = cgc_get_line_by_address();\n
    if (!v32)\n
    {\n
        v35 = -1;\n
        return v35;\n
    }\n
    v31 = cgc_get_line_by_address();\n
    if (!v31)\n
    {\n
        v35 = -1;\n
        return v35;\n
    }\n
    v29 = v32;\n
    while (true)\n
    {\n
        v13 = 0;\n
        if (v29)\n
        {\n
            v12 = v29;\n
            v26 = *(v31);\n
            if (v26)\n
                v11 = v26;\n
            else\n
                v11 = 0;\n
            v25 = v11;\n
            v13 = v12 != v25;\n
        }\n
        if (!(v13 & 1))\n
            break;\n
        v33 = cgc_strlen(v29 + 2) + v33;\n
        v24 = &*(v29)->field_0;\n
        if (!v24)\n
            v10 = 0;\n
        else\n
            v10 = v24;\n
        v23 = v10;\n
        v29 = v23;\n
    }\n
    v30 = cgc_calloc(v33 + 9);\n
    if (!v30)\n
    {\n
        v35 = -1;\n
        return v35;\n
    }\n
    v27 = v30 + 8;\n
    v29 = v32;\n
    while (true)\n
    {\n
        v9 = 0;\n
        if (v29)\n
        {\n
            v8 = v29;\n
            v22 = *(v31);\n
            if (!v22)\n
                v7 = 0;\n
            else\n
                v7 = v22;\n
            v21 = v7;\n
            v9 = v8 != v21;\n
        }\n
        if (!(v9 & 1))\n
            break;\n
        for (v34 = 0; v34 < 28; v34 += 1)\n
        {\n
            if (v14[20 + v34] == v29)\n
                v14[20 + v34] = 0;\n
        }\n
        if (v29 != v32)\n
        {\n
            cgc_free(v28);\n
            v28 = v29;\n
            v20 = v29;\n
            if (!v20)\n
                v6 = 0;\n
            else\n
                v6 = v20;\n
            ::0x404a50::cgc_list_remove(&v14[18]);\n
        }\n
        cgc_strcpy(v27, v29 + 2);\n
        v27 = cgc_strlen(v29 + 2) + v27;\n
        v19 = &*(v29)->field_0;\n
        if (!v19)\n
            v5 = 0;\n
        else\n
            v5 = v19;\n
        v18 = v5;\n
        v29 = v18;\n
    }\n
    if (!v32)\n
        v4 = 0;\n
    else\n
        v4 = v32;\n
    v0 = v30;\n
    ::0x404950::cgc_list_insert_before(&v14[18], v4);\n
    v17 = v32;\n
    if (!v17)\n
        v3 = 0;\n
    else\n
        v3 = v17;\n
    ::0x404a50::cgc_list_remove(&v14[18]);\n
    cgc_free(v32);\n
    v37 = v14;\n
    v37[46] = v30;\n
    if (!v37[19])\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v16 = v14[19];\n
        if (!v16)\n
            v2 = 0;\n
        else\n
            v2 = v16;\n
        v15 = v2;\n
        v1 = v15;\n
    }\n
    v14[47] = v1;\n
    v35 = 0;\n
    return v35;\n
}\n
", "4208295:sub_4036a7": null, "4208304:cgc_list_command": "extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
extern unsigned int state;\n
\n
int cgc_list_command(unsigned int v27, struct struct_1 **a0)\n
{\n
    void* v0;  // [bp-0x74], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x70], Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // [bp-0x6c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x68], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // [bp-0x64]\n
    char v5;  // [bp-0x5d]\n
    struct struct_0 **v6;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x58], Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // [bp-0x54]\n
    char v9;  // [bp-0x4d]\n
    unsigned int v10[48];  // [bp-0x4c]\n
    unsigned int v11;  // [bp-0x48]\n
    unsigned int v12;  // [bp-0x44]\n
    struct struct_0 **v13;  // [bp-0x40]\n
    struct struct_0 **v14;  // [bp-0x3c]\n
    unsigned int v15;  // [bp-0x38]\n
    unsigned int v16;  // [bp-0x34]\n
    struct struct_0 **v17;  // [bp-0x30]\n
    struct struct_0 **v18;  // [bp-0x2c]\n
    unsigned int v19;  // [bp-0x28]\n
    unsigned int v20;  // [bp-0x24]\n
    char *v21;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct struct_0 **v22;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int *v23;  // [bp-0x18]\n
    struct struct_0 **v24;  // [bp-0x14]\n
    void* v25;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v26;  // [bp-0xc]\n
    unsigned int v28;  // eax\n
    unsigned int v29[48];  // eax\n
\n
    v10[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v25 = 0;\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v26 = -1;\n
        return v26;\n
    }\n
    v24 = cgc_get_line_by_address();\n
    if (!v24)\n
    {\n
        v26 = -1;\n
        return v26;\n
    }\n
    v23 = cgc_get_line_by_address();\n
    if (!v23)\n
    {\n
        v26 = -1;\n
        return v26;\n
    }\n
    v22 = v24;\n
    while (true)\n
    {\n
        v9 = 0;\n
        if (v22)\n
        {\n
            v8 = v22;\n
            v20 = *(v23);\n
            if (v20)\n
                v7 = v20;\n
            else\n
                v7 = 0;\n
            v19 = v7;\n
            v9 = v8 != v19;\n
        }\n
        if (!(v9 & 1))\n
            break;\n
        v25 = cgc_strlen(v22 + 2) + 1 + v25;\n
        v18 = &*(v22)->field_0;\n
        if (!v18)\n
            v6 = 0;\n
        else\n
            v6 = v18;\n
        v17 = v6;\n
        v22 = v17;\n
    }\n
    v28 = cgc_calloc(v25 + 13);\n
    *(a0) = v28;\n
    if (!v28)\n
    {\n
        v26 = -1;\n
        return v26;\n
    }\n
    *(a0)->field_4 = v25;\n
    v21 = &(*(a0))[1].field_4;\n
    v22 = v24;\n
    while (true)\n
    {\n
        v5 = 0;\n
        if (v22)\n
        {\n
            v4 = v22;\n
            v16 = *(v23);\n
            if (!v16)\n
                v3 = 0;\n
            else\n
                v3 = v16;\n
            v15 = v3;\n
            v5 = v4 != v15;\n
        }\n
        if (!(v5 & 1))\n
            break;\n
        cgc_strcpy(v21, v22 + 8);\n
        cgc_strcat(v21, &v10[21 + 28]);\n
        v21 = &v21[1 + cgc_strlen(v22 + 2)];\n
        v14 = *(v22);\n
        if (v14)\n
            v2 = v14;\n
        else\n
            v2 = 0;\n
        v13 = v2;\n
        v22 = v13;\n
    }\n
    v29 = v10;\n
    v29[46] = v23;\n
    if (!v29[19])\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v12 = v10[19];\n
        if (!v12)\n
            v1 = 0;\n
        else\n
            v1 = v12;\n
        v11 = v1;\n
        v0 = v11;\n
    }\n
    v10[47] = v0;\n
    v26 = 0;\n
    return v26;\n
}\n
", "4209058:sub_4039a2": null, "4209072:cgc_mark_command": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
    char padding_5[4];\n
    unsigned int field_9;\n
    unsigned int field_d;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
extern unsigned int state;\n
\n
int cgc_mark_command(struct_0 *v9, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3[48];  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v10[48];  // eax\n
\n
    v3[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    else if (*(&v9->padding_5[1]) == 4)\n
    {\n
        v7 = *((&v9->field_9 + 1));\n
        if (v7 > 26)\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
        v0 = *(&(&v9->padding_0)[1]);\n
        v6 = cgc_get_line_by_address();\n
        if (!v6)\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
        v10 = v3;\n
        v10[20 + v7] = v6;\n
        v10[46] = v6;\n
        if (!v10[19])\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v5 = v3[19];\n
            if (!v5)\n
                v2 = 0;\n
            else\n
                v2 = v5;\n
            v4 = v2;\n
            v1 = v4;\n
        }\n
        v3[47] = v1;\n
        v8 = 0;\n
        return v8;\n
    }\n
    else\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
}\n
", "4209367:sub_403ad7": null, "4209376:cgc_num_command": "typedef struct struct_2 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
    unsigned int field_4c;\n
    char padding_50[104];\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state;\n
\n
int cgc_num_command(unsigned int v37, struct struct_1 **a0)\n
{\n
    void* v0;  // [bp-0xac], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0xa8], Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // [bp-0xa4], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xa0]\n
    void* v4;  // [bp-0x9c], Other Possible Types: unsigned int\n
    struct struct_0 **v5;  // [bp-0x98]\n
    char v6;  // [bp-0x91]\n
    struct struct_0 **v7;  // [bp-0x90], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // [bp-0x88]\n
    char v10;  // [bp-0x81]\n
    struct struct_0 **v11;  // [bp-0x80], Other Possible Types: unsigned int\n
    struct struct_0 **v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    struct_2 *v13;  // [bp-0x78]\n
    unsigned int v14;  // [bp-0x74]\n
    unsigned int v15;  // [bp-0x70]\n
    struct struct_0 **v16;  // [bp-0x6c]\n
    struct struct_0 **v17;  // [bp-0x68]\n
    unsigned int v18;  // [bp-0x64]\n
    unsigned int v19;  // [bp-0x60]\n
    struct struct_0 **v20;  // [bp-0x5c]\n
    struct struct_0 **v21;  // [bp-0x58]\n
    unsigned int v22;  // [bp-0x54]\n
    unsigned int v23;  // [bp-0x50]\n
    struct struct_0 **v24;  // [bp-0x4c]\n
    struct struct_0 **v25;  // [bp-0x48]\n
    struct struct_0 **v26;  // [bp-0x44]\n
    struct struct_0 **v27;  // [bp-0x40]\n
    char v28;  // [bp-0x3c]\n
    unsigned int v29;  // [bp-0x28]\n
    char *v30;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_0 **v31;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp-0x1c]\n
    struct struct_0 **v33;  // [bp-0x18]\n
    void* v34;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v35;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v36;  // [bp-0xc]\n
    unsigned int v38;  // eax\n
    struct_2 *v39;  // eax\n
\n
    v13 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v35 = 0;\n
    v34 = 0;\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v36 = -1;\n
        return v36;\n
    }\n
    v33 = cgc_get_line_by_address();\n
    if (!v33)\n
    {\n
        v36 = -1;\n
        return v36;\n
    }\n
    v32 = cgc_get_line_by_address();\n
    if (!v32)\n
    {\n
        v36 = -1;\n
        return v36;\n
    }\n
    v27 = &v13->field_48->field_0;\n
    if (!v27)\n
        v12 = 0;\n
    else\n
        v12 = v27;\n
    v26 = v12;\n
    for (v31 = v26; v31 != v33; v31 = v24)\n
    {\n
        v35 += 1;\n
        v25 = *(v31);\n
        if (v25)\n
            v11 = v25;\n
        else\n
            v11 = 0;\n
        v24 = v11;\n
    }\n
    v31 = v33;\n
    while (true)\n
    {\n
        v10 = 0;\n
        if (v31)\n
        {\n
            v9 = v31;\n
            v23 = *(v32);\n
            if (!v23)\n
                v8 = 0;\n
            else\n
                v8 = v23;\n
            v22 = v8;\n
            v10 = v9 != v22;\n
        }\n
        if (!(v10 & 1))\n
            break;\n
        v34 = cgc_strlen(v31 + 8) + 5 + v34;\n
        v21 = *(v31);\n
        if (!v21)\n
            v7 = 0;\n
        else\n
            v7 = v21;\n
        v20 = v7;\n
        v31 = v20;\n
    }\n
    v38 = cgc_calloc(v34 + 13);\n
    *(a0) = v38;\n
    if (!v38)\n
    {\n
        v36 = -1;\n
        return v36;\n
    }\n
    v29 = cgc_calloc(v34 + 1);\n
    if (!v29)\n
    {\n
        v36 = -1;\n
        return v36;\n
    }\n
    v30 = v29;\n
    v31 = v33;\n
    while (true)\n
    {\n
        v6 = 0;\n
        if (v31)\n
        {\n
            v5 = v31;\n
            v19 = *(v32);\n
            if (!v19)\n
                v4 = 0;\n
            else\n
                v4 = v19;\n
            v18 = v4;\n
            v6 = v5 != v18;\n
        }\n
        if (!(v6 & 1))\n
            break;\n
        v35 += 1;\n
        v3 = v30;\n
        cgc_strcpy(v3, cgc_itoa(v35, &v28));\n
        cgc_strcat(v30, &v13[21].padding_50[30]);\n
        cgc_strcat(v30, v31 + 2);\n
        cgc_strcat(v30, &v13[21].padding_50[32]);\n
        v30 = &v30[cgc_strlen(v30)];\n
        v17 = &*(v31)->field_0;\n
        if (!v17)\n
            v2 = 0;\n
        else\n
            v2 = v17;\n
        v16 = v2;\n
        v31 = v16;\n
    }\n
    cgc_strcpy(&(*(a0))[1].field_4, v29);\n
    *(a0)->field_4 = cgc_strlen(&(*(a0))[1].field_4);\n
    cgc_free(v29);\n
    v39 = v13;\n
    v39->field_b8 = v32;\n
    if (!v39->field_4c)\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v15 = v13->field_4c;\n
        if (!v15)\n
            v1 = 0;\n
        else\n
            v1 = v15;\n
        v14 = v1;\n
        v0 = v14;\n
    }\n
    v13->field_bc = v0;\n
    v36 = 0;\n
    return v36;\n
}\n
", "4210522:sub_403f5a": null, "4210528:cgc_transform_command": "typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
    unsigned int field_5;\n
    unsigned int field_9;\n
    unsigned int field_d;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[49];\n
extern unsigned int state;\n
\n
int cgc_transform_command(struct_1 *v20, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    void* v1;  // [bp-0x54], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x50], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0x4c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    struct struct_0 **v5;  // [bp-0x44]\n
    char v6;  // [bp-0x3d]\n
    unsigned int v7[49];  // [bp-0x3c]\n
    unsigned int v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0x34]\n
    struct struct_0 **v10;  // [bp-0x30]\n
    struct struct_0 **v11;  // [bp-0x2c]\n
    unsigned int v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x24]\n
    char *v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct struct_0 **v15;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int *v16;  // [bp-0x18]\n
    struct struct_0 **v17;  // [bp-0x14]\n
    unsigned int v18;  // [bp-0x10]\n
    unsigned int v19;  // [bp-0xc]\n
    unsigned int v21[49];  // eax\n
\n
    v7[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    if (!v7[48])\n
    {\n
        if (*((&v20->field_5 + 1)) != 4)\n
        {\n
            v19 = -1;\n
            return v19;\n
        }\n
        v18 = *((&v20->field_9 + 1));\n
        v18 -= 97;\n
        if (v18 > 27)\n
        {\n
            v19 = -1;\n
            return v19;\n
        }\n
    }\n
    else\n
    {\n
        if (*((&v20->field_5 + 1)) == 8)\n
        {\n
            v18 = 26;\n
        }\n
        else\n
        {\n
            v19 = -1;\n
            return v19;\n
        }\n
    }\n
    if (!v7[1 + v18])\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    v0 = *(&(&v20->padding_0)[1]);\n
    v17 = cgc_get_line_by_address();\n
    if (!v17)\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    v0 = *((&v20->field_1 + 1));\n
    v16 = cgc_get_line_by_address();\n
    if (!v16)\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    v15 = v17;\n
    while (true)\n
    {\n
        v6 = 0;\n
        if (v15)\n
        {\n
            v5 = v15;\n
            v13 = *(v16);\n
            if (v13)\n
                v4 = v13;\n
            else\n
                v4 = 0;\n
            v12 = v4;\n
            v6 = v5 != v12;\n
        }\n
        if (!(v6 & 1))\n
            break;\n
        for (v14 = v15 + 8; *(v14); v14 += 1)\n
        {\n
            v0 = &v20->field_9 + 1;\n
            *(v14) = v7[1 + v18]();\n
        }\n
        v11 = &*(v15)->field_0;\n
        if (v11)\n
            v3 = v11;\n
        else\n
            v3 = 0;\n
        v10 = v3;\n
        v15 = v10;\n
    }\n
    v21 = v7;\n
    v21[46] = v16;\n
    if (!v21[19])\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v9 = v7[19];\n
        if (!v9)\n
            v2 = 0;\n
        else\n
            v2 = v9;\n
        v8 = v2;\n
        v1 = v8;\n
    }\n
    v7[47] = v1;\n
    v19 = 0;\n
    return v19;\n
}\n
", "4211183:sub_4041ef": null, "4211184:cgc_inverse_search_command": "int cgc_inverse_search_command(unsigned int v1, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    *(a0) = 0;\n
    v0 = 1;\n
    return cgc_do_search_command(v1, a0);\n
}\n
", "4211250:sub_404232": null, "4211264:cgc_get_mark_command": "typedef struct struct_0 {\n
    char padding_0[9];\n
    unsigned int field_9;\n
    unsigned int field_d;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
\n
int cgc_get_mark_command(struct_0 *v7, struct struct_1 **a0)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v2[48];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v9[48];  // eax\n
\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    *(a0) = 0;\n
    if (*(&(&v7->padding_0)[1]) != 4)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v5 = *((&v7->field_9 + 1));\n
    if (v5 > 26)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v8 = cgc_calloc(16);\n
    *(a0) = v8;\n
    if (!v8)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    *(a0)->field_4 = 4;\n
    cgc_memcpy(&(*(a0))[1].field_4, &v2[20 + v5], 4);\n
    v9 = v2;\n
    v9[46] = v9[20 + v5];\n
    if (!v9[19])\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2[19];\n
        if (!v4)\n
            v1 = 0;\n
        else\n
            v1 = v4;\n
        v3 = v1;\n
        v0 = v3;\n
    }\n
    v2[47] = v0;\n
    v6 = 0;\n
    return v6;\n
}\n
", "4211588:sub_404384": null, "4211600:cgc_do_insert": "typedef struct struct_1 {\n
    char padding_0[76];\n
    struct struct_0 *field_4c;\n
    char padding_50[104];\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[9];\n
    unsigned int field_9;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_insert(struct_2 *v21, unsigned int *a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x64]\n
    struct_0 *v1;  // [bp-0x54], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x50], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x4c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x44], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0x40], Other Possible Types: unsigned int\n
    struct_1 *v7;  // [bp-0x3c]\n
    struct_0 *v8;  // [bp-0x38]\n
    struct_0 *v9;  // [bp-0x34]\n
    struct_0 *v10;  // [bp-0x30]\n
    struct_0 *v11;  // [bp-0x2c]\n
    struct_0 *v12;  // [bp-0x28]\n
    struct_0 *v13;  // [bp-0x24]\n
    unsigned int v14;  // [bp-0x20]\n
    char *v15;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v16;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v17;  // [bp-0x14]\n
    void* v18;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0xc]\n
    unsigned int v20;  // [bp-0x8]\n
    unsigned int v22;  // ebx\n
    struct_1 *v23;  // eax\n
\n
    v20 = v22;\n
    v7 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v16 = 0;\n
    *(a0) = 0;\n
    v16 = cgc_get_line_by_address();\n
    if (!v16)\n
    {\n
        v13 = v7->field_4c;\n
        if (!v13)\n
            v6 = 0;\n
        else\n
            v6 = v13;\n
        v12 = v6;\n
        v16 = v12;\n
    }\n
    if (!a1 && v16)\n
    {\n
        if (!*((v16 + 4)))\n
        {\n
            v4 = 0;\n
        }\n
        else\n
        {\n
            v11 = *((v16 + 4));\n
            if (!v11)\n
                v5 = 0;\n
            else\n
                v5 = v11;\n
            v10 = v5;\n
            v4 = v10;\n
        }\n
        v16 = v4;\n
    }\n
    for (v18 = 0; v18 < *(&(&v21->padding_0)[1]); v18 += 1)\n
    {\n
        if (!*((v21 + v18 + 13)))\n
        {\n
            v19 = -1;\n
            return v19;\n
        }\n
    }\n
    v14 = cgc_list_length();\n
    for (v15 = cgc_strtok(&v21->field_9 + 1, 10); v15; v15 = cgc_strtok(0, 10))\n
    {\n
        if (cgc_strlen(v15) <= 0x100)\n
        {\n
            v14 += 1;\n
            if (v14 > 0x100)\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            v17 = cgc_calloc(cgc_strlen(v15) + 9);\n
            if (!v17)\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            cgc_strcpy(v17 + 1, v15);\n
            if (!v16)\n
                v3 = 0;\n
            else\n
                v3 = v16;\n
            v0 = v17;\n
            ::0x4047b0::cgc_list_insert_after(&v7->padding_0[72], v3);\n
            v16 = v17;\n
        }\n
        else\n
        {\n
            v19 = -1;\n
            return v19;\n
        }\n
    }\n
    v23 = v7;\n
    v23->field_b8 = v16;\n
    if (!v23->field_4c)\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v9 = v7->field_4c;\n
        if (!v9)\n
            v2 = 0;\n
        else\n
            v2 = v9;\n
        v8 = v2;\n
        v1 = v8;\n
    }\n
    v7->field_bc = v1;\n
    v19 = 0;\n
    return v19;\n
}\n
", "4212337:sub_404671": null, "4212352:cgc_get_line_by_address": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *state;\n
\n
int cgc_get_line_by_address(unsigned int v8)\n
{\n
    struct struct_0 **v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_0 **v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_0 **v4;  // [bp-0x14]\n
    struct struct_0 **v5;  // [bp-0x10]\n
    struct struct_0 **v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = &state->field_0;\n
    if (v8 < 0 && v8 >= -28)\n
    {\n
        v7 = *((v3 + (-(v8) - 1) * 4 + 80));\n
        return v7;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v6)\n
        {\n
            v9 = v8;\n
            v8 = v9 - 1;\n
            v2 = v9;\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        v6 = *(v6);\n
    }\n
    if (!v6)\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        if (!v5)\n
            v1 = 0;\n
        else\n
            v1 = v5;\n
        v4 = v1;\n
        v0 = v4;\n
    }\n
    v7 = v0;\n
    return v7;\n
}\n
", "4212588:sub_40476c": null, "4212592:cgc_list_length": "int cgc_list_length(struct struct_0 **v2)\n
{\n
    struct struct_0 **v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    for (v0 = &*(v2)->field_0; v0; v0 = *(v0))\n
    {\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4212656:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(unsigned int *v2, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        v0 = a1;\n
        v3 = ::0x404950::cgc_list_insert_before(v2, *(a0));\n
        return v3;\n
    }\n
    v0 = a1;\n
    v3 = ::0x404950::cgc_list_insert_before(v2, *(v2));\n
    return v3;\n
}\n
", "4212768:cgc_invertcase_transform": "int cgc_invertcase_transform(unsigned int v1)\n
{\n
    char v0;  // [bp-0x5]\n
    unsigned int v2;  // eax\n
\n
    if (v2 >= 97 && v2 <= 122)\n
    {\n
        v0 = v2 + -32;\n
        return v0;\n
    }\n
    if (v2 >= 65 && v2 <= 90)\n
    {\n
        v0 = v2 + 32;\n
        return v0;\n
    }\n
    v0 = v2;\n
    return v0;\n
}\n
", "4212869:sub_404885": null, "4212880:cgc_tolowercase_transform": "int cgc_tolowercase_transform(unsigned int v1)\n
{\n
    char v0;  // [bp-0x5]\n
    unsigned int v2;  // eax\n
\n
    if (v2 >= 65 && v2 <= 90)\n
    {\n
        v0 = v2 + 32;\n
        return v0;\n
    }\n
    v0 = v2;\n
    return v0;\n
}\n
", "4212944:cgc_touppercase_transform": "int cgc_touppercase_transform(unsigned int v1)\n
{\n
    char v0;  // [bp-0x5]\n
    unsigned int v2;  // eax\n
\n
    if (v2 >= 97 && v2 <= 122)\n
    {\n
        v0 = v2 + -32;\n
        return v0;\n
    }\n
    v0 = v2;\n
    return v0;\n
}\n
", "4213008:cgc_debug_transform": "int cgc_debug_transform(struct struct_0 **v3)\n
{\n
    void* v0;  // [bp-0x1c]\n
    struct struct_0 **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v2 = v4;\n
    v1 = v3;\n
    v0 = 0;\n
    return *(v1)();\n
}\n
", "4213070:sub_40494e": null, "4213072:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_insert_before(struct_1 *v0, struct_3 *a0, unsigned int a1[2])\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4213328:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4213438:sub_404abe": null, "4213440:cgc_do_search_command": "typedef struct struct_2 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
    unsigned int field_5;\n
} struct_2;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[48];\n
extern unsigned int state;\n
\n
int cgc_do_search_command(struct_2 *v30, struct struct_1 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x90]\n
    void* v1;  // [bp-0x80], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x7c], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0x78], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x74], Other Possible Types: unsigned int\n
    struct struct_0 **v5;  // [bp-0x70]\n
    char v6;  // [bp-0x69]\n
    struct struct_0 **v7;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x64], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // [bp-0x60]\n
    char v10;  // [bp-0x59]\n
    unsigned int v11[48];  // [bp-0x58]\n
    unsigned int v12;  // [bp-0x54]\n
    unsigned int v13;  // [bp-0x50]\n
    struct struct_0 **v14;  // [bp-0x4c]\n
    struct struct_0 **v15;  // [bp-0x48]\n
    unsigned int v16;  // [bp-0x44]\n
    unsigned int v17;  // [bp-0x40]\n
    struct struct_0 **v18;  // [bp-0x3c]\n
    struct struct_0 **v19;  // [bp-0x38]\n
    unsigned int v20;  // [bp-0x34]\n
    unsigned int v21;  // [bp-0x30]\n
    char v22;  // [bp-0x2c]\n
    char v23;  // [bp-0x28]\n
    char *v24;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_0 **v25;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v26;  // [bp-0x1c]\n
    struct struct_0 **v27;  // [bp-0x18]\n
    void* v28;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v29;  // [bp-0x10]\n
    unsigned int v31;  // eax\n
    unsigned int v32[48];  // eax\n
\n
    v11[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v28 = 0;\n
    *(a0) = 0;\n
    if (!state)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    v27 = cgc_get_line_by_address(*(&(&v30->padding_0)[1]));\n
    if (!v27)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    v26 = cgc_get_line_by_address(*((&v30->field_1 + 1)));\n
    if (!v26)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    v25 = v27;\n
    while (true)\n
    {\n
        v10 = 0;\n
        if (v25)\n
        {\n
            v9 = v25;\n
            v21 = *(v26);\n
            if (v21)\n
                v8 = v21;\n
            else\n
                v8 = 0;\n
            v20 = v8;\n
            v10 = v9 != v20;\n
        }\n
        if (!(v10 & 1))\n
            break;\n
        if (!a1)\n
        {\n
            v0 = &v22;\n
            if (!cgc_regex_match(&(&v30[1].padding_0)[1], v25 + 2, &v23))\n
            {\n
                v28 = cgc_strlen(v25 + 2) + 1 + v28;\n
                goto LABEL_404c73;\n
            }\n
        }\n
        if (a1)\n
        {\n
            v0 = &v22;\n
            if (cgc_regex_match(&(&v30[1].padding_0)[1], v25 + 8, &v23) == -1)\n
                v28 = cgc_strlen(v25 + 2) + 1 + v28;\n
        }\n
LABEL_404c73:\n
        v19 = &*(v25)->field_0;\n
        if (!v19)\n
            v7 = 0;\n
        else\n
            v7 = v19;\n
        v18 = v7;\n
        v25 = v18;\n
    }\n
    if (!v28)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    v31 = cgc_calloc(v28 + 13);\n
    *(a0) = v31;\n
    if (!v31)\n
    {\n
        v29 = -1;\n
        return v29;\n
    }\n
    *(a0)->field_4 = v28;\n
    v24 = &(*(a0))[1].field_4;\n
    v25 = v27;\n
    while (true)\n
    {\n
        v6 = 0;\n
        if (v25)\n
        {\n
            v5 = v25;\n
            v17 = *(v26);\n
            if (!v17)\n
                v4 = 0;\n
            else\n
                v4 = v17;\n
            v16 = v4;\n
            v6 = v5 != v16;\n
        }\n
        if (!(v6 & 1))\n
            break;\n
        if (!a1)\n
        {\n
            v0 = &v22;\n
            if (!cgc_regex_match(&(&v30[1].padding_0)[1], v25 + 8, &v23))\n
            {\n
                cgc_strcpy(v24, v25 + 8);\n
                cgc_strcat(v24, &v11[21 + 28]);\n
                v24 = &v24[1 + cgc_strlen(v25 + 2)];\n
                goto LABEL_404e84;\n
            }\n
        }\n
        if (a1)\n
        {\n
            v0 = &v22;\n
            if (cgc_regex_match(&(&v30[1].padding_0)[1], v25 + 2, &v23) == -1)\n
            {\n
                cgc_strcpy(v24, v25 + 2);\n
                cgc_strcat(v24, &v11[21 + 28]);\n
                v24 = cgc_strlen(v25 + 2) + 1 + v24;\n
            }\n
        }\n
LABEL_404e84:\n
        v15 = *(v25);\n
        if (!v15)\n
            v3 = 0;\n
        else\n
            v3 = v15;\n
        v14 = v3;\n
        v25 = v14;\n
    }\n
    v32 = v11;\n
    v32[46] = v26;\n
    if (!v32[19])\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v13 = v11[19];\n
        if (!v13)\n
            v2 = 0;\n
        else\n
            v2 = v13;\n
        v12 = v2;\n
        v1 = v12;\n
    }\n
    v11[47] = v1;\n
    v29 = 0;\n
    return v29;\n
}\n
", "4214597:sub_404f45": null, "4214608:cgc_regex_match": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_regex_match(char *v9, char *a0, unsigned int *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x54]\n
    unsigned int *v2;  // [bp-0x50], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x4c]\n
    char *v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = -1;\n
    v5 = 0;\n
    v4 = v9;\n
    if (cgc_strlen(v9) <= 0x100)\n
    {\n
        for (v2 = 0; !cgc_parse_regex_element(v4, &v3); v5 += 1);\n
        v2 = cgc_calloc((v5 + 1) * 4);\n
        if (v2)\n
        {\n
            v4 = v9;\n
            v6 = 0;\n
            while (true)\n
            {\n
                if (v6 >= v5)\n
                {\n
                    v4 = a0;\n
                    while (true)\n
                    {\n
                        if (!*(v4))\n
                        {\n
                            *(a1) = v4;\n
                            v0 = a2;\n
                            if (!cgc_do_regex_match(v4, v2, v4 == a0))\n
                            {\n
                                v7 = 0;\n
                                break;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            *(a1) = v4;\n
                            v0 = a2;\n
                            if (cgc_do_regex_match(v4, v2, v4 == a0))\n
                            {\n
                                v4 += 1;\n
                            }\n
                            else\n
                            {\n
                                v7 = 0;\n
                                break;\n
                            }\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    v11 = cgc_calloc(44);\n
                    *((v2 + v6 * 4)) = v11;\n
                    if (!v11)\n
                        break;\n
                    if (cgc_parse_regex_element(v4, *((v2 + (v6 << 2)))))\n
                        break;\n
                    v6 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if (v2)\n
    {\n
        for (v6 = 0; v6 < v5; v6 += 1)\n
        {\n
            cgc_free(*((v2 + v6 * 4)));\n
        }\n
    }\n
    cgc_free(v2);\n
    return v7;\n
}\n
", "4215204:sub_4051a4": null, "4215216:cgc_parse_regex_element": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_regex_element(char *v7, unsigned int a0[11], unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v7;\n
    cgc_init_char_set();\n
    a0[10] = 0;\n
    a0[9] = 0;\n
    a0[8] = 0;\n
    if (*(v4) == 94)\n
    {\n
        a0[9] = 1;\n
        v4 += 1;\n
    }\n
    if (*(v4) == 46)\n
    {\n
        cgc_invert_char_set();\n
        v4 += 1;\n
    }\n
    else if (*(v4) != 91)\n
    {\n
        if (*(v4) == 92)\n
            v4 += 1;\n
        if (!*(v4))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v0 = *(v4);\n
        cgc_set_bit(a0);\n
        v4 += 1;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        v4 += 1;\n
        if (*(v4) == 94)\n
        {\n
            v3 = 1;\n
            v4 += 1;\n
        }\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (*(v4))\n
                v1 = *(v4) != 93;\n
            if (!(v1 & 1))\n
                break;\n
            v0 = *(v4);\n
            cgc_set_bit(a0);\n
            v4 += 1;\n
        }\n
        if (v3)\n
            cgc_invert_char_set();\n
        if (*(v4) != 93)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v4 += 1;\n
    }\n
    if (*(v4) == 42)\n
    {\n
        a0[8] = 1;\n
        v4 += 1;\n
    }\n
    if (*(v4) == 36)\n
    {\n
        a0[10] = 1;\n
        v4 += 1;\n
    }\n
    *(a1) = v4;\n
    v5 = 0;\n
    return v5;\n
}\n
", "4215780:sub_4053e4": null, "4215792:cgc_do_regex_match": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_regex_match(unsigned int v7, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char v0;  // [bp-0x1f]\n
    char v1;  // [bp-0x1e]\n
    char v2;  // [bp-0x1d]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14], Other Possible Types: char\n
    unsigned int v6;  // [bp-0x10]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    if (!*(a0))\n
    {\n
        *(a2) = v7;\n
        v6 = 0;\n
        return v6;\n
    }\n
    if (cgc_greedy_match_one(v7, *(a0), a1))\n
    {\n
        while (true)\n
        {\n
            v2 = 1;\n
            if (*(&v5) <= v7)\n
            {\n
                v1 = 0;\n
                if (*((*(a0) + 32)))\n
                    v1 = !(*(&v5) < v7);\n
                v2 = v1;\n
            }\n
            if (!(v2 & 1))\n
                break;\n
            if (!cgc_do_regex_match(*(&v5), a0 + 4, 0, a2))\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            v5 = *(&v5) - 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v4))\n
        {\n
            v0 = 0;\n
            if (*((*(v4) + 32)))\n
                v0 = *((*(v4) + 40)) ^ 255;\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 4;\n
    }\n
    if (*(v4))\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    *(a2) = v5;\n
    v6 = 0;\n
    return v6;\n
}\n
", "4216206:sub_40558e": null, "4216208:cgc_init_char_set": "int cgc_init_char_set(char *v0)\n
{\n
    return cgc_memset(v0, 0, 32);\n
}\n
", "4216265:sub_4055c9": null, "4216272:cgc_invert_char_set": "int cgc_invert_char_set(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v0 = 0;\n
    for (v0 = 0; v0 < 32; v0 = v3)\n
    {\n
        v1[v0] = v1[v0] ^ 255;\n
        v3 = v0 + 1;\n
    }\n
    return v3;\n
}\n
", "4216346:sub_40561a": null, "4216352:cgc_set_bit": "int cgc_set_bit(unsigned int v1, char a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    *((v0 + (a0 >> 31 CONCAT a0) /m 8)) = *((v0 + (a0 >> 31 CONCAT a0) /m 8)) | (1 << (((a0 >> 31 CONCAT a0) /m 8 >> 32) & 31));\n
    return v0;\n
}\n
", "4216422:sub_405666": null, "4216432:cgc_greedy_match_one": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_greedy_match_one(char *v6, unsigned int a0[11], unsigned int a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1;  // [bp-0x13]\n
    char v2;  // [bp-0x12]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // eax\n
    struct struct_0 **v8;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    *(a2) = v6;\n
    if (a0[9] && !a1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (a0[8])\n
    {\n
        while (true)\n
        {\n
            v3 = 0;\n
            if (*(a2)->field_0)\n
            {\n
                v0 = *(a2)->field_0;\n
                v3 = cgc_get_bit(a0);\n
            }\n
            if (!(v3 & 1))\n
                break;\n
            v7 = a2;\n
            *(v7) = *(v7) + 1;\n
        }\n
        v2 = 1;\n
        if (a0[10])\n
            v2 = !cgc_strlen(*(a2));\n
        v5 = v2 & 1;\n
        return v5;\n
    }\n
    else\n
    {\n
        if (*(v6))\n
        {\n
            v0 = *(v6);\n
            if (cgc_get_bit(a0))\n
            {\n
                v8 = a2;\n
                *(v8) = *(v8) + 1;\n
                v1 = 1;\n
                if (a0[10])\n
                    v1 = !cgc_strlen(*(a2));\n
                v5 = v1 & 1;\n
                return v5;\n
            }\n
        }\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4216807:sub_4057e7": null, "4216816:cgc_get_bit": "int cgc_get_bit(unsigned int v2, char a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // eax\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v1 = *((v0 + (v3 >> 31 CONCAT v3) /m 8));\n
    return (v1 & 1 << (((a0 >> 31 CONCAT a0) /m 8 >> 32) & 31));\n
}\n
", "4216902:sub_405846": null, "4216912:main": "typedef struct struct_0 {\n
    char padding_0[9];\n
    unsigned int field_9;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int *v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v2 = cgc_calloc(270);\n
    if (!v2)\n
    {\n
        v8 = v5;\n
        return -1;\n
    }\n
    while (true)\n
    {\n
        cgc_memset(v2, 0, 270);\n
        cgc_read_all(0, v2, 13);\n
        if (*(&(&v2->padding_0)[1]) && *(&(&v2->padding_0)[1]) <= 0x100)\n
            cgc_read_all(0, &v2->field_9 + 1, *(&(&v2->padding_0)[1]));\n
        v3 = cgc_run_command(v2);\n
        if (!v1)\n
        {\n
            cgc_write_all(1, &v3, 4);\n
        }\n
        else\n
        {\n
            *(v1) = v3;\n
            v1[2] = cgc_generate_csum(v1 + 3);\n
            cgc_write_all(1, v1, v1[1] + 12);\n
            cgc_free(v1);\n
        }\n
    }\n
}\n
", "4217283:sub_4059c3": null, "4217296:cgc_generate_csum": "int cgc_generate_csum(unsigned int v3, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0x4347c000;\n
    v0 = 0;\n
    for (v2 = 0; v2 < 0x400; v2 += 1)\n
    {\n
        v0 = v1[4 * v2] ^ v0;\n
    }\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        v0 = v2[v3] ^ v0;\n
    }\n
    return v0;\n
}\n
", "4217440:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}