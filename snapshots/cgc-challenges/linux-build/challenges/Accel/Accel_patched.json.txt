{"4202496:_init": "extern struct_0 *g_40c56c;\n
\n
int _init()\n
{\n
    if (g_40c56c)\n
    {\n
        g_40c56c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_fabs": "// attributes: PLT stub\n
int cgc_fabs()\n
{\n
    ::libc.so.0::cgc_fabs();\n
    return;\n
}\n
", "4202576:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202592:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_cos": "// attributes: PLT stub\n
int cgc_cos()\n
{\n
    ::libc.so.0::cgc_cos();\n
    return;\n
}\n
", "4202656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202672:cgc_remainder": "// attributes: PLT stub\n
int cgc_remainder()\n
{\n
    ::libc.so.0::cgc_remainder();\n
    return;\n
}\n
", "4202688:cgc_log": "// attributes: PLT stub\n
int cgc_log()\n
{\n
    ::libc.so.0::cgc_log();\n
    return;\n
}\n
", "4202704:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202720:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202736:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202752:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libc.so.0::cgc_sin();\n
    return;\n
}\n
", "4202768:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202784:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202800:sub_402130": "int sub_402130()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202806:sub_402136": null, "4202816:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202859:sub_40216b": null, "4202860:sub_40216c": "int sub_40216c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202864:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202868:sub_402174": null, "4202880:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 41971;\n
    v6 = v5 + 90;\n
    v7 = v5 + 90;\n
    if (v7 == v6)\n
        return v5 + 90;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202931:sub_4021b3": "int sub_4021b3()\n
{\n
}\n
", "4202937:sub_4021b9": "int sub_4021b9()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202944:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 41907;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 90;\n
    v9 = (v6 + 90 - (v6 + 90) >> 31) + (90 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4203015:sub_402207": "int sub_402207()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4203024:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40c568;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40c568)\n
    {\n
        v0 = __dso_handle;\n
        sub_402130();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203099:sub_40225b": "int sub_40225b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203104:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203113:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203117:sub_40226d": null, "4203120:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4203301:sub_402325": null, "4203312:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203401:sub_402389": null, "4203408:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203497:sub_4023e9": null, "4203504:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203529:sub_402409": null, "4203536:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203561:sub_402429": null, "4203568:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203593:sub_402449": null, "4203600:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4203627:sub_40246b": null, "4203632:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4203677:sub_40249d": null, "4203680:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4203725:sub_4024cd": null, "4203728:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203805:sub_40251d": null, "4203808:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4203853:sub_40254d": null, "4203856:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9584 + v0];\n
}\n
", "4203887:sub_40256f": null, "4203888:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4203943:sub_4025a7": null, "4203952:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9456 + v0];\n
}\n
", "4203983:sub_4025cf": null, "4203984:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203998:sub_4025de": null, "4204000:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4204071:sub_402627": null, "4204080:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4204151:sub_402677": null, "4204160:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4204295:sub_402707": null, "4204304:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4204352:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        if (v7 >= 0x80000000)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 364 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4204785:sub_4028f1": null, "4204800:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4204962:sub_4029a2": null, "4204976:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 364 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205154:sub_402a62": null, "4205168:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4205362:sub_402b32": null, "4205376:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 80)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4205487:sub_402baf": null, "4205488:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[22 + 3 + v1])\n
    {\n
        v5 = v0;\n
        v5[22 + 3 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[22 + 3 + v1];\n
    *((v6[22 + 3 + v1] + 12)) = v3;\n
    v6[22 + 3 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4205646:sub_402c4e": null, "4205648:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 364)) == v3)\n
        *((v0 + v1 * 4 + 364)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4205822:sub_402cfe": null, "4205824:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_402eec;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_402eec:\n
    return v6;\n
}\n
", "4206332:sub_402efc": null, "4206336:cgc_remove_from_blist": "int cgc_remove_from_blist(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (*((v0 + 20)))\n
        *((*((v0 + 20)) + 16)) = *((v0 + 16));\n
    v1 = v0;\n
    if (*((v1 + 16)))\n
    {\n
        v1 = *((v0 + 16));\n
        *((v1 + 20)) = *((v0 + 20));\n
    }\n
    return v1;\n
}\n
", "4206400:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[v2] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206496:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*(v2) != *(a0))\n
        {\n
            v1 = *(a0) - *(v2);\n
            return v1;\n
        }\n
        v2 += 1;\n
        a0 += 1;\n
        v0 += 1;\n
    }\n
}\n
", "4206624:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4206710:sub_403076": null, "4206720:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4206849:sub_403101": null, "4206864:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (v8 >= a0)\n
    {\n
        v7 = cgc_output_number_printf((0 CONCAT v8) /m a0, a0, a1 - 1, a2);\n
        v8 = (0 CONCAT v8) /m a0 >> 32;\n
    }\n
    if (!v7 && a1 > 0)\n
    {\n
        while (true)\n
        {\n
            a1 -= 1;\n
            if (!a1)\n
                break;\n
            if ((a2 & 1))\n
            {\n
                v6 = 48;\n
                cgc_transmit(1, &v6, 1);\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                cgc_transmit(1, &v5, 1);\n
            }\n
        }\n
    }\n
    if ((a2 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v4 = v1;\n
        cgc_transmit(1, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v3 = v0;\n
        cgc_transmit(1, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4207355:sub_4032fb": null, "4207360:cgc_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf(char *v18)\n
{\n
    char *v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x58]\n
    char v4;  // [bp-0x51]\n
    char v5;  // [bp-0x49]\n
    char v6;  // [bp-0x41]\n
    char v7;  // [bp-0x39]\n
    char v8;  // [bp-0x31]\n
    char v9;  // [bp-0x29]\n
    struct struct_0 **v10;  // [bp-0x28], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x24]\n
    void* v12;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x18]\n
    unsigned int v15;  // [bp-0x14]\n
    char *v16;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v17;  // [bp-0xc]\n
    char v19;  // [bp+0x8]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(v18))\n
    {\n
        v20 = v18;\n
        v18 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            cgc_transmit(1, &v4, 1);\n
LABEL_403625:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = v18;\n
                    v18 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(v18 - 1, &v18);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                cgc_transmit(1, &v8, 1);\n
                goto LABEL_4035dd;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = &*(v22)->field_0;\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        cgc_transmit(1, &v6, 1);\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_printf(v16, 10, v12, v13);\n
                    goto LABEL_4035dd;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        cgc_transmit(1, &v7, 1);\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_4035dd;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    cgc_transmit(1, &v5, 1);\n
LABEL_4035dd:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403625;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_printf(v11, 16, v12, v13);\n
            goto LABEL_4035dd;\n
        }\n
    }\n
    return v14;\n
}\n
", "4208179:sub_403633": null, "4208192:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    struct struct_0 **v8;  // eax\n
    unsigned int *v9;  // eax\n
    struct struct_0 **v10;  // eax\n
    unsigned int *v11;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 >= a2)\n
    {\n
        cgc_output_number_sprintf(v7, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (a1 < a2 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v8 = a0;\n
            *(v8) = *(v8) + 1;\n
            v9 = v7;\n
            *(v9) = *(v9) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v10 = a0;\n
    *(v10) = *(v10) + 1;\n
    v11 = v7;\n
    *(v11) = *(v11) + 1;\n
    return v11;\n
}\n
", "4208663:sub_403817": null, "4208672:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_403b2f:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_403af2;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = *(v22);\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_403af2;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_403af2;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_403af2:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403b2f;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_403af2;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4209485:sub_403b4d": null, "4209488:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4209746:sub_403c52": null, "4209760:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (*(v0))\n
        {\n
            v3 = v0;\n
            v0 = v3 + 1;\n
            if (*(v3) == a0)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4209844:sub_403cb4": null, "4209856:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(a0) - *(v2);\n
}\n
", "4209984:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4210068:sub_403d94": null, "4210080:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4210132:sub_403dd4": null, "4210144:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4210360:sub_403eb8": null, "4210368:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_403f08:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_403f08;\n
        if (a1 < 0)\n
            goto LABEL_403f08;\n
        while (true)\n
        {\n
            if (*(v6) != 32 && *(v6) != 9 && *(v6) != 12 && *(v6) != 10 && *(v6) != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_403fff:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_403fff;\n
                v6 += 1;\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_404074;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_404074:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_4041d2;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_404192;\n
            }\n
            if (!v7)\n
            {\n
LABEL_404192:\n
                if (v8 >= a1)\n
                    goto LABEL_4041d2;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = v6 + 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_404189;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_404189:\n
                v8 += 10;\n
                goto LABEL_404192;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_404108;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_404108:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_4041d2:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4211230:sub_40421e": null, "4211232:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4211291:sub_40425b": null, "4211296:cgc_init_sheet": "extern unsigned int _GLOBAL_OFFSET_TABLE_[125];\n
\n
int cgc_init_sheet()\n
{\n
    unsigned int v0[125];  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8[125];  // eax\n
    unsigned int v9[125];  // eax\n
    unsigned int v10[125];  // eax\n
    unsigned int v11;  // ecx\n
\n
    v5 = v7;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = 0;\n
    v8 = v0;\n
    v8[123] = cgc_calloc(70200, 16);\n
    if (!v8[123])\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v9 = v0;\n
    v9[124] = cgc_malloc(2808);\n
    if (!v9[124])\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    for (v3 = 0; v3 < 702; v3 = v3 + 1)\n
    {\n
        v10 = v0;\n
        *((v10[124] + v3 * 4)) = v10[123] + v3 * 1600;\n
    }\n
    for (v3 = 0; v3 < 702; v3 = v3 + 1)\n
    {\n
        for (v2 = 0; v2 < 100; v2 = v2 + 1)\n
        {\n
            v11 = v1;\n
            v1 = v11 + 1;\n
            *((*((v0[124] + v3 * 4)) + v2 * 16)) = v11;\n
        }\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4211618:sub_4043a2": null, "4211632:cgc_show_cell": null, "4211941:sub_4044e5": null, "4211952:cgc_get_cell": null, "4212288:cgc_eval_formula": null, "4213760:cgc_set_cell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8[2];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_set_cell(unsigned int v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 && cgc_strlen(a0) && cgc_strlen(a0) < a1)\n
    {\n
        v1 = cgc_get_cell(v3);\n
        if (!v1)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        if (v1->field_4)\n
        {\n
            cgc_free(v1->field_8);\n
            v1->field_8 = 0;\n
            v1->field_4 = 0;\n
            v1->field_c = 0;\n
        }\n
        v1->field_8 = cgc_malloc(cgc_strlen(a0) + 1);\n
        if (!v1->field_8)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_strcpy(v1->field_8, a0);\n
        if (cgc_strlen(a0) >= 2 && *(a0) == 61)\n
        {\n
            v1->field_c = &v1->field_8[0] + 1;\n
            v1->field_4 = 7;\n
            goto LABEL_404d8f;\n
        }\n
        v1->field_4 = cgc_parsearg();\n
        if (v1->field_4 != 4)\n
            v1->field_4 = 2;\n
LABEL_404d8f:\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4214180:sub_404da4": null, "4214192:cgc_parsearg": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parsearg(struct_0 *v9)\n
{\n
    struct_0 *v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0xc]\n
    struct_0 *v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v9)\n
    {\n
        v8 = 1;\n
        return v8;\n
    }\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = v9; v9->field_-1; v9 = &v9->field_0)\n
    {\n
        if (v9->field_-1 >= 48 && v9->field_-1 <= 57)\n
        {\n
            v7 += 1;\n
            goto LABEL_404ebf;\n
        }\n
        if (v9->field_-1 == 45)\n
        {\n
            v7 += 1;\n
            v5 += 1;\n
        }\n
        else if (v9->field_-1 == 46)\n
        {\n
            v7 += 1;\n
            v6 += 1;\n
        }\n
        else if (v9->field_-1 == 34)\n
        {\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            v3 += 1;\n
        }\n
LABEL_404ebf:\n
    }\n
    v9 = v2;\n
    if (v4)\n
    {\n
        if (v4 == 2)\n
        {\n
            v10 = v9;\n
            v9 = &v10->field_0;\n
            if (v10->field_0 == 34)\n
            {\n
                v8 = 3;\n
                return v8;\n
            }\n
        }\n
        v8 = 2;\n
        return v8;\n
    }\n
    else if (v3)\n
    {\n
        if (v6 <= 1 && v5 <= 1)\n
        {\n
            v0 = v9;\n
            if (!cgc_valid_cell_id())\n
            {\n
                v8 = 6;\n
                return v8;\n
            }\n
            v0 = v9;\n
            if (!cgc_get_op())\n
            {\n
                v8 = 2;\n
                return v8;\n
            }\n
            v8 = 5;\n
            return v8;\n
        }\n
        v8 = 2;\n
        return v8;\n
    }\n
    else if (v7)\n
    {\n
        if (v6 <= 1 && v5 <= 1)\n
        {\n
            if (v6 && v7 == 1)\n
                goto LABEL_404ff4;\n
            if (v6 && v5)\n
            {\n
                if (!(v7 == 2))\n
                    goto LABEL_405000;\n
LABEL_404ff4:\n
                v8 = 2;\n
                return v8;\n
            }\n
LABEL_405000:\n
            if (v5 && v7 == 1)\n
            {\n
                v8 = 5;\n
                return v8;\n
            }\n
            v8 = 4;\n
            return v8;\n
        }\n
        v8 = 2;\n
        return v8;\n
    }\n
    else\n
    {\n
        v8 = 1;\n
        return v8;\n
    }\n
}\n
", "4214844:sub_40503c": null, "4214848:cgc_clear_cell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8[2];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear_cell(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_cell(v4);\n
    if (!v1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    if (v1->field_4)\n
    {\n
        cgc_free(v1->field_8);\n
        v1->field_8 = 0;\n
        v1->field_4 = 0;\n
        v1->field_c = 0;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4214985:sub_4050c9": null, "4214992:cgc_print_assigned_cells": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[125];\n
\n
int cgc_print_assigned_cells()\n
{\n
    struct_0 *v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[125];  // [bp-0x28]\n
    unsigned int v5[3];  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    void* v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v8[125];  // [bp-0x18], Other Possible Types: unsigned int\n
    char v9;  // [bp-0x13]\n
    char v10;  // [bp-0xf]\n
    char v11;  // [bp-0xe]\n
    char v12;  // [bp-0xd]\n
    unsigned int v14[125];  // eax, Other Possible Types: unsigned int\n
\n
    v14 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v4[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v8[0] = 0; v8 < 702; v8 = v14)\n
    {\n
        for (v7 = 0; v7 < 100; v7 += 1)\n
        {\n
            v5[0] = *((v4[124] + v8 * 4)) + v7 * 16;\n
            if (v5[1])\n
            {\n
                v6 = v5[0];\n
                v0 = 4;\n
                cgc_itoa((0 CONCAT v6) /m 100 >> 32, &v9);\n
                v12 = 0;\n
                if (!(0 CONCAT v6) /m 2600)\n
                    v3 = 0;\n
                else\n
                    v3 = ((0 CONCAT (0 CONCAT v6) /m 100) /m 26 >> 32) + 65;\n
                v11 = v3;\n
                if (!(0 CONCAT v6) /m 2600)\n
                    v2 = ((0 CONCAT (0 CONCAT v6) /m 100) /m 26 >> 32) + 65;\n
                else\n
                    v2 = ((0 CONCAT (0 CONCAT v6) /m 2600 - 1) /m 26 >> 32) + 65;\n
                v10 = v2;\n
                v0 = &v9;\n
                v1 = v5[2];\n
                cgc_printf(&v4[18 + 19] + 3);\n
            }\n
        }\n
        v14 = &v8[0] + 1;\n
    }\n
    return v14;\n
}\n
", "4215386:sub_40525a": null, "4215392:cgc_get_op": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_op(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char **v1;  // [bp-0x1c], Other Possible Types: unsigned int, unsigned int *\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10]\n
    unsigned int *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = cgc_malloc(cgc_strlen(v6) + 1);\n
    cgc_strcpy(v4, v6);\n
    v2 = cgc_strlen(v4);\n
    for (v3 = 0; v3 < v2; v3 += 1)\n
    {\n
        v4[v3] = cgc_toupper(v4[v3]);\n
    }\n
    v1 = 0;\n
    for (v1 = v0 + 208; *(v1); v1 += 8)\n
    {\n
        if (!cgc_strcmp(*(v1), v4))\n
            break;\n
    }\n
    cgc_free(v4);\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = v1;\n
    return v5;\n
}\n
", "4215713:sub_4053a1": null, "4215728:cgc_infixtorpn": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_infixtorpn()\n
{\n
    unsigned int v1;  // [bp-0x5c]\n
    char v2;  // [bp-0x41]\n
    void* v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x3c]\n
    void* v5;  // [bp-0x38]\n
    char v7;  // [bp-0x2b]\n
    char *v9;  // [bp-0x28]\n
    char *v10;  // [bp-0x24]\n
    char *v11;  // [bp-0x20]\n
    unsigned int v12[2];  // [bp-0x1c]\n
    char *v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x14]\n
    unsigned int v15;  // [bp-0x10]\n
    void* v16;  // [bp-0xc]\n
    unsigned int v17;  // [bp-0x8]\n
    char *v19;  // [bp+0x4]\n
    char v20;  // [bp+0x8]\n
    unsigned int v42;  // ebx\n
\n
    v17 = v42;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v16 = 0;\n
    v15 = 16;\n
    v14 = -1;\n
    v13 = cgc_malloc(*(&v20));\n
    v12[0] = cgc_malloc(v15 * 4);\n
    v11 = v1 - 8996;\n
    memset(&v7, 0, 2);\n
    v5 = 0;\n
    v4 = 0;\n
    cgc_memcpy(v13, v19, *(&v20));\n
    if (!(!cgc_sanitize_formula(v13)))\n
        goto LABEL_0x405bdb;\n
    v9 = v13;\n
    v10 = v9;\n
    v3 = 0;\n
    v2 = 0;\n
}\n
", "4217859:sub_405c03": null, "4217872:cgc_eval_function": null, "4218470:sub_405e66": null, "4218480:cgc_is_arg_arithmetic": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_arg_arithmetic(char *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 1;\n
    if (!cgc_memcmp(v3, \"+\", 2))\n
        return v1 & 1;\n
    v1 = 1;\n
    if (!cgc_memcmp(v3, v0 - 9002, 2))\n
        return v1 & 1;\n
    v1 = 1;\n
    if (cgc_memcmp(v3, v0 - 8989, 2))\n
    {\n
        v1 = !cgc_memcmp(v3, v0 - 9013, 2);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4218701:sub_405f4d": null, "4218704:cgc_handle_op_avg": null, "4219014:sub_406086": null, "4219024:cgc_handle_op_count": null, "4219324:sub_4061bc": null, "4219328:cgc_handle_op_max": null, "4219755:sub_40636b": null, "4219760:cgc_handle_op_median": null, "4220831:sub_40679f": null, "4220832:cgc_handle_op_min": null, "4221257:sub_406949": null, "4221264:cgc_handle_op_stddev": null, "4221764:sub_406b44": null, "4221776:cgc_handle_op_abs": null, "4222037:sub_406c55": null, "4222048:cgc_handle_op_add": null, "4222415:sub_406dcf": null, "4222416:cgc_handle_op_cos": null, "4222677:sub_406ed5": null, "4222688:cgc_handle_op_ln": null, "4222982:sub_407006": null, "4222992:cgc_handle_op_log10": null, "4223286:sub_407136": null, "4223296:cgc_handle_op_power": null, "4224053:sub_407435": null, "4224064:cgc_handle_op_product": null, "4224431:sub_4075af": null, "4224432:cgc_handle_op_quotient": null, "4224832:cgc_handle_op_sin": null, "4225093:sub_407845": null, "4225104:cgc_handle_op_sqrt": null, "4225390:sub_40796e": null, "4225392:cgc_handle_op_subtract": null, "4225759:sub_407adf": null, "4225760:cgc_handle_op_sum": null, "4225999:sub_407bcf": null, "4226000:cgc_strtrim": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtrim(char *v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen(v6) + 1;\n
    if (v2 > a0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (v2 != 1)\n
    {\n
        if (a1 != 1 && !(a1 == 3))\n
            goto LABEL_407cc4;\n
        v1 = v6;\n
        for (v3 = 0; v3 < v2; v1 += 1)\n
        {\n
            if (cgc_strchr(v0 - 8976, *(v1)))\n
            {\n
                v3 += 1;\n
            }\n
            else\n
            {\n
                cgc_memcpy(v6, v1, v2 - v3);\n
                break;\n
            }\n
        }\n
LABEL_407cc4:\n
        if (a1 != 2 && !(a1 == 3))\n
            goto LABEL_407d6d;\n
        if (v2 != 1)\n
        {\n
            for (v3 = v2 - 2; v3 >= 0; v3 -= 1)\n
            {\n
                if (!cgc_strchr(v0 - 8976, v6[v3]))\n
                {\n
                    v6[1 + v3] = 0;\n
                    break;\n
                }\n
                else if (!v3)\n
                {\n
                    v6[v3] = 0;\n
                    break;\n
                }\n
            }\n
        }\n
LABEL_407d6d:\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4226429:sub_407d7d": null, "4226432:cgc_valid_cell_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_valid_cell_id(char v11[2])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x1b]\n
    char v3;  // [bp-0x1a]\n
    char v4;  // [bp-0x17]\n
    char v5;  // [bp-0x16]\n
    char v6;  // [bp-0x15]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v8[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
\n
    v10 = v12;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_strlen(v11) < 2)\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    *(&v8) = 0;\n
    v7 = 0;\n
    v2 = 0;\n
    v1 = cgc_toupper(v11[0]);\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v4 = v1;\n
        v1 = cgc_toupper(v11[1]);\n
        if (v1 >= 65 && v1 <= 90)\n
            goto LABEL_407e60;\n
        if (v1 >= 48 && v1 <= 57)\n
        {\n
LABEL_407e60:\n
            if (v1 >= 48 && v1 <= 57)\n
            {\n
                v13 = v7;\n
                v7 = v13 + 1;\n
                (&v3)[v13] = v1;\n
                v5 = 0;\n
                goto LABEL_407e9f;\n
            }\n
            v5 = v1;\n
            v6 = 0;\n
LABEL_407e9f:\n
            v8 = 2;\n
            while (true)\n
            {\n
                if (v8 >= 5)\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
                if (v11[v8] == v2 && v7)\n
                {\n
                    (&v3)[v7] = 0;\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                if (v11[v8] < 48)\n
                    break;\n
                if (v11[v8] > 57)\n
                    break;\n
                if (v7 >= 2)\n
                    break;\n
                v14 = v7;\n
                v7 = v14 + 1;\n
                (&v3)[v14] = v11[v8];\n
                v8 += 1;\n
            }\n
            v9 = -1;\n
            return v9;\n
        }\n
        v9 = -1;\n
        return v9;\n
    }\n
    v9 = -1;\n
    return v9;\n
}\n
", "4226912:cgc_get_rowcol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_rowcol(char v6[2], char a0[3], unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ecx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_strlen(v6) < 2)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    *(&v3) = 0;\n
    v2 = 0;\n
    v1 = cgc_toupper(v6[0]);\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        a0[0] = v1;\n
        v1 = cgc_toupper(v6[1]);\n
        if (v1 >= 65 && v1 <= 90)\n
            goto LABEL_408048;\n
        if (v1 >= 48 && v1 <= 57)\n
        {\n
LABEL_408048:\n
            if (v1 >= 48 && v1 <= 57)\n
            {\n
                v8 = v2;\n
                v2 = v8 + 1;\n
                *((a1 + v8)) = v1;\n
                a0[1] = 0;\n
                goto LABEL_408092;\n
            }\n
            a0[1] = v1;\n
            a0[2] = 0;\n
LABEL_408092:\n
            v3 = 2;\n
            while (true)\n
            {\n
                if (v3 >= 5)\n
                {\n
                    v4 = -1;\n
                    return v4;\n
                }\n
                if (v6[v3] == a2 && v2)\n
                {\n
                    *((a1 + v2)) = 0;\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (v6[v3] < 48)\n
                    break;\n
                if (v6[v3] > 57)\n
                    break;\n
                if (v2 >= 2)\n
                    break;\n
                v9 = v2;\n
                v2 = v9 + 1;\n
                *((a1 + v9)) = v6[v3];\n
                v3 += 1;\n
            }\n
            v4 = -1;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4227416:sub_408158": null, "4227424:cgc_sanitize_formula": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sanitize_formula(char *v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ecx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen(v7);\n
    if (v2 > a0)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v1 = cgc_calloc(1, a0);\n
    if (!v1)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v4 = 0;\n
    for (v3 = 0; v4 < v2; v4 += 1)\n
    {\n
        if (!cgc_strchr(v0 - 8976, v7[v4]))\n
        {\n
            v9 = v3;\n
            v3 = v9 + 1;\n
            v1[v9] = v7[v4];\n
        }\n
    }\n
    cgc_memcpy(v7, v1, a0);\n
    cgc_free(v1);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4227708:sub_40827c": null, "4227712:cgc_atof": null, "4228381:sub_40851d": null, "4228384:cgc_ftoa": null, "4229193:sub_408849": null, "4229200:cgc_itoa": "int cgc_itoa(unsigned int v7, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x1e]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
    char *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v8;  // ecx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // ecx\n
\n
    v5 = 10;\n
    if (a1 <= 1)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v4 = 0;\n
    v3 = 0;\n
    if (v7 < 0)\n
        v3 = 1;\n
    do\n
    {\n
        if (v3)\n
        {\n
            v8 = v4;\n
            v4 = v8 + 1;\n
            v8[a0] = 48 - ((v7 >> 31 CONCAT v7) /m v5 >> 32);\n
        }\n
        else\n
        {\n
            v9 = v4;\n
            v4 = v9 + 1;\n
            *((a0 + v9)) = ((v7 >> 31 CONCAT v7) /m v5 >> 32) + 48;\n
        }\n
        v10 = v7;\n
        v7 = (v10 >> 31 CONCAT v10) /m v5;\n
        v0 = 0;\n
        if (v4 < a1 - 1)\n
            v0 = v7;\n
    } while ((v0 & 1));\n
    if (!v7)\n
    {\n
        if (v4 != a1 - 1)\n
        {\n
LABEL_408954:\n
            if (v3)\n
            {\n
                v12 = v4;\n
                v4 = v12 + 1;\n
                *((a0 + v12)) = 45;\n
            }\n
            v13 = v4;\n
            v4 = v13 - 1;\n
            *((a0 + v13)) = 0;\n
            for (v2 = 0; v4 > v2; *((a0 + v15)) = v1)\n
            {\n
                v1 = *((a0 + v2));\n
                v14 = v2;\n
                v2 = v14 + 1;\n
                *((a0 + v14)) = *((a0 + v4));\n
                v15 = v4;\n
                v4 = v15 - 1;\n
            }\n
            v6 = a0;\n
            return v6;\n
        }\n
        else if (!v3)\n
        {\n
            goto LABEL_408954;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4229603:sub_4089e3": null, "4229616:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v8;  // [bp+0x0]\n
    unsigned int v10;  // [bp+0xffdf0]\n
    unsigned int v11;  // [bp+0xffdf8]\n
    void* v12;  // [bp+0xffffc]\n
    unsigned int v14;  // ebx\n
\n
    v14 = v10;\n
    v11 = 1;\n
    v8 = v14 - 8719;\n
    cgc_printf(v14 - 8719);\n
    v12 = 0;\n
    return;\n
}\n
", "4230087:sub_408bc7": null, "4230096:cgc_readline": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readline(unsigned int v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v3 = 0; v3 < a1; v3 += 1)\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v5, a0, 1) && !(!*(&v2)))\n
            goto LABEL_408c4a;\n
        cgc_exit();\n
LABEL_408c4a:\n
        if (*(a0) == 10)\n
            break;\n
        a0 += 1;\n
    }\n
    if (v3 == a1 && *(a0) != 10)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    if (*(a0) != 10)\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    *(a0) = 0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4230354:sub_408cd2": null, "4230368:cgc_parse_line": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_line(char *v26)\n
{\n
    unsigned int v0;  // [bp-0x284]\n
    unsigned int v1;  // [bp-0x280]\n
    unsigned int v2;  // [bp-0x27c]\n
    struct_0 *v3;  // [bp-0x278]\n
    unsigned int v4;  // [bp-0x274]\n
    struct_0 *v5;  // [bp-0x270]\n
    struct_0 *v6;  // [bp-0x26c]\n
    struct_0 *v7;  // [bp-0x268]\n
    char *v8;  // [bp-0x264]\n
    struct_0 *v9;  // [bp-0x260]\n
    struct_0 *v10;  // [bp-0x25c]\n
    struct_0 *v11;  // [bp-0x258]\n
    char *v12;  // [bp-0x254]\n
    struct_0 *v13;  // [bp-0x250]\n
    struct_0 *v14;  // [bp-0x24c]\n
    struct_0 *v15;  // [bp-0x248]\n
    char *v16;  // [bp-0x244]\n
    unsigned int v17;  // [bp-0x240]\n
    unsigned int v18;  // [bp-0x23c]\n
    char v19;  // [bp-0x238]\n
    unsigned int v20;  // [bp-0x38]\n
    char v21;  // [bp-0x34]\n
    unsigned int v22;  // [bp-0x14]\n
    unsigned int v23;  // [bp-0x10]\n
    unsigned int v24;  // [bp-0xc]\n
    unsigned int v25;  // [bp-0x8]\n
    unsigned int v27;  // ebx\n
\n
    v25 = v27;\n
    v17 = &_GLOBAL_OFFSET_TABLE_;\n
    v23 = 0;\n
    if (cgc_strtrim(v26, 0x200, 1) == -1)\n
    {\n
        v24 = -1;\n
        return v24;\n
    }\n
    v15 = &v21;\n
    v16 = v26;\n
    cgc_memcpy(v15, v16, cgc_strlen(v17 - 8707));\n
    v22 = 0;\n
    while (true)\n
    {\n
        v14 = v22;\n
        if (v14 >= cgc_strlen(v17 - 8707))\n
            break;\n
        (&v21)[v22] = cgc_toupper((&v21)[v22]);\n
        v22 += 1;\n
    }\n
    v13 = &v21;\n
    if (cgc_memcmp(v13, v17 - 8707, cgc_strlen(v17 - 8707)))\n
    {\n
        v11 = &v21;\n
        v12 = v26;\n
        cgc_memcpy(v11, v12, cgc_strlen(v17 - 8701));\n
        v22 = 0;\n
        while (true)\n
        {\n
            v10 = v22;\n
            if (v10 >= cgc_strlen(v17 - 8701))\n
                break;\n
            (&v21)[v22] = cgc_toupper((&v21)[v22]);\n
            v22 += 1;\n
        }\n
        v9 = &v21;\n
        if (!cgc_memcmp(v9, v17 - 8701, cgc_strlen(v17 - 8701)))\n
        {\n
            v23 = 1;\n
        }\n
        else\n
        {\n
            v7 = &v21;\n
            v8 = v26;\n
            cgc_memcpy(v7, v8, cgc_strlen(v17 - 8695));\n
            v22 = 0;\n
            while (true)\n
            {\n
                v6 = v22;\n
                if (v6 >= cgc_strlen(v17 - 8695))\n
                    break;\n
                (&v21)[v22] = cgc_toupper((&v21)[v22]);\n
                v22 += 1;\n
            }\n
            v5 = &v21;\n
            if (!cgc_memcmp(v5, v17 - 8695, cgc_strlen(v17 - 8695)))\n
            {\n
                v0 = v26;\n
                if (!cgc_clear_cell(v0 + cgc_strlen(v17 - 8695)))\n
                {\n
                    v24 = 0;\n
                    return v24;\n
                }\n
                v24 = -8;\n
                return v24;\n
            }\n
            else\n
            {\n
                cgc_memcpy(&v21, v26, 5);\n
                for (v22 = 0; v22 < 5; v22 += 1)\n
                {\n
                    (&v21)[v22] = cgc_toupper((&v21)[v22]);\n
                }\n
                if (!cgc_memcmp(&v21, v17 - 8688, 5))\n
                {\n
                    v24 = 1;\n
                    return v24;\n
                }\n
                v20 = cgc_strsep(&v26, v17 - 8646);\n
                if (v20 && v26)\n
                {\n
                    if (cgc_set_cell(v20, v26, 0x200))\n
                    {\n
                        v24 = -0x4;\n
                        return v24;\n
                    }\n
                    v24 = 0;\n
                    return v24;\n
                }\n
                v24 = -1;\n
                return v24;\n
            }\n
        }\n
    }\n
    cgc_strtrim(v26, 0x200, 2);\n
    v3 = &v21;\n
    v4 = v26;\n
    cgc_memcpy(v3, v4 + cgc_strlen(v17 - 8707), 6);\n
    for (v22 = 0; v22 < 6; v22 += 1)\n
    {\n
        (&v21)[v22] = cgc_toupper((&v21)[v22]);\n
    }\n
    if (!cgc_memcmp(&v21, v17 - 8683, 6))\n
    {\n
        cgc_print_table();\n
        v24 = 0;\n
        return v24;\n
    }\n
    v2 = v26;\n
    if (cgc_valid_cell_id(v2 + cgc_strlen(v17 - 8707)) == -1)\n
    {\n
        v24 = -2;\n
        return v24;\n
    }\n
    v1 = v26;\n
    v18 = cgc_show_cell(v1 + cgc_strlen(v17 - 8707), v23, &v19, 0x200);\n
    if (!v23)\n
        cgc_printf(v17 - 8662);\n
    else\n
        cgc_printf(v17 - 8677);\n
    v24 = 0;\n
    return v24;\n
}\n
", "4232064:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_print_table(v2, v3);\n
    return;\n
}\n
", "4232096:cgc_print_table": "int cgc_print_table()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    return cgc_print_assigned_cells();\n
}\n
", "4232124:sub_4093bc": null, "4232128:cgc_peek_front": "int cgc_peek_front(unsigned int *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *(v1);\n
    return v0;\n
}\n
", "4232173:sub_4093ed": null, "4232176:cgc_enqueue": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_enqueue(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v2[2];  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v2[0] = cgc_malloc(8);\n
    v2[0] = a0;\n
    v2[1] = 0;\n
    if (!*(v4))\n
    {\n
        *(v4) = &v2[0];\n
    }\n
    else\n
    {\n
        for (v1 = *(v4); *((v1 + 4)); v1 = *((v1 + 4)));\n
        *((v1 + 4)) = v2;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4232347:sub_40949b": null, "4232352:cgc_enqueue_copy": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_enqueue_copy(struct struct_1 **v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_1 *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen(a0) + 1;\n
    if (v3 > a1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = cgc_malloc(8);\n
    v2->field_0 = cgc_malloc(v3);\n
    cgc_memcpy(v2->field_0, a0, v3);\n
    v2->field_4 = 0;\n
    if (!*(v5))\n
    {\n
        *(v5) = &v2->field_0;\n
    }\n
    else\n
    {\n
        for (v1 = *(v5); *((v1 + 4)); v1 = *((v1 + 4)));\n
        *((v1 + 4)) = v2;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4232613:sub_4095a5": null, "4232624:cgc_dequeue_copy": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dequeue_copy(struct struct_0 **v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[2];  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2[0] = *(v4);\n
    v1 = v2[0];\n
    *(v4) = v2[1];\n
    cgc_free(v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4232729:sub_409619": null, "4232736:cgc_clear_queue": "typedef struct struct_1 {\n
    unsigned int field_0[2];\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear_queue(struct struct_0 **v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v3;\n
    if (!*(v4))\n
        return v3;\n
    v2 = &*(v3)->field_0;\n
    while (*((v2 + 4)))\n
    {\n
        cgc_free(*(v2));\n
        v1 = v2;\n
        v2 = *((v2 + 4));\n
        cgc_free(v1);\n
    }\n
    cgc_free(*(v2));\n
    cgc_free(v2);\n
    v4 = v3;\n
    *(v4) = 0;\n
    return v3;\n
}\n
", "4232894:sub_4096be": null, "4232896:cgc_peek_top": "int cgc_peek_top(unsigned int *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *(v1);\n
    return v0;\n
}\n
", "4232941:sub_4096ed": null, "4232944:cgc_push": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_push(unsigned int *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[2];  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1[0] = cgc_malloc(8);\n
    v1[0] = a0;\n
    if (!*(v3))\n
        v1[1] = 0;\n
    else\n
        v1[1] = *(v3);\n
    *(v3) = v1;\n
    v2 = 0;\n
    return v2;\n
}\n
", "4233090:sub_409782": null, "4233104:cgc_push_copy": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_push_copy(unsigned int *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v2 = cgc_strlen(a0) + 1;\n
    if (v2 > a1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v1 = cgc_malloc(8);\n
    v1->field_0 = cgc_malloc(v2);\n
    cgc_memcpy(v1->field_0, a0, v2);\n
    if (!*(v4))\n
        v1->field_4 = 0;\n
    else\n
        v1->field_4 = *(v4);\n
    *(v4) = v1;\n
    v3 = 0;\n
    return v3;\n
}\n
", "4233340:sub_40987c": null, "4233344:cgc_pop_copy": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pop_copy(struct struct_0 **v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[2];  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2[0] = *(v4);\n
    v1 = v2[0];\n
    *(v4) = v2[1];\n
    cgc_free(v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4233449:sub_4098e9": null, "4233456:cgc_clear_stack": "typedef struct struct_1 {\n
    unsigned int field_0[2];\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear_stack(struct struct_0 **v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v3;\n
    if (!*(v4))\n
        return v3;\n
    v2 = &*(v3)->field_0;\n
    while (*((v2 + 4)))\n
    {\n
        cgc_free(*(v2));\n
        v1 = v2;\n
        v2 = *((v2 + 4));\n
        cgc_free(v1);\n
    }\n
    cgc_free(*(v2));\n
    cgc_free(v2);\n
    v4 = v3;\n
    *(v4) = 0;\n
    return v3;\n
}\n
", "4233616:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_fabs": null, "5242884:cgc_pow": null, "5242888:__libc_start_main": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_cos": null, "5242904:cgc_allocate": null, "5242908:cgc_remainder": null, "5242912:cgc_log": null, "5242916:memset": null, "5242920:cgc_deallocate": null, "5242924:cgc_log10": null, "5242928:cgc_sin": null, "5242932:cgc_sqrt": null, "5242936:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}