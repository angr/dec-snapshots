{"4198400:_init": "extern struct_0 *g_4057dc;\n
\n
int _init()\n
{\n
    if (g_4057dc)\n
    {\n
        g_4057dc();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198480:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198496:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198512:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198528:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198544:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4198560:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198576:sub_4010b0": "int sub_4010b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198582:sub_4010b6": null, "4198592:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198635:sub_4010eb": null, "4198636:sub_4010ec": "int sub_4010ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198640:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198644:sub_4010f4": null, "4198656:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 18147;\n
    v6 = v5 + 13;\n
    v7 = v5 + 13;\n
    if (v7 == v6)\n
        return v5 + 13;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198707:sub_401133": "int sub_401133()\n
{\n
}\n
", "4198713:sub_401139": "int sub_401139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198720:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 18083;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 13;\n
    v9 = (v6 + 13 - (v6 + 13) >> 31) + (13 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198791:sub_401187": "int sub_401187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198800:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4057d8;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__TMC_END__)\n
        return;\n
    if (g_4057d8)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010b0();\n
    }\n
    deregister_tm_clones();\n
    __TMC_END__ = 1;\n
    return;\n
}\n
", "4198875:sub_4011db": "int sub_4011db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198880:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198889:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198893:sub_4011ed": null, "4198896:cgc_floor": null, "4199060:sub_401294": null, "4199072:cgc_round_away_from_zero": null, "4199226:sub_40133a": null, "4199232:cgc_round": null, "4199376:cgc_abs": "int cgc_abs(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 > 0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 *= -1;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4199422:sub_4013fe": null, "4199424:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4199516:sub_40145c": null, "4199520:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4199729:sub_401531": null, "4199744:cgc_float_to_str": null, "4200602:sub_40189a": null, "4200608:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v10, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    struct_0 *v3;  // [bp-0x68], Other Possible Types: unsigned int\n
    unsigned long v4;  // [bp-0x64]\n
    struct_0 *v5;  // [bp-0x58], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x54]\n
    char v7;  // [bp-0x50]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int *v11;  // eax\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    if (!v10)\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    while (true)\n
    {\n
        if (!*(v10))\n
        {\n
            v9 = v8;\n
            return v9;\n
        }\n
        if (*(v10) != 64)\n
        {\n
            cgc_putc(*(v10));\n
            v10 += 1;\n
            v8 += 1;\n
        }\n
        else\n
        {\n
            v10 += 1;\n
            v1 = *(v10);\n
            if (!v1)\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
            if (v1 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v1 == 100)\n
            {\n
                v11 = a0;\n
                a0 = v11 + 1;\n
                v6 = *(v11);\n
                cgc_int_to_str(v6, &v7);\n
                for (v5 = &v7; *(v5); v5 += 1)\n
                {\n
                    cgc_putc(*(v5));\n
                    v8 += 1;\n
                }\n
            }\n
            else\n
            {\n
                if (v1 != 102)\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t23,0] = t26\n
                [D] PutI(136:I8x8)[t23,0] = 0x01\n
                v4 = ([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan);\n
                [D] PutI(136:I8x8)[t38,0] = 0x00\n
                v14 = ftop<4> - 1 + 1;\n
                v15 = v14 - 1;\n
                [D] PutI(72:F64x8)[t47,0] = t50\n
                [D] PutI(136:I8x8)[t47,0] = 0x01\n
                v0 = &v7;\n
                [D] PutI(136:I8x8)[t66,0] = 0x00\n
                v16 = v15 + 1;\n
                cgc_float_to_str();\n
                for (v3 = &v7; *(v3); v3 += 1)\n
                {\n
                    cgc_putc(*(v3));\n
                    v8 += 1;\n
                }\n
            }\n
            v10 += 1;\n
        }\n
    }\n
}\n
", "4201092:sub_401a84": null, "4201104:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4201162:sub_401aca": null, "4201168:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4201262:sub_401b2e": null, "4201264:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201318:sub_401b66": null, "4201328:cgc_isnan": null, "4201351:sub_401b87": null, "4201360:cgc_isinf": null, "4201407:sub_401bbf": null, "4201408:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_401df2:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_401dcb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_401dcb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_401dcb;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_401df2;\n
                if (!v4)\n
                {\n
LABEL_401d47:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_401dcb;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_401d47;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_401dcb:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4201996:sub_401e0c": null, "4202000:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4202404:sub_401fa4": null, "4202416:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4202507:sub_40200b": null, "4202512:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4202620:sub_40207c": null, "4202624:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4202732:sub_4020ec": null, "4202736:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4202931:sub_4021b3": null, "4202944:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4203021:sub_40220d": null, "4203024:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            v4[v5] = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4203216:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4203375:sub_40236f": null, "4203376:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4203575:sub_402437": null, "4203584:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2, cgc_strlen(v5));\n
}\n
", "4203667:sub_402493": null, "4203680:cgc_getColor": "int cgc_getColor(char v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 <= 102 && v1 >= 97)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (v1 <= 108 && v1 >= 103)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 46;\n
    return v0;\n
}\n
", "4203778:sub_402502": null, "4203792:cgc_displayboard": "typedef struct struct_0 {\n
    char padding_0[56];\n
    unsigned int field_38;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_displayboard()\n
{\n
    void* v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v3 = 7; v3 >= 0; v3 = v5)\n
    {\n
        for (v2 = 0; v2 < 8; v2 += 1)\n
        {\n
            v0 = 0;\n
            cgc_transmit(0, &v3->padding_0[8 * v2 + v1->field_38], 1);\n
        }\n
        cgc_printf(&v1[99].padding_0[37]);\n
        v5 = &v3->padding_0[1];\n
    }\n
    return v5;\n
}\n
", "4203953:sub_4025b1": null, "4203968:cgc_initboard": "typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_1 *field_38;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[4];\n
    char field_6;\n
    char field_7;\n
    char field_8;\n
    char field_9;\n
    char padding_a[4];\n
    char field_e;\n
    char field_f;\n
    char field_10;\n
    char field_11;\n
    char padding_12[4];\n
    char field_16;\n
    char field_17;\n
    char field_18;\n
    char field_19;\n
    char padding_1a[4];\n
    char field_1e;\n
    char field_1f;\n
    char field_20;\n
    char field_21;\n
    char padding_22[4];\n
    char field_26;\n
    char field_27;\n
    char field_28;\n
    char field_29;\n
    char padding_2a[4];\n
    char field_2e;\n
    char field_2f;\n
    char field_30;\n
    char field_31;\n
    char padding_32[4];\n
    char field_36;\n
    char field_37;\n
    char field_38;\n
    char field_39;\n
    char padding_3a[4];\n
    char field_3e;\n
    char field_3f;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initboard()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v4;  // eax\n
    char v5[64];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v2 = 0; v2 < 8; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < 8; v1 += 1)\n
        {\n
            *(&v0->field_38->field_0 + 0x8 * v2 + v1) = 46;\n
        }\n
    }\n
    v4 = v0;\n
    v4->field_38->field_0 = 100;\n
    v4->field_38->field_8 = 98;\n
    v4->field_38->field_10 = 99;\n
    v4->field_38->field_18 = 102;\n
    v4->field_38->field_20 = 101;\n
    v4->field_38->field_28 = 99;\n
    v4->field_38->field_30 = 98;\n
    v4->field_38->field_38 = 100;\n
    v4->field_38->field_1 = 97;\n
    v4->field_38->field_9 = 97;\n
    v4->field_38->field_11 = 97;\n
    v4->field_38->field_19 = 97;\n
    v4->field_38->field_21 = 97;\n
    v4->field_38->field_29 = 97;\n
    v4->field_38->field_31 = 97;\n
    v4->field_38->field_39 = 97;\n
    v4->field_38->field_6 = 103;\n
    v4->field_38->field_e = 103;\n
    v4->field_38->field_16 = 103;\n
    v4->field_38->field_1e = 103;\n
    v4->field_38->field_26 = 103;\n
    v4->field_38->field_2e = 103;\n
    v4->field_38->field_36 = 103;\n
    v4->field_38->field_3e = 103;\n
    v4->field_38->field_7 = 106;\n
    v4->field_38->field_f = 104;\n
    v4->field_38->field_17 = 105;\n
    v4->field_38->field_1f = 108;\n
    v4->field_38->field_27 = 107;\n
    v4->field_38->field_2f = 105;\n
    v4->field_38->field_37 = 104;\n
    v5 = v4->field_38;\n
    v5[63] = 106;\n
    return v5;\n
}\n
", "4204407:sub_402777": null, "4204416:cgc_getPiece": "extern unsigned int ptr_array;\n
\n
int cgc_getPiece(unsigned int v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
\n
    v0 = v2;\n
    v1 = a0;\n
    return v1[8 * v0 + ptr_array];\n
}\n
", "4204472:sub_4027b8": null, "4204480:cgc_checkNoCollision": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char *field_c;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkNoCollision(char v26, char *a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    unsigned int v3;  // [bp-0x98]\n
    struct_1 *v4;  // [bp-0x94]\n
    char v5;  // [bp-0x8d]\n
    unsigned int v6;  // [bp-0x8c]\n
    char *v7;  // [bp-0x88]\n
    unsigned int v8;  // [bp-0x84]\n
    void* v9;  // [bp-0x80], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x7c]\n
    unsigned int v11;  // [bp-0x78]\n
    unsigned int v12;  // [bp-0x74]\n
    unsigned int v13;  // [bp-0x70]\n
    unsigned int v14;  // [bp-0x6c]\n
    unsigned int v15;  // [bp-0x68]\n
    char v16;  // [bp-0x61]\n
    struct_0 *v17;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v18;  // [bp-0x5c]\n
    char v19;  // [bp-0x58]\n
    unsigned int v20;  // [bp-0x1c]\n
    char *v21;  // [bp-0x18]\n
    unsigned int v22;  // [bp-0x14]\n
    unsigned int v23;  // [bp-0x10]\n
    unsigned int v24;  // [bp-0xc]\n
    unsigned int v25;  // [bp-0x8]\n
    unsigned int v27;  // ebx\n
    struct_2 *v28;  // eax\n
    struct_1 *v29;  // eax\n
    struct_1 *v32;  // ecx\n
    struct_1 *v33;  // ecx\n
    struct_1 *v34;  // ecx\n
    struct_1 *v35;  // ecx\n
    struct_1 *v36;  // ecx\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    struct_1 *v40;  // ecx\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // eax\n
\n
    v25 = v27;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = &v26;\n
    v22 = v26;\n
    v23 = a0;\n
    v20 = a1;\n
    v21 = a2;\n
    v17 = 0;\n
    v16 = cgc_getPiece(v26, a0);\n
    if (v16 != 98 && v16 != 104)\n
    {\n
        if (cgc_getColor(v16) == 1)\n
        {\n
            v28 = v4;\n
            if (cgc_getColor(cgc_getPiece(v28->field_8, v28->field_c)) == 1)\n
            {\n
                v24 = 0;\n
                return v24;\n
            }\n
        }\n
        if (!cgc_getColor(v16))\n
        {\n
            v29 = v4;\n
            if (!cgc_getColor(cgc_getPiece(v29->field_8, v29->field_c)))\n
            {\n
                v24 = 0;\n
                return v24;\n
            }\n
        }\n
        v32 = v4;\n
        if (*(&v32->field_0) != v32->field_8)\n
        {\n
            v34 = v4;\n
            if (v34->field_4 != v34->field_c)\n
            {\n
                v36 = v4;\n
                v40 = v4;\n
                v11 = cgc_abs(v36->field_8 - *(&v36->field_0));\n
                v1 = v11;\n
                if (v1 == cgc_abs(v40->field_c - v40->field_4))\n
                {\n
                    for (v10 = 1; v10 <= v11; v10 += 1)\n
                    {\n
                        if (v21 > v23 && v20 > v22)\n
                        {\n
                            *(&(&v18)[8 * v17]) = v22 + v10;\n
                            v43 = v17;\n
                            v17 = v43 + 1;\n
                            *(&(&v19)[8 * v43]) = v23 + v10;\n
                            goto LABEL_402c55;\n
                        }\n
                        if (v21 > v23 && v20 < v22)\n
                        {\n
                            *(&(&v18)[8 * v17]) = v22 - v10;\n
                            v44 = v17;\n
                            v17 = v44 + 1;\n
                            *(&(&v19)[8 * v44]) = v23 + v10;\n
                            goto LABEL_402c55;\n
                        }\n
                        if (v21 < v23 && v20 > v22)\n
                        {\n
                            *(&(&v18)[8 * v17]) = v22 + v10;\n
                            v45 = v17;\n
                            v17 = v45 + 1;\n
                            *(&(&v19)[8 * v45]) = v23 - v10;\n
                            goto LABEL_402c55;\n
                        }\n
                        if (v21 < v23 && v20 < v22)\n
                        {\n
                            *(&(&v18)[8 * v17]) = v22 - v10;\n
                            v46 = v17;\n
                            v17 = v46 + 1;\n
                            *(&(&v19)[8 * v46]) = v23 - v10;\n
                        }\n
LABEL_402c55:\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                v35 = v4;\n
                if (*(&v35->field_0) >= v35->field_8)\n
                {\n
                    for (v12 = *(&v4->field_0) - 1; v12 >= v4->field_8; v12 -= 1)\n
                    {\n
                        *(&(&v18)[8 * v17]) = v12;\n
                        v42 = v17;\n
                        v17 = v42 + 1;\n
                        *(&(&v19)[8 * v42]) = v4->field_4;\n
                    }\n
                }\n
                else\n
                {\n
                    for (v13 = *(&v4->field_0) + 1; v13 <= v4->field_8; v13 += 1)\n
                    {\n
                        *(&(&v18)[8 * v17]) = v13;\n
                        v41 = v17;\n
                        v17 = v41 + 1;\n
                        *(&(&v19)[8 * v41]) = v4->field_4;\n
                    }\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v33 = v4;\n
            if (v33->field_4 >= v33->field_c)\n
            {\n
                for (v14 = v4->field_4 - 1; v14 >= v4->field_c; v14 -= 1)\n
                {\n
                    *(&(&v18)[8 * v17]) = *(&v4->field_0);\n
                    v39 = v17;\n
                    v17 = v39 + 1;\n
                    *(&(&v19)[8 * v39]) = v14;\n
                }\n
            }\n
            else\n
            {\n
                for (v15 = v4->field_4 + 1; v15 <= v4->field_c; v15 += 1)\n
                {\n
                    *(&(&v18)[8 * v17]) = *(&v4->field_0);\n
                    v38 = v17;\n
                    v17 = v38 + 1;\n
                    *(&(&v19)[8 * v38]) = v15;\n
                }\n
            }\n
        }\n
        v9 = 0;\n
        v8 = 0;\n
        while (true)\n
        {\n
            if (v8 >= v17)\n
            {\n
                v24 = 1;\n
                return v24;\n
            }\n
            else if (v9 < 1)\n
            {\n
                v6 = *(&(&v18)[8 * v8]);\n
                v7 = *(&(&v19)[8 * v8]);\n
                v5 = cgc_getPiece(v6, v7);\n
                if (v5 != 46)\n
                {\n
                    v0 = cgc_getColor(v16);\n
                    if (v0 == cgc_getColor(v5))\n
                    {\n
                        v24 = 0;\n
                        return v24;\n
                    }\n
                    v9 += 1;\n
                }\n
                v8 += 1;\n
            }\n
            else\n
            {\n
                v24 = 0;\n
                return v24;\n
            }\n
        }\n
    }\n
    v2 = cgc_getColor(v16);\n
    if (v2 == cgc_getColor(cgc_getPiece(v20, v21)))\n
    {\n
        v24 = 0;\n
        return v24;\n
    }\n
    v24 = 1;\n
    return v24;\n
}\n
", "4205958:sub_402d86": null, "4205968:cgc_performMove": "typedef struct struct_1 {\n
    char padding_0[48];\n
    char field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_performMove(char a0, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2[4];  // [bp-0x38]\n
    struct_1 *v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    char *v12;  // [bp-0x10]\n
    unsigned int v13;  // [bp-0xc]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v15;  // [bp+0x4]\n
    unsigned int v16;  // ebx\n
    struct_0 *v17;  // eax\n
    unsigned int v18[4];  // eax\n
    struct_0 *v19;  // eax\n
    unsigned int v20[4];  // eax\n
    struct_0 *v21;  // eax\n
    unsigned int v22[4];  // eax\n
    struct_0 *v23;  // eax\n
    unsigned int v24[4];  // eax\n
    struct_0 *v25;  // eax\n
    struct_0 *v26;  // eax\n
    unsigned int v27[4];  // eax\n
    unsigned int v28[4];  // eax\n
    struct_0 *v29;  // eax\n
    unsigned int v30[4];  // eax\n
    struct_0 *v31;  // eax\n
    struct_0 *v32;  // eax\n
    struct_0 *v33;  // eax\n
    struct_0 *v34;  // eax\n
    unsigned int v35[4];  // eax\n
    unsigned int v36[4];  // eax\n
    unsigned int v37[4];  // eax\n
    unsigned int v38[4];  // eax\n
\n
    v14 = v16;\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2[0] = &a0;\n
    v11 = v15;\n
    v12 = a0;\n
    v9 = a1;\n
    v10 = a2;\n
    v8 = cgc_getPiece(v11, v12);\n
    if (v3->field_30 != 1)\n
    {\n
        if (cgc_getColor(v8) == 1)\n
        {\n
            v13 = 0;\n
            return v13;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_getColor(v8))\n
        {\n
            v13 = 0;\n
            return v13;\n
        }\n
    }\n
    if (v8 == 98)\n
    {\n
        if (v9 != v11 + 2 && !(v9 == v11 - 2))\n
            goto LABEL_402ef8;\n
        if (v10 != v12 + 1 && !(v10 == v12 + 1))\n
            goto LABEL_402ef8;\n
        v17 = v2;\n
        if (cgc_checkNoCollision(v17->field_0, v17->field_4, v17->field_8, v17->field_c))\n
        {\n
            v18 = v2;\n
            cgc_swap(v18[0], v18[1], v18[2]);\n
            v13 = 1;\n
            return v13;\n
        }\n
LABEL_402ef8:\n
        if (v10 != v12 + 2 && !(v10 == v12 + 2))\n
            goto LABEL_402fa5;\n
        if (v9 != v11 + 1 && !(v9 == v11 - 1))\n
            goto LABEL_402fa5;\n
        v21 = v2;\n
        if (cgc_checkNoCollision(v21->field_0, v21->field_4, v21->field_8, v21->field_c))\n
        {\n
            v22 = v2;\n
            cgc_swap(v22[0], v22[1], v22[2]);\n
            v13 = 1;\n
            return v13;\n
        }\n
LABEL_402fa5:\n
        v13 = 0;\n
        return v13;\n
    }\n
    else\n
    {\n
        if (v9 <= 7 && v9 >= 0 && v10 <= 7 && v10 >= 0)\n
        {\n
            if (v8 == 46)\n
            {\n
                v13 = 0;\n
                return v13;\n
            }\n
            else if (v8 != 97)\n
            {\n
LABEL_40309c:\n
                if (v8 != 103)\n
                {\n
LABEL_403138:\n
                    if (v8 == 104)\n
                    {\n
                        if (v9 != v11 + 2 && !(v9 == v11 - 2))\n
                            goto LABEL_4031ea;\n
                        if (v10 != v12 + 1 && !(v10 == v12 + 1))\n
                            goto LABEL_4031ea;\n
                        v25 = v2;\n
                        if (cgc_checkNoCollision(v25->field_0, v25->field_4, v25->field_8, v25->field_c))\n
                        {\n
                            v27 = v2;\n
                            cgc_swap(v27[0], v27[1], v27[2]);\n
                            v13 = 1;\n
                            return v13;\n
                        }\n
LABEL_4031ea:\n
                        if (v10 != v12 + 2 && !(v10 == v12 + 2))\n
                            goto LABEL_403297;\n
                        if (v9 != v11 + 1 && !(v9 == v11 - 1))\n
                            goto LABEL_403297;\n
                        v33 = v2;\n
                        if (cgc_checkNoCollision(v33->field_0, v33->field_4, v33->field_8, v33->field_c))\n
                        {\n
                            v37 = v2;\n
                            cgc_swap(v37[0], v37[1], v37[2]);\n
                            v13 = 1;\n
                            return v13;\n
                        }\n
LABEL_403297:\n
                        v13 = 0;\n
                        return v13;\n
                    }\n
                    else\n
                    {\n
                        if (v8 != 99 && v8 != 105)\n
                        {\n
                            if (v8 != 102 && v8 != 108)\n
                            {\n
                                if (v8 != 101 && v8 != 107)\n
                                {\n
                                    if (v8 != 106 && v8 != 100)\n
                                    {\n
                                        v13 = 0;\n
                                        return v13;\n
                                    }\n
                                    if (v9 != v11 && !(v10 == v12))\n
                                        goto LABEL_4035f7;\n
                                    v32 = v2;\n
                                    if (cgc_checkNoCollision(v32->field_0, v32->field_4, v32->field_8, v32->field_c))\n
                                    {\n
                                        v36 = v2;\n
                                        cgc_swap(v36[0], v36[1], v36[2]);\n
                                        v13 = 1;\n
                                        return v13;\n
                                    }\n
LABEL_4035f7:\n
                                    v13 = 0;\n
                                    return v13;\n
                                }\n
                                v5 = v9 - v11;\n
                                v4 = v10 - v12;\n
                                if (cgc_abs(v5) <= 1 && cgc_abs(v4) <= 1)\n
                                {\n
                                    v31 = v2;\n
                                    if (!cgc_checkNoCollision(v31->field_0, v31->field_4, v31->field_8, v31->field_c))\n
                                    {\n
                                        v13 = 0;\n
                                        return v13;\n
                                    }\n
                                    v35 = v2;\n
                                    cgc_swap(v35[0], v35[1], v35[2]);\n
                                    v13 = 1;\n
                                    return v13;\n
                                }\n
                                v13 = 0;\n
                                return v13;\n
                            }\n
                            v6 = cgc_abs(v9 - v11);\n
                            v0 = v6;\n
                            if (v0 == cgc_abs(v10 - v12))\n
                            {\n
                                v29 = v2;\n
                                if (cgc_checkNoCollision(v29->field_0, v29->field_4, v29->field_8, v29->field_c))\n
                                {\n
                                    v30 = v2;\n
                                    cgc_swap(v30[0], v30[1], v30[2]);\n
                                    v13 = 1;\n
                                    return v13;\n
                                }\n
                            }\n
                            if (v9 != v11 && !(v10 == v12))\n
                                goto LABEL_403490;\n
                            v34 = v2;\n
                            if (cgc_checkNoCollision(v34->field_0, v34->field_4, v34->field_8, v34->field_c))\n
                            {\n
                                v38 = v2;\n
                                cgc_swap(v38[0], v38[1], v38[2]);\n
                                v13 = 1;\n
                                return v13;\n
                            }\n
LABEL_403490:\n
                            v13 = 0;\n
                            return v13;\n
                        }\n
                        v7 = cgc_abs(v9 - v11);\n
                        v1 = v7;\n
                        if (v1 == cgc_abs(v10 - v12))\n
                        {\n
                            v26 = v2;\n
                            if (cgc_checkNoCollision(v26->field_0, v26->field_4, v26->field_8, v26->field_c))\n
                            {\n
                                v28 = v2;\n
                                cgc_swap(v28[0], v28[1], v28[2]);\n
                                v13 = 1;\n
                                return v13;\n
                            }\n
                        }\n
                        v13 = 0;\n
                        return v13;\n
                    }\n
                }\n
                else\n
                {\n
                    if (v9 == v11 && v10 == v12 + 1)\n
                    {\n
                        v23 = v2;\n
                        if (cgc_checkNoCollision(v23->field_0, v23->field_4, v23->field_8, v23->field_c))\n
                        {\n
                            v24 = v2;\n
                            cgc_swap(v24[0], v24[1], v24[2]);\n
                            v13 = 1;\n
                            return v13;\n
                        }\n
                        goto LABEL_403138;\n
                    }\n
                    v13 = 0;\n
                    return v13;\n
                }\n
            }\n
            else\n
            {\n
                if (v9 == v11 && v10 == v12 + 1)\n
                {\n
                    v19 = v2;\n
                    if (cgc_checkNoCollision(v19->field_0, v19->field_4, v19->field_8, v19->field_c))\n
                    {\n
                        v20 = v2;\n
                        cgc_swap(v20[0], v20[1], v20[2]);\n
                        v13 = 1;\n
                        return v13;\n
                    }\n
                    goto LABEL_40309c;\n
                }\n
                v13 = 0;\n
                return v13;\n
            }\n
        }\n
        v13 = 0;\n
        return v13;\n
    }\n
}\n
", "4208147:sub_403613": null, "4208160:cgc_swap": "extern unsigned int ptr_array;\n
\n
int cgc_swap(char a0, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp+0x4]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v0 = v5;\n
    v1 = *((ptr_array + a1 * 8 + a2));\n
    *((ptr_array + a1 * 8 + a2)) = *((ptr_array + v3 * 8 + a0));\n
    *((ptr_array + v3 * 8 + a0)) = v1;\n
    return ptr_array + v3 * 8;\n
}\n
", "4208272:cgc_verifyFormat": "int cgc_verifyFormat(char v1[7], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v1[a0] = 0;\n
    if (v1[0] >= 48 && v1[0] <= 57 && v1[1] == 44 && v1[2] >= 48 && v1[2] <= 57 && v1[3] == 32 && v1[4] >= 48 && v1[4] <= 57 && v1[5] == 44 && v1[6] >= 48 && v1[6] <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4208523:sub_40378b": null, "4208528:cgc_parseUserInput": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseUserInput(unsigned int v16[4])\n
{\n
    struct struct_0 **v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    void* v8;  // [bp-0x24]\n
    char v9;  // [bp-0x20]\n
    char v10;  // [bp-0x1f]\n
    char v11;  // [bp-0x1e]\n
    char v12;  // [bp-0x1d]\n
    char *v13;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18[4];  // eax\n
    unsigned int v19[4];  // eax\n
\n
    v15 = v17;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v8 = 0;\n
    v4 = 77;\n
    v5 = 77;\n
    v6 = 77;\n
    v7 = 77;\n
    cgc_bzero(&v10, 15);\n
    v0 = &v13;\n
    v3 = cgc_receive(0, &v10, 14);\n
    if (v3)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    if (*((&v9 + v13)) == 10)\n
        v13 += 1;\n
    if (v13 != 1)\n
    {\n
        if (v13 != 3)\n
        {\n
            if (v13 != 7)\n
            {\n
                cgc_printf(v1 - 6048);\n
                v14 = 0;\n
                return v14;\n
            }\n
        }\n
        else\n
        {\n
            if (v10 == 54 && v11 == 54 && v12 == 54)\n
            {\n
                v14 = 3;\n
                return v14;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (v10 == 57)\n
        {\n
            v14 = 2;\n
            return v14;\n
        }\n
    }\n
    if (!cgc_verifyFormat(&v10, v13))\n
    {\n
        cgc_printf(v1 - 6048);\n
        v14 = 0;\n
        return v14;\n
    }\n
    for (v2 = 0; v2 < 15; v2 += 1)\n
    {\n
        if ((&v10)[v2] <= 57 && (&v10)[v2] >= 48)\n
        {\n
            if (!v2)\n
            {\n
                v4 = cgc_atoi(&(&v10)[v2]);\n
            }\n
            else if (v2 == 2)\n
            {\n
                v5 = cgc_atoi(&(&v10)[v2]);\n
            }\n
            else if (v2 == 4)\n
            {\n
                v6 = cgc_atoi(&(&v10)[v2]);\n
            }\n
            else if (v2 == 6)\n
            {\n
                v7 = cgc_atoi(&(&v10)[v2]);\n
            }\n
        }\n
    }\n
    if (v4 != 77 && v5 != 77 && v6 != 77 && v7 != 77)\n
    {\n
        v18 = v16;\n
        v18[0] = v4;\n
        v18[1] = v5;\n
        v19 = v16;\n
        v19[2] = v6;\n
        v19[3] = v7;\n
        v14 = 1;\n
        return v14;\n
    }\n
    v14 = 0;\n
    return v14;\n
}\n
", "4209251:sub_403a63": null, "4209264:main": "typedef struct struct_1 {\n
    char padding_0[48];\n
    char field_30;\n
} struct_1;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int ptr_array;\n
\n
int main(unsigned int v10, unsigned int a0)\n
{\n
    struct_1 *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2[4];  // [bp-0x64]\n
    char v3;  // [bp-0x60]\n
    char v4;  // [bp-0x5c]\n
    char v5;  // [bp-0x58]\n
    char v6;  // [bp-0x50]\n
    struct struct_0 **v7;  // [bp-0x10]\n
    void* v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v8 = 0;\n
    v7 = &cgc_displayboard;\n
    ptr_array = &v6;\n
    cgc_initboard();\n
    v7();\n
    while (true)\n
    {\n
        if (v0->field_30 != 1)\n
            cgc_printf(&v0[122].padding_0[45]);\n
        else\n
            cgc_printf(&v0[123].padding_0[4]);\n
        v1 = cgc_parseUserInput(v2);\n
        if (!v1)\n
        {\n
            cgc_printf(&v0[122].padding_0[37]);\n
        }\n
        else if (v1 == 2)\n
        {\n
            v7();\n
        }\n
        else\n
        {\n
            if (v1 == 3)\n
            {\n
                cgc_printf(&v0[122].padding_0[12]);\n
                cgc__terminate();\n
            }\n
            if (v1 == -1)\n
                cgc__terminate();\n
            if (!cgc_performMove(v2[0], *(&v3), *(&v4), *(&v5)))\n
            {\n
                cgc_printf(&v0[121].padding_0[46]);\n
            }\n
            else\n
            {\n
                cgc_printf(&v0[122].padding_0[1]);\n
                if (v0->field_30 == 1)\n
                    v0->field_30 = 0;\n
                else\n
                    v0->field_30 = 1;\n
            }\n
        }\n
    }\n
}\n
", "4209676:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_rint": null, "5242900:cgc_log10": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}