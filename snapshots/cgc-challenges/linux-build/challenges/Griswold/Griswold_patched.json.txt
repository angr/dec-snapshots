{"4202496:_init": "extern struct_0 *g_4082c4;\n
\n
int _init()\n
{\n
    if (g_4082c4)\n
    {\n
        g_4082c4();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:sub_4020c0": "int sub_4020c0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202694:sub_4020c6": null, "4202704:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202747:sub_4020fb": null, "4202748:sub_4020fc": "int sub_4020fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202752:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202756:sub_402104": null, "4202768:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 25019;\n
    v6 = v5 + 17;\n
    v7 = v5 + 17;\n
    if (v7 == v6)\n
        return v5 + 17;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202819:sub_402143": "int sub_402143()\n
{\n
}\n
", "4202825:sub_402149": "int sub_402149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202832:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24955;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 17;\n
    v9 = (v6 + 17 - (v6 + 17) >> 31) + (17 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202903:sub_402197": "int sub_402197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202912:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4082c0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4082c0)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020c0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202987:sub_4021eb": "int sub_4021eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202992:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203001:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203005:sub_4021fd": null, "4203008:cgc_list_create_dup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_create_dup()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2[3];  // [bp-0x18]\n
    unsigned int v3[3];  // [bp-0x14]\n
    unsigned int v4[3];  // [bp-0x10]\n
    unsigned int v5[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4[0] = 0;\n
    v0 = &v4[0];\n
    if (cgc_allocate(12, 0))\n
    {\n
        v5[0] = 0;\n
        return v5;\n
    }\n
    v3[0] = cgc_node_create();\n
    v2[0] = cgc_node_create();\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[1] = 0;\n
    v2[2] = v3;\n
    v4[0] = v3;\n
    v4[1] = v2;\n
    v4[2] = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4203210:sub_4022ca": null, "4203216:cgc_node_create": "int cgc_node_create(unsigned int v2)\n
{\n
    unsigned int v0[3];  // [bp-0x10]\n
    unsigned int v1[3];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0[0] = 0;\n
    if (cgc_allocate(12, 0, v0))\n
    {\n
        v1[0] = 0;\n
        return v1;\n
    }\n
    v0[0] = v2;\n
    v0[1] = 0;\n
    v0[2] = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203341:sub_40234d": null, "4203344:cgc_list_append": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_append(struct_2 *v1, unsigned int a0[3])\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    struct_2 *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    a0[1] = v1->field_4;\n
    a0[2] = v1->field_4->field_8;\n
    v1->field_4->field_8->field_4 = a0;\n
    v1->field_4->field_8 = &a0[0];\n
    v3 = v1;\n
    v3->field_8 = v3->field_8 + 1;\n
    return v0;\n
}\n
", "4203435:sub_4023ab": null, "4203440:cgc_get_list_head": "int cgc_get_list_head(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4203453:sub_4023bd": null, "4203456:cgc_get_list_tail": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_get_list_tail(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4203470:sub_4023ce": null, "4203472:cgc_get_first_node": "int cgc_get_first_node(struct struct_0 **v0)\n
{\n
    return *(v0)->field_4;\n
}\n
", "4203488:cgc_get_last_node": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_get_last_node(struct_1 *v0)\n
{\n
    return v0->field_4->field_8;\n
}\n
", "4203505:sub_4023f1": null, "4203520:cgc_rand": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_rand(unsigned int v2, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = &v1;\n
    return cgc_random(v2, a0);\n
}\n
", "4203583:sub_40243f": null, "4203584:cgc_send": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a0;\n
    if (cgc_transmit_all(1, v3))\n
    {\n
        cgc__terminate();\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4203670:sub_402496": null, "4203680:cgc_transmit_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    if (!a1)\n
    {\n
        v5 = 2;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 < a1)\n
        {\n
            v0 = &v3;\n
            v2 = cgc_transmit(v6, a0 + v4, a1 - v4);\n
            if (v2)\n
            {\n
                v5 = 3;\n
                return v5;\n
            }\n
            v4 = v3 + v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4203884:sub_40256c": null, "4203888:cgc_recv_all": "int cgc_recv_all(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_read_all(0, v1);\n
}\n
", "4203947:sub_4025ab": null, "4203952:cgc_read_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    char *v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v4;  // [bp-0xd]\n
    char *v6;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!a1)\n
            return v3;\n
        v0 = &v2;\n
        if (cgc_receive(v5, &v4, 1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v6 = v3;\n
        v3 = v6 + 1;\n
        v6[a0] = v4;\n
        a1 -= 1;\n
    }\n
    return v3;\n
}\n
", "4204105:sub_402649": null, "4204112:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a0;\n
    }\n
    return v1;\n
}\n
", "4204182:sub_402696": null, "4204192:cgc_get_count_outlets_on_breaker": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_count_outlets_on_breaker(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_1 *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    if (!cgc_breaker_id_is_installed())\n
    {\n
        v3 = -45;\n
        return v3;\n
    }\n
    v0 = v5;\n
    v2 = cgc_get_breaker_by_id();\n
    v3 = v2->field_8->field_8;\n
    return v3;\n
}\n
", "4204291:sub_402703": null, "4204304:cgc_breaker_id_is_installed": "int cgc_breaker_id_is_installed(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = v2;\n
    if (!cgc_get_breaker_by_id())\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4204372:sub_402754": null, "4204384:cgc_get_breaker_by_id": "typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_breaker_by_id(unsigned int v3)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_load_center_is_created() && v0->field_48->field_1 && v3 < v0->field_48->field_1)\n
    {\n
        v1 = &v0->field_48[2 + 6 * v3];\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4204516:sub_4027e4": null, "4204528:cgc_get_amp_rating_of_breaker": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_amp_rating_of_breaker(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_breaker_id_is_installed(v4))\n
    {\n
        v2 = 211;\n
        return v2;\n
    }\n
    v1 = cgc_get_breaker_by_id(v4);\n
    v2 = v1->field_4;\n
    return v2;\n
}\n
", "4204622:sub_40284e": null, "4204624:cgc_get_amp_rating_of_outlet": "typedef struct struct_0 {\n
    char padding_0[36];\n
    char field_24;\n
} struct_0;\n
\n
int cgc_get_amp_rating_of_outlet(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = v3;\n
    v1 = cgc_get_outlet_by_id();\n
    if (!v1)\n
    {\n
        v2 = 209;\n
        return v2;\n
    }\n
    v2 = v1->field_24;\n
    return v2;\n
}\n
", "4204699:sub_40289b": null, "4204704:cgc_get_outlet_by_id": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_outlet_by_id(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x11]\n
    unsigned int *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = cgc_get_number_of_breakers_installed_in_load_center();\n
    if (0 > v4)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    for (v3 = 0; v3 < v4; v3 += 1)\n
    {\n
        v2 = cgc_get_outlet_list_on_breaker();\n
        for (v1 = cgc_get_first_node(v2); cgc_get_list_tail(v2) != v1; v1 = *((v1 + 4)))\n
        {\n
            v5 = *(v1);\n
            if (v8 == *(v5))\n
                break;\n
            v5 = 0;\n
        }\n
    }\n
    v6 = v5;\n
    return v6;\n
}\n
", "4204931:sub_402983": null, "4204944:cgc_get_amp_rating_of_splitter": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_0;\n
\n
int cgc_get_amp_rating_of_splitter(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = v3;\n
    v1 = cgc_get_splitter_by_id();\n
    if (!v1)\n
    {\n
        v2 = 208;\n
        return v2;\n
    }\n
    v2 = v1->field_4;\n
    return v2;\n
}\n
", "4205019:sub_4029db": null, "4205024:cgc_get_splitter_by_id": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_splitter_by_id(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_0 *v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x11]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = cgc_get_number_of_breakers_installed_in_load_center();\n
    if (0 > v6)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    for (v5 = 0; v5 < v6; v5 += 1)\n
    {\n
        v4 = cgc_get_outlet_list_on_breaker();\n
        for (v3 = cgc_get_first_node(v4); cgc_get_list_tail(v4) != v3; v3 = *((v3 + 4)))\n
        {\n
            v2 = *(v3);\n
            v0 = v10;\n
            v7 = cgc_search_outlet_for_splitter_id(v2);\n
            if (v7)\n
                break;\n
        }\n
    }\n
    v8 = v7;\n
    return v8;\n
}\n
", "4205265:sub_402ad1": null, "4205280:cgc_get_amp_rating_of_light_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_amp_rating_of_light_string(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    v2 = cgc_get_light_string_by_id();\n
    v7 = 0;\n
    if (!v2)\n
    {\n
        v3 = 0xc2440000;\n
    }\n
    else\n
    {\n
        v7 = cgc_get_max_amps_of_light_string();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v3 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v3 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v7;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v7;\n
}\n
", "4205362:sub_402b32": null, "4205376:cgc_get_light_string_by_id": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_light_string_by_id(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_0 *v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x11]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = cgc_get_number_of_breakers_installed_in_load_center();\n
    if (0 > v6)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    for (v5 = 0; v5 < v6; v5 += 1)\n
    {\n
        v4 = cgc_get_outlet_list_on_breaker();\n
        for (v3 = cgc_get_first_node(v4); cgc_get_list_tail(v4) != v3; v3 = *((v3 + 4)))\n
        {\n
            v2 = *(v3);\n
            v0 = v10;\n
            v7 = cgc_search_outlet_for_light_string_id(v2);\n
            if (v7)\n
                break;\n
        }\n
    }\n
    v8 = v7;\n
    return v8;\n
}\n
", "4205617:sub_402c31": null, "4205632:cgc_get_amp_rating_of_receptacle": "typedef struct struct_0 {\n
    char padding_0[12];\n
    char field_c;\n
} struct_0;\n
\n
int cgc_get_amp_rating_of_receptacle(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = v3;\n
    v1 = cgc_get_receptacle_by_id();\n
    if (!v1)\n
    {\n
        v2 = 210;\n
        return v2;\n
    }\n
    v2 = v1->field_c;\n
    return v2;\n
}\n
", "4205707:sub_402c8b": null, "4205712:cgc_get_receptacle_by_id": "typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_receptacle_by_id(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_1 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    if (cgc_load_center_is_created() != 1)\n
        return v3;\n
    for (v2 = 0; v2 < v1->field_48->field_1; v2 += 1)\n
    {\n
        v0 = v5;\n
        v3 = cgc_get_receptacle_by_id_from_breaker_id(v2);\n
        if (v3)\n
            break;\n
    }\n
    return v3;\n
}\n
", "4205869:sub_402d2d": null, "4205872:cgc_get_number_of_breakers_installed_in_load_center": "typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_number_of_breakers_installed_in_load_center()\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_load_center_is_created())\n
    {\n
        v1 = 214;\n
        return v1;\n
    }\n
    v1 = v0->field_48->field_1;\n
    return v1;\n
}\n
", "4205946:sub_402d7a": null, "4205952:cgc_get_total_breaker_space_count": "typedef struct struct_0 {\n
    char padding_0[72];\n
    struct struct_1 *field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_breaker_space_count()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_load_center_is_created())\n
    {\n
        v1 = 214;\n
        return v1;\n
    }\n
    v1 = v0->field_48->field_0;\n
    return v1;\n
}\n
", "4206025:sub_402dc9": null, "4206032:cgc_get_amp_rating_of_load_center": "typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_amp_rating_of_load_center()\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_load_center_is_created())\n
    {\n
        v1 = -42;\n
        return v1;\n
    }\n
    v1 = v0->field_48->field_4;\n
    return v1;\n
}\n
", "4206108:sub_402e1c": null, "4206112:cgc_get_total_amp_load_on_load_center": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_load_center()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x15]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    if (!cgc_load_center_is_created())\n
    {\n
        v6 = 0xc2280000;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        v4 = cgc_get_number_of_breakers_installed_in_load_center();\n
        if (0 > v4)\n
        {\n
            v10 = v4;\n
            v2 = v10;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v6 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v6 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            while (true)\n
            {\n
                v10 = v3;\n
                if (v10 >= v4)\n
                    break;\n
                v0 = v3;\n
                cgc_get_total_amp_load_on_breaker_by_breaker_id();\n
                v12 = ftop<4> - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v13 = v12 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v13 = v12 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t6,1] = t7\n
                [D] PutI(136:I8x8)[t6,1] = 0x01\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
                v14 = v13 + 1;\n
                v5 = ([D] GetI(136:I8x8)[t32,0] ? [D] GetI(72:F64x8)[t32,0] : nan);\n
                [D] PutI(136:I8x8)[t32,0] = 0x00\n
                v15 = v14 + 1;\n
                v3 += 1;\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v6 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v6 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v10;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v10;\n
}\n
", "4206282:sub_402eca": null, "4206288:cgc_get_total_amp_load_on_breaker_by_breaker_id": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_breaker_by_breaker_id(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    void* v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    if (!cgc_breaker_id_is_installed(v6))\n
    {\n
        v4 = 0xc2340000;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        v2 = cgc_get_outlet_list_on_breaker();\n
        v1 = cgc_get_first_node(v2);\n
        while (true)\n
        {\n
            v8 = cgc_get_list_tail(v2);\n
            if (v8 == v1)\n
                break;\n
            cgc_get_total_amp_load_on_outlet_by_outlet_va();\n
            v10 = ftop<4> - 1;\n
            if (![D] GetI(136:I8x8)[t3,0])\n
            {\n
                v11 = v10 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v11 = v10 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t4,1] = t5\n
            [D] PutI(136:I8x8)[t4,1] = 0x01\n
            [D] PutI(136:I8x8)[t4,0] = 0x00\n
            v12 = v11 + 1;\n
            v3 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
            [D] PutI(136:I8x8)[t30,0] = 0x00\n
            v13 = v12 + 1;\n
            v1 = v1->field_4;\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v4 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v4 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v8;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v8;\n
}\n
", "4206467:sub_402f83": null, "4206480:cgc_get_outlet_list_on_breaker": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_outlet_list_on_breaker(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_breaker_id_is_installed(v4))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = cgc_get_breaker_by_id(v4);\n
    v2 = v1->field_8;\n
    return v2;\n
}\n
", "4206576:cgc_get_total_amp_load_on_outlet_by_outlet_va": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_outlet_by_outlet_va(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v0 = v4 + 4;\n
    cgc_get_total_amp_load_on_receptacle_by_receptacle_va();\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,1] = t8\n
    [D] PutI(136:I8x8)[t7,1] = 0x01\n
    [D] PutI(136:I8x8)[t7,0] = 0x00\n
    v2 = ([D] GetI(136:I8x8)[t33,0] ? [D] GetI(72:F64x8)[t33,0] : nan);\n
    [D] PutI(136:I8x8)[t33,0] = 0x00\n
    v0 = v4 + 20;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t11,1] = t12\n
    [D] PutI(136:I8x8)[t11,1] = 0x01\n
    [D] PutI(136:I8x8)[t11,0] = 0x00\n
    v2 = ([D] GetI(136:I8x8)[t37,0] ? [D] GetI(72:F64x8)[t37,0] : nan);\n
    [D] PutI(136:I8x8)[t37,0] = 0x00\n
    [D] PutI(72:F64x8)[t48,0] = t51\n
    [D] PutI(136:I8x8)[t48,0] = 0x01\n
    return cgc_get_total_amp_load_on_receptacle_by_receptacle_va();\n
}\n
", "4206666:sub_40304a": null, "4206672:cgc_get_total_amp_load_on_outlet_by_outlet_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_outlet_by_outlet_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_outlet_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc23c0000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_total_amp_load_on_outlet_by_outlet_va(v1);\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4206761:sub_4030a9": null, "4206768:cgc_get_total_amp_load_on_receptacle_by_receptacle_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_receptacle_by_receptacle_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_receptacle_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc2380000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_total_amp_load_on_receptacle_by_receptacle_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4206857:sub_403109": null, "4206864:cgc_get_total_amp_load_on_receptacle_by_receptacle_va": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_receptacle_by_receptacle_va(struct_0 *v4)\n
{\n
    struct_0 *v0;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v0 = v4;\n
    if (cgc_get_receptacle_load_type())\n
    {\n
        v0 = v4;\n
        v6 = 1;\n
        if (cgc_get_receptacle_load_type() == 1)\n
        {\n
            v0 = v4->field_8;\n
            v6 = cgc_get_total_amp_load_on_light_string_by_light_string_va();\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v2 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
            else\n
            {\n
                v2 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v0 = v4->field_8;\n
        v6 = cgc_get_total_amp_load_on_splitter_by_splitter_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4207009:sub_4031a1": null, "4207024:cgc_get_total_amp_load_on_splitter_by_splitter_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_splitter_by_splitter_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_splitter_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc2400000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_total_amp_load_on_splitter_by_splitter_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4207113:sub_403209": null, "4207120:cgc_get_total_amp_load_on_splitter_by_splitter_va": "typedef struct struct_0 {\n
    char padding_0[6];\n
    char field_6;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_splitter_by_splitter_va(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v7;  // ftop\n
    unsigned int v8;  // ftop\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; v1 < v4->field_6; v1 += 1)\n
    {\n
        cgc_get_total_amp_load_on_receptacle_by_receptacle_va(8 + v4 + 0x10 * v1);\n
        v7 = ftop<4> - 1;\n
        if (![D] GetI(136:I8x8)[t3,0])\n
        {\n
            v8 = v7 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v8 = v7 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t6,1] = t7\n
        [D] PutI(136:I8x8)[t6,1] = 0x01\n
        [D] PutI(136:I8x8)[t6,0] = 0x00\n
        v9 = v8 + 1;\n
        v2 = ([D] GetI(136:I8x8)[t32,0] ? [D] GetI(72:F64x8)[t32,0] : nan);\n
        [D] PutI(136:I8x8)[t32,0] = 0x00\n
        v10 = v9 + 1;\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v1;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v1;\n
}\n
", "4207233:sub_403281": null, "4207248:cgc_get_total_amp_load_on_light_string_by_light_string_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_light_string_by_light_string_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_light_string_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc2440000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_total_amp_load_on_light_string_by_light_string_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4207337:sub_4032e9": null, "4207344:cgc_get_total_amp_load_on_light_string_by_light_string_va": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_amp_load_on_light_string_by_light_string_va(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(136:I8x8)[t7,0] = 0x00\n
    cgc_convert_watts_to_amps();\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,1] = t8\n
    [D] PutI(136:I8x8)[t7,1] = 0x01\n
    [D] PutI(136:I8x8)[t7,0] = 0x00\n
    v1 = ([D] GetI(136:I8x8)[t33,0] ? [D] GetI(72:F64x8)[t33,0] : nan);\n
    [D] PutI(136:I8x8)[t33,0] = 0x00\n
    v5 = cgc_get_total_amp_load_on_receptacle_by_receptacle_va(v3 + 12);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t11,1] = t12\n
    [D] PutI(136:I8x8)[t11,1] = 0x01\n
    [D] PutI(136:I8x8)[t11,0] = 0x00\n
    v1 = ([D] GetI(136:I8x8)[t37,0] ? [D] GetI(72:F64x8)[t37,0] : nan);\n
    [D] PutI(136:I8x8)[t37,0] = 0x00\n
    [D] PutI(72:F64x8)[t48,0] = t51\n
    [D] PutI(136:I8x8)[t48,0] = 0x01\n
    return v5;\n
}\n
", "4207434:sub_40334a": null, "4207440:cgc_get_max_receptacle_amp_load_on_outlet_by_outlet_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_max_receptacle_amp_load_on_outlet_by_outlet_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_outlet_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc23c0000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_max_receptacle_amp_load_on_outlet_by_outlet_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4207529:sub_4033a9": null, "4207536:cgc_get_max_receptacle_amp_load_on_outlet_by_outlet_va": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_max_receptacle_amp_load_on_outlet_by_outlet_va(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_get_total_amp_load_on_receptacle_by_receptacle_va(v5 + 4);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        v2 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v2 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    v7 = cgc_get_total_amp_load_on_receptacle_by_receptacle_va(v5 + 20);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        v1 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v1 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,0] = t9\n
    [D] PutI(136:I8x8)[t5,0] = 0x01\n
    [D] PutI(72:F64x8)[t5,1] = t2\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t25,0] = 0x00\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) != 1)\n
    {\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v3 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v3 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    else\n
    {\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v3 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v3 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v7;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v7;\n
}\n
", "4207649:sub_403421": null, "4207664:cgc_get_max_receptacle_amp_load_on_splitter_by_splitter_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_max_receptacle_amp_load_on_splitter_by_splitter_id(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_splitter_by_id(v4);\n
    v6 = 0;\n
    if (!v1)\n
    {\n
        v2 = 0xc2400000;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_max_receptacle_amp_load_on_splitter_by_splitter_va();\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v6;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v6;\n
}\n
", "4207753:sub_403489": null, "4207760:cgc_get_max_receptacle_amp_load_on_splitter_by_splitter_va": "typedef struct struct_0 {\n
    char padding_0[6];\n
    char field_6;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_max_receptacle_amp_load_on_splitter_by_splitter_va(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v8;  // ftop\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    for (v1 = 0; v1 < v5->field_6; v1 += 1)\n
    {\n
        cgc_get_total_amp_load_on_receptacle_by_receptacle_va(8 + v5 + 0x10 * v1);\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v2 = [D] GetI(72:F64x8)[t7,0];\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
            v8 = v15 + 1;\n
        }\n
        else\n
        {\n
            v2 = nan;\n
            [D] PutI(136:I8x8)[t7,0] = 0x00\n
            v8 = v15 + 1;\n
        }\n
        v10 = v8 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v11 = v10 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v11 = v10 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v12 = v11 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t5,0] = t9\n
        [D] PutI(136:I8x8)[t5,0] = 0x01\n
        [D] PutI(72:F64x8)[t5,1] = t2\n
        [D] PutI(136:I8x8)[t5,1] = 0x01\n
        [D] PutI(136:I8x8)[t25,0] = 0x00\n
        v14 = v13 + 1;\n
        [D] PutI(72:F64x8)[t39,0] = t40\n
        [D] PutI(136:I8x8)[t39,0] = 0x01\n
        [D] PutI(136:I8x8)[t39,0] = 0x00\n
        v15 = v14 + 1;\n
        if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) != 1)\n
        {\n
            v16 = v15 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if (![D] GetI(136:I8x8)[t3,0])\n
            {\n
                v3 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v15 = v17 + 1;\n
            }\n
            else\n
            {\n
                v3 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v15 = v17 + 1;\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v1;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v1;\n
}\n
", "4207909:sub_403525": null, "4207920:cgc_init_electric_model": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_init_electric_model(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    struct_0 *v6;  // ecx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_load_center_is_created() == 1)\n
    {\n
        v2 = 215;\n
        return v2;\n
    }\n
    v0 = v4;\n
    v6 = v1;\n
    v6->field_48 = cgc_get_new_load_center_by_model_id();\n
    if (!v6->field_48)\n
    {\n
        v2 = 212;\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4208035:sub_4035a3": null, "4208048:cgc_add_breaker_to_load_center": "typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_breaker_to_load_center(unsigned int v5, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_18;  // tmp #18\n
    struct_1 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_1 *v7;  // ebx\n
    struct_0 *v8;  // ecx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_load_center_is_created())\n
    {\n
        v3 = 214;\n
        return v3;\n
    }\n
    else if (cgc_load_center_breaker_spaces_are_full() != 1)\n
    {\n
        v7 = v1;\n
        v2 = &v7->field_48[2 + 6 * v7->field_48->field_1];\n
        v0 = v7->field_48->field_1;\n
        if (cgc_get_new_breaker_by_model_id(v5, v2) == -1)\n
        {\n
            v3 = 212;\n
            return v3;\n
        }\n
        v8 = v1->field_48;\n
        tmp_18 = v8->field_1;\n
        v8->field_1 = v8->field_1 + 1;\n
        *(a0) = tmp_18;\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 213;\n
        return v3;\n
    }\n
}\n
", "4208265:sub_403689": null, "4208272:cgc_add_outlet_to_breaker": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    unsigned int field_14;\n
    char padding_18[12];\n
    char field_24;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[24];\n
    char field_24;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_outlet_to_breaker(unsigned int v6, unsigned int a0, struct_2 *a1)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_1 *v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_load_center_is_created())\n
    {\n
        v4 = 214;\n
        return v4;\n
    }\n
    v3 = cgc_get_breaker_by_id(a0);\n
    if (!v3)\n
    {\n
        v4 = 211;\n
        return v4;\n
    }\n
    v2 = cgc_get_new_outlet_by_model_id();\n
    if (!v2)\n
    {\n
        v4 = 212;\n
        return v4;\n
    }\n
    else if (v2->field_24 <= v3->field_4)\n
    {\n
        a1->field_0 = v2->field_0;\n
        a1->field_4 = v2->field_4;\n
        a1->field_8 = v2->field_14;\n
        a1->field_24 = 2;\n
        v0 = v3->field_8;\n
        v4 = cgc_list_append(v0, cgc_node_create(v2));\n
        return v4;\n
    }\n
    else\n
    {\n
        cgc_deallocate(v2);\n
        v4 = 205;\n
        return v4;\n
    }\n
}\n
", "4208552:sub_4037a8": null, "4208560:cgc_add_n_way_splitter_to_receptacle": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[1];\n
    char field_6;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    char field_24;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_n_way_splitter_to_receptacle(unsigned int v6, unsigned int a0, struct_2 *a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_1 *v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_load_center_is_created())\n
    {\n
        v4 = 214;\n
        return v4;\n
    }\n
    v3 = cgc_get_receptacle_by_id(a0);\n
    if (!v3)\n
    {\n
        v4 = 210;\n
        return v4;\n
    }\n
    else if (cgc_receptacle_is_loaded() != 1)\n
    {\n
        v2 = cgc_get_new_n_way_splitter_by_model_id();\n
        if (!v2)\n
        {\n
            v4 = 212;\n
            return v4;\n
        }\n
        v3->field_4 = 0;\n
        v3->field_8 = v2;\n
        v3->field_c = v2->field_4;\n
        a1->field_0 = v2->field_0;\n
        a1->field_24 = v2->field_6;\n
        for (v1 = 0; v1 < v2->field_6; v1 = v1 + 1)\n
        {\n
            *((4 + &a1->field_0 + 0x4 * v1)) = *((8 + &v2->field_0 + 0x10 * v1));\n
        }\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 206;\n
        return v4;\n
    }\n
}\n
", "4208863:sub_4038df": null, "4208864:cgc_receptacle_is_loaded": "int cgc_receptacle_is_loaded(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = v2;\n
    if (2 > cgc_get_receptacle_load_type())\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4208935:sub_403927": null, "4208944:cgc_add_light_string_to_receptacle": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[28];\n
    char field_24;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_light_string_to_receptacle(unsigned int v6, unsigned int a0, struct_0 *a1)\n
{\n
    char v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[4];  // [bp-0x14]\n
    unsigned int v3[3];  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_load_center_is_created(*(&v0)))\n
    {\n
        v4 = 214;\n
        return v4;\n
    }\n
    v3[0] = cgc_get_receptacle_by_id(a0);\n
    if (!v3)\n
    {\n
        v4 = 210;\n
        return v4;\n
    }\n
    else if (cgc_receptacle_is_loaded(v3) != 1)\n
    {\n
        v2[0] = cgc_get_new_light_string_by_model_id();\n
        if (!v2)\n
        {\n
            v4 = 212;\n
            return v4;\n
        }\n
        v3[1] = 1;\n
        v3[2] = v2;\n
        a1->field_0 = v2[0];\n
        a1->field_24 = 1;\n
        a1->field_4 = v2[3];\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 206;\n
        return v4;\n
    }\n
}\n
", "4209177:sub_403a19": null, "4209184:cgc_search_outlet_for_splitter_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_outlet_for_splitter_id(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v0 = a0;\n
    v2 = cgc_search_receptacle_for_splitter_id(v4 + 4);\n
    if (!v2)\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_receptacle_for_splitter_id(v4 + 20);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4209290:sub_403a8a": null, "4209296:cgc_search_receptacle_for_splitter_id": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_receptacle_for_splitter_id(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!cgc_get_receptacle_load_type())\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_splitter_for_splitter_id(v4->field_8);\n
        return v2;\n
    }\n
    if (cgc_get_receptacle_load_type() != 1)\n
        return v2;\n
    v0 = a0;\n
    v2 = cgc_search_light_string_for_splitter_id(v4->field_8);\n
}\n
", "4209456:cgc_get_receptacle_load_type": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_get_receptacle_load_type(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4209470:sub_403b3e": null, "4209472:cgc_search_splitter_for_splitter_id": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[2];\n
    char field_6;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_splitter_for_splitter_id(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (a0 == v3->field_0)\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
    for (v1 = 0; v1 < v3->field_6; v1 += 1)\n
    {\n
        v2 = cgc_search_receptacle_for_splitter_id(&(&v3[1].field_0)[4 * v1] + 1, a0);\n
        if (v2)\n
            break;\n
    }\n
    return v2;\n
}\n
", "4209639:sub_403be7": null, "4209648:cgc_search_light_string_for_splitter_id": "int cgc_search_light_string_for_splitter_id(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_search_receptacle_for_splitter_id(v0 + 12, a0);\n
}\n
", "4209700:sub_403c24": null, "4209712:cgc_search_outlet_for_light_string_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_outlet_for_light_string_id(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v0 = a0;\n
    v2 = cgc_search_receptacle_for_light_string_id(v4 + 4);\n
    if (!v2)\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_receptacle_for_light_string_id(v4 + 20);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4209818:sub_403c9a": null, "4209824:cgc_search_receptacle_for_light_string_id": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_receptacle_for_light_string_id(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!cgc_get_receptacle_load_type(v4))\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_splitter_for_light_string_id(v4->field_8);\n
        return v2;\n
    }\n
    if (cgc_get_receptacle_load_type(v4) != 1)\n
        return v2;\n
    v0 = a0;\n
    v2 = cgc_search_light_string_for_light_string_id(v4->field_8);\n
}\n
", "4209984:cgc_search_splitter_for_light_string_id": "typedef struct struct_0 {\n
    char padding_0[6];\n
    char field_6;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_splitter_for_light_string_id(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v3->field_6)\n
            return v2;\n
        v2 = cgc_search_receptacle_for_light_string_id(&v3[1].padding_0[1 + 16 * v1], a0);\n
        if (v2)\n
            return v2;\n
        v1 += 1;\n
    }\n
}\n
", "4210121:sub_403dc9": null, "4210128:cgc_search_light_string_for_light_string_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_light_string_for_light_string_id(unsigned int *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (a0 == *(v2))\n
    {\n
        v1 = v2;\n
        return v1;\n
    }\n
    v1 = cgc_search_receptacle_for_light_string_id(v2 + 3, a0);\n
    return v1;\n
}\n
", "4210224:cgc_get_receptacle_by_id_from_breaker_id": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_receptacle_by_id_from_breaker_id(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = cgc_get_outlet_list_on_breaker(v6);\n
    v2 = cgc_get_first_node(v3);\n
    while (true)\n
    {\n
        if (cgc_get_list_tail(v3) == v2)\n
            return v4;\n
        v0 = a0;\n
        v4 = cgc_search_outlet_for_receptacle_id(v2->field_0);\n
        if (v4)\n
            return v4;\n
        v2 = v2->field_4;\n
    }\n
}\n
", "4210378:sub_403eca": null, "4210384:cgc_search_outlet_for_receptacle_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_outlet_for_receptacle_id(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v0 = a0;\n
    v2 = cgc_search_receptacle_for_receptacle_id(v4 + 4);\n
    if (!v2)\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_receptacle_for_receptacle_id(v4 + 20);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210490:sub_403f3a": null, "4210496:cgc_search_receptacle_for_receptacle_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_receptacle_for_receptacle_id(unsigned int v3[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[3];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = 0;\n
    if (a0 == v3[0])\n
    {\n
        v2[0] = v3;\n
        return v2;\n
    }\n
    if (!cgc_get_receptacle_load_type(v3))\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_splitter_for_receptacle_id(v3[2]);\n
    }\n
    else if (cgc_get_receptacle_load_type(v3) == 1)\n
    {\n
        v0 = a0;\n
        v2 = cgc_search_light_string_for_receptacle_id(v3[2]);\n
    }\n
    return v2;\n
}\n
", "4210689:sub_404001": null, "4210704:cgc_search_splitter_for_receptacle_id": "typedef struct struct_0 {\n
    char padding_0[6];\n
    char field_6;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_search_splitter_for_receptacle_id(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v3->field_6)\n
            return v2;\n
        v2 = cgc_search_receptacle_for_receptacle_id(&v3[1].padding_0[1] + 0x10 * v1, a0);\n
        if (v2)\n
            return v2;\n
        v1 += 1;\n
    }\n
}\n
", "4210843:sub_40409b": null, "4210848:cgc_search_light_string_for_receptacle_id": "int cgc_search_light_string_for_receptacle_id(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_search_receptacle_for_receptacle_id(v0 + 12, a0);\n
}\n
", "4210900:sub_4040d4": null, "4210912:cgc_load_center_is_created": "extern unsigned int e_model;\n
\n
int cgc_load_center_is_created()\n
{\n
    char v0;  // [bp-0x5]\n
\n
    if (!e_model)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4210966:sub_404116": null, "4210976:cgc_convert_watts_to_amps": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_convert_watts_to_amps(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if ([D] GetI(136:I8x8)[t15,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t11,0] = t12\n
    [D] PutI(136:I8x8)[t11,0] = 0x01\n
    [D] PutI(136:I8x8)[t11,0] = 0x00\n
    [D] PutI(72:F64x8)[t25,0] = t28\n
    [D] PutI(136:I8x8)[t25,0] = 0x01\n
    [D] PutI(72:F64x8)[t38,0] = t41\n
    [D] PutI(136:I8x8)[t38,0] = 0x01\n
    [D] PutI(72:F64x8)[t49,1] = t50\n
    [D] PutI(136:I8x8)[t49,1] = 0x01\n
    [D] PutI(136:I8x8)[t49,0] = 0x00\n
    v0 = ([D] GetI(136:I8x8)[t75,0] ? [D] GetI(72:F64x8)[t75,0] : nan);\n
    [D] PutI(136:I8x8)[t75,0] = 0x00\n
    [D] PutI(72:F64x8)[t86,0] = t89\n
    [D] PutI(136:I8x8)[t86,0] = 0x01\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4211019:sub_40414b": null, "4211024:cgc_load_center_breaker_spaces_are_full": "typedef struct struct_0 {\n
    char padding_0[72];\n
    struct struct_1 *field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_load_center_breaker_spaces_are_full()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    struct_0 *v5;  // ecx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_load_center_is_created() == 1)\n
    {\n
        v5 = v0;\n
        if (v5->field_48->field_0 == v5->field_48->field_1)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4211120:cgc_get_max_amps_of_light_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_max_amps_of_light_string()\n
{\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4211143:sub_4041c7": null, "4211152:cgc_get_new_load_center_by_model_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_load_center_by_model_id(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = v5;\n
    if (v2 == 10008)\n
    {\n
        v0 = 8;\n
        v3 = cgc_create_load_center(100);\n
    }\n
    else if (v2 == 10016)\n
    {\n
        v0 = 16;\n
        v3 = cgc_create_load_center(100);\n
    }\n
    else if (v2 == 10020)\n
    {\n
        v0 = 20;\n
        v3 = cgc_create_load_center(100);\n
    }\n
    else if (v2 == 15020)\n
    {\n
        v0 = 20;\n
        v3 = cgc_create_load_center(150);\n
    }\n
    else if (v2 == 15024)\n
    {\n
        v0 = 24;\n
        v3 = cgc_create_load_center(150);\n
    }\n
    else if (v2 == 15030)\n
    {\n
        v0 = 30;\n
        v3 = cgc_create_load_center(150);\n
    }\n
    else if (v2 == 20020)\n
    {\n
        v0 = 20;\n
        v3 = cgc_create_load_center(200);\n
    }\n
    else if (v2 == 20030)\n
    {\n
        v0 = 30;\n
        v3 = cgc_create_load_center(200);\n
    }\n
    else if (v2 == 20040)\n
    {\n
        v0 = 40;\n
        v3 = cgc_create_load_center(200);\n
    }\n
    else if (v2 == 20042)\n
    {\n
        v0 = 42;\n
        v3 = cgc_create_load_center(200);\n
    }\n
    else if (v2 == 40020)\n
    {\n
        v0 = 20;\n
        v3 = cgc_create_load_center(400);\n
    }\n
    else if (v2 == 40030)\n
    {\n
        v0 = 30;\n
        v3 = cgc_create_load_center(400);\n
    }\n
    else if (v2 == 40040)\n
    {\n
        v0 = 40;\n
        v3 = cgc_create_load_center(400);\n
    }\n
    else if (v2 == 40042)\n
    {\n
        v0 = 42;\n
        v3 = cgc_create_load_center(400);\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = v3;\n
    return v4;\n
}\n
", "4211914:sub_4044ca": null, "4211920:cgc_create_load_center": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_load_center(unsigned int v2, char a0)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
\n
    v1 = v3;\n
    v0 = 0;\n
    if (cgc_allocate(a0 * 12 + 8, 0, &v0, &_GLOBAL_OFFSET_TABLE_, 0, v3))\n
        cgc__terminate();\n
    v0->field_0 = a0;\n
    v0->field_1 = 0;\n
    v0->field_4 = v2;\n
    return v0;\n
}\n
", "4212050:sub_404552": null, "4212064:cgc_get_new_breaker_by_model_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_breaker_by_model_id(unsigned int v4, unsigned int a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = v4;\n
    if (v2 == 15)\n
    {\n
        v0 = a1;\n
        cgc_create_breaker(15, a0);\n
        return v3;\n
    }\n
    else if (v2 == 20)\n
    {\n
        v0 = a1;\n
        cgc_create_breaker(20, a0);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 255;\n
        return v3;\n
    }\n
}\n
", "4212220:sub_4045fc": null, "4212224:cgc_create_breaker": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_breaker(char v3, struct_0 *a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    a0->field_0 = a1;\n
    a0->field_4 = v3;\n
    a0->field_8 = cgc_list_create_dup();\n
    v5 = a0;\n
    if (!v5->field_8)\n
    {\n
        v0 = 5;\n
        v5 = cgc__terminate();\n
        return v5;\n
    }\n
    return a0;\n
}\n
", "4212320:cgc_get_new_outlet_by_model_id": "extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_outlet_by_model_id(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v0 = v3;\n
    if (v0 == 15)\n
    {\n
        v1 = cgc_create_outlet(15, &_GLOBAL_OFFSET_TABLE_, v0);\n
    }\n
    else if (v0 == 20)\n
    {\n
        v1 = cgc_create_outlet();\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4212462:sub_4046ee": null, "4212464:cgc_create_outlet": "typedef struct struct_1 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    char field_24;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_outlet(char v3)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    struct_1 *v5;  // ebx\n
    unsigned int v6;  // ecx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    if (cgc_allocate(40, 0, &v1, &_GLOBAL_OFFSET_TABLE_.padding_0[0], 0, v4))\n
        cgc__terminate();\n
    v5 = v0;\n
    v6 = v5->field_34;\n
    v5->field_34 = v6 + 1;\n
    v1->field_0 = v6;\n
    cgc_create_receptacle(v3);\n
    cgc_create_receptacle(v3);\n
    v1->field_24 = v3;\n
    return v1;\n
}\n
", "4212646:sub_4047a6": null, "4212656:cgc_get_new_n_way_splitter_by_model_id": "extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_n_way_splitter_by_model_id(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v0 = v3;\n
    if (v0 == 3)\n
    {\n
        v1 = cgc_create_n_way_splitter(3, &_GLOBAL_OFFSET_TABLE_, v0);\n
    }\n
    else if (v0 == 6)\n
    {\n
        v1 = cgc_create_n_way_splitter();\n
    }\n
    else if (v0 == 8)\n
    {\n
        v1 = cgc_create_n_way_splitter();\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4212838:sub_404866": null, "4212848:cgc_create_n_way_splitter": "typedef struct struct_0 {\n
    char padding_0[60];\n
    unsigned int field_3c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
    char field_5;\n
    char field_6;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_n_way_splitter(char v5)\n
{\n
    struct struct_1 **v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v0 = &v3;\n
    if (cgc_allocate(136, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v8 = v7->field_3c;\n
    v7->field_3c = v8 + 1;\n
    v3->field_0 = v8;\n
    v3->field_4 = 15;\n
    v3->field_5 = 15;\n
    v3->field_6 = v5;\n
    for (v2 = 0; v2 < v5; v2 += 1)\n
    {\n
        cgc_create_receptacle(15);\n
    }\n
    v9 = v4;\n
    return v3;\n
}\n
", "4213062:sub_404946": null, "4213072:cgc_get_new_light_string_by_model_id": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_light_string_by_model_id()\n
{\n
    unsigned int v4;  // [bp+0x0]\n
    unsigned int v5;  // [bp+0x4]\n
    unsigned int v6;  // [bp+0xffff8]\n
    unsigned int v7;  // [bp+0xffffc]\n
    unsigned int v8;  // [bp+0x10000c]\n
\n
    v4 = v8;\n
    strncpy(&v5, \"33#B\", 4);\n
    v6 = cgc_create_light_string(v8);\n
    v7 = v6;\n
    return;\n
}\n
", "4213286:sub_404a26": null, "4213296:cgc_create_light_string": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_light_string(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_1 **v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10]\n
    unsigned int v4[3];  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    struct_0 *v8;  // ebx\n
    unsigned int v9;  // ecx\n
    unsigned int v10[3];  // eax\n
\n
    v5 = v7;\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t10,0] = t11\n
    [D] PutI(136:I8x8)[t10,0] = 0x01\n
    [D] PutI(136:I8x8)[t10,0] = 0x00\n
    v4[0] = 0;\n
    v0 = 28;\n
    v1 = 0;\n
    v2 = &v4[0];\n
    if (cgc_allocate())\n
    {\n
        v0 = 5;\n
        cgc__terminate();\n
    }\n
    v8 = v3;\n
    v9 = v8->field_40;\n
    v8->field_40 = v9 + 1;\n
    v4[0] = v9;\n
    v4[1] = v6;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v10 = v4;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        v10[2] = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v10[2] = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    v0 = 15;\n
    v1 = v4 + 1;\n
    cgc_create_receptacle();\n
    return v4;\n
}\n
", "4213463:sub_404ad7": null, "4213472:cgc_create_receptacle": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char field_c;\n
} struct_0;\n
\n
extern unsigned int next_receptacle_id;\n
\n
int cgc_create_receptacle(char v0, struct_0 *a0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = next_receptacle_id;\n
    next_receptacle_id = next_receptacle_id + 1;\n
    a0->field_0 = v1;\n
    a0->field_4 = 2;\n
    a0->field_8 = 0;\n
    a0->field_c = v0;\n
    return a0;\n
}\n
", "4213546:sub_404b2a": null, "4213552:cgc_is_electrical_panel_overloaded": "int cgc_is_electrical_panel_overloaded()\n
{\n
    char v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    return cgc_is_too_much_amp_load_on_load_center(v2, *(&v0));\n
}\n
", "4213583:sub_404b4f": null, "4213584:cgc_is_breaker_overloaded": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_breaker_overloaded(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    if (cgc_is_too_many_outlets_on_breaker() != 1)\n
    {\n
        v0 = v4;\n
        if (cgc_is_too_much_amp_load_on_breaker() != 1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4213689:sub_404bb9": null, "4213696:cgc_is_too_many_outlets_on_breaker": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_too_many_outlets_on_breaker(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2;  // [bp-0xd]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_get_count_outlets_on_breaker(v5);\n
    v2 = 0;\n
    v1 = cgc_get_amp_rating_of_breaker(v5);\n
    if (v1 == 15)\n
    {\n
        if (v3 <= 8)\n
            return v2;\n
        v2 = 1;\n
    }\n
    else if (v1 == 20)\n
    {\n
        if (v3 <= 10)\n
            return v2;\n
        v2 = 1;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4213844:sub_404c54": null, "4213856:cgc_is_too_much_amp_load_on_breaker": null, "4213977:sub_404cd9": null, "4213984:cgc_is_outlet_overloaded": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_outlet_overloaded(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    if (cgc_is_too_much_amp_load_on_outlet() != 1)\n
    {\n
        v0 = v4;\n
        if (cgc_is_too_much_amp_load_on_one_outlet_receptacle() != 1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4214089:sub_404d49": null, "4214096:cgc_is_too_much_amp_load_on_outlet": null, "4214217:sub_404dc9": null, "4214224:cgc_is_too_much_amp_load_on_one_outlet_receptacle": null, "4214345:sub_404e49": null, "4214352:cgc_is_splitter_overloaded": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_splitter_overloaded(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    if (cgc_is_too_much_amp_load_on_splitter() != 1)\n
    {\n
        v0 = v4;\n
        if (cgc_is_too_much_amp_load_on_one_splitter_receptacle() != 1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4214457:sub_404eb9": null, "4214464:cgc_is_too_much_amp_load_on_splitter": null, "4214585:sub_404f39": null, "4214592:cgc_is_too_much_amp_load_on_one_splitter_receptacle": null, "4214713:sub_404fb9": null, "4214720:cgc_is_light_string_overloaded": "int cgc_is_light_string_overloaded(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = v2;\n
    if (cgc_is_too_much_amp_load_on_light_string() == 1)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4214792:sub_405008": null, "4214800:cgc_is_too_much_amp_load_on_light_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_too_much_amp_load_on_light_string(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_get_total_amp_load_on_light_string_by_light_string_id(v4);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        v1 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v1 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    cgc_get_amp_rating_of_light_string(v4);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    [D] PutI(72:F64x8)[t19,0] = t20\n
    [D] PutI(136:I8x8)[t19,0] = 0x01\n
    [D] PutI(136:I8x8)[t19,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t5,0] ? [D] GetI(72:F64x8)[t5,0] : nan), ([D] GetI(136:I8x8)[t5,1] ? [D] GetI(72:F64x8)[t5,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4214896:cgc_is_receptacle_overloaded": "int cgc_is_receptacle_overloaded(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = v2;\n
    if (cgc_is_too_much_amp_load_on_receptacle() == 1)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4214968:sub_4050b8": null, "4214976:cgc_is_too_much_amp_load_on_receptacle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_too_much_amp_load_on_receptacle(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned short v2;  // [bp-0xc]\n
    char v3;  // [bp-0x9]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_get_total_amp_load_on_receptacle_by_receptacle_id(v5);\n
    if ([D] GetI(136:I8x8)[t9,0])\n
    {\n
        v1 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v1 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    if ([D] GetI(136:I8x8)[t9,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v2 = cgc_get_amp_rating_of_receptacle(v5);\n
    if ([D] GetI(136:I8x8)[t9,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,0] = t9\n
    [D] PutI(136:I8x8)[t5,0] = 0x01\n
    [D] PutI(72:F64x8)[t5,1] = t2\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t25,0] = 0x00\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = 1;\n
    return v3;\n
}\n
", "4215084:sub_40512c": null, "4215088:cgc_is_too_much_amp_load_on_load_center": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_too_much_amp_load_on_load_center()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_get_total_amp_load_on_load_center();\n
    if ([D] GetI(136:I8x8)[t7,0])\n
    {\n
        v1 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v1 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    if ([D] GetI(136:I8x8)[t7,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v2 = cgc_get_amp_rating_of_load_center();\n
    if ([D] GetI(136:I8x8)[t7,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,0] = t9\n
    [D] PutI(136:I8x8)[t5,0] = 0x01\n
    [D] PutI(72:F64x8)[t5,1] = t2\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t25,0] = 0x00\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = 1;\n
    return v3;\n
}\n
", "4215175:sub_405187": null, "4215184:cgc_do_build": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_build()\n
{\n
}\n
", "4215617:sub_405341": null, "4215632:cgc_do_send_results": "int cgc_do_send_results(unsigned int v0)\n
{\n
    return cgc_send(v0, 37);\n
}\n
", "4215679:sub_40537f": null, "4215680:cgc_do_examine": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_examine()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v6 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = cgc_recv_uint32();\n
    v1 = v3 - 2049;\n
    if (v1 > 5)\n
        v5 = -81;\n
    else\n
        goto *(((stack_base)[68] + (stack_base)[64] * 4 - 8844)) + (stack_base)[68];\n
}\n
", "4216038:sub_4054e6": null, "4216048:cgc_do_nonce": "typedef struct struct_0 {\n
    unsigned int field_-2274;\n
    unsigned int field_-2270;\n
} struct_0;\n
\n
int cgc_do_nonce()\n
{\n
    char v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    struct_0 *v9;  // ebx\n
\n
    v6 = v8;\n
    strncpy(&v0, \"1234567\", 7);\n
    v4 = cgc_rand(&v3, 8);\n
    if (v4 < 0)\n
        cgc__terminate();\n
    cgc_send(&v3, 8);\n
    v9 = *(&v0);\n
    v1 = v9[1102].field_-2270;\n
    v2 = v9[1102].field_-2274;\n
    if (cgc_recv_all(&v1, 8) != 8)\n
        cgc__terminate();\n
    if (v3 == v1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = -82;\n
    return v5;\n
}\n
", "4216277:sub_4055d5": null, "4216288:cgc_recv_uint32": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv_uint32()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    memset(&v1, 0, 4);\n
    if (cgc_recv_all(&v1, 4) != 4)\n
    {\n
        cgc__terminate();\n
        return *(&v1);\n
    }\n
    return *(&v1);\n
}\n
", "4216400:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    memset(&v3, 0, 4);\n
    v2 = 0;\n
    do\n
    {\n
        v2 = cgc_do_nonce();\n
        if (!v2)\n
        {\n
            if (cgc_recv_all(&v3, 4) != 4)\n
                cgc__terminate();\n
            v0 = *(&v3);\n
            if (v0 == 13980)\n
            {\n
                v2 = cgc_do_build();\n
            }\n
            else if (v0 != 809110)\n
            {\n
                v2 = -80;\n
            }\n
            else\n
            {\n
                v2 = cgc_do_examine();\n
            }\n
        }\n
    } while (v2 >= 0);\n
    cgc_send(&v2, 4);\n
    v8 = v5;\n
    return v2;\n
}\n
", "4216676:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:memset": null, "5242904:cgc_deallocate": null, "5242908:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}