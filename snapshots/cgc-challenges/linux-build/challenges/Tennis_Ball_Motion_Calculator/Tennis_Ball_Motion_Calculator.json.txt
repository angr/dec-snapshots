{"4198400:_init": "extern struct_0 *g_404370;\n
\n
int _init()\n
{\n
    if (g_404370)\n
    {\n
        g_404370();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4198496:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198512:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 12935;\n
    v6 = v5 + 33;\n
    v7 = v5 + 33;\n
    if (v7 == v6)\n
        return v5 + 33;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 12871;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 33;\n
    v9 = (v6 + 33 - (v6 + 33) >> 31) + (33 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40436c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40436c)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_readLine": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readLine(unsigned int v11, struct_0 *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xbc]\n
    unsigned int v1;  // [bp-0xb0]\n
    unsigned int v2;  // [bp-0xac]\n
    void* v3;  // [bp-0xa8]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    char v6;  // [bp-0x1c]\n
    struct_0 *v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v8;  // [bp-0x14]\n
    char v9;  // [bp-0xd]\n
    struct_0 *v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
\n
    v1 = \"`B\";\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v4 = a1;\n
    if (!a0)\n
    {\n
        v10 = -3;\n
        return v10;\n
    }\n
    v2 = 1;\n
    v3 = 0;\n
    for (v7 = 0; v7 < 32; v7 += 1)\n
    {\n
        *(&(&v5)[4 * v7]) = 0;\n
    }\n
    v7 = 0;\n
    while (true)\n
    {\n
        v12 = v11 >> 5;\n
        *(&(&v5)[4 * v12]) = 1 << (v11 & 31 & 31) | *(&(&v5)[4 * v12]);\n
        v0 = 0;\n
        v8 = cgc_fdwait(1, &v5, 0, &v2);\n
        if (v8)\n
        {\n
            v10 = -(v8);\n
            return v10;\n
        }\n
        v8 = cgc_receive(v11, &v9, 1);\n
        if (v8)\n
        {\n
            v10 = -(v8);\n
            return v10;\n
        }\n
        else if (*(&v6))\n
        {\n
            if (*(&v6) == 1)\n
            {\n
                a0[v7].field_0 = v9;\n
                v7 += 1;\n
                if (v7 >= v4)\n
                    v7 = v4 - 1;\n
            }\n
            if (v9 == 10)\n
            {\n
                a0[v7].field_0 = 0;\n
                v10 = v7;\n
                return v10;\n
            }\n
        }\n
        else\n
        {\n
            v10 = -6;\n
            return v10;\n
        }\n
    }\n
}\n
", "4199351:sub_4013b7": null, "4199360:cgc_myStrLen": "int cgc_myStrLen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4199435:sub_40140b": null, "4199440:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = \"`B\";\n
    for (v4 = a0 + a1; a0 < v4; a0 = *(&v3) + a0)\n
    {\n
        v0 = &v3;\n
        v2 = cgc_transmit(v5, a0, v4 - a0);\n
        if (!v2 && !(!*(&v3)))\n
            goto LABEL_401493;\n
        cgc__terminate();\n
LABEL_401493:\n
    }\n
    return a0;\n
}\n
", "4199592:sub_4014a8": null, "4199600:cgc_snprintdecimal": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_snprintdecimal(char v5[2], unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v4[2];  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v3 = 0;\n
    *(&v2) = 0;\n
    v1 = 0;\n
    v0 = 48;\n
    if (v5 && a0 >= 2 && a0 > a2)\n
    {\n
        if (a1)\n
        {\n
            for (v0 = 0; a1; v3 += 1)\n
            {\n
                v1 = (0 CONCAT a1) /m 10 >> 32;\n
                (&v0)[v3] = v1 + 48;\n
                a1 = (0 CONCAT a1) /m 10;\n
            }\n
            for (v2 = 0; v2 < a2 - v3; v2 += 1)\n
            {\n
                v5[v2] = 48;\n
            }\n
            if (v3 >= a0)\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            for (v3 -= 1; v3 >= 0; v3 -= 1)\n
            {\n
                v5[v2] = (&v0)[v3];\n
                v2 += 1;\n
            }\n
            v5[v2] = 0;\n
            v4 = v2;\n
            return v4;\n
        }\n
        else\n
        {\n
            v5[0] = 48;\n
            v5[1] = 0;\n
            v4 = 1;\n
            return v4;\n
        }\n
    }\n
    *(&v4) = -1;\n
    return v4;\n
}\n
", "4199954:sub_401612": null, "4199968:cgc_snprintfloat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_snprintfloat(char *v14, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x58]\n
    unsigned short v1;  // [bp-0x54]\n
    unsigned short v2;  // [bp-0x52]\n
    unsigned short v3;  // [bp-0x50]\n
    unsigned short v4;  // [bp-0x4e]\n
    unsigned int v5;  // [bp-0x4c]\n
    void* v6;  // [bp-0x48]\n
    unsigned long v7;  // [bp-0x44]\n
    unsigned long v8;  // [bp-0x3c]\n
    char *v9;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v11;  // [bp-0x28]\n
    char *v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
\n
    v13 = v15;\n
    v0 = \"`B\";\n
    if ([D] GetI(136:I8x8)[t14,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t33,0] = t34\n
    [D] PutI(136:I8x8)[t33,0] = 0x01\n
    [D] PutI(136:I8x8)[t33,0] = 0x00\n
    v10 = 0;\n
    [D] PutI(72:F64x8)[t55,0] = t58\n
    [D] PutI(136:I8x8)[t55,0] = 0x01\n
    v4 = [D] x86g_create_fpucw(fpround<4>);\n
    v3 = v4 | 0xc00;\n
    v8 = ([D] GetI(136:I8x8)[t92,0] ? [D] GetI(72:F64x8)[t92,0] : nan);\n
    [D] PutI(136:I8x8)[t92,0] = 0x00\n
    v10 = v8;\n
    v9 = 0;\n
    v11 = 48;\n
    v11 = 0;\n
    v9 = cgc_snprintdecimal(v14, a0, v10, 0);\n
    if (v9 < 0)\n
    {\n
        v12 = v9;\n
        return v12;\n
    }\n
    else if (v9 + 1 < a0)\n
    {\n
        v14[v9] = 46;\n
        v14[1 + v9] = 0;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v5 = v10;\n
        v6 = 0;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t38,1] = t39\n
        [D] PutI(136:I8x8)[t38,1] = 0x01\n
        [D] PutI(136:I8x8)[t38,0] = 0x00\n
        [D] PutI(72:F64x8)[t60,0] = t63\n
        [D] PutI(136:I8x8)[t60,0] = 0x01\n
        [D] PutI(72:F64x8)[t71,1] = t72\n
        [D] PutI(136:I8x8)[t71,1] = 0x01\n
        [D] PutI(136:I8x8)[t71,0] = 0x00\n
        v2 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-78, size=2, endness=Iend_LE)))));\n
        v1 = v2 | 0xc00;\n
        v7 = ([D] GetI(136:I8x8)[t117,0] ? [D] GetI(72:F64x8)[t117,0] : nan);\n
        [D] PutI(136:I8x8)[t117,0] = 0x00\n
        v10 = v7;\n
        v12 = cgc_snprintdecimal(&v14[v9 + 1], a0 - v9 - 1, v10, 6);\n
        return v12;\n
    }\n
    else\n
    {\n
        v12 = -1;\n
        return v12;\n
    }\n
}\n
", "4200286:sub_40175e": null, "4200288:cgc_strToUint32": "int cgc_strToUint32(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_26;  // tmp #26\n
    char v1;  // [bp-0x19]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v12;  // eax\n
\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v5[v7])\n
        {\n
            v1 = 0;\n
            if (v5[v7] != 10)\n
            {\n
                v1 = 0;\n
                if (v5[v7] != 46)\n
                {\n
                    v1 = 0;\n
                    if (v5[v7] != 44)\n
                        v1 = v5 < 9;\n
                }\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        if (v5[v7] < 48)\n
        {\n
LABEL_40188a:\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (!(v5[v7] <= 57))\n
            goto LABEL_40188a;\n
        v2 = v5[v7] - 48;\n
        v8 = v3;\n
        v0 = v4;\n
        v3 = v8 * 10;\n
        v4 = (v8 * 10 >> 32) + v0 * 10;\n
        v9 = v2;\n
        v10 = v3;\n
        tmp_26 = v10;\n
        v12 = v4 + (tmp_26 + v9 < tmp_26);\n
        v3 = v10 + v9;\n
        v4 = v12;\n
        v5 += 1;\n
    }\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, Load(addr=stack_base-16, size=4, endness=Iend_LE), Conv(1->32, (Load(addr=stack_base-20, size=4, endness=Iend_LE) < 0x3b9aca00<32>)), Conv(1->32, (Load(addr=stack_base-20, size=4, endness=Iend_LE) < 0x3b9aca00<32>)))))\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v6 = v3;\n
    return v6;\n
}\n
", "4200664:sub_4018d8": null, "4200672:cgc_strToDouble": null, "4201234:sub_401b12": null, "4201248:cgc_fillPage": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fillPage(unsigned int v18, unsigned int a0, unsigned int *a1, unsigned int *a2, unsigned int a3)\n
{\n
    unsigned int *v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned short v2;  // [bp-0x44]\n
    unsigned short v3;  // [bp-0x42]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    unsigned int v8;  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    void* v11;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v12;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x18]\n
    unsigned int v15;  // [bp-0x14]\n
    void* v16;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v17;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int *v60;  // eax\n
    unsigned int v61;  // ecx\n
    unsigned int *v62;  // eax\n
\n
    v1 = \"`B\";\n
    v21 = v20 - 1;\n
    if ([D] GetI(136:I8x8)[t25,0])\n
    {\n
        v22 = v21 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v22 = v21 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,0] = t6\n
    [D] PutI(136:I8x8)[t5,0] = 0x01\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    v23 = v22 - 0;\n
    [D] PutI(72:F64x8)[t19,0] = t22\n
    [D] PutI(136:I8x8)[t19,0] = 0x01\n
    [D] PutI(72:F64x8)[t30,0] = t31\n
    [D] PutI(136:I8x8)[t30,0] = 0x01\n
    [D] PutI(136:I8x8)[t30,0] = 0x00\n
    if (!(a1 && a2))\n
        return a1;\n
    v17 = 0;\n
    v16 = 0;\n
    v15 = 1092406477;\n
    v10 = *(a2);\n
    v25 = v23 + 1 - 1;\n
    if ([D] GetI(136:I8x8)[t25,0])\n
    {\n
        v26 = v25 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v26 = v25 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v9 = a3;\n
    v27 = v26 - 1;\n
    if ([D] GetI(136:I8x8)[t25,0])\n
    {\n
        v28 = v27 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v28 = v27 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,1] = t6\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    v29 = v28 + 1;\n
    v14 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
    [D] PutI(136:I8x8)[t31,0] = 0x00\n
    v30 = v29 + 1;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v12 = 0;\n
    while (true)\n
    {\n
        v0 = v12;\n
        if (v0 >= (0 CONCAT 0x200) /m a3)\n
            break;\n
        v7 = *(a2);\n
        v31 = v30 - 1;\n
        if ([D] GetI(136:I8x8)[t25,0])\n
        {\n
            v32 = v31 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v32 = v31 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v6 = a3;\n
        v33 = v32 - 1;\n
        if (![D] GetI(136:I8x8)[t25,0])\n
        {\n
            v34 = v33 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v34 = v33 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t23,1] = t24\n
        [D] PutI(136:I8x8)[t23,1] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        v35 = v34 + 1;\n
        v17 = ([D] GetI(136:I8x8)[t49,0] ? [D] GetI(72:F64x8)[t49,0] : nan);\n
        [D] PutI(136:I8x8)[t49,0] = 0x00\n
        [D] PutI(72:F64x8)[t60,0] = t63\n
        [D] PutI(136:I8x8)[t60,0] = 0x01\n
        v37 = v35 - 0 - 1;\n
        [D] PutI(72:F64x8)[t73,0] = t76\n
        [D] PutI(136:I8x8)[t73,0] = 0x01\n
        [D] PutI(72:F64x8)[t84,1] = t85\n
        [D] PutI(136:I8x8)[t84,1] = 0x01\n
        [D] PutI(136:I8x8)[t84,0] = 0x00\n
        v38 = v37 + 1;\n
        v3 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-66, size=2, endness=Iend_LE)))));\n
        v2 = v3 | 0xc00;\n
        v8 = ([D] GetI(136:I8x8)[t130,0] ? [D] GetI(72:F64x8)[t130,0] : nan);\n
        [D] PutI(136:I8x8)[t130,0] = 0x00\n
        v30 = v38 + 1;\n
        v13 = a3 * v8;\n
        for (v11 = 0; v11 < a3; v11 += 1)\n
        {\n
            v5 = *(a2);\n
            v39 = v30 - 1;\n
            if ([D] GetI(136:I8x8)[t25,0])\n
            {\n
                v40 = v39 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v40 = v39 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v4 = a3;\n
            v41 = v40 - 1;\n
            if ([D] GetI(136:I8x8)[t25,0])\n
            {\n
                v42 = v41 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v42 = v41 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t18,1] = t19\n
            [D] PutI(136:I8x8)[t18,1] = 0x01\n
            [D] PutI(136:I8x8)[t18,0] = 0x00\n
            v43 = v42 + 1;\n
            v17 = ([D] GetI(136:I8x8)[t44,0] ? [D] GetI(72:F64x8)[t44,0] : nan);\n
            [D] PutI(136:I8x8)[t44,0] = 0x00\n
            [D] PutI(72:F64x8)[t55,0] = t58\n
            [D] PutI(136:I8x8)[t55,0] = 0x01\n
            v45 = v43 - 0 - 1;\n
            [D] PutI(72:F64x8)[t68,0] = t71\n
            [D] PutI(136:I8x8)[t68,0] = 0x01\n
            [D] PutI(72:F64x8)[t79,1] = t80\n
            [D] PutI(136:I8x8)[t79,1] = 0x01\n
            [D] PutI(136:I8x8)[t79,0] = 0x00\n
            v46 = v45 + 1;\n
            *((&a1[2 * v13] + 0x8 * v11)) = ([D] GetI(136:I8x8)[t116,0] ? [D] GetI(72:F64x8)[t116,0] : nan);\n
            [D] PutI(136:I8x8)[t116,0] = 0x00\n
            v47 = v46 - 0;\n
            [D] PutI(72:F64x8)[t127,0] = t130\n
            [D] PutI(136:I8x8)[t127,0] = 0x01\n
            v48 = v47 - 1;\n
            [D] PutI(72:F64x8)[t140,0] = t143\n
            [D] PutI(136:I8x8)[t140,0] = 0x01\n
            v49 = v48 - 1;\n
            [D] PutI(72:F64x8)[t153,0] = t156\n
            [D] PutI(136:I8x8)[t153,0] = 0x01\n
            [D] PutI(72:F64x8)[t164,0] = t165\n
            [D] PutI(136:I8x8)[t164,0] = 0x01\n
            [D] PutI(72:F64x8)[t181,0] = t182\n
            [D] PutI(136:I8x8)[t181,0] = 0x01\n
            v50 = v49 - 1;\n
            [D] PutI(72:F64x8)[t200,0] = t203\n
            [D] PutI(136:I8x8)[t200,0] = 0x01\n
            [D] PutI(72:F64x8)[t211,1] = t212\n
            [D] PutI(136:I8x8)[t211,1] = 0x01\n
            [D] PutI(136:I8x8)[t211,0] = 0x00\n
            v51 = v50 + 1;\n
            [D] PutI(72:F64x8)[t234,0] = t238\n
            [D] PutI(136:I8x8)[t234,0] = 0x01\n
            [D] PutI(72:F64x8)[t234,2] = t231\n
            [D] PutI(136:I8x8)[t234,2] = 0x01\n
            [D] PutI(72:F64x8)[t249,1] = t250\n
            [D] PutI(136:I8x8)[t249,1] = 0x01\n
            [D] PutI(136:I8x8)[t249,0] = 0x00\n
            v52 = v51 + 1;\n
            [D] PutI(72:F64x8)[t269,1] = t270\n
            [D] PutI(136:I8x8)[t269,1] = 0x01\n
            [D] PutI(136:I8x8)[t269,0] = 0x00\n
            v53 = v52 + 1;\n
            v16 = ([D] GetI(136:I8x8)[t295,0] ? [D] GetI(72:F64x8)[t295,0] : nan);\n
            [D] PutI(136:I8x8)[t295,0] = 0x00\n
            v54 = v53 - 0;\n
            [D] PutI(72:F64x8)[t306,0] = t309\n
            [D] PutI(136:I8x8)[t306,0] = 0x01\n
            v55 = v54 - 1;\n
            [D] PutI(72:F64x8)[t317,0] = t320\n
            [D] PutI(136:I8x8)[t317,0] = 0x01\n
            [D] PutI(136:I8x8)[t332,0] = 0x00\n
            v56 = v55 + 1;\n
            [D] PutI(72:F64x8)[t346,0] = t347\n
            [D] PutI(136:I8x8)[t346,0] = 0x01\n
            [D] PutI(136:I8x8)[t346,0] = 0x00\n
            v57 = v56 + 1;\n
            if (((CmpF(([D] GetI(136:I8x8)[t332,0] ? [D] GetI(72:F64x8)[t332,0] : nan), ([D] GetI(136:I8x8)[t332,1] ? [D] GetI(72:F64x8)[t332,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t332,0] ? [D] GetI(72:F64x8)[t332,0] : nan), ([D] GetI(136:I8x8)[t332,1] ? [D] GetI(72:F64x8)[t332,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                v16 = 0;\n
            v58 = v57 - 1;\n
            if ([D] GetI(136:I8x8)[t25,0])\n
            {\n
                v59 = v58 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v59 = v58 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v60 = a1;\n
            v61 = v13 + v11;\n
            if ([D] GetI(136:I8x8)[t25,0])\n
            {\n
                v60[1 + 2 * v61] = [D] GetI(72:F64x8)[t10,0];\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v30 = v59 + 1;\n
            }\n
            else\n
            {\n
                v60[1 + 2 * v61] = nan;\n
                [D] PutI(136:I8x8)[t10,0] = 0x00\n
                v30 = v59 + 1;\n
            }\n
            v62 = a2;\n
            *(v62) = *(v62) + 1;\n
        }\n
        v12 = v12 + 1;\n
    }\n
    return v0;\n
}\n
", "4201678:sub_401cce": null, "4201680:main": null, "4202992:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_fdwait": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}