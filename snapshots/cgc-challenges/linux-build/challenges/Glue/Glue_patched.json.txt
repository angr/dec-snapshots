{"4202496:_init": "extern struct_0 *g_40a728;\n
\n
int _init()\n
{\n
    if (g_40a728)\n
    {\n
        g_40a728();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 34367;\n
    v6 = v5 + 862;\n
    v7 = v5 + 862;\n
    if (v7 == v6)\n
        return v5 + 862;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 34303;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 862;\n
    v9 = (v6 + 862 - (v6 + 862) >> 31) + (862 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a724;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a724)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    if (v5 * a0 >> 32)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = cgc_malloc_alloc(v1 + 3472);\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v4 = v2;\n
    return v4;\n
}\n
", "4203144:sub_402288": null, "4203152:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 1;\n
}\n
", "4203192:sub_4022b8": null, "4203200:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 2;\n
}\n
", "4203240:sub_4022e8": null, "4203248:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 16;\n
}\n
", "4203288:sub_402318": null, "4203296:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 14;\n
}\n
", "4203336:sub_402348": null, "4203344:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 12;\n
}\n
", "4203384:sub_402378": null, "4203392:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 4;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 8;\n
}\n
", "4203480:sub_4023d8": null, "4203488:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 64;\n
}\n
", "4203528:sub_402408": null, "4203536:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 32;\n
}\n
", "4203576:sub_402438": null, "4203584:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[44 + v0] & 128;\n
}\n
", "4203626:sub_40246a": null, "4203632:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v4)\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_toupper();\n
    v2 = 1;\n
    if (cgc_isdigit(v4))\n
        return v2 & 1;\n
    v0 = 0;\n
    if (v4 >= 65)\n
        v0 = v4 <= 70;\n
    v2 = v0;\n
    return v2 & 1;\n
}\n
", "4203746:sub_4024e2": null, "4203760:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203845:sub_402545": null, "4203856:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_toupper(v3);\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    if (v3 >= 65 && v3 <= 70)\n
    {\n
        v1 = v3 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203985:sub_4025d1": null, "4204000:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204085:sub_402635": null, "4204096:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_fflush(v2, v3);\n
    return;\n
}\n
", "4204128:cgc_fflush": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fflush(unsigned int v4[5])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v4[1] != 1)\n
    {\n
        v2 = 0;\n
        v0 = v4[3] - v4[2];\n
        ::0x402760::cgc_xlat(v4[4], &v4[1 + 1] + v4[2]);\n
        v0 = v4[3] - v4[2];\n
        if (::0x4027d0::cgc_transmit_all(v4[0], &v4[1 + 1] + v4[2]))\n
            v2 = -1;\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4204380:sub_40275c": null, "4204384:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204483:sub_4027c3": null, "4204496:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4204646:sub_402866": null, "4204656:cgc_fbuffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fbuffered(unsigned int v1[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[2] != -1)\n
        cgc_fflush(v1);\n
    if (a0)\n
        v1[2] = 0;\n
    else\n
        v1[2] = -1;\n
    v1[3] = 0;\n
    return v1;\n
}\n
", "4204772:sub_4028e4": null, "4204784:cgc_fopen": "int cgc_fopen(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[6];  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v1[0] = cgc_malloc();\n
    if (!v1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v1[0] = v3;\n
    v1[1] = (a0 ? 1 : 2);\n
    v1[2] = 0;\n
    v1[3] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4204934:sub_402986": null, "4204944:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1[6])\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[6];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] == a1[3])\n
        cgc__refill();\n
    if (a1[2] != -1)\n
    {\n
        v2 = a1[3] - a1[2];\n
        if (v2 > a0)\n
            v2 = a0;\n
        cgc_memcpy(v4, 1 + a1 + a1[2]);\n
        v3 = v2 + v3;\n
        v7 = a1;\n
        v7[2] = v2 + v7[2];\n
        if (a1[2] == a1[3])\n
        {\n
            a1[3] = 0;\n
            a1[2] = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(a1[0], v4 + v3, a0 - v3))\n
            break;\n
        if (!v2)\n
            break;\n
        ::0x402bf0::cgc_xlat(a1[5], v4 + v3);\n
        v3 = v2 + v3;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4205323:sub_402b0b": null, "4205328:cgc__refill": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__refill(unsigned int v4[6])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == v4[3])\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
    }\n
    v0 = &v2;\n
    if (!cgc_receive(v4[0], (1 + v4 + v4[3]), 0x400 - v4[3]) && *(&v2))\n
    {\n
        v4[3] = *(&v2);\n
        ::0x402bf0::cgc_xlat(v4[5], v4 + 1);\n
        v3 = *(&v2);\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205539:sub_402be3": null, "4205552:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205651:sub_402c53": null, "4205664:cgc_freaduntil": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freaduntil(unsigned int v6, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 0; v4 < a0 - 1; v4 += 1)\n
    {\n
        v0 = a2;\n
        v3 = cgc__getc();\n
        if (v3 == -1)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v3 == a1)\n
            break;\n
        *((v6 + v4)) = v3;\n
    }\n
    if (v4 == a0 - 1)\n
    {\n
        do\n
        {\n
            v0 = a2;\n
            v2 = cgc__getc();\n
            if (v2 == -1)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        } while (v2 != a1);\n
    }\n
    *((v6 + v4)) = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4205930:sub_402d6a": null, "4205936:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    char *field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__getc(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6[6];  // edx\n
    unsigned int v7;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5->field_8 == -1)\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v5->field_0, &v3, 1) && *(&v2))\n
        {\n
            ::0x402bf0::cgc_xlat(v5->field_14, &v3, 1);\n
            v4 = v3;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    else\n
    {\n
        if (v5->field_8 == v5->field_c && cgc__refill(v5) < 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v6 = v5;\n
        v7 = v6[2];\n
        v6[2] = v7 + 1;\n
        v4 = *(24 + &v5->field_0 + v7);\n
        return v4;\n
    }\n
}\n
", "4206181:sub_402e65": null, "4206192:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4206241:sub_402ea1": null, "4206256:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v6, unsigned int a0, unsigned int a1[5])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[5];  // eax\n
    unsigned int v8[5];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] != -1)\n
    {\n
        if (a0 >= 0x400)\n
        {\n
            cgc_fflush(a1);\n
        }\n
        else\n
        {\n
            if (a1[3] + a0 >= 0x400)\n
            {\n
                v2 = 0x400 - a1[3];\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4);\n
                v7 = a1;\n
                v7[3] = v2 + v7[3];\n
                v3 = v2 + v3;\n
                cgc_fflush(a1);\n
            }\n
            if (v3 < a0)\n
            {\n
                v2 = a0 - v3;\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4 + v3);\n
                v8 = a1;\n
                v8[3] = v2 + v8[3];\n
                v3 = v2 + v3;\n
            }\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
    if (a1[4])\n
    {\n
        v0 = a0;\n
        if (cgc_transmit_xlat(a1[0], a1[4], v6))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
    else if (::0x403070::cgc_transmit_all(a1[0], v6))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = a0;\n
    return v5;\n
}\n
", "4206701:sub_40306d": null, "4206704:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4206854:sub_403106": null, "4206864:cgc_transmit_xlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_xlat(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x414], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x410]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a1;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v1 = a2 - v2;\n
            if (v1 > 0x400)\n
                v1 = 0x400;\n
            cgc_memcpy(&v3, v4 + v2);\n
            ::0x403240::cgc_xlat(a0, &v3);\n
            if (::0x403070::cgc_transmit_all(v6, &v3, v1))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = v1 + v2;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207156:sub_403234": null, "4207168:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4207267:sub_4032a3": null, "4207280:cgc_fxlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fxlat(unsigned int v8[6], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char *v4;  // [bp-0x1c]\n
    char *v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    char *v9;  // eax\n
    char *v10;  // eax, Other Possible Types: unsigned int, unsigned int [6]\n
    char *v11;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        cgc_free(v8[4]);\n
        v8[4] = 0;\n
        v10 = v8;\n
        v10[5] = 0;\n
        return v8;\n
    }\n
    v0 = 0x100;\n
    v9 = cgc_realloc(v8[4]);\n
    v8[4] = v9;\n
    v5 = v9;\n
    v0 = 0x100;\n
    v11 = cgc_realloc(v8[5]);\n
    v8[5] = v11;\n
    v4 = v11;\n
    v10 = cgc_hash_seed(a0);\n
    v7 = v10;\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v5[v6] = v6;\n
        v10 = v6 + 1;\n
    }\n
    for (v6 = 255; v6 >= 1; v6 = v10)\n
    {\n
        v3 = (0 CONCAT v7) /m v6 >> 32;\n
        v7 *= 3;\n
        v7 = v7 * 0x2000 ^ v7 >> 19 ^ v7 >> 21;\n
        v2 = v5[v6];\n
        v5[v6] = v5[v3];\n
        v5[v3] = v2;\n
        v10 = v6 - 1;\n
    }\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v4[v5[v6]] = v6;\n
        v10 = v6 + 1;\n
    }\n
    return v10;\n
}\n
", "4207675:sub_40343b": null, "4207680:cgc_hash_seed": "int cgc_hash_seed(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 826981510;\n
    for (v1 = 0; *((v2 + v1)); v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = *((v2 + v1)) ^ v0;\n
        v0 = v0 * 0x2000 ^ v0 >> 19;\n
    }\n
    return v0;\n
}\n
", "4207784:sub_4034a8": null, "4207792:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4207841:sub_4034e1": null, "4207856:cgc_malloc_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_alloc(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    a0 = a0 - -3 & -0x4;\n
    if (a0 < 4)\n
    {\n
        v0 = 4;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 16)\n
    {\n
        v0 = a0;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 0x20000)\n
    {\n
        v0 = a0;\n
        v2 = cgc_small_alloc(v4);\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v2 = cgc_large_alloc(v4);\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4208094:sub_4035de": null, "4208096:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    unsigned int field_1218;\n
    unsigned int field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tiny_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned short v3[2];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned short v10[2];  // eax\n
    struct_0 *v11;  // eax\n
    unsigned short v12[2];  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = cgc_size_to_bin();\n
    v4 = *((v8 + v5 * 4));\n
    if (v4)\n
    {\n
        *((v8 + v5 * 4)) = *(v4);\n
        v6 = v4;\n
        return v6;\n
    }\n
    *(&v3[0]) = *((v8 + v5 * 4 + 4620));\n
    if (!v3)\n
    {\n
        if (!*((v8 + 4632)))\n
        {\n
            v0 = 1;\n
            *((v8 + 4632)) = cgc_run_alloc(v8);\n
            if (!*((v8 + 4632)))\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((v8 + 4636)) = 0;\n
        }\n
        v10 = *((v8 + 4632)) + *((v8 + 4636));\n
        *((v8 + v5 * 4 + 4620)) = v10;\n
        v3 = v10;\n
        *(v3) = a0;\n
        *((v3 + 2)) = a0;\n
        v11 = v8;\n
        v11->field_121c = v11->field_121c + 0x1000;\n
        if (*((v8 + 4636)) == 0x100000)\n
            *((v8 + 4632)) = 0;\n
    }\n
    v2 = v3 + *((v3 + 2));\n
    v12 = v3;\n
    v12[1] = v12[1] + a0;\n
    if (*((v3 + 2)) + *(v3) > 0x1000)\n
        *((v8 + v5 * 4 + 4620)) = 0;\n
    v6 = v2;\n
    return v6;\n
}\n
", "4208507:sub_40377b": null, "4208512:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc(unsigned int v7, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    struct struct_0 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 - -23 & -0x10;\n
    for (v4 = cgc_size_to_bin(); v4 < 131; v4 = v4 + 1)\n
    {\n
        for (v2 = *((v7 + v4 * 4)); v2; v2 = *((v2 + 12)))\n
        {\n
            if (*((v2 + 4)) >= v3)\n
                break;\n
        }\n
        if (v2)\n
            break;\n
    }\n
    if (v4 == 131)\n
    {\n
        if (!cgc_small_alloc_run())\n
        {\n
            v4 = 130;\n
            v2 = *((v7 + v4 * 4));\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    v0 = v2;\n
    cgc_small_unlink_free(v7, v4);\n
    if (*((v2 + 4)) - v3 > 32)\n
    {\n
        v0 = v3;\n
        cgc_small_split(v7, v2);\n
    }\n
    v5 = v2 + 8;\n
    return v5;\n
}\n
", "4208839:sub_4038c7": null, "4208848:cgc_large_alloc": "int cgc_large_alloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = a0 - -4103 & -0x1000;\n
    v0 = &v2;\n
    if (cgc_allocate(v3, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v5;\n
    v1[1] = v3;\n
    v4 = v1 + 1;\n
    return v4;\n
}\n
", "4208985:sub_403959": null, "4208992:malloc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int malloc_free(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = *((v3 + (a0 >> 20) + 524));\n
    v2 = v4;\n
    if (!a0)\n
    {\n
        return *((v3 + (a0 >> 20) + 524));\n
    }\n
    else if (v2)\n
    {\n
        if (v2 == 2)\n
        {\n
            v0 = a0;\n
            v4 = cgc_small_free(v3);\n
        }\n
        else if (v2 == 1)\n
        {\n
            v0 = a0;\n
            v4 = cgc_tiny_free(v3);\n
        }\n
        return v4;\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v4 = cgc_large_free(v3);\n
        return v4;\n
    }\n
}\n
", "4209194:sub_403a2a": null, "4209200:cgc_large_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_large_free(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[2];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    if ((v3 & 4095) != 8)\n
        cgc_heap_error(v1 - 9932);\n
    v2[0] = a0 - 8;\n
    if (v2[0] != v4)\n
    {\n
        v0 = v4;\n
        cgc_heap_error(v1 - 9883, v3, v2[0]);\n
    }\n
    if (v2[1] >= 0x20000 && v2[1] <= 2147487743 && !(v2[1] & 4095))\n
        return cgc_deallocate(v2);\n
    cgc_heap_error(v1 - 9829, v3);\n
    return cgc_deallocate(v2);\n
}\n
", "4209456:cgc_small_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6[2];  // [bp-0x18]\n
    unsigned int v7[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v8[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11[2];  // eax\n
    unsigned int v12[2];  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = a0;\n
    v8[0] = v9 - 8;\n
    v5 = v9 & -0x100000;\n
    if ((v9 & 7))\n
        cgc_heap_error(v4 - 9785);\n
    if ((v8[1] & 1))\n
        cgc_heap_error(v4 - 9736);\n
    if (v8[1] <= 0x20000 && !(v8[1] < 16))\n
        goto LABEL_403bec;\n
    cgc_heap_error(v4 - 9698);\n
LABEL_403bec:\n
    if (!v8[0])\n
        v7[0] = 0;\n
    else\n
        v7 = v8 - v8[0];\n
    v6[0] = v8 + v8[1];\n
    if (v7 && (*((v7 + 4)) & -2) != v8[0])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 9657, v7);\n
    }\n
    if (v6[0] != v8[1])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 9605, v6);\n
    }\n
    if (v7 && (*((v7 + 4)) & 1))\n
    {\n
        v3 = v10;\n
        v0[0] = v7;\n
        cgc_small_unlink_free(v3, cgc_size_to_bin());\n
        v11 = v7;\n
        v11[1] = v8[1] + v11[1];\n
        v8 = v7;\n
        v6[0] = *((v8 + 4));\n
    }\n
    if ((v6[1] & 1))\n
    {\n
        v2 = v10;\n
        v0[0] = v6;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin());\n
        v12 = v8;\n
        v12[1] = v6[1] + v12[1];\n
        v6[0] = v8 + v8[1];\n
        v6[0] = *((v8 + 4));\n
    }\n
    v1 = v10;\n
    v0[0] = v8;\n
    return cgc_small_insert_free(v1, cgc_size_to_bin());\n
}\n
", "4210078:sub_403d9e": null, "4210080:cgc_tiny_free": "int cgc_tiny_free(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned short *v1;  // [bp-0x14]\n
    unsigned short *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
\n
    v2 = a0 & -0x1000;\n
    v1 = a0;\n
    v0 = *(v2);\n
    v3 = cgc_size_to_bin();\n
    *(&v1) = *((v4 + v3 * 4));\n
    *((v4 + v3 * 4)) = v1;\n
    return v4;\n
}\n
", "4210171:sub_403dfb": null, "4210176:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned short *v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = *((v4 + (a0 >> 20) + 524));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a0 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &a0[4];\n
    v3 = v1->field_4 - 8;\n
    return v3;\n
}\n
", "4210314:sub_403e8a": null, "4210320:cgc_malloc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_realloc(unsigned int v6, unsigned short *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 > 2147483647)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a1)\n
    {\n
        malloc_free(v6, a0);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        v5 = cgc_malloc_alloc(v6, a1);\n
        return v5;\n
    }\n
    else if (cgc_malloc_size(v6, a0) < a1)\n
    {\n
        v4 = cgc_malloc_alloc(v6, a1);\n
        if (!v4)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v1 = v4;\n
        v2 = a0;\n
        v0 = cgc_malloc_size(v6, a0);\n
        cgc_memcpy(v1, v2);\n
        malloc_free(v6, a0);\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
}\n
", "4210639:sub_403fcf": null, "4210640:cgc_size_to_bin": "int cgc_size_to_bin(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 16)\n
    {\n
        v0 = (v1 >> 2) - 1;\n
        return v0;\n
    }\n
    else if (v1 <= 0x200)\n
    {\n
        v0 = (v1 >> 4) - -2;\n
        return v0;\n
    }\n
    else if (v1 <= 0x1200)\n
    {\n
        v0 = (v1 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (v1 <= 0x20000)\n
    {\n
        v0 = (v1 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210803:sub_404073": null, "4210816:cgc_run_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_alloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x200000, 0))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = *(&v2);\n
    v3 = v4 - -1048575 & -0x100000;\n
    if (v4 < v3)\n
        cgc_deallocate(v4);\n
    if (v3 + 0x100000 < v4 + 0x200000)\n
        cgc_deallocate(v3 + 0x100000);\n
    *((v7 + (v3 >> 20) + 524)) = a0;\n
    v5 = v3;\n
    return v5;\n
}\n
", "4211069:sub_40417d": null, "4211072:cgc_small_alloc_run": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc_run(unsigned int v7)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_run_alloc(v7, 2);\n
    if (!v2)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v4[0] = v2 - -19 & -0x10;\n
    v4[0] = 0;\n
    v4[1] = 1048560 + -0x1 * v4 + v2;\n
    v3[0] = v4 + v4[1];\n
    v3[0] = v4[1];\n
    v3[1] = 0;\n
    v0[0] = v4;\n
    cgc_small_insert_free(v7, 130);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211270:sub_404246": null, "4211280:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_unlink_free(unsigned int *v2, unsigned int a0, struct_2 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_2 *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!(a1->field_4 & 1))\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 9978);\n
    }\n
    v3 = a1;\n
    v3->field_4 = v3->field_4 & -2;\n
    if (a1->field_8)\n
        a1->field_8->field_c = a1->field_c;\n
    if (a1->field_c)\n
        a1->field_c->field_8 = a1->field_8;\n
    if (v2[a0] == a1)\n
        v2[a0] = a1->field_c;\n
    a1->field_8 = 0;\n
    a1->field_c = 0;\n
    return a1;\n
}\n
", "4211480:sub_404318": null, "4211488:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_split(unsigned int v7, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0->field_4 - a1;\n
    v4[0] = &a0->padding_0[a1];\n
    v3 = &a0->padding_0[a0->field_4];\n
    a0->field_4 = a1;\n
    v4[0] = a0->field_4;\n
    v4[1] = v5;\n
    *(v3) = v5;\n
    v2 = v7;\n
    v0[0] = v4;\n
    v9 = v6;\n
    return cgc_small_insert_free(v2, cgc_size_to_bin(v5));\n
}\n
", "4211639:sub_4043b7": null, "4211648:cgc_small_insert_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_insert_free(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if ((*((a1 + 4)) & 1) == 1)\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 10028);\n
    }\n
    v3 = a1;\n
    *((v3 + 4)) = *((v3 + 4)) | 1;\n
    *((a1 + 8)) = 0;\n
    *((a1 + 12)) = *((v2 + a0 * 4));\n
    *((v2 + a0 * 4)) = a1;\n
    v4 = a1;\n
    if (*((v4 + 12)))\n
    {\n
        v4 = *((a1 + 12));\n
        *((v4 + 8)) = a1;\n
    }\n
    return v4;\n
}\n
", "4211801:sub_404459": null, "4211808:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    char v5;  // [bp-0x4]\n
    unsigned int v6;  // [bp+0x4]\n
    char v7;  // [bp+0x8]\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v8 = &v5;\n
    v4 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v7;\n
    v0 = v6;\n
    v1 = v3;\n
    cgc_vfprintf(cgc_stderr, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v9);\n
    v10 = v2;\n
    cgc__terminate(1, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v4);\n
    cgc_memchr();\n
    return;\n
}\n
", "4211904:cgc_memchr": "int cgc_memchr(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v1[v0] == a0)\n
        {\n
            v2 = &v1[v0];\n
            return v2;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4212011:sub_40452b": null, "4212016:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v4;\n
    v0 = a0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v1[v2] != *((v0 + v2)))\n
        {\n
            v3 = v1[v2] - *((v0 + v2));\n
            return v3;\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4212154:sub_4045ba": null, "4212160:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4212246:sub_404616": null, "4212256:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    if (v3 > a0)\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[1 + a1 + -1 * v0] = *((v1 + a1 - v0 - 1));\n
        }\n
        return v3;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[v0] = *((v1 + v0));\n
        }\n
        return v3;\n
    }\n
}\n
", "4212427:sub_4046cb": null, "4212432:cgc_memset": "int cgc_memset(char *v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = v2;\n
    for (v1 = 0; v1 < a1; v1 += 1)\n
    {\n
        v0[v1] = a0;\n
    }\n
    return v2;\n
}\n
", "4212508:sub_40471c": null, "4212512:cgc_printf": "int cgc_printf(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x8]\n
\n
    v1 = &v4;\n
    v0 = v1;\n
    v2 = cgc_vprintf(v3);\n
    return v2;\n
}\n
", "4212570:sub_40475a": null, "4212576:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4212637:sub_40479d": null, "4212640:cgc_fprintf": "int cgc_fprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vfprintf(v4, a0);\n
    return v2;\n
}\n
", "4212709:sub_4047e5": null, "4212720:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vfprintf(struct_0 *v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    if (v4->field_8 == -1)\n
    {\n
        v2 = 0;\n
        v4->field_8 = 0;\n
    }\n
    v0 = 2147483647;\n
    v3 = cgc__vsfprintf(a0, a1, v4, 0);\n
    if (!v2)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4212882:sub_404892": null, "4212896:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vsprintf(v4, a0);\n
    return v2;\n
}\n
", "4212965:sub_4048e5": null, "4212976:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = 2147483647;\n
    return cgc__vsfprintf(a0, a1, 0, v1);\n
}\n
", "4213055:sub_40493f": null, "4213056:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(char *v30, unsigned int *a0, unsigned int a1[5], unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    void* v2;  // [bp-0xc0], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xb8]\n
    unsigned int v4;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xb0]\n
    unsigned int v6;  // [bp-0xac]\n
    char v7;  // [bp-0xa5]\n
    unsigned int v8;  // [bp-0xa4]\n
    unsigned int v9;  // [bp-0xa0]\n
    char v10;  // [bp-0x99]\n
    unsigned int v11;  // [bp-0x98]\n
    unsigned int v12;  // [bp-0x94]\n
    char v13;  // [bp-0x8d]\n
    unsigned int v14;  // [bp-0x8c]\n
    unsigned int v15;  // [bp-0x88]\n
    unsigned int v16;  // [bp-0x84]\n
    unsigned int v17;  // [bp-0x80]\n
    char v18;  // [bp-0x79]\n
    unsigned int v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x74]\n
    char *v21;  // [bp-0x70]\n
    char *v22;  // [bp-0x6c]\n
    char v23;  // [bp-0x65]\n
    unsigned int v24;  // [bp-0x64]\n
    char v25;  // [bp-0x60]\n
    char *v26;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0x18]\n
    char v29;  // [bp-0x11]\n
    char *v31;  // eax\n
    char *v32;  // eax\n
    char *v33;  // eax\n
    char *v34;  // eax\n
    char *v35;  // eax\n
    char *v36;  // eax\n
    unsigned int *v37;  // eax\n
    char *v38;  // eax\n
    unsigned int *v39;  // eax\n
    unsigned int *v40;  // eax\n
    unsigned int *v41;  // eax\n
    unsigned int v42;  // ecx\n
    char *v43;  // eax\n
    char *v44;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v26 = 0;\n
    while (true)\n
    {\n
        v31 = v30;\n
        v30 = v31 + 1;\n
        v29 = *(v31);\n
        if (!v29)\n
            break;\n
        v23 = 32;\n
        while (v29 != 37)\n
        {\n
            if (v26 >= a3)\n
            {\n
                v32 = v26;\n
                v26 = v32 + 1;\n
                if (v32 == -1)\n
                    cgc__terminate();\n
            }\n
            else\n
            {\n
                v18 = v29;\n
                if (a1)\n
                    cgc_fwrite(&v18, 1, a1);\n
                if (a2)\n
                    v26[a2] = v18;\n
                v26 += 1;\n
            }\n
            v33 = v30;\n
            v30 = v33 + 1;\n
            v29 = *(v33);\n
            if (!v29)\n
                goto LABEL_4052d6;\n
        }\n
        v22 = v30;\n
        v28 = 4;\n
        v27 = 0;\n
        v34 = v30;\n
        v30 = v34 + 1;\n
        v5 = *(v34);\n
        v29 = v5;\n
        if (!v5)\n
            break;\n
        if (v5 == 32)\n
        {\n
            v23 = 32;\n
        }\n
        else if (v5 != 48)\n
        {\n
            v30 += 1;\n
        }\n
        else\n
        {\n
            v23 = 48;\n
        }\n
        if (*(v30) >= 48 && *(v30) <= 57)\n
            v27 = cgc_strtoul(v30, &v30);\n
        v35 = v30;\n
        v30 = v35 + 1;\n
        v4 = *(v35);\n
        v29 = v4;\n
        if (!v4)\n
            break;\n
        if (v4 == 104)\n
        {\n
            if (*(v30) == 104)\n
            {\n
                v30 += 1;\n
                v28 = 1;\n
            }\n
            else\n
            {\n
                v28 = 2;\n
            }\n
        }\n
        else\n
        {\n
            if (v4 != 108)\n
            {\n
                v30 += 1;\n
            }\n
            else if (*(v30) != 108)\n
            {\n
                v28 = 4;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 8;\n
            }\n
        }\n
        v36 = v30;\n
        v30 = v36 + 1;\n
        v3 = *(v36);\n
        v29 = v3;\n
        if (!v3)\n
        {\n
            v17 = v30 - v22;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            else\n
            {\n
                v16 = a3 - v26;\n
                if (v16 > v17)\n
                    v16 = v17;\n
                if (a1)\n
                    cgc_fwrite(v22, v16, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, v22, v16);\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            break;\n
        }\n
        if (v3 == 88)\n
        {\n
LABEL_404e5f:\n
            if (v29 == 100)\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v40 = a0;\n
                a0 = v40 + 1;\n
                v19 = *(v40);\n
                v0 = v19;\n
                v1 = 10;\n
                v2 = 0;\n
                cgc__convert_signed(&v25, v0, 10);\n
            }\n
            else\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v41 = a0;\n
                a0 = v41 + 1;\n
                v20 = *(v41);\n
                v42 = (v29 == 117 ? 16 : 10);\n
                v0 = v20;\n
                v1 = v42;\n
                v2 = v29 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v24 = cgc_strlen(&v25, v0, v1);\n
            if (v24 < v27)\n
            {\n
                v27 -= v24;\n
                do\n
                {\n
                    if (v26 >= a3)\n
                    {\n
                        v43 = v26;\n
                        v26 = v43 + 1;\n
                        if (v43 == -1)\n
                            cgc__terminate();\n
                    }\n
                    else\n
                    {\n
                        v13 = v23;\n
                        if (a1)\n
                            cgc_fwrite(&v13, 1, a1);\n
                        if (a2)\n
                            v26[a2] = v13;\n
                        v26 += 1;\n
                    }\n
                    v27 -= 1;\n
                } while (v27 > 0);\n
            }\n
            v12 = v24;\n
            if (v26 < a3)\n
            {\n
                v11 = a3 - v26;\n
                if (v11 > v12)\n
                    v11 = v12;\n
                if (a1)\n
                    cgc_fwrite(&v25, v11, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, &v25, v11);\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            else\n
            {\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            goto LABEL_4052c7;\n
        }\n
        else\n
        {\n
            if (v3 == 99)\n
            {\n
                v37 = a0;\n
                a0 = v37 + 1;\n
                v29 = *(v37);\n
                if (v26 < a3)\n
                {\n
                    v10 = v29;\n
                    if (a1)\n
                        cgc_fwrite(&v10, 1, a1);\n
                    if (a2)\n
                        v26[a2] = v10;\n
                    v26 += 1;\n
                }\n
                else\n
                {\n
                    v38 = v26;\n
                    v26 = v38 + 1;\n
                    if (v38 == -1)\n
                        cgc__terminate();\n
                }\n
                goto LABEL_4052c7;\n
            }\n
            if (v3 == 100)\n
                goto LABEL_404e5f;\n
            if (v3 == 115)\n
            {\n
                v39 = a0;\n
                a0 = v39 + 1;\n
                v21 = *(v39);\n
                v9 = cgc_strlen();\n
                if (v26 >= a3)\n
                {\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
                else\n
                {\n
                    v8 = a3 - v26;\n
                    if (v8 > v9)\n
                        v8 = v9;\n
                    if (a1)\n
                        cgc_fwrite(v21, v8, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v21, v8);\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
LABEL_4052c7:\n
            }\n
            else if (v3 != 117 && v3 != 120)\n
            {\n
                v15 = v30 - v22;\n
                if (v26 < a3)\n
                {\n
                    v14 = a3 - v26;\n
                    if (v14 > v15)\n
                        v14 = v15;\n
                    if (a1)\n
                        cgc_fwrite(v22, v14, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v22, v14);\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                else\n
                {\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                goto LABEL_4052c7;\n
            }\n
        }\n
    }\n
LABEL_4052d6:\n
    a1 = 0;\n
    if (v26 >= a3)\n
    {\n
        v44 = v26;\n
        v26 = v44 + 1;\n
        if (v44 != -1)\n
            return v26 - 1;\n
        cgc__terminate();\n
    }\n
    else\n
    {\n
        v7 = 0;\n
        if (a1)\n
            cgc_fwrite(&v7, 1, a1);\n
        if (a2)\n
            v26[a2] = v7;\n
        v26 += 1;\n
        return v26 - 1;\n
    }\n
}\n
", "4215675:sub_40537b": null, "4215680:cgc__convert_signed": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_signed(char *v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 < 0)\n
    {\n
        v3 = v2;\n
        v2 = v3 + 1;\n
        *(v3) = 45;\n
        a0 = -(a0);\n
    }\n
    v0 = a2;\n
    return cgc__convert_unsigned(v2, a0, a1);\n
}\n
", "4215789:sub_4053ed": null, "4215792:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_unsigned(char *v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v4[20];\n
    if (a2)\n
        v3 = v1 - 9553;\n
    else\n
        v3 = v1 - 9536;\n
    v5 = v2;\n
    v2 = v5 + 1;\n
    v5[1].field_-1 = 0;\n
    if (!a0)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        v6[1].field_-1 = *(v3);\n
        return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
    }\n
    while (true)\n
    {\n
        v0 = v3;\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT a0) /m a1 >> 32];\n
        a0 = (0 CONCAT a0) /m a1;\n
    }\n
}\n
", "4216041:sub_4054e9": null, "4216048:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(unsigned short *v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4216107:sub_40552b": null, "4216112:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(a0));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4216289:sub_4055e1": null, "4216304:cgc_strcasestr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasestr(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!*((v6 + v3)))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v2;\n
        if (!cgc_strncasecmp(v6 + v3, a0))\n
        {\n
            v4 = v6 + v3;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4216461:sub_40568d": null, "4216464:cgc_strchr": "int cgc_strchr(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = 0; v0[v2]; v0 += 1)\n
    {\n
        if (v0[v2] == a0)\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2 + v0;\n
    return v1;\n
}\n
", "4216593:sub_405711": null, "4216608:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4216736:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); v0 += 1)\n
    {\n
        *(v0) = *(a0);\n
        a0 += 1;\n
    }\n
    *(v0) = 0;\n
    return v1;\n
}\n
", "4216814:sub_4057ee": null, "4216816:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v2[v1] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4216950:sub_405876": null, "4216960:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217016:sub_4058b8": null, "4217024:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v5[a1];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v5))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v5));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(a0)))\n
                    v1 = v5 < v3;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v5 += 1;\n
        a0 += 1;\n
    }\n
    if (v5 == v3)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = *(v5) - *(a0);\n
    return v4;\n
}\n
", "4217260:sub_4059ac": null, "4217264:cgc_strncpy": "int cgc_strncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v2;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(a0))\n
            v0 = v1 - v2 < a1;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(a0);\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - v2 < a1; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return v2;\n
}\n
", "4217421:sub_405a4d": null, "4217424:cgc_strndup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strndup(char *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen(v5);\n
    if (v2 > a0)\n
        v2 = a0;\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    *((v1 + v2)) = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217579:sub_405aeb": null, "4217584:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = &*(v4)->field_0;\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v2 = 0; v1[v2]; v2 += 1)\n
    {\n
        if (cgc_strchr(a0, v1[v2]))\n
            break;\n
    }\n
    if (!v1[v2])\n
        *(v4) = 0;\n
    else\n
        *(v4) = &v1[1 + v2];\n
    v1[v2] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217803:sub_405bcb": null, "4217808:cgc_strstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strstr(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!*((v3 + v1)))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strcmp(v3 + v1, a0))\n
        {\n
            v2 = v3 + v1;\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4217944:sub_405c58": null, "4217952:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v11[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x14]\n
    char v9[2];  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v9) = v11;\n
    v8 = 1;\n
    v7 = 1;\n
    v6 = 0;\n
    for (v5 = 0; cgc_isspace(v11[0]); v11 = &v11[1])\n
    {\n
        if (!v11[0])\n
            goto LABEL_405e1f;\n
    }\n
    if (*(v11) == 43)\n
    {\n
        v8 = 1;\n
        v11 = &v11[1];\n
    }\n
    else if (*(v11) == 45)\n
    {\n
        v8 = -1;\n
        v11 = &v11[1];\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
            v11 += 2;\n
        goto LABEL_405e2e;\n
    }\n
    if (a1)\n
    {\n
LABEL_405e2e:\n
        for (; *(v11); v11 = &v11[1])\n
        {\n
            if (cgc_isdigit(*(v11)))\n
            {\n
                v4 = *(v11) - 48;\n
            }\n
            else if (cgc_islower(*(v11)))\n
            {\n
                v4 = *(v11) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v11)))\n
                    break;\n
                v4 = *(v11) + -55;\n
            }\n
            if (v4 >= a1)\n
                break;\n
            v7 = 0;\n
            v5 = a1 * v5 + v4;\n
            if (v5 > 2147483647)\n
                v6 = 1;\n
        }\n
    }\n
    if (*(v11) == 48 && *((v11 + 1)) >= 48 && *((v11 + 1)) <= 55)\n
    {\n
        *(&v11) = &v11[1];\n
        a1 = 8;\n
        goto LABEL_405e1f;\n
    }\n
    if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
    {\n
        v11 += 2;\n
        a1 = 16;\n
        goto LABEL_405e1f;\n
    }\n
    if (!cgc_isdigit(*(v11)))\n
        goto LABEL_405e1f;\n
    a1 = 10;\n
LABEL_405e1f:\n
    if (a0)\n
    {\n
        if (v7)\n
            *(&v2) = v9;\n
        else\n
            v2 = v11;\n
        *(a0) = v2;\n
    }\n
    if (v8 >= 0)\n
    {\n
        if (v6)\n
            v0 = 2147483647;\n
        else\n
            v0 = v5;\n
        v10 = v0;\n
        return v10;\n
    }\n
    else\n
    {\n
        if (v6)\n
            v1 = 0x80000000;\n
        else\n
            v1 = -(v5);\n
        v10 = v1;\n
        return v10;\n
    }\n
}\n
", "4218803:sub_405fb3": null, "4218816:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_41;  // tmp #41\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x18]\n
    char v11[2];  // [bp-0x14]\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v11) = v12;\n
    v10 = 1;\n
    v9 = 1;\n
    v8 = 0;\n
    v7 = 0;\n
    for (v6 = 0; cgc_isspace(v12[0]); v12 = &v12[1])\n
    {\n
        if (!v12[0])\n
            goto LABEL_406188;\n
    }\n
    if (*(v12) == 43)\n
    {\n
        v10 = 1;\n
        v12 = &v12[1];\n
    }\n
    else if (*(v12) == 45)\n
    {\n
        v10 = -1;\n
        v12 = &v12[1];\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
            v12 += 2;\n
        goto LABEL_406197;\n
    }\n
    if (a1)\n
    {\n
LABEL_406197:\n
        for (; *(v12); v12 = &v12[1])\n
        {\n
            if (cgc_isdigit(*(v12)))\n
            {\n
                v5 = *(v12) - 48;\n
            }\n
            else if (cgc_islower(*(v12)))\n
            {\n
                v5 = *(v12) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v12)))\n
                    break;\n
                v5 = *(v12) + -55;\n
            }\n
            if (v5 >= a1)\n
                break;\n
            v9 = 0;\n
            v3 = v7;\n
            v13 = v6 * a1;\n
            tmp_41 = v13;\n
            v15 = (v6 * a1 >> 32) + (a1 >> 31) * v6 + a1 * v3 + (v5 >> 31) + (tmp_41 + v5 < tmp_41);\n
            v6 = v13 + v5;\n
            v7 = v15;\n
            if (v7)\n
                v8 = 1;\n
        }\n
    }\n
    if (*(v12) == 48 && *((v12 + 1)) >= 48 && *((v12 + 1)) <= 55)\n
    {\n
        *(&v12) = &v12[1];\n
        a1 = 8;\n
        goto LABEL_406188;\n
    }\n
    if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
    {\n
        v12 += 2;\n
        a1 = 16;\n
        goto LABEL_406188;\n
    }\n
    if (!cgc_isdigit(*(v12)))\n
        goto LABEL_406188;\n
    a1 = 10;\n
LABEL_406188:\n
    if (a0)\n
    {\n
        if (v9)\n
            *(&v2) = v11;\n
        else\n
            v2 = v12;\n
        *(a0) = v2;\n
    }\n
    if (v10 < 0)\n
    {\n
        if ((!(!(v7 CONCAT v6) << 1 >> 32) || !(!v7 >> 31)) && (!(!(v6 ^ 0x80000000)) || !(!v7)))\n
            v8 = 1;\n
        tmp_6 = v6;\n
        v6 = -(v6);\n
        v7 = -(v7) - (0 < tmp_6);\n
    }\n
    if (v8)\n
    {\n
        v0 = -1;\n
        v1 = 0;\n
        return v0;\n
    }\n
    v0 = v6;\n
    v1 = v7;\n
    return v0;\n
}\n
", "4219767:sub_406377": null, "4219776:cgc_send_flush": "typedef struct struct_0 {\n
    char padding_0[3452];\n
    unsigned int field_d7c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_flush()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v3 = 0; v1->field_d7c != v3; v3 = *(&v2) + v3)\n
    {\n
        v5 = v1;\n
        v0 = &v2;\n
        if (cgc_transmit(1, &v5->padding_0[1 + v3], v5->field_d7c - v3))\n
            break;\n
    }\n
    v1->field_d7c = 0;\n
    return v1;\n
}\n
", "4219918:sub_40640e": null, "4219920:cgc_poop_page_perfectly": "extern unsigned int _GLOBAL_OFFSET_TABLE_[864];\n
\n
int cgc_poop_page_perfectly()\n
{\n
    unsigned int v0[864];  // [bp-0x14]\n
    int tmp_28;  // tmp #28\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3[864];  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v1 = 0; v1 < 0x1000; v1 += 4)\n
    {\n
        if (v0[863] == 16)\n
            cgc_send_flush();\n
        v3 = v0;\n
        tmp_28 = *((v3[861] + v1));\n
        v4 = v3[863];\n
        v3[863] = v4 + 1;\n
        *(3456 + &v3[0] + v4) = tmp_28;\n
    }\n
    return cgc_send_flush();\n
}\n
", "4220055:sub_406497": null, "4220064:cgc_xcalloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_xcalloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_calloc(v5, a0);\n
    if (!v3)\n
    {\n
        v7 = cgc_strlen(v2 - 8932);\n
        v0 = v2 - 8947;\n
        v1 = 0;\n
        cgc_transmit(2, v0, v7);\n
        cgc_exit(1, v0, v7);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4220203:sub_40652b": null, "4220208:cgc_read_n": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_n(unsigned int v4, unsigned int a0, unsigned int a1, unsigned int *a2)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a2)\n
        *(a2) = 0;\n
    while (true)\n
    {\n
        if (v3 >= a1)\n
            return v3;\n
        v0 = &v2;\n
        if (cgc_receive(v4, a0 + v3, a1 - v3))\n
            break;\n
        if (!v2)\n
            return v3;\n
        v3 = v2 + v3;\n
    }\n
    if (a2)\n
        *(a2) = 1;\n
    return v3;\n
}\n
", "4220406:sub_4065f6": null, "4220416:cgc_reverse": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_reverse(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_xcalloc(cgc_strlen(v5) + 1, 1);\n
    v2 = cgc_strlen(v5) - 1;\n
    for (v1 = 0; v2 >= 0; v1 += 1)\n
    {\n
        v3[v1] = v5[v2];\n
        v2 -= 1;\n
    }\n
    v7 = v4;\n
    return cgc_strcpy(v5, v3);\n
}\n
", "4220582:sub_4066a6": null, "4220592:cgc_read_ascii_octal": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_ascii_octal(unsigned int v8, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    char *v5;  // [bp-0x10]\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = cgc_xcalloc(a0, 1);\n
    for (v4 = 0; v4 < a0 - 1; v4 += 1)\n
    {\n
        v5[v4] = *((v8 + v4));\n
    }\n
    cgc_reverse(v5);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0 - 1)\n
            return v6;\n
        if (!v5[v3])\n
            return v6;\n
        if (v5[v3] < 48)\n
            break;\n
        if (v5[v3] > 55)\n
            break;\n
        v2 = 1;\n
        for (v1 = 0; v1 < v3; v1 += 1)\n
        {\n
            v2 *= 8;\n
        }\n
        v6 = (v5[v3] - 48) * v2 + v6;\n
        v3 += 1;\n
    }\n
    if (a1)\n
        *(a1) = 1;\n
    return v6;\n
}\n
", "4220926:sub_4067fe": null, "4220928:cgc_map_type": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_map_type()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp+0x4]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v3;\n
    if (v1 > 55)\n
    {\n
        v2 = v0 - 8841;\n
        return;\n
    }\n
    goto *(((stack_base)[16] + (stack_base)[12] * 4 - 9516)) + (stack_base)[16];\n
}\n
", "4221128:sub_4068c8": null, "4221136:cgc_get_user_code": "typedef struct struct_0 {\n
    unsigned int field_-120;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_get_user_code(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // esi\n
    struct_0 *v9;  // ebx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.field_-120;\n
    v0 = v6;\n
    v1 = a0;\n
    cgc_fprintf(cgc_stderr, \"xxx- %d - %d\\n
\");\n
    v9 = v2;\n
    v0 = 2323 + v9 + a0 * v6;\n
    cgc_fprintf(v9[72].field_-120, &v9[2204].field_-120 + 3);\n
    if (a0 * v6 < 0)\n
    {\n
LABEL_406967:\n
        v3 = &v2[2202].field_-120 + 2;\n
    }\n
    else\n
    {\n
        if (!(a0 * v6 < 345))\n
            goto LABEL_406967;\n
        v3 = 2323 + v2 + a0 * v6;\n
    }\n
    return v3;\n
}\n
", "4221335:sub_406997": null, "4221344:cgc_sent_n": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sent_n(unsigned int v7, unsigned int a0, unsigned int a1, unsigned int *a2)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x14]\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    if (a2)\n
        *(a2) = 1;\n
    while (true)\n
    {\n
        if (v6 >= a1)\n
            return v6;\n
        v2 = v7;\n
        v3 = a0 + v6;\n
        if (a1 - v6 < 64)\n
            v1 = a1 - v6;\n
        else\n
            v1 = 64;\n
        v0 = &v5;\n
        if (cgc_transmit(v2, v3, v1))\n
            break;\n
        if (!v5)\n
            return v6;\n
        v6 = v5 + v6;\n
    }\n
    if (a2)\n
        *(a2) = 1;\n
    return v6;\n
}\n
", "4221593:sub_406a99": null, "4221600:cgc_print_entry": "typedef struct struct_0 {\n
    char padding_0[157];\n
    char field_9d;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_entry(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"name:\\t\\t%s\\n
\");\n
    cgc_printf(v1 - 8797);\n
    cgc_read_ascii_octal(&v3->padding_0[109], 8, NULL);\n
    cgc_printf(v1 - 8782);\n
    cgc_read_ascii_octal(&v3->padding_0[117], 8, NULL);\n
    cgc_printf(v1 - 8768);\n
    cgc_printf(v1 - 8754);\n
    v0 = cgc_read_ascii_octal(&v3->padding_0[109], 8, NULL);\n
    cgc_sent_n(1, cgc_get_user_code(v0, cgc_read_ascii_octal(&v3->padding_0[117], 8, NULL)), 4, NULL);\n
    cgc_printf(v1 - 9831);\n
    cgc_read_ascii_octal(&v3->padding_0[125], 12, NULL);\n
    cgc_printf(v1 - 8737);\n
    cgc_read_ascii_octal(&v3->padding_0[137], 12, NULL);\n
    cgc_printf(v1 - 8722);\n
    cgc_map_type(v3->field_9d);\n
    cgc_printf(v1 - 8706);\n
    cgc_printf(v1 - 8691);\n
    cgc_printf(v1 - 8671);\n
    cgc_read_ascii_octal(&v3[1].padding_0[108], 2, NULL);\n
    cgc_printf(v1 - 8655);\n
    cgc_printf(v1 - 8637);\n
    cgc_printf(v1 - 8616);\n
    cgc_read_ascii_octal(&v3[2].padding_0[18], 8, NULL);\n
    cgc_printf(v1 - 8595);\n
    cgc_read_ascii_octal(&v3[2].padding_0[26], 8, NULL);\n
    cgc_printf(v1 - 8575);\n
    v5 = v2;\n
    return cgc_printf(v1 - 8555);\n
}\n
", "4222428:sub_406ddc": null, "4222432:cgc_initialize": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initialize(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    v1 = cgc_xcalloc(451, 1);\n
    cgc_memcpy(v1, v2, 100);\n
    v2 += 100;\n
    cgc_memcpy(v1 + 101, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 109, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 117, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 125, v2, 12);\n
    v2 += 12;\n
    cgc_memcpy(v1 + 137, v2, 12);\n
    v2 += 12;\n
    cgc_memcpy(v1 + 149, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 157, v2, 1);\n
    v2 += 1;\n
    cgc_memcpy(v1 + 158, v2, 100);\n
    v2 += 100;\n
    cgc_memcpy(v1 + 259, v2, 6);\n
    v2 += 6;\n
    cgc_memcpy(v1 + 266, v2, 2);\n
    v2 += 2;\n
    cgc_memcpy(v1 + 268, v2, 32);\n
    v2 += 32;\n
    cgc_memcpy(v1 + 301, v2, 32);\n
    v2 += 32;\n
    cgc_memcpy(v1 + 334, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 342, v2, 8);\n
    v2 += 8;\n
    cgc_memcpy(v1 + 350, v2, 100);\n
    v2 += 100;\n
    v6 = v3;\n
    return v1;\n
}\n
", "4223181:sub_4070cd": null, "4223184:cgc_empty_block": "int cgc_empty_block(unsigned int v2)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 0x200)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        if (v0[v2])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4223278:sub_40712e": null, "4223280:cgc_skip_data": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skip_data(unsigned int v3, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int *v0;  // [bp-0x80d], Other Possible Types: char\n
    unsigned int v1;  // [bp-0x80c]\n
    char v2;  // [bp-0x808]\n
    unsigned int *v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v4 = 0;\n
        *(&v0) = 0;\n
        if (a0 > 0)\n
        {\n
            v4 = a1;\n
            v0 = *(v4) ^ 255;\n
        }\n
        *(&v4) = v0;\n
        if (!(v0 & 1))\n
            break;\n
        cgc_read_n(0, &v2, 0x200, a1);\n
        a0 -= 0x200;\n
    }\n
    return v4;\n
}\n
", "4223441:sub_4071d1": null, "4223456:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x220]\n
    unsigned int v1;  // [bp-0x21c]\n
    void* v2;  // [bp-0x218]\n
    char v3;  // [bp-0x214]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
    void* v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v4 = 0;\n
    cgc_poop_page_perfectly();\n
    while (cgc_read_n(0, &v3, 0x200, &v5) == 0x200)\n
    {\n
        if (v5)\n
            break;\n
        if (cgc_empty_block(&v3))\n
        {\n
            v4 += 1;\n
            if (v4 == 2)\n
                return v6;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            v2 = cgc_initialize(&v3);\n
            cgc_print_entry(v2);\n
            v1 = cgc_read_ascii_octal(v2 + 125, 12, &v5);\n
            if (v5)\n
                return v6;\n
            cgc_skip_data(0, v1, &v5);\n
            if (v5)\n
                return v6;\n
            cgc_free(v2);\n
        }\n
    }\n
    return v6;\n
}\n
", "4223840:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}