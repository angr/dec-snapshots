{"4202496:_init": "extern struct_0 *g_415764;\n
\n
int _init()\n
{\n
    if (g_415764)\n
    {\n
        g_415764();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:strncpy": "// attributes: PLT stub\n
char * strncpy(char *v0, char *to, unsigned int from)\n
{\n
    return ::libc.so.0::strncpy(v0, to, from);\n
}\n
", "4202688:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 79419;\n
    v6 = v5 + 15;\n
    v7 = v5 + 15;\n
    if (v7 == v6)\n
        return v5 + 15;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 79355;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 15;\n
    v9 = (v6 + 15 - (v6 + 15) >> 31) + (15 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_415760;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_415760)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_floor": null, "4203204:sub_4022c4": null, "4203216:cgc_round_away_from_zero": null, "4203370:sub_40236a": null, "4203376:cgc_round": null, "4203520:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203612:sub_40245c": null, "4203616:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4203825:sub_402531": null, "4203840:cgc_float_to_str": null, "4204809:sub_402909": null, "4204816:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v12, struct struct_1 **a0)\n
{\n
    struct_0 *v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    unsigned int v2;  // [bp-0x74]\n
    unsigned int v3;  // [bp-0x70]\n
    char *v4;  // [bp-0x6c], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x68], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x64]\n
    struct_0 *v7;  // [bp-0x58], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x54]\n
    char v9;  // [bp-0x50]\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
    struct struct_1 **v13;  // eax\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    struct struct_1 **v19;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    if (!v12)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        if (!*(v12))\n
        {\n
            v11 = v10;\n
            return v11;\n
        }\n
        else if (*(v12) != 64)\n
        {\n
            cgc_putc(*(v12));\n
            v12 += 1;\n
            v10 += 1;\n
        }\n
        else\n
        {\n
            v12 += 1;\n
            v2 = *(v12);\n
            if (!v2)\n
            {\n
                v11 = -1;\n
                return v11;\n
            }\n
            if (v2 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v2 == 100)\n
            {\n
                v13 = a0;\n
                a0 = v13 + 1;\n
                v8 = &*(v13)->field_0;\n
                cgc_int_to_str(v8, &v9);\n
                for (v7 = &v9; v7->field_0; v7 += 1)\n
                {\n
                    cgc_putc(v7->field_0);\n
                    v10 += 1;\n
                }\n
            }\n
            else if (v2 == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t24,0] = t27\n
                [D] PutI(136:I8x8)[t24,0] = 0x01\n
                v6 = ([D] GetI(136:I8x8)[t39,0] ? [D] GetI(72:F64x8)[t39,0] : nan);\n
                [D] PutI(136:I8x8)[t39,0] = 0x00\n
                v16 = ftop<4> - 1 + 1;\n
                v17 = v16 - 1;\n
                [D] PutI(72:F64x8)[t48,0] = t51\n
                [D] PutI(136:I8x8)[t48,0] = 0x01\n
                v0 = &v9;\n
                [D] PutI(136:I8x8)[t67,0] = 0x00\n
                v18 = v17 + 1;\n
                v1 = 64;\n
                cgc_float_to_str();\n
                for (v5 = &v9; *(v5); v5 += 1)\n
                {\n
                    cgc_putc(*(v5));\n
                    v10 += 1;\n
                }\n
            }\n
            else if (v2 == 115)\n
            {\n
                v19 = a0;\n
                a0 = v19 + 1;\n
                for (v4 = &*(v19)->field_0; *(v4); v4 += 1)\n
                {\n
                    cgc_putc(*(v4));\n
                    v10 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v11 = -1;\n
                return v11;\n
            }\n
            v12 += 1;\n
        }\n
    }\n
}\n
", "4205403:sub_402b5b": null, "4205408:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4205466:sub_402b9a": null, "4205472:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4205544:sub_402be8": null, "4205552:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205606:sub_402c26": null, "4205616:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205670:sub_402c66": null, "4205680:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4205746:sub_402cb2": null, "4205760:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4205826:sub_402d02": null, "4205840:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205894:sub_402d46": null, "4205904:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4205998:sub_402dae": null, "4206000:cgc_isnan": null, "4206023:sub_402dc7": null, "4206032:cgc_isinf": null, "4206079:sub_402dff": null, "4206080:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_403032:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40300b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40300b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40300b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_403032;\n
                if (!v4)\n
                {\n
LABEL_402f87:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40300b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_402f87;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40300b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4206668:sub_40304c": null, "4206672:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4207076:sub_4031e4": null, "4207088:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4207194:sub_40325a": null, "4207200:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4207291:sub_4032bb": null, "4207296:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4207404:sub_40332c": null, "4207408:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x11]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v1 = a0;\n
    if (!a1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v2) == *(v1))\n
                v0 = a1;\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
        a1 -= 1;\n
    }\n
    v2 -= 1;\n
    v1 -= 1;\n
    v3 = *(v2) - *(v1);\n
    return v3;\n
}\n
", "4207608:sub_4033f8": null, "4207616:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4207724:sub_40346c": null, "4207728:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4207923:sub_403533": null, "4207936:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4208013:sub_40358d": null, "4208016:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (v2 == a0)\n
            return v4;\n
        v4[v5] = v2;\n
        v4 += 1;\n
    }\n
}\n
", "4208208:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208367:sub_4036ef": null, "4208368:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4208567:sub_4037b7": null, "4208576:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2, cgc_strlen(v5));\n
}\n
", "4208659:sub_403813": null, "4208672:cgc_cityMenu": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_cityMenu()\n
{\n
    unsigned int v2;  // [bp-0x38]\n
    void* v3;  // [bp-0x34]\n
    void* v5;  // [bp-0x10]\n
    void* v6;  // [bp-0xc]\n
    unsigned int v8;  // [bp+0x4]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v3 = 0;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return;\n
    }\n
}\n
", "4210106:sub_403dba": null, "4210112:cgc_printCityInfo": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[19];\n
    char field_14;\n
    char padding_15[29];\n
    char field_32;\n
    char padding_33[29];\n
    unsigned int field_50;\n
    unsigned int field_54;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printCityInfo(struct_0 *v7)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    if (!v7)\n
        return v7;\n
    cgc_printf(v4 - 13774);\n
    if (!v7->field_0)\n
    {\n
        cgc_printf(v4 - 10458);\n
    }\n
    else\n
    {\n
        v0 = v7;\n
        cgc_printf(v4 - 13218);\n
    }\n
    if (v7->field_50 >= 0)\n
    {\n
        v0 = v7->field_50;\n
        cgc_printf(v4 - 13763);\n
    }\n
    if (v7->field_14)\n
    {\n
        v0 = &v7->field_14;\n
        cgc_printf(v4 - 13742);\n
    }\n
    if (v7->field_32)\n
    {\n
        v0 = &v7->field_32;\n
        cgc_printf(v4 - 13726);\n
    }\n
    v6 = 0;\n
    while (true)\n
    {\n
        if (v6 >= v7->field_54)\n
            break;\n
        v5 = *((88 + &v7->field_0 + 0x4 * v6));\n
        if (v5)\n
        {\n
            [D] PutI(72:F64x8)[t20,0] = t23\n
            [D] PutI(136:I8x8)[t20,0] = 0x01\n
            v11 = ftop<4> - 1 - 1;\n
            [D] PutI(72:F64x8)[t32,0] = t35\n
            [D] PutI(136:I8x8)[t32,0] = 0x01\n
            v12 = v11 - 1;\n
            [D] PutI(72:F64x8)[t44,0] = t47\n
            [D] PutI(136:I8x8)[t44,0] = 0x01\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t56,0] = t59\n
            [D] PutI(136:I8x8)[t56,0] = 0x01\n
            v3 = ([D] GetI(136:I8x8)[t74,0] ? [D] GetI(72:F64x8)[t74,0] : nan);\n
            [D] PutI(136:I8x8)[t74,0] = 0x00\n
            v14 = v13 + 1;\n
            v2 = ([D] GetI(136:I8x8)[t86,0] ? [D] GetI(72:F64x8)[t86,0] : nan);\n
            [D] PutI(136:I8x8)[t86,0] = 0x00\n
            v15 = v14 + 1;\n
            v1 = ([D] GetI(136:I8x8)[t98,0] ? [D] GetI(72:F64x8)[t98,0] : nan);\n
            [D] PutI(136:I8x8)[t98,0] = 0x00\n
            v16 = v15 + 1;\n
            v0 = ([D] GetI(136:I8x8)[t110,0] ? [D] GetI(72:F64x8)[t110,0] : nan);\n
            [D] PutI(136:I8x8)[t110,0] = 0x00\n
            v17 = v16 + 1;\n
            cgc_printf(v4 - 13712);\n
        }\n
        v6 = &v6->padding_1;\n
    }\n
    return v6;\n
}\n
", "4210495:sub_403f3f": null, "4210496:cgc_freeCity": "typedef struct struct_0 {\n
    char padding_0[84];\n
    unsigned int field_54;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCity(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v3)\n
        return v3;\n
    for (v2 = 0; v2 < v3->field_54; v2 += 1)\n
    {\n
        v0 = 32;\n
        cgc_deallocate(v3 + 1);\n
    }\n
    v0 = 128;\n
    return cgc_deallocate(v3);\n
}\n
", "4210632:sub_403fc8": null, "4210640:cgc_freeCharPtr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCharPtr(unsigned int *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v4 = v3;\n
    if (*(v4))\n
    {\n
        v1 = *(v3);\n
        v0 = cgc_strlen(*(v3)) + 1;\n
        cgc_deallocate(v1);\n
        v4 = v3;\n
        *(v4) = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4210757:sub_404045": null, "4210768:cgc_initCity": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[79];\n
    unsigned int field_50;\n
    unsigned int field_54;\n
} struct_0;\n
\n
int cgc_initCity(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    if (!v1)\n
        return v1;\n
    for (v0 = 0; v0 < 10; v0 += 1)\n
    {\n
        (&v1->field_0)[v0] = 0;\n
        *(&(&v1[1].field_0)[4 * v0]) = 0;\n
    }\n
    for (v0 = 0; v0 < 30; v0 += 1)\n
    {\n
        v1->padding_1[19 + v0] = 0;\n
        v1->padding_1[49 + v0] = 0;\n
    }\n
    v1->field_50 = -1;\n
    v1->field_54 = 0;\n
    return v1;\n
}\n
", "4210930:sub_4040f2": null, "4210944:cgc_skipOpen": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipOpen(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_skipWhiteSpace();\n
    v0 = 123;\n
    if (!cgc_atChar(v3))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (cgc_incChar() != -1)\n
    {\n
        cgc_skipWhiteSpace();\n
        if (a0)\n
        {\n
            v0 = 35;\n
            if (!cgc_atChar(v3))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
            else if (cgc_incChar() == -1)\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
        v2 = 1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4211209:sub_404209": null, "4211216:cgc_cityTopLevel": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_cityTopLevel()\n
{\n
    struct_0 *v0;  // [bp-0x54]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    void* v9;  // [bp-0x20]\n
    void* v10;  // [bp-0x1c], Other Possible Types: char *, unsigned int\n
    struct_0 *v11;  // [bp-0x18]\n
    void* v12;  // [bp-0x14]\n
    void* v13;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v16[22];  // [bp+0x4]\n
    unsigned int v54;  // eax\n
    unsigned int v55;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    if (!v16)\n
        return;\n
    if (!cgc_skipOpen(v16, 0))\n
        return;\n
    cgc_getIndex(v16);\n
    v11 = cgc_skipAlpha(v16);\n
    if (v11 == -1)\n
        return;\n
    if (v12 == v11)\n
        return;\n
    v0 = v11;\n
    v10 = cgc_copyData(v16, v12);\n
    if (!v10)\n
        return;\n
    if (cgc_strcmp(v10, v7 - 13686))\n
    {\n
        v6 = v10;\n
        v54 = cgc_strlen(v10) + 1;\n
        cgc_deallocate(v6);\n
        return;\n
    }\n
    v5 = v10;\n
    v55 = cgc_strlen(v10) + 1;\n
    cgc_deallocate(v5);\n
    cgc_skipWhiteSpace(v16);\n
    if (!cgc_atChar(v16))\n
        return;\n
    cgc_incChar();\n
    cgc_skipWhiteSpace();\n
    v14 = v16[2];\n
    v0 = &v13;\n
    if (cgc_allocate(128, 0))\n
    {\n
        v13 = 0;\n
    }\n
    else\n
    {\n
        cgc_initCity(v13);\n
        v10 = cgc_pullNextElementName();\n
    }\n
}\n
", "4212312:sub_404658": "int sub_404658()\n
{\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // eax\n
\n
    v1 = v3;\n
}\n
", "4212813:sub_40484d": null, "4212816:cgc_extractMayor": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractMayor(unsigned int v7[3])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: char *\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: void*, unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_skipOpen(v7, 0))\n
    {\n
        v4 = v7[2];\n
        v3 = cgc_skipAlpha();\n
        if (v3 != -1 && v4 != v3)\n
        {\n
            v0 = v3;\n
            v5 = cgc_copyData(v7, v4);\n
            if (!v5)\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            else if (!cgc_strcmp(v5, v1 - 13634))\n
            {\n
                cgc_freeCharPtr(&v5);\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v7))\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                cgc_incChar();\n
                v4 = cgc_skipWhiteSpace();\n
                if (v3 >= 0 && v4 != v3)\n
                {\n
                    for (v3 = cgc_skipToNonAlphaNumSpace(); cgc_isspace(*((v7[0] + v3 - 1))); v3 -= 1);\n
                    v0 = v3;\n
                    v5 = cgc_copyData(v7, v4);\n
                    if (!v5)\n
                    {\n
                        v6 = 0;\n
                        return v6;\n
                    }\n
                    cgc_skipWhiteSpace();\n
                    if (!cgc_skipOpen(v7, 1))\n
                    {\n
LABEL_404b86:\n
                        cgc_freeCharPtr(&v5);\n
                    }\n
                    else\n
                    {\n
                        v4 = v7[2];\n
                        v3 = cgc_skipAlpha();\n
                        if (v3 != -1 && v4 != v3)\n
                        {\n
                            v0 = v3;\n
                            v2 = cgc_copyData(v7, v4);\n
                            if (v2)\n
                            {\n
                                if (cgc_strcmp(v2, v1 - 13634))\n
                                {\n
                                    cgc_freeCharPtr(&v2);\n
                                    goto LABEL_404b86;\n
                                }\n
                                else\n
                                {\n
                                    cgc_skipWhiteSpace();\n
                                    if (cgc_atChar(v7))\n
                                    {\n
                                        cgc_incChar();\n
                                        goto LABEL_404b94;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                        goto LABEL_404b86;\n
                    }\n
LABEL_404b94:\n
                    v6 = v5;\n
                    return v6;\n
                }\n
                v6 = 0;\n
                return v6;\n
            }\n
            else\n
            {\n
                cgc_freeCharPtr(&v5);\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
}\n
", "4213667:sub_404ba3": null, "4213680:cgc_extractUrl": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractUrl(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: void*\n
    void* v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        return v4;\n
    }\n
    else if (!cgc_skipOpen(v5, 0))\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        cgc_getIndex(v5);\n
        cgc_skipAlpha(v5);\n
        v0 = v5->field_8;\n
        v4 = cgc_copyData(v5, v3);\n
        if (!v4)\n
        {\n
            return v4;\n
        }\n
        else if (!cgc_strcmp(v4, v1 - 13628))\n
        {\n
            cgc_skipWhiteSpace();\n
            if (!cgc_atChar(v5))\n
                return v4;\n
            cgc_incChar();\n
            cgc_skipWhiteSpace();\n
            cgc_getIndex(v5);\n
            cgc_skipUrl(v5);\n
            v0 = v5->field_8;\n
            v4 = cgc_copyData(v5, v3);\n
            if (!v4)\n
                return v4;\n
            cgc_skipWhiteSpace();\n
            if (cgc_skipOpen(v5, 1))\n
            {\n
                cgc_getIndex(v5);\n
                cgc_skipAlpha(v5);\n
                v0 = v5->field_8;\n
                v2 = cgc_copyData(v5, v3);\n
                if (v2)\n
                {\n
                    if (cgc_strcmp(v2, v1 - 13628))\n
                    {\n
                        cgc_freeCharPtr(&v2);\n
                    }\n
                    else\n
                    {\n
                        cgc_freeCharPtr(&v2);\n
                        cgc_skipWhiteSpace();\n
                        if (cgc_atChar(v5))\n
                        {\n
                            cgc_incChar();\n
                            return v4;\n
                        }\n
                    }\n
                }\n
            }\n
            if (!v4)\n
                return v4;\n
            cgc_freeCharPtr(&v4);\n
        }\n
        else\n
        {\n
            cgc_freeCharPtr(&v4);\n
            return v4;\n
        }\n
    }\n
}\n
", "4214384:cgc_countryMenu": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_countryMenu(unsigned int v12[124])\n
{\n
    struct struct_0 **v0;  // [bp-0x60]\n
    char v1;  // [bp-0x55]\n
    struct struct_0 **v2;  // [bp-0x54]\n
    struct_0 *v3;  // [bp-0x50]\n
    struct_0 *v4;  // [bp-0x4c]\n
    unsigned int v5;  // [bp-0x48]\n
    unsigned long long v6[4];  // [bp-0x44], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x3c]\n
    struct_0 *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v15;  // ftop\n
    unsigned int v16[124];  // eax\n
    unsigned long long v17[4];  // eax\n
    unsigned int v18;  // ftop\n
    unsigned int v19[124];  // eax\n
    unsigned int v20[124];  // eax\n
    unsigned long long v21[4];  // eax\n
    unsigned int v22;  // ftop\n
    unsigned long long v23[4];  // eax\n
    unsigned int v24;  // ftop\n
    unsigned int v25[124];  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = 0;\n
    v7 = 0;\n
    *(&v6[0]) = 0;\n
    if (!v12)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(v5 - 13564);\n
        cgc_printf(v5 - 13550);\n
        cgc_printf(v5 - 13526);\n
        cgc_printf(v5 - 13510);\n
        cgc_printf(v5 - 13491);\n
        cgc_printf(v5 - 13474);\n
        cgc_printf(v5 - 13459);\n
        cgc_printf(v5 - 13441);\n
        cgc_printf(v5 - 13420);\n
        cgc_printf(v5 - 13387);\n
        cgc_bzero(&v8, 40);\n
        cgc_printf(v5 - 13859);\n
        cgc_receive_until(&v8, 10, 3);\n
        v10 = cgc_atoi(&v8);\n
        if (v10 < 1)\n
        {\n
LABEL_404fdb:\n
            cgc_printf(v5 - 13373);\n
        }\n
        else\n
        {\n
            if (!(v10 <= 9))\n
                goto LABEL_404fdb;\n
            if (v10 == 1)\n
            {\n
                cgc_printCountryInfo();\n
                goto LABEL_4057ef;\n
            }\n
            if (v10 == 2)\n
            {\n
                cgc_printf(v5 - 13847);\n
                cgc_bzero(&v8, 40);\n
                cgc_receive_until(&v8, 10, 19);\n
                for (v10 = 0; cgc_isalpha((&v8)[v10]); v10 += 1)\n
                {\n
                    *(20 + &v12[0] + v10) = (&v8)[v10];\n
                }\n
                *(20 + &v12[0] + v10) = 0;\n
                goto LABEL_4057ef;\n
            }\n
            if (v10 == 3)\n
            {\n
                cgc_printf(v5 - 13847);\n
                cgc_bzero(&v8, 40);\n
                cgc_receive_until(&v8, 10, 19);\n
                v12[10] = cgc_atoi(&v8);\n
                goto LABEL_4057ef;\n
            }\n
            if (v10 == 4)\n
            {\n
                if (v12[11] >= 10)\n
                {\n
                    cgc_printf(v5 - 13361);\n
                    continue;\n
                }\n
                else\n
                {\n
                    cgc_printf(v5 - 13847);\n
                    cgc_bzero(&v8, 40);\n
                    v0 = &v9;\n
                    cgc_receive(0, &v8, 19);\n
                    if (!cgc_allocate(cgc_strlen(&v8) + 1, 0))\n
                    {\n
                        v4 = v7;\n
                        cgc_bzero(v4, cgc_strlen(&v8) + 1);\n
                        for (v10 = 0; cgc_isalpha((&v8)[v10]); v10 += 1)\n
                        {\n
                            v7[v10].field_0 = (&v8)[v10];\n
                        }\n
                        v7[v10].field_0 = 0;\n
                        v12[12 + v12[11]] = v7;\n
                        v16 = v12;\n
                        v16[11] = v16[11] + 1;\n
                        goto LABEL_4057ef;\n
                    }\n
                    else\n
                    {\n
                        v7 = 0;\n
                        continue;\n
                    }\n
                }\n
            }\n
            if (v10 == 5)\n
            {\n
                if (v12[22] >= 100)\n
                {\n
                    cgc_printf(v5 - 13336);\n
                    continue;\n
                }\n
                else if (!cgc_allocate(32, 0))\n
                {\n
                    cgc_printf(v5 - 13829);\n
                    v3 = &v8;\n
                    cgc_bzero(&v8, 40);\n
                    v2 = &v9;\n
                    v0 = &v9;\n
                    cgc_receive(0, v3, 19);\n
                    cgc_atof(v3);\n
                    *(v6) = ([D] GetI(136:I8x8)[t15,0] ? [D] GetI(72:F64x8)[t15,0] : nan);\n
                    [D] PutI(136:I8x8)[t15,0] = 0x00\n
                    v15 = v24 + 1;\n
                    cgc_printf(v5 - 13817);\n
                    cgc_bzero(v3, 40);\n
                    v0 = v2;\n
                    cgc_receive(0, v3, 19);\n
                    cgc_atof(v3);\n
                    v17 = v6;\n
                    if ([D] GetI(136:I8x8)[t10,0])\n
                    {\n
                        *(&v17[1]) = [D] GetI(72:F64x8)[t6,0];\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v18 = v15 + 1;\n
                    }\n
                    else\n
                    {\n
                        v17[1] = nan;\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v18 = v15 + 1;\n
                    }\n
                    cgc_printf(v5 - 13804);\n
                    cgc_bzero(v3, 40);\n
                    v0 = v2;\n
                    cgc_receive(0, v3, 19);\n
                    cgc_atof(v3);\n
                    v21 = v6;\n
                    if (![D] GetI(136:I8x8)[t10,0])\n
                    {\n
                        v21[2] = nan;\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v22 = v18 + 1;\n
                    }\n
                    else\n
                    {\n
                        *(&v21[2]) = [D] GetI(72:F64x8)[t6,0];\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v22 = v18 + 1;\n
                    }\n
                    cgc_printf(v5 - 13794);\n
                    cgc_bzero(v3, 40);\n
                    v0 = v2;\n
                    cgc_receive(0, v3, 19);\n
                    cgc_atof(v3);\n
                    v23 = v6;\n
                    if ([D] GetI(136:I8x8)[t10,0])\n
                    {\n
                        *(&v23[3]) = [D] GetI(72:F64x8)[t6,0];\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v24 = v22 + 1;\n
                    }\n
                    else\n
                    {\n
                        v23[3] = nan;\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v24 = v22 + 1;\n
                    }\n
                    v12[23 + v12[22]] = v6;\n
                    v25 = v12;\n
                    v25[22] = v25[22] + 1;\n
                    goto LABEL_4057ef;\n
                }\n
                else\n
                {\n
                    v6 = 0;\n
                    continue;\n
                }\n
            }\n
            if (v10 == 6)\n
            {\n
                if (v12[123] >= 10)\n
                {\n
                    cgc_printf(v5 - 13313);\n
                    continue;\n
                }\n
                else\n
                {\n
                    v10 = 0;\n
                    while (true)\n
                    {\n
                        v1 = 0;\n
                        if (v10 < 10)\n
                            v1 = *((496 + &v12[0] + 0x4 * v10));\n
                        if (!(v1 & 1))\n
                            break;\n
                        v10 += 1;\n
                    }\n
                    if (v10 == 10)\n
                    {\n
                        cgc_printf(v5 - 13313);\n
                        continue;\n
                    }\n
                    else if (!cgc_allocate(508, 0))\n
                    {\n
                        cgc_initTerritory();\n
                        cgc_printf(v5 - 13254);\n
                        cgc_bzero(&v8, 40);\n
                        cgc_receive_until(&v8, 10, 19);\n
                        for (v9 = 0; cgc_isalnum((&v8)[v9]); v9 += 1)\n
                        {\n
                            *((v12[1 + v10] + v9)) = (&v8)[v9];\n
                        }\n
                        *((v12[1 + v10] + v9)) = 0;\n
                        v19 = v12;\n
                        v19[123] = v19[123] + 1;\n
                        goto LABEL_4057ef;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v5 - 13286);\n
                        v12[1 + v10] = 0;\n
                        continue;\n
                    }\n
                }\n
            }\n
            if (v10 != 7)\n
            {\n
                if (v10 == 8)\n
                {\n
                    cgc_freeCountry();\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                else if (v10 == 9)\n
                {\n
                    v11 = 1;\n
                    return v11;\n
                }\n
LABEL_4057ef:\n
            }\n
            else\n
            {\n
                cgc_printf(v5 - 13237);\n
                for (v10 = 0; v10 < 10; v10 += 1)\n
                {\n
                    if (v12[1 + v10])\n
                        cgc_printf(v5 - 13222);\n
                }\n
                cgc_bzero(&v8, 40);\n
                cgc_printf(v5 - 13847);\n
                v0 = &v9;\n
                cgc_receive(0, &v8, 3);\n
                v10 = cgc_atoi(&v8);\n
                if (v10 >= 1 && v10 <= 10 && *((492 + &v12[0] + 0x4 * v10)))\n
                {\n
                    if (!cgc_territoryMenu())\n
                    {\n
                        *((492 + &v12[0] + 0x4 * v10)) = 0;\n
                        v20 = v12;\n
                        v20[123] = v20[123] - 1;\n
                    }\n
                    goto LABEL_4057ef;\n
                }\n
                cgc_printf(v5 - 13214);\n
            }\n
        }\n
    }\n
}\n
", "4216859:sub_40581b": null, "4216864:cgc_printCountryInfo": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[19];\n
    char field_14;\n
    char padding_15[19];\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    char padding_30[40];\n
    unsigned int field_58;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printCountryInfo(struct_0 *v7)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    if (!v7)\n
        return v7;\n
    cgc_printf(v4 - 13195);\n
    if (v7->field_0)\n
    {\n
        v0 = v7;\n
        cgc_printf(v4 - 13218);\n
    }\n
    else\n
    {\n
        cgc_printf(v4 - 10458);\n
    }\n
    cgc_printf(v4 - 13184);\n
    if (v7->field_14)\n
    {\n
        v0 = &v7->field_14;\n
        cgc_printf(v4 - 13218);\n
    }\n
    else\n
    {\n
        cgc_printf(v4 - 10458);\n
    }\n
    if (v7->field_28 >= 0)\n
    {\n
        v0 = v7->field_28;\n
        cgc_printf(v4 - 13760);\n
    }\n
    for (; v6 < v7->field_2c; v6 = &v6->padding_1)\n
    {\n
        if (*((48 + &v7->field_0 + 0x4 * v6)))\n
        {\n
            v0 = *((48 + &v7->field_0 + 0x4 * v6));\n
            cgc_printf(v4 - 13172);\n
        }\n
    }\n
    v6 = 0;\n
    while (true)\n
    {\n
        v8 = v6;\n
        if (v8 >= v7->field_58)\n
            break;\n
        v5 = *((92 + &v7->field_0 + 0x4 * v6));\n
        if (v5)\n
        {\n
            [D] PutI(72:F64x8)[t20,0] = t23\n
            [D] PutI(136:I8x8)[t20,0] = 0x01\n
            v11 = ftop<4> - 1 - 1;\n
            [D] PutI(72:F64x8)[t32,0] = t35\n
            [D] PutI(136:I8x8)[t32,0] = 0x01\n
            v12 = v11 - 1;\n
            [D] PutI(72:F64x8)[t44,0] = t47\n
            [D] PutI(136:I8x8)[t44,0] = 0x01\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t56,0] = t59\n
            [D] PutI(136:I8x8)[t56,0] = 0x01\n
            v3 = ([D] GetI(136:I8x8)[t74,0] ? [D] GetI(72:F64x8)[t74,0] : nan);\n
            [D] PutI(136:I8x8)[t74,0] = 0x00\n
            v14 = v13 + 1;\n
            v2 = ([D] GetI(136:I8x8)[t86,0] ? [D] GetI(72:F64x8)[t86,0] : nan);\n
            [D] PutI(136:I8x8)[t86,0] = 0x00\n
            v15 = v14 + 1;\n
            v1 = ([D] GetI(136:I8x8)[t98,0] ? [D] GetI(72:F64x8)[t98,0] : nan);\n
            [D] PutI(136:I8x8)[t98,0] = 0x00\n
            v16 = v15 + 1;\n
            v0 = ([D] GetI(136:I8x8)[t110,0] ? [D] GetI(72:F64x8)[t110,0] : nan);\n
            [D] PutI(136:I8x8)[t110,0] = 0x00\n
            v17 = v16 + 1;\n
            cgc_printf(v4 - 13709);\n
        }\n
        v6 = &v6->padding_1;\n
    }\n
    for (v6 = 0; v6 < 10; v6 = v8)\n
    {\n
        if (*(&v7[5].padding_15[15 + 4 * v6]))\n
            cgc_printTerritoryInfo();\n
        v8 = &v6->padding_1;\n
    }\n
    return v8;\n
}\n
", "4217395:sub_405a33": null, "4217408:cgc_freeCountry": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCountry(unsigned int v4[23])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
        return v4;\n
    for (v3 = 0; v3 < v4[22]; v3 += 1)\n
    {\n
        if (v4[1 + v3])\n
        {\n
            v0 = 32;\n
            cgc_deallocate(v4[1 + v3]);\n
            v4[1 + v3] = 0;\n
        }\n
    }\n
    for (v3 = 0; v3 < v4[11]; v3 += 1)\n
    {\n
        if (v4[12 + v3])\n
        {\n
            v1 = v4[12 + v3];\n
            v0 = cgc_strlen(v4[12 + v3]) + 1;\n
            cgc_deallocate(v1);\n
            v4[12 + v3] = 0;\n
        }\n
    }\n
    for (v3 = 0; v3 < 10; v3 += 1)\n
    {\n
        if (v4[5 + 9 + v3])\n
        {\n
            cgc_freeTerritory();\n
            v4[5 + 9 + v3] = 0;\n
        }\n
    }\n
    v0 = 536;\n
    return cgc_deallocate(v4);\n
}\n
", "4217791:sub_405bbf": null, "4217792:cgc_initCountry": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initCountry(unsigned int v2[23])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        cgc_bzero(v2, 20);\n
        v2[10] = -1;\n
        v2[11] = 0;\n
        v2[22] = 0;\n
        cgc_bzero(&v2[12], 40);\n
        cgc_bzero(v2 + 1, 400);\n
        return cgc_bzero(&v2[5 + 9], 40);\n
    }\n
    return v2;\n
}\n
", "4217974:sub_405c76": null, "4217984:cgc_countryTopLevel": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_countryTopLevel()\n
{\n
    struct_0 *v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_0 *v9;  // [bp-0x1c]\n
    void* v10;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v12;  // [bp-0x10], Other Possible Types: void*, unsigned int\n
    void* v13;  // [bp-0xc]\n
    unsigned int v15[3];  // [bp+0x4]\n
    unsigned int v51;  // eax\n
    unsigned int v52;  // eax\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    if (!v15)\n
        return;\n
    v0 = &v13;\n
    if (cgc_allocate(536, 0))\n
    {\n
        v13 = 0;\n
        return;\n
    }\n
    cgc_initCountry(v13);\n
    cgc_skipWhiteSpace();\n
    v11 = cgc_getIndex(v15);\n
    if (!cgc_atChar(v15))\n
        goto LABEL_0x4063ec;\n
    if (cgc_skipLength(v15) < 0)\n
        goto LABEL_0x4063ec;\n
    cgc_skipWhiteSpace();\n
    v10 = v15[2];\n
    v9 = cgc_skipAlpha();\n
    if (v9 != -1 && v10 != v9)\n
    {\n
        v0 = v9;\n
        v12 = cgc_copyData(v15, v10);\n
        if (!v12)\n
            goto LABEL_0x4063ec;\n
        if (cgc_strcmp(v12, v7 - 13156))\n
        {\n
            cgc_printf(v7 - 13148);\n
            v6 = v12;\n
            v52 = cgc_strlen(v12) + 1;\n
            cgc_deallocate(v6);\n
        }\n
        else\n
        {\n
            v5 = v12;\n
            v51 = cgc_strlen(v12) + 1;\n
            cgc_deallocate(v5);\n
            cgc_skipWhiteSpace(v15);\n
            if (!(*((v15[0] + v15[2])) == 125))\n
                goto LABEL_0x4063ec;\n
            cgc_incChar();\n
            v11 = v15[2];\n
            v12 = cgc_pullNextElementName();\n
            if (!v12)\n
            {\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v15))\n
                    goto LABEL_0x4063ec;\n
                if (cgc_skipLength(v15) < 0)\n
                    goto LABEL_0x4063ec;\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v15))\n
                    goto LABEL_0x4063ec;\n
                if (cgc_skipLength(v15) < 0)\n
                    goto LABEL_0x4063ec;\n
                v10 = v15[2];\n
                v9 = cgc_skipAlpha();\n
                if (v9 < 0)\n
                    goto LABEL_0x4063ec;\n
                if (v10 == v9)\n
                    goto LABEL_0x4063ec;\n
                v0 = v9;\n
                v12 = cgc_copyData(v15, v10);\n
                if (!v12)\n
                    goto LABEL_0x4063ec;\n
                if (!cgc_strcmp(v12, v7 - 13156))\n
                {\n
                    v1 = v12;\n
                    v54 = cgc_strlen(v12) + 1;\n
                    cgc_deallocate(v1);\n
                    cgc_skipWhiteSpace(v15);\n
                    if (!cgc_atChar(v15))\n
                        goto LABEL_0x4063ec;\n
                    cgc_incChar();\n
                    return;\n
                }\n
                v2 = v12;\n
                v53 = cgc_strlen(v12) + 1;\n
                cgc_deallocate(v2);\n
            }\n
            else\n
            {\n
                v8 = cgc_elementNameToEnum();\n
                v3 = v12;\n
                cgc_strlen(v3);\n
                cgc_deallocate(v3);\n
                v4 = v8 - 1;\n
                if (v4 <= 14)\n
                    goto *(((stack_base)[36] + (stack_base)[48] * 4 - 13624)) + (stack_base)[36];\n
                else\n
                    cgc_printf(v7 - 13014);\n
            }\n
        }\n
    }\n
}\n
", "4218680:sub_405f38": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int sub_405f38()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x8]\n
    struct_0 *v5;  // [bp+0x8]\n
    unsigned int v6;  // eax\n
\n
    v2 = cgc_extractName();\n
    if (v2)\n
    {\n
        cgc_bzero(*(&v3), 20);\n
        v5 = 19;\n
        cgc_strncpy(*(&v3), v2, 19);\n
        v0 = v2;\n
        v6 = cgc_strlen(v2) + 1;\n
        cgc_deallocate(v0);\n
        v2 = 0;\n
        v1 = v5->field_8;\n
        v2 = cgc_pullNextElementName();\n
    }\n
}\n
", "4219965:sub_40643d": null, "4219968:cgc_extractCapitol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractCapitol(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x10], Other Possible Types: char *\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    if (!v10)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v10))\n
    {\n
        cgc_printf(v4 - 12993);\n
        v9 = v7;\n
        return v9;\n
    }\n
    else if (cgc_skipLength(v10) != -1)\n
    {\n
        v6 = cgc_skipWhiteSpace();\n
        v5 = cgc_skipToNonAlphaNum();\n
        if (v5 == -1)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v0 = v5;\n
        v8 = cgc_copyData(v10, v6);\n
        if (!v8)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        else if (!cgc_strcmp(v8, v4 - 12383))\n
        {\n
            cgc_deallocate(v8);\n
            cgc_skipWhiteSpace(v10);\n
            if (!cgc_atChar(v10))\n
            {\n
                v9 = 0;\n
                return v9;\n
            }\n
            else if (cgc_incChar() != -1)\n
            {\n
                cgc_skipWhiteSpace();\n
                cgc_getIndex(v10);\n
                v5 = cgc_skipAlpha(v10);\n
                if (!(v6 ^ v5))\n
                {\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                v0 = v5;\n
                v7 = cgc_copyData(v10, v6);\n
                if (!v7)\n
                {\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v10))\n
                {\n
                    cgc_printf(v4 - 12665);\n
                }\n
                else if (cgc_incChar() == -1)\n
                {\n
                    cgc_printf(v4 - 12621);\n
                }\n
                else\n
                {\n
                    cgc_skipWhiteSpace();\n
                    if (!cgc_atChar(v10))\n
                    {\n
                        cgc_printf(v4 - 12579);\n
                    }\n
                    else\n
                    {\n
                        v6 = cgc_skipLength(v10);\n
                        if (v6 == -1)\n
                        {\n
                            cgc_printf(v4 - 12542);\n
                        }\n
                        else\n
                        {\n
                            v5 = cgc_skipToNonAlphaNum();\n
                            if (v5 == -1)\n
                            {\n
                                cgc_printf(v4 - 12511);\n
                            }\n
                            else\n
                            {\n
                                v0 = v5;\n
                                v8 = cgc_copyData(v10, v6);\n
                                if (v8)\n
                                {\n
                                    if (cgc_strcmp(v8, v4 - 12383))\n
                                    {\n
                                        cgc_printf(v4 - 12457);\n
                                        v3 = v8;\n
                                        v12 = cgc_strlen(v8) + 1;\n
                                        cgc_deallocate(v3);\n
                                    }\n
                                    else\n
                                    {\n
                                        v2 = v8;\n
                                        v11 = cgc_strlen(v8) + 1;\n
                                        cgc_deallocate(v2);\n
                                        cgc_skipWhiteSpace(v10);\n
                                        if (!cgc_atChar(v10))\n
                                        {\n
                                            cgc_printf(v4 - 12423);\n
                                        }\n
                                        else\n
                                        {\n
                                            cgc_skipLength(v10);\n
                                            goto LABEL_406939;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                if (v7)\n
                {\n
                    v1 = v7;\n
                    v13 = cgc_strlen(v7) + 1;\n
                    cgc_deallocate(v1);\n
                    v7 = 0;\n
                }\n
LABEL_406939:\n
                v9 = v7;\n
                return v9;\n
            }\n
            else\n
            {\n
                v9 = 0;\n
                return v9;\n
            }\n
        }\n
        else\n
        {\n
            cgc_deallocate(v8);\n
            v8 = 0;\n
            v9 = v8;\n
            return v9;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v4 - 12959);\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4221261:sub_40694d": null, "4221264:cgc_extractLanguage": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractLanguage(unsigned int v12)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    void* v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: char *\n
    void* v11;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v12)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v8 = cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v12))\n
    {\n
        cgc_printf(v6 - 12993);\n
        v11 = v9;\n
        return v11;\n
    }\n
    else if (cgc_skipLength(v12) != -1)\n
    {\n
        v8 = cgc_skipWhiteSpace();\n
        v7 = cgc_skipToNonAlphaNum();\n
        if (v7 == -1)\n
        {\n
            cgc_printf(v6 - 12927);\n
            v11 = v9;\n
            return v11;\n
        }\n
        v0 = v7;\n
        v10 = cgc_copyData(v12, v8);\n
        if (!v10)\n
        {\n
            v0 = v7;\n
            cgc_printf(v6 - 12881);\n
            v11 = 0;\n
            return v11;\n
        }\n
        else if (!cgc_strcmp(v10, v6 - 12852))\n
        {\n
            v4 = v10;\n
            v13 = cgc_strlen(v10) + 1;\n
            cgc_deallocate(v4);\n
            cgc_skipWhiteSpace(v12);\n
            if (!cgc_atChar(v12))\n
            {\n
                cgc_printf(v6 - 12811);\n
                v11 = 0;\n
                return v11;\n
            }\n
            else if (cgc_skipLength(v12) != -1)\n
            {\n
                v8 = cgc_skipWhiteSpace();\n
                v7 = cgc_skipAlpha();\n
                if (v8 == v7)\n
                {\n
                    cgc_printf(v6 - 12729);\n
                    v11 = v9;\n
                    return v11;\n
                }\n
                v0 = v7;\n
                v9 = cgc_copyData(v12, v8);\n
                if (!v9)\n
                {\n
                    cgc_printf(v6 - 12697);\n
                    v11 = v9;\n
                    return v11;\n
                }\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v12))\n
                {\n
                    cgc_printf(v6 - 12665);\n
                }\n
                else if (cgc_incChar() == -1)\n
                {\n
                    cgc_printf(v6 - 12621);\n
                }\n
                else\n
                {\n
                    cgc_skipWhiteSpace();\n
                    if (!cgc_atChar(v12))\n
                    {\n
                        cgc_printf(v6 - 12579);\n
                    }\n
                    else\n
                    {\n
                        v8 = cgc_skipLength(v12);\n
                        if (v8 == -1)\n
                        {\n
                            cgc_printf(v6 - 12542);\n
                        }\n
                        else\n
                        {\n
                            v7 = cgc_skipToNonAlphaNum();\n
                            if (v7 == -1)\n
                            {\n
                                cgc_printf(v6 - 12511);\n
                            }\n
                            else\n
                            {\n
                                v0 = v7;\n
                                v10 = cgc_copyData(v12, v8);\n
                                if (v10)\n
                                {\n
                                    if (cgc_strcmp(v10, v6 - 12852))\n
                                    {\n
                                        cgc_printf(v6 - 12457);\n
                                        v3 = v10;\n
                                        v16 = cgc_strlen(v10) + 1;\n
                                        cgc_deallocate(v3);\n
                                    }\n
                                    else\n
                                    {\n
                                        v2 = v10;\n
                                        v15 = cgc_strlen(v10) + 1;\n
                                        cgc_deallocate(v2);\n
                                        cgc_skipWhiteSpace(v12);\n
                                        if (!cgc_atChar(v12))\n
                                        {\n
                                            cgc_printf(v6 - 12423);\n
                                        }\n
                                        else\n
                                        {\n
                                            cgc_skipLength(v12);\n
                                            goto LABEL_406edb;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                if (v9)\n
                {\n
                    v1 = v9;\n
                    v17 = cgc_strlen(v9) + 1;\n
                    cgc_deallocate(v1);\n
                    v9 = 0;\n
                }\n
LABEL_406edb:\n
                v11 = v9;\n
                return v11;\n
            }\n
            else\n
            {\n
                cgc_printf(v6 - 12769);\n
                v11 = v9;\n
                return v11;\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(v6 - 12843);\n
            v5 = v10;\n
            v14 = cgc_strlen(v10) + 1;\n
            cgc_deallocate(v5);\n
            v10 = 0;\n
            v11 = v9;\n
            return v11;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v6 - 12959);\n
        v11 = v9;\n
        return v11;\n
    }\n
}\n
", "4222703:sub_406eef": null, "4222704:cgc_countyMenu": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
    unsigned long long field_2c;\n
    unsigned long long field_34;\n
    unsigned int field_3c;\n
    char padding_40[80];\n
    unsigned int field_90;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_countyMenu()\n
{\n
    unsigned int v2;  // [bp-0x3c]\n
    void* v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x34]\n
    void* v6;  // [bp-0x10]\n
    void* v7;  // [bp-0xc]\n
    unsigned int v9;  // [bp+0x4]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!(!v9))\n
        goto LABEL_0x406f39;\n
    v7 = 0;\n
    return;\n
}\n
", "4224687:sub_4076af": null, "4224688:cgc_printCountyInfo": null, "4225235:sub_4078d3": null, "4225248:cgc_freeCounty": "typedef struct struct_0 {\n
    char padding_0[144];\n
    unsigned int field_90;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCounty(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v3)\n
        return v3;\n
    for (v2 = 0; v2 < v3->field_90; v2 += 1)\n
    {\n
        if (*((148 + &v3->padding_0[0] + 0x4 * v2)))\n
        {\n
            v0 = 32;\n
            cgc_deallocate(*((148 + &v3->padding_0[0] + 0x4 * v2)));\n
            *((148 + &v3->padding_0[0] + 0x4 * v2)) = 0;\n
        }\n
    }\n
    for (v2 = 0; v2 < 20; v2 += 1)\n
    {\n
        cgc_freeCity(*((64 + &v3->padding_0[0] + 0x4 * v2)));\n
        *((64 + &v3->padding_0[0] + 0x4 * v2)) = 0;\n
    }\n
    v0 = 228;\n
    return cgc_deallocate(v3);\n
}\n
", "4225502:sub_4079de": null, "4225504:cgc_initCounty": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[39];\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    char padding_40[80];\n
    unsigned int field_90;\n
} struct_0;\n
\n
int cgc_initCounty(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v2;  // eax\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    if (!v1)\n
        return v1;\n
    for (v0 = 0; v0 < 20; v0 += 1)\n
    {\n
        (&v1->field_0)[v0] = 0;\n
        v1->padding_1[19 + v0] = 0;\n
        *(&v1->padding_40[4 * v0]) = 0;\n
        *(&(&v1[1].field_0)[4 * v0]) = 0;\n
    }\n
    v1->field_28 = -1;\n
    v4 = v1;\n
    v4->field_30 = 0xbff00000;\n
    v4->field_2c = 0;\n
    v5 = v1;\n
    v5->field_38 = 0xbff00000;\n
    v5->field_34 = 0;\n
    v1->field_3c = 0;\n
    v1->field_90 = 0;\n
    return v1;\n
}\n
", "4225688:sub_407a98": null, "4225696:cgc_countyTopLevel": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
    unsigned long long field_2c;\n
    unsigned long long field_34;\n
    unsigned int field_3c;\n
    char padding_40[80];\n
    unsigned int field_90;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_countyTopLevel()\n
{\n
    struct_0 *v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x24], Other Possible Types: void*, unsigned int\n
    void* v8;  // [bp-0x20]\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x18]\n
    void* v11;  // [bp-0x14]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0xc]\n
    struct_1 *v15;  // [bp+0x4]\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v15)\n
    {\n
        v13 = 0;\n
        return;\n
    }\n
    cgc_skipWhiteSpace();\n
    v9 = v15->field_8;\n
    if (!cgc_atChar(v15))\n
        goto LABEL_0x4081e6;\n
    cgc_incChar();\n
    cgc_skipWhiteSpace();\n
    cgc_getIndex(v15);\n
    v10 = cgc_skipAlpha(v15);\n
    if (v10 == -1)\n
        goto LABEL_0x4081e6;\n
    if (v11 == v10)\n
        goto LABEL_0x4081e6;\n
    v0 = v10;\n
    v7 = cgc_copyData(v15, v11);\n
    if (!v7)\n
        goto LABEL_0x4081e6;\n
    if (!(!cgc_strcmp(v7, v5 - 11967)))\n
        goto LABEL_0x4081e6;\n
    cgc_deallocate(v7);\n
    cgc_skipWhiteSpace(v15);\n
    if (!cgc_atChar(v15))\n
        goto LABEL_0x4081e6;\n
    cgc_skipWhiteSpace();\n
    cgc_incChar();\n
    v0 = &v12;\n
    if (cgc_allocate(228, 0))\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        v9 = v15->field_8;\n
        cgc_initCounty(v12);\n
        v7 = cgc_pullNextElementName();\n
        if (!v7)\n
        {\n
            cgc_skipWhiteSpace();\n
            if (!cgc_atChar(v15))\n
                goto LABEL_0x4081a1;\n
            cgc_skipLength(v15);\n
            cgc_skipWhiteSpace(v15);\n
            if (!cgc_atChar(v15))\n
                goto LABEL_0x4081a1;\n
            cgc_skipLength(v15);\n
            cgc_getIndex(v15);\n
            cgc_skipAlpha(v15);\n
            cgc_getIndex(v15);\n
            if (v11 == v10)\n
                goto LABEL_0x4081a1;\n
            if (v10 == -1)\n
                goto LABEL_0x4081a1;\n
            v0 = v10;\n
            v7 = cgc_copyData(v15, v11);\n
            if (!v7)\n
                goto LABEL_0x4081a1;\n
            if (cgc_strcmp(v7, v5 - 11967))\n
            {\n
                v2 = v7;\n
                v45 = cgc_strlen(v7) + 1;\n
                cgc_deallocate(v2);\n
            }\n
            else\n
            {\n
                v1 = v7;\n
                v46 = cgc_strlen(v7) + 1;\n
                cgc_deallocate(v1);\n
                cgc_skipWhiteSpace(v15);\n
                if (!cgc_atChar(v15))\n
                    goto LABEL_0x4081a1;\n
                cgc_incChar();\n
            }\n
        }\n
        else\n
        {\n
            v6 = cgc_elementNameToEnum();\n
            v3 = v7;\n
            cgc_strlen(v3);\n
            cgc_deallocate(v3);\n
            v4 = v6 - 1;\n
            if (v4 <= 21)\n
                goto *(((stack_base)[44] + (stack_base)[48] * 4 - 12332)) + (stack_base)[44];\n
            else\n
                cgc_printf(v5 - 11960);\n
        }\n
    }\n
}\n
", "4226328:sub_407d18": "int sub_407d18()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v2;  // [bp-0xc]\n
    unsigned int v4;  // [bp+0x8]\n
    unsigned int v5;  // eax\n
\n
    v1 = cgc_extractName();\n
    if (v1)\n
    {\n
        cgc_bzero(*(&v2), 20);\n
        v4 = 19;\n
        cgc_strncpy(*(&v2), v1, 19);\n
        v0 = v1;\n
        v5 = cgc_strlen(v1) + 1;\n
        cgc_deallocate(v0);\n
        v1 = 0;\n
        cgc_getIndex(v4);\n
        v1 = cgc_pullNextElementName(v4);\n
    }\n
}\n
", "4227573:sub_4081f5": null, "4227584:cgc_extractSeat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractSeat(unsigned int v12[3])\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    void* v7;  // [bp-0x1c]\n
    char *v8;  // [bp-0x18], Other Possible Types: void*\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v12)\n
        return v11;\n
    cgc_skipWhiteSpace();\n
    cgc_getIndex(v12);\n
    if (*((v12[0] + v12[2])) != 123)\n
        return v11;\n
    cgc_incChar();\n
    cgc_skipWhiteSpace();\n
    cgc_getIndex(v12);\n
    v9 = cgc_skipAlpha(v12);\n
    if (!(v9 != -1 && v10 != v9))\n
        return v11;\n
    v0 = v9;\n
    v8 = cgc_copyData(v12, v10);\n
    if (!v8)\n
    {\n
        return v11;\n
    }\n
    else if (cgc_strcmp(v8, v6 - 11924))\n
    {\n
        v5 = v8;\n
        v13 = cgc_strlen(v8) + 1;\n
        cgc_deallocate(v5);\n
        return v11;\n
    }\n
    else\n
    {\n
        v4 = v8;\n
        v14 = cgc_strlen(v8) + 1;\n
        cgc_deallocate(v4);\n
        cgc_skipWhiteSpace(v12);\n
        if (*((v12[0] + v12[2])) != 125)\n
            return v11;\n
        cgc_incChar();\n
        v10 = cgc_skipWhiteSpace();\n
        v9 = cgc_skipAlpha();\n
        if (v10 == v9)\n
        {\n
            return v11;\n
        }\n
        else if (v9 == -1)\n
        {\n
            return v11;\n
        }\n
        else\n
        {\n
            v0 = v9;\n
            v11 = cgc_copyData(v12, v10);\n
            if (!v11)\n
                return v11;\n
            cgc_skipWhiteSpace();\n
            if (cgc_atChar(v12))\n
            {\n
                cgc_incChar();\n
                cgc_skipWhiteSpace();\n
                if (cgc_atChar(v12))\n
                {\n
                    v10 = cgc_incChar();\n
                    v9 = cgc_skipAlpha();\n
                    if (v10 != v9 && v9 != -1)\n
                    {\n
                        v0 = v9;\n
                        v8 = cgc_copyData(v12, v10);\n
                        if (v8)\n
                        {\n
                            if (cgc_strcmp(v8, v6 - 11924))\n
                            {\n
                                v3 = v8;\n
                                v15 = cgc_strlen(v8) + 1;\n
                                cgc_deallocate(v3);\n
                            }\n
                            else\n
                            {\n
                                v2 = v8;\n
                                v16 = cgc_strlen(v8) + 1;\n
                                cgc_deallocate(v2);\n
                                cgc_skipWhiteSpace(v12);\n
                                if (cgc_atChar(v12))\n
                                {\n
                                    cgc_incChar();\n
                                    return v11;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            if (v11)\n
            {\n
                v1 = v11;\n
                v17 = cgc_strlen(v11) + 1;\n
                cgc_deallocate(v1);\n
                v11 = 0;\n
            }\n
            v12[2] = v7;\n
            return v11;\n
        }\n
    }\n
}\n
", "4228642:sub_408622": null, "4228656:cgc_extractDensity": null, "4229054:sub_4087be": null, "4229056:cgc_extractArea": null, "4230097:sub_408bd1": null, "4230112:cgc_checkId": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkId(unsigned int v8[3], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: void*\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!v8)\n
        return v7;\n
    cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v8))\n
        return v7;\n
    cgc_incChar();\n
    if (a1 == 1)\n
    {\n
        cgc_skipWhiteSpace();\n
        if (!cgc_atChar(v8))\n
            return v7;\n
        cgc_incChar();\n
    }\n
    v6 = cgc_skipWhiteSpace();\n
    v5 = cgc_skipAlpha();\n
    if (v5 == -1)\n
    {\n
        return v7;\n
    }\n
    else if (v6 == v5)\n
    {\n
        return v7;\n
    }\n
    else\n
    {\n
        v0 = v5;\n
        v4 = cgc_copyData(v8, v6);\n
        if (!v4)\n
        {\n
            return v7;\n
        }\n
        else if (cgc_strcmp(v4, a0))\n
        {\n
            v2 = v4;\n
            v9 = cgc_strlen(v4) + 1;\n
            cgc_deallocate(v2);\n
            return v7;\n
        }\n
        else\n
        {\n
            v1 = v4;\n
            v10 = cgc_strlen(v4) + 1;\n
            cgc_deallocate(v1);\n
            cgc_skipWhiteSpace(v8);\n
            if (*((v8[0] + v8[2])) == 125)\n
            {\n
                cgc_incChar();\n
                v7 = 1;\n
                return v7;\n
            }\n
            return v7;\n
        }\n
    }\n
}\n
", "4230631:sub_408de7": null, "4230640:cgc_extractBorder": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractBorder(struct_1 *v11)\n
{\n
    struct struct_0 **v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    struct struct_0 **v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned long long v8[4];  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x10], Other Possible Types: void*\n
    unsigned long long v10[4];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax\n
    unsigned long long v14[4];  // eax\n
    unsigned long long v15[4];  // eax\n
    unsigned long long v16[4];  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    *(&v8[0]) = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (!v11)\n
    {\n
        *(&v10[0]) = v8;\n
        return v10;\n
    }\n
    v0 = &v8[0];\n
    if (cgc_allocate(32, 0))\n
    {\n
        *(&v8[0]) = 0;\n
        v10 = v8;\n
        return v10;\n
    }\n
    cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v11))\n
    {\n
        cgc_printf(v5 - 12993);\n
        goto LABEL_409645;\n
    }\n
    if (cgc_skipLength(v11) == -1)\n
    {\n
        cgc_printf(v5 - 12959);\n
        goto LABEL_409645;\n
    }\n
    cgc_skipWhiteSpace();\n
    v7 = v11->field_8;\n
    v6 = cgc_skipAlpha();\n
    if (v6 == -1)\n
    {\n
        cgc_printf(v5 - 12927);\n
        goto LABEL_409645;\n
    }\n
    if (v7 == v6)\n
    {\n
LABEL_409645:\n
        cgc_deallocate(v8);\n
        v8 = 0;\n
    }\n
    else\n
    {\n
        v0 = v6;\n
        v9 = cgc_copyData(v11, v7);\n
        if (!v9)\n
        {\n
            v0 = v6;\n
            cgc_printf(v5 - 12881);\n
            goto LABEL_409645;\n
        }\n
        if (cgc_strcmp(v9, v5 - 11919))\n
        {\n
            cgc_printf(v5 - 11912);\n
            v4 = v9;\n
            v13 = cgc_strlen(v9) + 1;\n
            cgc_deallocate(v4);\n
            v9 = 0;\n
            goto LABEL_409645;\n
        }\n
        v3 = v9;\n
        v12 = cgc_strlen(v9) + 1;\n
        cgc_deallocate(v3);\n
        cgc_skipWhiteSpace(v11);\n
        if (!cgc_atChar(v11))\n
        {\n
            cgc_printf(v5 - 12811);\n
            goto LABEL_409645;\n
        }\n
        if (cgc_skipLength(v11) == -1)\n
        {\n
            cgc_printf(v5 - 12769);\n
            goto LABEL_409645;\n
        }\n
        v7 = cgc_skipWhiteSpace();\n
        v6 = cgc_skipFloat();\n
        if (v7 == v6)\n
        {\n
            cgc_printf(v5 - 11882);\n
            goto LABEL_409645;\n
        }\n
        if (v6 == -1)\n
        {\n
            cgc_printf(v5 - 11852);\n
            goto LABEL_409645;\n
        }\n
        v0 = v6;\n
        v9 = cgc_copyData(v11, v7);\n
        if (!v9)\n
        {\n
            cgc_printf(v5 - 11796);\n
            goto LABEL_409645;\n
        }\n
        cgc_atof(v9);\n
        *(&v8[0]) = ([D] GetI(136:I8x8)[t24,0] ? [D] GetI(72:F64x8)[t24,0] : nan);\n
        [D] PutI(136:I8x8)[t24,0] = 0x00\n
        cgc_deallocate(v9);\n
        v7 = cgc_skipWhiteSpace(v11);\n
        v6 = cgc_skipFloat();\n
        if (v7 == v6)\n
        {\n
            cgc_printf(v5 - 11757);\n
            goto LABEL_409645;\n
        }\n
        if (v7 != -1 && v6 != -1)\n
        {\n
            v0 = v6;\n
            v9 = cgc_copyData(v11, v7);\n
            if (!v9)\n
            {\n
                cgc_printf(v5 - 11684);\n
                goto LABEL_409645;\n
            }\n
            cgc_atof(v9);\n
            v14 = v8;\n
            if ([D] GetI(136:I8x8)[t14,0])\n
            {\n
                *(&v14[1]) = [D] GetI(72:F64x8)[t6,0];\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
            }\n
            else\n
            {\n
                v14[1] = nan;\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
            }\n
            cgc_deallocate();\n
            v7 = cgc_skipWhiteSpace(v11);\n
            v6 = cgc_skipFloat();\n
            if (v7 == v6)\n
            {\n
                cgc_printf(v5 - 11644);\n
                goto LABEL_409645;\n
            }\n
            if (v7 != -1 && v6 != -1)\n
            {\n
                v0 = v6;\n
                v9 = cgc_copyData(v11, v7);\n
                if (!v9)\n
                {\n
                    cgc_printf(v5 - 11571);\n
                    goto LABEL_409645;\n
                }\n
                cgc_atof(v9);\n
                v15 = v8;\n
                if ([D] GetI(136:I8x8)[t14,0])\n
                {\n
                    *(&v15[2]) = [D] GetI(72:F64x8)[t6,0];\n
                    [D] PutI(136:I8x8)[t6,0] = 0x00\n
                }\n
                else\n
                {\n
                    v15[2] = nan;\n
                    [D] PutI(136:I8x8)[t6,0] = 0x00\n
                }\n
                cgc_deallocate();\n
                v7 = cgc_skipWhiteSpace(v11);\n
                v6 = cgc_skipFloat();\n
                if (v7 == v6)\n
                {\n
                    cgc_printf(v5 - 11531);\n
                    goto LABEL_409645;\n
                }\n
                if (v7 != -1 && v6 != -1)\n
                {\n
                    v0 = v6;\n
                    v9 = cgc_copyData(v11, v7);\n
                    if (!v9)\n
                    {\n
                        cgc_printf(v5 - 11456);\n
                        goto LABEL_409645;\n
                    }\n
                    else\n
                    {\n
                        cgc_atof(v9);\n
                        v16 = v8;\n
                        if ([D] GetI(136:I8x8)[t14,0])\n
                        {\n
                            *(&v16[3]) = [D] GetI(72:F64x8)[t6,0];\n
                            [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        }\n
                        else\n
                        {\n
                            v16[3] = nan;\n
                            [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        }\n
                        cgc_deallocate();\n
                        cgc_skipWhiteSpace(v11);\n
                        if (!cgc_atChar(v11))\n
                        {\n
                            cgc_printf(v5 - 12665);\n
                            goto LABEL_409645;\n
                        }\n
                        else if (cgc_skipLength(v11) == -1)\n
                        {\n
                            cgc_printf(v5 - 12621);\n
                            goto LABEL_409645;\n
                        }\n
                        else\n
                        {\n
                            cgc_skipWhiteSpace();\n
                            if (!cgc_atChar(v11))\n
                            {\n
                                cgc_printf(v5 - 12579);\n
                                goto LABEL_409645;\n
                            }\n
                            else\n
                            {\n
                                v7 = cgc_skipLength(v11);\n
                                if (v7 == -1)\n
                                {\n
                                    cgc_printf(v5 - 12542);\n
                                    goto LABEL_409645;\n
                                }\n
                                else\n
                                {\n
                                    v6 = cgc_skipAlpha();\n
                                    if (v6 == -1)\n
                                    {\n
                                        cgc_printf(v5 - 12511);\n
                                        goto LABEL_409645;\n
                                    }\n
                                    else\n
                                    {\n
                                        v0 = v6;\n
                                        v9 = cgc_copyData(v11, v7);\n
                                        if (v9)\n
                                        {\n
                                            if (cgc_strcmp(v9, v5 - 11919))\n
                                            {\n
                                                cgc_printf(v5 - 12457);\n
                                                v2 = v9;\n
                                                v18 = cgc_strlen(v9) + 1;\n
                                                cgc_deallocate(v2);\n
                                                goto LABEL_409645;\n
                                            }\n
                                            else\n
                                            {\n
                                                v1 = v9;\n
                                                v17 = cgc_strlen(v9) + 1;\n
                                                cgc_deallocate(v1);\n
                                                cgc_skipWhiteSpace(v11);\n
                                                if (!cgc_atChar(v11))\n
                                                {\n
                                                    cgc_printf(v5 - 12423);\n
                                                    goto LABEL_409645;\n
                                                }\n
                                                else\n
                                                {\n
                                                    cgc_skipLength(v11);\n
                                                    goto LABEL_409662;\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                cgc_printf(v5 - 11499);\n
                goto LABEL_409645;\n
            }\n
            cgc_printf(v5 - 11613);\n
            goto LABEL_409645;\n
        }\n
        cgc_printf(v5 - 11726);\n
        goto LABEL_409645;\n
    }\n
LABEL_409662:\n
    v10 = v8;\n
    return v10;\n
}\n
", "4232817:sub_409671": null, "4232832:cgc_extractPopulation": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractPopulation(struct_0 *v14)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    void* v7;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x14]\n
    char *v12;  // [bp-0x10], Other Possible Types: void*\n
    unsigned int v13;  // [bp-0xc]\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    v11 = -1;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v14)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v14))\n
    {\n
        cgc_printf(v6 - 12993);\n
        v13 = -1;\n
        return v13;\n
    }\n
    else if (cgc_skipLength(v14) != -1)\n
    {\n
        cgc_skipWhiteSpace();\n
        v10 = v14->field_8;\n
        v9 = cgc_skipAlpha();\n
        if (v9 == -1)\n
        {\n
            cgc_printf(v6 - 12927);\n
            v13 = -1;\n
            return v13;\n
        }\n
        v0 = v9;\n
        v12 = cgc_copyData(v14, v10);\n
        if (!v12)\n
        {\n
            v0 = v9;\n
            cgc_printf(v6 - 12881);\n
            v13 = -1;\n
            return v13;\n
        }\n
        else if (!cgc_strcmp(v12, v6 - 11415))\n
        {\n
            v4 = v12;\n
            v15 = cgc_strlen(v12) + 1;\n
            cgc_deallocate(v4);\n
            cgc_skipWhiteSpace(v14);\n
            if (!cgc_atChar(v14))\n
            {\n
                cgc_printf(v6 - 12811);\n
                v13 = -1;\n
                return v13;\n
            }\n
            else if (cgc_skipLength(v14) != -1)\n
            {\n
                cgc_skipWhiteSpace();\n
                v8 = v14->field_8;\n
                v7 = cgc_skipInt();\n
                if (v7 == -1)\n
                {\n
                    cgc_printf(v6 - 11370);\n
                    v13 = v9;\n
                    return v13;\n
                }\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v14))\n
                {\n
                    cgc_printf(v6 - 12665);\n
                    v13 = -1;\n
                    return v13;\n
                }\n
                else if (cgc_skipLength(v14) != -1)\n
                {\n
                    cgc_skipWhiteSpace();\n
                    if (!cgc_atChar(v14))\n
                    {\n
                        cgc_printf(v6 - 12579);\n
                        v13 = -1;\n
                        return v13;\n
                    }\n
                    v10 = cgc_skipLength(v14);\n
                    if (v10 == -1)\n
                    {\n
                        cgc_printf(v6 - 12542);\n
                        v13 = v10;\n
                        return v13;\n
                    }\n
                    v9 = cgc_skipAlpha();\n
                    if (v9 == -1)\n
                    {\n
                        cgc_printf(v6 - 12511);\n
                        v13 = v9;\n
                        return v13;\n
                    }\n
                    v0 = v9;\n
                    v12 = cgc_copyData(v14, v10);\n
                    if (!v12)\n
                    {\n
                        v13 = -1;\n
                        return v13;\n
                    }\n
                    else if (!cgc_strcmp(v12, v6 - 11415))\n
                    {\n
                        v2 = v12;\n
                        v17 = cgc_strlen(v12) + 1;\n
                        cgc_deallocate(v2);\n
                        cgc_skipWhiteSpace(v14);\n
                        if (!cgc_atChar(v14))\n
                        {\n
                            cgc_printf(v6 - 12423);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                        cgc_skipLength(v14);\n
                        v0 = v7;\n
                        v12 = cgc_copyData(v14, v8);\n
                        if (!v12)\n
                        {\n
                            cgc_printf(v6 - 11319);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                        v11 = cgc_atoi(v12);\n
                        v1 = v12;\n
                        v19 = cgc_strlen(v12) + 1;\n
                        cgc_deallocate(v1);\n
                        v13 = v11;\n
                        return v13;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v6 - 12457);\n
                        v3 = v12;\n
                        v18 = cgc_strlen(v12) + 1;\n
                        cgc_deallocate(v3);\n
                        v13 = -1;\n
                        return v13;\n
                    }\n
                }\n
                else\n
                {\n
                    cgc_printf(v6 - 12621);\n
                    v13 = -1;\n
                    return v13;\n
                }\n
            }\n
            else\n
            {\n
                cgc_printf(v6 - 12769);\n
                v13 = -1;\n
                return v13;\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(v6 - 11404);\n
            v5 = v12;\n
            v16 = cgc_strlen(v12) + 1;\n
            cgc_deallocate(v5);\n
            v12 = 0;\n
            v13 = -1;\n
            return v13;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v6 - 12959);\n
        v13 = -1;\n
        return v13;\n
    }\n
}\n
", "4234350:sub_409c6e": null, "4234352:cgc_extractName": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractName(struct_0 *v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    void* v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x10], Other Possible Types: char *\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (!v13)\n
    {\n
        v12 = v10;\n
        return v12;\n
    }\n
    cgc_skipWhiteSpace();\n
    if (!cgc_atChar(v13))\n
    {\n
        cgc_printf(v5 - 12993);\n
        v12 = v10;\n
        return v12;\n
    }\n
    else if (cgc_skipLength(v13) != -1)\n
    {\n
        cgc_skipWhiteSpace();\n
        v9 = v13->field_8;\n
        v8 = cgc_skipAlpha();\n
        if (v8 == -1)\n
        {\n
            cgc_printf(v5 - 12927);\n
            v12 = 0;\n
            return v12;\n
        }\n
        v0 = v8;\n
        v11 = cgc_copyData(v13, v9);\n
        if (!v11)\n
        {\n
            v12 = 0;\n
            return v12;\n
        }\n
        else if (!v11)\n
        {\n
            v0 = v8;\n
            cgc_printf(v5 - 12881);\n
            v12 = 0;\n
            return v12;\n
        }\n
        else if (!cgc_strcmp(v11, v5 - 11285))\n
        {\n
            v3 = v11;\n
            v14 = cgc_strlen(v11) + 1;\n
            cgc_deallocate(v3);\n
            cgc_skipWhiteSpace(v13);\n
            if (!cgc_atChar(v13))\n
            {\n
                cgc_printf(v5 - 12811);\n
                v12 = 0;\n
                return v12;\n
            }\n
            else if (cgc_skipLength(v13) != -1)\n
            {\n
                cgc_skipWhiteSpace();\n
                v7 = v13->field_8;\n
                v6 = cgc_skipToNonAlphaNum();\n
                if (v6 == -1)\n
                {\n
                    cgc_printf(v5 - 11252);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                cgc_skipWhiteSpace();\n
                if (!cgc_atChar(v13))\n
                {\n
                    cgc_printf(v5 - 12665);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                else if (cgc_skipLength(v13) != -1)\n
                {\n
                    cgc_skipWhiteSpace();\n
                    if (!cgc_atChar(v13))\n
                    {\n
                        cgc_printf(v5 - 12579);\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    v9 = cgc_skipLength(v13);\n
                    if (v9 == -1)\n
                    {\n
                        cgc_printf(v5 - 12542);\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    v8 = cgc_skipAlpha();\n
                    if (v8 == -1)\n
                    {\n
                        cgc_printf(v5 - 12511);\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    v0 = v8;\n
                    v11 = cgc_copyData(v13, v9);\n
                    if (!v11)\n
                    {\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    else if (!cgc_strcmp(v11, v5 - 11285))\n
                    {\n
                        v1 = v11;\n
                        v16 = cgc_strlen(v11) + 1;\n
                        cgc_deallocate(v1);\n
                        cgc_skipWhiteSpace(v13);\n
                        if (!cgc_atChar(v13))\n
                        {\n
                            cgc_printf(v5 - 12423);\n
                            v12 = 0;\n
                            return v12;\n
                        }\n
                        cgc_skipLength(v13);\n
                        v0 = v6;\n
                        v10 = cgc_copyData(v13, v7);\n
                        v12 = v10;\n
                        return v12;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v5 - 12457);\n
                        v2 = v11;\n
                        v17 = cgc_strlen(v11) + 1;\n
                        cgc_deallocate(v2);\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                }\n
                else\n
                {\n
                    cgc_printf(v5 - 12621);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            }\n
            else\n
            {\n
                cgc_printf(v5 - 12769);\n
                v12 = 0;\n
                return v12;\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(v5 - 11280);\n
            v4 = v11;\n
            v15 = cgc_strlen(v11) + 1;\n
            cgc_deallocate(v4);\n
            v11 = 0;\n
            v12 = 0;\n
            return v12;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v5 - 12959);\n
        v12 = v10;\n
        return v12;\n
    }\n
}\n
", "4235795:sub_40a213": null, "4235808:cgc_pullNextElementName": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pullNextElementName(struct_0 *v7)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v4 = &v7->field_8->field_0;\n
    cgc_skipWhiteSpace();\n
    if (v7->field_8[v7->field_0].field_0 != 123)\n
    {\n
        cgc_printf(v1 - 11168);\n
    }\n
    else if (cgc_incChar() != -1)\n
    {\n
        cgc_skipWhiteSpace();\n
        for (v3 = &v7->field_8->field_0; v3 < v7->field_4; v3 += 1)\n
        {\n
            if (!*((v7->field_0 + v3)))\n
            {\n
                cgc_printf(v1 - 11137);\n
                break;\n
            }\n
            if (*((v7->field_0 + v3)) == 125)\n
            {\n
LABEL_40a35b:\n
                v2 = v3 - v7->field_8;\n
                if (cgc_allocate(v2 + 1, 0))\n
                {\n
                    v5 = 0;\n
                    break;\n
                }\n
                else\n
                {\n
                    cgc_bzero(v5, v2 + 1);\n
                    v0 = &v7->field_8[v7->field_0];\n
                    cgc_strncpy(v5, v0, v2);\n
                    v7->field_8 = v3;\n
                    cgc_skipWhiteSpace(v7, v0);\n
                    if (v7->field_8[v7->field_0].field_0 != 125)\n
                    {\n
                        cgc_printf(v1 - 11085);\n
                        cgc_deallocate(v5);\n
                        v5 = 0;\n
                    }\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                if (!(!cgc_isspace(*((v7->field_0 + v3)))))\n
                    goto LABEL_40a35b;\n
                if (!cgc_isalpha(*((v7->field_0 + v3))))\n
                    break;\n
            }\n
        }\n
    }\n
    v7->field_8 = v4;\n
    v6 = v5;\n
    return v6;\n
}\n
", "4236430:sub_40a48e": null, "4236432:cgc_elementNameToEnum": "typedef struct struct_1 {\n
    char padding_0[1149838348];\n
    unsigned int field_4489240c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-7af0ff08;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_elementNameToEnum()\n
{\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    char *v7;  // [bp+0x4]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 25;\n
    v3 = 0;\n
    if (!v7)\n
        return;\n
    v3 = cgc_strlen(v7);\n
    v1 = v3 - 3;\n
    if (v1 > 8)\n
        v4 = 25;\n
    else\n
        goto *(((stack_base)[20] + (stack_base)[24] * 4 - 11204)) + (stack_base)[20];\n
}\n
", "4237799:sub_40a9e7": null, "4237808:cgc_planetMenu": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned long long field_14;\n
    unsigned long long field_1c;\n
    unsigned long long field_24;\n
    unsigned long long field_2c;\n
    unsigned long long field_34;\n
    unsigned long long field_3c;\n
    unsigned long long field_44;\n
    unsigned long long field_4c;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_planetMenu()\n
{\n
    unsigned int v2;  // [bp-0x3c]\n
    void* v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x34]\n
    void* v6;  // [bp-0x10]\n
    void* v7;  // [bp-0xc]\n
    unsigned int v9;  // [bp+0x4]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v9)\n
    {\n
        v7 = 0;\n
        return;\n
    }\n
}\n
", "4239759:sub_40b18f": null, "4239760:cgc_printPlanetInfo": null, "4240450:sub_40b442": null, "4240464:cgc_freePlanet": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freePlanet(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    for (v2 = 0; v2 < 30; v2 += 1)\n
    {\n
        if (*((v3 + (v2 << 2) + 92)))\n
        {\n
            cgc_freeCountry(*((v3 + v2 * 4 + 92)));\n
            *((v3 + v2 * 4 + 92)) = 0;\n
        }\n
    }\n
    v0 = 212;\n
    return cgc_deallocate(v3);\n
}\n
", "4240620:sub_40b4ec": null, "4240624:cgc_initPlanet": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initPlanet(unsigned int v2[23])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4[23];  // eax\n
    unsigned int v5[23];  // eax\n
    unsigned int v6[23];  // eax\n
    unsigned int v7[23];  // eax\n
    unsigned int v8[23];  // eax\n
    unsigned int v9[23];  // eax\n
    unsigned int v10[23];  // eax\n
    unsigned int v11[23];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (!v2)\n
        return v2;\n
    cgc_bzero(v2, 20);\n
    v4 = v2;\n
    v4[6] = 0xbff00000;\n
    v4[5] = 0;\n
    v5 = v2;\n
    v5[8] = 0xbff00000;\n
    v5[7] = 0;\n
    v6 = v2;\n
    v6[10] = 0xbff00000;\n
    v6[9] = 0;\n
    v7 = v2;\n
    v7[12] = 0xbff00000;\n
    v7[11] = 0;\n
    v8 = v2;\n
    v8[14] = 0xbff00000;\n
    v8[13] = 0;\n
    v9 = v2;\n
    v9[16] = 0xbff00000;\n
    v9[15] = 0;\n
    v10 = v2;\n
    v10[18] = 0xbff00000;\n
    v10[17] = 0;\n
    v11 = v2;\n
    v11[20] = 0xbff00000;\n
    v11[19] = 0;\n
    v2[21] = -1;\n
    v3 = v2;\n
    for (*((v3 + 88)) = 0; v1 < 30; v1 = v3)\n
    {\n
        *((92 + &v2[0] + 0x4 * v1)) = 0;\n
        v3 = v1 + 1;\n
    }\n
    return v3;\n
}\n
", "4240898:sub_40b602": null, "4240912:cgc_planetTopLevel": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[8];\n
    unsigned long long field_14;\n
    unsigned long long field_1c;\n
    unsigned long long field_24;\n
    unsigned long long field_2c;\n
    unsigned long long field_34;\n
    unsigned long long field_3c;\n
    unsigned long long field_44;\n
    unsigned long long field_4c;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_planetTopLevel()\n
{\n
    struct_1 *v0;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    char *v5;  // [bp-0x24]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14]\n
    void* v10;  // [bp-0x10]\n
    void* v11;  // [bp-0xc]\n
    struct_0 *v13;  // [bp+0x4]\n
    struct_0 *v40;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (!v13)\n
        return;\n
    cgc_skipWhiteSpace();\n
    v6 = v13->field_8;\n
    if (v13->field_4 < 9)\n
        return;\n
    v5 = v3 - 10324;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= 8)\n
        {\n
            v40 = v13;\n
            v40->field_8 = v40->field_8 + 8;\n
            cgc_skipWhiteSpace();\n
            v0 = &v9;\n
            if (cgc_allocate(212, 0))\n
                return;\n
            cgc_initPlanet(v9);\n
            v7 = cgc_pullNextElementName(v13);\n
            cgc_getIndex(v13);\n
        }\n
        else if (*((v13->field_0 + v13->field_8 + v4)) == v5[v4])\n
        {\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return;\n
        }\n
    }\n
}\n
", "4242738:sub_40bd32": null, "4242752:cgc_extractPeriod": null, "4244352:cgc_extractOrbitSpeed": null, "4246058:sub_40ca2a": null, "4246064:cgc_extractAphelion": null, "4247669:sub_40d075": null, "4247680:cgc_extractPerihelion": null, "4249248:cgc_extractRadius": null, "4250792:sub_40dca8": null, "4250800:cgc_extractERadius": null, "4252368:cgc_extractMass": null, "4253965:sub_40e90d": null, "4253968:cgc_extractGravity": null, "4255536:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern char solarSystem;\n
\n
int main()\n
{\n
    struct_0 *v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x3c]\n
    void* v4;  // [bp-0x38]\n
    void* v5;  // [bp-0x34]\n
    char v6;  // [bp-0x2e]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    cgc_bzero(&solarSystem, 40);\n
    while (true)\n
    {\n
        cgc_printf(v2 - 9388);\n
        cgc_printf(v2 - 9358);\n
        cgc_printf(v2 - 9340);\n
        cgc_printf(v2 - 9328);\n
        cgc_printf(v2 - 9313);\n
        cgc_printf(v2 - 9295);\n
        cgc_printf(v2 - 13859);\n
        v0 = &v6;\n
        cgc_bzero(&v6, 30);\n
        cgc_receive_until(v0, 10, 4);\n
        v7 = cgc_atoi(v0);\n
        v1 = v7 - 1;\n
        if (v1 <= 4)\n
            break;\n
        cgc_printf(v2 - 13373);\n
    }\n
    goto *(((stack_base)[68] + (stack_base)[72] * 4 - 9408)) + (stack_base)[68];\n
}\n
", "4255854:sub_40f06e": "int sub_40f06e()\n
{\n
    char v0;  // [bp-0x40]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    for (v1 = 0; v1 < 10; v1 += 1)\n
    {\n
        if (*((*(&v0) + (v1 << 2) + 64)))\n
            cgc_printPlanetInfo(*((*(&v0) + v1 * 4 + 64)));\n
    }\n
}\n
", "4255936:sub_40f0c0": "int sub_40f0c0()\n
{\n
    char v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38]\n
    unsigned int *v2;  // [bp-0x30]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    if (cgc_allocate(0x1000, 0))\n
        v1 = 0;\n
    cgc_printf(*(&v0) - 9286);\n
    cgc_bzero(v1, 0x1000);\n
    cgc_receive_until(v1, 10, 4095);\n
    v2 = cgc_initString(v1, 10);\n
    cgc_deallocate(v1);\n
    if (v2)\n
    {\n
        if (!*(v2))\n
        {\n
            cgc_deallocate(v2);\n
        }\n
        else\n
        {\n
            for (v3 = 0; v3 < 10; v3 += 1)\n
            {\n
                if (!*((*(&v0) + (v3 << 2) + 64)))\n
                {\n
                    v5 = *(&v0);\n
                    *((v5 + v3 * 4 + 64)) = cgc_planetTopLevel();\n
                    if (!*((v5 + (v3 << 2) + 64)))\n
                        break;\n
                }\n
            }\n
            cgc_freeString();\n
        }\n
    }\n
}\n
", "4256291:sub_40f223": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int sub_40f223()\n
{\n
    char v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x2a]\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    cgc_printf(*(&v0) - 13847);\n
    cgc_bzero(&v2, 30);\n
    cgc_receive_until(&v2, 10, 29);\n
    for (v3 = 0; v3 < 10; v3 += 1)\n
    {\n
        if (!*((*(&v0) + (v3 << 2) + 64)))\n
            break;\n
    }\n
    if (v3 != 10)\n
    {\n
        if (cgc_allocate(212, 0))\n
            v1 = 0;\n
        cgc_initPlanet(v1);\n
        *((*(&v0) + v3 * 4 + 64)) = v1;\n
        for (v3 = 0; cgc_isalnum(*(&v2 + v3)); v3 += 1)\n
        {\n
            *((v1 + v3)) = *(&v2 + v3);\n
        }\n
    }\n
}\n
", "4256584:sub_40f348": "int sub_40f348()\n
{\n
    char v0;  // [bp-0x40]\n
    char v1;  // [bp-0x2a]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    for (v2 = 0; v2 < 10; v2 += 1)\n
    {\n
        if (*((*(&v0) + (v2 << 2) + 64)))\n
            cgc_printf(*(&v0) - 13222);\n
    }\n
    cgc_bzero(&v1, 30);\n
    cgc_printf(*(&v0) - 13847);\n
    cgc_receive_until(&v1, 10, 4);\n
    v2 = cgc_atoi(&v1);\n
    if (v2 >= 1 && v2 <= 10)\n
    {\n
        if (!*((*(&v0) + (v2 - 1 << 2) + 64)))\n
        {\n
            cgc_printf(*(&v0) - 13783);\n
        }\n
        else if (!cgc_planetMenu())\n
        {\n
            *((*(&v0) + (v2 - 1) * 4 + 64)) = 0;\n
        }\n
    }\n
    cgc_printf(*(&v0) - 13783);\n
}\n
", "4256912:sub_40f490": "int sub_40f490()\n
{\n
    char v0;  // [bp-0x40]\n
    char v2;  // [bp+0x54]\n
    char v3;  // [bp+0x58]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebp\n
\n
    cgc_printf(*(&v0) - 9280);\n
    v4 = *(&v2);\n
    v5 = *(&v3);\n
    return;\n
}\n
", "4256959:sub_40f4bf": null, "4256960:cgc_freeString": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeString(unsigned int v2[2])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
        return v2;\n
    if (v2[0])\n
    {\n
        v0 = v2[1];\n
        cgc_deallocate(v2[0]);\n
    }\n
    v0 = 12;\n
    return cgc_deallocate(v2);\n
}\n
", "4257066:sub_40f52a": null, "4257072:cgc_skipUrl": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipUrl(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = -1;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v4)\n
        return v3;\n
    for (v2 = &v4->field_8->field_0; v2 < v4->field_4; v2 += 1)\n
    {\n
        v1 = v2[v4->field_0];\n
        if (!cgc_isalnum(v1) && v1 != 46 && v1 != 47 && v1 != 58)\n
        {\n
            v4->field_8 = v2;\n
            v3 = v2;\n
            break;\n
        }\n
    }\n
    return v3;\n
}\n
", "4257279:sub_40f5ff": null, "4257280:cgc_getIndex": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_getIndex(struct_0 *v1, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    *(a0) = v1->field_8;\n
    v0 = v1->field_8;\n
    return v0;\n
}\n
", "4257340:sub_40f63c": null, "4257344:cgc_skipInt": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipInt(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = -1;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    for (v2 = &v5->field_8->field_0; v2 < v5->field_4; v2 += 1)\n
    {\n
        v1 = v2[v5->field_0];\n
        if (v1 != 43 && v1 != 45 && !cgc_isdigit(v1))\n
        {\n
            v5->field_8 = v2;\n
            v3 = v5->field_8;\n
            break;\n
        }\n
    }\n
    v4 = v3;\n
    return v4;\n
}\n
", "4257544:sub_40f708": null, "4257552:cgc_skipFloat": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipFloat(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = -1;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    for (v2 = &v5->field_8->field_0; v2 < v5->field_4; v2 += 1)\n
    {\n
        v1 = v2[v5->field_0];\n
        if (v1 != 46 && v1 != 43 && v1 != 45 && !cgc_isdigit(v1))\n
        {\n
            v5->field_8 = v2;\n
            v3 = v5->field_8;\n
            break;\n
        }\n
    }\n
    v4 = v3;\n
    return v4;\n
}\n
", "4257775:sub_40f7ef": null, "4257776:cgc_copyData": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_copyData(unsigned int v4[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v4)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    if (a1 >= 0 && a0 >= 0)\n
    {\n
        if (a1 == a0)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (a1 >= a0)\n
        {\n
            if (v4[1] >= a1 && v4[1] >= a0)\n
            {\n
                v1 = a1 - a0;\n
                if (cgc_allocate(v1 + 1, 0))\n
                {\n
                    v2 = 0;\n
                    v3 = v2;\n
                    return v3;\n
                }\n
                cgc_bzero(v2, v1 + 1);\n
                cgc_memcpy(v2, v4[0] + a0, v1);\n
                v3 = v2;\n
                return v3;\n
            }\n
            v3 = v2;\n
            return v3;\n
        }\n
        else\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4258104:sub_40f938": null, "4258112:cgc_skipAlpha": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipAlpha(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = -1;\n
    v1 = 0;\n
    if (!v4)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v1 = &v4->field_8->field_0;\n
    while (true)\n
    {\n
        if (v1 >= v4->field_4)\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        else if (cgc_isalpha(*((v4->field_0 + v1))))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v4->field_8 = v1;\n
            v2 = &v4->field_8->field_0;\n
            v3 = v2;\n
            return v3;\n
        }\n
    }\n
}\n
", "4258286:sub_40f9ee": null, "4258288:cgc_skipToNonAlphaNumSpace": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipToNonAlphaNumSpace(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = -1;\n
    v1 = 0;\n
    if (!v4)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v1 = &v4->field_8->field_0;\n
    while (true)\n
    {\n
        if (v1 >= v4->field_4)\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        if (!cgc_isalnum(*((v4->field_0 + v1))) && *((v4->field_0 + v1)) != 32)\n
        {\n
            v4->field_8 = v1;\n
            v2 = &v4->field_8->field_0;\n
            v3 = v2;\n
            return v3;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4258483:sub_40fab3": null, "4258496:cgc_skipToNonAlphaNum": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_skipToNonAlphaNum(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = -1;\n
    v1 = 0;\n
    if (!v4)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v1 = &v4->field_8->field_0;\n
    while (true)\n
    {\n
        if (v1 >= v4->field_4)\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        else if (cgc_isalnum(*((v4->field_0 + v1))))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v4->field_8 = v1;\n
            v2 = &v4->field_8->field_0;\n
            v3 = v2;\n
            return v3;\n
        }\n
    }\n
}\n
", "4258670:sub_40fb6e": null, "4258672:cgc_incChar": "int cgc_incChar(unsigned int v1[3])\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
    unsigned int v3[3];  // eax\n
\n
    v0 = v2;\n
    v0 = -1;\n
    if (!v1)\n
        return v0;\n
    if (v1[2] + 1 >= v1[1])\n
        return v0;\n
    v3 = v1;\n
    v3[2] = v3[2] + 1;\n
    v0 = v1[2];\n
}\n
", "4258756:sub_40fbc4": null, "4258768:cgc_skipLength": "int cgc_skipLength(unsigned int v1[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
    unsigned int v3[3];  // eax\n
\n
    v0 = v2;\n
    v0 = -1;\n
    if (!v1)\n
        return v0;\n
    if (v1[2] + a0 >= v1[1])\n
        return v0;\n
    v3 = v1;\n
    v3[2] = a0 + v3[2];\n
    v0 = v1[2];\n
}\n
", "4258855:sub_40fc27": null, "4258864:cgc_atChar": "int cgc_atChar(unsigned int v1[3], char a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*((v1[0] + v1[2])) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
}\n
", "4258950:sub_40fc86": null, "4258960:cgc_skipTo": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_skipTo(struct_0 *v2, char a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v0 = -1;\n
    if (!v2)\n
        return v0;\n
    v1 = &v2->field_8->field_0;\n
    while (true)\n
    {\n
        if (v1 >= v2->field_4)\n
            return v0;\n
        if (v1[v2->field_0] == a0)\n
        {\n
            v2->field_8 = v1;\n
            v0 = v1;\n
            return v0;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4259096:sub_40fd18": null, "4259104:cgc_initString": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initString(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v3)\n
        return v2;\n
    v1 = cgc_strlen(v3) + 1;\n
    if (cgc_allocate(12, 0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (cgc_allocate(v1, 0))\n
    {\n
        cgc_deallocate(v2);\n
        v2 = 0;\n
    }\n
    cgc_bzero(*(v2), v1);\n
    cgc_memcpy(*(v2), v3, v1 - 1);\n
    *((v2 + 4)) = v1;\n
    *((v2 + 8)) = 0;\n
    return v2;\n
}\n
", "4259384:sub_40fe38": null, "4259392:cgc_skipWhiteSpace": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_skipWhiteSpace(struct_0 *v6)\n
{\n
    char v0;  // [bp-0x13]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v4 = -1;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v6)\n
    {\n
        if (v6->field_4 > v6->field_8)\n
        {\n
            v3 = &v6->field_8->field_0;\n
            while (true)\n
            {\n
                v1 = 0;\n
                if (v3 < v6->field_4)\n
                {\n
                    v0 = 1;\n
                    if (v3[v6->field_0] != 10)\n
                    {\n
                        v0 = 1;\n
                        if (v3[v6->field_0] != 9)\n
                        {\n
                            v0 = 1;\n
                            if (v3[v6->field_0] != 32)\n
                                v0 = v3[v6->field_0] == 13;\n
                        }\n
                    }\n
                    v1 = v0;\n
                }\n
                if (!(v1 & 1))\n
                    break;\n
                v3 += 1;\n
            }\n
            v4 = v3;\n
            v6->field_8 = v3;\n
        }\n
        else\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
    v5 = v4;\n
    return v5;\n
}\n
", "4259657:sub_40ff49": null, "4259664:cgc_territoryMenu": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_territoryMenu()\n
{\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x3c]\n
    void* v5;  // [bp-0x38]\n
    void* v7;  // [bp-0x14]\n
    void* v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc]\n
    unsigned int v11;  // [bp+0x4]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!(!v11))\n
        goto LABEL_0x40ffa7;\n
    v9 = 0;\n
    return;\n
}\n
", "4261618:sub_4106f2": null, "4261632:cgc_printTerritoryInfo": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[19];\n
    char field_14;\n
    char padding_15[31];\n
    unsigned int field_34;\n
    struct struct_0 *field_38;\n
    unsigned int field_3c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printTerritoryInfo(struct_0 *v7)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    if (!v7)\n
        return v7;\n
    cgc_printf(v4 - 8959);\n
    if (v7->field_0)\n
    {\n
        v0 = v7;\n
        cgc_printf(v4 - 13218);\n
    }\n
    else\n
    {\n
        cgc_printf(v4 - 10458);\n
    }\n
    if (v7->field_34 >= 0)\n
    {\n
        v0 = v7->field_34;\n
        cgc_printf(v4 - 13761);\n
    }\n
    v0 = v7->field_38;\n
    cgc_printf(v4 - 8945);\n
    cgc_printf(v4 - 8925);\n
    if (v7->field_14)\n
    {\n
        v0 = &v7->field_14;\n
        cgc_printf(v4 - 13218);\n
    }\n
    else\n
    {\n
        cgc_printf(v4 - 10458);\n
    }\n
    v6 = 0;\n
    while (true)\n
    {\n
        v8 = v6;\n
        if (v8 >= v7->field_3c)\n
            break;\n
        v5 = *(&(&v7[1].field_0)[4 * v6]);\n
        if (v5)\n
        {\n
            [D] PutI(72:F64x8)[t20,0] = t23\n
            [D] PutI(136:I8x8)[t20,0] = 0x01\n
            v11 = ftop<4> - 1 - 1;\n
            [D] PutI(72:F64x8)[t32,0] = t35\n
            [D] PutI(136:I8x8)[t32,0] = 0x01\n
            v12 = v11 - 1;\n
            [D] PutI(72:F64x8)[t44,0] = t47\n
            [D] PutI(136:I8x8)[t44,0] = 0x01\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t56,0] = t59\n
            [D] PutI(136:I8x8)[t56,0] = 0x01\n
            v3 = ([D] GetI(136:I8x8)[t74,0] ? [D] GetI(72:F64x8)[t74,0] : nan);\n
            [D] PutI(136:I8x8)[t74,0] = 0x00\n
            v14 = v13 + 1;\n
            v2 = ([D] GetI(136:I8x8)[t86,0] ? [D] GetI(72:F64x8)[t86,0] : nan);\n
            [D] PutI(136:I8x8)[t86,0] = 0x00\n
            v15 = v14 + 1;\n
            v1 = ([D] GetI(136:I8x8)[t98,0] ? [D] GetI(72:F64x8)[t98,0] : nan);\n
            [D] PutI(136:I8x8)[t98,0] = 0x00\n
            v16 = v15 + 1;\n
            v0 = ([D] GetI(136:I8x8)[t110,0] ? [D] GetI(72:F64x8)[t110,0] : nan);\n
            [D] PutI(136:I8x8)[t110,0] = 0x00\n
            v17 = v16 + 1;\n
            cgc_printf(v4 - 13710);\n
        }\n
        v6 = &v6->padding_1;\n
    }\n
    v6 = 0;\n
    for (v6 = 0; v6 < 10; v6 = v8)\n
    {\n
        if (*((468 + &v7->field_0 + 0x4 * v6)))\n
            cgc_printCountyInfo(*((468 + &v7->field_0 + 0x4 * v6)));\n
        v8 = &v6->padding_1;\n
    }\n
    return v8;\n
}\n
", "4262120:sub_4108e8": null, "4262128:cgc_freeTerritory": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeTerritory(unsigned int v3[117])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    for (v2 = 0; v2 < v3[15]; v2 += 1)\n
    {\n
        if (v3[16 + v2])\n
        {\n
            v0 = 32;\n
            cgc_deallocate(v3[16 + v2]);\n
            v3[16 + v2] = 0;\n
        }\n
    }\n
    for (v2 = 0; v2 < v3[116]; v2 += 1)\n
    {\n
        cgc_freeCounty(*((468 + &v3[0] + 0x4 * v2)));\n
        v3[1 + v2] = 0;\n
    }\n
    v0 = 508;\n
    return cgc_deallocate(v3);\n
}\n
", "4262377:sub_4109e9": null, "4262384:cgc_initTerritory": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initTerritory(unsigned int v2[117])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        cgc_bzero(v2, 20);\n
        cgc_bzero(&v2[5], 30);\n
        v2[13] = -1;\n
        v2[116] = 0;\n
        v2[15] = 0;\n
        cgc_bzero(&v2[16], 400);\n
        return cgc_bzero(v2 + 1, 40);\n
    }\n
    return v2;\n
}\n
", "4262569:sub_410aa9": null, "4262576:cgc_territoryTopLevel": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_territoryTopLevel()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    void* v7;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x10], Other Possible Types: void*, unsigned int\n
    void* v12;  // [bp-0xc]\n
    struct_0 *v14;  // [bp+0x4]\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // eax\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v14)\n
    {\n
        return;\n
    }\n
    else if (!cgc_allocate(508, 0))\n
    {\n
        cgc_initTerritory(v12);\n
        cgc_skipWhiteSpace(v14);\n
        v10 = cgc_getIndex(v14, &v10);\n
        if (!cgc_atChar(v14, 123))\n
            goto LABEL_0x4111d0;\n
        if (cgc_incChar(v14) < 0)\n
            goto LABEL_0x4111d0;\n
        cgc_skipWhiteSpace(v14);\n
        cgc_getIndex(v14, &v9);\n
        v8 = cgc_skipAlpha(v14);\n
        if (v8 != -1 && v9 != v8)\n
        {\n
            v11 = cgc_copyData(v14, v9, v8);\n
            if (!v11)\n
                goto LABEL_0x4111d0;\n
            if (cgc_strcmp(v11, v6 - 10996))\n
            {\n
                cgc_printf(v6 - 8912);\n
                v5 = v11;\n
                v47 = cgc_strlen(v11) + 1;\n
                cgc_deallocate(v5);\n
            }\n
            else\n
            {\n
                v4 = v11;\n
                v46 = cgc_strlen(v11) + 1;\n
                cgc_deallocate(v4);\n
                cgc_skipWhiteSpace(v14);\n
                if (!cgc_atChar(v14, 125))\n
                    goto LABEL_0x4111d0;\n
                cgc_incChar(v14);\n
                v10 = v14->field_8;\n
                v11 = cgc_pullNextElementName(v14);\n
                if (!v11)\n
                {\n
                    cgc_skipWhiteSpace(v14);\n
                    if (!cgc_atChar(v14, 123))\n
                        goto LABEL_0x4111d0;\n
                    if (cgc_skipLength(v14, 1) < 0)\n
                        goto LABEL_0x4111d0;\n
                    cgc_skipWhiteSpace(v14);\n
                    if (!cgc_atChar(v14, 35))\n
                        goto LABEL_0x4111d0;\n
                    if (cgc_skipLength(v14, 1) < 0)\n
                        goto LABEL_0x4111d0;\n
                    v9 = v14->field_8;\n
                    v8 = cgc_skipAlpha(v14);\n
                    if (v8 < 0)\n
                        goto LABEL_0x4111d0;\n
                    if (v9 == v8)\n
                        goto LABEL_0x4111d0;\n
                    v11 = cgc_copyData(v14, v9, v8);\n
                    if (!v11)\n
                        goto LABEL_0x4111d0;\n
                    if (!cgc_strcmp(v11, v6 - 10996))\n
                    {\n
                        v0 = v11;\n
                        v49 = cgc_strlen(v11) + 1;\n
                        cgc_deallocate(v0);\n
                        cgc_skipWhiteSpace(v14);\n
                        if (!cgc_atChar(v14, 125))\n
                            goto LABEL_0x4111d0;\n
                        cgc_incChar(v14);\n
                        return;\n
                    }\n
                    v1 = v11;\n
                    v48 = cgc_strlen(v11) + 1;\n
                    cgc_deallocate(v1);\n
                }\n
                else\n
                {\n
                    v7 = cgc_elementNameToEnum();\n
                    v2 = v11;\n
                    cgc_strlen(v2);\n
                    cgc_deallocate(v2);\n
                    v3 = v7 - 1;\n
                    if (v3 <= 17)\n
                        goto *(((stack_base)[36] + (stack_base)[48] * 4 - 9232)) + (stack_base)[36];\n
                    else\n
                        cgc_printf(v6 - 8799);\n
                }\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        return;\n
    }\n
}\n
", "4263283:sub_410d73": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int sub_410d73()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x8]\n
    struct_0 *v5;  // [bp+0x8]\n
    unsigned int v6;  // eax\n
\n
    v2 = cgc_extractName(v5);\n
    if (v2)\n
    {\n
        cgc_bzero(*(&v3), 20);\n
        v5 = 19;\n
        cgc_strncpy(*(&v3), v2, 19);\n
        v0 = v2;\n
        v6 = cgc_strlen(v2) + 1;\n
        cgc_deallocate(v0);\n
        v2 = 0;\n
        v1 = v5->field_8;\n
        v2 = cgc_pullNextElementName(v5);\n
    }\n
}\n
", "4264481:sub_411221": null, "4264496:cgc_extractFounder": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractFounder(unsigned int *v11)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x10], Other Possible Types: void*\n
    void* v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (!v11)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    v7 = cgc_skipWhiteSpace(v11);\n
    if (!cgc_atChar(v11, 123))\n
    {\n
        cgc_printf(v5 - 12993);\n
        v10 = 0;\n
        return v10;\n
    }\n
    else if (cgc_skipLength(v11, 1) != -1)\n
    {\n
        v7 = cgc_skipWhiteSpace(v11);\n
        v6 = cgc_skipAlpha(v11);\n
        if (v6 == -1)\n
        {\n
            cgc_printf(v5 - 12927);\n
            v10 = 0;\n
            return v10;\n
        }\n
        v9 = cgc_copyData(v11, v7, v6);\n
        if (!v9)\n
        {\n
            cgc_printf(v5 - 12881);\n
            v10 = 0;\n
            return v10;\n
        }\n
        else if (cgc_strcmp(v9, v5 - 11013))\n
        {\n
            v4 = v9;\n
            v12 = cgc_strlen(v9) + 1;\n
            cgc_deallocate(v4);\n
            v10 = 0;\n
            return v10;\n
        }\n
        else\n
        {\n
            v3 = v9;\n
            v13 = cgc_strlen(v9) + 1;\n
            cgc_deallocate(v3);\n
            cgc_skipWhiteSpace(v11);\n
            if (!cgc_atChar(v11, 125))\n
            {\n
                cgc_printf(v5 - 12811);\n
                v10 = 0;\n
                return v10;\n
            }\n
            else if (cgc_skipLength(v11, 1) != -1)\n
            {\n
                v7 = cgc_skipWhiteSpace(v11);\n
                if (v7 == v6)\n
                {\n
                    v10 = 0;\n
                    return v10;\n
                }\n
                for (v6 = cgc_skipToNonAlphaNumSpace(v11); cgc_isspace(*((*(v11) + v6 - 1))); v6 -= 1);\n
                v8 = cgc_copyData(v11, v7, v6);\n
                if (!v8)\n
                {\n
                    v10 = 0;\n
                    return v10;\n
                }\n
                cgc_skipWhiteSpace(v11);\n
                if (!cgc_atChar(v11, 123))\n
                {\n
                    cgc_printf(v5 - 12665);\n
                }\n
                else if (cgc_incChar(v11) == -1)\n
                {\n
                    cgc_printf(v5 - 12621);\n
                }\n
                else\n
                {\n
                    cgc_skipWhiteSpace(v11);\n
                    if (!cgc_atChar(v11, 35))\n
                    {\n
                        cgc_printf(v5 - 12579);\n
                    }\n
                    else\n
                    {\n
                        v7 = cgc_skipLength(v11, 1);\n
                        if (v7 == -1)\n
                        {\n
                            cgc_printf(v5 - 12542);\n
                        }\n
                        else\n
                        {\n
                            v6 = cgc_skipAlpha(v11);\n
                            if (v6 == -1)\n
                            {\n
                                cgc_printf(v5 - 12511);\n
                            }\n
                            else\n
                            {\n
                                v9 = cgc_copyData(v11, v7, v6);\n
                                if (cgc_strcmp(v9, v5 - 11013))\n
                                {\n
                                    v2 = v9;\n
                                    v14 = cgc_strlen(v9) + 1;\n
                                    cgc_deallocate(v2);\n
                                }\n
                                else\n
                                {\n
                                    v1 = v9;\n
                                    v15 = cgc_strlen(v9) + 1;\n
                                    cgc_deallocate(v1);\n
                                    cgc_skipWhiteSpace(v11);\n
                                    if (!cgc_atChar(v11, 125))\n
                                    {\n
                                        cgc_printf(v5 - 12423);\n
                                    }\n
                                    else\n
                                    {\n
                                        cgc_skipLength(v11, 1);\n
                                        goto LABEL_411797;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                if (v8)\n
                {\n
                    v0 = v8;\n
                    v16 = cgc_strlen(v8) + 1;\n
                    cgc_deallocate(v0);\n
                    v8 = 0;\n
                }\n
LABEL_411797:\n
                v10 = v8;\n
                return v10;\n
            }\n
            else\n
            {\n
                cgc_printf(v5 - 12769);\n
                v10 = 0;\n
                return v10;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(v5 - 12959);\n
        v10 = 0;\n
        return v10;\n
    }\n
}\n
", "4265899:sub_4117ab": null, "4265904:cgc_extractEstablished": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_extractEstablished(void* v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    void* v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x10], Other Possible Types: void*\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (v13)\n
    {\n
        v9 = cgc_skipWhiteSpace(v13);\n
        if (!cgc_atChar(v13, 123))\n
        {\n
            cgc_printf(v5 - 12993);\n
            v12 = v10;\n
            return v12;\n
        }\n
        if (cgc_skipLength(v13, 1) == -1)\n
        {\n
            cgc_printf(v5 - 12959);\n
            v12 = v10;\n
            return v12;\n
        }\n
        v9 = cgc_skipWhiteSpace(v13);\n
        v8 = cgc_skipAlpha(v13);\n
        if (v8 == -1)\n
        {\n
            cgc_printf(v5 - 12927);\n
            v12 = v10;\n
            return v12;\n
        }\n
        v11 = cgc_copyData(v13, v9, v8);\n
        if (!v11)\n
        {\n
            cgc_printf(v5 - 12881);\n
        }\n
        else\n
        {\n
            if (cgc_strcmp(v11, v5 - 10964))\n
            {\n
                cgc_printf(v5 - 8776);\n
                v4 = v11;\n
                v15 = cgc_strlen(v11) + 1;\n
                cgc_deallocate(v4);\n
                v11 = 0;\n
                v12 = v10;\n
                return v12;\n
            }\n
            v3 = v11;\n
            v14 = cgc_strlen(v11) + 1;\n
            cgc_deallocate(v3);\n
            cgc_skipWhiteSpace(v13);\n
            if (!cgc_atChar(v13, 125))\n
            {\n
                cgc_printf(v5 - 12811);\n
            }\n
            else\n
            {\n
                if (cgc_skipLength(v13, 1) == -1)\n
                {\n
                    cgc_printf(v5 - 12769);\n
                    v12 = v10;\n
                    return v12;\n
                }\n
                cgc_skipWhiteSpace(v13);\n
                cgc_getIndex(v13, &v7);\n
                v6 = cgc_skipInt(v13);\n
                if (v6 == -1)\n
                {\n
                    cgc_printf(v5 - 8741);\n
                    v12 = v10;\n
                    return v12;\n
                }\n
                cgc_skipWhiteSpace(v13);\n
                if (!cgc_atChar(v13, 123))\n
                {\n
                    cgc_printf(v5 - 12665);\n
                }\n
                else\n
                {\n
                    if (cgc_incChar(v13) == -1)\n
                    {\n
                        cgc_printf(v5 - 12621);\n
                        v12 = v10;\n
                        return v12;\n
                    }\n
                    cgc_skipWhiteSpace(v13);\n
                    if (!cgc_atChar(v13, 35))\n
                    {\n
                        cgc_printf(v5 - 12579);\n
                    }\n
                    else\n
                    {\n
                        v9 = cgc_skipLength(v13, 1);\n
                        if (v9 == -1)\n
                        {\n
                            cgc_printf(v5 - 12542);\n
                            v12 = v10;\n
                            return v12;\n
                        }\n
                        v8 = cgc_skipToNonAlphaNum(v13);\n
                        if (v8 == -1)\n
                        {\n
                            cgc_printf(v5 - 12511);\n
                        }\n
                        else\n
                        {\n
                            v11 = cgc_copyData(v13, v9, v8);\n
                            if (cgc_strcmp(v11, v5 - 10964))\n
                            {\n
                                v2 = v11;\n
                                v16 = cgc_strlen(v11) + 1;\n
                                cgc_deallocate(v2);\n
                                v12 = v10;\n
                                return v12;\n
                            }\n
                            v1 = v11;\n
                            v17 = cgc_strlen(v11) + 1;\n
                            cgc_deallocate(v1);\n
                            cgc_skipWhiteSpace(v13);\n
                            if (!cgc_atChar(v13, 125))\n
                            {\n
                                cgc_printf(v5 - 12423);\n
                            }\n
                            else\n
                            {\n
                                cgc_skipLength(v13, 1);\n
                                v11 = cgc_copyData(v13, v7, v6);\n
                                if (v11)\n
                                {\n
                                    v10 = cgc_atoi(v11);\n
                                    v0 = v11;\n
                                    v18 = cgc_strlen(v11) + 1;\n
                                    cgc_deallocate(v0);\n
                                    v12 = v10;\n
                                    return v12;\n
                                }\n
                                cgc_printf(v5 - 8689);\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v12 = 0;\n
    return v12;\n
}\n
", "4267328:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_deallocate": null, "5242908:strncpy": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}