{"4198400:_init": "extern struct_0 *g_407124;\n
\n
int _init()\n
{\n
    if (g_407124)\n
    {\n
        g_407124();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198560:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198576:sub_4010b0": "int sub_4010b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198582:sub_4010b6": null, "4198592:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198635:sub_4010eb": null, "4198636:sub_4010ec": "int sub_4010ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198640:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198644:sub_4010f4": null, "4198656:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24619;\n
    v6 = v5 + 798;\n
    v7 = v5 + 798;\n
    if (v7 == v6)\n
        return v5 + 798;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198707:sub_401133": "int sub_401133()\n
{\n
}\n
", "4198713:sub_401139": "int sub_401139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198720:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24555;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 798;\n
    v9 = (v6 + 798 - (v6 + 798) >> 31) + (798 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198791:sub_401187": "int sub_401187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407120;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407120)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198875:sub_4011db": "int sub_4011db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198880:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198889:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198893:sub_4011ed": null, "4198896:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4198986:sub_40124a": null, "4198992:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 1;\n
}\n
", "4199021:sub_40126d": null, "4199024:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 2;\n
}\n
", "4199053:sub_40128d": null, "4199056:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 16;\n
}\n
", "4199085:sub_4012ad": null, "4199088:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 14;\n
}\n
", "4199117:sub_4012cd": null, "4199120:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 12;\n
}\n
", "4199149:sub_4012ed": null, "4199152:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 4;\n
}\n
", "4199181:sub_40130d": null, "4199184:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 8;\n
}\n
", "4199213:sub_40132d": null, "4199216:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 64;\n
}\n
", "4199245:sub_40134d": null, "4199248:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 32;\n
}\n
", "4199277:sub_40136d": null, "4199280:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0] & 4294967168;\n
}\n
", "4199309:sub_40138d": null, "4199312:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8488 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 2) >> 1);\n
}\n
", "4199371:sub_4013cb": null, "4199376:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4199410:sub_4013f2": null, "4199424:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4199486:sub_40143e": null, "4199488:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8488 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4199522:sub_401462": null, "4199536:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4199568:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
    char *v7;  // edi\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ebp\n
    void* v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v4 = v3;\n
    v5 = v3->field_8;\n
    if (v5 == -1)\n
        return 0;\n
    if (v4->field_4 == 1)\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        v7 = v4->field_10;\n
        if (v7)\n
        {\n
            v8 = v4->field_c;\n
            if (v8 != v5)\n
            {\n
                do\n
                {\n
                    *(24 + &v4->field_0 + v5) = v7[*(24 + &v4->field_0 + v5)];\n
                    v5 += 1;\n
                } while (v8 != v5);\n
            }\n
        }\n
        v1 = v4->field_0;\n
        v9 = v4->field_8;\n
        v10 = 24 + v9 + v4;\n
        v11 = v4->field_c - v9;\n
        v12 = 0;\n
        while (true)\n
        {\n
            v13 = v12;\n
            v14 = v11 - v12;\n
            if (v11 <= v12)\n
                break;\n
            v15 = v10 + v12;\n
            v0 = &v2;\n
            v16 = cgc_transmit(v1, v15, v14);\n
            v17 = 0;\n
            if (!v16)\n
                v17 = *(&v2);\n
            v12 = v17 + v13;\n
            if (v16)\n
                break;\n
        }\n
        v6 = -(v13 < v11);\n
        v4 = v3;\n
    }\n
    *((v4 + 12)) = 0;\n
    *((v4 + 8)) = 0;\n
    return v6;\n
}\n
", "4199677:sub_4014fd": null, "4199758:sub_40154e": null, "4199760:cgc_fbuffered": "int cgc_fbuffered(unsigned int v4[5], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // ecx\n
    unsigned int v6[5];  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // edi, Other Possible Types: unsigned int\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v6[2];\n
    if (v7 == -1)\n
    {\n
        v6[2] = -(v5 < 1);\n
        v6[3] = 0;\n
        return -(v5 < 1);\n
    }\n
    if (v6[1] != 1)\n
    {\n
        if (v6[4])\n
        {\n
            v8 = v6[3];\n
            if (v8 != v7)\n
            {\n
                do\n
                {\n
                    *(24 + &v6[0] + v7) = *((v6[4] + *(24 + &v6[0] + v7)));\n
                    v7 += 1;\n
                } while (v8 != v7);\n
            }\n
        }\n
        v2 = v6[0];\n
        v9 = v6[2];\n
        v1 = 24 + v6 + v9;\n
        v10 = v6[3] - v9;\n
        v13 = 0;\n
        while (v10 > v13)\n
        {\n
            v0 = &v3;\n
            v11 = cgc_transmit(v2, v1 + v13, v10 - v13);\n
            v12 = 0;\n
            if (!v11)\n
                v12 = *(&v3);\n
            v13 += v12;\n
            if (v11)\n
                break;\n
        }\n
    }\n
    v6[3] = 0;\n
    v6[2] = 0;\n
    v5 = a0;\n
}\n
", "4199972:sub_401624": null, "4199984:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4200077:sub_40168d": null, "4200080:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v5, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // ebp\n
    char *v8;  // ecx\n
    void* v9;  // edx, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    char *v16;  // edi\n
    unsigned int v17;  // ebp\n
    char *v18;  // eax\n
    unsigned int v19;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = a1;\n
    if (v6->field_8 == v6->field_c)\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (!cgc_receive(v6->field_0, v6 + 1, 0x400))\n
        {\n
            v7 = *(&v4);\n
            if (*(&v4))\n
            {\n
                v6->field_c = v7;\n
                v8 = v6->field_14;\n
                if (v8)\n
                {\n
                    v9 = 0;\n
                    do\n
                    {\n
                        *(24 + &v6->field_0 + v9) = v8[*(24 + &v6->field_0 + v9)];\n
                        v9 += 1;\n
                    } while (v7 != v9);\n
                }\n
            }\n
        }\n
    }\n
    v10 = a0;\n
    v11 = v6->field_8;\n
    if (v11 != -1)\n
    {\n
        v12 = v6->field_c - v11;\n
        if (v12 > v10)\n
            v12 = v10;\n
        v2 = v12;\n
        cgc_memcpy();\n
        v13 = v2;\n
        v14 = v6->field_8 + v13;\n
        v6->field_8 = v14;\n
        if (v14 == v6->field_c)\n
        {\n
            v6->field_c = 0;\n
            v6->field_8 = 0;\n
        }\n
        if (v13 < v10)\n
            goto LABEL_401790;\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        if (0 < v10)\n
        {\n
            while (true)\n
            {\n
LABEL_401790:\n
                v16 = v5 + v13;\n
                v3 = v13;\n
                v0 = &v2;\n
                if (cgc_receive(v6->field_0, v16, a0 - v13))\n
                    return -1;\n
                v17 = v2;\n
                if (!v2)\n
                    return -1;\n
                v18 = v6->field_14;\n
                if (v18)\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v16[v19] = v18[v16[v19]];\n
                        v19 += 1;\n
                    } while (v17 != v19);\n
                }\n
                v13 = v3 + v17;\n
                if (v13 >= a0)\n
                    return v13;\n
            }\n
        }\n
    }\n
    return v13;\n
}\n
", "4200317:sub_40177d": null, "4200436:sub_4017f4": null, "4200448:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v6 = 0;\n
    tmp_21 = v1;\n
    v3 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
            {\n
                v5 = 1;\n
            }\n
            else\n
            {\n
                v5 = 2;\n
                if (v4 != v2)\n
                {\n
                    *((v0 + v6)) = v4;\n
                    v5 = 0;\n
                }\n
            }\n
            if (v5)\n
                break;\n
            v6 += 1;\n
            if (v3 == v6)\n
                goto LABEL_401877;\n
        }\n
        if (!(v5 == 2))\n
            goto LABEL_40189c;\n
    }\n
LABEL_401877:\n
    if (v6 != v3)\n
    {\n
LABEL_401892:\n
        *((v0 + v6)) = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v7 = cgc__getc();\n
        if (v7 == -1)\n
            break;\n
        if (v7 == v2)\n
            goto LABEL_401892;\n
    }\n
LABEL_40189c:\n
    return -1;\n
}\n
", "4200530:sub_401852": null, "4200619:sub_4018ab": null, "4200624:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x15]\n
    char v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    char *v9;  // eax\n
    char *v10;  // edx\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
\n
    v6 = v5;\n
    v7 = v5->field_8;\n
    if (v7 == -1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5->field_0, &v1, 1))\n
        {\n
            return -1;\n
        }\n
        else if (!*(&v2))\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v9 = v5->field_14;\n
            if (!v9)\n
                return v1;\n
            v1 = v9[v1];\n
        }\n
    }\n
    else\n
    {\n
        if (v7 == v5->field_c)\n
        {\n
            v5->field_c = 0;\n
            v5->field_8 = 0;\n
            v0 = &v3;\n
            v13 = -1;\n
            if (!cgc_receive(v5->field_0, v5 + 1, 0x400))\n
            {\n
                v8 = *(&v3);\n
                v13 = -1;\n
                if (v8)\n
                {\n
                    v6->field_c = v8;\n
                    v10 = v6->field_14;\n
                    if (v10)\n
                    {\n
                        v11 = 0;\n
                        do\n
                        {\n
                            *(24 + &v6->field_0 + v11) = v10[*(24 + &v6->field_0 + v11)];\n
                            v11 += 1;\n
                        } while (v8 != v11);\n
                    }\n
                    v13 = v8;\n
                }\n
            }\n
            if (v13 < 0)\n
                return -1;\n
        }\n
        v14 = v6->field_8;\n
        v6->field_8 = v14 + 1;\n
        return *(24 + &v6->field_0 + v14);\n
    }\n
}\n
", "4200849:sub_401991": null, "4200864:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4200904:sub_4019c8": null, "4200912:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fwrite(unsigned int v5, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x420]\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // [bp-0x41c]\n
    unsigned int v2;  // [bp-0x418]\n
    char v3;  // [bp-0x414]\n
    char v4;  // [bp-0x410]\n
    struct_1 *v6;  // edi\n
    unsigned int v7;  // ebp\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // esi\n
    char *v10;  // edi\n
    unsigned int v11;  // ebp\n
    struct_0 *v12;  // eax, Other Possible Types: unsigned int\n
    void* v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // eax\n
    void* v16;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // eax\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ebp\n
\n
    v6 = a1;\n
    v7 = a0;\n
    if (v6->field_8 != -1)\n
    {\n
        if (v7 >= 0x400)\n
        {\n
            cgc_fflush(v6);\n
        }\n
        else\n
        {\n
            v8 = v6->field_c;\n
            v9 = 0;\n
            if (v8 + v7 >= 0x400)\n
            {\n
                v9 = 0x400 - v8;\n
                cgc_memcpy(&v6[1].padding_4[v8], v5);\n
                v6->field_c = v6->field_c + v9;\n
                cgc_fflush(v6);\n
            }\n
            if (v9 < v7)\n
            {\n
                v25 = v7 - v9;\n
                cgc_memcpy(&v6[1].padding_4[v6->field_c], v5 + v9);\n
                v6->field_c = v6->field_c + v25;\n
                return a0;\n
            }\n
            return v9;\n
        }\n
    }\n
    v1 = v6->field_0;\n
    v10 = v6->field_10;\n
    v19 = 0;\n
    if (!v10)\n
    {\n
        while (v19 < v7)\n
        {\n
            v20 = v19;\n
            v21 = v5 + v19;\n
            v22 = v7 - v19;\n
            v0 = &v4;\n
            v23 = cgc_transmit(v1, v21, v22);\n
            v24 = 0;\n
            if (!v23)\n
                v24 = *(&v4);\n
            v19 = v24 + v20;\n
            if (v23)\n
            {\n
                if (v20 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        while (v19 < v7)\n
        {\n
            v11 = v7 - v19;\n
            if (v11 >= 0x400)\n
                v11 = 0x400;\n
            v2 = v19;\n
            cgc_memcpy();\n
            if (v11)\n
            {\n
                v12 = 0;\n
                do\n
                {\n
                    (&v4)[v12] = v10[(&v4)[v12]];\n
                    v12 += 1;\n
                } while (v11 != v12);\n
            }\n
            v13 = 0;\n
            do\n
            {\n
                v14 = v13;\n
                if (v11 <= v13)\n
                {\n
                    v16 = v11;\n
                    break;\n
                }\n
                v0 = &v3;\n
                v15 = cgc_transmit(v1, &(&v4)[v13], v11 - v13);\n
                v16 = 0;\n
                v17 = 0;\n
                if (!v15)\n
                    v17 = *(&v3);\n
                v13 = v17 + v14;\n
            } while (!v15);\n
            v18 = v2;\n
            v19 = v16 + v18;\n
            tmp_6 = v11;\n
            v7 = a0;\n
            if (tmp_6 > v14)\n
            {\n
                if (v18 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    return v7;\n
}\n
", "4200998:sub_401a26": null, "4201068:sub_401a6c": null, "4201192:sub_401ae8": null, "4201411:sub_401bc3": null, "4201424:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        v10 += 1;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4201689:sub_401cd9": null, "4201696:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4201736:sub_401d08": null, "4201744:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_4[516];\n
    struct struct_2 *field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_3 *field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[262142];  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    struct_5 *v6;  // [bp-0xc]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // edi\n
    struct_2 *v11;  // ebp\n
    struct_2 *v12;  // esi\n
    unsigned int v13;  // ebp\n
    struct_4 *v14;  // ebp, Other Possible Types: unsigned int\n
    struct_3 *v15;  // edi, Other Possible Types: unsigned int\n
    struct_3 *v16;  // eax, Other Possible Types: unsigned int\n
    struct_4 *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18[262142];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct_5 *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    struct_0 *v24;  // ecx\n
    struct_2 *v25;  // ecx\n
    unsigned int v26;  // ecx\n
    struct_1 *v27;  // eax\n
    struct_0 *v28;  // edx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // edx\n
    struct_4 *v31;  // edx, Other Possible Types: unsigned int\n
    struct_4 *v32;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    struct_0 *v35;  // ecx\n
\n
    if (a0 < 0)\n
        return 0;\n
    v9 = a0 + 3 & -0x4;\n
    if ((a0 + 3 & -0x4) && v9 > 15)\n
    {\n
        if (v9 > 131071)\n
        {\n
            v13 = v9 + 4103 & -0x1000;\n
            v0 = &v4;\n
            if (cgc_allocate(v13, 0))\n
                return 0;\n
            v15 = *(&v4);\n
            *(v15) = v8;\n
            *((v15 + 4)) = v13;\n
            goto LABEL_401fef;\n
        }\n
        v11 = v9 + 23;\n
        v12 = v11 & -0x10;\n
        if (!(v11 & -0x10))\n
        {\n
            v14 = -1;\n
        }\n
        else if (v12 <= 0x200)\n
        {\n
            v14 = (v11 >> 4) + 2;\n
        }\n
        else if (v12 <= 0x1200)\n
        {\n
            v14 = (v12 + 32 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v14 = 130;\n
            if (v12 <= 0x20000)\n
                v14 = (v12 + 288 >> 11) + 66;\n
        }\n
        v15 = 0;\n
        if (v14 <= 130)\n
        {\n
            do\n
            {\n
                v16 = *((v8 + v14 * 4));\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        if (*((v16 + 4)) >= v12)\n
                        {\n
                            v15 = v16;\n
                            goto LABEL_401e20;\n
                        }\n
                        v16 = *((v16 + 12));\n
                    } while (v16);\n
                }\n
                v14 += 1;\n
            } while (v14 != 131);\n
            v14 = 131;\n
            if (!(131 == 131))\n
                goto LABEL_401f23;\n
            goto LABEL_401e2c;\n
        }\n
LABEL_401e20:\n
        if (!(v14 == 131))\n
            goto LABEL_401f23;\n
LABEL_401e2c:\n
        v0 = &v3;\n
        v17 = v8;\n
        v18 = 0;\n
        if (!cgc_allocate(0x200000, 0))\n
        {\n
            v19 = *(&v3);\n
            v2[0] = v19 + 1048575;\n
            v18 = v19 + 1048575 & -0x100000;\n
            if ((v19 + 1048575 & -0x100000) > v19)\n
            {\n
                v1 = v19;\n
                cgc_deallocate(v19);\n
                v19 = v1;\n
                v17 = v8;\n
            }\n
            v20 = v18 + 0x100000;\n
            if (v19 + 0x200000 > v20)\n
            {\n
                cgc_deallocate(v20);\n
                v17 = v8;\n
            }\n
            *((v17 + (v2 >> 20) + 524)) = 2;\n
        }\n
        if (!v18)\n
            return 0;\n
        v21 = v18 + 19 & -0x10;\n
        v21->field_0 = 0;\n
        v22 = 1048560 + v18 - v21;\n
        v21->field_4 = v22;\n
        *((v18 + 1048560)) = v22;\n
        *((v18 + 1048564)) = 0;\n
        v23 = v21->field_4;\n
        if (!(!(v23 & 1)))\n
            goto LABEL_402022;\n
        v21->field_4 = v23 | 1;\n
        v21->field_8 = 0;\n
        v21->field_c = *((v17 + 520));\n
        *((v17 + 520)) = v21;\n
        v24 = v21->field_c;\n
        if (v24)\n
            v24->field_8 = v21;\n
        v15 = *((v17 + 520));\n
        v14 = 130;\n
LABEL_401f23:\n
        v25 = *((v15 + 4));\n
        if (!(v25 & 1))\n
        {\n
            v21 = cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\");\n
        }\n
        else\n
        {\n
            v26 = v25 & -2;\n
            *((v15 + 4)) = v26;\n
            v27 = *((v15 + 8));\n
            if (v27)\n
                v27->field_c = *((v15 + 12));\n
            v28 = *((v15 + 12));\n
            if (v28)\n
                v28->field_8 = v27;\n
            v29 = v8;\n
            if (*((v29 + (v14 << 2))) == v15)\n
                *((v29 + v14 * 4)) = *((v15 + 12));\n
            *((v15 + 8)) = 0;\n
            *((v15 + 12)) = 0;\n
            v30 = v26 - v12;\n
            if (v30 < 33)\n
            {\n
LABEL_401fef:\n
                v10 = v15 + 8;\n
                return v10;\n
            }\n
            v21 = v12 + v15;\n
            *((v15 + 4)) = v12;\n
            *((&v12->field_0 + v15)) = v12;\n
            *((4 + &v12->field_0 + v15)) = v30;\n
            *((v26 + v15)) = v30;\n
            if (v30 <= 0x200)\n
            {\n
                v31 = (v30 >> 4) + 2;\n
            }\n
            else if (v30 <= 0x1200)\n
            {\n
                v31 = (v30 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v32 = 130;\n
                if (!(v30 <= 0x20000))\n
                    goto LABEL_401fc3;\n
                v31 = (v30 - 0x1200 >> 11) + 66;\n
            }\n
            v32 = v31;\n
LABEL_401fc3:\n
            v33 = *((v21 + 4));\n
            if (!(v33 & 1))\n
            {\n
                *((v21 + 4)) = v33 | 1;\n
                *((v21 + 8)) = 0;\n
                v34 = v8;\n
                *((v21 + 12)) = *((v34 + v32 * 4));\n
                *((v34 + v32 * 4)) = v21;\n
                v35 = *((v21 + 12));\n
                if (v35)\n
                {\n
                    v35->field_8 = v21;\n
                    goto LABEL_401fef;\n
                }\n
            }\n
        }\n
LABEL_402022:\n
        v6 = v21;\n
        v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        cgc_heap_error(*(&v7));\n
        return cgc_tiny_alloc(v8);\n
    }\n
    v10 = cgc_tiny_alloc();\n
    return v10;\n
}\n
", "4202560:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    struct struct_2 *field_1218;\n
    struct struct_2 *field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // esi\n
    struct_0 *v10;  // edi, Other Possible Types: unsigned int\n
    unsigned short v11[2];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // ebp, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned short *v16;  // ebx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
\n
    v9 = v8;\n
    if (v8 <= 15)\n
    {\n
        v10 = v8 / 4 - 1;\n
    }\n
    else if (v8 <= 0x200)\n
    {\n
        v10 = (v8 >> 4) + 2;\n
    }\n
    else if (v8 <= 0x1200)\n
    {\n
        v10 = (v8 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v8 <= 0x20000)\n
            v10 = (v8 - 0x1200 >> 11) + 66;\n
    }\n
    v13 = *((v12 + v10 * 4));\n
    if (*((v12 + (v10 << 2))))\n
    {\n
        *((v12 + v10 * 4)) = *(v13);\n
        return *((v12 + v10 * 4));\n
    }\n
    v11 = *((v12 + v10 * 4 + 4620));\n
    if (!v11)\n
    {\n
        if (!*((v12 + 4632)))\n
        {\n
            v0 = &v6;\n
            v2 = v12;\n
            v12 = v2;\n
            v14 = 0;\n
            if (!cgc_allocate(0x200000, 0))\n
            {\n
                v1 = *(&v6);\n
                v5 = v1 + 1048575;\n
                v14 = v5 & -0x100000;\n
                v3 = v14;\n
                if (v14 > v1)\n
                {\n
                    cgc_deallocate(v1);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                v4 = v14 + 0x100000;\n
                v15 = v1 + 0x200000;\n
                v1 = v15 - v4;\n
                if (v15 > v4)\n
                {\n
                    cgc_deallocate(v4);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                *((v12 + (v5 >> 20) + 524)) = 1;\n
            }\n
            *((v12 + 4632)) = v14;\n
            if (!v14)\n
                return 0;\n
            *((v12 + 4636)) = 0;\n
        }\n
        v16 = *((v12 + 4632));\n
        v17 = *((v12 + 4636));\n
        v11 = v17 + v16;\n
        *((v12 + v10 * 4 + 4620)) = v11;\n
        *((v17 + v16)) = v9;\n
        *((2 + v17 + v16)) = v9;\n
        v18 = v17 + 0x1000;\n
        *((v12 + 4636)) = v18;\n
        if (v18 == 0x100000)\n
            *((v12 + 4632)) = 0;\n
    }\n
    v19 = *((v11 + 2));\n
    v13 = v19 + v11;\n
    v20 = v9 + v19;\n
    *((v11 + 2)) = v20;\n
    v21 = *(v11);\n
    if (v21 + v20 < 4097)\n
        return v13;\n
    *((v12 + v10 * 4 + 4620)) = 0;\n
}\n
", "4203014:sub_402206": null, "4203024:malloc_free": "int malloc_free(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v7;  // [bp-0x4]\n
    char v8;  // [bp+0x0]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebp\n
    char v12;  // cl\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
\n
    v10 = a0;\n
    if (!v10)\n
        return v10;\n
    v11 = v9;\n
    v12 = *((v9 + (v10 >> 20) + 524));\n
    if (v12 != 2)\n
    {\n
        if (v12 == 1)\n
        {\n
            v13 = (*((v10 & -0x1000)) <= 15 ? (*((v10 & -0x1000)) <= 0x200 ? (*((v10 & -0x1000)) <= 0x1200 ? (*((v10 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v10 & -0x1000)) - 0x200 >> 7) + 34) : (*((v10 & -0x1000)) >> 4) + 2) : *((v10 & -0x1000)) / 4 - 1);\n
            *(v10) = *((v11 + v13 * 4));\n
            *((v11 + v13 * 4)) = v10;\n
            return v10;\n
        }\n
        if (v12)\n
            return v10;\n
        if ((v10 & 4095) != 8)\n
        {\n
            v17 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40257c;\n
        }\n
        else\n
        {\n
            v18 = *((v10 - 8));\n
            if (v18 != v11)\n
            {\n
                v19 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v11;\n
            }\n
            else\n
            {\n
                v18 = *((v10 - 4));\n
                if (v18 - 0x20000 <= 2147356671 && !(v18 & 4095))\n
                {\n
                    v10 = cgc_deallocate(v10 - 8);\n
                    return v10;\n
                }\n
                v19 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v18;\n
            v10 = cgc_heap_error(v19, v10);\n
        }\n
    }\n
    else if (!(v10 & 7))\n
    {\n
        v17 = v10 - 8;\n
        v14 = *((v17 + 4));\n
        if ((v14 & 1))\n
        {\n
            v17 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40257c;\n
        }\n
        else\n
        {\n
            v20 = v14 - 131073;\n
            if (v20 <= -131058)\n
            {\n
                v17 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
                goto LABEL_40257c;\n
            }\n
            else\n
            {\n
                v15 = *(v17);\n
                v16 = v17 - v15;\n
                if (!v15)\n
                    v16 = v15;\n
                if (v16)\n
                {\n
                    v11 = v9;\n
                    if (!((*((v16 + 4)) & -2) == v15))\n
                        goto LABEL_4025a4;\n
                }\n
                v20 = v14 + v17;\n
                if (*(v20) == v14)\n
                {\n
                    if (v16)\n
                    {\n
                        v21 = *((v16 + 4));\n
                        if ((v21 & 1))\n
                        {\n
                            v22 = v21 & -2;\n
                            v3 = v20;\n
                            if ((v21 & -2) <= 15)\n
                            {\n
                                v23 = v21 / 4 - 1;\n
                            }\n
                            else if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else if (v22 <= 0x1200)\n
                            {\n
                                v23 = (v22 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v23 = 130;\n
                                if (v22 <= 0x20000)\n
                                    v23 = (v22 - 0x1200 >> 11) + 66;\n
                            }\n
                            *((v16 + 4)) = v22;\n
                            v24 = *((v16 + 8));\n
                            if (v24)\n
                                *((v24 + 12)) = *((v16 + 12));\n
                            v25 = *((v16 + 12));\n
                            if (v25)\n
                                *((v25 + 8)) = v24;\n
                            if (*((v9 + (v23 << 2))) == v16)\n
                            {\n
                                v2 = v22;\n
                                *((v9 + v23 * 4)) = *((v16 + 12));\n
                                v22 = v2;\n
                            }\n
                            *((v16 + 8)) = 0;\n
                            *((v16 + 12)) = 0;\n
                            v26 = v22 + *((v17 + 4));\n
                            *((v16 + 4)) = v26;\n
                            v20 = v3;\n
                            *(v20) = v26;\n
                            v17 = v16;\n
                            v11 = v9;\n
                        }\n
                    }\n
                    v27 = *((v20 + 4));\n
                    if ((v27 & 1))\n
                    {\n
                        v28 = v27 & -2;\n
                        if (v28 <= 15)\n
                        {\n
                            v29 = v27 / 4 - 1;\n
                        }\n
                        else if (v28 <= 0x200)\n
                        {\n
                            v29 = (v27 >> 4) + 2;\n
                        }\n
                        else if (v28 <= 0x1200)\n
                        {\n
                            v29 = (v28 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v29 = 130;\n
                            if (v28 <= 0x20000)\n
                                v29 = (v28 - 0x1200 >> 11) + 66;\n
                        }\n
                        *((v20 + 4)) = v28;\n
                        v30 = *((v20 + 8));\n
                        if (v30)\n
                            *((v30 + 12)) = *((v20 + 12));\n
                        if (*((v20 + 12)))\n
                            *((*((v20 + 12)) + 8)) = v30;\n
                        v11 = v9;\n
                        if (*((v9 + (v29 << 2))) == v20)\n
                            *((v11 + v29 * 4)) = *((v20 + 12));\n
                        *((v20 + 8)) = 0;\n
                        *((v20 + 12)) = 0;\n
                        v16 = v28 + *((v17 + 4));\n
                        *((v17 + 4)) = v16;\n
                        *((v17 + v16)) = v16;\n
                    }\n
                    v31 = *((v17 + 4));\n
                    if (v31 <= 15)\n
                    {\n
                        v32 = v31 / 4 - 1;\n
                    }\n
                    else if (v31 <= 0x200)\n
                    {\n
                        v32 = (v31 >> 4) + 2;\n
                    }\n
                    else if (v31 <= 0x1200)\n
                    {\n
                        v32 = (v31 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v32 = 130;\n
                        if (v31 <= 0x20000)\n
                            v32 = (v31 - 0x1200 >> 11) + 66;\n
                    }\n
                    if (!(v31 & 1))\n
                    {\n
                        *((v17 + 4)) = v31 | 1;\n
                        *((v17 + 8)) = 0;\n
                        *((v17 + 12)) = *((v11 + v32 * 4));\n
                        *((v11 + v32 * 4)) = v17;\n
                        v10 = *((v17 + 12));\n
                        if (!v10)\n
                            return *((v17 + 12));\n
                        *((v10 + 8)) = v17;\n
                    }\n
                    goto LABEL_402594;\n
                }\n
            }\n
        }\n
    }\n
    v17 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40257c:\n
    v7 = v10;\n
    v6 = v17;\n
    v10 = cgc_heap_error(*(&v8));\n
    v6 = v10;\n
    v5 = v20;\n
    v4 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
LABEL_402594:\n
    v5 = v17;\n
    v4 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v10 = cgc_heap_error(*(&v8));\n
LABEL_4025a4:\n
    v6 = v10;\n
    v5 = v16;\n
    v4 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
    return cgc_malloc_size(v9, a0);\n
}\n
", "4203968:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4204017:sub_4025f1": null, "4204032:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
        return 0;\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4026cf:\n
        malloc_free(v1, a0);\n
        return v3;\n
    }\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc_alloc(v7, v2);\n
        return v3;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4026b2;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4026b2:\n
        return v4;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        return 0;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4026cf;\n
    goto LABEL_4026cf;\n
}\n
", "4204257:sub_4026e1": null, "4204272:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4204336:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4204390:sub_402766": null, "4204400:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4204461:sub_4027ad": null, "4204464:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4204513:sub_4027e1": null, "4204528:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            tmp_4 = v1;\n
            v1 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4204609:sub_402841": null, "4204624:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4204668:sub_40287c": null, "4204672:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // eax\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4204774:sub_4028e6": null, "4204784:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4204882:sub_402952": null, "4204896:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
        v4->field_8 = 0;\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    if (v4->field_8 == -1)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4204994:sub_4029c2": null, "4205008:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 == -1)\n
        v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    if (v2->field_8 == -1)\n
    {\n
        cgc_fflush(v2);\n
        v2->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4205102:sub_402a2e": null, "4205104:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4205152:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4205195:sub_402a8b": null, "4205200:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(unsigned int v16, unsigned int a0)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0x78]\n
    int tmp_2;  // tmp #2\n
    int tmp_25;  // tmp #25\n
    unsigned int v1;  // [bp-0x74]\n
    char v2;  // [bp-0x69]\n
    unsigned int v3;  // [bp-0x68], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x64]\n
    char v5;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x58]\n
    unsigned int v8;  // [bp-0x54]\n
    char v9;  // [bp-0x50]\n
    char v10;  // [bp-0x4f]\n
    char v11;  // [bp-0x3e]\n
    char v12;  // [bp-0x3d]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // al, Other Possible Types: char\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // ebx, Other Possible Types: char\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // cc_op\n
    unsigned int v47;  // cc_dep1\n
    unsigned int v48;  // cc_dep2\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // edi\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // cc_op\n
    unsigned int v53;  // cc_dep1\n
    unsigned int v54;  // cc_dep2\n
    unsigned int v56;  // edx\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ebp\n
    unsigned int v59;  // edi\n
    unsigned int v61;  // edi\n
    unsigned int v62;  // edx\n
    unsigned int v63;  // eax\n
    unsigned int v64;  // ecx\n
    unsigned int v65;  // ebx\n
    unsigned int v66;  // edx\n
    unsigned int v67;  // edi\n
    unsigned int v68;  // ebp\n
    unsigned int v72;  // ebx\n
    unsigned int v73;  // ecx, Other Possible Types: char\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // edx\n
    unsigned int v76;  // ecx\n
    unsigned int v77;  // edx\n
    unsigned int v79;  // eax\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // ebp\n
    unsigned int v83;  // edx\n
    unsigned int v84;  // edx\n
    unsigned int v86;  // ebx\n
    unsigned int v87;  // cc_op\n
    unsigned int v88;  // cc_dep1\n
    unsigned int v89;  // cc_dep2\n
    unsigned int v90;  // cc_op\n
    unsigned int v91;  // cc_dep1\n
    unsigned int v92;  // cc_dep2\n
    unsigned int v93;  // ebp\n
    unsigned int v94;  // edx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // cc_op\n
    unsigned int v99;  // cc_dep1\n
    unsigned int v100;  // cc_dep2\n
    unsigned int v101;  // eax\n
\n
    v15 = v20;\n
    v14 = v21;\n
    v13 = v22;\n
    v6 = v23;\n
    v24 = &_GLOBAL_OFFSET_TABLE_;\n
    v59 = a0;\n
    v26 = v16;\n
    v4 = v25;\n
    v8 = 20 + -0x1 * &v9;\n
    v27 = 0;\n
    v29 = v4;\n
    v4 = v29 + 1;\n
    *(&v29) = *(v29);\n
    if (*(&v29))\n
    {\n
        while (true)\n
        {\n
            if (v29 != 37)\n
            {\n
                if (v27 < 2147483647)\n
                {\n
                    v2 = v29;\n
                    if (v26)\n
                    {\n
                        cgc_fwrite(&v2, 1, v26);\n
                        v26 = v16;\n
                    }\n
                    if (v59)\n
                        *((v59 + v27)) = v2;\n
                }\n
                else if (v27 == -1)\n
                {\n
                    goto LABEL_4030fa;\n
                }\n
                v27 += 1;\n
                v28 = v4;\n
                v4 = v28 + 1;\n
                v29 = *(v28);\n
                if (!v29)\n
                    goto LABEL_402ad0;\n
            }\n
            else\n
            {\n
                v30 = v4;\n
                v4 = *(&v3) + 1;\n
                v31 = *(*(&v3));\n
                if (v31 == 48)\n
                {\n
                    v3 = v30;\n
                    v5 = 48;\n
                    goto LABEL_402b8e;\n
                }\n
                else\n
                {\n
                    v5 = 32;\n
                    if (v31 == 32)\n
                    {\n
                        v3 = *(&v3);\n
LABEL_402b8e:\n
                        v32 = v4;\n
                        v33 = 0;\n
                        if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2))))\n
                            v33 = cgc_strtoul(v32, &v4);\n
                        v34 = v4;\n
                        v4 = v34 + 1;\n
                        v35 = *(v34);\n
                        if (v35 == 108)\n
                        {\n
                            v7 = v33;\n
                            *(&v35) = 1;\n
                            if (*(v4) == 108)\n
                            {\n
                                v4 = v34 + 2;\n
                                v35 = 0;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (v35 == 104)\n
                            {\n
                                *(&v35) = 1;\n
                                v7 = v33;\n
                                if (*(v4) == 104)\n
                                    v4 = v34 + 2;\n
                            }\n
                            else\n
                            {\n
                                if (!v35)\n
                                {\n
                                    v73 = 0;\n
                                    v49 = v16;\n
                                }\n
                                else\n
                                {\n
                                    v7 = v33;\n
                                    v4 = v34;\n
                                    *(&v35) = 1;\n
                                }\n
                            }\n
                        }\n
                        v36 = v4;\n
                        v37 = v36 + 1;\n
                        v4 = v37;\n
                        *(&v32) = *(v36);\n
                        v73 = *(v36);\n
                        v59 = v73 - 88;\n
                        switch (v59)\n
                        {\n
                        case 0: case 12: case 29: case 32:\n
                            if (v32 != 100)\n
                            {\n
                                if (!v35)\n
                                {\n
                                    v73 = 0;\n
                                    v59 = a0;\n
                                    v51 = v16;\n
                                    break;\n
                                }\n
                                else\n
                                {\n
                                    v50 = (v32 == 117 ? 16 : 10);\n
                                    v76 = *(v6);\n
                                    v3 = v24;\n
                                    v65 = v24 - 7607;\n
                                    if (v32 == 88)\n
                                        v65 = v24 - 7624;\n
                                    v12 = 0;\n
                                    v68 = &v12;\n
                                    if (!v76)\n
                                    {\n
                                        v11 = *(v65);\n
                                        v68 = &v11;\n
                                    }\n
                                    else\n
                                    {\n
                                        do\n
                                        {\n
                                            *((v68 - 1)) = *((v65 + ((0 CONCAT v76) /m v50 >> 32)));\n
                                            v68 = &v11;\n
                                            tmp_13 = v76;\n
                                            v76 = (0 CONCAT v76) /m v50;\n
                                        } while (tmp_13 >= v50);\n
                                    }\n
                                    v1 = v8 + v68;\n
                                    v0 = v68;\n
                                    v81 = v3;\n
                                    cgc_memmove(&v9, v0, v1);\n
                                }\n
LABEL_402f5d:\n
                                v73 = v7;\n
                                v3 = cgc_strlen();\n
                                if (v73 <= v3)\n
                                {\n
                                    v94 = v16;\n
                                }\n
                                else\n
                                {\n
                                    v59 = v3 - v73;\n
                                    v94 = v16;\n
                                    do\n
                                    {\n
                                        if (v27 < 2147483647)\n
                                        {\n
                                            v2 = v5;\n
                                            if (v94)\n
                                            {\n
                                                cgc_fwrite(&v2, 1, v94);\n
                                                v94 = v16;\n
                                            }\n
                                            v73 = a0;\n
                                            if (v73)\n
                                                *((v73 + v27)) = v2;\n
                                        }\n
                                        else\n
                                        {\n
                                            if (!(v27 == -1))\n
                                                continue;\n
                                        }\n
                                        tmp_2 = v27;\n
                                        v27 += 1;\n
                                        v59 += 1;\n
                                    } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2)))));\n
                                    goto LABEL_4030fa;\n
                                }\n
                                v6 += 4;\n
                                if (v27 < 2147483647)\n
                                {\n
                                    v95 = 2147483647 - v27;\n
                                    if (v95 > v95)\n
                                        v95 = v3;\n
                                    if (v94)\n
                                    {\n
                                        cgc_fwrite(&v9, v95, v94);\n
                                        v96 = v16;\n
                                    }\n
                                    v79 = a0;\n
                                    if (v79)\n
                                    {\n
                                        cgc_memcpy(a0 + v27, &v9, v95);\n
                                        v79 = a0;\n
                                        v97 = v16;\n
                                    }\n
                                    *(&v73) = 1;\n
                                    v98 = 3;\n
                                    v99 = v27;\n
                                    v100 = v3;\n
                                    v27 += v3;\n
                                }\n
                                else\n
                                {\n
                                    *(&v73) = 1;\n
                                    tmp_2 = v27;\n
                                    v27 += v3;\n
                                    v59 = a0;\n
                                    if ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t2, Load(addr=stack_base-104, size=4, endness=Iend_LE), 0x0<32>))\n
                                        goto LABEL_4030fa;\n
                                    break;\n
                                }\n
LABEL_40306d:\n
                                v59 = v79;\n
                                if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                    goto LABEL_4030fa;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v59 = a0;\n
                                if (v35)\n
                                {\n
                                    v64 = *(v6);\n
                                    if (v64 >= 0)\n
                                    {\n
                                        v63 = &v9;\n
                                    }\n
                                    else\n
                                    {\n
                                        v9 = 45;\n
                                        v64 = -(v64);\n
                                        v63 = &v10;\n
                                    }\n
                                    *((v63 + 19)) = 0;\n
                                    v3 = v63;\n
                                    if (!v64)\n
                                    {\n
                                        v67 = v63 + 18;\n
                                        *((v63 + 18)) = 48;\n
                                    }\n
                                    else\n
                                    {\n
                                        v67 = v63 + 19;\n
                                        do\n
                                        {\n
                                            v75 = v64 * 3435973837 >> 32 >> 3;\n
                                            *((v67 - 1)) = *((v24 + v64 - v75 * 2 * 5 - 7607));\n
                                            v67 -= 1;\n
                                            tmp_25 = v64;\n
                                            v64 = v75;\n
                                        } while (tmp_25 > 9);\n
                                    }\n
                                    v80 = v3;\n
                                    cgc_memmove(v80, v67, v67 - v80 + 20);\n
                                    goto LABEL_402f5d;\n
                                }\n
                            }\n
                        case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_402cf6:\n
                            v73 = v3;\n
                            v72 = v37 - v73;\n
                            if (v27 >= 2147483647)\n
                            {\n
                                v45 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v46 = 6;\n
                                v47 = v45;\n
                                v48 = v27;\n
                                v27 = v45;\n
                                goto LABEL_402d71;\n
                            }\n
                            else\n
                            {\n
                                v61 = 2147483647 - v27;\n
                                if (v61 > v72)\n
                                    v61 = v72;\n
                                v62 = v16;\n
                                v5 = v72;\n
                                if (v62)\n
                                {\n
                                    v3 = v73;\n
                                    cgc_fwrite(v73, v61, v62);\n
                                    v72 = v5;\n
                                    v73 = v3;\n
                                    v74 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v73, v61);\n
                                    v79 = a0;\n
                                    v72 = v5;\n
                                    v83 = v16;\n
                                }\n
                                v86 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v87 = 6;\n
                                v88 = v86;\n
                                v89 = v27;\n
                                v27 = v86;\n
                                goto LABEL_40306d;\n
                            }\n
                        case 11:\n
                            v38 = v6;\n
                            v59 = v38 + 4;\n
                            if (v27 < 2147483647)\n
                            {\n
                                v2 = *(v38);\n
                                v43 = v16;\n
                                if (v43)\n
                                {\n
                                    cgc_fwrite(&v2, 1, v43);\n
                                    v56 = v16;\n
                                }\n
                                if (v59)\n
                                    *((v59 + v27)) = v2;\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            v42 = v16;\n
                            if (v27 != -1)\n
                            {\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            goto LABEL_4030fa;\n
                        case 27:\n
                            v39 = v6;\n
                            v40 = *(v39);\n
                            v6 = v39 + 4;\n
                            v41 = cgc_strlen();\n
                            if (v27 >= 2147483647)\n
                            {\n
                                *(&v73) = 1;\n
                                v52 = 3;\n
                                v53 = v27;\n
                                v54 = v41;\n
                                v27 += v41;\n
                            }\n
                            else\n
                            {\n
                                v58 = 2147483647 - v27;\n
                                v5 = v41;\n
                                if (2147483647 - v27 > v41)\n
                                    v58 = v41;\n
                                v66 = v16;\n
                                if (v66)\n
                                {\n
                                    cgc_fwrite(v40, v58, v66);\n
                                    v77 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v40, v58);\n
                                    v79 = a0;\n
                                    v84 = v16;\n
                                }\n
                                *(&v73) = 1;\n
                                v90 = 3;\n
                                v91 = v27;\n
                                v92 = v5;\n
                                v27 += v5;\n
                                v93 = v24;\n
                                goto LABEL_40306d;\n
                            }\n
LABEL_402d71:\n
                            v59 = a0;\n
                            v57 = v16;\n
                            if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                goto LABEL_4030fa;\n
                            break;\n
                        default:\n
                            if (!v73)\n
                                goto LABEL_0x402ccf;\n
                            else\n
                                goto LABEL_402cf6;\n
                        }\n
                    }\n
                    else if (v31)\n
                    {\n
                        v3 = *(&v3);\n
                        v4 = *(&v3);\n
                        goto LABEL_402b8e;\n
                    }\n
                }\n
LABEL_402ad0:\n
                v73 = 0;\n
            }\n
        }\n
    }\n
    if (v27 >= 2147483647)\n
    {\n
        if (!(v27 == -1))\n
            goto LABEL_40310e;\n
LABEL_4030fa:\n
        cgc__terminate();\n
    }\n
    if (v59)\n
        *((v59 + v27)) = 0;\n
LABEL_40310e:\n
    v101 = v27;\n
    return v101;\n
}\n
", "4205254:sub_402ac6": null, "4205388:sub_402b4c": null, "4206465:sub_402f81": null, "4206872:sub_403118": null, "4206880:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4206924:sub_40314c": null, "4206928:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // al\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v0[0];\n
    if (!v0[0])\n
        return v0[0] - *(a0);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4207040:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4207129:sub_403219": null, "4207136:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4207204:sub_403264": null, "4207216:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4207280:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4207332:sub_4032e4": null, "4207344:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4207428:sub_403344": null, "4207440:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4207472:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4207600:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // esi\n
    char *v3;  // eax\n
    unsigned int v4;  // edi\n
    char *v5;  // edx, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    unsigned int v7;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v6 = v2[0];\n
    v5 = v3;\n
    if (v2[0])\n
    {\n
        v5 = v3;\n
        if (v1)\n
        {\n
            v4 = 1;\n
            v5 = v3;\n
            while (true)\n
            {\n
                *(v5) = v6;\n
                v5 += 1;\n
                v6 = v2[v4];\n
                if (!v6)\n
                    break;\n
                v4 += 1;\n
                if (1 >= v1)\n
                    break;\n
            }\n
        }\n
    }\n
    v7 = v5 - v3;\n
    if (v7 < v1)\n
    {\n
        do\n
        {\n
            *(v5) = 0;\n
            v5 += 1;\n
            v7 += 1;\n
        } while (v7 < v1);\n
    }\n
    return v0;\n
}\n
", "4207698:sub_403452": null, "4207712:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (!v4)\n
        return 0;\n
    cgc_memcpy(v4, v0, v3);\n
    v3[v4] = 0;\n
    return v4;\n
}\n
", "4207805:sub_4034bd": null, "4207808:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // al, Other Possible Types: char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a0, v2);\n
            if (v3)\n
                break;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v5 = &v1[v4 + 1];\n
    if (!v1[v4])\n
        v5 = 0;\n
    *(v0) = v5;\n
    v1[v4] = 0;\n
    return *(v0);\n
}\n
", "4207928:sub_403538": null, "4207936:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(v1, a0))\n
        {\n
            tmp_7 = *((v1 + 1));\n
            v1 += 1;\n
            if (!tmp_7)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v1;\n
        }\n
    }\n
}\n
", "4208024:sub_403598": null, "4208032:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int *v10;  // esi, Other Possible Types: unsigned int\n
    char v11[2];  // edi\n
    char v12;  // al\n
    char v13[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // al, Other Possible Types: char\n
    unsigned int v25;  // edi\n
    char v26[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = a0;\n
    v11 = v6;\n
    v13 = v11;\n
    if (cgc_isspace(v11[0]))\n
    {\n
        v13 = v11;\n
        do\n
        {\n
            if (!*(v13))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v17 = 1;\n
                v18 = 0;\n
                if (!v10)\n
                    goto LABEL_40377c;\n
            }\n
            v12 = *((v13 + 1));\n
            v13 += 1;\n
        } while (cgc_isspace(v12));\n
    }\n
    v14 = a1;\n
    if (*(v13) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v13) == 43)\n
            v13 += 1;\n
        if (!v14)\n
            goto LABEL_403663;\n
    }\n
    else\n
    {\n
        v13 += 1;\n
        v0 = -1;\n
        if (!v14)\n
        {\n
LABEL_403663:\n
            if (*(v13) == 48)\n
            {\n
                if ((*((v13 + 1)) & 248) == 48)\n
                {\n
                    v13 += 1;\n
                    v14 = 8;\n
                    goto LABEL_4036b7;\n
                }\n
                if (cgc_tolower(*((v13 + 1))) == 120)\n
                {\n
                    v13 += 2;\n
                    v14 = 16;\n
                    goto LABEL_4036b7;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v13)))\n
            {\n
                v15 = 0;\n
                v17 = 1;\n
                v18 = 0;\n
                v10 = a0;\n
                v16 = v0;\n
                if (!v10)\n
                    goto LABEL_40377c;\n
                tmp_2 = v17;\n
                v26 = v6;\n
                if (!tmp_2)\n
                    v26 = v13;\n
                *(v10) = v26;\n
                goto LABEL_40377c;\n
            }\n
LABEL_4036b7:\n
            v1 = 0;\n
            v2 = 1;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = *(v13);\n
                if (!v19)\n
                    break;\n
                v20 = *(v13);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v13);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (!cgc_isupper(v23))\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_4036d0;\n
                    }\n
                    else\n
                    {\n
                        v21 = *(v13) - 55;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v14)\n
                {\n
                    v25 = v14 * v18;\n
                    tmp_5 = v25;\n
                    v18 = v25 + v21;\n
                    v24 = v1;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v1 = v24;\n
                    v13 += 1;\n
                    *(&v24) = 1;\n
                    v2 = 0;\n
                }\n
LABEL_4036d0:\n
                if (!v24)\n
                    break;\n
            }\n
            v10 = a0;\n
            v16 = v0;\n
            v15 = v1;\n
            v17 = v2;\n
            if (!v10)\n
                goto LABEL_40377c;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v13) == 48)\n
        {\n
            v13 += (cgc_tolower(*((v13 + 1))) == 120) * 2;\n
            goto LABEL_4036b7;\n
        }\n
    }\n
LABEL_40377c:\n
    v27 = (!v15 ? 0x80000000 : -(v18));\n
    v28 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v18);\n
    if (v16 < 0)\n
        v28 = v27;\n
    return v28;\n
}\n
", "4208373:sub_4036f5": null, "4208566:sub_4037b6": null, "4208576:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    int tmp_38;  // tmp #38\n
    int tmp_41;  // tmp #41\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    unsigned int v14;  // edi\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    void* v17;  // edi\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    char v19[2];  // ebp, Other Possible Types: unsigned int\n
    void* v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v25;  // ecx\n
    char v26;  // dl, Other Possible Types: unsigned int\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // ebx\n
    unsigned int v36;  // edi\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v38;  // ebx\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // cc_dep2\n
    unsigned int v42;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v19 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v19 = v12;\n
        do\n
        {\n
            if (!*(v19))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v0 = 1;\n
                v1 = 0;\n
                v17 = 0;\n
                v18 = a0;\n
                if (!v18)\n
                    goto LABEL_4039f2;\n
            }\n
            v13 = *((v19 + 1));\n
            v19 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = a1;\n
    if (*(v19) != 45)\n
    {\n
        v2 = 1;\n
        if (*(v19) == 43)\n
            v19 += 1;\n
        if (!v14)\n
            goto LABEL_40389d;\n
    }\n
    else\n
    {\n
        v19 += 1;\n
        v2 = -1;\n
        if (!v14)\n
        {\n
LABEL_40389d:\n
            if (*(v19) == 48)\n
            {\n
                if ((*((v19 + 1)) & 248) == 48)\n
                {\n
                    v19 += 1;\n
                    v14 = 8;\n
                    goto LABEL_4038f5;\n
                }\n
                if (cgc_tolower(*((v19 + 1))) == 120)\n
                {\n
                    v19 += 2;\n
                    v14 = 16;\n
                    goto LABEL_4038f5;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v19)))\n
            {\n
                v15 = 0;\n
                v0 = 1;\n
                v1 = 0;\n
                v20 = 0;\n
                v18 = a0;\n
                v16 = v2;\n
                if (!v18)\n
                    goto LABEL_4039f2;\n
                v37 = v8;\n
                if (!v0)\n
                    v37 = v19;\n
                *(v18) = v37;\n
                goto LABEL_4039f2;\n
            }\n
LABEL_4038f5:\n
            v15 = 0;\n
            v0 = 1;\n
            v1 = 0;\n
            v3 = 0;\n
            while (true)\n
            {\n
                v21 = *(v19);\n
                if (!v21)\n
                    break;\n
                v22 = *(v19);\n
                if (cgc_isdigit(v21))\n
                {\n
                    v23 = v22 - 48;\n
                }\n
                else\n
                {\n
                    v25 = *(v19);\n
                    if (cgc_islower(v22))\n
                    {\n
                        v23 = v25 - 87;\n
                    }\n
                    else if (!cgc_isupper(v25))\n
                    {\n
                        v26 = 0;\n
                        goto LABEL_403920;\n
                    }\n
                    else\n
                    {\n
                        v23 = *(v19) - 55;\n
                    }\n
                }\n
                v26 = 0;\n
                if (v23 < v14)\n
                {\n
                    v0 = v15;\n
                    v27 = v14;\n
                    v28 = v14 >> 31;\n
                    v29 = v1;\n
                    v32 = v29 * v27;\n
                    v33 = v27 * v3 + v29 * v28 + (v29 * v27 >> 32);\n
                    v14 = v27;\n
                    v15 = v0;\n
                    v26 = v23 >> 31;\n
                    tmp_38 = v32;\n
                    v34 = v32 + v23;\n
                    tmp_41 = v33;\n
                    v35 = v33 + v26 + (tmp_38 + v23 < tmp_38);\n
                    v3 = v35;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((t38 + ecx<4>) < t38))), Conv(1->32, ((t38 + ecx<4>) < t38))))\n
                        v15 = 1;\n
                    v19 += 1;\n
                    *(&v26) = 1;\n
                    v0 = 0;\n
                    v1 = v34;\n
                }\n
LABEL_403920:\n
                if (!v26)\n
                    break;\n
            }\n
            v18 = a0;\n
            v16 = v2;\n
            v36 = v3;\n
            if (!v18)\n
                goto LABEL_4039f2;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v19) == 48)\n
        {\n
            v19 += (cgc_tolower(*((v19 + 1))) == 120) * 2;\n
            goto LABEL_4038f5;\n
        }\n
    }\n
LABEL_4039f2:\n
    v38 = v1;\n
    v39 = -(v38);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v39 = v38;\n
    v40 = -(0 < v15) | v39;\n
    v41 = v38 < 2147483649;\n
    v42 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v40);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v42 = v40;\n
    return v42;\n
}\n
", "4208973:sub_40394d": null, "4209221:sub_403a45": null, "4209232:main": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned int cgc_stdin;\n
\n
int main()\n
{\n
    char *v0;  // [bp-0x8a74], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8a70], Other Possible Types: unsigned int\n
    struct_1 *v2;  // [bp-0x8a6c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x8a68], Other Possible Types: unsigned int\n
    struct struct_0 **v4;  // [bp-0x8a64]\n
    char *v5;  // [bp-0x8a60]\n
    char v6;  // [bp-0x8a5c]\n
    char v7;  // [bp-0x895c]\n
    char v8;  // [bp-0x8958]\n
    char v9;  // [bp-0x88dc]\n
    char v10;  // [bp-0x88db]\n
    char v11;  // [bp-0x88da]\n
    char v12;  // [bp-0x88d9]\n
    char v13;  // [bp-0x88d7]\n
    char v14;  // [bp-0x88d6]\n
    char v15;  // [bp-0x88d5]\n
    char v16;  // [bp-0x88d4]\n
    char v17;  // [bp-0x88d3]\n
    struct struct_0 **v18;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_0 **v19;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v20;  // [bp-0x1c]\n
    unsigned int v21;  // [bp-0x18]\n
    struct struct_0 **v23;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v24;  // eax\n
    struct struct_0 **v25;  // esi\n
    char *v26;  // edi, Other Possible Types: unsigned int\n
    char *v27;  // eax\n
    char *v28;  // eax, Other Possible Types: unsigned int\n
    unsigned int v29;  // edx\n
    char *v30;  // edi\n
    unsigned int v31;  // edx\n
    char *v32;  // esi, Other Possible Types: unsigned int\n
    unsigned int v33;  // edi\n
    char *v34;  // ebp, Other Possible Types: unsigned int, void*\n
    unsigned int v35;  // eax\n
    struct_1 *v36;  // eax\n
    void* v37;  // edi, Other Possible Types: unsigned int\n
    unsigned int v38;  // edx\n
    struct struct_0 **v39;  // eax\n
    unsigned int v40;  // edx\n
    struct struct_0 **v41;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v42;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v44;  // edi\n
    unsigned int v45;  // esi\n
    struct struct_0 **v46;  // eax\n
    char v47;  // dl\n
    unsigned int v48;  // edx\n
    struct struct_2 **v49;  // eax\n
    struct struct_0 **v50;  // edi\n
    struct struct_0 **v51;  // ebp\n
    struct struct_0 **v52;  // edx, Other Possible Types: unsigned int\n
    unsigned int v53;  // ebp\n
    struct struct_0 **v54;  // ecx, Other Possible Types: unsigned int, char\n
    unsigned int v55;  // eax\n
    unsigned int v56;  // ebp\n
    unsigned int v57;  // edi\n
    unsigned int v59;  // eax\n
    unsigned int v60;  // eax\n
\n
    cgc_memset(&v7, 0, 35148);\n
    v23 = 0;\n
    v2 = 0;\n
    do\n
    {\n
        v24 = v23 - 1;\n
        v54 = 0x4347c000 + v23;\n
        do\n
        {\n
            v1 = v24;\n
            v25 = v54;\n
            v4 = 0x4347c000 + v23;\n
            v26 = 8;\n
            if (cgc_strlen(v4) <= 7)\n
                v26 = cgc_strlen(v4);\n
            v0 = 0;\n
            if (v26)\n
            {\n
                v5 = v26 + 1;\n
                v27 = cgc_malloc(v5);\n
                if (v27)\n
                {\n
                    v0 = v27;\n
                    cgc_memcpy(v27, v4, v26);\n
                    v3[v26] = 0;\n
                    v28 = v5;\n
                    if (*((v23 + 0x4347c000 + v26)))\n
                        v28 = v26;\n
                    v3 = v0;\n
                    v0 = v28;\n
                }\n
            }\n
            v23 += 1;\n
            v29 = v1;\n
            v24 = v29 + 1;\n
            v54 += 1;\n
            v30 = v0;\n
        } while (!v30);\n
        *(&(&v7)[8 * v2]) = v3;\n
        v31 = &v30[v29];\n
        v32 = v25 + v30;\n
        do\n
        {\n
            v1 = v31;\n
            v33 = 8;\n
            if (cgc_strlen(v32) <= 7)\n
                v33 = cgc_strlen(v32);\n
            v34 = 0;\n
            if (v33)\n
            {\n
                v0 = v33 + 1;\n
                v35 = cgc_malloc(v0);\n
                if (v35)\n
                {\n
                    cgc_memcpy(v35, v32, v33);\n
                    *((v35 + v33)) = 0;\n
                    v34 = v0;\n
                    if (*((v32 + v33)))\n
                        v34 = v33;\n
                    v3 = v35;\n
                }\n
            }\n
            v31 = v1 + 1;\n
            v32 += 1;\n
        } while (!v34);\n
        v23 = v34 + v31;\n
        v36 = v2;\n
        *((&v8 + 0x8 * v36)) = v3;\n
        v2 = v36 + 1;\n
    } while (v2 != 16);\n
    v1 = cgc_stdin;\n
    do\n
    {\n
        v18 = 0;\n
        v19 = 0;\n
        v37 = 0;\n
        if (cgc_fread(&v9, 8, v1) == 8)\n
        {\n
            v38 = v18;\n
            v39 = v19 + 2;\n
            v19 = v39;\n
            v54 = v38 + 4;\n
            if (v54 <= v39)\n
            {\n
                v18 = v38 + 1;\n
                v18 = v38 + 2;\n
                v18 = v38 + 3;\n
                v18 = v54;\n
                v23 = (&v12)[v38] | ((&v11)[v38] | (&v10)[v38] * 0x100 | (&v9)[v38] * 0x10000) * 0x100;\n
            }\n
            v37 = 0;\n
            if (!(v54 <= v39))\n
                goto LABEL_403da0;\n
            v40 = v18;\n
            v54 = v40 + 1;\n
            v37 = 0;\n
            v41 = 0;\n
            if (v54 <= v39)\n
            {\n
                v18 = v54;\n
                v41 = (&v9)[v40];\n
            }\n
            if (!(v54 <= v39))\n
                goto LABEL_403da0;\n
            if (!v23)\n
                goto LABEL_403da0;\n
            if (v23 <= v41)\n
                goto LABEL_403da0;\n
            if (v23 >= 5)\n
            {\n
                v54 = v23 - 4;\n
                v42 = v23 + 3 & -8;\n
                if (!(v54 & 7))\n
                    v42 = v54;\n
                if (!(v42 <= 35000))\n
                    goto LABEL_403da0;\n
                v54 = v39 + v42;\n
                if (!(v54 <= 35000))\n
                    goto LABEL_403da0;\n
                if (!(cgc_fread(&v9 + v39, v42, v1) == v42))\n
                    goto LABEL_403da0;\n
                v19 += v42;\n
                if (!v42)\n
                    goto LABEL_403da0;\n
            }\n
            v19 -= v41;\n
            v37 = v19 - v18;\n
        }\n
LABEL_403da0:\n
        *(&v54) = 1;\n
        if (!v37)\n
            continue;\n
        v44 = v20;\n
        v20 = v44 + 1;\n
        v45 = v18;\n
        v46 = v19;\n
        if (v18 <= v46)\n
        {\n
            v18 = v45 + 1;\n
            *(&v0) = (&v9)[v45];\n
            *(&v54) = 1;\n
        }\n
        if (!(v18 <= v46))\n
            continue;\n
        v47 = v0;\n
        if (v47 == 100)\n
            continue;\n
        if (v47 != 103)\n
        {\n
            if (v47 != 101)\n
            {\n
                if (!v21)\n
                {\n
                    v13 = 102;\n
                    v19 = 6;\n
                    v14 = v44 / 0x1000000;\n
                    v15 = v44 / 0x10000;\n
                    v16 = v54;\n
                    v18 = 10;\n
                    v17 = v44;\n
                    v19 = 10;\n
                    cgc_send_packet();\n
                }\n
                else\n
                {\n
                    if (!v49(&v7))\n
                        goto LABEL_403f1f;\n
                    goto LABEL_403c3a;\n
                }\n
            }\n
            goto LABEL_403c3a;\n
        }\n
        v48 = v18;\n
        v54 = v48 + 4;\n
        if (v54 <= v46)\n
        {\n
            v18 = v48 + 1;\n
            v18 = v48 + 2;\n
            v50 = (&v10)[v48] * 0x100 | (&v9)[v48] * 0x10000;\n
            v18 = v48 + 3;\n
            v51 = ((&v11)[v48] | v50) * 0x100;\n
            v18 = v54;\n
            v45 = (&v12)[v48] | ((&v11)[v48] | v50) * 0x100;\n
        }\n
        if (v54 > v46)\n
        {\n
LABEL_403f17:\n
            if (!0)\n
                goto LABEL_403f1f;\n
            goto LABEL_403c3a;\n
        }\n
        else\n
        {\n
            if (v45 - 0x100 < -257)\n
                goto LABEL_403f17;\n
            v54 = v18;\n
            if (!(v54 + v45 <= v46))\n
                goto LABEL_403f17;\n
            v52 = 35000 + -0x1 * v54;\n
            if (v45 + v54 < 35001)\n
                v52 = v45;\n
            v53 = v52;\n
            cgc_memcpy(&v6, &v9 + v54, v52);\n
            v18 += v53;\n
            (&v6)[v45] = 0;\n
            if (!(!cgc_strcmp(&v6, \"userauth\")))\n
                goto LABEL_403f17;\n
            v21 = cgc_userauth_handler;\n
            v18 = 6;\n
            v13 = 104;\n
            v19 = 6;\n
            v55 = cgc_strlen(\"userauth\");\n
            if (&v19[1073733074] + 3 >= -35001)\n
            {\n
                v56 = v18;\n
                v57 = v55;\n
                v18 = v18 + 1;\n
                (&v9)[v56] = v55 / 0x1000000;\n
                v54 = v18;\n
                v18 = v54 + 1;\n
                (&v9)[v54] = v55 / 0x10000;\n
                v59 = v18;\n
                v18 = v59 + 1;\n
                (&v9)[v59] = v18;\n
                v60 = v18;\n
                v18 = v60 + 1;\n
                (&v9)[v60] = v57;\n
                if (v19 > v19)\n
                    v19 = v18;\n
                if (v19 + v57 <= 35000)\n
                {\n
                    cgc_memcpy(&(&v9)[v19], \"userauth\", v57);\n
                    v18 = v18 + v57;\n
                    if (v18 > v19)\n
                        v19 = v18;\n
                }\n
            }\n
            if (!cgc_send_packet())\n
            {\n
LABEL_403f1f:\n
                *(&v54) = 1;\n
            }\n
            else\n
            {\n
LABEL_403c3a:\n
                v54 = 0;\n
                continue;\n
            }\n
        }\n
    } while (!v54);\n
    v18 = 6;\n
    v13 = 100;\n
    v19 = 6;\n
    cgc_send_packet();\n
    return 0;\n
}\n
", "4209292:sub_403a8c": null, "4209341:sub_403abd": null, "4209526:sub_403b76": null, "4209557:sub_403b95": null, "4210932:sub_4040f4": null, "4210944:cgc_userauth_handler": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[129];\n
    char field_85;\n
    char field_86;\n
    char field_87;\n
    char field_88;\n
    char field_89;\n
    char padding_8a[34990];\n
    unsigned int field_8938;\n
    unsigned int field_893c;\n
    unsigned int field_8940;\n
    char padding_8944[4];\n
    char field_8948;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
extern char g_4053b4;\n
\n
int cgc_userauth_handler(struct_0 *v7, char a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: char, unsigned int\n
    void* v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18]\n
    void* v6;  // [bp-0x14]\n
    struct_0 *v8;  // esi\n
    char v9;  // al\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v15;  // edi, Other Possible Types: unsigned int\n
    unsigned int v16;  // eax\n
    struct_1 *v17;  // esi\n
    unsigned int v18;  // eax\n
    struct_0 *v19;  // esi\n
    char *v20;  // ecx\n
    char *v21;  // ebp\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // ebp\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // edx\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // eax\n
\n
    v8 = v7;\n
    v4 = 0;\n
    v6 = 0;\n
    v3 = 0;\n
    if (a0 != 110)\n
    {\n
        v8->field_85 = 102;\n
        v8->field_893c = 6;\n
        v9 = v8->field_8940 - 1;\n
        v8->field_86 = v9 / 0x1000000;\n
        v8->field_87 = v9 / 0x10000;\n
        *(&v8->field_88) = ah<1>;\n
        v8->field_8938 = 10;\n
        v8->field_89 = v9;\n
        v8->field_893c = 10;\n
        v10 = cgc_send_packet();\n
        return v10;\n
    }\n
    v10 = 0;\n
    if (cgc_get_string_alloc() && cgc_get_string_alloc() && cgc_get_string_alloc())\n
    {\n
        if (cgc_strcmp(v3, &g_4053b4))\n
        {\n
            v10 = cgc_send_userauth_failure();\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            v2 = 0;\n
            v11 = v8->field_8938;\n
            v12 = v8->field_893c;\n
            v13 = v11 + 1;\n
            if (v13 <= v12)\n
            {\n
                v8->field_8938 = v13;\n
                v1 = v8->padding_4[124 + v11];\n
            }\n
            v10 = 0;\n
            if (v13 <= v12)\n
            {\n
                v10 = 0;\n
                if (cgc_get_string_alloc())\n
                {\n
                    if (v1 && !cgc_get_string_alloc())\n
                        goto LABEL_404482;\n
                    v1 = v4;\n
                    v14 = 0;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = v7;\n
                        v17 = v16 + v14;\n
                        v18 = *((v16 + v14));\n
                        if (!cgc_strcmp(v1, *((v16 + v14))))\n
                            v15 = v17;\n
                        v14 += 8;\n
                    } while (v14 != 128);\n
                    v19 = v7;\n
                    v0 = v1;\n
                    cgc_fprintf(cgc_stderr, \"Found user %x (username=%s)\\n
\");\n
                    v20 = (!v15 ? *((v15 + 4)) : \"fakepassword\");\n
                    *(&v18) = v15 & !cgc_strcmp(v5, v20);\n
                    if (*(&v18) == 1)\n
                    {\n
                        v21 = v2;\n
                        if (v2)\n
                        {\n
                            if (cgc_strlen(v21) > 7)\n
                            {\n
                                cgc_free(*((v15 + 4)));\n
                                *((v15 + 4)) = v21;\n
                                v2 = 0;\n
                                goto LABEL_404457;\n
                            }\n
                            else\n
                            {\n
                                v19->field_8938 = 6;\n
                                v19->field_85 = 120;\n
                                v19->field_893c = 6;\n
                                v23 = cgc_strlen(\"Too short\");\n
                                if (-34997 + v19->field_893c >= -35001)\n
                                {\n
                                    v1 = \"Too short\";\n
                                    v24 = v19->field_8938;\n
                                    v25 = v23;\n
                                    v19->field_8938 = v24 + 1;\n
                                    v19->padding_4[124 + v24] = v23 / 0x1000000;\n
                                    v27 = v19->field_8938;\n
                                    v28 = v27 + 1;\n
                                    v19->field_8938 = v28;\n
                                    v19->padding_4[124 + v27] = v23 / 0x10000;\n
                                    v29 = v19->field_8938;\n
                                    v19->field_8938 = v29 + 1;\n
                                    v19->padding_4[124 + v29] = v28;\n
                                    v30 = v19->field_8938;\n
                                    v19->field_8938 = v30 + 1;\n
                                    v19->padding_4[124 + v30] = v25;\n
                                    v31 = v19->field_8938;\n
                                    if (v31 > v19->field_893c)\n
                                        v19->field_893c = v31;\n
                                    if (v19->field_893c + v25 <= 35000)\n
                                    {\n
                                        cgc_memcpy(&v19->padding_4[124 + v31], v1, v25);\n
                                        v32 = v19->field_8938 + v25;\n
                                        v19->field_8938 = v32;\n
                                        if (v32 > v19->field_893c)\n
                                            v19->field_893c = v32;\n
                                    }\n
                                }\n
                                v22 = cgc_send_packet();\n
                                goto LABEL_40443d;\n
                            }\n
                        }\n
                    }\n
                    if (!*(&v18))\n
                    {\n
                        v22 = cgc_send_userauth_failure();\n
LABEL_40443d:\n
                        v10 = v22;\n
                        goto LABEL_404482;\n
                    }\n
LABEL_404457:\n
                    v19->field_8938 = 6;\n
                    v19->field_85 = 112;\n
                    v19->field_893c = 6;\n
                    v10 = cgc_send_packet();\n
                    v19->field_8948 = 1;\n
                }\n
LABEL_404482:\n
                cgc_free(v5);\n
                cgc_free(v2);\n
            }\n
        }\n
    }\n
    cgc_free(v4);\n
    cgc_free(v6);\n
    cgc_free(v3);\n
    return v10;\n
}\n
", "4211912:sub_4044c8": null, "4211920:cgc_get_string_alloc": "int cgc_get_string_alloc()\n
{\n
    char *v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int *v2;  // [bp-0x14]\n
    unsigned int *v4;  // edx\n
    unsigned int v5[8784];  // ecx\n
    unsigned int v6[8784];  // edi\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // esi\n
    char *v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ebp\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ebp\n
\n
    v2 = v4;\n
    v6 = v5;\n
    v7 = v5[8782];\n
    v8 = v5[8783];\n
    v9 = v7 + 4;\n
    if (v9 <= v8)\n
    {\n
        v6[8782] = v7 + 1;\n
        v10 = *(128 + &v6[0] + v7);\n
        v6[8782] = v7 + 2;\n
        v11 = *(129 + &v6[0] + v7) * 0x100 | v10 * 0x10000;\n
        v6[8782] = v7 + 3;\n
        v12 = (*(130 + &v6[0] + v7) | v11) * 0x100;\n
        v6[8782] = v9;\n
        v16 = *(131 + &v6[0] + v7) | v12;\n
    }\n
    if (v9 > v8)\n
    {\n
        return 0;\n
    }\n
    else if (v6[8782] + v16 > v8)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v0 = v16;\n
        v14 = cgc_malloc(v0 + 1);\n
        if (!v14)\n
            return 0;\n
        v1 = v14;\n
        v15 = v6[8782];\n
        if (&v0[v15] >= 35001)\n
            v16 = 35000 - v15;\n
        v18 = v16;\n
        v19 = v1;\n
        cgc_memcpy(v1, 128 + v15 + v6, v18);\n
        v6[8782] = v6[8782] + v18;\n
        v0[v19] = 0;\n
        *(v2) = v19;\n
        return 1;\n
    }\n
}\n
", "4212181:sub_4045d5": null, "4212192:cgc_send_userauth_failure": "typedef struct struct_0 {\n
    char padding_0[133];\n
    char field_85;\n
    unsigned int field_86;\n
    char padding_8a[34990];\n
    unsigned int field_8938;\n
    unsigned int field_893c;\n
} struct_0;\n
\n
int cgc_send_userauth_failure()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ecx\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v0 = v2;\n
    v3->field_85 = 111;\n
    v3->field_8938 = 6;\n
    *(&(&v3->field_85)[1]) = 0x8000000;\n
    *(&v3->padding_8a[34988]) = 10;\n
    v3->field_8938 = 10;\n
    if (-34993 + v3->field_8938 >= -35001)\n
    {\n
        cgc_memcpy(&v3->field_86 + 2, \"password\", 8);\n
        v4 = *(&v3->padding_8a[34988]) + 8;\n
        *(&v3->padding_8a[34988]) = v4;\n
        if (v4 > v3->field_8938)\n
            v3->field_8938 = v4;\n
    }\n
    if (-35000 + v3->field_8938 >= -35001)\n
    {\n
        v5 = *(&v3->padding_8a[34988]);\n
        *(&v3->padding_8a[34988]) = v5 + 1;\n
        v3->padding_0[128 + v5] = 0;\n
        v6 = *(&v3->padding_8a[34988]);\n
        if (v6 > v3->field_8938)\n
            v3->field_8938 = v6;\n
    }\n
    return cgc_send_packet();\n
}\n
", "4212410:sub_4046ba": null, "4212416:cgc_send_packet": "typedef struct struct_0 {\n
    char padding_0[128];\n
    char field_80;\n
    char field_81;\n
    char field_82;\n
    char field_83;\n
    char padding_84[34996];\n
    unsigned int field_8938;\n
    unsigned int field_893c;\n
} struct_0;\n
\n
extern void* cgc_stdout;\n
\n
int cgc_send_packet()\n
{\n
    char v0;  // [bp-0x11]\n
    struct_0 *v2;  // ecx\n
    struct_0 *v3;  // esi\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    char v7;  // al\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v3 = v2;\n
    v4 = v2->field_893c;\n
    if (v4 > 0x8000)\n
        return 0;\n
    v0 = 8 - (v4 & 7);\n
    v5 = 8 - (v4 & 7);\n
    cgc_random(&v3->padding_0[v4 + 128], v5);\n
    v6 = v3->field_893c;\n
    v3->field_893c = v6 + v5;\n
    v3->field_8938 = 0;\n
    if (v6 + v5 - 34997 >= -35001)\n
    {\n
        v7 = v6 + v5 - 4;\n
        v3->field_80 = v7 / 0x1000000;\n
        v3->field_81 = v7 / 0x10000;\n
        *(&v3->field_82) = ah<1>;\n
        v3->field_8938 = 4;\n
        v3->field_83 = v7;\n
        if (v3->field_893c <= 3)\n
            v3->field_893c = 4;\n
    }\n
    if (-35000 + v3->field_893c >= -35001)\n
    {\n
        v8 = v3->field_8938;\n
        v3->field_8938 = v8 + 1;\n
        (&v3->field_80)[v8] = v0;\n
        v9 = v3->field_8938;\n
        if (v9 > v3->field_893c)\n
            v3->field_893c = v9;\n
    }\n
    cgc_fwrite(&v3[122238].padding_84[12668], v3->field_893c, cgc_stdout);\n
    return 1;\n
}\n
", "4212712:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}