{"4202496:_init": "extern struct_0 *g_40c118;\n
\n
int _init()\n
{\n
    if (g_40c118)\n
    {\n
        g_40c118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:strchr": "// attributes: PLT stub\n
char * strchr(char *v0, unsigned int string)\n
{\n
    return ::libc.so.0::strchr(v0, string);\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:sub_4020d0": "int sub_4020d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202710:sub_4020d6": null, "4202720:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202763:sub_40210b": null, "4202764:sub_40210c": "int sub_40210c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202768:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202772:sub_402114": null, "4202784:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 40959;\n
    v6 = v5 + 14;\n
    v7 = v5 + 14;\n
    if (v7 == v6)\n
        return v5 + 14;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202835:sub_402153": "int sub_402153()\n
{\n
}\n
", "4202841:sub_402159": "int sub_402159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202848:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 40895;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 14;\n
    v9 = (v6 + 14 - (v6 + 14) >> 31) + (14 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202919:sub_4021a7": "int sub_4021a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202928:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40c114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40c114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020d0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203003:sub_4021fb": "int sub_4021fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203008:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203017:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203021:sub_40220d": null, "4203024:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203078:sub_402246": null, "4203088:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203142:sub_402286": null, "4203152:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203206:sub_4022c6": null, "4203216:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isupper(v3) && !cgc_islower(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203312:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isalpha(v3) && !cgc_isdigit(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203408:cgc_isprint": "int cgc_isprint(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 32 && v1 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203462:sub_4023c6": null, "4203472:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + -32;\n
    return v0;\n
}\n
", "4203546:sub_40241a": null, "4203552:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4203626:sub_40246a": null, "4203632:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203726:sub_4024ce": null, "4203728:cgc_link": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_link(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_lookaside;\n
    if (!v5)\n
        return cgc_lookaside;\n
    v6 = v5;\n
    if (*(v6) <= 1016)\n
    {\n
        if (*(v5) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(v5) >> 3;\n
        *((v5 + 4)) = *((v3 + v2 * 4 + 60));\n
        v1 = v5;\n
        if (*(v5) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(v5) >> 3;\n
        v6 = v3;\n
        *((v6 + v0 * 4 + 60)) = v1;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (!v4)\n
            return v6;\n
        if (!*((v4 + 4)))\n
        {\n
            *((v4 + 4)) = v5;\n
            *((v5 + 8)) = v4;\n
            v6 = v5;\n
            *((v6 + 4)) = 0;\n
            return v5;\n
        }\n
        else if (*(v5) >= *(*((v4 + 4))))\n
        {\n
            v6 = *((v4 + 4));\n
            v4 = v6;\n
        }\n
        else\n
        {\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = v4;\n
            *((*((v4 + 4)) + 8)) = v5;\n
            v6 = v4;\n
            *((v6 + 4)) = v5;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204065:sub_402621": null, "4204080:cgc_add_freelist_block": "typedef struct struct_0 {\n
    char padding_0[60];\n
    unsigned int field_3c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_freelist_block(unsigned int v5)\n
{\n
    struct struct_1 **v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v5 += 4;\n
    v5 = v5 + 4095 & -0x1000;\n
    v0 = &v3;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        cgc_printf(&v1[132].padding_0[28]);\n
        cgc__terminate(-1);\n
    }\n
    cgc_bzero(v3);\n
    *(v3) = v5 - 4;\n
    if (!v1->field_3c)\n
    {\n
        v7 = v1;\n
        v7->field_3c = v3;\n
        return v1;\n
    }\n
    v7 = cgc_link(v3);\n
    return v7;\n
}\n
", "4204305:sub_402711": null, "4204320:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        v1 = v2 - 4;\n
        v3 = cgc_link(v1);\n
    }\n
    return v3;\n
}\n
", "4204391:sub_402767": null, "4204400:cgc_init_freelist": "typedef struct struct_0 {\n
    char padding_0[60];\n
    struct struct_1 *field_3c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_init_freelist()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    v0 = &cgc_lookaside;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc_printf();\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1->field_3c);\n
    v3[0] = v1->field_3c;\n
    v2[0] = v3 + 1;\n
    v3[0] = 0;\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[0] = 4080;\n
    v2[2] = v3;\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4204617:sub_402849": null, "4204624:cgc_unlink": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_unlink(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax, Other Possible Types: unsigned int, struct_1 *\n
\n
    if (!v0)\n
        return v0;\n
    if (v0->field_8)\n
        v0->field_8->field_4 = v0->field_4;\n
    v1 = v0;\n
    if (!v1->field_4)\n
        return v1;\n
    v1 = v0->field_4;\n
    v1->field_8 = v0->field_8;\n
}\n
", "4204708:sub_4028a4": null, "4204720:cgc_freelist_alloc": "typedef struct struct_1 {\n
    char padding_0[60];\n
    struct struct_0 *field_3c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_lookaside;\n
\n
int cgc_freelist_alloc(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v2 = v0->field_3c; v2; v2 = v2->field_4)\n
    {\n
        if (v2->field_0 >= v4)\n
            break;\n
    }\n
    if (!v2)\n
    {\n
        cgc_add_freelist_block(v4);\n
        v3 = cgc_freelist_alloc(v4);\n
        return v3;\n
    }\n
    cgc_unlink(v2);\n
    if (*(v2) - v4 < 12)\n
    {\n
        v3 = v2 + 4;\n
        return v3;\n
    }\n
    v1 = v2 + 4 + v4;\n
    *(v1) = *(v2) - (v4 + 4);\n
    *(v2) = v4;\n
    cgc_link(v1);\n
    v3 = v2 + 4;\n
    return v3;\n
}\n
", "4205001:sub_4029c9": null, "4205008:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc();\n
    if (!v2)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v5 = v5 + 7 & -8;\n
    v0 = v5;\n
    cgc_bzero(v2);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4205116:sub_402a3c": null, "4205120:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v5 < 8)\n
        v5 = 8;\n
    v5 = v5 + 7 & -8;\n
    if (v5 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v5 >> 3;\n
    if (!v3)\n
    {\n
        v4 = cgc_freelist_alloc(v5);\n
        return v4;\n
    }\n
    for (v3 = v0; v3 < 128; v3 += 1)\n
    {\n
        if (*((v1 + (v3 << 2) + 60)))\n
            break;\n
    }\n
    if (v3 != 128)\n
    {\n
        v6 = v1;\n
        v2 = *((v6 + v3 * 4 + 60));\n
        *((v6 + v3 * 4 + 60)) = v2->field_4;\n
        v4 = &v2->field_4;\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v5);\n
    return v4;\n
}\n
", "4205405:sub_402b5d": null, "4205408:cgc_round": null, "4205554:sub_402bf2": null, "4205568:cgc_floor": null, "4205724:sub_402c9c": null, "4205728:cgc_seed_prng_array": "typedef struct struct_0 {\n
    char padding_0[704];\n
    unsigned int field_2c0;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state;\n
\n
int cgc_seed_prng_array(unsigned int v4, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&state, 128);\n
    v0->field_2c0 = 0;\n
    if (a0 > 32)\n
        a0 = 32;\n
    for (v2 = 0; v2 < a0; v2 = v2 + 1)\n
    {\n
        *((576 + &v0->padding_0[0] + 0x4 * v2)) = *((v4 + v2 * 4));\n
    }\n
    v6 = a0;\n
    while (true)\n
    {\n
        v2 = v6;\n
        if (v2 >= 32)\n
            break;\n
        v7 = v0;\n
        v1 = *(&v7->padding_0[576 + 4 * (v2 + 1 & 31)]);\n
        *((576 + &v7->padding_0[0] + 0x4 * v2)) = (v1 ^ (v1 >> 30) + v2) * 524287;\n
        v6 = v2 + 1;\n
    }\n
    v8 = v3;\n
    return v6;\n
}\n
", "4205951:sub_402d7f": null, "4205952:cgc_seed_prng": "int cgc_seed_prng(unsigned int v0)\n
{\n
    return cgc_seed_prng_array(&v0, 0x1);\n
}\n
", "4205999:sub_402daf": null, "4206000:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state_n;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
\n
    v9 = v11;\n
    v8 = *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * state_n]);\n
    v7 = *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * (state_n + 3 & 31)]);\n
    v6 = *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * (state_n + 24 & 31)]);\n
    v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * (state_n + 10 & 31)]);\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * (state_n + 31 & 31)]);\n
    v3 = v8 ^ v7 ^ v7 >> 8;\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * state_n]) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[576 + 4 * (state_n + 31 & 31)]) = v0;\n
    state_n = state_n + 31 & 31;\n
    v12 = v9;\n
    return v0;\n
}\n
", "4206283:sub_402ecb": null, "4206288:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v6 > a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v6 != a0)\n
    {\n
        v3 = a0 - v6 + 1;\n
        if (!v3)\n
        {\n
            v5 = cgc_prng();\n
            return v5;\n
        }\n
        v2 = (0 CONCAT -1) /m v3;\n
        do\n
        {\n
            v4 = cgc_prng();\n
        } while (v4 >= v3 * v2);\n
        v0 = v6;\n
        v5 = v0 + (0 CONCAT v4) /m v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        return v5;\n
    }\n
}\n
", "4206476:sub_402f8c": null, "4206480:cgc_WRAPPER_PUTC": "int cgc_WRAPPER_PUTC(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4206581:sub_402ff5": null, "4206592:cgc_WRAPPER_OUTC": "int cgc_WRAPPER_OUTC(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    v0[a1] = a0;\n
    return a1 + 1;\n
}\n
", "4206626:sub_403022": null, "4206640:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    struct struct_0 *field_100;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_WRAPPER_BUFFER_PUTC(struct_0 *v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x20]\n
    struct_0 *v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ecx\n
    struct_0 *v9;  // esi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    if (v4->field_100 >= 0x100)\n
    {\n
        for (v3 = v4; v4->field_100 > 0; v3 = *(&v2) + v3)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(1, v3, v4->field_100))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            if (!*(&v2))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v7 = v4;\n
            v8 = v7->field_100 - *(&v2);\n
            *(&v7->field_100) = v8;\n
        }\n
    }\n
    v9 = v4;\n
    *(&v8) = v9->field_100;\n
    *(&v9->field_100) = v8 + 1;\n
    (&v4->field_0)[v8] = a0;\n
    v5 = a1 + 1;\n
    return v5;\n
}\n
", "4206910:sub_40313e": null, "4206912:cgc_putchar": "int cgc_putchar(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4207004:sub_40319c": null, "4207008:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = cgc_strlen();\n
    while (true)\n
    {\n
        if (v2 != v3)\n
        {\n
            v0 = &v4;\n
            if (cgc_transmit(1, v7 + v2, v3 - v2))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            if (!*(&v4))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = *(&v4) + v2;\n
        }\n
        else\n
        {\n
            cgc_putchar(10);\n
            cgc_putchar(13);\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207211:sub_40326b": null, "4207216:cgc_vprintf_buffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf_buffered(unsigned int v14, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    unsigned int v1;  // [bp-0x134]\n
    char v2;  // [bp-0x130]\n
    unsigned int v3;  // [bp-0x12c]\n
    unsigned int v4;  // [bp-0x128]\n
    void* v5;  // [bp-0x124]\n
    unsigned int v6;  // [bp-0x120]\n
    char v7;  // [bp-0x11c]\n
    unsigned short v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // esi\n
\n
    v13 = v15;\n
    v12 = v16;\n
    v11 = v17;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = cgc_WRAPPER_BUFFER_PUTC;\n
    v8 = 0;\n
    v6 = &v7;\n
    v5 = 0;\n
    v0 = a0;\n
    v4 = cgc_wrapper_output(v6, v9, v5, v14);\n
    v3 = &v7;\n
    while (true)\n
    {\n
        if (v8 <= 0)\n
        {\n
            v10 = v4;\n
            break;\n
        }\n
        else if (cgc_transmit(1, v3, v8))\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
        else if (*(&v2))\n
        {\n
            v8 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
    }\n
    return v10;\n
}\n
", "4207519:sub_40339f": null, "4207520:cgc_wrapper_output": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wrapper_output()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x5c]\n
    char *v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    char v5;  // [bp-0x21]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp+0x4]\n
    unsigned int v12;  // [bp+0x8]\n
    char *v13;  // [bp+0xc]\n
    char *v14;  // [bp+0x10], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp+0xfffb8]\n
    struct struct_0 **v44;  // [bp+0x100014]\n
    unsigned int *v45;  // [bp+0x10001c], Other Possible Types: struct struct_1 **\n
    struct struct_1 **v76;  // eax\n
\n
    v76 = v45;\n
    v45 = &v76[1];\n
    v32 = &*(v76)->field_0;\n
    *(v32) = v44;\n
    while (true)\n
    {\n
        v14 = (&v13)[1] + 1;\n
        while (true)\n
        {\n
LABEL_4038d9:\n
            while (true)\n
            {\n
                if (!*(v14))\n
                    return;\n
                v5 = *(v14);\n
                v14 = (&v13)[1] + 1;\n
                if (v5 != 36)\n
                {\n
                    v0 = v13;\n
                    v13 = v12(v11, v5);\n
                    goto LABEL_4038d9;\n
                }\n
                v6 = 0;\n
                v7 = 0;\n
                v8 = 0;\n
                v9 = 0;\n
                if (!*(v14))\n
                    return;\n
                if (*(v14) != 36)\n
                    break;\n
                v0 = v13;\n
                v13 = v12(v11, 36);\n
            }\n
            if (*(v14) == 45)\n
            {\n
                v9 |= 1;\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (cgc_isdigit(*(v14)))\n
            {\n
                if (*(v14) == 48)\n
                    v9 |= 4;\n
                for (v4 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v8 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (*(v14) == 46)\n
            {\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
                for (v3 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v6 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            v1 = *(v14) - 88;\n
            if (v1 <= 32)\n
                goto *(((stack_base)[88] + (stack_base)[92] * 4 - 8388)) + (stack_base)[88];\n
            break;\n
        }\n
    }\n
}\n
", "4208876:sub_4038ec": null, "4208880:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf_buffered(v2, v1);\n
    return v0;\n
}\n
", "4208938:sub_40392a": null, "4208944:cgc_vprintf": "int cgc_vprintf(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = cgc_WRAPPER_PUTC;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = a0;\n
    return cgc_wrapper_output(v2, v3, v1, v6);\n
}\n
", "4209041:sub_403991": null, "4209056:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = &v5;\n
    v0 = v2;\n
    v1 = cgc_vsprintf(v4, a0);\n
    return v1;\n
}\n
", "4209125:sub_4039e5": null, "4209136:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v9, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct struct_0 **v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = &cgc_WRAPPER_OUTC;\n
    v4 = v9;\n
    v3 = 0;\n
    v0 = a1;\n
    v2 = cgc_wrapper_output(v4, v5, v3, a0);\n
    v5(v4, 0);\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return v2;\n
}\n
", "4209275:sub_403a7b": null, "4209280:cgc_printf_int_to_string": "int cgc_printf_int_to_string(unsigned int v3, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a1) = 48;\n
        v2 = 1;\n
        return v2;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a0 >> 32;\n
        v3 = (0 CONCAT v3) /m a0;\n
        if (a0 != 16)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            a1[v4] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v5 = v1;\n
            v1 = v5 + 1;\n
            a1[v5] = v0 + 48;\n
        }\n
        else if ((a2 & 8))\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a1[v6] = v0 + 55;\n
        }\n
        else\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a1[v7] = v0 + 87;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4209552:cgc_printf_helper_int": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4210208:cgc_printf_float_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4212624:cgc_printf_helper_float": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4213290:sub_404a2a": null, "4213296:cgc_printf_helper_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_string(unsigned int v5, struct struct_0 **a0, unsigned int a1, char *a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    char *v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a4 && !a3)\n
    {\n
        for (v1 = &_GLOBAL_OFFSET_TABLE_; *(a2); a2 += 1)\n
        {\n
            v0 = a1;\n
            a1 = a0(v5, *(a2));\n
        }\n
        v4 = a1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen();\n
    v2 = 0;\n
    if (a4 > 0 && v3 > a4)\n
        v3 = a4;\n
    if (a3 > 0 && v3 < a3)\n
        v2 = a3 - v3;\n
    if (!(a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v6 = v2;\n
            v2 = v6 - 1;\n
            if (v6 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 32);\n
            }\n
            else\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 48);\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        if (v7 <= 0)\n
            break;\n
        v8 = a2;\n
        a2 = v8 + 1;\n
        v0 = a1;\n
        a1 = a0(v5, *(v8));\n
    }\n
    if ((a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v9 = v2;\n
            v2 = v9 - 1;\n
            if (v9 <= 0)\n
                break;\n
            v0 = a1;\n
            a1 = a0(v5, 32);\n
        }\n
    }\n
    v4 = a1;\n
    return v4;\n
}\n
", "4213836:sub_404c4c": null, "4213840:cgc_rand": "int cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4213887:sub_404c7f": null, "4213888:cgc_srand": "int cgc_srand(unsigned int v0)\n
{\n
    return cgc_seed_prng(v0);\n
}\n
", "4213925:sub_404ca5": null, "4213936:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4) == 45)\n
    {\n
        v1 = 1;\n
        v4 += 1;\n
    }\n
    for (; cgc_isdigit(*(v4)); v2 = v2 * 10 + *(v5) - 48)\n
    {\n
        v5 = v4;\n
        v4 = v5 + 1;\n
    }\n
    if (v1)\n
    {\n
        v3 = -(v2);\n
        return v3;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4214173:sub_404d9d": null, "4214176:cgc_atof": null, "4214461:sub_404ebd": null, "4214464:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8]\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v1;\n
        v1 = v4 + 1;\n
    }\n
    *(v1) = 0;\n
    return v0;\n
}\n
", "4214540:sub_404f0c": null, "4214544:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4214681:sub_404f99": null, "4214688:cgc_memcpy": "int cgc_memcpy(char *v1, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 4;\n
        a0 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 1;\n
        a0 += 1;\n
    }\n
    return v0;\n
}\n
", "4214824:sub_405028": null, "4214832:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4214891:sub_40506b": null, "4214896:cgc_bzero": "int cgc_bzero(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
\n
    for (; a0; v1[1 + v0] = 0)\n
    {\n
        v1 = a0;\n
        a0 = v1 + 1;\n
    }\n
    *((v0 + a0)) = 0;\n
    return v0;\n
}\n
", "4214951:sub_4050a7": null, "4214960:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8]\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; a1 >= 4; a1 -= 4)\n
    {\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(&v4) = v0;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = v1;\n
    }\n
    return v2;\n
}\n
", "4215114:sub_40514a": null, "4215120:cgc_strchr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strchr(char *v4, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(v4))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (v4[v2] != a0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = &v4[v2];\n
            return v3;\n
        }\n
    }\n
}\n
", "4215278:sub_4051ee": null, "4215280:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[572];\n
    struct struct_1 *field_23c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v6, char *a0)\n
{\n
    char v0;  // [bp-0x21]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v6)\n
    {\n
        if (v1->field_23c)\n
        {\n
            v6 = v1->field_23c;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a0, *(v6)))\n
            v0 = *(v6);\n
        if (!(v0 & 1))\n
            break;\n
        v6 += 1;\n
    }\n
    if (!*(v6))\n
    {\n
        v1->field_23c = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = cgc_strlen(v6);\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= v2)\n
        {\n
            v1->field_23c = 0;\n
            v5 = v6;\n
            return v5;\n
        }\n
        if (cgc_strchr(a0, *((v6 + v4))))\n
            break;\n
        v4 += 1;\n
    }\n
    *((v6 + v4)) = 0;\n
    for (v3 = v4 + 1; v3 < v2; v3 += 1)\n
    {\n
        if (cgc_strchr(a0, *((v6 + v3))))\n
        {\n
            *((v6 + v3)) = 0;\n
        }\n
        else\n
        {\n
            v1->field_23c = v6 + v3;\n
            v5 = v6;\n
            return v5;\n
        }\n
    }\n
    if (v3 == v2)\n
        v1->field_23c = 0;\n
    v5 = v6;\n
    return v5;\n
}\n
", "4215799:sub_4053f7": null, "4215808:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (v2 && !a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!v2 && a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (!v2 && !a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(a0);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(a0))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*(v2) >= *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
    }\n
    if (*(v2) && !*(a0))\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!*(v2) && *(a0))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4216158:sub_40555e": null, "4216160:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v5, char *a0)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = cgc_strlen(v5);\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = v2;\n
            if (v0 >= cgc_strlen(a0))\n
                break;\n
            v5[v3] = a0[v2];\n
            v3 += 1;\n
            v2 += 1;\n
        }\n
        v5[v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4216343:sub_405617": null, "4216352:cgc_InitFilesystem": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int FS;\n
extern unsigned short _GLOBAL_OFFSET_TABLE_[4680];\n
\n
int cgc_InitFilesystem()\n
{\n
    struct_0 *v0;  // [bp-0x64]\n
    int tmp_23;  // tmp #23\n
    struct_0 *v1;  // [bp-0x60]\n
    unsigned short v2[4680];  // [bp-0x58]\n
    char *v3;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x4d]\n
    char v5;  // [bp-0x4c]\n
    char v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned short v10[4680];  // ebx\n
    unsigned short v11[4680];  // ebx\n
    unsigned short v12[4680];  // ebx\n
    unsigned short v13[4680];  // ebx\n
    unsigned short v14[4680];  // ebx\n
    unsigned short v15[4680];  // ebx\n
    unsigned short v16[4680];  // ebx\n
\n
    v7 = v9;\n
    *(&v2[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    v3 = 0x4347c000;\n
    cgc_bzero(&FS, 0x10640);\n
    cgc_bzero(&v2[7 + 1292], 0xc0);\n
    cgc_bzero(&v6, 0x20);\n
    for (v4 = 0; v4 < 10; v4 += 1)\n
    {\n
        (&v6)[v4] = cgc_random_in_range(65, 122);\n
    }\n
    (&v6)[v4] = 0;\n
    cgc_bzero(&v5, 0x20);\n
    for (v4 = 0; v4 < 31; v4 += 1)\n
    {\n
        (&v5)[v4] = cgc_random_in_range(65, 122);\n
    }\n
    v10 = v2;\n
    (&v5)[v4] = 0;\n
    cgc_strcpy(&v10[484], &v10[3892] + 1);\n
    v11 = v2;\n
    cgc_strcpy(&v11[2548], &v11[3581]);\n
    v12 = v2;\n
    cgc_strcpy(&v12[2564], &v12[3581]);\n
    v13 = v2;\n
    v13[2580] = 0x700;\n
    v0 = &v5;\n
    v1 = &v6;\n
    cgc_sprintf(&v13[500], &v13[4116]);\n
    v14 = v2;\n
    v14[2581] = cgc_strlen(&v2[500]);\n
    cgc_strcpy(&v14[2582], &v14[4095]);\n
    v15 = v2;\n
    cgc_strcpy(&v15[4646], &v15[4088] + 1);\n
    v16 = v2;\n
    cgc_strcpy(&v16[4662], &v16[4088] + 1);\n
    v2[4678] = 0x700;\n
    v3 += 4;\n
    v4 = 0;\n
    while (v4 < 4)\n
    {\n
        if (!*(v3))\n
        {\n
LABEL_40588a:\n
            v4 = 0;\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            if (*(v3) == 10)\n
                goto LABEL_40588a;\n
            tmp_23 = v4;\n
            v4 += 1;\n
            *(5196 + &v2[0] + tmp_23) = *(v3);\n
            v3 += 1;\n
        }\n
    }\n
    v2[4679] = 4;\n
    return v2;\n
}\n
", "4217050:sub_4058da": null, "4217056:cgc_ListFiles": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ListFiles()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x11]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v6 = v8;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_puts(\"Directory listing\");\n
    v9 = v4;\n
    v0 = v9 - 8128;\n
    v1 = v9 - 8119;\n
    v2 = v9 - 8113;\n
    v3 = v9 - 8107;\n
    cgc_printf(v9 - 8152);\n
    for (v5 = 0; v5 < 16; v5 += 1)\n
    {\n
        if (*((v4 + 968 + v5 * 4196)))\n
        {\n
            v10 = v4;\n
            v0 = v10 + 968 + v5 * 4196;\n
            v1 = v10 + 968 + v5 * 4196 + 4128;\n
            v2 = v10 + 968 + v5 * 4196 + 4160;\n
            v3 = *((v10 + 968 + v5 * 4196 + 4194));\n
            cgc_printf(v10 - 8102);\n
        }\n
    }\n
    return v5;\n
}\n
", "4217351:sub_405a07": null, "4217360:cgc_Mode2Perms": "int cgc_Mode2Perms(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned short v1;  // [bp-0x6]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (*(v2) == 114)\n
        v1 |= 4;\n
    if (*(v2) == 119)\n
        v1 |= 2;\n
    return v1;\n
}\n
", "4217434:sub_405a5a": null, "4217440:cgc_fopen": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fopen(char *v9, char *a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char v4;  // [bp-0x19]\n
    unsigned short v5[2098];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned short v6;  // [bp-0x14]\n
    char v7;  // [bp-0x11]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v5[0]) = 0;\n
    if (v9 && a0)\n
    {\n
        if (cgc_strlen(v9) > 31)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_strlen(a0) <= 1)\n
        {\n
            if (*(a0) != 114 && *(a0) != 119)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            for (v4 = 0; v4 < 16; v4 += 1)\n
            {\n
                if (!*((v3 + 968 + v4 * 4196)) && !v5)\n
                    *(&v5[0]) = v3 + 968 + v4 * 4196;\n
                if (!cgc_strcmp(v9, v3 + 968 + v4 * 4196))\n
                    break;\n
            }\n
            if (v4 == 16)\n
            {\n
                if (*(a0) == 114)\n
                {\n
                    v8 = 0;\n
                    return v8;\n
                }\n
                goto LABEL_405da6;\n
            }\n
            if (!a1)\n
            {\n
                v10 = v3;\n
                if (cgc_strcmp(v10 + 72393, v10 - 7162))\n
                {\n
                    v11 = v3;\n
                    if (cgc_strcmp(v11 + 968 + v4 * 4196 + 4128, v11 + 72393))\n
                    {\n
                        v12 = v3;\n
                        if (cgc_strcmp(v12 + 968 + v4 * 4196 + 4160, v12 + 72425))\n
                        {\n
                            v6 = *((v3 + 968 + v4 * 4196 + 4192)) & 15;\n
                            v0 = v6;\n
                            if (!(v0 & cgc_Mode2Perms(a0)))\n
                            {\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            v6 = (*((v3 + 968 + v4 * 4196 + 4192)) & 240) >> 4;\n
                            v1 = v6;\n
                            if (!(v1 & cgc_Mode2Perms(a0)))\n
                            {\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v6 = (*((v3 + 968 + v4 * 4196 + 4192)) & 0xf00) >> 8;\n
                        v2 = v6;\n
                        if (!(v2 & cgc_Mode2Perms(a0)))\n
                        {\n
                            v8 = 0;\n
                            return v8;\n
                        }\n
                    }\n
LABEL_405da6:\n
                    for (v7 = 0; v7 < 16; v7 += 1)\n
                    {\n
                        if (!*((v3 + 68104 + v7 * 12)))\n
                            break;\n
                    }\n
                    if (v7 == 16)\n
                    {\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                    if (*(a0) != 119)\n
                    {\n
                        v13 = v3;\n
                        *((v13 + 68104 + v7 * 12)) = v13 + 968 + v4 * 4196;\n
                        *((v13 + 68104 + v7 * 12 + 8)) = 4;\n
                    }\n
                    else if (v4 != 16)\n
                    {\n
                        v14 = v3;\n
                        *((v14 + 68104 + v7 * 12)) = v14 + 968 + v4 * 4196;\n
                        *((v14 + 68104 + v7 * 12 + 8)) = 2;\n
                        cgc_bzero(*((v14 + 68104 + v7 * 12)) + 32, 0x1000);\n
                        *((*((v3 + 68104 + v7 * 12)) + 4194)) = 0;\n
                    }\n
                    else if (v5)\n
                    {\n
                        cgc_strcpy(v5, v9);\n
                        cgc_strcpy(v5 + 4128, v3 + 72393);\n
                        cgc_strcpy(v5 + 4160, v3 + 72425);\n
                        *((v5 + 4192)) = 0x700;\n
                        cgc_bzero(v5 + 32, 0x1000);\n
                        v15 = v3;\n
                        *((v5 + 4194)) = 0;\n
                        *((v15 + 68104 + v7 * 12)) = v5;\n
                        *((v15 + 68104 + v7 * 12 + 8)) = 2;\n
                    }\n
                    else\n
                    {\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                    v16 = v3;\n
                    *((v16 + 68104 + v7 * 12 + 4)) = *((v16 + 68104 + v7 * 12)) + 32;\n
                    v8 = v16 + 68104 + v7 * 12;\n
                    return v8;\n
                }\n
            }\n
            goto LABEL_405da6;\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4218860:sub_405fec": null, "4218864:cgc_fgets": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fgets(char *v3, unsigned int a0, struct_0 *a1)\n
{\n
    char v0;  // [bp-0x11]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v4;  // ecx\n
    char *v5;  // eax\n
    unsigned int v6;  // ecx\n
    struct_0 *v7;  // eax\n
\n
    if (v3 && a1 && a0)\n
    {\n
        if (!a1->field_4)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a1->field_4->field_0)\n
        {\n
            v1 = 0;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (a1->field_4->field_0)\n
                    v0 = a0 - 1;\n
                if (!(v0 & 1))\n
                {\n
                    v3[v1] = 0;\n
                    v2 = v3;\n
                    return v2;\n
                }\n
                else if (a1->field_4->field_0 != 10)\n
                {\n
                    v4 = a1;\n
                    v5 = v4->field_4;\n
                    v4->field_4 = &v5[1];\n
                    v6 = v1;\n
                    v1 = v6 + 1;\n
                    v3[v6] = *(v5);\n
                    a0 -= 1;\n
                }\n
                else\n
                {\n
                    v7 = a1;\n
                    v7->field_4 = v7->field_4 + 1;\n
                    v3[v1] = 0;\n
                    v2 = v3;\n
                    return v2;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4219161:sub_406119": null, "4219168:cgc_fclose": "int cgc_fclose(unsigned int v2[2])\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    v1 = 1;\n
    return v1;\n
}\n
", "4219226:sub_40615a": null, "4219232:cgc_fread": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4194];\n
    unsigned short field_1062;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(char *v2, unsigned int a0, unsigned int a1, struct_1 *a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v2 && a2 && a0 && a1)\n
    {\n
        if (a2->field_0 && a2->field_4 && a1 * a0 <= 0x1000)\n
        {\n
            if (a1 * a0 > a2->field_0->field_1062)\n
            {\n
                cgc_memcpy(v2, &a2->field_0->padding_0[32], a2->field_0->field_1062);\n
                v1 = a2->field_0->field_1062;\n
                return v1;\n
            }\n
            cgc_memcpy(v2, &a2->field_0->padding_0[32], a1 * a0);\n
            v1 = a1 * a0;\n
            return v1;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4219518:sub_40627e": null, "4219520:cgc_fwrite": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char *field_4;\n
    char field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4194];\n
    unsigned short field_1062;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(char *v2, unsigned int a0, unsigned int a1, struct_1 *a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v2 && a2)\n
    {\n
        if (a2->field_0 && a2->field_4 && a1 * a0 <= 0x1000 && a2->field_8 == 2)\n
        {\n
            cgc_memcpy(a2->field_4, v2, a1 * a0);\n
            v3 = a2->field_0;\n
            v3->field_1062 = v3->field_1062 + a1 * a0;\n
            v1 = a1 * a0;\n
            return v1;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4219739:sub_40635b": null, "4219744:cgc_Dump": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_Dump(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x414]\n
    char v1;  // [bp-0x410]\n
    void* v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = cgc_fopen(v4, v0 - 8115, 0);\n
    if (!v2)\n
    {\n
        cgc_printf(v0 - 8078);\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (cgc_fgets(&v1, 0x400, v2))\n
    {\n
        cgc_puts(&v1);\n
    }\n
    cgc_fclose(v2);\n
    v3 = 1;\n
    return v3;\n
}\n
", "4219987:sub_406453": null, "4220000:cgc_ReadShellPrompt": "typedef struct struct_0 {\n
    char padding_0[68296];\n
    char field_10ac8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReadShellPrompt(unsigned int v13, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x130]\n
    char v1;  // [bp-0x129]\n
    struct_0 *v2;  // [bp-0x128]\n
    char *v3;  // [bp-0x124], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x120]\n
    char v5;  // [bp-0x20]\n
    char v6;  // [bp-0x1e]\n
    char v7;  // [bp-0x1d]\n
    unsigned int v8;  // [bp-0x1c]\n
    char v9;  // [bp-0x18]\n
    char *v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
\n
    v12 = v14;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v10 = 0;\n
    v6 = 0;\n
    v5 = 255;\n
    v3 = 0;\n
    cgc_bzero(&v4, 0x100);\n
    while (true)\n
    {\n
        v0 = &v9;\n
        v1 = 0;\n
        if (!cgc_receive(v13, &v7, 1))\n
            v1 = v10 < a1 - 1;\n
        if (!(v1 & 1))\n
        {\n
LABEL_406e50:\n
            if (!*(&v9))\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            *((a0 + v10)) = 0;\n
            v11 = v10;\n
            return v11;\n
        }\n
        if (!*(&v9))\n
        {\n
            *(a0) = 0;\n
            v11 = 0;\n
            return v11;\n
        }\n
        if (v7 == 127)\n
        {\n
            if (v3 == v10)\n
            {\n
                cgc_printf(&v2->padding_0[8051]);\n
                v10 += 1;\n
                v3 -= 1;\n
                continue;\n
            }\n
            else\n
            {\n
                for (v8 = v3 - 1; v8 < v10 + 1; v8 += 1)\n
                {\n
                    *((a0 + v8)) = *((a0 + v8 + 1));\n
                }\n
                v10 += 1;\n
                v3 -= 1;\n
                cgc_EraseLine();\n
                cgc_PrintPrompt();\n
                *((a0 + v10)) = 0;\n
                cgc_printf(&v2->padding_0[7529]);\n
                cgc_CursorLeft(v10 - v3);\n
            }\n
            continue;\n
        }\n
        if (v7 == 3)\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        if (v7 == 5)\n
        {\n
            cgc_EraseLine();\n
            cgc_PrintPrompt();\n
            *((a0 + v10)) = 0;\n
            cgc_printf(&v2->padding_0[7529]);\n
            v3 = v10;\n
            continue;\n
        }\n
        if (v7 == 21)\n
        {\n
            cgc_EraseLine();\n
            cgc_PrintPrompt();\n
            v10 = 0;\n
            v3 = 0;\n
            continue;\n
        }\n
        if (v7 == 4)\n
        {\n
            if (v10 <= 0)\n
            {\n
                cgc_printf(&v2->padding_0[8041]);\n
                cgc_printf(&v2->padding_0[8034]);\n
                cgc_strcpy(a0, &v2->padding_0[7771]);\n
                v11 = 1;\n
                return v11;\n
            }\n
            cgc_printf(&v2->padding_0[8041]);\n
            continue;\n
        }\n
        if (v7 == 27)\n
        {\n
            v0 = &v9;\n
            if (cgc_receive(v13, &v7, 1))\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (!*(&v9))\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (v7 == 91)\n
            {\n
                v0 = &v9;\n
                if (cgc_receive(v13, &v7, 1))\n
                {\n
                    *(a0) = 0;\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                if (!*(&v9))\n
                {\n
                    *(a0) = 0;\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                if (v7 == 65)\n
                {\n
                    if (!v2->field_10ac8)\n
                    {\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        v3 = v10;\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        if (v5 == 255)\n
                        {\n
                            *((a0 + v10)) = 0;\n
                            cgc_strcpy(&v4, a0);\n
                        }\n
                        v5 += 1;\n
                        if (v5 >= v2->field_10ac8)\n
                            v5 = v2->field_10ac8 - 1;\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        cgc_strcpy(a0, &v2->padding_0[1 + 0x100 * v5]);\n
                        v10 = cgc_strlen(&v2->padding_0[1 + 0x100 * v5]);\n
                        v3 = v10;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                    }\n
                    continue;\n
                }\n
                else if (v7 == 66)\n
                {\n
                    if (v5 == 255)\n
                    {\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        if (v5)\n
                        {\n
                            v5 -= 1;\n
                            cgc_EraseLine();\n
                            cgc_PrintPrompt();\n
                            cgc_strcpy(a0, &v2->padding_0[1 + 0x100 * v5]);\n
                            v10 = cgc_strlen(&v2->padding_0[1 + 0x100 * v5]);\n
                            v3 = v10;\n
                            cgc_printf(&v2->padding_0[7529]);\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            cgc_EraseLine();\n
                            cgc_PrintPrompt();\n
                            cgc_strcpy(a0, &v4);\n
                            v10 = cgc_strlen(a0);\n
                            v3 = v10;\n
                            cgc_printf(&v2->padding_0[7529]);\n
                            v5 = 255;\n
                        }\n
                    }\n
                    continue;\n
                }\n
                else if (v7 == 67)\n
                {\n
                    if (v3 == v10)\n
                    {\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        v3 += 1;\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        if (v10 != v3)\n
                            cgc_CursorLeft();\n
                    }\n
                    continue;\n
                }\n
                else if (v7 == 68)\n
                {\n
                    if (!v3)\n
                    {\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        cgc_CursorLeft(v10);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        v3 -= 1;\n
                        cgc_EraseLine();\n
                        cgc_PrintPrompt();\n
                        *((a0 + v10)) = 0;\n
                        cgc_printf(&v2->padding_0[7529]);\n
                        cgc_CursorLeft(v10 - v3);\n
                    }\n
                    continue;\n
                }\n
            }\n
        }\n
        if (v7 == 13)\n
        {\n
            *((a0 + v3)) = 0;\n
            goto LABEL_406e50;\n
        }\n
        if (v7 == 10)\n
        {\n
            v0 = &v9;\n
            if (cgc_receive(v13, &v7, 1))\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (!*(&v9))\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (v7 != 13)\n
            {\n
                *(a0) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            *((a0 + v3)) = 0;\n
            goto LABEL_406e50;\n
            goto LABEL_406e50;\n
        }\n
        else if (v3 == v10)\n
        {\n
            v15 = v10;\n
            v10 = v15 + 1;\n
            *((a0 + v15)) = v7;\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            v16 = v3;\n
            v3 = v16 + 1;\n
            *((a0 + v16)) = v7;\n
        }\n
    }\n
}\n
", "4222601:sub_406e89": null, "4222608:cgc_ReadUntilNewline": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReadUntilNewline(unsigned int v8, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x29]\n
    unsigned int v2;  // [bp-0x28]\n
    char *v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x1d]\n
    char v5;  // [bp-0x18]\n
    char *v6;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ecx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = &v5;\n
        v1 = 0;\n
        if (!cgc_receive(v8, &v4, 1))\n
            v1 = v6 < a1 - 1;\n
        if (!(v1 & 1))\n
        {\n
LABEL_407096:\n
            if (!*(&v5))\n
            {\n
                *(a0) = 0;\n
                v7 = 0;\n
                return v7;\n
            }\n
            *((a0 + v6)) = 0;\n
            v7 = v6;\n
            return v7;\n
        }\n
        if (!*(&v5))\n
        {\n
            *(a0) = 0;\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (v4 == 127)\n
        {\n
            if (!v3)\n
            {\n
                cgc_printf(v2 - 8041);\n
                continue;\n
            }\n
            else\n
            {\n
                cgc_printf(v2 - 8051);\n
                v6 -= 1;\n
                v3 -= 1;\n
            }\n
            continue;\n
        }\n
        if (v4 == 3)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (v4 == 13)\n
        {\n
            *((a0 + v3)) = 0;\n
            goto LABEL_407096;\n
        }\n
        if (v4 == 10)\n
        {\n
            v0 = &v5;\n
            if (cgc_receive(v8, &v4, 1))\n
            {\n
                *(a0) = 0;\n
                v7 = 0;\n
                return v7;\n
            }\n
            if (!*(&v5))\n
            {\n
                *(a0) = 0;\n
                v7 = 0;\n
                return v7;\n
            }\n
            if (v4 != 13)\n
            {\n
                *(a0) = 0;\n
                v7 = 0;\n
                return v7;\n
            }\n
            *((a0 + v3)) = 0;\n
            goto LABEL_407096;\n
            goto LABEL_407096;\n
        }\n
        else if (v3 == v6)\n
        {\n
            v9 = v6;\n
            v6 = v9 + 1;\n
            *((a0 + v9)) = v4;\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            v10 = v3;\n
            v3 = v10 + 1;\n
            *((a0 + v10)) = v4;\n
        }\n
    }\n
}\n
", "4223180:sub_4070cc": null, "4223184:cgc_EraseToEOL": "extern char g_40a1cd;\n
\n
int cgc_EraseToEOL()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = &g_40a1cd;\n
    return cgc_printf(\"$sK\");\n
}\n
", "4223233:sub_407101": null, "4223248:cgc_EraseLine": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_40a1cd;\n
\n
int cgc_EraseLine(char v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &g_40a1cd;\n
    v1 = v4;\n
    cgc_printf(\"$s$dG\");\n
    v6 = v3;\n
    return cgc_EraseToEOL();\n
}\n
", "4223319:sub_407157": null, "4223328:cgc_MoveCursor": "extern char g_40a1cd;\n
\n
int cgc_MoveCursor(char v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // esi\n
\n
    v3 = v5;\n
    v0 = &g_40a1cd;\n
    v1 = v4;\n
    v2 = a0;\n
    return cgc_printf(\"$s$d;$dH\");\n
}\n
", "4223401:sub_4071a9": null, "4223408:cgc_ClearScreen": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ClearScreen()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 2;\n
    v1 = 74;\n
    cgc_printf(\"$s$d$c\");\n
    v6 = v3;\n
    return cgc_MoveCursor(1, 1);\n
}\n
", "4223499:sub_40720b": null, "4223504:cgc_CursorRight": "extern char g_40a1cd;\n
\n
int cgc_CursorRight(char v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = &g_40a1cd;\n
    v1 = v2;\n
    return cgc_printf(\"$s$dC\");\n
}\n
", "4223564:sub_40724c": null, "4223568:cgc_CursorLeft": "extern char g_40a1cd;\n
\n
int cgc_CursorLeft(char v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = &g_40a1cd;\n
    v1 = v2;\n
    return cgc_printf(\"$s$dD\");\n
}\n
", "4223628:sub_40728c": null, "4223632:main": "typedef struct struct_0 {\n
    char padding_0[68296];\n
    char field_10ac8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x33c]\n
    struct_0 *v1;  // [bp-0x324]\n
    unsigned int *v2;  // [bp-0x320]\n
    char v3;  // [bp-0x319]\n
    char v4;  // [bp-0x314]\n
    char v5;  // [bp-0x210]\n
    void* v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = 0;\n
    v2 = 0x4347c000;\n
    cgc_seed_prng(*(v2));\n
    cgc_InitFilesystem();\n
    v0 = v1 + 1;\n
    cgc_bzero(v0, 0x1000);\n
    v1->field_10ac8 = 0;\n
    cgc_Login(v0);\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            cgc_PrintPrompt();\n
            if (cgc_ReadShellPrompt(0, &v4, 255))\n
                break;\n
            cgc_printf(&v1->padding_0[7986]);\n
        }\n
        cgc_printf(&v1->padding_0[7986]);\n
        cgc_PrependCommandHistory();\n
        v3 = cgc_ParseCli(&v4);\n
        if (!v3)\n
            break;\n
        if (v3 == 1)\n
        {\n
            cgc_puts(&v1->padding_0[7977]);\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7963]))\n
        {\n
            cgc_HandleListFiles();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7958]))\n
        {\n
            cgc_ChUser();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7335]))\n
        {\n
            cgc_ChPw();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7771]))\n
        {\n
            cgc_HandleExit();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7759]))\n
        {\n
            cgc_ID();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7951]))\n
        {\n
            cgc_HandleHelp();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7949]))\n
        {\n
            cgc_HandleHelp();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7944]))\n
        {\n
            cgc_NewUser();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[0x1f00]))\n
        {\n
            cgc_DelUser();\n
        }\n
        else if (!cgc_strcmp(&v5, &v1->padding_0[7928]))\n
        {\n
            cgc_HandleDump();\n
        }\n
        else if (cgc_strcmp(&v5, &v1->padding_0[7923]))\n
        {\n
            cgc_printf(&v1->padding_0[7917]);\n
        }\n
        else\n
        {\n
            cgc_HandlePrint();\n
        }\n
    }\n
    v10 = v7;\n
    return 0;\n
}\n
", "4224821:sub_407735": null, "4224832:cgc_PrintPrompt": "extern char g_41dbed;\n
\n
int cgc_PrintPrompt()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = &g_41dbed;\n
    return cgc_printf(\"$s@CB> \");\n
}\n
", "4224886:sub_407776": null, "4224896:cgc_ParseCli": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ParseCli(void* v11, unsigned int *a0)\n
{\n
    char v0[2];  // [bp-0x38]\n
    char v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    char v3[2];  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    char v5[2];  // [bp-0x24]\n
    char v6;  // [bp-0x1d]\n
    unsigned int v7;  // [bp-0x1c]\n
    char v8;  // [bp-0x15]\n
    char v9[2];  // [bp-0x14]\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int *v12;  // edx\n
    unsigned int v13;  // eax\n
    unsigned int *v14;  // eax\n
    unsigned int *v15;  // edx\n
    unsigned int v16;  // eax\n
    unsigned int *v17;  // edx\n
    unsigned int v18;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    if (v11 && a0)\n
    {\n
        *(a0) = 0;\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    *(&v9) = cgc_strtok(v11, v7 - 8029);\n
                    v6 = 0;\n
                    if (v9)\n
                        v6 = *(a0) <= 8;\n
                    if (!(v6 & 1))\n
                    {\n
                        v10 = 2;\n
                        return v10;\n
                    }\n
                    v11 = 0;\n
                    if (v8)\n
                        break;\n
                    if (v9[0] != 34)\n
                    {\n
                        v12 = a0;\n
                        v13 = *(v12);\n
                        *(v12) = v13 + 1;\n
                        cgc_strncpy(&a0[16 * v13] + 1, v9, 63);\n
                    }\n
                    else\n
                    {\n
                        *(&v1) = v9;\n
                        if (v1[1 + cgc_strlen(v9)] == 34)\n
                        {\n
                            *(&v0) = v9;\n
                            v0[1 + cgc_strlen(v9)] = 0;\n
                            v15 = a0;\n
                            v16 = *(v15);\n
                            *(v15) = v16 + 1;\n
                            cgc_strncpy(&a0[16 * v16] + 1, &v9[1], 63);\n
                        }\n
                        else if (!cgc_strchr(&v9[1], 34))\n
                        {\n
                            v8 = 1;\n
                            cgc_strncpy(&a0[16 * *(a0)] + 1, &v9[1], 63);\n
                        }\n
                        else\n
                        {\n
                            v10 = 1;\n
                            return v10;\n
                        }\n
                    }\n
                }\n
                *(&v5) = v9;\n
                if (v5[1 + cgc_strlen(v9)] != 34)\n
                    break;\n
                *(&v3) = v9;\n
                v3[1 + cgc_strlen(v9)] = 0;\n
                v4 = cgc_strlen(&a0[16 * *(a0)] + 1);\n
                if (v4 + cgc_strlen(v9) + 1 > 63)\n
                {\n
                    v10 = 1;\n
                    return v10;\n
                }\n
                cgc_strcat(&a0[16 * *(a0)] + 1, v7 - 8029);\n
                v17 = a0;\n
                v18 = *(v17);\n
                *(v17) = v18 + 1;\n
                cgc_strcat(&a0[16 * v18] + 1, v9);\n
                v8 = 0;\n
            }\n
            if (v9[0] == 34 && !v9[1])\n
            {\n
                v14 = a0;\n
                *(v14) = *(v14) + 1;\n
                v8 = 0;\n
                continue;\n
            }\n
            if (cgc_strchr(v9, 34))\n
            {\n
                v10 = 1;\n
                return v10;\n
            }\n
            v2 = cgc_strlen(&a0[16 * *(a0)] + 1);\n
            if (v2 + cgc_strlen(v9) + 1 > 63)\n
            {\n
                v10 = 1;\n
                return v10;\n
            }\n
            cgc_strcat(&a0[16 * *(a0)] + 1, v7 - 8029);\n
            cgc_strcat(&a0[16 * *(a0)] + 1, v9);\n
        }\n
    }\n
    v10 = 0;\n
    return v10;\n
}\n
", "4225853:sub_407b3d": null, "4225856:cgc_HandleListFiles": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandleListFiles(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (*(v2) != 1)\n
    {\n
        cgc_puts(v0 - 7887);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        cgc_ListFiles();\n
        v1 = 1;\n
        return v1;\n
    }\n
}\n
", "4225968:cgc_HandleExit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandleExit(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (*(v2) != 1)\n
    {\n
        cgc_puts(v0 - 7887);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        cgc_puts(v0 - 7869);\n
        cgc__terminate();\n
        return v1;\n
    }\n
}\n
", "4226099:sub_407c33": null, "4226112:cgc_HandleHelp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandleHelp(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (*(v2) == 1)\n
    {\n
        cgc_puts(v0 - 7862);\n
        cgc_puts(v0 - 7958);\n
        cgc_puts(v0 - 7335);\n
        cgc_puts(v0 - 7771);\n
        cgc_puts(v0 - 7759);\n
        cgc_puts(v0 - 7949);\n
        cgc_puts(v0 - 7951);\n
        cgc_puts(v0 - 7944);\n
        cgc_puts(v0 - 0x1f00);\n
        cgc_puts(v0 - 7928);\n
        cgc_puts(v0 - 7923);\n
    }\n
    else if (*(v2) == 2)\n
    {\n
        if (!cgc_strcmp(v2 + 17, v0 - 7958))\n
        {\n
            cgc_puts(v0 - 7842);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7785))\n
        {\n
            v3 = v0;\n
            if (cgc_strcmp(v3 + 72393, v3 - 7162))\n
                cgc_puts(v0 - 7792);\n
            else\n
                cgc_puts(v0 - 7817);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7771))\n
        {\n
            cgc_puts(v0 - 7778);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7759))\n
        {\n
            cgc_puts(v0 - 7766);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7949))\n
        {\n
            cgc_puts(v0 - 7756);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7951))\n
        {\n
            cgc_puts(v0 - 7734);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7944))\n
        {\n
            cgc_puts(v0 - 7715);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 0x1f00))\n
        {\n
            cgc_puts(v0 - 7681);\n
        }\n
        else if (!cgc_strcmp(v2 + 17, v0 - 7655))\n
        {\n
            cgc_puts(v0 - 7651);\n
        }\n
        else if (cgc_strcmp(v2 + 17, v0 - 7628))\n
        {\n
            cgc_printf(v0 - 7594);\n
        }\n
        else\n
        {\n
            cgc_puts(v0 - 7623);\n
        }\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4227150:sub_40804e": null, "4227152:cgc_HandleDump": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandleDump(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (*(v2) != 2)\n
    {\n
        cgc_puts(v0 - 7573);\n
        cgc_puts(v0 - 7651);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = cgc_Dump(v2 + 17);\n
        return v1;\n
    }\n
}\n
", "4227284:sub_4080d4": null, "4227296:cgc_HandlePrint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandlePrint(unsigned int *v7)\n
{\n
    char *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10]\n
    char v6;  // [bp-0x9]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (*(v7) < 2)\n
    {\n
        cgc_puts(v2 - 7573);\n
        cgc_puts(v2 - 7561);\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        v3 = 2;\n
        while (true)\n
        {\n
            if (v3 >= *(v7))\n
            {\n
LABEL_408201:\n
                if (!v4)\n
                {\n
                    cgc_printf(v2 - 7529);\n
                    for (v3 = 2; v3 < *(v7); v3 += 1)\n
                    {\n
                        cgc_printf(v2 - 7530);\n
                    }\n
                    cgc_puts(v2 - 8042);\n
                }\n
                else\n
                {\n
                    v5 = cgc_fopen(v4, v2 - 7332, 0);\n
                    if (!v5)\n
                    {\n
                        cgc_printf(v2 - 8078);\n
                        v6 = 0;\n
                        return v6;\n
                    }\n
                    v0 = &v7[17];\n
                    v1 = cgc_fwrite(v0, cgc_strlen(v7 + 17), 1, v5);\n
                    if (v1 != cgc_strlen(v7 + 17))\n
                    {\n
                        cgc_fclose(v5);\n
                        v6 = 0;\n
                        return v6;\n
                    }\n
                    cgc_fclose(v5);\n
                }\n
                v6 = 1;\n
                break;\n
            }\n
            else\n
            {\n
                if (v7[1 + 16 * v3] == 62 && !*(&v7[1 + 16 * v3] + 1))\n
                {\n
                    if (v3 + 1 == *(v7) - 1)\n
                    {\n
                        v4 = &v7[16 + 16 * v3] + 1;\n
                        goto LABEL_408201;\n
                    }\n
                    else\n
                    {\n
                        cgc_puts(v2 - 7573);\n
                        cgc_puts(v2 - 7561);\n
                        v6 = 0;\n
                        return v6;\n
                    }\n
                }\n
                v3 += 1;\n
            }\n
        }\n
        return v6;\n
    }\n
}\n
", "4227950:sub_40836e": null, "4227952:cgc_PrependCommandHistory": "typedef struct struct_0 {\n
    char padding_0[68296];\n
    char field_10ac8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_ENV;\n
\n
int cgc_PrependCommandHistory(char *v2)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    struct_0 *v3;  // ebx\n
    struct_0 *v4;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_ENV = 0;\n
    for (v1 = 15; v1 > 0; v1 -= 1)\n
    {\n
        if (v0->padding_0[68041 + 0x100 * v1])\n
        {\n
            v3 = v0;\n
            cgc_strcpy(&v3->padding_0[1 + 0x100 * v1], &v3->padding_0[255 + 0x100 * v1]);\n
            if (!v0->field_10ac8)\n
                v0->field_10ac8 = v1;\n
        }\n
    }\n
    cgc_strcpy(v0 + 1, v2);\n
    v4 = v0;\n
    v4->field_10ac8 = v4->field_10ac8 + 1;\n
    return v0;\n
}\n
", "4228196:sub_408464": null, "4228208:cgc_Login": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_41dbed;\n
\n
int cgc_Login()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_strcpy(&g_41dbed, \"crs\");\n
    v4 = v0;\n
    v6 = v1;\n
    return cgc_strcpy(v4 + 72425, v4 - 7526);\n
}\n
", "4228299:sub_4084cb": null, "4228304:cgc_ChUser": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChUser(unsigned int *v8)\n
{\n
    unsigned int v0;  // [bp-0xc0]\n
    char *v1;  // [bp-0xbc]\n
    char *v2;  // [bp-0xb8]\n
    char *v3;  // [bp-0xb4]\n
    char v4;  // [bp-0xb0]\n
    char v5;  // [bp-0x90]\n
    unsigned int v6[2];  // [bp-0x10]\n
    char v7;  // [bp-0x9]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (*(v8) != 2)\n
    {\n
        cgc_puts(v0 - 7573);\n
        cgc_puts(v0 - 7842);\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        v9 = v0;\n
        v6[0] = cgc_fopen(v9 - 7785, v9 - 8115, 1);\n
        if (!v6)\n
        {\n
            cgc_puts(v0 - 7522);\n
            v7 = 0;\n
            return v7;\n
        }\n
        do\n
        {\n
            if (!cgc_fgets(&v5, 128, v6))\n
            {\n
                cgc_printf(v0 - 7397);\n
                cgc_fclose(v6);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v1 = cgc_strtok(&v5, v0 - 7844);\n
            if (!v1)\n
            {\n
                cgc_fclose(v6);\n
                cgc_puts(v0 - 7495);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v3 = cgc_strtok(NULL, v0 - 7844);\n
            if (!v3)\n
            {\n
                cgc_fclose(v6);\n
                cgc_puts(v0 - 7495);\n
                v7 = 0;\n
                return v7;\n
            }\n
        } while (cgc_strcmp(v3, v8 + 17));\n
        v2 = cgc_strtok(NULL, v0 - 7844);\n
        if (!v2)\n
        {\n
            cgc_fclose(v6);\n
            cgc_puts(v0 - 7495);\n
            v7 = 0;\n
            return v7;\n
        }\n
        v10 = v0;\n
        if (!cgc_strcmp(v10 + 72393, v10 - 7162))\n
        {\n
            cgc_strcpy(v0 + 72393, v3);\n
            cgc_strcpy(v0 + 72425, v2);\n
            cgc_printf(v0 - 7470);\n
            cgc_fclose(v6);\n
            v7 = 1;\n
            return v7;\n
        }\n
        cgc_printf(v0 - 7431);\n
        if (!cgc_ReadUntilNewline(0, &v4, 32))\n
        {\n
            cgc_fclose(v6);\n
            v7 = 0;\n
            return v7;\n
        }\n
        cgc_printf(v0 - 7986);\n
        if (cgc_strcmp(v1, &v4))\n
        {\n
            cgc_puts(v0 - 7420);\n
            v7 = 0;\n
            return v7;\n
        }\n
        cgc_strcpy(v0 + 72393, v3);\n
        cgc_strcpy(v0 + 72425, v2);\n
        cgc_printf(v0 - 7470);\n
        cgc_fclose(v6);\n
        v7 = 1;\n
        return v7;\n
    }\n
}\n
", "4229422:sub_40892e": null, "4229424:cgc_ChPw": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChPw(unsigned int *v17)\n
{\n
    unsigned int v0;  // [bp-0x118c]\n
    struct_0 *v1;  // [bp-0x117c]\n
    unsigned int v2;  // [bp-0x1178]\n
    char *v3;  // [bp-0x1174]\n
    char *v4;  // [bp-0x1170]\n
    unsigned int v5;  // [bp-0x116c]\n
    unsigned int v6;  // [bp-0x1168]\n
    char v7;  // [bp-0x1164]\n
    char v8;  // [bp-0x10e4]\n
    char v9;  // [bp-0xe4]\n
    char *v10;  // [bp-0xc4]\n
    unsigned int v11;  // [bp-0xc0]\n
    char *v12;  // [bp-0xbc]\n
    char v13;  // [bp-0xb8]\n
    char v14;  // [bp-0x98]\n
    unsigned int v15[2];  // [bp-0x18]\n
    char v16;  // [bp-0x11]\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ebx\n
    unsigned int v20;  // ebx\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v17)\n
    {\n
        v16 = 0;\n
        return v16;\n
    }\n
    v18 = v6;\n
    if (cgc_strcmp(v18 + 72393, v18 - 7162))\n
    {\n
        if (*(v17) == 1)\n
        {\n
            cgc_strcpy(&v9, v6 + 72393);\n
        }\n
        else\n
        {\n
            cgc_puts(v6 - 7573);\n
            cgc_puts(v6 - 7342);\n
            v16 = 0;\n
            return v16;\n
        }\n
    }\n
    else\n
    {\n
        if (*(v17) == 2)\n
        {\n
            cgc_strcpy(&v9, v17 + 17);\n
        }\n
        else\n
        {\n
            cgc_puts(v6 - 7573);\n
            cgc_puts(v6 - 7365);\n
            v16 = 0;\n
            return v16;\n
        }\n
    }\n
    v19 = v6;\n
    v15[0] = cgc_fopen(v19 - 7785, v19 - 8115, 1);\n
    if (!v15)\n
    {\n
        cgc_puts(v6 - 7522);\n
        v16 = 0;\n
        return v16;\n
    }\n
    cgc_bzero(&v8, 0x1000);\n
    while (true)\n
    {\n
        do\n
        {\n
            if (!cgc_fgets(&v14, 128, v15))\n
            {\n
                cgc_fclose(v15);\n
                if (cgc_strlen(&v8) > 0)\n
                {\n
                    v20 = v6;\n
                    v15[0] = cgc_fopen(v20 - 7785, v20 - 7332, 1);\n
                    if (!v15)\n
                    {\n
                        cgc_puts(v6 - 7522);\n
                        v16 = 0;\n
                        return v16;\n
                    }\n
                    v1 = &v8;\n
                    v2 = cgc_fwrite(v1, cgc_strlen(&v8) + 1, 1, v15);\n
                    if (v2 != cgc_strlen(&v8) + 1)\n
                    {\n
                        cgc_puts(v6 - 7216);\n
                        cgc_fclose(v15);\n
                        v16 = 0;\n
                        return v16;\n
                    }\n
                    cgc_fclose(v15);\n
                }\n
                v16 = 1;\n
                return v16;\n
            }\n
        } while (!v14);\n
        v10 = cgc_strtok(&v14, v6 - 7844);\n
        if (!v10)\n
        {\n
            cgc_fclose(v15);\n
            cgc_puts(v6 - 7495);\n
            cgc_fclose(v15);\n
            v16 = 0;\n
            return v16;\n
        }\n
        v12 = cgc_strtok(NULL, v6 - 7844);\n
        if (!v12)\n
        {\n
            cgc_fclose(v15);\n
            cgc_puts(v6 - 7495);\n
            cgc_fclose(v15);\n
            v16 = 0;\n
            return v16;\n
        }\n
        else if (cgc_strcmp(v12, &v9))\n
        {\n
            v3 = v10;\n
            v3[cgc_strlen(v10)] = 58;\n
            v4 = v12;\n
            v4[cgc_strlen(v12)] = 58;\n
            cgc_strcat(&v8, &v14);\n
            cgc_strcat(&v8, v6 - 8429);\n
        }\n
        else\n
        {\n
            v11 = cgc_strtok(NULL, v6 - 7844);\n
            if (!v11)\n
            {\n
                cgc_fclose(v15);\n
                cgc_puts(v6 - 7495);\n
                v16 = 0;\n
                return v16;\n
            }\n
            cgc_printf(v6 - 7330);\n
            if (!cgc_ReadUntilNewline(0, &v13, 32))\n
            {\n
                cgc_fclose(v15);\n
                cgc_printf(v6 - 7986);\n
                cgc_puts(v6 - 7315);\n
                v16 = 0;\n
                return v16;\n
            }\n
            cgc_printf(v6 - 7986);\n
            if (strchr(&v13, 58))\n
            {\n
                cgc_puts(v6 - 7294);\n
                cgc_fclose(v15);\n
                v16 = 0;\n
                return v16;\n
            }\n
            v0 = v11;\n
            cgc_sprintf(&v7, v6 - 7253);\n
            v5 = cgc_strlen(&v8);\n
            if (v5 + cgc_strlen(&v7) > 0x1000)\n
            {\n
                cgc_puts(v6 - 7243);\n
                cgc_fclose(v15);\n
                v16 = 0;\n
                return v16;\n
            }\n
            cgc_strcat(&v8, &v7);\n
        }\n
    }\n
}\n
", "4231159:sub_408ff7": null, "4231168:cgc_ID": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ID(unsigned int *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (*(v4) != 1)\n
    {\n
        cgc_puts(v2 - 7573);\n
        cgc_puts(v2 - 7766);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v5 = v2;\n
        v6 = v5 + 68296;\n
        v0 = v6 + 4097;\n
        v1 = v6 + 4129;\n
        cgc_printf(v5 - 7186);\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4231325:sub_40909d": null, "4231328:cgc_NewUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_NewUser(unsigned int *v15)\n
{\n
    unsigned int v0;  // [bp-0x115c]\n
    struct_0 *v1;  // [bp-0x1158]\n
    unsigned int v2;  // [bp-0x1154]\n
    unsigned int v3;  // [bp-0x1150]\n
    char *v4;  // [bp-0x114c]\n
    char *v5;  // [bp-0x1148]\n
    unsigned int v6;  // [bp-0x1144]\n
    char v7;  // [bp-0x1140]\n
    char v8;  // [bp-0x10c0]\n
    char *v9;  // [bp-0xc0]\n
    char *v10;  // [bp-0xbc]\n
    char v11;  // [bp-0xb8]\n
    char v12;  // [bp-0x98]\n
    unsigned int v13[2];  // [bp-0x18]\n
    char v14;  // [bp-0x11]\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v15)\n
    {\n
        v14 = 0;\n
        return v14;\n
    }\n
    v16 = v6;\n
    if (cgc_strcmp(v16 + 72393, v16 - 7162))\n
    {\n
        cgc_puts(v6 - 7170);\n
        v14 = 0;\n
        return v14;\n
    }\n
    else if (*(v15) != 3)\n
    {\n
        cgc_puts(v6 - 7573);\n
        cgc_puts(v6 - 7715);\n
        v14 = 0;\n
        return v14;\n
    }\n
    else\n
    {\n
        v17 = v6;\n
        v13[0] = cgc_fopen(v17 - 7785, v17 - 8115, 1);\n
        if (!v13)\n
        {\n
            cgc_puts(v6 - 7522);\n
            v14 = 0;\n
            return v14;\n
        }\n
        cgc_bzero(&v8, 0x1000);\n
        while (cgc_fgets(&v12, 128, v13))\n
        {\n
            if (v12)\n
            {\n
                v9 = cgc_strtok(&v12, v6 - 7844);\n
                if (!v9)\n
                {\n
                    cgc_fclose(v13);\n
                    cgc_puts(v6 - 7495);\n
                    cgc_fclose(v13);\n
                    v14 = 0;\n
                    return v14;\n
                }\n
                v10 = cgc_strtok(NULL, v6 - 7844);\n
                if (!v10)\n
                {\n
                    cgc_fclose(v13);\n
                    cgc_puts(v6 - 7495);\n
                    cgc_fclose(v13);\n
                    v14 = 0;\n
                    return v14;\n
                }\n
                if (!cgc_strcmp(v10, v15 + 17))\n
                {\n
                    cgc_printf(v6 - 7157);\n
                    cgc_fclose(v13);\n
                    v14 = 0;\n
                    return v14;\n
                }\n
                v4 = v9;\n
                v4[cgc_strlen(v9)] = 58;\n
                v5 = v10;\n
                v5[cgc_strlen(v10)] = 58;\n
                cgc_strcat(&v8, &v12);\n
                cgc_strcat(&v8, v6 - 8429);\n
            }\n
        }\n
        cgc_fclose(v13);\n
        cgc_printf(v6 - 7130);\n
        if (!cgc_ReadUntilNewline(0, &v11, 32))\n
        {\n
            cgc_fclose(v13);\n
            v14 = 0;\n
            return v14;\n
        }\n
        cgc_printf(v6 - 7986);\n
        v0 = v15 + 33;\n
        cgc_sprintf(&v7, v6 - 7253);\n
        v3 = cgc_strlen(&v8);\n
        if (v3 + cgc_strlen(&v7) > 0x1000)\n
        {\n
            cgc_puts(v6 - 7243);\n
            cgc_fclose(v13);\n
            v14 = 0;\n
            return v14;\n
        }\n
        cgc_strcat(&v8, &v7);\n
        if (cgc_strlen(&v8) > 0)\n
        {\n
            v18 = v6;\n
            v13[0] = cgc_fopen(v18 - 7785, v18 - 7332, 1);\n
            if (!v13)\n
            {\n
                cgc_puts(v6 - 7522);\n
                v14 = 0;\n
                return v14;\n
            }\n
            v1 = &v8;\n
            v2 = cgc_fwrite(v1, cgc_strlen(&v8) + 1, 1, v13);\n
            if (v2 != cgc_strlen(&v8) + 1)\n
            {\n
                cgc_puts(v6 - 7216);\n
                cgc_fclose(v13);\n
                v14 = 0;\n
                return v14;\n
            }\n
            cgc_fclose(v13);\n
        }\n
        cgc_printf(v6 - 7110);\n
        v14 = 1;\n
        return v14;\n
    }\n
}\n
", "4232842:sub_40968a": null, "4232848:cgc_DelUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DelUser(unsigned int *v12)\n
{\n
    struct_0 *v0;  // [bp-0x10b0]\n
    unsigned int v1;  // [bp-0x10ac]\n
    char *v2;  // [bp-0x10a8]\n
    char *v3;  // [bp-0x10a4]\n
    unsigned int v4;  // [bp-0x10a0]\n
    char v5;  // [bp-0x1099]\n
    char v6;  // [bp-0x1098]\n
    char *v7;  // [bp-0x98]\n
    char *v8;  // [bp-0x94]\n
    char v9;  // [bp-0x90]\n
    void* v10;  // [bp-0x10]\n
    char v11;  // [bp-0x9]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    if (!v12)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v13 = v4;\n
    if (cgc_strcmp(v13 + 72393, v13 - 7162))\n
    {\n
        cgc_puts(v4 - 7170);\n
        v11 = 0;\n
        return v11;\n
    }\n
    else if (*(v12) != 2)\n
    {\n
        cgc_puts(v4 - 7573);\n
        cgc_puts(v4 - 7681);\n
        v11 = 0;\n
        return v11;\n
    }\n
    else\n
    {\n
        v14 = v4;\n
        v10 = cgc_fopen(v14 - 7785, v14 - 8115, 1);\n
        if (!v10)\n
        {\n
            cgc_puts(v4 - 7522);\n
            v11 = 0;\n
            return v11;\n
        }\n
        cgc_bzero(&v6, 0x1000);\n
        while (cgc_fgets(&v9, 128, v10))\n
        {\n
            if (v9)\n
            {\n
                v7 = cgc_strtok(&v9, v4 - 7844);\n
                if (!v7)\n
                {\n
                    cgc_fclose(v10);\n
                    cgc_puts(v4 - 7495);\n
                    cgc_fclose(v10);\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                v8 = cgc_strtok(NULL, v4 - 7844);\n
                if (!v8)\n
                {\n
                    cgc_fclose(v10);\n
                    cgc_puts(v4 - 7495);\n
                    cgc_fclose(v10);\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                else if (cgc_strcmp(v8, v12 + 17))\n
                {\n
                    v2 = v7;\n
                    v2[cgc_strlen(v7)] = 58;\n
                    v3 = v8;\n
                    v3[cgc_strlen(v8)] = 58;\n
                    cgc_strcat(&v6, &v9);\n
                    cgc_strcat(&v6, v4 - 8429);\n
                }\n
                else\n
                {\n
                    v5 = 1;\n
                }\n
            }\n
        }\n
        cgc_fclose(v10);\n
        if (!v5)\n
        {\n
            cgc_printf(v4 - 7072);\n
            v11 = 0;\n
            return v11;\n
        }\n
        if (cgc_strlen(&v6) > 0)\n
        {\n
            v15 = v4;\n
            v10 = cgc_fopen(v15 - 7785, v15 - 7332, 1);\n
            if (!v10)\n
            {\n
                cgc_puts(v4 - 7522);\n
                v11 = 0;\n
                return v11;\n
            }\n
            v0 = &v6;\n
            v1 = cgc_fwrite(v0, cgc_strlen(&v6) + 1, 1, v10);\n
            if (v1 != cgc_strlen(&v6) + 1)\n
            {\n
                cgc_puts(v4 - 7216);\n
                cgc_fclose(v10);\n
                v11 = 0;\n
                return v11;\n
            }\n
            cgc_fclose(v10);\n
        }\n
        cgc_printf(v4 - 7092);\n
        v11 = 1;\n
        return v11;\n
    }\n
}\n
", "4234052:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:strchr": null, "5242904:cgc_rint": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}