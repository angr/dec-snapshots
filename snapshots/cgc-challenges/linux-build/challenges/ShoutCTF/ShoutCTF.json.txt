{"4202496:_init": "extern struct_0 *g_40bca4;\n
\n
int _init()\n
{\n
    if (g_40bca4)\n
    {\n
        g_40bca4();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 39867;\n
    v6 = v5 + 813;\n
    v7 = v5 + 813;\n
    if (v7 == v6)\n
        return v5 + 813;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 39803;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 813;\n
    v9 = (v6 + 813 - (v6 + 813) >> 31) + (813 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40bca0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40bca0)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203066:sub_40223a": null, "4203072:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 1;\n
}\n
", "4203101:sub_40225d": null, "4203104:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 2;\n
}\n
", "4203133:sub_40227d": null, "4203136:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 16;\n
}\n
", "4203165:sub_40229d": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 14;\n
}\n
", "4203197:sub_4022bd": null, "4203200:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 12;\n
}\n
", "4203229:sub_4022dd": null, "4203232:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 4;\n
}\n
", "4203261:sub_4022fd": null, "4203264:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 8;\n
}\n
", "4203293:sub_40231d": null, "4203296:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 64;\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 32;\n
}\n
", "4203357:sub_40235d": null, "4203360:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[15528 + v0] & 4294967168;\n
}\n
", "4203389:sub_40237d": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[15528 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[15528 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[15528 + v1] & 2) >> 1);\n
}\n
", "4203451:sub_4023bb": null, "4203456:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[15528 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203490:sub_4023e2": null, "4203504:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[15528 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[15528 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203566:sub_40242e": null, "4203568:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[15528 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203602:sub_402452": null, "4203616:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203648:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_4025bd;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_4025bd:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4203987:sub_4025d3": null, "4204000:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204352:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204448:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_1 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_1 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_1 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_4029f1;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_4029f1:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4204799:sub_4028ff": null, "4205051:sub_4029fb": null, "4205056:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_402a58;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402a70;\n
LABEL_402a58:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402a70;\n
    }\n
LABEL_402a70:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205193:sub_402a89": null, "4205200:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct struct_0 **v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    struct struct_0 **v10;  // ecx\n
    unsigned int v11;  // edx\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ebp\n
    char *v14;  // edi\n
    unsigned int v15;  // ebx\n
    struct struct_0 **v16;  // eax, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v8 = v6->field_8;\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(v6->field_0, &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = v6->field_14;\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *(v9 + v16);\n
    }\n
    else if (v8 != v6->field_c)\n
    {\n
LABEL_402b89:\n
        v7->field_8 = v8 + 1;\n
        v16 = *(24 + &v7->field_0 + v8);\n
        return v16;\n
    }\n
    else\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (cgc_receive(v6->field_0, v6 + 1, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            v6->field_c = v13;\n
            v10 = v6->field_14;\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *(24 + &v7->field_0 + v12) = *(v10 + *(24 + &v7->field_0 + v12));\n
                        *(25 + &v7->field_0 + v12) = *(v10 + *(25 + &v7->field_0 + v12));\n
                        *(26 + &v7->field_0 + v12) = *(v10 + *(26 + &v7->field_0 + v12));\n
                        *(27 + &v7->field_0 + v12) = *(v10 + *(27 + &v7->field_0 + v12));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = 24 + v12 + v7;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v14[v15] = *(v10 + v14[v15]);\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = v7->field_8;\n
                goto LABEL_402b89;\n
            }\n
        }\n
    }\n
}\n
", "4205537:sub_402be1": null, "4205552:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205592:sub_402c18": null, "4205600:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_0 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402c8e:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402c8e;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206190:sub_402e6e": null, "4206192:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206560:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206600:sub_403008": null, "4206608:cgc_malloc_alloc": "extern char g_408108;\n
extern char g_40813a;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v4;  // [bp-0x14]\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v43;  // eax\n
\n
    v9 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_403324:\n
        return v9;\n
    }\n
    v10 = v8;\n
    v11 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 <= 15)\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 > 131071)\n
    {\n
        v14 = v11 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v9 = 0;\n
        if (!cgc_allocate(v14, 0))\n
        {\n
            v17 = *(&v4);\n
            *(v17) = v8;\n
            *((v17 + 4)) = v14;\n
            v9 = v17 + 8;\n
            goto LABEL_403324;\n
        }\n
    }\n
    v12 = v11 + 23;\n
    v13 = v12 & -0x10;\n
    v2 = v13;\n
    if (!(v12 & -0x10))\n
    {\n
        v15 = -1;\n
        v16 = *((v10 + -0x4));\n
        if (!v16)\n
            goto LABEL_0x403294;\n
        else\n
            goto LABEL_0x4032b0;\n
    }\n
    else if (v13 < 513)\n
    {\n
        v15 = (v12 >> 4) + 2;\n
        v16 = 0;\n
    }\n
    else if (v13 <= 0x1200)\n
    {\n
        v15 = (v13 - 0x200 >> 7) + 34;\n
        v16 = *((v10 + v15 * 4));\n
        if (!v16)\n
            goto LABEL_0x403294;\n
        else\n
            goto LABEL_0x4032b0;\n
    }\n
    else\n
    {\n
        v15 = 130;\n
        if (v13 <= 0x20000)\n
        {\n
            v15 = (v13 - 0x1200 >> 11) + 66;\n
            v16 = *((v10 + v15 * 4));\n
            if (!v16)\n
                goto LABEL_0x403294;\n
            else\n
                goto LABEL_0x4032b0;\n
        }\n
    }\n
}\n
", "4207456:tiny_alloc": "int tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4207887:sub_40350f": null, "4207888:malloc_free": "int malloc_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v15;  // cl\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = v13;\n
    v38 = a0;\n
    if (!v38)\n
    {\n
LABEL_403831:\n
        return v38;\n
    }\n
    v23 = v10;\n
    v15 = *((v23 + (v38 >> 20) + 524));\n
    if (v15 != 2)\n
    {\n
        if (v15 == 1)\n
        {\n
            v24 = *((v38 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v17 = v24 / 4 - 1;\n
                goto LABEL_403696;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v17 = (v24 >> 4) + 2;\n
                goto LABEL_403696;\n
            }\n
        }\n
        if (!(!v15))\n
            goto LABEL_403831;\n
        if ((v38 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else\n
        {\n
            v20 = *((v38 - 8));\n
            if (v20 != v23)\n
            {\n
                v22 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v23;\n
            }\n
            else\n
            {\n
                v20 = *((v38 - 4));\n
                if (v20 - 0x20000 <= 2147356671 && !(v20 & 4095))\n
                {\n
                    v38 = cgc_deallocate(v38 - 8);\n
                    goto LABEL_403831;\n
                }\n
                v22 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v20;\n
            v38 = cgc_heap_error(v22, v38);\n
        }\n
    }\n
    else if (!(v38 & 7))\n
    {\n
        v24 = v38 - 8;\n
        v16 = *((v24 + 4));\n
        if ((v16 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else if (v16 - 131073 <= -131058)\n
        {\n
            v19 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_40387d;\n
        }\n
        else\n
        {\n
            v21 = *(v24);\n
            v12 = v24 - *(v24);\n
            if (!*(v24))\n
                v12 = v21;\n
            v23 = v16 + v24;\n
            v2 = v24;\n
            if (v12)\n
            {\n
                v4 = v23;\n
                v3 = *((v12 + 4));\n
                if (!((v3 & -2) == v21))\n
                    goto LABEL_403894;\n
                v23 = v4;\n
                v24 = v3;\n
                if (*(v23) == v16)\n
                {\n
                    if ((v24 & 1))\n
                    {\n
                        if (v21 <= 15)\n
                        {\n
                            v25 = v24 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v21 <= 0x200)\n
                            {\n
                                v25 = (v24 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v21 <= 0x1200)\n
                                {\n
                                    v25 = (v21 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v25 = 130;\n
                                    if (v21 <= 0x20000)\n
                                        v25 = (v21 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v12 + 4)) = v21;\n
                        v26 = *((v12 + 8));\n
                        if (v26)\n
                            *((v26 + 12)) = *((v12 + 12));\n
                        v27 = *((v12 + 12));\n
                        if (v27)\n
                            *((v27 + 8)) = v26;\n
                        if (*((v10 + (v25 << 2))) == v12)\n
                            *((v10 + v25 * 4)) = v27;\n
                        *((v12 + 8)) = 0;\n
                        *((v12 + 12)) = 0;\n
                        v28 = v21 + *((v2 + 4));\n
                        *((v12 + 4)) = v28;\n
                        *(v23) = v28;\n
                        v2 = v12;\n
                    }\n
LABEL_40371c:\n
                    v29 = *((v23 + 4));\n
                    v30 = v10;\n
                    v12 = v2;\n
                    if ((v29 & 1))\n
                    {\n
                        v31 = v29 & -2;\n
                        if (v31 <= 15)\n
                        {\n
                            v32 = v29 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v31 <= 0x200)\n
                            {\n
                                v32 = (v29 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v31 <= 0x1200)\n
                                {\n
                                    v32 = (v31 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v32 = 130;\n
                                    if (v31 <= 0x20000)\n
                                        v32 = (v31 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v23 + 4)) = v31;\n
                        v33 = *((v23 + 8));\n
                        if (v33)\n
                            *((v33 + 12)) = *((v23 + 12));\n
                        v34 = *((v23 + 12));\n
                        if (*((v23 + 12)))\n
                            *((v34 + 8)) = v33;\n
                        v30 = v10;\n
                        if (*((v30 + (v32 << 2))) == v23)\n
                            *((v30 + v32 * 4)) = v34;\n
                        *((v23 + 8)) = 0;\n
                        *((v23 + 12)) = 0;\n
                        v12 = v2;\n
                        v35 = v31 + *((v12 + 4));\n
                        *((v12 + 4)) = v35;\n
                        *((v12 + v35)) = v35;\n
                    }\n
                    v36 = *((v12 + 4));\n
                    if (v36 <= 15)\n
                    {\n
                        v37 = v36 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v36 <= 0x200)\n
                        {\n
                            v37 = (v36 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v36 <= 0x1200)\n
                            {\n
                                v37 = (v36 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v37 = 130;\n
                                if (v36 <= 0x20000)\n
                                    v37 = (v36 - 0x1200 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(!(v36 & 1)))\n
                        goto LABEL_403884;\n
                    *((v12 + 4)) = v36 | 1;\n
                    *((v12 + 8)) = 0;\n
                    *((v12 + 12)) = *((v30 + v37 * 4));\n
                    *((v30 + v37 * 4)) = v12;\n
                    v38 = *((v12 + 12));\n
                    if (v38)\n
                    {\n
                        *((v38 + 8)) = v12;\n
                        goto LABEL_403831;\n
                    }\n
                }\n
            }\n
            else if (*((v24 + v16)) == v16)\n
            {\n
                goto LABEL_40371c;\n
            }\n
            v0 = v38;\n
            v38 = cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v23);\n
            v17 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_403696:\n
            *(v38) = *((v23 + v17 * 4));\n
            *((v23 + v17 * 4)) = v38;\n
            goto LABEL_403831;\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40387d:\n
    v8 = v38;\n
    v7 = v19;\n
    cgc_heap_error(*(&v9));\n
LABEL_403884:\n
    v6 = v12;\n
    v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v38 = cgc_heap_error(*(&v9));\n
LABEL_403894:\n
    v7 = v38;\n
    v6 = v12;\n
    v5 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v10, a0);\n
    return cgc_malloc_size(v10, a0);\n
}\n
", "4208816:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208865:sub_4038e1": null, "4208880:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_4039c5:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4039bd:\n
        malloc_free(v1, a0);\n
        goto LABEL_4039c5;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4039a0;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4039a0:\n
        v3 = v4;\n
        goto LABEL_4039c5;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_4039c5;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4039bd;\n
}\n
", "4209103:sub_4039cf": null, "4209104:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4209168:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v2 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4209223:sub_403a47": null, "4209232:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4209295:sub_403a8f": null, "4209296:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209426:sub_403b12": null, "4209440:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209734:sub_403c46": null, "4209744:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4209854:sub_403cbe": null, "4209856:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4209969:sub_403d31": null, "4209984:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4210091:sub_403dab": null, "4210096:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4210205:sub_403e1d": null, "4210208:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4210311:sub_403e87": null, "4210320:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210368:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210411:sub_403eeb": null, "4210416:cgc__vsfprintf": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_0 *v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    char *v32;  // ebx\n
    struct struct_0 **v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    struct_0 *v78;  // eax\n
    struct_0 *v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210486:sub_403f36": null, "4212000:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4212044:sub_40454c": null, "4212048:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2;  // al, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212166:sub_4045c6": null, "4212176:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212265:sub_404629": null, "4212272:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v0[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4212342:sub_404676": null, "4212352:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212420:sub_4046c4": null, "4212432:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212484:sub_404704": null, "4212496:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212576:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212608:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212736:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4212817:sub_404851": null, "4212832:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4212921:sub_4048b9": null, "4212928:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_404921;\n
                goto LABEL_40491f;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_404921;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_40491f:\n
    v4 = 0;\n
LABEL_404921:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4213058:sub_404942": null, "4213072:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4213160:sub_4049a8": null, "4213168:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    char v11;  // al\n
    unsigned int v12;  // eax, Other Possible Types: char\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ecx\n
    char v25[2];  // ebp, Other Possible Types: unsigned int\n
    void* v26;  // esi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v25 = v10;\n
    if (v12)\n
    {\n
        v25 = v10;\n
        do\n
        {\n
            if (!*(v25))\n
            {\n
                v21 = 0;\n
                v23 = 1;\n
                v24 = 1;\n
                v26 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404ba0;\n
            }\n
            v11 = *((v25 + 1));\n
            v25 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v25) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v25) == 43)\n
            v25 += 1;\n
        if (!v13)\n
            goto LABEL_404a78;\n
    }\n
    else\n
    {\n
        v25 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404a78:\n
            *(&v12) = *(v25);\n
            if (*(v25) != 48)\n
            {\n
LABEL_404ab3:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404b80;\n
LABEL_404acb:\n
                *(&v12) = *(v25);\n
LABEL_404ace:\n
                if (!v12)\n
                {\n
LABEL_404b80:\n
                    v21 = 0;\n
                    v24 = 1;\n
                    v26 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404ba0;\n
LABEL_404b95:\n
                    tmp_2 = v24;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v25;\n
                    *(v22) = v27;\n
                    goto LABEL_404ba0;\n
                }\n
LABEL_404ad6:\n
                v26 = 0;\n
                v21 = 0;\n
                v24 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v24;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v25);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                        v17 = v1;\n
                        if (!(v16 < v17))\n
                            goto LABEL_404bc3;\n
                    }\n
                    else\n
                    {\n
                        v19 = *(v25);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v19 - 87;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404bc3;\n
                        }\n
                        else if (!cgc_isupper(v19))\n
                        {\n
LABEL_404bc3:\n
                            v22 = a0;\n
                            v23 = v0;\n
                            v24 = v2;\n
                            if (!v22)\n
                                goto LABEL_404ba0;\n
                            goto LABEL_404b95;\n
                        }\n
                        else\n
                        {\n
                            v16 = *(v25) - 55;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404bc3;\n
                        }\n
                    }\n
                    v20 = v17 * v26;\n
                    tmp_5 = v20;\n
                    v26 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v21 = 1;\n
                    v12 = *((v25 + 1));\n
                    v25 += 1;\n
                    v24 = 0;\n
                } while (v12);\n
                goto LABEL_404b95;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v25 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v25 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404ad6;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v25);\n
                    goto LABEL_404ab3;\n
                }\n
                else\n
                {\n
                    v25 += 2;\n
                }\n
            }\n
LABEL_404aa9:\n
            v13 = 16;\n
            goto LABEL_404acb;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_404acb;\n
    *(&v12) = *(v25);\n
    v13 = 16;\n
    if (!(*(v25) == 48))\n
        goto LABEL_404ace;\n
    v25 += (cgc_tolower(*((v25 + 1))) == 120) * 2;\n
    goto LABEL_404aa9;\n
LABEL_404ba0:\n
    v28 = (!v21 ? 0x80000000 : -(v26));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v26);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213527:sub_404b17": null, "4213717:sub_404bd5": null, "4213728:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax, Other Possible Types: char\n
    void* v16;  // edi\n
    void* v17;  // edi\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    char v32[2];  // ebp\n
    unsigned int v33;  // edi\n
    char v34[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax, Other Possible Types: unsigned int\n
    unsigned int v36;  // edx\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404cdc;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) != 45)\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (!v15)\n
            goto LABEL_404ca6;\n
        goto LABEL_404c50;\n
    }\n
    else\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (v15)\n
        {\n
LABEL_404c50:\n
            if (v15 == 16)\n
            {\n
                *(&v15) = *(v34);\n
                if (*(v34) == 48)\n
                {\n
                    v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
                    v0 = 16;\n
                    goto LABEL_404d45;\n
                }\n
                else\n
                {\n
                    v0 = 16;\n
                    if (!(!v15))\n
                        goto LABEL_404d4c;\n
                    goto LABEL_404cda;\n
                }\n
            }\n
        }\n
        else\n
        {\n
LABEL_404ca6:\n
            *(&v15) = *(v34);\n
            if (*(v34) == 48)\n
            {\n
                *(&v15) = *((v34 + 1));\n
                if ((v15 & 248) == 48)\n
                {\n
                    v1 = v36;\n
                    v34 += 1;\n
                    v0 = 8;\n
                    goto LABEL_404d50;\n
                }\n
                v15 = cgc_tolower(v15);\n
                if (v15 != 120)\n
                {\n
                    *(&v15) = *(v34);\n
                }\n
                else\n
                {\n
                    v34 += 2;\n
                    v0 = 16;\n
                    goto LABEL_404d45;\n
                }\n
            }\n
            v1 = v36;\n
            v15 = cgc_isdigit(v15);\n
            v0 = 10;\n
            if (!v15)\n
            {\n
                v14 = 0;\n
                v37 = 1;\n
                v2 = 0;\n
                v16 = 0;\n
                v35 = a0;\n
                v36 = v1;\n
                if (!v35)\n
                    goto LABEL_404e67;\n
LABEL_404e5c:\n
                tmp_2 = v37;\n
                v38 = v8;\n
                if (!tmp_2)\n
                    v38 = v34;\n
                *(v35) = v38;\n
            }\n
            else\n
            {\n
                v36 = v1;\n
LABEL_404d45:\n
                *(&v15) = *(v34);\n
                if (*(v34))\n
                {\n
LABEL_404d4c:\n
                    v1 = v36;\n
LABEL_404d50:\n
                    v2 = 0;\n
                    v18 = 0;\n
                    v14 = 0;\n
                    v37 = 1;\n
                    do\n
                    {\n
                        *(&v3) = v37;\n
                        v19 = cgc_isdigit(v15);\n
                        v20 = *(v34);\n
                        if (v19)\n
                        {\n
                            v21 = v20 - 48;\n
                            v22 = v0;\n
                            if (!(v21 < v22))\n
                                goto LABEL_404e2d;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v34);\n
                            if (cgc_islower(v20))\n
                            {\n
                                v21 = v24 - 87;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e2d;\n
                            }\n
                            else if (!cgc_isupper(v24))\n
                            {\n
LABEL_404e2d:\n
                                v35 = a0;\n
                                v36 = v1;\n
                                v37 = v3;\n
                                if (!v35)\n
                                    goto LABEL_404e67;\n
                                goto LABEL_404e5c;\n
                            }\n
                            else\n
                            {\n
                                v21 = *(v34) - 55;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e2d;\n
                            }\n
                        }\n
                        *(&v3) = v34;\n
                        v25 = v2;\n
                        v26 = v25 * (v22 >> 31);\n
                        v27 = v14;\n
                        v28 = v22;\n
                        tmp_67 = v25 * v22;\n
                        v29 = v25 * v22 >> 32;\n
                        v30 = tmp_67;\n
                        v31 = v28 * v18 + v26 + v29;\n
                        v32 = v3;\n
                        v33 = v21 >> 31;\n
                        v2 = v30 + v21;\n
                        tmp_41 = v33;\n
                        v18 = v33 + v31 + (v30 + v21 < v30);\n
                        v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                        v15 = v32[1];\n
                        v34 = &v32[1];\n
                        v37 = 0;\n
                    } while (v15);\n
                    goto LABEL_404e67;\n
                }\n
LABEL_404cda:\n
                v14 = 0;\n
LABEL_404cdc:\n
                v37 = 1;\n
                v2 = 0;\n
                v17 = 0;\n
                v35 = a0;\n
                if (!v35)\n
                    goto LABEL_404e67;\n
                goto LABEL_404e5c;\n
            }\n
        }\n
    }\n
LABEL_404e67:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214171:sub_404d9b": null, "4214424:sub_404e98": null, "4214432:cgc_chal_cat_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_chal_cat_to_string(unsigned int v0)\n
{\n
    if (v0 <= 6)\n
        return *(&(&_GLOBAL_OFFSET_TABLE_)[328 + 4 * v0]);\n
    return \"Unknown\";\n
}\n
", "4214468:sub_404ec4": null, "4214480:cgc_chal_status_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_chal_status_to_string(unsigned int v0)\n
{\n
    if (v0 <= 3)\n
        return *(&(&_GLOBAL_OFFSET_TABLE_)[300 + 4 * v0]);\n
    return \"Unknown\";\n
}\n
", "4214516:sub_404ef4": null, "4214528:cgc_ctf_init": "int cgc_ctf_init(unsigned int v1[17])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2[17];  // esi\n
    unsigned int v4;  // eax\n
\n
    v2 = v1;\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    v2[2] = 0;\n
    v2[3] = 0;\n
    v2[7] = cgc_malloc(32);\n
    v2[4] = 8;\n
    v2[8] = cgc_malloc(64);\n
    v2[5] = 16;\n
    v2[9] = cgc_malloc(128);\n
    v2[6] = 32;\n
    v2[16] = 0;\n
    v4 = v2[7];\n
    v0 = &v2[1];\n
    cgc_flg_init(&v2[10], v4);\n
    return 0;\n
}\n
", "4214684:sub_404f9c": null, "4214688:cgc_ctf_submit_flag": "int cgc_ctf_submit_flag(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a1;\n
    return cgc_flg_add_submit(v1 + 40, a0);\n
}\n
", "4214733:sub_404fcd": null, "4214736:cgc_ctf_add_user": "typedef struct struct_0 {\n
    char padding_0[12];\n
    struct struct_1 *field_c;\n
    char padding_10[8];\n
    unsigned int field_18;\n
    char padding_1c[8];\n
    struct struct_1 *field_24;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[12];\n
    struct struct_1 *field_c;\n
    char padding_10[8];\n
    unsigned int field_18;\n
    char padding_1c[8];\n
    struct struct_3 *field_24;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char *field_0;\n
} struct_3;\n
\n
int cgc_ctf_add_user(struct_0 *v0, unsigned int a0)\n
{\n
    struct_2 *v1;  // esi\n
    char *v3;  // edi\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v6;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    if (v1->field_c)\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (!cgc_strcmp(v1->field_24[v4].field_0, v3))\n
                return 11;\n
            v4 += 1;\n
            v6 = v1->field_c;\n
        } while (v4 < v6);\n
        if (!(v6 == v1->field_18))\n
            goto LABEL_405049;\n
        goto LABEL_405025;\n
    }\n
    else\n
    {\n
        v6 = 0;\n
        if (v1->field_18)\n
        {\n
LABEL_405049:\n
            v5 = v1->field_24;\n
        }\n
        else\n
        {\n
LABEL_405025:\n
            v5 = cgc_realloc(v1->field_24, v6 * 8);\n
            v1->field_24 = v5;\n
            v1->field_18 = v1->field_18 * 2;\n
            v6 = v1->field_c;\n
        }\n
    }\n
    v1->field_c = v6 + 1;\n
    *((v5 + v6 * 4)) = v3;\n
    return 0;\n
}\n
", "4214886:sub_405066": null, "4214896:cgc_ctf_auth_user": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[20];\n
    struct struct_1 *field_24;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_ctf_auth_user(struct_0 *v0, unsigned int *a0, char *a1, char *a2)\n
{\n
    struct_0 *v1;  // ebp\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    char *v4;  // esi\n
\n
    v1 = v0;\n
    if (!v0)\n
    {\n
        return 1;\n
    }\n
    else if (!a0)\n
    {\n
        return 1;\n
    }\n
    else if (!a1)\n
    {\n
        return 1;\n
    }\n
    else if (!a2)\n
    {\n
        return 1;\n
    }\n
    else if (!v1->field_c)\n
    {\n
        return 5;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        while (true)\n
        {\n
            v4 = v1->field_24[v3].field_0;\n
            if (!cgc_strcmp(v4, a1))\n
                break;\n
            v3 += 1;\n
            if (v3 >= v1->field_c)\n
                return 5;\n
        }\n
        if (!cgc_strcmp(v4 + 16, a2))\n
        {\n
            *(a0) = v4;\n
            return 0;\n
        }\n
        return 14;\n
    }\n
}\n
", "4215063:sub_405117": null, "4215072:cgc_ctf_add_team": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    char padding_c[8];\n
    unsigned int field_14;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_ctf_add_team(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v3;  // ecx\n
    void* v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    if (v1->field_8)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            if (!cgc_strcmp(v1->field_20[v5].field_0 + 33, v3 + 33))\n
                return 12;\n
            v5 += 1;\n
            v6 = v1->field_8;\n
        } while (v5 < v6);\n
        if (!(v6 == v1->field_14))\n
            goto LABEL_4051ad;\n
        goto LABEL_405189;\n
    }\n
    else\n
    {\n
        v6 = 0;\n
        if (v1->field_14)\n
        {\n
LABEL_4051ad:\n
            v7 = v1->field_20;\n
        }\n
        else\n
        {\n
LABEL_405189:\n
            v7 = cgc_realloc(v1->field_20, v6 * 8);\n
            v1->field_20 = v7;\n
            v1->field_14 = v1->field_14 * 2;\n
            v6 = v1->field_8;\n
        }\n
    }\n
    v1->field_8 = v6 + 1;\n
    *((v7 + v6 * 4)) = a0;\n
    return 0;\n
}\n
", "4215246:sub_4051ce": null, "4215248:cgc_ctf_add_chal": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    char padding_14[8];\n
    struct struct_2 *field_1c;\n
    char padding_20[24];\n
    unsigned int field_38;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    char padding_14[8];\n
    struct struct_5 *field_1c;\n
    char padding_20[24];\n
    unsigned int field_38;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[396];\n
    unsigned int field_18c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[396];\n
    char *field_18c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    struct struct_3 *field_0;\n
} struct_5;\n
\n
int cgc_ctf_add_chal(struct_1 *v2, struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_4 *v3;  // edi\n
    struct_3 *v4;  // edx\n
    struct struct_0 **v5;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v6;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v7;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = v2;\n
    if (!v3)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 1;\n
    v4 = a0;\n
    if (!v4)\n
        return v1;\n
    if (v3->field_4)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v0 = &v3->field_1c[v5].field_0->padding_0;\n
            v1 = 13;\n
            if (!cgc_strcmp(v0, v4))\n
                return v1;\n
            if (!cgc_strcmp(v3->field_1c[v5].field_0->field_18c, v4->field_18c))\n
                return v1;\n
            v5 += 1;\n
            v6 = v3->field_4;\n
        } while (v5 < v6);\n
        if (!(v6 == v3->field_10))\n
            goto LABEL_405299;\n
        goto LABEL_405266;\n
    }\n
    else\n
    {\n
        v6 = 0;\n
        if (v3->field_10)\n
        {\n
LABEL_405299:\n
            v7 = v4;\n
            v8 = v3->field_1c;\n
        }\n
        else\n
        {\n
LABEL_405266:\n
            v7 = v4;\n
            v8 = cgc_realloc(v3->field_1c, v6 * 8);\n
            v3->field_1c = v8;\n
            v3->field_38 = v8;\n
            v3->field_10 = v3->field_10 * 2;\n
            v6 = v3->field_4;\n
        }\n
    }\n
    v3->field_4 = v6 + 1;\n
    *((v8 + v6 * 4)) = v7;\n
    v1 = 0;\n
    return v1;\n
}\n
", "4215483:sub_4052bb": null, "4215488:cgc_ctf_open_chal": "typedef struct struct_0 {\n
    char padding_0[388];\n
    unsigned int field_184;\n
} struct_0;\n
\n
int cgc_ctf_open_chal(unsigned int v0[8], struct struct_0 **a0)\n
{\n
    unsigned int v1[8];  // ecx\n
    struct struct_0 **v2;  // edx\n
    struct_0 *v4;  // ecx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v2 = a0;\n
    if (v1[1] <= v2)\n
        return 6;\n
    v4 = *((v1[7] + v2 * 4));\n
    if (v4->field_184)\n
        return 8;\n
    v4->field_184 = 3;\n
    return 0;\n
}\n
", "4215550:sub_4052fe": null, "4215552:cgc_ctf_get_solves": "int cgc_ctf_get_solves(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return 1;\n
    }\n
    else if (!a0)\n
    {\n
        return 1;\n
    }\n
    else if (!*(&v0))\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v0 = a1;\n
        return cgc_flg_get_solves(v2 + 40, a0, 0);\n
    }\n
}\n
", "4215620:sub_405344": null, "4215632:cgc_ctf_select_nth": "typedef struct struct_0 {\n
    char padding_0[88];\n
    unsigned int field_58;\n
} struct_0;\n
\n
int cgc_ctf_select_nth(struct struct_0 **v2, struct struct_0 **a0, unsigned int a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x18]\n
    int tmp_6;  // tmp #6\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    struct struct_0 **v5;  // eax\n
    struct_0 *v7;  // ebp\n
    unsigned int v8;  // ebx\n
    struct struct_0 **v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ebx\n
\n
    v1 = a1;\n
    v3 = a0;\n
    v4 = v2;\n
    while (true)\n
    {\n
        v5 = v3;\n
        v0 = v3;\n
        v3 = 0;\n
        tmp_6 = v5;\n
        if (tmp_6 != 1)\n
        {\n
            v8 = 0;\n
            do\n
            {\n
                v7 = *((v4 + v8 * 4));\n
                if (*((*((v4 + (v8 << 2))) + 88)) >= *((*((v4 + (v0 << 2) - 4)) + 88)))\n
                {\n
                    *((v4 + v8 * 4)) = *((v4 + v3 * 4));\n
                    *((v4 + v3 * 4)) = v7;\n
                    v3 += 1;\n
                }\n
                v8 += 1;\n
            } while (v5 + 1 != v8);\n
        }\n
        v9 = v0;\n
        v10 = *((v4 + v9 * 4 - 4));\n
        *((v4 + v9 * 4 - 4)) = *((v4 + v3 * 4));\n
        *((v4 + v3 * 4)) = v10;\n
        v11 = v1;\n
        tmp_8 = v11;\n
        v12 = v11 - v3;\n
        if (tmp_8 == v3)\n
        {\n
            return *((v4 + v0 * 4 - 4));\n
        }\n
        else if (!([D] x86g_calculate_condition(0xc<32>, 0x6<32>, ebx<4>, esi<4>, 0x0<32>)))\n
        {\n
            v4 += v3 * 4;\n
            v3 = v0 - v3;\n
            v1 = v12;\n
        }\n
    }\n
}\n
", "4215682:sub_405382": null, "4215735:sub_4053b7": null, "4215795:sub_4053f3": null, "4215808:cgc_ctf_get_ranks": "typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    char padding_c[16];\n
    struct struct_4 *field_1c;\n
    struct struct_5 *field_20;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[380];\n
    unsigned int field_180;\n
    unsigned int field_184;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[88];\n
    unsigned int field_58;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_0 *field_0;\n
} struct_5;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ctf_get_ranks(struct_3 *v7, struct struct_2 **a0, unsigned int *a1)\n
{\n
    struct_1 *v0;  // [bp-0x2c]\n
    int tmp_6;  // tmp #6\n
    int tmp_8;  // tmp #8\n
    struct_1 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    struct struct_1 **v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_1 **v3;  // [bp-0x20]\n
    struct_1 *v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    struct_3 *v8;  // ebx\n
    struct_1 *v10;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v11;  // edx\n
    struct_1 *v12;  // ecx\n
    unsigned int v13;  // edi\n
    struct struct_0 **v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // ecx\n
    struct struct_1 **v17;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v18;  // edx, Other Possible Types: void*, unsigned int\n
    struct struct_0 **v19;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v20;  // edi\n
    unsigned int v21;  // ecx\n
    unsigned int *v22;  // edx\n
    struct struct_2 **v23;  // esi\n
    struct struct_1 **v24;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v25;  // ecx\n
    struct_1 *v26;  // esi, Other Possible Types: unsigned int\n
    struct struct_1 **v27;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v28;  // ebp\n
    unsigned int v30;  // eax\n
    struct_0 *v31;  // edx\n
    struct_1 *v32;  // edx\n
    unsigned int v33;  // ebp\n
    struct struct_1 **v34;  // eax\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // esi\n
    struct_1 *v37;  // eax\n
    struct_1 *v38;  // edi\n
    unsigned int v40;  // eax\n
    struct_0 *v41;  // ecx\n
    struct_1 *v42;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v43;  // ecx\n
    unsigned int v44;  // edi\n
    struct struct_1 **v45;  // eax\n
    struct struct_1 **v46;  // eax\n
    struct_1 *v47;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v48;  // eax\n
    struct_1 *v49;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v50;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v51;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v52;  // edi\n
    unsigned int v54;  // eax\n
    struct_0 *v55;  // ecx\n
    struct_1 *v56;  // ecx\n
    unsigned int v57;  // edi\n
    struct struct_1 **v58;  // eax\n
    struct struct_1 **v59;  // eax\n
    struct_1 *v60;  // eax\n
    struct_1 *v61;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v62;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v63;  // edi\n
    unsigned int v65;  // eax\n
    struct_0 *v66;  // ecx\n
    struct_1 *v67;  // ecx\n
    unsigned int v68;  // edi\n
    struct struct_1 **v69;  // eax\n
    struct struct_1 **v70;  // eax\n
    unsigned int v71;  // ecx\n
    struct_1 *v72;  // edx\n
    unsigned int v73;  // eax\n
    struct_0 *v74;  // edi\n
    unsigned int v75;  // esi\n
    unsigned int v76;  // edi\n
    struct struct_1 **v77;  // eax\n
    struct_1 *v79;  // esi\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = v7;\n
    if (!v8)\n
    {\n
        return 1;\n
    }\n
    else if (!a0)\n
    {\n
        return 1;\n
    }\n
    else if (!a1)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v10 = v8->field_8;\n
        if (v10)\n
        {\n
            v11 = v8->field_20;\n
            v12 = v10 & 7;\n
            v13 = 0;\n
            if (&v10->field_0 + 1 >= 7)\n
            {\n
                v13 = 0;\n
                do\n
                {\n
                    v11[v13]->field_58 = 0;\n
                    v11[1 + v13]->field_58 = 0;\n
                    v11[2 + v13]->field_58 = 0;\n
                    v11[3 + v13]->field_58 = 0;\n
                    v11[4 + v13]->field_58 = 0;\n
                    v11[5 + v13]->field_58 = 0;\n
                    v11[6 + v13]->field_58 = 0;\n
                    v11[7 + v13]->field_58 = 0;\n
                    v13 += 8;\n
                } while ((v10 & -8) != v13);\n
            }\n
            if (v12)\n
            {\n
                v14 = &v11[v13];\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15]->field_58 = 0;\n
                    v15 += 1;\n
                } while (v12 != v15);\n
            }\n
        }\n
        v16 = v8->field_4;\n
        if (v16)\n
        {\n
            v1 = &v8[1].field_4;\n
            v17 = 0;\n
            v18 = v10;\n
            do\n
            {\n
                v0 = v8->field_1c[v17].field_0;\n
                if (v0->field_184)\n
                {\n
                    if (!v18)\n
                    {\n
                        v18 = 0;\n
                    }\n
                    else\n
                    {\n
                        v2 = v17;\n
                        v19 = 0;\n
                        do\n
                        {\n
                            v20 = v8->field_20[v19].field_0;\n
                            if (cgc_flg_team_did_solve(v1, v20))\n
                                v20->field_58 = v20->field_58 + v0->field_180;\n
                            v19 += 1;\n
                            v10 = v8->field_8;\n
                        } while (v19 < v10);\n
                        v16 = v8->field_4;\n
                        v18 = v10;\n
                        v17 = v2;\n
                    }\n
                }\n
                v17 += 1;\n
            } while (v17 < v16);\n
        }\n
        v21 = (v10 < 5 ? 5 : v10);\n
        v22 = a1;\n
        v23 = a0;\n
        *(v23) = 0;\n
        *(v22) = 0;\n
        if (!v21)\n
            return 0;\n
        v24 = *(v22) * 5 - 5;\n
        if (v24 >= v8->field_8)\n
            v24 = 0;\n
        *(v22) = v24;\n
        v5 = v21;\n
        *(v23) = cgc_malloc(v21 * 4);\n
        v49 = cgc_malloc(v8->field_8 * 4);\n
        cgc_memcpy(v49, v8->field_20, v8->field_8 * 4);\n
        v3 = v24;\n
        if (v24 < v1)\n
        {\n
            v4 = v49;\n
            v25 = v49;\n
            v1 = v8->field_8;\n
            v26 = v1;\n
            v27 = v3;\n
            while (true)\n
            {\n
                v2 = v27;\n
                do\n
                {\n
                    v28 = v26;\n
                    v0 = v26;\n
                    v26 = 0;\n
                    tmp_6 = v28;\n
                    if (tmp_6 != 1)\n
                    {\n
                        v30 = 0;\n
                        do\n
                        {\n
                            v31 = (&v25->field_0)[v30];\n
                            if (v31->field_58 >= *((*((-4 + &v25->field_0 + 0x4 * v0)) + 88)))\n
                            {\n
                                (&v25->field_0)[v30] = (&v25->field_0)[v26];\n
                                (&v25->field_0)[v26] = v31;\n
                                v26 += 1;\n
                            }\n
                            v30 += 1;\n
                        } while (&v28->field_0 + 1 != v30);\n
                    }\n
                    v32 = v0;\n
                    v33 = *((-4 + &v25->field_0 + 0x4 * v32));\n
                    *((-4 + &v25->field_0 + 0x4 * v32)) = (&v25->field_0)[v26];\n
                    (&v25->field_0)[v26] = v33;\n
                    v34 = v2;\n
                    tmp_8 = v34;\n
                    v27 = v34 - v26;\n
                    if (tmp_8 == v26)\n
                    {\n
                        *(a0)->field_0 = v33;\n
                        v37 = v1;\n
                        v2 = v3 + 1;\n
                        v49 = v4;\n
                        if (v2 < v37 && v5 >= 2)\n
                        {\n
                            v47 = v49;\n
                            v42 = v37;\n
                            while (true)\n
                            {\n
                                v38 = v42;\n
                                v0 = v42;\n
                                v42 = 0;\n
                                tmp_6 = v38;\n
                                if (tmp_6 != 1)\n
                                {\n
                                    v40 = 0;\n
                                    do\n
                                    {\n
                                        v41 = (&v47->field_0)[v40];\n
                                        if (v41->field_58 >= *((*((-4 + &v47->field_0 + 0x4 * v0)) + 88)))\n
                                        {\n
                                            (&v47->field_0)[v40] = (&v47->field_0)[v42];\n
                                            (&v47->field_0)[v42] = v41;\n
                                            v42 += 1;\n
                                        }\n
                                        v40 += 1;\n
                                    } while (&v38->field_0 + 1 != v40);\n
                                }\n
                                v43 = v0;\n
                                v44 = *((v47 + v43 * 4 - 4));\n
                                *((v47 + v43 * 4 - 4)) = *((v47 + v42 * 4));\n
                                *((v47 + v42 * 4)) = v44;\n
                                v45 = v2;\n
                                tmp_8 = v45;\n
                                v46 = v45 - v42;\n
                                if (tmp_8 == v42)\n
                                    break;\n
                                if ([D] x86g_calculate_condition(0xc<32>, 0x6<32>, eax<4>, esi<4>, 0x0<32>))\n
                                    continue;\n
                                v47 += v42 * 4;\n
                                v42 = v0 - v42;\n
                                v2 = v46;\n
                            }\n
                            *(a0)->field_4 = v44;\n
                            v48 = v1;\n
                            v2 = v3 + 2;\n
                            v49 = v4;\n
                            if (v2 < v48 && v5 >= 3)\n
                            {\n
                                v50 = v49;\n
                                v51 = v48;\n
                                while (true)\n
                                {\n
                                    v52 = v51;\n
                                    v0 = v51;\n
                                    v51 = 0;\n
                                    tmp_6 = v52;\n
                                    if (tmp_6 != 1)\n
                                    {\n
                                        v54 = 0;\n
                                        do\n
                                        {\n
                                            v55 = (&v50->field_0)[v54];\n
                                            if (v55->field_58 >= *((*((-4 + &v50->field_0 + 0x4 * v0)) + 88)))\n
                                            {\n
                                                (&v50->field_0)[v54] = (&v50->field_0)[v51];\n
                                                (&v50->field_0)[v51] = v55;\n
                                                v51 += 1;\n
                                            }\n
                                            v54 += 1;\n
                                        } while (&v52->field_0 + 1 != v54);\n
                                    }\n
                                    v56 = v0;\n
                                    v57 = *((v50 + v56 * 4 - 4));\n
                                    *((v50 + v56 * 4 - 4)) = *((v50 + v51 * 4));\n
                                    *((v50 + v51 * 4)) = v57;\n
                                    v58 = v2;\n
                                    tmp_8 = v58;\n
                                    v59 = v58 - v51;\n
                                    if (tmp_8 == v51)\n
                                        break;\n
                                    if ([D] x86g_calculate_condition(0xc<32>, 0x6<32>, eax<4>, esi<4>, 0x0<32>))\n
                                        continue;\n
                                    v50 += v51 * 4;\n
                                    v51 = v0 - v51;\n
                                    v2 = v59;\n
                                }\n
                                *(a0)->field_8 = v57;\n
                                v60 = v1;\n
                                v2 = v3 + 3;\n
                                v49 = v4;\n
                                if (v2 < v60 && v5 >= 4)\n
                                {\n
                                    v61 = v49;\n
                                    v62 = v60;\n
                                    while (true)\n
                                    {\n
                                        v63 = v62;\n
                                        v0 = v62;\n
                                        v62 = 0;\n
                                        tmp_6 = v63;\n
                                        if (tmp_6 != 1)\n
                                        {\n
                                            v65 = 0;\n
                                            do\n
                                            {\n
                                                v66 = (&v61->field_0)[v65];\n
                                                if (v66->field_58 >= *((*((-4 + &v61->field_0 + 0x4 * v0)) + 88)))\n
                                                {\n
                                                    (&v61->field_0)[v65] = (&v61->field_0)[v62];\n
                                                    (&v61->field_0)[v62] = v66;\n
                                                    v62 += 1;\n
                                                }\n
                                                v65 += 1;\n
                                            } while (&v63->field_0 + 1 != v65);\n
                                        }\n
                                        v67 = v0;\n
                                        v68 = *((v61 + v67 * 4 - 4));\n
                                        *((v61 + v67 * 4 - 4)) = *((v61 + v62 * 4));\n
                                        *((v61 + v62 * 4)) = v68;\n
                                        v69 = v2;\n
                                        tmp_8 = v69;\n
                                        v70 = v69 - v62;\n
                                        if (tmp_8 == v62)\n
                                            break;\n
                                        if ([D] x86g_calculate_condition(0xc<32>, 0x6<32>, eax<4>, esi<4>, 0x0<32>))\n
                                            continue;\n
                                        v61 += v62 * 4;\n
                                        v62 = v0 - v62;\n
                                        v2 = v70;\n
                                    }\n
                                    *(a0)->field_c = v68;\n
                                    v3 += 1;\n
                                    v49 = v4;\n
                                    if (v3 < v1 && v5 >= 5)\n
                                    {\n
                                        v71 = v49;\n
                                        while (true)\n
                                        {\n
                                            v72 = v1;\n
                                            if (v72 == 1)\n
                                            {\n
                                                v1 = 0;\n
                                            }\n
                                            else\n
                                            {\n
                                                v1 = 0;\n
                                                v73 = 0;\n
                                                do\n
                                                {\n
                                                    v74 = *((v71 + v73 * 4));\n
                                                    if (v74->field_58 >= *((*((v71 + (v72 << 2) - 4)) + 88)))\n
                                                    {\n
                                                        *((v71 + v73 * 4)) = *((v71 + v1 * 4));\n
                                                        *((v71 + v1 * 4)) = v74;\n
                                                        v1 += 1;\n
                                                    }\n
                                                    v73 += 1;\n
                                                } while (&v72->field_0 + 1 != v73);\n
                                            }\n
                                            v75 = *((v71 + v72 * 4 - 4));\n
                                            v76 = v1;\n
                                            *((v71 + v72 * 4 - 4)) = *((v71 + v76 * 4));\n
                                            *((v71 + v76 * 4)) = v75;\n
                                            v77 = v3;\n
                                            tmp_8 = v77;\n
                                            if (tmp_8 == v76)\n
                                                break;\n
                                            if (!([D] x86g_calculate_condition(0xc<32>, 0x6<32>, eax<4>, esi<4>, 0x0<32>)))\n
                                            {\n
                                                v79 = v1;\n
                                                v71 += v79 * 4;\n
                                                v1 = v72 - v79;\n
                                                v3 = v77 - v76;\n
                                            }\n
                                        }\n
                                        *(a0)->field_10 = v75;\n
                                        v49 = v4;\n
                                        goto LABEL_405993;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                } while ([D] x86g_calculate_condition(0xc<32>, 0x6<32>, eax<4>, esi<4>, 0x0<32>));\n
                v35 = &(&v25->field_0)[v26];\n
                v36 = v0 - v26;\n
            }\n
        }\n
LABEL_405993:\n
        cgc_free(v49);\n
    }\n
}\n
", "4216073:sub_405509": null, "4216131:sub_405543": null, "4216207:sub_40558f": null, "4216403:sub_405653": null, "4216456:sub_405688": null, "4216579:sub_405703": null, "4216632:sub_405738": null, "4216755:sub_4057b3": null, "4216808:sub_4057e8": null, "4216931:sub_405863": null, "4216984:sub_405898": null, "4217111:sub_405917": null, "4217257:sub_4059a9": null, "4217264:cgc_ctf_get_team": "int cgc_ctf_get_team(unsigned int v0[9], unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int v1[9];  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // edx\n
    unsigned int *v4;  // esi\n
\n
    v1 = v0;\n
    v2 = 1;\n
    if (v1)\n
    {\n
        v3 = a0;\n
        if (v3)\n
        {\n
            v4 = a1;\n
            v2 = 7;\n
            if (v1[2] > v4)\n
            {\n
                *(v3) = *((v1[8] + v4 * 4));\n
                v2 = 0;\n
            }\n
        }\n
    }\n
    return v2;\n
}\n
", "4217312:cgc_ctf_get_chal": "int cgc_ctf_get_chal(unsigned int v0[8], unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int v1[8];  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // edx\n
    unsigned int *v4;  // esi\n
\n
    v1 = v0;\n
    v2 = 1;\n
    if (v1)\n
    {\n
        v3 = a0;\n
        if (v3)\n
        {\n
            v4 = a1;\n
            v2 = 6;\n
            if (v1[1] > v4)\n
            {\n
                *(v3) = *((v1[7] + v4 * 4));\n
                v2 = 0;\n
            }\n
        }\n
    }\n
    return v2;\n
}\n
", "4217360:cgc_error_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_error_to_string(unsigned int v0)\n
{\n
    if (v0 <= 15)\n
        return *(&(&_GLOBAL_OFFSET_TABLE_)[3188 + 4 * v0]);\n
    return \"Unknown error.\";\n
}\n
", "4217396:sub_405a34": null, "4217408:cgc_flg_init": "int cgc_flg_init(unsigned int v0[6], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1[6];  // ebp\n
\n
    v1 = v0;\n
    v0[0] = 0;\n
    v0[1] = 0;\n
    v0[2] = 16;\n
    v1[3] = cgc_malloc(64);\n
    v1[4] = a0;\n
    v1[5] = a1;\n
    return 0;\n
}\n
", "4217491:sub_405a93": null, "4217504:cgc_flg_is_duplicate": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    struct struct_3 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_flg_is_duplicate(struct_2 *v0, unsigned int a0, char *a1)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct struct_0 **v3;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v4;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_0;\n
    if (v2)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v4 = v1->field_c[v3].field_0;\n
            if (v4->field_0 == a0)\n
            {\n
                if (cgc_strcmp(v4->field_8, a1))\n
                    v2 = v1->field_0;\n
                else\n
                    return 1;\n
            }\n
            v3 += 1;\n
        } while (v3 < v2);\n
    }\n
    return 0;\n
}\n
", "4217541:sub_405ac5": null, "4217612:sub_405b0c": null, "4217616:cgc_flg_add_submit": "typedef struct struct_10 {\n
    struct struct_6 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    struct struct_6 *field_c;\n
    struct struct_11 *field_10;\n
    struct struct_8 *field_14;\n
} struct_10;\n
\n
typedef struct struct_5 {\n
    struct struct_6 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    struct struct_6 *field_c;\n
    struct struct_7 *field_10;\n
    struct struct_8 *field_14;\n
} struct_5;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char *field_8;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[388];\n
    unsigned int field_184;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    struct struct_2 *field_0;\n
} struct_6;\n
\n
typedef struct struct_11 {\n
    struct struct_9 *field_0;\n
} struct_11;\n
\n
typedef struct struct_8 {\n
    unsigned int field_0;\n
} struct_8;\n
\n
typedef struct struct_7 {\n
    struct struct_4 *field_0;\n
} struct_7;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_9 {\n
    char padding_0[396];\n
    unsigned int field_18c;\n
} struct_9;\n
\n
typedef struct struct_4 {\n
    char padding_0[396];\n
    char *field_18c;\n
} struct_4;\n
\n
int cgc_flg_add_submit(struct_10 *v2, unsigned int a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_1 *v1;  // [bp-0x14]\n
    struct_5 *v3;  // ebp\n
    unsigned int v5;  // edi\n
    struct struct_2 **v6;  // eax, Other Possible Types: unsigned int\n
    struct_3 *v7;  // ecx\n
    struct struct_2 **v8;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v9;  // esi, Other Possible Types: unsigned int\n
    char *v10;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v11;  // esi\n
    struct_0 *v12;  // eax\n
    struct struct_2 **v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
\n
    v3 = v2;\n
    if (!v2)\n
        return 1;\n
    v5 = a0;\n
    if (!v5)\n
    {\n
        return 1;\n
    }\n
    else if (!a1)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v6 = v3->field_0;\n
        if (v6)\n
        {\n
            v8 = 0;\n
            do\n
            {\n
                v7 = v3->field_c[v8].field_0;\n
                if (v7->field_0 == v5)\n
                {\n
                    if (cgc_strcmp(v7->field_8, a1))\n
                        v6 = v3->field_0;\n
                    else\n
                        return 9;\n
                }\n
                v8 += 1;\n
            } while (v8 < v6);\n
        }\n
        v1 = cgc_malloc(24);\n
        v1->field_0 = v5;\n
        if (!v3->field_14->field_0)\n
        {\n
            v0 = 10;\n
            v10 = a1;\n
        }\n
        else\n
        {\n
            v9 = 0;\n
            v10 = a1;\n
            do\n
            {\n
                if (!cgc_strcmp(v3->field_10[v9].field_0->field_18c, v10))\n
                {\n
                    v1->field_4 = &v3->field_10[v9].field_0->padding_0[0];\n
                    v0 = 0;\n
                    goto LABEL_405c13;\n
                }\n
                v9 += 1;\n
            } while (v9 < v3->field_14->field_0);\n
            v0 = 10;\n
        }\n
LABEL_405c13:\n
        v11 = v1;\n
        v11->field_c = v11->field_4;\n
        v11->field_10 = v3->field_0;\n
        v11->field_8 = cgc_strdup(v10);\n
        v12 = v11->field_4;\n
        if (v12 && v12->field_184 == 3)\n
            v12->field_184 = 1;\n
        v13 = v3->field_0;\n
        v14 = v3->field_8;\n
        if (v14 != v13)\n
        {\n
            v15 = v3->field_c;\n
        }\n
        else\n
        {\n
            v15 = cgc_realloc(v3->field_c, v14 * 8);\n
            v3->field_c = v15;\n
            v3->field_8 = v3->field_8 * 2;\n
            v13 = v3->field_0;\n
        }\n
        v3->field_0 = v13 + 1;\n
        *((v15 + v13 * 4)) = v1;\n
        return v0;\n
    }\n
}\n
", "4217686:sub_405b56": null, "4218008:sub_405c98": null, "4218016:cgc_flg_find_chal": "typedef struct struct_5 {\n
    char padding_0[16];\n
    struct struct_6 *field_10;\n
    struct struct_3 *field_14;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_2 *field_10;\n
    struct struct_3 *field_14;\n
} struct_1;\n
\n
typedef struct struct_6 {\n
    struct struct_4 *field_0;\n
} struct_6;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[396];\n
    unsigned int field_18c;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[396];\n
    char *field_18c;\n
} struct_0;\n
\n
int cgc_flg_find_chal(struct_5 *v0, unsigned int *a0, char *a1)\n
{\n
    struct_1 *v1;  // edi\n
    unsigned int *v3;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        return 1;\n
    }\n
    else if (!a0)\n
    {\n
        return 1;\n
    }\n
    else if (!a1)\n
    {\n
        return 1;\n
    }\n
    else if (!v1->field_14->field_0)\n
    {\n
        return 6;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        while (true)\n
        {\n
            if (!cgc_strcmp(v1->field_10[v3].field_0->field_18c, a1))\n
            {\n
                *(a0) = v1->field_10[v3].field_0;\n
                return 0;\n
            }\n
            v3 += 1;\n
            if (v3 >= v1->field_14->field_0)\n
                return 6;\n
        }\n
    }\n
}\n
", "4218147:sub_405d23": null, "4218160:cgc_flg_get_solves": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    struct struct_2 *field_c;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flg_get_solves(struct_1 *v1, struct struct_4 **a0, unsigned int a1, unsigned int *a2)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    struct_1 *v2;  // esi\n
    struct struct_4 **v4;  // edi\n
    unsigned int *v5;  // edx\n
    unsigned int v6;  // ecx\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    struct struct_3 **v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
    struct struct_4 **v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // edx\n
    unsigned int *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // ebx, Other Possible Types: unsigned int\n
    struct struct_0 **v15;  // edi, Other Possible Types: unsigned int\n
    struct_3 *v16;  // ebx\n
    unsigned int v17[4];  // ebp\n
\n
    v2 = v1;\n
    if (!v2)\n
        return 1;\n
    v4 = a0;\n
    if (!v4)\n
        return 1;\n
    v5 = a2;\n
    if (!v5)\n
        return 1;\n
    if (!a1)\n
    {\n
        v9 = v2->field_0;\n
        if (v9 < v9)\n
            v9 = *(v5);\n
        *(v5) = v9;\n
        if (v9)\n
        {\n
            *(v4) = cgc_malloc(v9 * 4);\n
            v10 = v4;\n
            v11 = v2->field_0;\n
            v12 = 0;\n
            if (!v11)\n
                goto LABEL_405ec1;\n
        }\n
        else\n
        {\n
            v10 = v4;\n
            *(v4) = 0;\n
            v11 = v2->field_0;\n
            v12 = 0;\n
            if (!v11)\n
                goto LABEL_405ec1;\n
        }\n
        v12 = 0;\n
        while (v12 < *(a2))\n
        {\n
            v16 = v2->field_c[1 + v11].field_0;\n
            if (v16->field_c)\n
            {\n
                *((*(v10) + v12 * 4)) = v16;\n
                v12 += 1;\n
            }\n
            tmp_2 = v11;\n
            v11 -= 1;\n
            if (tmp_2 == 1)\n
                break;\n
        }\n
LABEL_405ec1:\n
        *(a2) = v12;\n
    }\n
    else\n
    {\n
        v6 = v2->field_0;\n
        if (!v6)\n
        {\n
            *(v5) = 0;\n
        }\n
        else\n
        {\n
            v0 = &_GLOBAL_OFFSET_TABLE_;\n
            v7 = 0;\n
            v8 = 0;\n
            while (v7 < *(v5))\n
            {\n
                if (v2->field_c[v8].field_0->field_4 == a1)\n
                    v7 = v7 - -1 - (v2->field_c[v8].field_0->field_c < 1);\n
                v8 += 1;\n
                if (v6 == v8)\n
                    break;\n
            }\n
            *(a2) = v7;\n
            if (v7)\n
            {\n
                *(a0) = cgc_malloc(v7 * 4);\n
                v13 = v2->field_0;\n
                if (v13)\n
                {\n
                    v14 = 0;\n
                    v15 = 0;\n
                    while (v14 < *(a2))\n
                    {\n
                        v17 = v2->field_c[v15].field_0;\n
                        if (v2->field_c[v15].field_0->field_4 == a1 && v17[3])\n
                        {\n
                            (*(a0))[v14].field_0 = v17;\n
                            v14 += 1;\n
                        }\n
                        v15 += 1;\n
                        if (v13 == v15)\n
                            break;\n
                    }\n
                }\n
                goto LABEL_405ec7;\n
            }\n
        }\n
        *(a0) = 0;\n
    }\n
LABEL_405ec7:\n
    return 0;\n
}\n
", "4218253:sub_405d8d": null, "4218353:sub_405df1": null, "4218513:sub_405e91": null, "4218577:sub_405ed1": null, "4218592:cgc_flg_team_did_solve": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    struct struct_2 *field_c;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_flg_team_did_solve(struct_1 *v0, unsigned int a0, unsigned int a1)\n
{\n
    struct_1 *v1;  // edi\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    struct struct_0 **v6;  // edi\n
    unsigned int v7[4];  // ebp\n
    unsigned int v8;  // ebx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    v4 = a1;\n
    if (!v4)\n
        return 1;\n
    v5 = v1->field_0;\n
    if (!v5)\n
        return 0;\n
    v6 = v1->field_c;\n
    v8 = 0;\n
    do\n
    {\n
        v7 = v6[v8];\n
        if (v6[v8]->field_c && v7[0] == v3 && v7[1] == v4)\n
            return 1;\n
        v8 += 1;\n
    } while (v5 != v8);\n
}\n
", "4218638:sub_405f0e": null, "4218675:sub_405f33": null, "4218688:cgc_prng": "extern unsigned int r;\n
\n
int cgc_prng()\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = r;\n
    r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
    return (v1 / 0x40000000 ^ v1 ^ v1 / 0x400 ^ v1 / 0x80000000 CONCAT v1) * 0x80000000 >> 32;\n
}\n
", "4218742:sub_405f76": null, "4218752:cgc_random_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int r;\n
\n
int cgc_random_string(unsigned int v0, unsigned int a0)\n
{\n
    char *v1;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    if (!a0)\n
        return (&_GLOBAL_OFFSET_TABLE_)[14219 + 64 * ((((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4) + ((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32)];\n
    v1 = 0;\n
    do\n
    {\n
        v2 = (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4;\n
        r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
        *((v0 + v1)) = (&_GLOBAL_OFFSET_TABLE_)[14219 + r + v2 + v2 + -64 * v2];\n
        v1 += 1;\n
    } while (a0 != v1);\n
    return (&_GLOBAL_OFFSET_TABLE_)[14219 + 64 * ((((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4) + ((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32)];\n
}\n
", "4218875:sub_405ffb": null, "4218880:cgc_print_main_menu": "int cgc_print_main_menu()\n
{\n
    cgc_printf(\"\\n
=== Menu ===================\\n
\");\n
    cgc_printf(\"1. Register User\\n
\");\n
    cgc_printf(\"2. Login User\\n
\");\n
    cgc_printf(\"3. Quit\\n
\");\n
    return cgc_printf(\"> \");\n
}\n
", "4218971:sub_40605b": null, "4218976:cgc_is_alphanum": "int cgc_is_alphanum(char *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // edi\n
    char *v3;  // edi\n
    unsigned int v5;  // ebp\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (cgc_strlen(v3) == 1)\n
        return 1;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (!cgc_isalnum(v3[v5]))\n
            return 0;\n
        v5 += 1;\n
        if (v5 >= cgc_strlen(v3) - 1)\n
            return 1;\n
    }\n
}\n
", "4219072:cgc_handle_register_user": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[20];\n
    struct struct_1 *field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
extern char g_4089aa;\n
extern unsigned int r;\n
\n
int cgc_handle_register_user(struct_0 *v7)\n
{\n
    char v0[33];  // [bp-0x1a4], Other Possible Types: unsigned int\n
    int tmp_2;  // tmp #2\n
    void* v1;  // [bp-0x1a0]\n
    void* v2;  // [bp-0x19c]\n
    unsigned int v3;  // [bp-0x198]\n
    unsigned int v4;  // [bp-0x194]\n
    char v5;  // [bp-0x190]\n
    char v6;  // [bp-0x90]\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    struct_0 *v14;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v15;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // eax\n
    char v19[33];  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    *(&v0[0]) = 0;\n
    v8 = cgc_user_new();\n
    v9 = 0;\n
    if (v8)\n
    {\n
LABEL_4060f8:\n
        v12 = v8;\n
        goto LABEL_4060fa;\n
    }\n
    cgc_printf(\"\\n
=== User Creation ===================\\n
\");\n
    cgc_printf(\"Nickname: \");\n
    cgc_fflush(cgc_stdout);\n
    v3 = cgc_stdin;\n
    if (cgc_freaduntil(&v5, 0x100, 10, cgc_stdin) <= 0)\n
    {\n
LABEL_4064a2:\n
        v12 = 15;\n
        goto LABEL_4060fa;\n
    }\n
    v2 = cgc_stdout;\n
    if (cgc_strlen(&v5) != 1)\n
    {\n
        v10 = 0;\n
        do\n
        {\n
            if (!cgc_isalnum((&v5)[v10]))\n
                goto LABEL_40633d;\n
            v10 += 1;\n
        } while (v10 < cgc_strlen(&v5) - 1);\n
    }\n
    v8 = cgc_user_set_nick(v1);\n
    if (!(!v8))\n
        goto LABEL_4060f8;\n
    cgc_printf(\"Password: \");\n
    cgc_fflush(v2);\n
    if (cgc_freaduntil(&v5, 0x100, 10, v3) <= 0)\n
        goto LABEL_4064a2;\n
    if (cgc_strlen(&v5) != 1)\n
    {\n
        v11 = 0;\n
    }\n
    else\n
    {\n
LABEL_406277:\n
        v12 = cgc_user_set_pass(v1);\n
        if (!(!v12))\n
            goto LABEL_4060fa;\n
        cgc_printf(\"Team token: \");\n
        cgc_fflush(v2);\n
        v9 = 0;\n
        if (cgc_freaduntil(&v5, 0x100, 10, v3) < 0)\n
        {\n
            v12 = 0;\n
            goto LABEL_4060fa;\n
        }\n
        v13 = cgc_strcmp(&v5, &g_4089aa);\n
        if (v13)\n
        {\n
            v14 = v7;\n
            v12 = 7;\n
            if (!v14->field_8)\n
                goto LABEL_4060fa;\n
            v4 = v13;\n
            v15 = 0;\n
            do\n
            {\n
                if (!cgc_memcmp(*((*((v14 + 32)) + (v15 << 2))), &v5, 32))\n
                {\n
                    v14 = v7;\n
                    v0 = v14->field_20[v15].field_0;\n
                    v16 = v14->field_8;\n
                    break;\n
                }\n
                v15 += 1;\n
                v14 = v7;\n
                v16 = *((v14 + 8));\n
            } while (v15 < v16);\n
            tmp_2 = v15;\n
            v9 = 0;\n
            if (tmp_2 == v16)\n
                goto LABEL_4060fa;\n
            goto LABEL_4064cd;\n
        }\n
        else\n
        {\n
            v4 = v13;\n
            v8 = cgc_team_new();\n
            if (!(!v8))\n
                goto LABEL_4060f8;\n
            cgc_printf(\"\\n
=== Team Creation ===================\\n
\");\n
            cgc_printf(\"Team name: \");\n
            cgc_fflush(v2);\n
            if (cgc_freaduntil(&v5, 0x100, 10, v3) > 0)\n
            {\n
                v8 = cgc_team_change_name(v0);\n
                if (!(!v8))\n
                    goto LABEL_4060f8;\n
                cgc_printf(\"Shoutout: \");\n
                cgc_fflush(v2);\n
                if (cgc_freaduntil(&v6, 0x100, 10, v3) > 0)\n
                {\n
                    v12 = cgc_team_set_shoutout(v0);\n
                    if (!(!v12))\n
                        goto LABEL_4060fa;\n
                    v17 = 0;\n
                    do\n
                    {\n
                        r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
                        v0[v17] = (&_GLOBAL_OFFSET_TABLE_)[14219 + 64 * ((((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4) + ((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32)];\n
                        v17 += 1;\n
                    } while (v17 != 32);\n
                    v0[32] = 0;\n
                    v9 = 1;\n
                    v14 = v7;\n
LABEL_4064cd:\n
                    v8 = cgc_ctf_add_user(v14, v1);\n
                    if (!v8)\n
                    {\n
                        if (!v4)\n
                        {\n
                            v18 = cgc_ctf_add_team(v14, v0);\n
                            if (v18)\n
                            {\n
                                v12 = v18;\n
                                v9 = 1;\n
LABEL_4060fa:\n
                                cgc_error_to_string(v12);\n
                                cgc_printf(\"[ERROR] ;s\\n
\");\n
                                v19 = v1;\n
                                if (v19)\n
                                    v19 = cgc_free(v19);\n
                                if (!v9)\n
                                    return v19;\n
                                v19 = v0;\n
                                if (v19)\n
                                    v19 = cgc_free(v19);\n
                            }\n
                        }\n
                        v8 = cgc_team_add_member(v0);\n
                        if (!v8)\n
                        {\n
                            v12 = cgc_user_set_team(v1, v0);\n
                            if (!v12)\n
                            {\n
                                v19 = cgc_printf(\"[INFO] Successfully registered.\\n
\");\n
                                if (!v4)\n
                                {\n
                                    v19 = cgc_printf(\"[INFO] Team code: ;s\\n
\");\n
                                    return v19;\n
                                }\n
                                return v19;\n
                            }\n
                            goto LABEL_4060fa;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    while (cgc_isalnum((&v5)[v11]))\n
    {\n
        v11 += 1;\n
        if (!(v11 < cgc_strlen(&v5) - 1))\n
            goto LABEL_406277;\n
    }\n
LABEL_40633d:\n
    v9 = 0;\n
    v12 = 15;\n
    goto LABEL_4060fa;\n
}\n
", "4220296:sub_406588": null, "4220304:cgc_handle_login_user": "extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_login_user(unsigned int v2)\n
{\n
    char v0;  // [bp-0x90]\n
    char v1;  // [bp-0x50]\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // edi\n
    void* v6;  // eax\n
\n
    cgc_printf(\"\\n
=== Login ===================\\n
\");\n
    cgc_printf(\"Nick: \");\n
    cgc_fflush(cgc_stdout);\n
    v3 = 15;\n
    if (cgc_freaduntil(&v0, 64, 10, cgc_stdin) <= 0)\n
    {\n
LABEL_4066fc:\n
        cgc_error_to_string(v3);\n
        return cgc_printf(\"[ERROR] ;s\\n
\");\n
    }\n
    if (cgc_strlen(&v0) != 1)\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (!cgc_isalnum((&v0)[v4]))\n
                goto LABEL_4066f7;\n
            v4 += 1;\n
        } while (v4 < cgc_strlen(&v0) - 1);\n
    }\n
    cgc_printf(\"Password: \");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(&v1, 64, 10, cgc_stdin) > 0)\n
    {\n
        if (cgc_strlen(&v1) != 1)\n
        {\n
            v5 = 0;\n
        }\n
        else\n
        {\n
LABEL_4066c3:\n
            v6 = v2;\n
            v3 = cgc_ctf_auth_user(v6, v6 + 64, &v0, &v1);\n
            if (!v3)\n
                return cgc_printf(\"[INFO] Successfully logged in as ;s.\\n
\");\n
            goto LABEL_4066fc;\n
        }\n
        while (cgc_isalnum((&v1)[v5]))\n
        {\n
            v5 += 1;\n
            if (!(v5 < cgc_strlen(&v1) - 1))\n
                goto LABEL_4066c3;\n
        }\n
    }\n
LABEL_4066f7:\n
    v3 = 15;\n
    goto LABEL_4066fc;\n
}\n
", "4220705:sub_406721": null, "4220720:cgc_print_ctf_ticker": "int cgc_print_ctf_ticker(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    struct struct_1 **v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // edi\n
    void* v7;  // edi\n
    unsigned int v8;  // edi\n
    struct struct_1 **v9;  // eax\n
\n
    v4 = v6;\n
    v7 = v5;\n
    v1 = 1;\n
    v3 = 0;\n
    cgc_ctf_get_ranks(v7, &v3, &v1);\n
    cgc_free(v3);\n
    cgc_printf(\"\\n
================================\\n
\");\n
    cgc_printf(\"| [;s] - ;d\\n
\");\n
    cgc_printf(\"================================\\n
\");\n
    v2 = 0;\n
    v1 = 5;\n
    cgc_ctf_get_solves(v7, &v2, &v1);\n
    if (!v1)\n
    {\n
        cgc_printf(\"No solves yet.\\n
\");\n
        if (!v1)\n
            goto LABEL_406828;\n
    }\n
    v8 = 0;\n
    do\n
    {\n
        v0 = v2[v8]->field_4->field_180;\n
        cgc_printf(\"| ;s solved ;s (;d pts)\\n
\");\n
        v8 += 1;\n
    } while (v8 < v1);\n
LABEL_406828:\n
    v9 = v2;\n
    if (!v9)\n
        return cgc_printf(\"================================\\n
\");\n
    cgc_free(v9);\n
    return cgc_printf(\"================================\\n
\");\n
}\n
", "4221005:sub_40684d": null, "4221008:cgc_print_ctf_menu": "int cgc_print_ctf_menu(unsigned int v0)\n
{\n
    cgc_print_ctf_ticker(v0);\n
    cgc_printf(\"\\n
=== CTF Menu ===================\\n
\");\n
    cgc_printf(\"1. View challenge list\\n
\");\n
    cgc_printf(\"2. View challenge detail\\n
\");\n
    cgc_printf(\"3. View ranking\\n
\");\n
    cgc_printf(\"4. View team profile\\n
\");\n
    cgc_printf(\"5. Submit flag\\n
\");\n
    cgc_printf(\"6. Logout\\n
\");\n
    return cgc_printf(\"> \");\n
}\n
", "4221153:sub_4068e1": null, "4221168:cgc_print_challenge": "typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
} struct_0;\n
\n
int cgc_print_challenge(struct_1 *v6, unsigned int a0[99], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2[99];  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x1c]\n
    void* v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7[99];  // ebp\n
    struct_1 *v8;  // edi\n
    void* v10;  // edi\n
    unsigned int v11;  // eax\n
    void* v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
\n
    v7 = a0;\n
    v8 = v6;\n
    v5 = cgc_chal_cat_to_string(a0[98]);\n
    v10 = &v8->padding_0[40];\n
    v11 = (!cgc_flg_team_did_solve(v10, v8->field_40->field_30, v7) ? 2 : v7[97]);\n
    cgc_chal_status_to_string(v11);\n
    v2[0] = v7;\n
    v1 = v7[96];\n
    v0 = v5;\n
    v13 = cgc_printf(\"[;s] [;d pts] ;s - ;s\\n
\");\n
    if (!a1)\n
        return v13;\n
    cgc_printf(v6);\n
    v4 = 0;\n
    v3 = 3;\n
    v13 = cgc_flg_get_solves(v10, &v4, v7, &v3);\n
    if (!v3)\n
        return v13;\n
    cgc_printf(\"\\n
Top Solvers\\n
\");\n
    cgc_printf(\"===========\\n
\");\n
    if (v3)\n
    {\n
        v12 = 0;\n
        do\n
        {\n
            v12 += 1;\n
            cgc_printf(\";d. ;s\\n
\");\n
        } while (v12 < v3);\n
    }\n
    v13 = cgc_free(v4);\n
    return v13;\n
}\n
", "4221497:sub_406a39": null, "4221504:cgc_handle_view_challenge_list": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[20];\n
    struct struct_3 *field_1c;\n
    char padding_20[32];\n
    struct struct_1 *field_40;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[384];\n
    unsigned int field_180;\n
    unsigned int field_184;\n
    unsigned int field_188;\n
} struct_0;\n
\n
int cgc_handle_view_challenge_list(struct_2 *v7)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2[99];  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    struct_2 *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v9[99];  // edi\n
    unsigned int v10;  // esi\n
    struct struct_0 **v11;  // ebp, Other Possible Types: unsigned int\n
\n
    if (!v7->field_4)\n
    {\n
        v8 = cgc_printf(\"[INFO] No challenges are available.\\n
\");\n
        return v8;\n
    }\n
    cgc_printf(\"\\n
=== Challenge list ===================\\n
\");\n
    v8 = v7;\n
    if (!v8->field_4)\n
        return v8;\n
    v5 = &v7->padding_20[8];\n
    v11 = 0;\n
    v4 = \";d. \";\n
    v3 = \"[;s] [;d pts] ;s - ;s\\n
\";\n
    do\n
    {\n
        cgc_printf(v4);\n
        v9 = v7->field_1c[v11].field_0;\n
        v6 = cgc_chal_cat_to_string(v9[98]);\n
        v10 = v9[97];\n
        if (cgc_flg_team_did_solve(v5, v7->field_40->field_30, v9))\n
            v10 = 2;\n
        cgc_chal_status_to_string(v10);\n
        v2[0] = v9;\n
        v1 = v9[96];\n
        v0 = v6;\n
        cgc_printf(v3);\n
        v11 += 1;\n
        v8 = v7;\n
    } while (v11 < v8->field_4);\n
}\n
", "4221785:sub_406b59": null, "4221792:cgc_handle_view_challenge_detail": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_view_challenge_detail(struct_0 *v3)\n
{\n
    void* v0;  // [bp-0x30]\n
    char v1[2];  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v2 = v4;\n
    v5 = v3;\n
    v6 = cgc_handle_view_challenge_list(v5);\n
    if (!v5->field_4)\n
        return v6;\n
    cgc_printf(\"\\n
Choose idx: \");\n
    cgc_fflush(cgc_stdout);\n
    cgc_freaduntil(v1, 32, 10, cgc_stdin);\n
    v0 = 0;\n
    v7 = cgc_ctf_get_chal(v5, &v0, cgc_strtoul(v1, NULL, 10));\n
    if (!v7)\n
    {\n
        cgc_printf(\"\\n
=== Challenge detail ===================\\n
\");\n
        v6 = cgc_print_challenge(v5, v0, 1);\n
    }\n
    else\n
    {\n
        cgc_error_to_string(v7);\n
        v6 = cgc_printf(\"[ERROR] ;s\\n
\");\n
    }\n
    return v6;\n
}\n
", "4222005:sub_406c35": null, "4222016:cgc_view_ranking_page": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_view_ranking_page(struct_0 *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    struct_0 *v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v3 = v2;\n
    v4 = (v4 < 5 ? 5 : -(a0 * 5) + v3->field_8 + 5);\n
    v1 = 0;\n
    cgc_ctf_get_ranks(v3, &v1, &a0);\n
    if (!v4)\n
        return cgc_free(v1);\n
    v6 = 1;\n
    do\n
    {\n
        v0 = *((*((-4 + v1 + 4 * v6)) + 88));\n
        cgc_printf(\";d. ;s (;d pts)\\n
\");\n
        v7 = -(v4) + v6 + 1;\n
        v6 += 1;\n
    } while (v7 != 1);\n
    return cgc_free(v1);\n
}\n
", "4222196:sub_406cf4": null, "4222208:cgc_handle_view_ranking": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_view_ranking(struct_0 *v8)\n
{\n
    unsigned int v0[5];  // [bp-0x4c], Other Possible Types: void*\n
    void* v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    char *v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    struct_0 *v9;  // esi\n
    unsigned int v10;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    struct_0 *v17;  // edx\n
    unsigned int v18;  // ebp\n
    unsigned int v19;  // ebp\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // esi\n
    struct_1 *v23;  // edi, Other Possible Types: unsigned int\n
\n
    v9 = v8;\n
    cgc_printf(\"\\n
=== Ranking ===================\\n
\");\n
    v2 = (v10 * 3435973837 >> 32 >> 2) - -1 - (v10 * 3435973837 < 858993460);\n
    v7 = 1;\n
    v10 = (v10 < 5 ? 5 : v9->field_8);\n
    v0 = 0;\n
    cgc_ctf_get_ranks(v9, &v0, &v7);\n
    if (v10)\n
    {\n
        v12 = 1;\n
        do\n
        {\n
            cgc_printf(\";d. ;s (;d pts)\\n
\");\n
            v13 = -(v10) + v12 + 1;\n
            v12 += 1;\n
        } while (v13 != 1);\n
    }\n
    cgc_free(v0);\n
    v22 = v2;\n
    cgc_printf(\"\\n
=== 1 / ;d ===================\\n
\");\n
    v5 = \"\\n
Page: \";\n
    cgc_printf(\"\\n
Page: \");\n
    v4 = cgc_stdout;\n
    cgc_fflush(cgc_stdout);\n
    v3 = cgc_stdin;\n
    v23 = &v7;\n
    if (cgc_freaduntil(&v7, 32, 10, cgc_stdin) >= 0)\n
    {\n
        v6 = \"q\";\n
        while (true)\n
        {\n
            v14 = cgc_strcmp(v23, v6);\n
            if (!v14)\n
                return v14;\n
            v15 = cgc_strtoul(v23, NULL, 10);\n
            if (!v15)\n
                break;\n
            if (v15 > v22)\n
                break;\n
            v0[0] = v15;\n
            v17 = v8;\n
            v18 = v17->field_8 + -(v15 * 5) + 5;\n
            if (v17->field_8 + !(v15 + (v15 << 2)) + 5 >= 5)\n
                v18 = 5;\n
            v1 = 0;\n
            cgc_ctf_get_ranks(v17, &v1, &v0);\n
            if (v18)\n
            {\n
                v19 = -(v18);\n
                v20 = 1;\n
                do\n
                {\n
                    cgc_printf(\";d. ;s (;d pts)\\n
\");\n
                    v21 = v20 + v19 + 1;\n
                    v20 += 1;\n
                } while (v21 != 1);\n
            }\n
            cgc_free(v1);\n
            v22 = v2;\n
            cgc_printf(\"\\n
=== ;d / ;d ===================\\n
\");\n
            cgc_printf(v5);\n
            cgc_fflush(v4);\n
            v23 = &v7;\n
            if (cgc_freaduntil(&v7, 32, 10, v3) < 0)\n
                break;\n
        }\n
    }\n
    cgc_error_to_string(15);\n
    v14 = cgc_printf(\"[ERROR] ;s\\n
\");\n
    return v14;\n
}\n
", "4222527:sub_406e3f": null, "4222847:sub_406f7f": null, "4222848:cgc_handle_view_team_profile": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[20];\n
    struct struct_1 *field_20;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[76];\n
    unsigned int field_4c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_view_team_profile(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    char v1;  // [bp-0x50]\n
    struct_0 *v3;  // edi\n
    struct struct_2 **v4;  // ebp, Other Possible Types: unsigned int\n
    struct_2 *v5;  // esi\n
    unsigned int v6;  // eax\n
    void* v7;  // edi, Other Possible Types: unsigned int\n
\n
    cgc_printf(\"\\n
Team name: \");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(&v1, 64, 10, cgc_stdin) > 0)\n
    {\n
        v3 = v2;\n
        if (v3->field_8)\n
        {\n
            v4 = 0;\n
            do\n
            {\n
                if (!cgc_strcmp(v3->field_20[v4].field_0 + 33, &v1))\n
                {\n
                    v5 = v3->field_20[v4].field_0;\n
                    if (v5)\n
                    {\n
                        cgc_printf(\"\\n
=== Team profile ===================\\n
\");\n
                        cgc_printf(\";s\\n
\");\n
                        cgc_printf(\"Leader: ;s\\n
\");\n
                        cgc_printf(\"Members (;d)\\n
 - \");\n
                        if (!v5->field_4c)\n
                            return cgc_printf(\"\\n
Shoutout: ;s\\n
\");\n
                        v7 = 0;\n
                        v0 = \", \";\n
                        do\n
                        {\n
                            cgc_printf(\";s\");\n
                            v6 = v5->field_4c;\n
                            if (v7 != v6 - 1)\n
                            {\n
                                cgc_printf(v0);\n
                                v6 = v5->field_4c;\n
                            }\n
                            v7 += 1;\n
                        } while (v7 < v6);\n
                    }\n
                    break;\n
                }\n
                v4 += 1;\n
            } while (v4 < v3->field_8);\n
        }\n
    }\n
    cgc_error_to_string(7);\n
    return cgc_printf(\"[ERROR] ;s\\n
\");\n
}\n
", "4223131:sub_40709b": null, "4223241:sub_407109": null, "4223248:cgc_handle_submit_flag": "typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_handle_submit_flag(struct_1 *v2)\n
{\n
    void* v0;  // [bp-0x210]\n
    char v1;  // [bp-0x20c]\n
    struct_1 *v3;  // edi\n
    unsigned int v4;  // eax\n
\n
    cgc_printf(\"\\n
=== Submit flag ===================\\n
\");\n
    cgc_printf(\"Flag: \");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(&v1, 0x200, 10, cgc_stdin) <= 0)\n
    {\n
        v4 = 10;\n
    }\n
    else\n
    {\n
        v3 = v2;\n
        v4 = cgc_ctf_submit_flag(v3, v3->field_40->field_30, &v1);\n
        if (!v4)\n
        {\n
            v0 = 0;\n
            cgc_flg_find_chal(&v3->padding_0[40], &v0, &v1);\n
            return cgc_printf(\"[INFO] Congrats! You scored ;d points!\\n
\");\n
        }\n
    }\n
    cgc_error_to_string(v4);\n
    return cgc_printf(\"[ERROR] ;s\\n
\");\n
}\n
", "4223476:sub_4071f4": null, "4223488:cgc_handle_logout_user": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
} struct_0;\n
\n
int cgc_handle_logout_user(struct_0 *v0)\n
{\n
    v0->field_40 = 0;\n
    return cgc_printf(\"[INFO] Successfully logged out.\\n
\");\n
}\n
", "4223534:sub_40722e": null, "4223536:cgc_handle_quit": "extern void* cgc_stdout;\n
\n
int cgc_handle_quit()\n
{\n
    cgc_printf(\"Bye.\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    return cgc_exit();\n
}\n
", "4223599:sub_40726f": null, "4223600:cgc_do_random_action": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[20];\n
    struct struct_2 *field_1c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    char padding_4[28];\n
    char field_20;\n
    char padding_21[159];\n
    char field_c0;\n
    char padding_c1[191];\n
    unsigned int field_180;\n
    unsigned int field_184;\n
    unsigned int field_188;\n
    struct struct_1 *field_18c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[388];\n
    unsigned int field_184;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    char field_20;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int r;\n
\n
int cgc_do_random_action(struct_3 *v1)\n
{\n
    struct_2 *v0;  // [bp-0x14]\n
    struct_3 *v2;  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // edx\n
    struct_2 *v8;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // ebp\n
    struct_2 *v11;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v12;  // edi\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // ecx\n
    unsigned int v18;  // eax\n
    unsigned int v20;  // eax\n
    char *v21;  // eax\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // ebp\n
    unsigned int v24;  // edx\n
    struct_2 *v25;  // ecx\n
\n
    v2 = v1;\n
    v2->field_0 = 1;\n
    v3 = r;\n
    v10 = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
    r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
    v9 = ((v3 / 0x40000000 ^ v3 ^ v3 / 0x400 ^ v3 / 0x80000000 CONCAT v3) * 0x80000000 >> 32) - (((v3 >> 30 ^ v3 ^ v3 >> 10 ^ v3 >> 31 CONCAT v3) * 0x80000000 >> 32) * 3435973837 >> 32 >> 2 & -2) * 5;\n
    if (v9 < 4)\n
    {\n
        v8 = 0;\n
        v5 = cgc_malloc(400);\n
        do\n
        {\n
            v6 = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            v7 = (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4;\n
            r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            *((v5 + v8)) = (&_GLOBAL_OFFSET_TABLE_)[14219 + v6 + v7 + v7 + -64 * v7];\n
            v8 += 1;\n
        } while (v8 != 32);\n
        *((v5 + 32)) = 0;\n
        v13 = 0;\n
        do\n
        {\n
            v14 = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            v15 = (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4;\n
            r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            *((v5 + v13 + 128)) = (&_GLOBAL_OFFSET_TABLE_)[14219 + v14 + v15 + v15 + -64 * v15];\n
            v13 += 1;\n
        } while (v13 != 64);\n
        *((v5 + 192)) = 0;\n
        v16 = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
        v18 = (v16 != (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) * 458129845 >> 32 >> 6) * 600 ? 1 : v16 - (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) * 458129845 >> 32 >> 6) * 600);\n
        *((v5 + 384)) = v18;\n
        *((v5 + 388)) = 0;\n
        r = (v16 / 0x40000000 ^ v16 ^ v16 / 0x400 ^ v16 / 0x80000000 CONCAT v16) * 0x80000000 >> 32;\n
        v20 = (r - (((v16 >> 30 ^ v16 ^ v16 >> 10 ^ v16 >> 31 CONCAT v16) * 0x80000000 >> 32) * 613566757 >> 32) >> 1) + (((v16 >> 30 ^ v16 ^ v16 >> 10 ^ v16 >> 31 CONCAT v16) * 0x80000000 >> 32) * 613566757 >> 32) >> 2;\n
        *((v5 + 392)) = v20 - v20 * 8 + r;\n
        v21 = cgc_malloc(64);\n
        v0 = v5;\n
        *((v5 + 396)) = v21;\n
        v22 = 0;\n
        do\n
        {\n
            v23 = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            v24 = (((r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32) >> 1) * 2216757315 >> 32 >> 4;\n
            r = (r >> 30 ^ r ^ r >> 10 ^ r >> 31 CONCAT r) * 0x80000000 >> 32;\n
            v21[v22] = (&_GLOBAL_OFFSET_TABLE_)[14219 + v23 + v24 + v24 + -64 * v24];\n
            v22 += 1;\n
        } while (v22 != 32);\n
        v25 = v0;\n
        v25->field_18c->field_20 = 0;\n
        v9 = cgc_ctf_add_chal(v1, v25);\n
        return v9;\n
    }\n
    else if (v9 - 4 >= 4)\n
    {\n
        if (v9 != 8)\n
            return v9;\n
        v2->field_0 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2->field_4;\n
        if (!v4)\n
            return v9;\n
        v11 = v1->field_1c;\n
        v12 = 0;\n
        v0 = v11;\n
        while (true)\n
        {\n
            v9 = *((v11 + v12 * 4));\n
            if (!v9->field_184)\n
            {\n
                v10 = (v10 / 0x40000000 ^ v10 ^ v10 / 0x400 ^ v10 / 0x80000000 CONCAT v10) >> 1;\n
                r = v10;\n
                v9 = (v10 * 1374389535 >> 32 >> 5) * 100;\n
                v11 = v0;\n
                if (v10 - v9 <= 49)\n
                {\n
                    v9 = cgc_ctf_open_chal(v1, v12);\n
                    return v9;\n
                }\n
            }\n
            v12 += 1;\n
            if (v4 == v12)\n
                return v9;\n
        }\n
    }\n
}\n
", "4223735:sub_4072f7": null, "4224374:sub_407576": null, "4224384:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin[6];\n
extern unsigned int cgc_stdout[6];\n
extern char g_4089d5;\n
extern unsigned int r;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x174]\n
    char *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x16c]\n
    unsigned int v3;  // [bp-0x168]\n
    unsigned int v4;  // [bp-0x164]\n
    unsigned int v5;  // [bp-0x160]\n
    unsigned int v6;  // [bp-0x15c]\n
    unsigned int v7;  // [bp-0x158]\n
    char v8;  // [bp-0x154]\n
    void* v9;  // [bp-0x114], Other Possible Types: unsigned int\n
    char v10;  // [bp-0x110]\n
    struct_0 *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
\n
    r = *(1128775700) ^ *(0x4347c000);\n
    cgc_fbuffered(cgc_stdin, 1);\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v3 = cgc_stdin;\n
    cgc_fxlat(cgc_stdin, \"7943\");\n
    cgc_fxlat(cgc_stdout, \"7943\");\n
    v12 = &v8;\n
    cgc_ctf_init(&v8);\n
    cgc_printf(\"Shout CTF CLI v0.1\\n
\");\n
    cgc_printf(\"=================\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    v7 = \"\\n
=== Menu ===================\\n
\";\n
    v6 = \"1. Register User\\n
\";\n
    v5 = \"2. Login User\\n
\";\n
    v4 = \"3. Quit\\n
\";\n
    v2 = \"> \";\n
    v0 = \"CTF server is down! Try again later :(\\n
\";\n
    v1 = &L\"12\u7254\u2079\u6761\u6961\\u2e6e\\n
45\";\n
    while (true)\n
    {\n
        cgc_do_random_action(v12);\n
        if (!v9)\n
        {\n
            cgc_printf(v7);\n
            cgc_printf(v6);\n
            cgc_printf(v5);\n
            cgc_printf(v4);\n
            cgc_printf(v2);\n
            cgc_fflush(cgc_stdout);\n
            if (cgc_freaduntil(&v10, 0x100, 10, v3) < 0)\n
                break;\n
            if (*(&v8))\n
            {\n
                if (!cgc_strcmp(&v10, v1))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_register_user(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, \"2\"))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_login_user(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, &g_4089d5))\n
                {\n
                    cgc_printf(\"Bye.\\n
\");\n
                    cgc_fflush(cgc_stdout);\n
                    cgc_exit();\n
                    v12 = &v8;\n
                    continue;\n
                }\n
LABEL_4078c3:\n
                v13 = \"Try again.\\n
\";\n
                goto LABEL_4078d4;\n
            }\n
        }\n
        else\n
        {\n
            cgc_print_ctf_ticker(v12);\n
            cgc_printf(\"\\n
=== CTF Menu ===================\\n
\");\n
            cgc_printf(\"1. View challenge list\\n
\");\n
            cgc_printf(\"2. View challenge detail\\n
\");\n
            cgc_printf(\"3. View ranking\\n
\");\n
            cgc_printf(\"4. View team profile\\n
\");\n
            cgc_printf(\"5. Submit flag\\n
\");\n
            cgc_printf(\"6. Logout\\n
\");\n
            cgc_printf(v2);\n
            cgc_fflush(cgc_stdout);\n
            if (cgc_freaduntil(&v10, 0x100, 10, v3) < 0)\n
                break;\n
            if (*(&v8))\n
            {\n
                if (!cgc_strcmp(&v10, v1))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_view_challenge_list(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, \"2\"))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_view_challenge_detail(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, &g_4089d5))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_view_ranking(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, \"4\"))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_view_team_profile(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, \"5\"))\n
                {\n
                    v12 = &v8;\n
                    cgc_handle_submit_flag(&v8);\n
                    continue;\n
                }\n
                else if (!cgc_strcmp(&v10, \"6\"))\n
                {\n
                    cgc_printf(\"[INFO] Successfully logged out.\\n
\");\n
                    v9 = 0;\n
                    v12 = &v8;\n
                    continue;\n
                }\n
                goto LABEL_4078c3;\n
            }\n
        }\n
        v13 = v0;\n
LABEL_4078d4:\n
        cgc_printf(v13);\n
        v12 = &v8;\n
    }\n
    cgc_fflush(cgc_stdout);\n
    return 0;\n
}\n
", "4225037:sub_40780d": null, "4225227:sub_4078cb": null, "4225419:sub_40798b": null, "4225424:cgc_user_new": "int cgc_user_new(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // esi\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (v3)\n
    {\n
        v4 = cgc_malloc(52);\n
        *(v3) = v4;\n
        cgc_memset(v4, 0, 52);\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4225497:sub_4079d9": null, "4225504:cgc_user_set_nick": "int cgc_user_set_nick(unsigned int v0, unsigned int a0)\n
{\n
    char *v1;  // esi\n
    char *v3;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_strlen(v3) > 15)\n
    {\n
        return 2;\n
    }\n
    else\n
    {\n
        cgc_memset(v1, 0, 16);\n
        cgc_strcpy(v1, v3);\n
        return 0;\n
    }\n
}\n
", "4225596:sub_407a3c": null, "4225600:cgc_user_set_pass": "int cgc_user_set_pass(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // esi\n
    char *v3;  // edi\n
    char *v4;  // esi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_strlen(v3) > 31)\n
    {\n
        return 3;\n
    }\n
    else\n
    {\n
        v4 = v1 + 16;\n
        cgc_memset(v4, 0, 32);\n
        cgc_strcpy(v4, v3);\n
        return 0;\n
    }\n
}\n
", "4225695:sub_407a9f": null, "4225696:cgc_user_set_team": "typedef struct struct_0 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
} struct_0;\n
\n
int cgc_user_set_team(struct_0 *v0, unsigned int a0, unsigned int *a1)\n
{\n
    struct_0 *v1;  // ecx\n
    unsigned int v3;  // edx\n
    unsigned int *v4;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    v4 = a1;\n
    if (v4)\n
        *(v4) = v1->field_30;\n
    v1->field_30 = v3;\n
    return 0;\n
}\n
", "4225738:sub_407aca": null, "4225744:cgc_team_new": "typedef struct struct_1 {\n
    char padding_0[68];\n
    char *field_44;\n
    char padding_48[8];\n
    unsigned int field_50;\n
} struct_1;\n
\n
int cgc_team_new(struct struct_0 **v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    struct struct_0 **v3;  // esi\n
    char *v4;  // eax\n
    struct_1 *v5;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (v3)\n
    {\n
        v4 = cgc_malloc(92);\n
        *(v3) = &v4;\n
        cgc_memset(v4, 0, 92);\n
        *(v3)->field_44 = cgc_malloc(32);\n
        v5 = *(v3);\n
        v5->field_50 = 8;\n
        cgc_memset(v5->field_44, 0, 32);\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4225859:sub_407b43": null, "4225872:cgc_team_add_member": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
    unsigned int field_48;\n
    struct struct_1 *field_4c;\n
    unsigned int field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_team_add_member(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v3;  // edi\n
    unsigned int *v4;  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    v4 = v1->field_4c;\n
    if (v4 == v1->field_50)\n
    {\n
        v1->field_44 = cgc_realloc(v1->field_44, v4 * 8);\n
        v1->field_50 = v1->field_50 * 2;\n
        v4 = v1->field_4c;\n
    }\n
    if (!v4)\n
        v1->field_48 = v3;\n
    v5 = v1->field_44;\n
    v1->field_4c = v4 + 1;\n
    *((v5 + v4 * 4)) = v3;\n
    return 0;\n
}\n
", "4225968:cgc_team_remove_member": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_1 *field_44;\n
    char padding_48[4];\n
    unsigned int field_4c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[68];\n
    struct struct_3 *field_44;\n
    char padding_48[4];\n
    unsigned int field_4c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char *field_0;\n
} struct_3;\n
\n
int cgc_team_remove_member(struct_0 *v0, unsigned int a0)\n
{\n
    struct_2 *v1;  // edi\n
    char *v3;  // esi\n
    unsigned int v4;  // edx\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int *v7;  // ecx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return 1;\n
    }\n
    else if (!v1->field_4c)\n
    {\n
        return 5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            if (!cgc_strcmp(v1->field_44[v5].field_0, v3))\n
            {\n
                v4 = v1->field_4c;\n
                if (v4 == v5)\n
                    return 5;\n
                v6 = (v4 + ~(v5)) * 4;\n
                v7 = v1->field_44;\n
                cgc_memmove(&v7[v5], &v7[v5 + 1], v6);\n
                v1->field_4c = v1->field_4c - 1;\n
                goto LABEL_407c42__4;\n
            }\n
            v5 += 1;\n
            v4 = v1->field_4c;\n
        } while (v5 < v4);\n
        if (v4 != v5)\n
        {\n
LABEL_407c42__4:\n
            return 0;\n
        }\n
        return 5;\n
    }\n
}\n
", "4226136:sub_407c58": null, "4226144:cgc_team_change_name": "int cgc_team_change_name(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // esi\n
    char *v3;  // edi\n
    char *v4;  // esi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_strlen(v3) > 31)\n
    {\n
        return 4;\n
    }\n
    else\n
    {\n
        v4 = v1 + 33;\n
        cgc_memset(v4, 0, 32);\n
        cgc_strcpy(v4, v3);\n
        return 0;\n
    }\n
}\n
", "4226239:sub_407cbf": null, "4226240:cgc_team_set_shoutout": "typedef struct struct_0 {\n
    char padding_0[84];\n
    unsigned int field_54;\n
} struct_0;\n
\n
int cgc_team_set_shoutout(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    char *v3;  // edi\n
    unsigned int v4;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 1;\n
    v3 = a0;\n
    if (!v3)\n
        return 1;\n
    v4 = v1->field_54;\n
    if (v4)\n
        cgc_free(v4);\n
    v1->field_54 = cgc_strdup(v3);\n
    return 0;\n
}\n
", "4226316:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}