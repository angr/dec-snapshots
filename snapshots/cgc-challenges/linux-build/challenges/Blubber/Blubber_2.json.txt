{"4227072:_init": "extern struct_0 *g_416140;\n
\n
int _init()\n
{\n
    if (g_416140)\n
    {\n
        g_416140();\n
        return;\n
    }\n
    return;\n
}\n
", "4227120:sub_408030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_408030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4227136:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4227152:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4227168:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4227184:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4227200:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4227216:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4227232:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4227248:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4227264:sub_4080c0": "int sub_4080c0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4227270:sub_4080c6": null, "4227280:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4227323:sub_4080fb": null, "4227324:sub_4080fc": "int sub_4080fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4227328:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4227332:sub_408104": null, "4227344:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 57395;\n
    v6 = v5 + 3801;\n
    v7 = v5 + 3801;\n
    if (v7 == v6)\n
        return v5 + 3801;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4227395:sub_408143": "int sub_408143()\n
{\n
}\n
", "4227401:sub_408149": "int sub_408149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4227408:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 57331;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 3801;\n
    v9 = (v6 + 3801 - (v6 + 3801) >> 31) + (3801 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4227479:sub_408197": "int sub_408197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4227488:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_416134;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_416134)\n
    {\n
        v0 = __dso_handle;\n
        sub_4080c0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4227563:sub_4081eb": "int sub_4081eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4227568:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4227577:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4227581:sub_4081fd": null, "4227584:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4227674:sub_40825a": null, "4227680:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 1;\n
}\n
", "4227709:sub_40827d": null, "4227712:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 2;\n
}\n
", "4227741:sub_40829d": null, "4227744:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 16;\n
}\n
", "4227773:sub_4082bd": null, "4227776:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 14;\n
}\n
", "4227805:sub_4082dd": null, "4227808:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 12;\n
}\n
", "4227837:sub_4082fd": null, "4227840:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 4;\n
}\n
", "4227869:sub_40831d": null, "4227872:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 8;\n
}\n
", "4227901:sub_40833d": null, "4227904:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 64;\n
}\n
", "4227933:sub_40835d": null, "4227936:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 32;\n
}\n
", "4227965:sub_40837d": null, "4227968:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[41280 + v0] & 4294967168;\n
}\n
", "4227997:sub_40839d": null, "4228000:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[41280 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[41280 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[41280 + v1] & 2) >> 1);\n
}\n
", "4228059:sub_4083db": null, "4228064:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[41280 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4228098:sub_408402": null, "4228112:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[41280 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[41280 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4228174:sub_40844e": null, "4228176:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[41280 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4228210:sub_408472": null, "4228224:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_exit();\n
    return;\n
}\n
", "4228256:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4228288:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    void* v6;  // eax, Other Possible Types: unsigned int\n
    char *v7;  // edi\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ebp\n
    void* v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v4 = v3;\n
    v5 = v3->field_8;\n
    if (v5 == -1)\n
        return 0;\n
    if (v4->field_4 == 1)\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        v7 = v4->field_10;\n
        if (v7)\n
        {\n
            v8 = v4->field_c;\n
            if (v8 != v5)\n
            {\n
                do\n
                {\n
                    *(24 + &v4->field_0 + v5) = v7[*(24 + &v4->field_0 + v5)];\n
                    v5 += 1;\n
                } while (v8 != v5);\n
            }\n
        }\n
        v1 = v4->field_0;\n
        v9 = v4->field_8;\n
        v10 = 24 + v9 + v4;\n
        v11 = v4->field_c - v9;\n
        v12 = 0;\n
        while (true)\n
        {\n
            v13 = v12;\n
            v14 = v11 - v12;\n
            if (v11 <= v12)\n
                break;\n
            v15 = v10 + v12;\n
            v0 = &v2;\n
            v16 = cgc_transmit(v1, v15, v14);\n
            v17 = 0;\n
            if (!v16)\n
                v17 = *(&v2);\n
            v12 = v17 + v13;\n
            if (v16)\n
                break;\n
        }\n
        v6 = -(v13 < v11);\n
        v4 = v3;\n
    }\n
    *((v4 + 12)) = 0;\n
    *((v4 + 8)) = 0;\n
    return v6;\n
}\n
", "4228397:sub_40852d": null, "4228478:sub_40857e": null, "4228480:cgc_fbuffered": "int cgc_fbuffered(unsigned int v4[5], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // ecx\n
    unsigned int v6[5];  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // edi, Other Possible Types: unsigned int\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v6[2];\n
    if (v7 == -1)\n
    {\n
        v6[2] = -(v5 < 1);\n
        v6[3] = 0;\n
        return -(v5 < 1);\n
    }\n
    if (v6[1] != 1)\n
    {\n
        if (v6[4])\n
        {\n
            v8 = v6[3];\n
            if (v8 != v7)\n
            {\n
                do\n
                {\n
                    *(24 + &v6[0] + v7) = *((v6[4] + *(24 + &v6[0] + v7)));\n
                    v7 += 1;\n
                } while (v8 != v7);\n
            }\n
        }\n
        v2 = v6[0];\n
        v9 = v6[2];\n
        v1 = 24 + v6 + v9;\n
        v10 = v6[3] - v9;\n
        v13 = 0;\n
        while (v10 > v13)\n
        {\n
            v0 = &v3;\n
            v11 = cgc_transmit(v2, v1 + v13, v10 - v13);\n
            v12 = 0;\n
            if (!v11)\n
                v12 = *(&v3);\n
            v13 += v12;\n
            if (v11)\n
                break;\n
        }\n
    }\n
    v6[3] = 0;\n
    v6[2] = 0;\n
    v5 = a0;\n
}\n
", "4228692:sub_408654": null, "4228704:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4228797:sub_4086bd": null, "4228800:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v5, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_1 *v6;  // esi\n
    unsigned int v7;  // ebp\n
    char *v8;  // ecx\n
    void* v9;  // edx, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    char *v16;  // edi\n
    unsigned int v17;  // ebp\n
    char *v18;  // eax\n
    unsigned int v19;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = a1;\n
    if (v6->field_8 == v6->field_c)\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (!cgc_receive(v6->field_0, v6 + 1, 0x400))\n
        {\n
            v7 = *(&v4);\n
            if (*(&v4))\n
            {\n
                v6->field_c = v7;\n
                v8 = v6->field_14;\n
                if (v8)\n
                {\n
                    v9 = 0;\n
                    do\n
                    {\n
                        *(24 + &v6->field_0 + v9) = v8[*(24 + &v6->field_0 + v9)];\n
                        v9 += 1;\n
                    } while (v7 != v9);\n
                }\n
            }\n
        }\n
    }\n
    v10 = a0;\n
    v11 = v6->field_8;\n
    if (v11 != -1)\n
    {\n
        v12 = v6->field_c - v11;\n
        if (v12 > v10)\n
            v12 = v10;\n
        v2 = v12;\n
        cgc_memcpy();\n
        v13 = v2;\n
        v14 = v6->field_8 + v13;\n
        v6->field_8 = v14;\n
        if (v14 == v6->field_c)\n
        {\n
            v6->field_c = 0;\n
            v6->field_8 = 0;\n
        }\n
        if (v13 < v10)\n
            goto LABEL_4087c0;\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        if (0 < v10)\n
        {\n
            while (true)\n
            {\n
LABEL_4087c0:\n
                v16 = v5 + v13;\n
                v3 = v13;\n
                v0 = &v2;\n
                if (cgc_receive(v6->field_0, v16, a0 - v13))\n
                    return -1;\n
                v17 = v2;\n
                if (!v2)\n
                    return -1;\n
                v18 = v6->field_14;\n
                if (v18)\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v16[v19] = v18[v16[v19]];\n
                        v19 += 1;\n
                    } while (v17 != v19);\n
                }\n
                v13 = v3 + v17;\n
                if (v13 >= a0)\n
                    return v13;\n
            }\n
        }\n
    }\n
    return v13;\n
}\n
", "4229037:sub_4087ad": null, "4229156:sub_408824": null, "4229168:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v6 = 0;\n
    tmp_21 = v1;\n
    v3 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
            {\n
                v5 = 1;\n
            }\n
            else\n
            {\n
                v5 = 2;\n
                if (v4 != v2)\n
                {\n
                    *((v0 + v6)) = v4;\n
                    v5 = 0;\n
                }\n
            }\n
            if (v5)\n
                break;\n
            v6 += 1;\n
            if (v3 == v6)\n
                goto LABEL_4088a7;\n
        }\n
        if (!(v5 == 2))\n
            goto LABEL_4088cc;\n
    }\n
LABEL_4088a7:\n
    if (v6 != v3)\n
    {\n
LABEL_4088c2:\n
        *((v0 + v6)) = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v7 = cgc__getc();\n
        if (v7 == -1)\n
            break;\n
        if (v7 == v2)\n
            goto LABEL_4088c2;\n
    }\n
LABEL_4088cc:\n
    return -1;\n
}\n
", "4229250:sub_408882": null, "4229339:sub_4088db": null, "4229344:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x15]\n
    char v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    char *v9;  // eax\n
    char *v10;  // edx\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
\n
    v6 = v5;\n
    v7 = v5->field_8;\n
    if (v7 == -1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5->field_0, &v1, 1))\n
        {\n
            return -1;\n
        }\n
        else if (!*(&v2))\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v9 = v5->field_14;\n
            if (!v9)\n
                return v1;\n
            v1 = v9[v1];\n
        }\n
    }\n
    else\n
    {\n
        if (v7 == v5->field_c)\n
        {\n
            v5->field_c = 0;\n
            v5->field_8 = 0;\n
            v0 = &v3;\n
            v13 = -1;\n
            if (!cgc_receive(v5->field_0, v5 + 1, 0x400))\n
            {\n
                v8 = *(&v3);\n
                v13 = -1;\n
                if (v8)\n
                {\n
                    v6->field_c = v8;\n
                    v10 = v6->field_14;\n
                    if (v10)\n
                    {\n
                        v11 = 0;\n
                        do\n
                        {\n
                            *(24 + &v6->field_0 + v11) = v10[*(24 + &v6->field_0 + v11)];\n
                            v11 += 1;\n
                        } while (v8 != v11);\n
                    }\n
                    v13 = v8;\n
                }\n
            }\n
            if (v13 < 0)\n
                return -1;\n
        }\n
        v14 = v6->field_8;\n
        v6->field_8 = v14 + 1;\n
        return *(24 + &v6->field_0 + v14);\n
    }\n
}\n
", "4229569:sub_4089c1": null, "4229584:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4229624:sub_4089f8": null, "4229632:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fwrite(unsigned int v5, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x420]\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // [bp-0x41c]\n
    unsigned int v2;  // [bp-0x418]\n
    char v3;  // [bp-0x414]\n
    char v4;  // [bp-0x410]\n
    struct_1 *v6;  // edi\n
    unsigned int v7;  // ebp\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // esi\n
    char *v10;  // edi\n
    unsigned int v11;  // ebp\n
    struct_0 *v12;  // eax, Other Possible Types: unsigned int\n
    void* v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // eax\n
    void* v16;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // eax\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ebp\n
\n
    v6 = a1;\n
    v7 = a0;\n
    if (v6->field_8 != -1)\n
    {\n
        if (v7 >= 0x400)\n
        {\n
            cgc_fflush(v6);\n
        }\n
        else\n
        {\n
            v8 = v6->field_c;\n
            v9 = 0;\n
            if (v8 + v7 >= 0x400)\n
            {\n
                v9 = 0x400 - v8;\n
                cgc_memcpy(&v6[1].padding_4[v8], v5);\n
                v6->field_c = v6->field_c + v9;\n
                cgc_fflush(v6);\n
            }\n
            if (v9 < v7)\n
            {\n
                v25 = v7 - v9;\n
                cgc_memcpy(&v6[1].padding_4[v6->field_c], v5 + v9);\n
                v6->field_c = v6->field_c + v25;\n
                return a0;\n
            }\n
            return v9;\n
        }\n
    }\n
    v1 = v6->field_0;\n
    v10 = v6->field_10;\n
    v19 = 0;\n
    if (!v10)\n
    {\n
        while (v19 < v7)\n
        {\n
            v20 = v19;\n
            v21 = v5 + v19;\n
            v22 = v7 - v19;\n
            v0 = &v4;\n
            v23 = cgc_transmit(v1, v21, v22);\n
            v24 = 0;\n
            if (!v23)\n
                v24 = *(&v4);\n
            v19 = v24 + v20;\n
            if (v23)\n
            {\n
                if (v20 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        while (v19 < v7)\n
        {\n
            v11 = v7 - v19;\n
            if (v11 >= 0x400)\n
                v11 = 0x400;\n
            v2 = v19;\n
            cgc_memcpy();\n
            if (v11)\n
            {\n
                v12 = 0;\n
                do\n
                {\n
                    (&v4)[v12] = v10[(&v4)[v12]];\n
                    v12 += 1;\n
                } while (v11 != v12);\n
            }\n
            v13 = 0;\n
            do\n
            {\n
                v14 = v13;\n
                if (v11 <= v13)\n
                {\n
                    v16 = v11;\n
                    break;\n
                }\n
                v0 = &v3;\n
                v15 = cgc_transmit(v1, &(&v4)[v13], v11 - v13);\n
                v16 = 0;\n
                v17 = 0;\n
                if (!v15)\n
                    v17 = *(&v3);\n
                v13 = v17 + v14;\n
            } while (!v15);\n
            v18 = v2;\n
            v19 = v16 + v18;\n
            tmp_6 = v11;\n
            v7 = a0;\n
            if (tmp_6 > v14)\n
            {\n
                if (v18 < v7)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    return v7;\n
}\n
", "4229718:sub_408a56": null, "4229788:sub_408a9c": null, "4229912:sub_408b18": null, "4230131:sub_408bf3": null, "4230144:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        v10 += 1;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4230409:sub_408d09": null, "4230416:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4230456:sub_408d38": null, "4230464:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_4[516];\n
    struct struct_2 *field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_3 *field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[262142];  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    struct_5 *v6;  // [bp-0xc]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // edi\n
    struct_2 *v11;  // ebp\n
    struct_2 *v12;  // esi\n
    unsigned int v13;  // ebp\n
    struct_4 *v14;  // ebp, Other Possible Types: unsigned int\n
    struct_3 *v15;  // edi, Other Possible Types: unsigned int\n
    struct_3 *v16;  // eax, Other Possible Types: unsigned int\n
    struct_4 *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18[262142];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct_5 *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    struct_0 *v24;  // ecx\n
    struct_2 *v25;  // ecx\n
    unsigned int v26;  // ecx\n
    struct_1 *v27;  // eax\n
    struct_0 *v28;  // edx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // edx\n
    struct_4 *v31;  // edx, Other Possible Types: unsigned int\n
    struct_4 *v32;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    struct_0 *v35;  // ecx\n
\n
    if (a0 < 0)\n
        return 0;\n
    v9 = a0 + 3 & -0x4;\n
    if ((a0 + 3 & -0x4) && v9 > 15)\n
    {\n
        if (v9 > 131071)\n
        {\n
            v13 = v9 + 4103 & -0x1000;\n
            v0 = &v4;\n
            if (cgc_allocate(v13, 0))\n
                return 0;\n
            v15 = *(&v4);\n
            *(v15) = v8;\n
            *((v15 + 4)) = v13;\n
            goto LABEL_40901f;\n
        }\n
        v11 = v9 + 23;\n
        v12 = v11 & -0x10;\n
        if (!(v11 & -0x10))\n
        {\n
            v14 = -1;\n
        }\n
        else if (v12 <= 0x200)\n
        {\n
            v14 = (v11 >> 4) + 2;\n
        }\n
        else if (v12 <= 0x1200)\n
        {\n
            v14 = (v12 + 32 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v14 = 130;\n
            if (v12 <= 0x20000)\n
                v14 = (v12 + 288 >> 11) + 66;\n
        }\n
        v15 = 0;\n
        if (v14 <= 130)\n
        {\n
            do\n
            {\n
                v16 = *((v8 + v14 * 4));\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        if (*((v16 + 4)) >= v12)\n
                        {\n
                            v15 = v16;\n
                            goto LABEL_408e50;\n
                        }\n
                        v16 = *((v16 + 12));\n
                    } while (v16);\n
                }\n
                v14 += 1;\n
            } while (v14 != 131);\n
            v14 = 131;\n
            if (!(131 == 131))\n
                goto LABEL_408f53;\n
            goto LABEL_408e5c;\n
        }\n
LABEL_408e50:\n
        if (!(v14 == 131))\n
            goto LABEL_408f53;\n
LABEL_408e5c:\n
        v0 = &v3;\n
        v17 = v8;\n
        v18 = 0;\n
        if (!cgc_allocate(0x200000, 0))\n
        {\n
            v19 = *(&v3);\n
            v2[0] = v19 + 1048575;\n
            v18 = v19 + 1048575 & -0x100000;\n
            if ((v19 + 1048575 & -0x100000) > v19)\n
            {\n
                v1 = v19;\n
                cgc_deallocate(v19);\n
                v19 = v1;\n
                v17 = v8;\n
            }\n
            v20 = v18 + 0x100000;\n
            if (v19 + 0x200000 > v20)\n
            {\n
                cgc_deallocate(v20);\n
                v17 = v8;\n
            }\n
            *((v17 + (v2 >> 20) + 524)) = 2;\n
        }\n
        if (!v18)\n
            return 0;\n
        v21 = v18 + 19 & -0x10;\n
        v21->field_0 = 0;\n
        v22 = 1048560 + v18 - v21;\n
        v21->field_4 = v22;\n
        *((v18 + 1048560)) = v22;\n
        *((v18 + 1048564)) = 0;\n
        v23 = v21->field_4;\n
        if (!(!(v23 & 1)))\n
            goto LABEL_409052;\n
        v21->field_4 = v23 | 1;\n
        v21->field_8 = 0;\n
        v21->field_c = *((v17 + 520));\n
        *((v17 + 520)) = v21;\n
        v24 = v21->field_c;\n
        if (v24)\n
            v24->field_8 = v21;\n
        v15 = *((v17 + 520));\n
        v14 = 130;\n
LABEL_408f53:\n
        v25 = *((v15 + 4));\n
        if (!(v25 & 1))\n
        {\n
            v21 = cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\");\n
        }\n
        else\n
        {\n
            v26 = v25 & -2;\n
            *((v15 + 4)) = v26;\n
            v27 = *((v15 + 8));\n
            if (v27)\n
                v27->field_c = *((v15 + 12));\n
            v28 = *((v15 + 12));\n
            if (v28)\n
                v28->field_8 = v27;\n
            v29 = v8;\n
            if (*((v29 + (v14 << 2))) == v15)\n
                *((v29 + v14 * 4)) = *((v15 + 12));\n
            *((v15 + 8)) = 0;\n
            *((v15 + 12)) = 0;\n
            v30 = v26 - v12;\n
            if (v30 < 33)\n
            {\n
LABEL_40901f:\n
                v10 = v15 + 8;\n
                return v10;\n
            }\n
            v21 = v12 + v15;\n
            *((v15 + 4)) = v12;\n
            *((&v12->field_0 + v15)) = v12;\n
            *((4 + &v12->field_0 + v15)) = v30;\n
            *((v26 + v15)) = v30;\n
            if (v30 <= 0x200)\n
            {\n
                v31 = (v30 >> 4) + 2;\n
            }\n
            else if (v30 <= 0x1200)\n
            {\n
                v31 = (v30 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v32 = 130;\n
                if (!(v30 <= 0x20000))\n
                    goto LABEL_408ff3;\n
                v31 = (v30 - 0x1200 >> 11) + 66;\n
            }\n
            v32 = v31;\n
LABEL_408ff3:\n
            v33 = *((v21 + 4));\n
            if (!(v33 & 1))\n
            {\n
                *((v21 + 4)) = v33 | 1;\n
                *((v21 + 8)) = 0;\n
                v34 = v8;\n
                *((v21 + 12)) = *((v34 + v32 * 4));\n
                *((v34 + v32 * 4)) = v21;\n
                v35 = *((v21 + 12));\n
                if (v35)\n
                {\n
                    v35->field_8 = v21;\n
                    goto LABEL_40901f;\n
                }\n
            }\n
        }\n
LABEL_409052:\n
        v6 = v21;\n
        v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        cgc_heap_error(*(&v7));\n
        return cgc_tiny_alloc(v8);\n
    }\n
    v10 = cgc_tiny_alloc();\n
    return v10;\n
}\n
", "4231280:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    struct struct_2 *field_1218;\n
    struct struct_2 *field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // esi\n
    struct_0 *v10;  // edi, Other Possible Types: unsigned int\n
    unsigned short v11[2];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // ebp, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned short *v16;  // ebx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
\n
    v9 = v8;\n
    if (v8 <= 15)\n
    {\n
        v10 = v8 / 4 - 1;\n
    }\n
    else if (v8 <= 0x200)\n
    {\n
        v10 = (v8 >> 4) + 2;\n
    }\n
    else if (v8 <= 0x1200)\n
    {\n
        v10 = (v8 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v8 <= 0x20000)\n
            v10 = (v8 - 0x1200 >> 11) + 66;\n
    }\n
    v13 = *((v12 + v10 * 4));\n
    if (*((v12 + (v10 << 2))))\n
    {\n
        *((v12 + v10 * 4)) = *(v13);\n
        return *((v12 + v10 * 4));\n
    }\n
    v11 = *((v12 + v10 * 4 + 4620));\n
    if (!v11)\n
    {\n
        if (!*((v12 + 4632)))\n
        {\n
            v0 = &v6;\n
            v2 = v12;\n
            v12 = v2;\n
            v14 = 0;\n
            if (!cgc_allocate(0x200000, 0))\n
            {\n
                v1 = *(&v6);\n
                v5 = v1 + 1048575;\n
                v14 = v5 & -0x100000;\n
                v3 = v14;\n
                if (v14 > v1)\n
                {\n
                    cgc_deallocate(v1);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                v4 = v14 + 0x100000;\n
                v15 = v1 + 0x200000;\n
                v1 = v15 - v4;\n
                if (v15 > v4)\n
                {\n
                    cgc_deallocate(v4);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                *((v12 + (v5 >> 20) + 524)) = 1;\n
            }\n
            *((v12 + 4632)) = v14;\n
            if (!v14)\n
                return 0;\n
            *((v12 + 4636)) = 0;\n
        }\n
        v16 = *((v12 + 4632));\n
        v17 = *((v12 + 4636));\n
        v11 = v17 + v16;\n
        *((v12 + v10 * 4 + 4620)) = v11;\n
        *((v17 + v16)) = v9;\n
        *((2 + v17 + v16)) = v9;\n
        v18 = v17 + 0x1000;\n
        *((v12 + 4636)) = v18;\n
        if (v18 == 0x100000)\n
            *((v12 + 4632)) = 0;\n
    }\n
    v19 = *((v11 + 2));\n
    v13 = v19 + v11;\n
    v20 = v9 + v19;\n
    *((v11 + 2)) = v20;\n
    v21 = *(v11);\n
    if (v21 + v20 < 4097)\n
        return v13;\n
    *((v12 + v10 * 4 + 4620)) = 0;\n
}\n
", "4231734:sub_409236": null, "4231744:malloc_free": "int malloc_free(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v7;  // [bp-0x4]\n
    char v8;  // [bp+0x0]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebp\n
    char v12;  // cl\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
\n
    v10 = a0;\n
    if (!v10)\n
        return v10;\n
    v11 = v9;\n
    v12 = *((v9 + (v10 >> 20) + 524));\n
    if (v12 != 2)\n
    {\n
        if (v12 == 1)\n
        {\n
            v13 = (*((v10 & -0x1000)) <= 15 ? (*((v10 & -0x1000)) <= 0x200 ? (*((v10 & -0x1000)) <= 0x1200 ? (*((v10 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v10 & -0x1000)) - 0x200 >> 7) + 34) : (*((v10 & -0x1000)) >> 4) + 2) : *((v10 & -0x1000)) / 4 - 1);\n
            *(v10) = *((v11 + v13 * 4));\n
            *((v11 + v13 * 4)) = v10;\n
            return v10;\n
        }\n
        if (v12)\n
            return v10;\n
        if ((v10 & 4095) != 8)\n
        {\n
            v17 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4095ac;\n
        }\n
        else\n
        {\n
            v18 = *((v10 - 8));\n
            if (v18 != v11)\n
            {\n
                v19 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v11;\n
            }\n
            else\n
            {\n
                v18 = *((v10 - 4));\n
                if (v18 - 0x20000 <= 2147356671 && !(v18 & 4095))\n
                {\n
                    v10 = cgc_deallocate(v10 - 8);\n
                    return v10;\n
                }\n
                v19 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v18;\n
            v10 = cgc_heap_error(v19, v10);\n
        }\n
    }\n
    else if (!(v10 & 7))\n
    {\n
        v17 = v10 - 8;\n
        v14 = *((v17 + 4));\n
        if ((v14 & 1))\n
        {\n
            v17 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_4095ac;\n
        }\n
        else\n
        {\n
            v20 = v14 - 131073;\n
            if (v20 <= -131058)\n
            {\n
                v17 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
                goto LABEL_4095ac;\n
            }\n
            else\n
            {\n
                v15 = *(v17);\n
                v16 = v17 - v15;\n
                if (!v15)\n
                    v16 = v15;\n
                if (v16)\n
                {\n
                    v11 = v9;\n
                    if (!((*((v16 + 4)) & -2) == v15))\n
                        goto LABEL_4095d4;\n
                }\n
                v20 = v14 + v17;\n
                if (*(v20) == v14)\n
                {\n
                    if (v16)\n
                    {\n
                        v21 = *((v16 + 4));\n
                        if ((v21 & 1))\n
                        {\n
                            v22 = v21 & -2;\n
                            v3 = v20;\n
                            if ((v21 & -2) <= 15)\n
                            {\n
                                v23 = v21 / 4 - 1;\n
                            }\n
                            else if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else if (v22 <= 0x1200)\n
                            {\n
                                v23 = (v22 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v23 = 130;\n
                                if (v22 <= 0x20000)\n
                                    v23 = (v22 - 0x1200 >> 11) + 66;\n
                            }\n
                            *((v16 + 4)) = v22;\n
                            v24 = *((v16 + 8));\n
                            if (v24)\n
                                *((v24 + 12)) = *((v16 + 12));\n
                            v25 = *((v16 + 12));\n
                            if (v25)\n
                                *((v25 + 8)) = v24;\n
                            if (*((v9 + (v23 << 2))) == v16)\n
                            {\n
                                v2 = v22;\n
                                *((v9 + v23 * 4)) = *((v16 + 12));\n
                                v22 = v2;\n
                            }\n
                            *((v16 + 8)) = 0;\n
                            *((v16 + 12)) = 0;\n
                            v26 = v22 + *((v17 + 4));\n
                            *((v16 + 4)) = v26;\n
                            v20 = v3;\n
                            *(v20) = v26;\n
                            v17 = v16;\n
                            v11 = v9;\n
                        }\n
                    }\n
                    v27 = *((v20 + 4));\n
                    if ((v27 & 1))\n
                    {\n
                        v28 = v27 & -2;\n
                        if (v28 <= 15)\n
                        {\n
                            v29 = v27 / 4 - 1;\n
                        }\n
                        else if (v28 <= 0x200)\n
                        {\n
                            v29 = (v27 >> 4) + 2;\n
                        }\n
                        else if (v28 <= 0x1200)\n
                        {\n
                            v29 = (v28 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v29 = 130;\n
                            if (v28 <= 0x20000)\n
                                v29 = (v28 - 0x1200 >> 11) + 66;\n
                        }\n
                        *((v20 + 4)) = v28;\n
                        v30 = *((v20 + 8));\n
                        if (v30)\n
                            *((v30 + 12)) = *((v20 + 12));\n
                        if (*((v20 + 12)))\n
                            *((*((v20 + 12)) + 8)) = v30;\n
                        v11 = v9;\n
                        if (*((v9 + (v29 << 2))) == v20)\n
                            *((v11 + v29 * 4)) = *((v20 + 12));\n
                        *((v20 + 8)) = 0;\n
                        *((v20 + 12)) = 0;\n
                        v16 = v28 + *((v17 + 4));\n
                        *((v17 + 4)) = v16;\n
                        *((v17 + v16)) = v16;\n
                    }\n
                    v31 = *((v17 + 4));\n
                    if (v31 <= 15)\n
                    {\n
                        v32 = v31 / 4 - 1;\n
                    }\n
                    else if (v31 <= 0x200)\n
                    {\n
                        v32 = (v31 >> 4) + 2;\n
                    }\n
                    else if (v31 <= 0x1200)\n
                    {\n
                        v32 = (v31 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v32 = 130;\n
                        if (v31 <= 0x20000)\n
                            v32 = (v31 - 0x1200 >> 11) + 66;\n
                    }\n
                    if (!(v31 & 1))\n
                    {\n
                        *((v17 + 4)) = v31 | 1;\n
                        *((v17 + 8)) = 0;\n
                        *((v17 + 12)) = *((v11 + v32 * 4));\n
                        *((v11 + v32 * 4)) = v17;\n
                        v10 = *((v17 + 12));\n
                        if (!v10)\n
                            return *((v17 + 12));\n
                        *((v10 + 8)) = v17;\n
                    }\n
                    goto LABEL_4095c4;\n
                }\n
            }\n
        }\n
    }\n
    v17 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_4095ac:\n
    v7 = v10;\n
    v6 = v17;\n
    v10 = cgc_heap_error(*(&v8));\n
    v6 = v10;\n
    v5 = v20;\n
    v4 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
LABEL_4095c4:\n
    v5 = v17;\n
    v4 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v10 = cgc_heap_error(*(&v8));\n
LABEL_4095d4:\n
    v6 = v10;\n
    v5 = v16;\n
    v4 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
    return cgc_malloc_size(v9, a0);\n
}\n
", "4232688:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4232737:sub_409621": null, "4232752:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
        return 0;\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4096ff:\n
        malloc_free(v1, a0);\n
        return v3;\n
    }\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc_alloc(v7, v2);\n
        return v3;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4096e2;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4096e2:\n
        return v4;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        return 0;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4096ff;\n
    goto LABEL_4096ff;\n
}\n
", "4232977:sub_409711": null, "4232992:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4233056:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4233110:sub_409796": null, "4233120:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4233181:sub_4097dd": null, "4233184:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4233233:sub_409811": null, "4233248:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            tmp_4 = v1;\n
            v1 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4233329:sub_409871": null, "4233344:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4233388:sub_4098ac": null, "4233392:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // eax\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4233494:sub_409916": null, "4233504:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4233602:sub_409982": null, "4233616:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
        v4->field_8 = 0;\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    if (v4->field_8 == -1)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4233714:sub_4099f2": null, "4233728:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 == -1)\n
        v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    if (v2->field_8 == -1)\n
    {\n
        cgc_fflush(v2);\n
        v2->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4233822:sub_409a5e": null, "4233824:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4233872:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4233915:sub_409abb": null, "4233920:cgc__vsfprintf": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[14];\n
    char field_12;\n
    char field_13;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_-1;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(unsigned int v16, char *a0)\n
{\n
    int tmp_13;  // tmp #13\n
    struct_2 *v0;  // [bp-0x78]\n
    int tmp_2;  // tmp #2\n
    int tmp_25;  // tmp #25\n
    unsigned int v1;  // [bp-0x74]\n
    char v2;  // [bp-0x69]\n
    struct_0 *v3;  // [bp-0x68], Other Possible Types: unsigned int, char\n
    struct_0 *v4;  // [bp-0x64], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x60], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x58]\n
    unsigned int v8;  // [bp-0x54]\n
    char v9;  // [bp-0x50]\n
    char v10;  // [bp-0x4f]\n
    char v11;  // [bp-0x3e]\n
    char v12;  // [bp-0x3d]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // esi\n
    char *v23;  // edx\n
    struct_0 *v24;  // ebp\n
    struct_0 *v25;  // ecx\n
    void* v26;  // edx, Other Possible Types: unsigned int\n
    char *v27;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v28;  // eax\n
    struct_0 *v29;  // al, Other Possible Types: char, unsigned int\n
    struct_0 *v30;  // ecx\n
    unsigned int v31;  // eax\n
    struct_0 *v32;  // edx\n
    void* v33;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v34;  // ecx\n
    char v35;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v36;  // ecx\n
    unsigned int v37;  // eax\n
    char *v38;  // eax\n
    char *v39;  // eax\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // edx\n
    void* v43;  // edx\n
    unsigned int v44;  // edx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // cc_op\n
    unsigned int v47;  // cc_dep1\n
    char *v48;  // cc_dep2\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // edi\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // cc_op\n
    char *v53;  // cc_dep1\n
    unsigned int v54;  // cc_dep2\n
    unsigned int v56;  // edx\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ebp\n
    char *v59;  // edi, Other Possible Types: unsigned int\n
    void* v60;  // edx\n
    unsigned int v61;  // edi\n
    void* v62;  // edx\n
    struct_0 *v63;  // eax, Other Possible Types: unsigned int\n
    unsigned int v64;  // ecx\n
    char *v65;  // ebx, Other Possible Types: unsigned int\n
    void* v66;  // edx\n
    struct_1 *v67;  // edi, Other Possible Types: unsigned int\n
    struct_2 *v68;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v69;  // ebx\n
    struct_0 *v70;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v71;  // edx\n
    unsigned int v72;  // ebx\n
    struct_0 *v73;  // ecx, Other Possible Types: unsigned int, char\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // edx\n
    unsigned int v76;  // ecx\n
    unsigned int v77;  // edx\n
    char *v78;  // eax\n
    char *v79;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v80;  // ecx\n
    struct_0 *v81;  // ebp\n
    unsigned int v82;  // edx\n
    unsigned int v83;  // edx\n
    unsigned int v84;  // edx\n
    unsigned int v85;  // ebx\n
    unsigned int v86;  // ebx\n
    unsigned int v87;  // cc_op\n
    unsigned int v88;  // cc_dep1\n
    char *v89;  // cc_dep2\n
    unsigned int v90;  // cc_op\n
    char *v91;  // cc_dep1\n
    unsigned int v92;  // cc_dep2\n
    struct_0 *v93;  // ebp\n
    void* v94;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v95;  // edi, Other Possible Types: unsigned int\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // cc_op\n
    char *v99;  // cc_dep1\n
    struct_0 *v100;  // cc_dep2\n
    char *v101;  // eax\n
\n
    v15 = v20;\n
    v14 = v21;\n
    v13 = v22;\n
    v6 = v23;\n
    v24 = &_GLOBAL_OFFSET_TABLE_.field_0;\n
    v59 = a0;\n
    v26 = v16;\n
    v4 = v25;\n
    v8 = 20 + -0x1 * &v9;\n
    v27 = 0;\n
    while (true)\n
    {\n
        v29 = v4;\n
        v4 = &v29->field_0 + 1;\n
        *(&v29) = v29->field_0;\n
        if (!*(&v29))\n
        {\n
LABEL_40a11d:\n
            if (v27 < 2147483647)\n
                goto LABEL_40a136;\n
            if (v27 != -1)\n
                break;\n
LABEL_40a12a:\n
            cgc__terminate();\n
LABEL_40a136:\n
            if (v59)\n
            {\n
                *((v59 + v27)) = 0;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            while (v29 != 37)\n
            {\n
                if (v27 < 2147483647)\n
                {\n
                    v2 = v29;\n
                    if (v26)\n
                    {\n
                        cgc_fwrite(&v2, 1, v26);\n
                        v26 = v16;\n
                    }\n
                    if (v59)\n
                        v59[v27] = v2;\n
                }\n
                else if (v27 == -1)\n
                {\n
                    goto LABEL_40a12a;\n
                }\n
                v27 += 1;\n
                v28 = v4;\n
                v4 = &v28->field_0 + 1;\n
                v29 = v28->field_0;\n
                if (!v29)\n
                    goto LABEL_409b00;\n
            }\n
            v30 = v4;\n
            v4 = *(&v3) + 1;\n
            v31 = *(*(&v3));\n
            if (v31 == 48)\n
            {\n
                v3 = v30;\n
                v5 = 48;\n
                goto LABEL_409bbe;\n
            }\n
            v5 = 32;\n
            if (v31 != 32)\n
            {\n
                if (v31)\n
                {\n
                    v3 = *(&v3);\n
                    v4 = *(&v3);\n
                    goto LABEL_409bbe;\n
                }\n
LABEL_409b00:\n
                v73 = 0;\n
                goto LABEL_409b02;\n
            }\n
            v3 = *(&v3);\n
LABEL_409bbe:\n
            v32 = v4;\n
            v33 = 0;\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2))))\n
                v33 = cgc_strtoul(v32, &v4);\n
            v34 = v4;\n
            v4 = &v34->field_0 + 1;\n
            v35 = v34->field_0;\n
            if (v35 == 108)\n
            {\n
                v7 = v33;\n
                v35 = 1;\n
                if (v4->field_0 == 108)\n
                {\n
                    v4 = &v34->field_0 + 2;\n
                    v35 = 0;\n
                }\n
            }\n
            else if (v35 == 104)\n
            {\n
                v35 = 1;\n
                v7 = v33;\n
                if (v4->field_0 == 104)\n
                    v4 = &v34->field_0 + 2;\n
            }\n
            else if (v35)\n
            {\n
                v7 = v33;\n
                v4 = v34;\n
                v35 = 1;\n
            }\n
            else\n
            {\n
                v73 = 0;\n
                v49 = v16;\n
                goto LABEL_409b02;\n
            }\n
            v36 = v4;\n
            v37 = &v36->field_0 + 1;\n
            v4 = v37;\n
            *(&v32) = v36->field_0;\n
            v73 = v36->field_0;\n
            v59 = v73 - 88;\n
            switch (v59)\n
            {\n
            case 0: case 12: case 29: case 32:\n
                if (v32 != 100)\n
                {\n
                    if (!v35)\n
                    {\n
                        v73 = 0;\n
                        v59 = a0;\n
                        v51 = v16;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v50 = (v32 == 117 ? 16 : 10);\n
                        v76 = *(&v6);\n
                        v3 = v24;\n
                        v65 = &v24[2019].field_13;\n
                        if (v32 == 88)\n
                            v65 = &v24[2020].padding_4[12];\n
                        v12 = 0;\n
                        v68 = &v12;\n
                        if (!v76)\n
                        {\n
                            v11 = *(v65);\n
                            v68 = &v11;\n
                        }\n
                        else\n
                        {\n
                            do\n
                            {\n
                                *((v68 - 1)) = *((v65 + ((0 CONCAT v76) /m v50 >> 32)));\n
                                v68 = &v11;\n
                                tmp_13 = v76;\n
                                v76 = (0 CONCAT v76) /m v50;\n
                            } while (tmp_13 >= v50);\n
                        }\n
                        v1 = v8 + v68;\n
                        v0 = v68;\n
                        v81 = v3;\n
                        cgc_memmove(&v9, v0, v1);\n
                    }\n
LABEL_409f8d:\n
                    v73 = v7;\n
                    v3 = cgc_strlen();\n
                    if (v73 <= v3)\n
                    {\n
                        v94 = v16;\n
                    }\n
                    else\n
                    {\n
                        v59 = v3 - v73;\n
                        v94 = v16;\n
                        do\n
                        {\n
                            if (v27 < 2147483647)\n
                            {\n
                                v2 = v5;\n
                                if (v94)\n
                                {\n
                                    cgc_fwrite(&v2, 1, v94);\n
                                    v94 = v16;\n
                                }\n
                                v73 = a0;\n
                                if (v73)\n
                                    *((v73 + v27)) = v2;\n
                            }\n
                            else if (!(v27 == -1))\n
                            {\n
                                continue;\n
                            }\n
                            tmp_2 = v27;\n
                            v27 += 1;\n
                            v59 += 1;\n
                        } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2)))));\n
                        goto LABEL_40a12a;\n
                    }\n
                    v6 += 4;\n
                    if (v27 < 2147483647)\n
                    {\n
                        v95 = 2147483647 - v27;\n
                        if (v95 > v95)\n
                            v95 = v3;\n
                        if (v94)\n
                        {\n
                            cgc_fwrite(&v9, v95, v94);\n
                            v96 = v16;\n
                        }\n
                        v79 = a0;\n
                        if (v79)\n
                        {\n
                            cgc_memcpy(&a0[v27], &v9, v95);\n
                            v79 = a0;\n
                            v97 = v16;\n
                        }\n
                        *(&v73) = 1;\n
                        v98 = 3;\n
                        v99 = v27;\n
                        v100 = v3;\n
                        v27 += v3;\n
                    }\n
                    else\n
                    {\n
                        *(&v73) = 1;\n
                        tmp_2 = v27;\n
                        v27 += v3;\n
                        v59 = a0;\n
                        if ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t2, Load(addr=stack_base-104, size=4, endness=Iend_LE), 0x0<32>))\n
                            goto LABEL_40a12a;\n
                        break;\n
                    }\n
LABEL_40a09d:\n
                    v59 = v79;\n
                    if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                        goto LABEL_40a12a;\n
                    break;\n
                }\n
                else\n
                {\n
                    v59 = a0;\n
                    if (v35)\n
                    {\n
                        v64 = *(&v6);\n
                        if (v64 >= 0)\n
                        {\n
                            v63 = &v9;\n
                        }\n
                        else\n
                        {\n
                            v9 = 45;\n
                            v64 = -(v64);\n
                            v63 = &v10;\n
                        }\n
                        *((v63 + 19)) = 0;\n
                        v3 = v63;\n
                        if (!v64)\n
                        {\n
                            v67 = v63 + 18;\n
                            *((v63 + 18)) = 48;\n
                        }\n
                        else\n
                        {\n
                            v67 = v63 + 19;\n
                            do\n
                            {\n
                                v75 = v64 * 3435973837 >> 32 >> 3;\n
                                *((v67 - 1)) = (&v24[2019].field_13)[v64 + -10 * v75];\n
                                v67 -= 1;\n
                                tmp_25 = v64;\n
                                v64 = v75;\n
                            } while (tmp_25 > 9);\n
                        }\n
                        v80 = v3;\n
                        cgc_memmove(v80, v67, 20 + v67 - v80);\n
                        goto LABEL_409f8d;\n
                    }\n
                }\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_409d26:\n
                v73 = v3;\n
                v72 = v37 - v73;\n
                if (v27 >= 2147483647)\n
                {\n
                    v45 = v72 + v27;\n
                    *(&v73) = 1;\n
                    v46 = 6;\n
                    v47 = v45;\n
                    v48 = v27;\n
                    v27 = v45;\n
                    goto LABEL_409da1;\n
                }\n
                else\n
                {\n
                    v61 = 2147483647 - v27;\n
                    if (v61 > v72)\n
                        v61 = v72;\n
                    v62 = v16;\n
                    v5 = v72;\n
                    if (v62)\n
                    {\n
                        v3 = v73;\n
                        cgc_fwrite(v73, v61, v62);\n
                        v72 = v5;\n
                        v73 = v3;\n
                        v74 = v16;\n
                    }\n
                    v79 = a0;\n
                    if (v79)\n
                    {\n
                        cgc_memcpy(&a0[v27], v73, v61);\n
                        v79 = a0;\n
                        v72 = v5;\n
                        v83 = v16;\n
                    }\n
                    v86 = v72 + v27;\n
                    *(&v73) = 1;\n
                    v87 = 6;\n
                    v88 = v86;\n
                    v89 = v27;\n
                    v27 = v86;\n
                    goto LABEL_40a09d;\n
                }\n
            case 11:\n
                v38 = v6;\n
                v59 = v38 + 4;\n
                if (v27 < 2147483647)\n
                {\n
                    v2 = *(v38);\n
                    v43 = v16;\n
                    if (v43)\n
                    {\n
                        cgc_fwrite(&v2, 1, v43);\n
                        v56 = v16;\n
                    }\n
                    if (v59)\n
                        *((v59 + v27)) = v2;\n
                    v27 += 1;\n
                    *(&v73) = 1;\n
                    v6 = v59;\n
                    v59 = a0;\n
                    break;\n
                }\n
                v42 = v16;\n
                if (v27 != -1)\n
                {\n
                    v27 += 1;\n
                    *(&v73) = 1;\n
                    v6 = v59;\n
                    v59 = a0;\n
                    break;\n
                }\n
                goto LABEL_40a12a;\n
            case 27:\n
                v39 = v6;\n
                v40 = *(&v39);\n
                v6 = v39 + 4;\n
                v41 = cgc_strlen();\n
                if (v27 >= 2147483647)\n
                {\n
                    *(&v73) = 1;\n
                    v52 = 3;\n
                    v53 = v27;\n
                    v54 = v41;\n
                    v27 += v41;\n
                }\n
                else\n
                {\n
                    v58 = 2147483647 - v27;\n
                    v5 = v41;\n
                    if (2147483647 - v27 > v41)\n
                        v58 = v41;\n
                    v66 = v16;\n
                    if (v66)\n
                    {\n
                        cgc_fwrite(v40, v58, v66);\n
                        v77 = v16;\n
                    }\n
                    v79 = a0;\n
                    if (v79)\n
                    {\n
                        cgc_memcpy(&a0[v27], v40, v58);\n
                        v79 = a0;\n
                        v84 = v16;\n
                    }\n
                    *(&v73) = 1;\n
                    v90 = 3;\n
                    v91 = v27;\n
                    v92 = v5;\n
                    v27 += v5;\n
                    v93 = v24;\n
                    goto LABEL_40a09d;\n
                }\n
LABEL_409da1:\n
                v59 = a0;\n
                v57 = v16;\n
                if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                    goto LABEL_40a12a;\n
                break;\n
            default:\n
                if (!v73)\n
                    goto LABEL_409cff;\n
                else\n
                    goto LABEL_409d26;\n
            }\n
LABEL_409cff:\n
            v70 = v3;\n
            v69 = v37 - v70;\n
            if (v27 >= 2147483647)\n
            {\n
                v85 = v69 + v27;\n
                v44 = v16;\n
                if (v85 < v27)\n
                    goto LABEL_40a12a;\n
            }\n
            else\n
            {\n
                v59 = 2147483647 - v27;\n
                if (v59 > v69)\n
                    v59 = v69;\n
                v60 = v16;\n
                v5 = v69;\n
                if (v60)\n
                {\n
                    v3 = v70;\n
                    cgc_fwrite(v70, v59, v60);\n
                    v69 = v5;\n
                    v70 = v3;\n
                    v71 = v16;\n
                }\n
                v78 = a0;\n
                if (v78)\n
                {\n
                    cgc_memcpy(&v78[v27], v70, v59);\n
                    v69 = v5;\n
                    v82 = v16;\n
                }\n
                v85 = v69 + v27;\n
                if (v85 < v27)\n
                    goto LABEL_40a12a;\n
            }\n
            v73 = 0;\n
            v27 = v85;\n
            v59 = a0;\n
LABEL_409b02:\n
            if (!v73)\n
                goto LABEL_40a11d;\n
        }\n
    }\n
    v101 = v27;\n
    return v101;\n
}\n
", "4233974:sub_409af6": null, "4234108:sub_409b7c": null, "4235185:sub_409fb1": null, "4235592:sub_40a148": null, "4235600:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4235644:sub_40a17c": null, "4235648:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // al\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v0[0];\n
    if (!v0[0])\n
        return v0[0] - *(a0);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4235760:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4235849:sub_40a249": null, "4235856:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4235924:sub_40a294": null, "4235936:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4236000:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4236052:sub_40a314": null, "4236064:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4236148:sub_40a374": null, "4236160:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4236192:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4236320:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // esi\n
    char *v3;  // eax\n
    unsigned int v4;  // edi\n
    char *v5;  // edx, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    unsigned int v7;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v6 = v2[0];\n
    v5 = v3;\n
    if (v2[0])\n
    {\n
        v5 = v3;\n
        if (v1)\n
        {\n
            v4 = 1;\n
            v5 = v3;\n
            while (true)\n
            {\n
                *(v5) = v6;\n
                v5 += 1;\n
                v6 = v2[v4];\n
                if (!v6)\n
                    break;\n
                v4 += 1;\n
                if (1 >= v1)\n
                    break;\n
            }\n
        }\n
    }\n
    v7 = v5 - v3;\n
    if (v7 < v1)\n
    {\n
        do\n
        {\n
            *(v5) = 0;\n
            v5 += 1;\n
            v7 += 1;\n
        } while (v7 < v1);\n
    }\n
    return v0;\n
}\n
", "4236418:sub_40a482": null, "4236432:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (!v4)\n
        return 0;\n
    cgc_memcpy(v4, v0, v3);\n
    v3[v4] = 0;\n
    return v4;\n
}\n
", "4236525:sub_40a4ed": null, "4236528:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // al, Other Possible Types: char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a0, v2);\n
            if (v3)\n
                break;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v5 = &v1[v4 + 1];\n
    if (!v1[v4])\n
        v5 = 0;\n
    *(v0) = v5;\n
    v1[v4] = 0;\n
    return *(v0);\n
}\n
", "4236648:sub_40a568": null, "4236656:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4236744:sub_40a5c8": null, "4236752:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int *v10;  // esi, Other Possible Types: unsigned int\n
    char v11[2];  // edi\n
    char v12;  // al\n
    char v13[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // al, Other Possible Types: char\n
    unsigned int v25;  // edi\n
    char v26[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = a0;\n
    v11 = v6;\n
    v13 = v11;\n
    if (cgc_isspace(v11[0]))\n
    {\n
        v13 = v11;\n
        do\n
        {\n
            if (!*(v13))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v17 = 1;\n
                v18 = 0;\n
                if (!v10)\n
                    goto LABEL_40a7ac;\n
            }\n
            v12 = *((v13 + 1));\n
            v13 += 1;\n
        } while (cgc_isspace(v12));\n
    }\n
    v14 = a1;\n
    if (*(v13) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v13) == 43)\n
            v13 += 1;\n
        if (!v14)\n
            goto LABEL_40a693;\n
    }\n
    else\n
    {\n
        v13 += 1;\n
        v0 = -1;\n
        if (!v14)\n
        {\n
LABEL_40a693:\n
            if (*(v13) == 48)\n
            {\n
                if ((*((v13 + 1)) & 248) == 48)\n
                {\n
                    v13 += 1;\n
                    v14 = 8;\n
                    goto LABEL_40a6e7;\n
                }\n
                if (cgc_tolower(*((v13 + 1))) == 120)\n
                {\n
                    v13 += 2;\n
                    v14 = 16;\n
                    goto LABEL_40a6e7;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v13)))\n
            {\n
                v15 = 0;\n
                v17 = 1;\n
                v18 = 0;\n
                v10 = a0;\n
                v16 = v0;\n
                if (!v10)\n
                    goto LABEL_40a7ac;\n
                tmp_2 = v17;\n
                v26 = v6;\n
                if (!tmp_2)\n
                    v26 = v13;\n
                *(v10) = v26;\n
                goto LABEL_40a7ac;\n
            }\n
LABEL_40a6e7:\n
            v1 = 0;\n
            v2 = 1;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = *(v13);\n
                if (!v19)\n
                    break;\n
                v20 = *(v13);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v13);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (cgc_isupper(v23))\n
                    {\n
                        v21 = *(v13) - 55;\n
                    }\n
                    else\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_40a700;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v14)\n
                {\n
                    v25 = v14 * v18;\n
                    tmp_5 = v25;\n
                    v18 = v25 + v21;\n
                    v24 = v1;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v1 = v24;\n
                    v13 += 1;\n
                    *(&v24) = 1;\n
                    v2 = 0;\n
                }\n
LABEL_40a700:\n
                if (!v24)\n
                    break;\n
            }\n
            v10 = a0;\n
            v16 = v0;\n
            v15 = v1;\n
            v17 = v2;\n
            if (!v10)\n
                goto LABEL_40a7ac;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v13) == 48)\n
        {\n
            v13 += (cgc_tolower(*((v13 + 1))) == 120) * 2;\n
            goto LABEL_40a6e7;\n
        }\n
    }\n
LABEL_40a7ac:\n
    v27 = (!v15 ? 0x80000000 : -(v18));\n
    v28 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v18);\n
    if (v16 < 0)\n
        v28 = v27;\n
    return v28;\n
}\n
", "4237093:sub_40a725": null, "4237286:sub_40a7e6": null, "4237296:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    int tmp_38;  // tmp #38\n
    int tmp_41;  // tmp #41\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    unsigned int v14;  // edi\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    void* v17;  // edi\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    char v19[2];  // ebp, Other Possible Types: unsigned int\n
    void* v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // dl, Other Possible Types: char\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // ebx\n
    unsigned int v36;  // edi\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v38;  // ebx\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // cc_dep2\n
    unsigned int v42;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v19 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v19 = v12;\n
        do\n
        {\n
            if (!*(v19))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v0 = 1;\n
                v1 = 0;\n
                v17 = 0;\n
                v18 = a0;\n
                if (!v18)\n
                    goto LABEL_40aa22;\n
            }\n
            v13 = *((v19 + 1));\n
            v19 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = a1;\n
    if (*(v19) != 45)\n
    {\n
        v2 = 1;\n
        if (*(v19) == 43)\n
            v19 += 1;\n
        if (!v14)\n
            goto LABEL_40a8cd;\n
    }\n
    else\n
    {\n
        v19 += 1;\n
        v2 = -1;\n
        if (!v14)\n
        {\n
LABEL_40a8cd:\n
            if (*(v19) == 48)\n
            {\n
                if ((*((v19 + 1)) & 248) == 48)\n
                {\n
                    v19 += 1;\n
                    v14 = 8;\n
                    goto LABEL_40a925;\n
                }\n
                if (cgc_tolower(*((v19 + 1))) == 120)\n
                {\n
                    v19 += 2;\n
                    v14 = 16;\n
                    goto LABEL_40a925;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v19)))\n
            {\n
                v15 = 0;\n
                v0 = 1;\n
                v1 = 0;\n
                v20 = 0;\n
                v18 = a0;\n
                v16 = v2;\n
                if (!v18)\n
                    goto LABEL_40aa22;\n
                v37 = v8;\n
                if (!v0)\n
                    v37 = v19;\n
                *(v18) = v37;\n
                goto LABEL_40aa22;\n
            }\n
LABEL_40a925:\n
            v15 = 0;\n
            v0 = 1;\n
            v1 = 0;\n
            v3 = 0;\n
            while (true)\n
            {\n
                v21 = *(v19);\n
                if (!v21)\n
                    break;\n
                v22 = *(v19);\n
                if (cgc_isdigit(v21))\n
                {\n
                    v23 = v22 - 48;\n
                }\n
                else\n
                {\n
                    v25 = *(v19);\n
                    if (cgc_islower(v22))\n
                    {\n
                        v23 = v25 - 87;\n
                    }\n
                    else if (cgc_isupper(v25))\n
                    {\n
                        v23 = *(v19) - 55;\n
                    }\n
                    else\n
                    {\n
                        v26 = 0;\n
                        goto LABEL_40a950;\n
                    }\n
                }\n
                v26 = 0;\n
                if (v23 < v14)\n
                {\n
                    v0 = v15;\n
                    v27 = v14;\n
                    v28 = v14 >> 31;\n
                    v29 = v1;\n
                    v32 = v29 * v27;\n
                    v33 = v27 * v3 + v29 * v28 + (v29 * v27 >> 32);\n
                    v14 = v27;\n
                    v15 = v0;\n
                    v26 = v23 >> 31;\n
                    tmp_38 = v32;\n
                    v34 = v32 + v23;\n
                    tmp_41 = v33;\n
                    v35 = v33 + v26 + (tmp_38 + v23 < tmp_38);\n
                    v3 = v35;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((t38 + ecx<4>) < t38))), Conv(1->32, ((t38 + ecx<4>) < t38))))\n
                        v15 = 1;\n
                    v19 += 1;\n
                    *(&v26) = 1;\n
                    v0 = 0;\n
                    v1 = v34;\n
                }\n
LABEL_40a950:\n
                if (!v26)\n
                    break;\n
            }\n
            v18 = a0;\n
            v16 = v2;\n
            v36 = v3;\n
            if (!v18)\n
                goto LABEL_40aa22;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v19) == 48)\n
        {\n
            v19 += (cgc_tolower(*((v19 + 1))) == 120) * 2;\n
            goto LABEL_40a925;\n
        }\n
    }\n
LABEL_40aa22:\n
    v38 = v1;\n
    v39 = -(v38);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v39 = v38;\n
    v40 = -(0 < v15) | v39;\n
    v41 = v38 < 2147483649;\n
    v42 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v40);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v42 = v40;\n
    return v42;\n
}\n
", "4237693:sub_40a97d": null, "4237941:sub_40aa75": null, "4237952:_ZN4blubC1EPcS0_": "int blub::__ctor__(unsigned int v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1[2];  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v1[0] = v1;\n
    cgc_strncpy(v1 + 1, a0, cgc_strlen(a0));\n
    cgc_memcpy(&v1[5] + 1, a1, 140);\n
    v2 = tick();\n
    v1[1] = v2;\n
    return v2;\n
}\n
", "4238051:sub_40aae3": null, "4238064:_ZN7blubberC1Ev": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
int blubber::__ctor__(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // esi\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v6 = v3;\n
    v0 = 64;\n
    vector::__ctor__(v6);\n
    v0 = 64;\n
    v6->field_18 = 0;\n
    return vector::__ctor__(&v3->padding_0[12]);\n
}\n
", "4238127:sub_40ab2f": null, "4238128:_ZN7blubber12set_usernameEPc": "int blubber::set_username(unsigned int v0, char *a0)\n
{\n
    return cgc_strcpy(v0 + 28, a0);\n
}\n
", "4238169:sub_40ab59": null, "4238176:_ZN7blubber8gen_blubEv": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int blubber::gen_blub(unsigned int v7)\n
{\n
    char v0;  // [bp-0xbc]\n
    char v1;  // [bp-0xb8]\n
    char *v2;  // [bp-0xa8]\n
    unsigned int v3;  // [bp-0xa4]\n
    char v4;  // [bp-0x9d]\n
    char v5;  // [bp-0x9c]\n
    char v6;  // [bp-0x11]\n
    void* v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // eax\n
    char *v11;  // edi\n
    unsigned int v12;  // esi\n
    struct_0 *v13;  // eax, Other Possible Types: unsigned int\n
    unsigned int v14[2];  // esi\n
    char *v15;  // edi\n
\n
    cgc_memset(&v4, 0, 141);\n
    v8 = 0;\n
    v9 = 140;\n
    v2 = \" \";\n
    do\n
    {\n
        v3 = v8;\n
        v10 = choice();\n
        v11 = *(&(&_GLOBAL_OFFSET_TABLE_)[3196 + 4 * v10 + -12000 * (v10 * 91625969 >> 32 >> 6)]);\n
        if (cgc_strlen(v2) + cgc_strlen(v11) <= v9)\n
        {\n
            v12 = cgc_strlen(&v4);\n
            v13 = &v4;\n
            if (v12)\n
            {\n
                cgc_strcpy(&(&v4)[v12], v2);\n
                v13 = &(&v5)[v12];\n
            }\n
            cgc_strcpy(v13, v11);\n
            v9 = 140 - cgc_strlen(&v4);\n
            v8 = v3;\n
            if (!v9)\n
                break;\n
            continue;\n
        }\n
        else\n
        {\n
            v8 = v3 + 1;\n
            if (!v9)\n
                break;\n
            continue;\n
        }\n
    } while (v8 < 8);\n
    v6 = 0;\n
    v14 = operator new(184);\n
    v15 = v7 + 28;\n
    v14[0] = v14;\n
    cgc_strncpy(v14 + 1, v15, cgc_strlen(v15));\n
    cgc_memcpy(&v14[5] + 1, &v4, 140);\n
    v14[1] = tick(*(&v0), *(&v1));\n
    vector::add(v7);\n
    return v14;\n
}\n
", "4238333:sub_40abfd": null, "4238553:sub_40acd9": null, "4238560:_ZN7blubber11record_blubEPc": "int blubber::record_blub(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2[2];  // esi\n
\n
    v1 = v0;\n
    v2 = operator new(184);\n
    v2[0] = v2;\n
    cgc_strncpy(v2 + 1, v1 + 28, cgc_strlen(v1 + 28));\n
    cgc_memcpy(&v2[5] + 1, a0, 140);\n
    v2[1] = tick();\n
    vector::add(v1);\n
    return v2;\n
}\n
", "4238690:sub_40ad62": null, "4238704:_ZN7blubber9subscribeEPS_": "char blubber::subscribe(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v6 = v3 + 12;\n
    v0 = a0;\n
    v7 = vector::contains(v6);\n
    if (!v7)\n
    {\n
        v0 = v0;\n
        v7 = vector::add(v6);\n
        return v7;\n
    }\n
    return v7;\n
}\n
", "4238764:sub_40adac": null, "4238768:_ZN7blubber11unsubscribeEPS_": "int blubber::unsubscribe(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v6 = v3 + 12;\n
    v0 = a0;\n
    v7 = vector::contains(v6);\n
    if (v7)\n
    {\n
        v0 = v0;\n
        v0 = vector::index_of(v6);\n
        v7 = vector::remove(v6);\n
        return v7;\n
    }\n
    return v7;\n
}\n
", "4238838:sub_40adf6": null, "4238848:_Z10check_quitPc": "extern char g_413f8d;\n
\n
int check_quit(char v0[2])\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = cgc_strstr(v0, &g_413f8d);\n
    if (v1)\n
    {\n
        cgc__terminate();\n
        return handle_read();\n
    }\n
    return v1;\n
}\n
", "4238912:_Z11handle_readP4FILES0_P6vector": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_413f8d;\n
extern unsigned int g_413f92;\n
\n
int handle_read(void* v6, void* a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xd0]\n
    void* v1;  // [bp-0xcc]\n
    void* v2;  // [bp-0xc8], Other Possible Types: unsigned int\n
    char v3;  // [bp-0xc4]\n
    char v4[2];  // [bp-0xbe]\n
    char v5[2];  // [bp-0x9d]\n
    struct_0 *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // eax\n
\n
    cgc_fprintf(a0, &g_413f92);\n
    v1 = 0;\n
    if (cgc_fread(&v1, 4, v6) != 4)\n
        return 0;\n
    v0 = &g_413f8d;\n
    if (cgc_strstr(&v1, &g_413f8d))\n
    {\n
        cgc__terminate();\n
        return handle_blub();\n
    }\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    v7 = &v3;\n
    while (true)\n
    {\n
        cgc_memset(v4, 0, 33);\n
        cgc_memset(v5, 0, 141);\n
        if (cgc_fread(v7, 4, v6) != 4)\n
            return 0;\n
        if (cgc_strstr(v7, v0))\n
            break;\n
        if (cgc_fread(v4, 32, v6) < 0)\n
            return 0;\n
        if (cgc_strstr(v4, v0))\n
            break;\n
        if (cgc_fread(v5, 140, v6) < 0)\n
            return 0;\n
        if (cgc_strstr(v5, v0))\n
            break;\n
        v8 = operator new(180);\n
        *(v8) = *(&v3);\n
        cgc_memcpy(v8 + 1, v4, 33);\n
        cgc_memcpy(&v8[9] + 1, v5, 141);\n
        vector::add(a1);\n
        v2 += 1;\n
        v7 = &v3;\n
        if (v2 >= v1)\n
            return 0;\n
    }\n
}\n
", "4239408:_Z11handle_blubP4FILES0_": "extern unsigned int g_413f95;\n
\n
int handle_blub()\n
{\n
    char v1;  // [bp+0x8]\n
\n
    cgc_fprintf(*(&v1), &g_413f95);\n
    return;\n
}\n
", "4239453:sub_40b05d": null, "4239456:_Z13handle_reblubP4FILES0_P6vector": "extern unsigned int g_413f98;\n
extern unsigned int g_413f9b;\n
extern unsigned int g_413fbb;\n
\n
int handle_reblub(unsigned int v4, void* a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    void* v12;  // ebp, Other Possible Types: unsigned int\n
    void* v13;  // ebp, Other Possible Types: unsigned int\n
\n
    v3 = v6;\n
    v7 = *(&v5);\n
    v13 = a0;\n
    if (vector::length())\n
    {\n
        v8 = choice();\n
        vector::length();\n
        v9 = vector::get(v7);\n
        if (v9)\n
        {\n
            v1 = v9;\n
            if (!vector::length())\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v2 = v1 + 8;\n
                v12 = 0;\n
                v10 = v7;\n
                v11 = 0;\n
                do\n
                {\n
                    v11 += cgc_strcmp(v2, vector::get(v10) + 8) < 1;\n
                    v12 += 1;\n
                } while (v12 < vector::length(v10));\n
            }\n
            v13 = a0;\n
            cgc_fprintf(a0, &g_413f98);\n
            v0 = v1 + 8;\n
            cgc_fprintf(v13, &g_413f9b);\n
            goto LABEL_40b17d;\n
        }\n
    }\n
    cgc_fprintf(v13, &g_413f98);\n
    v0 = \"asdf\";\n
    cgc_fprintf(v13, &g_413f9b);\n
    v11 = 0;\n
LABEL_40b17d:\n
    v0 = v11;\n
    cgc_fprintf(v13, &g_413fbb);\n
    return 0;\n
}\n
", "4239771:sub_40b19b": null, "4239776:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin[6];\n
extern unsigned int cgc_stdout[6];\n
extern char g_413f8d;\n
extern unsigned int g_413f95;\n
extern unsigned int g_413fb2;\n
extern unsigned int g_413fb4;\n
\n
int main()\n
{\n
    struct_0 *v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x2c]\n
    char *v3;  // [bp-0x28]\n
    char v4[2];  // [bp-0x21]\n
    char v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v14[5];  // esi\n
    void* v15;  // eax\n
    struct_0 *v17;  // ebp\n
    unsigned int v18;  // ebp\n
    void* v20;  // esi, Other Possible Types: unsigned int\n
    void* v21;  // esi\n
    struct_0 *v22;  // ebp\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ecx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    cgc_fxlat(cgc_stdin, \"9an538n9av3;5\");\n
    cgc_fxlat(cgc_stdout, \"9an538n9av3;5\");\n
    v14 = cgc_fopen(3, 0);\n
    v15 = cgc_fopen(3, 1);\n
    cgc_fbuffered(v15, 0);\n
    cgc_fbuffered(v14, 0);\n
    v2 = v15;\n
    cgc_fprintf(v15, &g_413fb4);\n
    v17 = v4;\n
    cgc_freaduntil(v4, 5, 4, v14);\n
    v3 = &g_413f8d;\n
    if (cgc_strstr(v4, &g_413f8d))\n
    {\n
LABEL_40b38a:\n
        cgc__terminate();\n
        choice();\n
        return;\n
    }\n
    v18 = v14;\n
    vector::__ctor__(&v5);\n
    v20 = 0;\n
    do\n
    {\n
        if (v20 != 1)\n
        {\n
            cgc_fprintf(v2, &g_413fb2);\n
            cgc_freaduntil(v4, 5, 4, v18);\n
            if (cgc_strstr(v4, v3))\n
                goto LABEL_40b38a;\n
        }\n
        v20 += 1;\n
    } while (v20 != 3);\n
    v21 = v18;\n
    v1 = v18;\n
    v22 = v4;\n
    cgc_freaduntil(v4, 5, 4, v1);\n
    *(&v0) = v4;\n
    if (!cgc_strstr(v4, v3))\n
    {\n
        do\n
        {\n
            v24 = choice();\n
            v25 = v24 * 1431655766 >> 32;\n
            v26 = v24 - (v25 / 0x80000000 + v25) * 3;\n
            if (v26 == 2)\n
            {\n
                handle_reblub(v0, v2);\n
            }\n
            else if (v26 == 1)\n
            {\n
                cgc_fprintf(v2, &g_413f95);\n
            }\n
            else\n
            {\n
                if (!(!v26))\n
                    continue;\n
                handle_read(v21, v2, &v5);\n
            }\n
            cgc_freaduntil(v4, 5, 4, v21);\n
            *(&v0) = v4;\n
        } while (!cgc_strstr(v4, v3));\n
    }\n
}\n
", "4239989:sub_40b275": null, "4240124:sub_40b2fc": null, "4240236:sub_40b36c": null, "4240288:_Z6choicev": "extern unsigned int _ZL5cgc_x;\n
\n
int choice()\n
{\n
    _ZL5cgc_x = _ZL5cgc_x * 1103515245 + 12345;\n
    return _ZL5cgc_x >> 16 & 32767;\n
}\n
", "4240330:sub_40b3ca": null, "4240336:_Z5sleepj": "int sleep(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = v3 * 1125899907 >> 32 >> 18;\n
    v2 = v3 - v1 * 1000000;\n
    v0 = 0;\n
    return cgc_fdwait(1, 0, 0, &v1);\n
}\n
", "4240409:sub_40b419": null, "4240416:_Z4tickv": "extern unsigned int _ZL9wall_time;\n
\n
int tick()\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = _ZL9wall_time;\n
    _ZL9wall_time = _ZL9wall_time + 1;\n
    return v1;\n
}\n
", "4240444:sub_40b43c": null, "4240448:_ZN6vectorC1Ei": "int vector::__ctor__(unsigned int v1[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3[3];  // esi\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v4 = (v4 ? 64 : a0);\n
    v3[1] = v4;\n
    v3[0] = 0;\n
    v5 = cgc_calloc(v4, 4);\n
    v3[2] = v5;\n
    return v5;\n
}\n
", "4240513:sub_40b481": null, "4240528:_ZN6vector3setEiPv": "int vector::set(unsigned int v0[3], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int *v1;  // eax\n
    unsigned int v2[3];  // edx\n
    unsigned int v3;  // ecx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v3 > v1)\n
        *((v2[2] + v1 * 4)) = a1;\n
    *(&v1) = !(v3 <= v1);\n
    return v1;\n
}\n
", "4240560:_ZN6vector6lengthEv": "int vector::length(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4240567:sub_40b4b7": null, "4240576:_ZN6vector6removeEi": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int vector::remove(struct_0 *v0, unsigned int *a0)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int *v1;  // edx\n
    struct_0 *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2->field_0;\n
    if (v1 + 1 < v3)\n
    {\n
        v4 = ~(v1) + v3;\n
        do\n
        {\n
            v5 = v2->field_8;\n
            *((v5 + v1 * 4 - 4)) = *((v5 + v1 * 4));\n
            tmp_5 = v4;\n
            v4 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    v2->field_8[1 + v3].field_0 = 0;\n
    v2->field_0 = v3 - 1;\n
    return v0;\n
}\n
", "4240643:sub_40b503": null, "4240656:_ZN6vector8containsEPv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
int vector::contains(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // edx\n
    unsigned int v4[2];  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax, Other Possible Types: char\n
\n
    v1 = v0;\n
    v2 = v1->field_0;\n
    v6 = [D] x86g_calculate_condition(0xf<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>);\n
    if (v2 <= 0)\n
        return v6;\n
    v3 = a0;\n
    v4 = v1->field_8;\n
    if (v4[0] == v3)\n
        return v6;\n
    v5 = 1;\n
    while (true)\n
    {\n
        v6 = v5;\n
        if (v2 == v5)\n
            break;\n
        v5 += 1;\n
        if (v4[v6] == v3)\n
            break;\n
    }\n
    *(&v6) = v6 < v2;\n
    return v6;\n
}\n
", "4240710:sub_40b546": null, "4240720:_ZN6vector3getEi": "int vector::get(unsigned int v0[3], unsigned int *a0)\n
{\n
    unsigned int *v1;  // ecx\n
    unsigned int v2[3];  // edx\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = 0;\n
    if (v2[0] > v1)\n
        v3 = *((v2[2] + v1 * 4));\n
    return v3;\n
}\n
", "4240741:sub_40b565": null, "4240752:_ZN6vector3addEPv": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int vector::add(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // edi\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_4;\n
    if (v1->field_0 == v2)\n
    {\n
        v1->field_8 = cgc_realloc(v1->field_8, v2 * 8);\n
        v1->field_4 = v1->field_4 * 2;\n
    }\n
    v3 = v1->field_0;\n
    v4 = v1->field_8;\n
    v1->field_0 = v3 + 1;\n
    *((v4 + v3 * 4)) = a0;\n
    return v3;\n
}\n
", "4240823:sub_40b5b7": null, "4240832:_ZN6vector8index_ofEPv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int vector::index_of(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v2;  // ecx\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1->field_0;\n
    if (v2 <= 0)\n
        return -1;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v1->field_8[v5].field_0 != a0)\n
        {\n
            v5 += 1;\n
            if (v2 == v5)\n
                return -1;\n
        }\n
        else\n
        {\n
            return v5;\n
        }\n
    }\n
}\n
", "4240884:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc_receive": null, "5242896:cgc_allocate": null, "5242900:cgc__terminate": null, "5242904:cgc_deallocate": null, "5242908:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}