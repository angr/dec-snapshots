{"4202496:_init": "extern struct_0 *g_40e118;\n
\n
int _init()\n
{\n
    if (g_40e118)\n
    {\n
        g_40e118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:sub_4020c0": "int sub_4020c0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202694:sub_4020c6": null, "4202704:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202747:sub_4020fb": null, "4202748:sub_4020fc": "int sub_4020fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202752:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202756:sub_402104": null, "4202768:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 49167;\n
    v6 = v5 + 63;\n
    v7 = v5 + 63;\n
    if (v7 == v6)\n
        return v5 + 63;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202819:sub_402143": "int sub_402143()\n
{\n
}\n
", "4202825:sub_402149": "int sub_402149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202832:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 49103;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 63;\n
    v9 = (v6 + 63 - (v6 + 63) >> 31) + (63 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202903:sub_402197": "int sub_402197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202912:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40e114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__TMC_END__)\n
        return;\n
    if (g_40e114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020c0();\n
    }\n
    deregister_tm_clones();\n
    __TMC_END__ = 1;\n
    return;\n
}\n
", "4202987:sub_4021eb": "int sub_4021eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202992:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203001:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203005:sub_4021fd": null, "4203008:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203062:sub_402236": null, "4203072:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203126:sub_402276": null, "4203136:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203190:sub_4022b6": null, "4203200:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isupper(v3) && !cgc_islower(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203296:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isalpha(v3) && !cgc_isdigit(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203392:cgc_isprint": "int cgc_isprint(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 32 && v1 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203446:sub_4023b6": null, "4203456:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + -32;\n
    return v0;\n
}\n
", "4203530:sub_40240a": null, "4203536:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4203610:sub_40245a": null, "4203616:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203710:sub_4024be": null, "4203712:cgc_SetFsError": "extern char FS_ERROR;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SetFsError(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = FS_ERROR;\n
    if (!FS_ERROR)\n
    {\n
        v0 = 63;\n
        v3 = cgc_strncpy(v1 + 784, v2);\n
    }\n
    return v3;\n
}\n
", "4203791:sub_40250f": null, "4203792:cgc_ClearFsError": "extern char FS_ERROR;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ClearFsError()\n
{\n
    FS_ERROR = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4203816:sub_402528": null, "4203824:cgc_FsError": "extern char FS_ERROR;\n
\n
int cgc_FsError()\n
{\n
    return &FS_ERROR;\n
}\n
", "4203847:sub_402547": null, "4203856:cgc_DestroyFilesystem": "typedef struct struct_1 {\n
    char padding_0[256];\n
    struct struct_2 *field_100;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_DestroyFilesystem()\n
{\n
    struct_1 *v0;  // [bp-0x14]\n
    struct struct_0 **v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v0[32].padding_0[156]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v1 < v0->field_100->field_4; v1 += 1)\n
    {\n
        if (*((v0->field_100->field_8 + (v1 << 2))))\n
        {\n
            if (*(*((v0->field_100->field_8 + (v1 << 2)))))\n
            {\n
                cgc_free();\n
                *(*((v0->field_100->field_8 + v1 * 4))) = 0;\n
            }\n
            if (*((*((v0->field_100->field_8 + (v1 << 2))) + 4)))\n
            {\n
                cgc_free();\n
                *((*((v0->field_100->field_8 + v1 * 4)) + 4)) = 0;\n
            }\n
            if (*((*((v0->field_100->field_8 + (v1 << 2))) + 16)))\n
            {\n
                cgc_free();\n
                *((*((v0->field_100->field_8 + v1 * 4)) + 16)) = 0;\n
            }\n
            cgc_free();\n
            *((v0->field_100->field_8 + v1 * 4)) = 0;\n
        }\n
    }\n
    cgc_free();\n
    v0->field_100 = 0;\n
    cgc_ClearFsError();\n
    v2 = 1;\n
    return v2;\n
}\n
", "4204329:sub_402729": null, "4204336:cgc_InitFilesystem": "typedef struct struct_0 {\n
    char padding_0[256];\n
    struct struct_1 *field_100;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern unsigned int FS_ERROR;\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitFilesystem(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v0 = 64;\n
    cgc_bzero(&FS_ERROR);\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[130]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (v1->field_100)\n
        cgc_DestroyFilesystem();\n
    v6 = cgc_calloc();\n
    v1->field_100 = v6;\n
    if (!v6)\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[107]);\n
        v2 = 0;\n
        return v2;\n
    }\n
    v7 = cgc_calloc();\n
    v1->field_100->field_8 = v7;\n
    if (!v7)\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[107]);\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1->field_100->field_4 = v4;\n
    if (!cgc_Login())\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[93]);\n
        cgc_free();\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (!cgc_InitPasswd())\n
    {\n
        cgc_Logout();\n
        cgc_SetFsError(&v1[32].padding_0[80]);\n
        cgc_free();\n
        cgc_free();\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v0 = 32;\n
        cgc_bzero(&v1[3].padding_0[68]);\n
        cgc_ClearFsError();\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4204824:sub_402918": null, "4204832:cgc_Login": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_Login(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[29].padding_0[216]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_strlen();\n
    v2 = cgc_calloc();\n
    if (!v2)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[243]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = v4;\n
    cgc_strcpy(v2);\n
    if (v1->field_104)\n
    {\n
        cgc_free();\n
        v1->field_104 = 0;\n
    }\n
    v1->field_104 = v2;\n
    cgc_ClearFsError();\n
    v3 = 1;\n
    return v3;\n
}\n
", "4205057:sub_402a01": null, "4205072:cgc_InitPasswd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitPasswd(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v6;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        cgc_SetFsError(v2 - 7855);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = cgc_fopen(v2 - 7732);\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v2 - 7831);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_fwrite(v2 - 7804, 5, 1);\n
    v1 = v5;\n
    v6 = cgc_strlen(v5, 5, 1);\n
    v0 = v3;\n
    cgc_fwrite(v1, v6, 1);\n
    cgc_fclose(v3, v6, 1);\n
    cgc_ClearFsError();\n
    v4 = 1;\n
    return v4;\n
}\n
", "4205329:sub_402b11": null, "4205344:cgc_Logout": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_CurrentUser;\n
\n
int cgc_Logout()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_CurrentUser)\n
    {\n
        v0 = v1->field_104;\n
        cgc_free();\n
    }\n
    v1->field_104 = 0;\n
    cgc_ClearFsError();\n
    return 1;\n
}\n
", "4205425:sub_402b71": null, "4205440:cgc_FindFile": "typedef struct struct_0 {\n
    char padding_0[256];\n
    struct struct_1 *field_100;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindFile(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v1->field_100->field_4)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*((v1->field_100->field_8 + (v2 << 2))) && *(*((v1->field_100->field_8 + (v2 << 2)))))\n
        {\n
            v0 = v4;\n
            if (!cgc_strcmp(*(*((v1->field_100->field_8 + (v2 << 2))))))\n
            {\n
                v3 = *((v1->field_100->field_8 + v2 * 4));\n
                return v3;\n
            }\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4205655:sub_402c57": null, "4205664:cgc_CreateEmptyFile": "typedef struct struct_0 {\n
    char padding_0[256];\n
    struct struct_1 *field_100;\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CreateEmptyFile(unsigned int v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x18]\n
    struct struct_2 **v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_2 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    struct_0 *v8;  // ebx\n
    struct_0 *v9;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[185]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!v1->field_104)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[168]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if ((a0 & 153))\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[151]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (cgc_FindFile(v4))\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[138]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v1->field_100->field_4)\n
        {\n
LABEL_402f87:\n
            if (v2 != v1->field_100->field_4)\n
            {\n
                cgc_ClearFsError();\n
                v3 = *((v1->field_100->field_8 + v2 * 4));\n
                return v3;\n
            }\n
            cgc_SetFsError(&v1[31].padding_0[118]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*((v1->field_100->field_8 + (v2 << 2))))\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v5 = cgc_calloc();\n
            *((v1->field_100->field_8 + v2 * 4)) = v5;\n
            if (!v5)\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[243]);\n
                v3 = 0;\n
                return v3;\n
            }\n
            cgc_strlen();\n
            v6 = cgc_calloc();\n
            *(*((v1->field_100->field_8 + v2 * 4))) = v6;\n
            if (!v6)\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[243]);\n
                cgc_free();\n
                *((v1->field_100->field_8 + v2 * 4)) = 0;\n
                v3 = 0;\n
                return v3;\n
            }\n
            v0 = v4;\n
            cgc_strcpy(*(*((v1->field_100->field_8 + v2 * 4))));\n
            v7 = cgc_calloc(5);\n
            *((*((v1->field_100->field_8 + v2 * 4)) + 4)) = v7;\n
            if (!v7)\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[243]);\n
                cgc_free();\n
                *(*((v1->field_100->field_8 + v2 * 4))) = 0;\n
                cgc_free();\n
                *((v1->field_100->field_8 + v2 * 4)) = 0;\n
                v3 = 0;\n
                return v3;\n
            }\n
            v8 = v1;\n
            v0 = v8->field_104;\n
            cgc_strcpy(*((*((v8->field_100->field_8 + v2 * 4)) + 4)));\n
            v9 = v1;\n
            *((*((v9->field_100->field_8 + v2 * 4)) + 8)) = a0;\n
            *((*((v9->field_100->field_8 + v2 * 4)) + 12)) = 0;\n
            *((*((v9->field_100->field_8 + v2 * 4)) + 16)) = 0;\n
            goto LABEL_402f87;\n
            goto LABEL_402f87;\n
        }\n
    }\n
}\n
", "4206560:cgc_fopen": "typedef struct struct_3 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
extern struct_3 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_fopen(unsigned int v5, char *a0)\n
{\n
    struct_3 *v0;  // [bp-0x1c]\n
    struct_1 *v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v0[32].padding_0[28]);\n
        v4 = 0;\n
        return v4;\n
    }\n
    if (v5 && a0)\n
    {\n
        if (cgc_strlen() > 1)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[151]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (*(a0) != 114 && *(a0) != 119)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[151]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (!v0->field_104)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[168]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_FindFile(v5);\n
        if (!v2 && *(a0) == 114)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[78]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (v2)\n
        {\n
            for (v3 = 0; v3 < 8; v3 += 1)\n
            {\n
                if (*(&v0[3].padding_0[56 + 4 * v3]) && *(*(&v0[3].padding_0[56 + 4 * v3])) == v2)\n
                {\n
                    cgc_SetFsError(&v0[31].padding_0[56]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
        }\n
        if (v2 && cgc_strcmp(v0->field_104))\n
        {\n
            if (cgc_strcmp(v2->field_4))\n
            {\n
                if (*(a0) == 114 && !(v2->field_8 & 64))\n
                {\n
                    cgc_SetFsError(&v0[31].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (*(a0) == 119 && !(v2->field_8 & 96))\n
                {\n
                    cgc_SetFsError(&v0[31].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
            else\n
            {\n
                if (*(a0) == 114 && !(v2->field_8 & 4))\n
                {\n
                    cgc_SetFsError(&v0[31].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (*(a0) == 119 && !(v2->field_8 & 6))\n
                {\n
                    cgc_SetFsError(&v0[31].padding_0[35]);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
        }\n
        v1 = cgc_calloc();\n
        if (!v1)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[243]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        for (v3 = 0; v3 < 8; v3 += 1)\n
        {\n
            if (!*((848 + &v0->padding_0[0] + 0x4 * v3)))\n
            {\n
                *(&v0[3].padding_0[56 + 4 * v3]) = v1;\n
                break;\n
            }\n
        }\n
        if (v3 == 8)\n
        {\n
            cgc_SetFsError(&v0[31].padding_0[17]);\n
            cgc_free();\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (*(a0) != 119)\n
        {\n
            v1->field_0 = &v2;\n
            v1->field_4 = 4;\n
            v1->field_8 = 0;\n
        }\n
        else if (v2)\n
        {\n
            v1->field_0 = &v2;\n
            v1->field_4 = 6;\n
            v1->field_8 = 0;\n
            v1->field_0->field_c = 0;\n
            if (v1->field_0->field_10)\n
            {\n
                cgc_free();\n
                v1->field_0->field_10 = 0;\n
            }\n
        }\n
        else\n
        {\n
            v2 = cgc_CreateEmptyFile(v5, 6);\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v0[30].padding_0[0x100]);\n
                *(&v0[3].padding_0[56 + 4 * v3]) = 0;\n
                cgc_free();\n
                v4 = 0;\n
                return v4;\n
            }\n
            v1->field_0 = &v2;\n
            v1->field_4 = 6;\n
            v1->field_8 = 0;\n
        }\n
        cgc_ClearFsError();\n
        v4 = v1;\n
        return v4;\n
    }\n
    cgc_SetFsError(&v0[31].padding_0[103]);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4207864:sub_4034f8": null, "4207872:cgc_fclose": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fclose(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0xa]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v0 - 8154);\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        if (*((v0 + (v1 << 2) + 848)) == v3)\n
            *((v0 + v1 * 4 + 848)) = 0;\n
    }\n
    cgc_ClearFsError();\n
    cgc_free();\n
    v2 = 1;\n
    return v2;\n
}\n
", "4208045:sub_4035ad": null, "4208048:cgc_fread": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v3, unsigned int a0, unsigned int a1, struct_0 *a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 && a2)\n
    {\n
        if (!a2->field_0->field_10)\n
        {\n
            cgc_SetFsError(v1 - 8102);\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a1 * a0 > a2->field_0->field_c - a2->field_8)\n
        {\n
            v0 = a2->field_0->field_c - a2->field_8;\n
            cgc_memcpy(v3, a2->field_0->field_10 + a2->field_8);\n
            v4 = a2;\n
            v4->field_8 = a2->field_0->field_c - a2->field_8 + v4->field_8;\n
            cgc_ClearFsError();\n
            v2 = a2->field_0->field_c - a2->field_8;\n
            return v2;\n
        }\n
        else\n
        {\n
            v0 = a1 * a0;\n
            cgc_memcpy(v3, a2->field_0->field_10 + a2->field_8);\n
            v5 = a2;\n
            v5->field_8 = a1 * a0 + v5->field_8;\n
            cgc_ClearFsError();\n
            v2 = a1 * a0;\n
            return v2;\n
        }\n
    }\n
    cgc_SetFsError(v1 - 8133);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4208395:sub_40370b": null, "4208400:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v4, unsigned int a0, unsigned int a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5[5];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4 && a2)\n
    {\n
        v2 = cgc_calloc();\n
        if (!v2)\n
        {\n
            cgc_SetFsError(v1 - 8427);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*(a2)->field_10)\n
        {\n
            v0 = *(a2)->field_c;\n
            cgc_memcpy(v2, *(a2)->field_10);\n
        }\n
        v0 = a1 * a0;\n
        cgc_memcpy(v2 + *(a2)->field_c, v4);\n
        v5 = *(a2);\n
        v5[3] = a1 * a0 + v5[3];\n
        if (*(a2)->field_10)\n
            cgc_free();\n
        *(a2)->field_10 = v2;\n
        cgc_ClearFsError();\n
        v3 = a1 * a0;\n
        return v3;\n
    }\n
    cgc_SetFsError(v1 - 8133);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4208735:sub_40385f": null, "4208736:cgc_fgets": "typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgets(unsigned int v4, unsigned int a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_50;  // tmp #50\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    struct_2 *v6;  // edx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v4)\n
    {\n
        cgc_SetFsError(v1 - 8090);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(v1 - 8075);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (a1->field_8 == a1->field_0->field_c)\n
    {\n
        cgc_SetFsError(v1 - 8102);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (a1->field_0->field_10)\n
    {\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (a1->field_8 < a1->field_0->field_c)\n
                v0 = v2 < a0 - 1;\n
            if (!(v0 & 1))\n
                break;\n
            v5 = a1->field_0->field_10;\n
            v6 = a1;\n
            v7 = v6->field_8;\n
            v6->field_8 = v7 + 1;\n
            tmp_50 = v5[v7];\n
            v8 = v2;\n
            v2 = v8 + 1;\n
            *((v4 + v8)) = tmp_50;\n
            if (*((a1->field_0->field_10 + a1->field_8 + 1)) == 10)\n
                break;\n
        }\n
        *((v4 + v2)) = 0;\n
        v3 = v4;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(v1 - 8102);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4209117:sub_4039dd": null, "4209120:cgc_ListFiles": "typedef struct struct_1 {\n
    char padding_0[256];\n
    struct struct_2 *field_100;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_ListFiles(unsigned int *v16)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    struct_1 *v1;  // [bp-0x44]\n
    unsigned short v2;  // [bp-0x40]\n
    unsigned short v3;  // [bp-0x3e]\n
    unsigned int v4;  // [bp-0x3c]\n
    void* v5;  // [bp-0x38]\n
    unsigned long v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    char v9;  // [bp-0x1d]\n
    char v10;  // [bp-0x1c]\n
    char v11;  // [bp-0x1b]\n
    char v12;  // [bp-0x1a]\n
    char v13;  // [bp-0x19]\n
    struct struct_0 **v14;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v15;  // [bp-0x11]\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // eax\n
    struct_1 *v25;  // eax\n
    struct_1 *v26;  // ebx\n
    struct_1 *v27;  // eax\n
    struct_1 *v28;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[156]);\n
        v15 = 0;\n
        return v15;\n
    }\n
    if (v16)\n
    {\n
        v8 = 79;\n
        for (v14 = 0; v14 < v1->field_100->field_4; v14 += 1)\n
        {\n
            if (*((v1->field_100->field_8 + (v14 << 2))))\n
            {\n
                v7 = cgc_strlen();\n
                if (v7 < 32)\n
                    v8 += 32;\n
                else\n
                    v8 = v7 + v8;\n
                v8 += 1;\n
                v7 = cgc_strlen();\n
                if (v7 >= 32)\n
                    v8 = v7 + v8;\n
                else\n
                    v8 += 32;\n
                v8 += 1;\n
                if (!*((*((v1->field_100->field_8 + (v14 << 2))) + 12)))\n
                {\n
                    v8 += 8;\n
                }\n
                else\n
                {\n
                    v4 = *((*((v1->field_100->field_8 + v14 * 4)) + 12));\n
                    v5 = 0;\n
                    v18 = ftop<4> - 1;\n
                    if ([D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        v19 = v18 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v19 = v18 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t6,0] = 0x00\n
                    v20 = v19 + 1;\n
                    cgc_log10();\n
                    [D] PutI(72:F64x8)[t18,0] = t21\n
                    [D] PutI(136:I8x8)[t18,0] = 0x01\n
                    [D] PutI(72:F64x8)[t28,1] = t29\n
                    [D] PutI(136:I8x8)[t28,1] = 0x01\n
                    [D] PutI(136:I8x8)[t28,0] = 0x00\n
                    v22 = v20 - 1 + 1;\n
                    v3 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-62, size=2, endness=Iend_LE)))));\n
                    v2 = v3 | 0xc00;\n
                    v6 = ([D] GetI(136:I8x8)[t74,0] ? [D] GetI(72:F64x8)[t74,0] : nan);\n
                    [D] PutI(136:I8x8)[t74,0] = 0x00\n
                    v23 = v22 + 1;\n
                    v7 = v6;\n
                    if (v7 >= 8)\n
                        v8 = v7 + v8;\n
                    else\n
                        v8 += 8;\n
                }\n
                v8 += 6;\n
            }\n
        }\n
        v24 = cgc_calloc();\n
        *(v16) = v24;\n
        if (!v24)\n
        {\n
            cgc_SetFsError(&v1[32].padding_0[107]);\n
            v15 = 0;\n
            return v15;\n
        }\n
    }\n
    if (!v16)\n
    {\n
        v26 = v1;\n
        cgc_printf(&v26[31].padding_0[2], &v26[30].padding_0[239], &v26[30].padding_0[230], &v26[30].padding_0[224]);\n
    }\n
    else\n
    {\n
        v25 = v1;\n
        v0 = &v25[30].padding_0[219];\n
        cgc_sprintf(*(v16), &v25[31].padding_0[2], &v25[30].padding_0[239], &v25[30].padding_0[230], &v25[30].padding_0[224]);\n
    }\n
    for (v14 = 0; v14 < v1->field_100->field_4; v14 += 1)\n
    {\n
        if (*((v1->field_100->field_8 + (v14 << 2))))\n
        {\n
            if (v16)\n
            {\n
                v27 = v1;\n
                v0 = *((*((v27->field_100->field_8 + v14 * 4)) + 12));\n
                cgc_sprintf(*(v16), &v1[30].padding_0[214], *(v16), *(*((v27->field_100->field_8 + v14 * 4))), *((*((v27->field_100->field_8 + v14 * 4)) + 4)));\n
            }\n
            else\n
            {\n
                v28 = v1;\n
                cgc_printf(&v28[30].padding_0[212], *(*((v28->field_100->field_8 + v14 * 4))), *((*((v28->field_100->field_8 + v14 * 4)) + 4)));\n
            }\n
            cgc_memset(&v9, 45);\n
            v13 = 0;\n
            if ((*((*((v1->field_100->field_8 + (v14 << 2))) + 8)) & 4))\n
                v9 = 114;\n
            if ((*((*((v1->field_100->field_8 + (v14 << 2))) + 8)) & 6))\n
                v10 = 119;\n
            if ((*((*((v1->field_100->field_8 + (v14 << 2))) + 8)) & 64))\n
                v11 = 114;\n
            if ((*((*((v1->field_100->field_8 + (v14 << 2))) + 8)) & 96))\n
                v12 = 119;\n
            if (!v16)\n
                cgc_printf(&v1[30].padding_0[245]);\n
            else\n
                cgc_sprintf(*(v16), &v1[30].padding_0[194], *(v16));\n
        }\n
    }\n
    cgc_ClearFsError();\n
    v15 = 1;\n
    return v15;\n
}\n
", "4210357:sub_403eb5": null, "4210368:cgc_DeleteFile": "typedef struct struct_0 {\n
    char padding_0[256];\n
    struct struct_1 *field_100;\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_FS;\n
\n
int cgc_DeleteFile(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[5];  // [bp-0x18]\n
    struct struct_2 **v3;  // [bp-0x14]\n
    struct struct_2 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    struct_0 *v7;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(&v1[32].padding_0[28]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!v6)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[185]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!v1->field_104)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[168]);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        for (v4 = 0; v4 < v1->field_100->field_4; v4 = v4 + 1)\n
        {\n
            if (*((v1->field_100->field_8 + (v4 << 2))))\n
            {\n
                v0 = v6;\n
                if (!cgc_strcmp(*(*((v1->field_100->field_8 + (v4 << 2))))))\n
                {\n
                    v2[0] = *((v1->field_100->field_8 + v4 * 4));\n
                    v3 = v4;\n
                    break;\n
                }\n
            }\n
        }\n
        if (v4 == v1->field_100->field_4)\n
        {\n
            cgc_SetFsError(&v1[31].padding_0[78]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        for (v4 = 0; v4 < 8; v4 = v4 + 1)\n
        {\n
            if (*(&v1[3].padding_0[56 + 4 * v4]) && *(*(&v1[3].padding_0[56 + 4 * v4])) == v2)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        v7 = v1;\n
        v0 = &v7[29].padding_0[221];\n
        if (cgc_strcmp(v7->field_104))\n
        {\n
            v0 = v2[1];\n
            if (cgc_strcmp(v1->field_104))\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[35]);\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_free();\n
        if (v2[1])\n
            cgc_free();\n
        if (v2[4])\n
            cgc_free();\n
        cgc_free();\n
        *((v1->field_100->field_8 + v3 * 4)) = 0;\n
        cgc_ClearFsError();\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4211033:sub_404159": null, "4211040:cgc_RenameFile": "typedef struct struct_0 {\n
    char padding_0[256];\n
    struct struct_1 *field_100;\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_RenameFile(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_2 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x9]\n
    struct_0 *v7;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    if (v6 && a0)\n
    {\n
        for (v4 = 0; v4 < v1->field_100->field_4; v4 = v4 + 1)\n
        {\n
            if (*((v1->field_100->field_8 + (v4 << 2))) && *(*((v1->field_100->field_8 + (v4 << 2)))))\n
            {\n
                v0 = v6;\n
                if (!cgc_strcmp(*(*((v1->field_100->field_8 + (v4 << 2))))))\n
                    v3[0] = *((v1->field_100->field_8 + v4 * 4));\n
                v0 = a0;\n
                if (!cgc_strcmp(*(*((v1->field_100->field_8 + (v4 << 2))))))\n
                {\n
                    cgc_SetFsError(&v1[30].padding_0[66]);\n
                    v5 = 0;\n
                    return v5;\n
                }\n
            }\n
        }\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v1[30].padding_0[34]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v7 = v1;\n
        v0 = &v7[29].padding_0[221];\n
        if (cgc_strcmp(v7->field_104))\n
        {\n
            v0 = *((v3 + 4));\n
            if (cgc_strcmp(v1->field_104))\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[35]);\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_strlen();\n
        v2 = cgc_calloc();\n
        if (!v2)\n
        {\n
            cgc_SetFsError(&v1[31].padding_0[243]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = a0;\n
        cgc_strcpy(v2);\n
        cgc_free(*(v3));\n
        *(v3) = v2;\n
        cgc_ClearFsError();\n
        v5 = 1;\n
        return v5;\n
    }\n
    cgc_SetFsError(&v1[31].padding_0[185]);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211627:sub_4043ab": null, "4211632:cgc_ChangeMode": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangeMode(unsigned int v4, char a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    struct_1 *v2;  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    struct_0 *v5;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
        cgc_SetFsError(&v1[30].padding_0[12]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!(a0 & 153))\n
    {\n
        v2 = cgc_FindFile(v4);\n
        if (!v2)\n
        {\n
            cgc_SetFsError(&v1[29].field_104 + 3);\n
            v3 = 0;\n
            return v3;\n
        }\n
        v5 = v1;\n
        v0 = &v5[29].padding_0[221];\n
        if (cgc_strcmp(v5->field_104))\n
        {\n
            v0 = v2->field_4;\n
            if (cgc_strcmp(v1->field_104))\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[35]);\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
        v2->field_8 = a0;\n
        cgc_ClearFsError();\n
        v3 = 1;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[151]);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4211921:sub_4044d1": null, "4211936:cgc_ChangeOwner": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangeOwner(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    struct_0 *v6;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v5)\n
    {\n
        cgc_SetFsError(&v1[31].padding_0[185]);\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0)\n
    {\n
        v6 = v1;\n
        v0 = &v6[29].padding_0[221];\n
        if (cgc_strcmp(v6->field_104))\n
        {\n
            cgc_SetFsError(&v1[29].padding_0[229]);\n
            v4 = 0;\n
            return v4;\n
        }\n
        v3 = cgc_FindFile(v5);\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v1[29].field_104 + 3);\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (cgc_UserExists())\n
        {\n
            cgc_strlen();\n
            v2 = cgc_calloc();\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v1[31].padding_0[243]);\n
                v4 = 0;\n
                return v4;\n
            }\n
            v0 = a0;\n
            cgc_strcpy(v2);\n
            if (v3->field_4)\n
                cgc_free();\n
            v3->field_4 = v2;\n
            cgc_ClearFsError();\n
            v4 = 1;\n
            return v4;\n
        }\n
        else\n
        {\n
            cgc_SetFsError(&v1[30].padding_0[12]);\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v1[29].padding_0[243]);\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4212346:sub_40467a": null, "4212352:cgc_UserExists": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_UserExists(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x98]\n
    unsigned int v1;  // [bp-0x94]\n
    char v2;  // [bp-0x90]\n
    void* v3;  // [bp-0x10]\n
    char v4;  // [bp-0x9]\n
    unsigned int v6;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        cgc_SetFsError(v0 - 7872);\n
        v4 = 0;\n
        return v4;\n
    }\n
    v6 = v0;\n
    v3 = cgc_fopen(v6 - 7732, v6 - 6695);\n
    if (!v3)\n
    {\n
        cgc_SetFsError(v0 - 7831);\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (cgc_fgets(&v2, 127, v3))\n
        {\n
            v1 = cgc_strtok(&v2);\n
            if (!v1)\n
            {\n
                cgc_SetFsError(v0 - 7798);\n
                v4 = 0;\n
                return v4;\n
            }\n
            else if (!cgc_strcmp(v1))\n
            {\n
                cgc_fclose(v3);\n
                v4 = 1;\n
                return v4;\n
            }\n
        }\n
        else\n
        {\n
            cgc_fclose(v3);\n
            cgc_ClearFsError();\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4212728:sub_4047f8": null, "4212736:cgc_Uid": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_CurrentUser;\n
\n
int cgc_Uid()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0xc]\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_CurrentUser)\n
    {\n
        v0 = v1->field_104;\n
        v3 = cgc_puts();\n
    }\n
    return v3;\n
}\n
", "4212794:sub_40483a": null, "4212800:cgc_AddUser": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_AddUser(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb4]\n
    struct_1 *v2;  // [bp-0xa8]\n
    struct_1 *v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    struct_0 *v5;  // [bp-0x9c]\n
    char v6;  // [bp-0x98]\n
    struct struct_0 **v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14]\n
    char v9;  // [bp-0xd]\n
    struct_0 *v11;  // ebx\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v10)\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[216]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[114]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v5->field_104))\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[229]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[216]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[114]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (!cgc_UserExists(v10))\n
    {\n
        v11 = v5;\n
        v8 = cgc_fopen(&v11[29].padding_0[76], &v11[25].padding_0[95]);\n
        if (!v8)\n
        {\n
            cgc_SetFsError(&v5[29].padding_0[175]);\n
            v9 = 0;\n
            return v9;\n
        }\n
        v12 = v5;\n
        v7 = cgc_fopen(&v12[29].padding_0[77], &v12[29].padding_0[177]);\n
        if (!v7)\n
        {\n
            cgc_SetFsError(&v5[29].padding_0[69]);\n
            cgc_fclose(v8);\n
            v9 = 0;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            if (!cgc_fgets(&v6, 127, v8))\n
            {\n
                v0 = &v5[29].padding_0[6];\n
                v1 = v10;\n
                cgc_sprintf(&v6, v0, v1);\n
                v2 = &v6;\n
                cgc_fwrite(v2, cgc_strlen(&v6, v0, v1), 1, v7);\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_DeleteFile(&v5[29].padding_0[76]);\n
                v13 = v5;\n
                cgc_RenameFile(&v13[29].padding_0[77], &v13[29].padding_0[76]);\n
                cgc_ClearFsError();\n
                v9 = 1;\n
                return v9;\n
            }\n
            v3 = &v6;\n
            v0 = cgc_strlen();\n
            v4 = cgc_fwrite(v3, v0, 1, v7);\n
            if (v4 != cgc_strlen(&v6, v0, 1))\n
            {\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_SetFsError(&v5[29].padding_0[38]);\n
                cgc_DeleteFile(&v5[29].padding_0[77]);\n
                v9 = 0;\n
                return v9;\n
            }\n
            else if (*(&v5 + cgc_strlen()) != 10 && cgc_fwrite(&v5[21].padding_0[162], 1, 1, v7) != 1)\n
            {\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_SetFsError(&v5[29].padding_0[38]);\n
                cgc_DeleteFile(&v5[29].padding_0[77]);\n
                v9 = 0;\n
                return v9;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v5[29].padding_0[97]);\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4213966:sub_404cce": null, "4213968:cgc_DeleteUser": "typedef struct struct_1 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DeleteUser(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0xb8]\n
    struct_0 *v1;  // [bp-0xa8]\n
    unsigned int v2;  // [bp-0xa4]\n
    struct_1 *v3;  // [bp-0xa0]\n
    struct struct_0 **v4;  // [bp-0x9c]\n
    void* v5;  // [bp-0x98]\n
    char v6;  // [bp-0x91]\n
    unsigned int v7;  // [bp-0x90]\n
    char v8;  // [bp-0x89]\n
    char v9;  // [bp-0x9]\n
    struct_1 *v11;  // ebx\n
    struct_1 *v12;  // ebx\n
    struct_1 *v13;  // ebx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = 0;\n
    if (!v10)\n
    {\n
        cgc_SetFsError(&v3[29].padding_0[216]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v3->field_104))\n
    {\n
        cgc_SetFsError(&v3[29].padding_0[229]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strcmp(v10))\n
    {\n
        v11 = v3;\n
        v5 = cgc_fopen(&v11[29].padding_0[76], &v11[25].padding_0[95]);\n
        if (!v5)\n
        {\n
            cgc_SetFsError(&v3[29].padding_0[175]);\n
            v9 = 0;\n
            return v9;\n
        }\n
        v12 = v3;\n
        v4 = cgc_fopen(&v12[29].padding_0[77], &v12[29].padding_0[177]);\n
        if (!v4)\n
        {\n
            cgc_SetFsError(&v3[29].padding_0[69]);\n
            cgc_fclose(v5);\n
            v9 = 0;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v8, 127, v5))\n
                {\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    if (v6)\n
                    {\n
                        cgc_DeleteFile(&v3[29].padding_0[76]);\n
                        v13 = v3;\n
                        cgc_RenameFile(&v13[29].padding_0[77], &v13[29].padding_0[76]);\n
                        cgc_ClearFsError();\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
                    cgc_SetFsError(&v3[28].padding_0[241]);\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    cgc_DeleteFile(&v3[29].padding_0[77]);\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            } while (!cgc_strlen());\n
            v7 = cgc_strtok(&v8);\n
            if (!v7)\n
            {\n
                cgc_SetFsError(&v3[29].padding_0[142]);\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_DeleteFile(&v3[29].padding_0[77]);\n
                v9 = 0;\n
                return v9;\n
            }\n
            if (cgc_strcmp(v7))\n
            {\n
                (&v8)[cgc_strlen()] = 58;\n
                v1 = &v8;\n
                v0 = cgc_strlen();\n
                v2 = cgc_fwrite(v1, v0, 1, v4);\n
                if (v2 != cgc_strlen(&v8, v0, 1))\n
                    break;\n
            }\n
            else\n
            {\n
                v6 = 1;\n
            }\n
        }\n
        cgc_fclose(v5);\n
        cgc_fclose(v4);\n
        cgc_SetFsError(&v3[29].padding_0[38]);\n
        cgc_DeleteFile(&v3[29].padding_0[77]);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(v3 + 29);\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4215074:sub_405122": null, "4215088:cgc_ChangePasswd": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ChangePasswd(unsigned int v13, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    struct_1 *v2;  // [bp-0xb4]\n
    unsigned int v3;  // [bp-0xb0]\n
    struct_1 *v4;  // [bp-0xac]\n
    unsigned int v5;  // [bp-0xa8]\n
    struct_0 *v6;  // [bp-0xa4]\n
    struct struct_0 **v7;  // [bp-0xa0]\n
    void* v8;  // [bp-0x9c]\n
    char v9;  // [bp-0x95]\n
    unsigned int v10;  // [bp-0x94]\n
    char v11;  // [bp-0x8d]\n
    char v12;  // [bp-0xd]\n
    struct_0 *v14;  // ebx\n
    struct_0 *v15;  // ebx\n
    struct_0 *v16;  // ebx\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v9 = 0;\n
    if (!v13)\n
    {\n
        cgc_SetFsError(&v6[29].padding_0[216]);\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v6[29].padding_0[114]);\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (cgc_strlen() <= 32)\n
    {\n
        if (cgc_strcmp(v6->field_104) && cgc_strcmp(v6->field_104))\n
        {\n
            cgc_SetFsError(&v6[28].padding_0[226]);\n
            v12 = 0;\n
            return v12;\n
        }\n
        v14 = v6;\n
        v8 = cgc_fopen(&v14[29].padding_0[76], &v14[25].padding_0[95]);\n
        if (!v8)\n
        {\n
            cgc_SetFsError(&v6[29].padding_0[175]);\n
            v12 = 0;\n
            return v12;\n
        }\n
        v15 = v6;\n
        v7 = cgc_fopen(&v15[29].padding_0[77], &v15[29].padding_0[177]);\n
        if (!v7)\n
        {\n
            cgc_SetFsError(&v6[29].padding_0[69]);\n
            cgc_fclose(v8);\n
            v12 = 0;\n
            return v12;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v11, 127, v8))\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    if (!v9)\n
                    {\n
                        cgc_SetFsError(&v6[28].padding_0[241]);\n
                        cgc_fclose(v8);\n
                        cgc_fclose(v7);\n
                        cgc_DeleteFile(&v6[29].padding_0[77]);\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    cgc_DeleteFile(&v6[29].padding_0[76]);\n
                    v16 = v6;\n
                    cgc_RenameFile(&v16[29].padding_0[77], &v16[29].padding_0[76]);\n
                    cgc_ClearFsError();\n
                    v12 = 1;\n
                    return v12;\n
                }\n
            } while (!cgc_strlen());\n
            v10 = cgc_strtok(&v11);\n
            if (!v10)\n
            {\n
                cgc_SetFsError(&v6[29].padding_0[142]);\n
                cgc_fclose(v8);\n
                cgc_fclose(v7);\n
                cgc_DeleteFile(&v6[29].padding_0[77]);\n
                v12 = 0;\n
                return v12;\n
            }\n
            else if (cgc_strcmp(v10))\n
            {\n
                (&v11)[cgc_strlen()] = 58;\n
                v2 = &v11;\n
                v0 = cgc_strlen();\n
                v3 = cgc_fwrite(v2, v0, 1, v7);\n
                if (v3 != cgc_strlen(&v11, v0, 1))\n
                {\n
                    cgc_SetFsError(&v6[29].padding_0[38]);\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_DeleteFile(&v6[29].padding_0[77]);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            }\n
            else\n
            {\n
                v0 = &v6[28].padding_0[187];\n
                v1 = v13;\n
                cgc_sprintf(&v11, v0, v1);\n
                v4 = &v11;\n
                v0 = cgc_strlen(&v11, v0, v1);\n
                v5 = cgc_fwrite(v4, v0, 1, v7);\n
                if (v5 != cgc_strlen(&v11, v0, 1))\n
                {\n
                    cgc_fclose(v8);\n
                    cgc_fclose(v7);\n
                    cgc_SetFsError(&v6[29].padding_0[38]);\n
                    cgc_DeleteFile(&v6[29].padding_0[77]);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(&v6[29].padding_0[114]);\n
        v12 = 0;\n
        return v12;\n
    }\n
}\n
", "4216508:sub_4056bc": null, "4216512:cgc_CheckPasswd": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CheckPasswd(unsigned int v9, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xa8]\n
    char v1;  // [bp-0xa1]\n
    void* v2;  // [bp-0xa0], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x9c]\n
    char v4;  // [bp-0x95]\n
    unsigned int v5;  // [bp-0x94]\n
    unsigned int v6;  // [bp-0x90]\n
    char v7;  // [bp-0x89]\n
    char v8;  // [bp-0x9]\n
    struct_0 *v10;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v9)\n
    {\n
        cgc_SetFsError(&v0[29].padding_0[216]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(&v0[29].padding_0[114]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else if (cgc_strlen() > 32)\n
    {\n
        cgc_SetFsError(&v0[29].padding_0[114]);\n
        v8 = 0;\n
        return v8;\n
    }\n
    else\n
    {\n
        if (!v0->field_104)\n
        {\n
            cgc_Login(&v0[29].padding_0[221]);\n
            v1 = 1;\n
        }\n
        else if (cgc_strcmp(v0->field_104))\n
        {\n
            cgc_strlen();\n
            v2 = cgc_calloc();\n
            if (!v2)\n
            {\n
                cgc_SetFsError(&v0[31].padding_0[243]);\n
                v8 = 0;\n
                return v8;\n
            }\n
            cgc_strcpy(v2);\n
            cgc_Logout();\n
            cgc_Login(&v0[29].padding_0[221]);\n
        }\n
        v10 = v0;\n
        v3 = cgc_fopen(&v10[29].padding_0[76], &v10[25].padding_0[95]);\n
        if (!v3)\n
        {\n
            cgc_SetFsError(&v0[29].padding_0[175]);\n
            if (v2)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v2);\n
                cgc_free();\n
            }\n
            if (v1)\n
                cgc_Logout();\n
            v8 = 0;\n
            return v8;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                do\n
                {\n
                    do\n
                    {\n
                        if (!cgc_fgets(&v7, 127, v3))\n
                        {\n
                            cgc_fclose(v3);\n
                            if (v4)\n
                            {\n
                                cgc_ClearFsError();\n
                                if (v2)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v2);\n
                                    cgc_free();\n
                                }\n
                                if (v1)\n
                                    cgc_Logout();\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                            else\n
                            {\n
                                cgc_SetFsError(&v0[28].padding_0[241]);\n
                                if (v2)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v2);\n
                                    cgc_free();\n
                                }\n
                                if (v1)\n
                                    cgc_Logout();\n
                                v8 = 0;\n
                                return v8;\n
                            }\n
                        }\n
                    } while (!cgc_strlen());\n
                    v6 = cgc_strtok(&v7);\n
                    if (!v6)\n
                    {\n
                        cgc_SetFsError(&v0[29].padding_0[142]);\n
                        cgc_fclose(v3);\n
                        if (v2)\n
                        {\n
                            cgc_Logout();\n
                            cgc_Login(v2);\n
                            cgc_free();\n
                        }\n
                        if (v1)\n
                            cgc_Logout();\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                } while (cgc_strcmp(v6));\n
                v5 = cgc_strtok(0);\n
                if (!v5)\n
                {\n
                    cgc_SetFsError(&v0[29].padding_0[142]);\n
                    cgc_fclose(v3);\n
                    if (v2)\n
                    {\n
                        cgc_Logout();\n
                        cgc_Login(v2);\n
                        cgc_free();\n
                    }\n
                    if (v1)\n
                        cgc_Logout();\n
                    v8 = 0;\n
                    return v8;\n
                }\n
            } while (cgc_strcmp(v5));\n
            cgc_ClearFsError();\n
            cgc_fclose(v3);\n
            if (v2)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v2);\n
                cgc_free();\n
            }\n
            if (v1)\n
                cgc_Logout();\n
            v8 = 1;\n
            return v8;\n
        }\n
    }\n
}\n
", "4218023:sub_405ca7": null, "4218032:cgc_link": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_link(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_lookaside;\n
    if (!v5)\n
        return cgc_lookaside;\n
    v6 = v5;\n
    if (*(v6) <= 1016)\n
    {\n
        if (*(v5) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(v5) >> 3;\n
        *((v5 + 4)) = *((v3 + v2 * 4 + 264));\n
        v1 = v5;\n
        if (*(v5) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(v5) >> 3;\n
        v6 = v3;\n
        *((v6 + v0 * 4 + 264)) = v1;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (!v4)\n
            return v6;\n
        if (!*((v4 + 4)))\n
        {\n
            *((v4 + 4)) = v5;\n
            *((v5 + 8)) = v4;\n
            v6 = v5;\n
            *((v6 + 4)) = 0;\n
            return v5;\n
        }\n
        if (*(v5) < *(*((v4 + 4))))\n
        {\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = v4;\n
            *((*((v4 + 4)) + 8)) = v5;\n
            v6 = v4;\n
            *((v6 + 4)) = v5;\n
            return v4;\n
        }\n
        v6 = *((v4 + 4));\n
        v4 = v6;\n
    }\n
}\n
", "4218369:sub_405e01": null, "4218384:cgc_add_freelist_block": "typedef struct struct_0 {\n
    char padding_0[264];\n
    unsigned int field_108;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_freelist_block(unsigned int v5)\n
{\n
    struct struct_1 **v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v5 += 4;\n
    v5 = v5 + 4095 & -0x1000;\n
    v0 = &v3;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        cgc_printf(&v1[28].padding_0[68]);\n
        cgc__terminate(-1);\n
    }\n
    cgc_bzero(v3);\n
    *(v3) = v5 - 4;\n
    if (!v1->field_108)\n
    {\n
        v7 = v1;\n
        v7->field_108 = v3;\n
        return v1;\n
    }\n
    v7 = cgc_link(v3);\n
    return v7;\n
}\n
", "4218609:sub_405ef1": null, "4218624:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        v1 = v2 - 4;\n
        v3 = cgc_link(v1);\n
    }\n
    return v3;\n
}\n
", "4218695:sub_405f47": null, "4218704:cgc_init_freelist": "typedef struct struct_0 {\n
    char padding_0[264];\n
    struct struct_1 *field_108;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_init_freelist()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    v0 = &cgc_lookaside;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc_printf();\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1->field_108);\n
    v3[0] = v1->field_108;\n
    v2[0] = v3 + 1;\n
    v3[0] = 0;\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[0] = 4080;\n
    v2[2] = v3;\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4218921:sub_406029": null, "4218928:cgc_unlink": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_unlink(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax, Other Possible Types: unsigned int, struct_1 *\n
\n
    if (!v0)\n
        return v0;\n
    if (v0->field_8)\n
        v0->field_8->field_4 = v0->field_4;\n
    v1 = v0;\n
    if (!v1->field_4)\n
        return v1;\n
    v1 = v0->field_4;\n
    v1->field_8 = v0->field_8;\n
}\n
", "4219012:sub_406084": null, "4219024:cgc_freelist_alloc": "typedef struct struct_1 {\n
    char padding_0[264];\n
    struct struct_0 *field_108;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_lookaside;\n
\n
int cgc_freelist_alloc(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v2 = v0->field_108; v2; v2 = v2->field_4)\n
    {\n
        if (v2->field_0 >= v4)\n
            break;\n
    }\n
    if (!v2)\n
    {\n
        cgc_add_freelist_block(v4);\n
        v3 = cgc_freelist_alloc(v4);\n
        return v3;\n
    }\n
    cgc_unlink(v2);\n
    if (*(v2) - v4 < 12)\n
    {\n
        v3 = v2 + 4;\n
        return v3;\n
    }\n
    v1 = v2 + 4 + v4;\n
    *(v1) = *(v2) - (v4 + 4);\n
    *(v2) = v4;\n
    cgc_link(v1);\n
    v3 = v2 + 4;\n
    return v3;\n
}\n
", "4219305:sub_4061a9": null, "4219312:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc();\n
    if (!v2)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v5 = v5 + 7 & -8;\n
    v0 = v5;\n
    cgc_bzero(v2);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4219420:sub_40621c": null, "4219424:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v5 < 8)\n
        v5 = 8;\n
    v5 = v5 + 7 & -8;\n
    if (v5 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v5 >> 3;\n
    if (!v3)\n
    {\n
        v4 = cgc_freelist_alloc(v5);\n
        return v4;\n
    }\n
    for (v3 = v0; v3 < 128; v3 += 1)\n
    {\n
        if (*((v1 + (v3 << 2) + 264)))\n
            break;\n
    }\n
    if (v3 != 128)\n
    {\n
        v6 = v1;\n
        v2 = *((v6 + v3 * 4 + 264));\n
        *((v6 + v3 * 4 + 264)) = v2->field_4;\n
        v4 = &v2->field_4;\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v5);\n
    return v4;\n
}\n
", "4219709:sub_40633d": null, "4219712:cgc_round": null, "4219858:sub_4063d2": null, "4219872:cgc_floor": null, "4220028:sub_40647c": null, "4220032:cgc_seed_prng_array": "typedef struct struct_0 {\n
    char padding_0[1008];\n
    unsigned int field_3f0;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state;\n
\n
int cgc_seed_prng_array(unsigned int v4, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&state, 128);\n
    v0->field_3f0 = 0;\n
    if (a0 > 32)\n
        a0 = 32;\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        *(&v0->padding_0[880 + 4 * v2]) = *((v4 + v2 * 4));\n
    }\n
    v6 = a0;\n
    while (true)\n
    {\n
        v2 = v6;\n
        if (v2 >= 32)\n
            break;\n
        v7 = v0;\n
        v1 = *(&v7->padding_0[880 + 4 * (v2 + 1 & 31)]);\n
        *((880 + &v7->padding_0[0] + 0x4 * v2)) = (v1 ^ (v1 >> 30) + v2) * 524287;\n
        v6 = v2 + 1;\n
    }\n
    v8 = v3;\n
    return v6;\n
}\n
", "4220255:sub_40655f": null, "4220256:cgc_seed_prng": "int cgc_seed_prng(unsigned int v0)\n
{\n
    return cgc_seed_prng_array(&v0, 0x1);\n
}\n
", "4220303:sub_40658f": null, "4220304:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state_n;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
\n
    v9 = v11;\n
    v8 = *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * state_n]);\n
    v7 = *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * (state_n + 3 & 31)]);\n
    v6 = *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * (state_n + 24 & 31)]);\n
    v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * (state_n + 10 & 31)]);\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * (state_n + 31 & 31)]);\n
    v3 = v8 ^ v7 ^ v7 >> 8;\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * state_n]) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[880 + 4 * (state_n + 31 & 31)]) = v0;\n
    state_n = state_n + 31 & 31;\n
    v12 = v9;\n
    return v0;\n
}\n
", "4220587:sub_4066ab": null, "4220592:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v6 > a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v6 != a0)\n
    {\n
        v3 = a0 - v6 + 1;\n
        if (!v3)\n
        {\n
            v5 = cgc_prng();\n
            return v5;\n
        }\n
        v2 = (0 CONCAT -1) /m v3;\n
        do\n
        {\n
            v4 = cgc_prng();\n
        } while (v4 >= v3 * v2);\n
        v0 = v6;\n
        v5 = v0 + (0 CONCAT v4) /m v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        return v5;\n
    }\n
}\n
", "4220780:sub_40676c": null, "4220784:cgc_WRAPPER_PUTC": "int cgc_WRAPPER_PUTC(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4220885:sub_4067d5": null, "4220896:cgc_WRAPPER_OUTC": "int cgc_WRAPPER_OUTC(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    v0[a1] = a0;\n
    return a1 + 1;\n
}\n
", "4220930:sub_406802": null, "4220944:cgc_WRAPPER_BUFFER_PUTC": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_WRAPPER_BUFFER_PUTC(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // esi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    if (*((v4 + 0x100)) >= 0x100)\n
    {\n
        for (v3 = v4; *((v4 + 0x100)) > 0; v3 = *(&v2) + v3)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(1, v3, *((v4 + 0x100))))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            if (!*(&v2))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v7 = v4;\n
            v8 = *((v7 + 0x100)) - *(&v2);\n
            *((v7 + 0x100)) = v8;\n
        }\n
    }\n
    v9 = v4;\n
    *(&v8) = *((v9 + 0x100));\n
    *((v9 + 0x100)) = v8 + 1;\n
    *((v4 + v8)) = a0;\n
    v5 = a1 + 1;\n
    return v5;\n
}\n
", "4221214:sub_40691e": null, "4221216:cgc_putchar": "int cgc_putchar(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4221308:sub_40697c": null, "4221312:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = cgc_strlen();\n
    while (true)\n
    {\n
        if (v2 == v3)\n
        {\n
            cgc_putchar(10);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v4;\n
        if (cgc_transmit(1, v7 + v2, v3 - v2))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        else if (*(&v4))\n
        {\n
            v2 = *(&v4) + v2;\n
        }\n
        else\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
}\n
", "4221500:sub_406a3c": null, "4221504:cgc_vprintf_buffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf_buffered(unsigned int v14, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    unsigned int v1;  // [bp-0x134]\n
    char v2;  // [bp-0x130]\n
    unsigned int v3;  // [bp-0x12c]\n
    unsigned int v4;  // [bp-0x128]\n
    void* v5;  // [bp-0x124]\n
    unsigned int v6;  // [bp-0x120]\n
    char v7;  // [bp-0x11c]\n
    unsigned short v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // esi\n
\n
    v13 = v15;\n
    v12 = v16;\n
    v11 = v17;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = cgc_WRAPPER_BUFFER_PUTC;\n
    v8 = 0;\n
    v6 = &v7;\n
    v5 = 0;\n
    v0 = a0;\n
    v4 = cgc_wrapper_output(v6, v9, v5, v14);\n
    v3 = &v7;\n
    while (true)\n
    {\n
        if (v8 <= 0)\n
        {\n
            v10 = v4;\n
            break;\n
        }\n
        else if (cgc_transmit(1, v3, v8))\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
        else if (*(&v2))\n
        {\n
            v8 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v10 = -1;\n
            break;\n
        }\n
    }\n
    return v10;\n
}\n
", "4221807:sub_406b6f": null, "4221808:cgc_wrapper_output": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wrapper_output()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x5c]\n
    char *v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    char v5;  // [bp-0x21]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp+0x4]\n
    unsigned int v12;  // [bp+0x8]\n
    char *v13;  // [bp+0xc]\n
    char *v14;  // [bp+0x10], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp+0xfffb8]\n
    struct struct_0 **v44;  // [bp+0x100014]\n
    unsigned int *v45;  // [bp+0x10001c], Other Possible Types: struct struct_1 **\n
    struct struct_1 **v76;  // eax\n
\n
    v76 = v45;\n
    v45 = &v76[1];\n
    v32 = &*(v76)->field_0;\n
    *(v32) = v44;\n
    while (true)\n
    {\n
        v14 = (&v13)[1] + 1;\n
        while (true)\n
        {\n
LABEL_4070a9:\n
            while (true)\n
            {\n
                if (!*(v14))\n
                    return;\n
                v5 = *(v14);\n
                v14 = (&v13)[1] + 1;\n
                if (v5 != 36)\n
                {\n
                    v0 = v13;\n
                    v13 = v12(v11, v5);\n
                    goto LABEL_4070a9;\n
                }\n
                v6 = 0;\n
                v7 = 0;\n
                v8 = 0;\n
                v9 = 0;\n
                if (!*(v14))\n
                    return;\n
                if (*(v14) != 36)\n
                    break;\n
                v0 = v13;\n
                v13 = v12(v11, 36);\n
            }\n
            if (*(v14) == 45)\n
            {\n
                v9 |= 1;\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (cgc_isdigit(*(v14)))\n
            {\n
                if (*(v14) == 48)\n
                    v9 |= 4;\n
                for (v4 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v8 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (*(v14) == 46)\n
            {\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
                for (v3 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v6 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            v1 = *(v14) - 88;\n
            if (v1 <= 32)\n
                goto *(((stack_base)[88] + (stack_base)[92] * 4 - 7484)) + (stack_base)[88];\n
            break;\n
        }\n
    }\n
}\n
", "4223164:sub_4070bc": null, "4223168:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf_buffered(v2, v1);\n
    return v0;\n
}\n
", "4223226:sub_4070fa": null, "4223232:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = &v5;\n
    v0 = v2;\n
    v1 = cgc_vsprintf(v4, a0);\n
    return v1;\n
}\n
", "4223301:sub_407145": null, "4223312:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v9, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct struct_0 **v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = &cgc_WRAPPER_OUTC;\n
    v4 = v9;\n
    v3 = 0;\n
    v0 = a1;\n
    v2 = cgc_wrapper_output(v4, v5, v3, a0);\n
    v5(v4, 0);\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return v2;\n
}\n
", "4223451:sub_4071db": null, "4223456:cgc_printf_int_to_string": "int cgc_printf_int_to_string(unsigned int v3, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a1) = 48;\n
        v2 = 1;\n
        return v2;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a0 >> 32;\n
        v3 = (0 CONCAT v3) /m a0;\n
        if (a0 != 16)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            a1[v4] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v5 = v1;\n
            v1 = v5 + 1;\n
            a1[v5] = v0 + 48;\n
        }\n
        else if (!(a2 & 8))\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a1[v7] = v0 + 87;\n
        }\n
        else\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a1[v6] = v0 + 55;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4223728:cgc_printf_helper_int": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4224384:cgc_printf_float_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4226800:cgc_printf_helper_float": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 -= 1)\n
    {\n
        a1 = a0(v7, *(&v1 + v1));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4227466:sub_40818a": null, "4227472:cgc_printf_helper_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_string(unsigned int v5, struct struct_0 **a0, unsigned int a1, char *a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    char *v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a4 && !a3)\n
    {\n
        for (v1 = &_GLOBAL_OFFSET_TABLE_; *(a2); a2 += 1)\n
        {\n
            v0 = a1;\n
            a1 = a0(v5, *(a2));\n
        }\n
        v4 = a1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen();\n
    v2 = 0;\n
    if (a4 > 0 && v3 > a4)\n
        v3 = a4;\n
    if (a3 > 0 && v3 < a3)\n
        v2 = a3 - v3;\n
    if (!(a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v6 = v2;\n
            v2 = v6 - 1;\n
            if (v6 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 32);\n
            }\n
            else\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 48);\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        if (v7 <= 0)\n
            break;\n
        v8 = a2;\n
        a2 = v8 + 1;\n
        v0 = a1;\n
        a1 = a0(v5, *(v8));\n
    }\n
    if ((a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v9 = v2;\n
            v2 = v9 - 1;\n
            if (v9 <= 0)\n
                break;\n
            v0 = a1;\n
            a1 = a0(v5, 32);\n
        }\n
    }\n
    v4 = a1;\n
    return v4;\n
}\n
", "4228012:sub_4083ac": null, "4228016:cgc_rand": "int cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4228063:sub_4083df": null, "4228064:cgc_srand": "int cgc_srand(unsigned int v0)\n
{\n
    return cgc_seed_prng(v0);\n
}\n
", "4228101:sub_408405": null, "4228112:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4) == 45)\n
    {\n
        v1 = 1;\n
        v4 += 1;\n
    }\n
    for (; cgc_isdigit(*(v4)); v2 = v2 * 10 + *(v5) - 48)\n
    {\n
        v5 = v4;\n
        v4 = v5 + 1;\n
    }\n
    if (v1)\n
    {\n
        v3 = -(v2);\n
        return v3;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4228349:sub_4084fd": null, "4228352:cgc_atof": null, "4228637:sub_40861d": null, "4228640:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8]\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v1;\n
        v1 = v4 + 1;\n
    }\n
    *(v1) = 0;\n
    return v0;\n
}\n
", "4228716:sub_40866c": null, "4228720:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4228857:sub_4086f9": null, "4228864:cgc_memcpy": "int cgc_memcpy(char *v1, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v1) = *(&a0);\n
        v1 += 4;\n
        a0 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 1;\n
        a0 += 1;\n
    }\n
    return v0;\n
}\n
", "4229000:sub_408788": null, "4229008:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v7[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    if (a1 >= 16)\n
        a1 = 16;\n
    for (; cgc_isspace(v7[0]); v7 = &v7[1]);\n
    if (*(v7) == 45)\n
    {\n
        v4 = 1;\n
        *(&v7) = &v7[1];\n
    }\n
    else if (*(v7) == 43)\n
    {\n
        *(&v7) = &v7[1];\n
    }\n
    if (a1 != 16 && !(!a1))\n
        goto LABEL_4088aa;\n
    if (*(v7) != 48)\n
    {\n
LABEL_4088aa:\n
        if (a1 && !(a1 == 2))\n
            goto LABEL_4088fd;\n
        if (*(v7) == 48)\n
        {\n
            if (*((v7 + 1)) != 98 && !(*((v7 + 1)) == 66))\n
                goto LABEL_4088fd;\n
            *(&v7) = v7 + 2;\n
            a1 = 2;\n
        }\n
LABEL_4088fd:\n
    }\n
    else\n
    {\n
        if (*((v7 + 1)) != 120 && !(*((v7 + 1)) == 88))\n
            goto LABEL_4088aa;\n
        *(&v7) = v7 + 2;\n
        a1 = 16;\n
    }\n
    if (!a1)\n
    {\n
        if (*(v7) == 48)\n
            a1 = 8;\n
        else\n
            a1 = 10;\n
    }\n
    v3 = 0;\n
    if (v4)\n
        v3 = 0x80000000;\n
    else\n
        v3 = 2147483647;\n
    v2 = (0 CONCAT v3) /m a1 >> 32;\n
    v3 = (0 CONCAT v3) /m a1;\n
    while (*(v7))\n
    {\n
        v1 = *(v7);\n
        if (cgc_isdigit(v1))\n
        {\n
            v1 -= 48;\n
        }\n
        else\n
        {\n
            if (!cgc_isalpha(v1))\n
                break;\n
            if (cgc_isupper(v1))\n
                v1 -= 55;\n
            else\n
                v1 -= 87;\n
        }\n
        if (v1 >= a1)\n
            break;\n
        if (v5 > v3)\n
        {\n
LABEL_408a35:\n
            break;\n
        }\n
        else if (v5 != v3)\n
        {\n
LABEL_408a3a:\n
            v5 *= a1;\n
            v5 = v1 + v5;\n
            *(&v7) = &v7[1];\n
        }\n
        else\n
        {\n
            if (v1 <= v2)\n
                goto LABEL_408a3a;\n
            goto LABEL_408a35;\n
        }\n
    }\n
    if (a0)\n
        *(a0) = v7;\n
    if (v4)\n
    {\n
        v6 = -(v5);\n
        return v6;\n
    }\n
    v6 = v5;\n
    return v6;\n
}\n
", "4229779:sub_408a93": null, "4229792:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4229851:sub_408adb": null, "4229856:cgc_bzero": "int cgc_bzero(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
\n
    for (; a0; v1[1 + v0] = 0)\n
    {\n
        v1 = a0;\n
        a0 = v1 + 1;\n
    }\n
    *((v0 + a0)) = 0;\n
    return v0;\n
}\n
", "4229911:sub_408b17": null, "4229920:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8]\n
    char *v4;  // eax\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(v4) = v1;\n
    }\n
    return v2;\n
}\n
", "4230075:sub_408bbb": null, "4230080:cgc_strchr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strchr(char *v4, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(v4))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (v4[v2] != a0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = &v4[v2];\n
            return v3;\n
        }\n
    }\n
}\n
", "4230238:sub_408c5e": null, "4230240:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[776];\n
    struct struct_1 *field_308;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v6, char *a0)\n
{\n
    char v0;  // [bp-0x21]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v6)\n
    {\n
        if (v1->field_308)\n
        {\n
            v6 = v1->field_308;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a0, *(v6)))\n
            v0 = *(v6);\n
        if (!(v0 & 1))\n
            break;\n
        v6 += 1;\n
    }\n
    if (!*(v6))\n
    {\n
        v1->field_308 = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = cgc_strlen(v6);\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= v2)\n
        {\n
            v1->field_308 = 0;\n
            v5 = v6;\n
            return v5;\n
        }\n
        if (cgc_strchr(a0, *((v6 + v4))))\n
            break;\n
        v4 += 1;\n
    }\n
    *((v6 + v4)) = 0;\n
    for (v3 = v4 + 1; v3 < v2; v3 += 1)\n
    {\n
        if (!cgc_strchr(a0, *((v6 + v3))))\n
        {\n
            v1->field_308 = v6 + v3;\n
            v5 = v6;\n
            return v5;\n
        }\n
        *((v6 + v3)) = 0;\n
    }\n
    if (v3 == v2)\n
        v1->field_308 = 0;\n
    v5 = v6;\n
    return v5;\n
}\n
", "4230759:sub_408e67": null, "4230768:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (v2 && !a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!v2 && a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (!v2 && !a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(a0);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(a0))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*(v2) >= *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
    }\n
    if (*(v2) && !*(a0))\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (!*(v2) && *(a0))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4231118:sub_408fce": null, "4231120:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v5, char *a0)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = cgc_strlen(v5);\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = v2;\n
            if (v0 >= cgc_strlen(a0))\n
                break;\n
            v5[v3] = a0[v2];\n
            v3 += 1;\n
            v2 += 1;\n
        }\n
        v5[v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4231303:sub_409087": null, "4231312:cgc_memcmp": "int cgc_memcmp(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a1)\n
        {\n
            v1 = v2[v4];\n
            v0 = v2[a0];\n
            if (v1 < v0)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            else if (v1 <= v0)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4231465:sub_409129": null, "4231472:cgc_check_egg": "typedef struct struct_0 {\n
    char padding_0[1276];\n
    unsigned int field_4fc;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    struct struct_2 *field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int eggindex;\n
\n
int cgc_check_egg(struct_1 *v1, char a0)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax\n
    struct_0 *v3;  // eax\n
    struct_0 *v4;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (_GLOBAL_OFFSET_TABLE_.padding_0[240 + eggindex] != a0)\n
    {\n
        v0->field_4fc = 0;\n
    }\n
    else\n
    {\n
        v2 = v0;\n
        v2->field_4fc = v2->field_4fc + 1;\n
    }\n
    v3 = v0;\n
    v4 = v3->padding_0[240 + v3->field_4fc];\n
    if (!v4)\n
    {\n
        cgc_printf(&v0[5].padding_0[148]);\n
        v4 = v0;\n
        v1->field_18->field_8 = 99;\n
        v1->field_18->field_4 = 99;\n
        v1->field_18->field_c = 99;\n
        *((v4 + 1276)) = 0;\n
        return v0;\n
    }\n
    return v4;\n
}\n
", "4231663:sub_4091ef": null, "4231664:cgc_read_line": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_line(unsigned int v7, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0xd]\n
    char *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v7)\n
    {\n
        cgc_printf(v2 - 6511);\n
        cgc__terminate();\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v4 < a0)\n
            v1 = v5 != 10;\n
        if (!(v1 & 1))\n
        {\n
            v6 = v4;\n
            return v6;\n
        }\n
        v0 = &v3;\n
        if (cgc_receive(0, &v5, 1))\n
        {\n
            cgc_printf(v2 - 6490);\n
            cgc__terminate();\n
        }\n
        if (!v3)\n
        {\n
            cgc_printf(v2 - 6461);\n
            cgc__terminate();\n
        }\n
        if (v5 == 10)\n
        {\n
            v6 = v4;\n
            return v6;\n
        }\n
        v4[v7] = v5;\n
        v4 += 1;\n
    }\n
}\n
", "4231990:sub_409336": null, "4232000:cgc_read_line_u": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_line_u(unsigned int v6)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    char *v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v4;  // [bp-0xd]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 != 10)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(0, &v4, 1))\n
            {\n
                cgc_printf(v1 - 6490);\n
                cgc__terminate();\n
            }\n
            if (!v2)\n
            {\n
                cgc_printf(v1 - 6461);\n
                cgc__terminate();\n
            }\n
            if (v4 != 10)\n
            {\n
                v3[v6] = v4;\n
                v3 += 1;\n
            }\n
        }\n
        else\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
}\n
", "4232268:sub_40944c": null, "4232272:cgc_add_queue": "typedef struct struct_1 {\n
    char padding_0[1272];\n
    struct struct_2 *field_4f8;\n
    char padding_4fc[4];\n
    struct struct_0 *field_500;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int queue_matrix;\n
\n
int cgc_add_queue(unsigned int v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3[2];  // [bp-0xc]\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2 = 0;\n
    v1 = a0 * (a1 + 1) + v4;\n
    v5 = v1[queue_matrix];\n
    if (v5 == 1)\n
        return v1[queue_matrix];\n
    v3[0] = cgc_malloc(12);\n
    if (!v3)\n
    {\n
        cgc_printf(&v0[5].padding_0[15]);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v3, 0xc);\n
    v3[0] = v4;\n
    v3[1] = a0;\n
    if (!v0->field_500)\n
    {\n
        v0->field_500 = &v3;\n
    }\n
    else\n
    {\n
        for (v2 = v0->field_500; v2->field_8; v2 = v2->field_8);\n
        *((v2 + 8)) = v3;\n
    }\n
    v5 = v0->field_4f8;\n
    v1[v5] = 1;\n
    return v0->field_4f8;\n
}\n
", "4232565:sub_409575": null, "4232576:cgc_dequeue": "typedef struct struct_1 {\n
    char padding_0[1280];\n
    struct struct_0 *field_500;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int root;\n
\n
int cgc_dequeue()\n
{\n
    struct_1 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    struct_1 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = root;\n
    if (root)\n
    {\n
        v3 = v0;\n
        v3->field_500 = v3->field_500->field_8;\n
    }\n
    return v1;\n
}\n
", "4232645:sub_4095c5": null, "4232656:cgc_check_adjacent": "int cgc_check_adjacent(unsigned int v1, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 == a1)\n
    {\n
        if (a0 + 1 != a2 && !(a0 - 1 == a2))\n
            goto LABEL_409656;\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a0 != a2)\n
    {\n
LABEL_409656:\n
        v0 = 0;\n
        return v0;\n
    }\n
    if (v1 + 1 != a1 && !(v1 - 1 == a1))\n
        goto LABEL_409656;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4232810:sub_40966a": null, "4232816:cgc_print_map": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_map(unsigned int v6[11])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    v4 = 0;\n
    v3 = v6[0] * v6[1];\n
    v1 = cgc_malloc(v3 + v6[1] + 1);\n
    if (!v1)\n
    {\n
        cgc_printf(v0 - 6393);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1, v3 + v6[1] + 1);\n
    for (; v4 < v3; v2 += 1)\n
    {\n
        if (0 < v4 && !(0 CONCAT v4) /m v6[0] >> 32)\n
        {\n
            v8 = v2;\n
            v2 = v8 + 1;\n
            *((v1 + v8)) = 10;\n
        }\n
        if (!v4[v6[10]])\n
            *((v1 + v2)) = 46;\n
        else\n
            *((v1 + v2)) = v4[v6[10]];\n
        v4 += 1;\n
    }\n
    *((v1 + v2)) = 10;\n
    cgc_printf(v0 - 7659);\n
    v9 = v5;\n
    return cgc_free(v1);\n
}\n
", "4233167:sub_4097cf": null, "4233168:cgc_find_path": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_path(unsigned int v4, unsigned int a0, unsigned int a1[6])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = 0;\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (cgc_check_adjacent(v4, a0, a1[4], a1[5]) != 1)\n
    {\n
        if (a0 > 0)\n
            cgc_add_queue(v4, a0 - 1, a1[0] - 1, a1[1] - 1);\n
        if (v4 < a1[0] - 1)\n
            cgc_add_queue(v4 + 1, a0, a1[0] - 1, a1[1] - 1);\n
        if (a0 < a1[1] - 1)\n
            cgc_add_queue(v4, a0 + 1, a1[0] - 1, a1[1] - 1);\n
        if (v4 > 0)\n
            cgc_add_queue(v4 - 1, a0, a1[0] - 1, a1[1] - 1);\n
        v2[0] = cgc_dequeue();\n
        while (true)\n
        {\n
            if (v2)\n
            {\n
                v1 = cgc_find_path(*(v2), *((v2 + 4)), a1);\n
                if (v1 == 1)\n
                {\n
                    cgc_free(v2);\n
                    v3 = 1;\n
                    return v3;\n
                }\n
                cgc_free(v2);\n
                v2 = cgc_dequeue();\n
            }\n
            else\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4233693:sub_4099dd": null, "4233696:cgc_update_page_index": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_page_index;\n
\n
int cgc_update_page_index()\n
{\n
    cgc_page_index = cgc_page_index + 3;\n
    cgc_page_index = cgc_page_index & 4095;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4233746:sub_409a12": null, "4233760:cgc_place_marker": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[24];\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    struct struct_1 *field_28;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
extern unsigned int cgc_page_index;\n
extern unsigned int secret_page;\n
\n
int cgc_place_marker(struct_0 *v7)\n
{\n
    char v0;  // [bp-0x1a]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2[322];  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9[322];  // ebx\n
    unsigned int v10[322];  // ebx\n
    unsigned int v11[322];  // ebx\n
    unsigned int v12;  // eax\n
\n
    v6 = v8;\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v7->field_20 = (0 CONCAT *((secret_page + cgc_page_index))) /m v7->field_0 >> 32;\n
    cgc_update_page_index();\n
    v9 = v2;\n
    v7->field_24 = (0 CONCAT *((v9[321] + v9[195]))) /m v7->field_4 >> 32;\n
    cgc_update_page_index();\n
    v5 = v7->field_24 * v7->field_0 + v7->field_20;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*((v7->field_28 + v5)))\n
            v1 = v4 < 100;\n
        if (!(v1 & 1))\n
            break;\n
        v10 = v2;\n
        v7->field_20 = (0 CONCAT *((v10[321] + v10[195]))) /m v7->field_0 >> 32;\n
        cgc_update_page_index();\n
        v11 = v2;\n
        v7->field_24 = (0 CONCAT *((v11[321] + v11[195]))) /m v7->field_4 >> 32;\n
        cgc_update_page_index();\n
        v5 = v7->field_24 * v7->field_0 + v7->field_20;\n
        v4 += 1;\n
    }\n
    v3 = v7->field_4 * v7->field_0;\n
    if (v4 == 100)\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*((v7->field_28 + v5)))\n
                v0 = v5 < v3;\n
            if (!(v0 & 1))\n
                break;\n
            v5 += 1;\n
        }\n
        if (v5 == v3)\n
        {\n
            cgc_printf(&v2[4 + 302]);\n
            cgc_print_map(v7);\n
            cgc__terminate();\n
        }\n
        v7->field_24 = (0 CONCAT v5) /m v7->field_0;\n
        v7->field_20 = (0 CONCAT v5) /m v7->field_0 >> 32;\n
    }\n
    v12 = v7->field_28;\n
    *((v12 + v5)) = 35;\n
    return v12;\n
}\n
", "4234276:sub_409c24": null, "4234288:cgc_set_marker": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[36];\n
    struct struct_1 *field_28;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_set_marker(unsigned int v1, unsigned int a0, struct_0 *a1, char a2)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
    unsigned int v3;  // eax\n
\n
    v0 = v2;\n
    v0 = a0 * a1->field_0 + v1;\n
    v3 = a1->field_28;\n
    v0[v3] = a2;\n
    return v3;\n
}\n
", "4234339:sub_409c63": null, "4234352:cgc_initialize_map": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    char padding_20[8];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
\n
int cgc_initialize_map(struct_0 *v2)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1[322];  // [bp-0xc]\n
    unsigned int v3[322];  // ebx\n
    unsigned int v4[322];  // ebx\n
    unsigned int v5[322];  // ebx\n
    unsigned int v6[322];  // ebx\n
\n
    v1[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (!v2)\n
    {\n
        cgc_printf(&v1[4 + 300]);\n
        cgc__terminate();\n
    }\n
    v2->field_28 = cgc_malloc(v2->field_4 * v2->field_0);\n
    if (!v2->field_28)\n
    {\n
        cgc_printf(&v1[4 + 310] + 1);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v2->field_28, v2->field_4 * v2->field_0);\n
    v2->field_8 = 0;\n
    v2->field_c = 0;\n
    v2->field_10 = 0;\n
    v2->field_14 = 0;\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v2->field_8 != v2->field_10)\n
        {\n
            v0 = 1;\n
            if (v2->field_8 - 1 != v2->field_10)\n
            {\n
                v0 = 1;\n
                if (v2->field_8 + 1 != v2->field_10)\n
                {\n
                    v0 = 1;\n
                    if (v2->field_c != v2->field_14)\n
                    {\n
                        v0 = 1;\n
                        if (v2->field_c + 1 != v2->field_14)\n
                            v0 = v2->field_c - 1 == v2->field_14;\n
                    }\n
                }\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v3 = v1;\n
        v2->field_8 = (0 CONCAT *((v3[321] + v3[195]))) /m v2->field_0 >> 32;\n
        cgc_update_page_index();\n
        v4 = v1;\n
        v2->field_c = (0 CONCAT *((v4[321] + v4[195]))) /m v2->field_4 >> 32;\n
        cgc_update_page_index();\n
        v5 = v1;\n
        v2->field_10 = (0 CONCAT *((v5[321] + v5[195]))) /m v2->field_0 >> 32;\n
        cgc_update_page_index();\n
        v6 = v1;\n
        v2->field_14 = (0 CONCAT *((v6[321] + v6[195]))) /m v2->field_4 >> 32;\n
        cgc_update_page_index();\n
    }\n
    cgc_set_marker(v2->field_8, v2->field_c, v2, 64);\n
    cgc_set_marker(v2->field_10, v2->field_14, v2, 88);\n
    v2->field_18 = v2->field_8;\n
    v2->field_1c = v2->field_c;\n
    return v2;\n
}\n
", "4235002:sub_409efa": null, "4235008:cgc_initialize_queue_matrix": "typedef struct struct_0 {\n
    char padding_0[1272];\n
    unsigned int field_4f8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char *field_4;\n
    char padding_8[32];\n
    unsigned int field_28;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int queue_matrix;\n
\n
int cgc_initialize_queue_matrix(struct_1 *v2)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (queue_matrix)\n
        cgc_free(v0->field_4f8);\n
    v3 = v0;\n
    v3->field_4f8 = cgc_malloc(v2->field_4 * v2->field_0);\n
    if (!v3->field_4f8)\n
    {\n
        cgc_printf(&v0[4].padding_0[1203]);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v0->field_4f8, v2->field_4 * v2->field_0);\n
    for (v1 = 0; v1 < v2->field_4 * v2->field_0; v1 += 1)\n
    {\n
        if (v1[v2->field_28])\n
            v1[v0->field_4f8] = 1;\n
    }\n
    return v1;\n
}\n
", "4235270:sub_40a006": null, "4235280:cgc_generate_map": "typedef struct struct_1 {\n
    char padding_0[1272];\n
    unsigned int field_4f8;\n
    char padding_4fc[4];\n
    struct struct_0 *field_500;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_generate_map(unsigned int v14, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x34]\n
    struct_1 *v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28]\n
    void* v8;  // [bp-0x24]\n
    void* v9;  // [bp-0x20]\n
    void* v10;  // [bp-0x1c]\n
    struct_0 *v11;  // [bp-0x18]\n
    unsigned int v12[11];  // [bp-0x14]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    struct_1 *v16;  // ebx\n
\n
    v13 = v15;\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v12[0] = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 1;\n
    v12[0] = cgc_malloc(44);\n
    if (!v12)\n
    {\n
        cgc_printf(&v5[4].padding_0[1130]);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v12, 0x2c);\n
    v12[1] = a0;\n
    v12[0] = v14;\n
    cgc_initialize_map(v12);\n
    v4 = v12[5];\n
    v0 = v12[2];\n
    v1 = v12[3];\n
    v2 = v12[4];\n
    v3 = v4;\n
    cgc_printf(&v5[4].padding_0[1089]);\n
    for (; v6; v5->field_500 = 0)\n
    {\n
        cgc_place_marker(v12);\n
        cgc_initialize_queue_matrix(v12);\n
        if (cgc_find_path(v12[2], v12[3], v12) != 1)\n
        {\n
            *((v12[10] + v12[9] * v12[0] + v12[8])) = 0;\n
            v6 = 0;\n
        }\n
        while (v5->field_500)\n
        {\n
            v16 = v5;\n
            v11 = v16->field_500;\n
            v16->field_500 = v16->field_500->field_8;\n
            cgc_free(v11);\n
        }\n
    }\n
    cgc_free(v5->field_4f8);\n
    cgc_print_map(v12);\n
    return v12;\n
}\n
", "4235791:sub_40a20f": null, "4235792:cgc_select_monster": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_select_monster(struct_0 *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    for (v4 = 0; v4 < v6->field_14; v4 += 1)\n
    {\n
        if (*((*(&v6[1].padding_0[4 * v4]) + 4)) > 0)\n
            v2 = 1;\n
    }\n
    if (!v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = 0;\n
    cgc_printf(v0 - 6162);\n
    for (v4 = 0; v4 < v6->field_14; v4 += 1)\n
    {\n
        cgc_printf(v0 - 6150);\n
        cgc_printf(v0 - 6143);\n
        cgc_printf(v0 - 6132);\n
        cgc_printf(v0 - 6120);\n
        cgc_printf(v0 - 6107);\n
    }\n
    while (((v2 ^ 255) & 1))\n
    {\n
        cgc_printf(v0 - 6094);\n
        v3 = 0;\n
        cgc_read_line(&v3, 2);\n
        v1 = cgc_atoi(&v3);\n
        if (v1 <= 0)\n
        {\n
LABEL_40a3ff:\n
            cgc_printf(v0 - 6082);\n
            goto LABEL_40a486;\n
        }\n
        else\n
        {\n
            if (!(v1 <= v6->field_14))\n
                goto LABEL_40a3ff;\n
            if (!(&v6->field_14)[v1])\n
            {\n
                cgc_printf(v0 - 6082);\n
            }\n
            else if (*(((&v6->field_14)[v1] + 4)) <= 0)\n
            {\n
                cgc_printf(v0 - 6066);\n
            }\n
            else\n
            {\n
                v2 = 1;\n
            }\n
LABEL_40a486:\n
        }\n
    }\n
    v5 = (&v6->field_14)[v1];\n
    return v5;\n
}\n
", "4236457:sub_40a4a9": null, "4236464:cgc_reset_monsters": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
int cgc_reset_monsters(struct_0 *v1)\n
{\n
    struct_0 *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    if (!v1)\n
        return v1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= v1->field_14)\n
            break;\n
        *((*((24 + &v1->padding_0[0] + 0x4 * v0)) + 4)) = *((*((24 + &v1->padding_0[0] + 0x4 * v0)) + 8));\n
        v0 = &v0->padding_0[1];\n
    }\n
    return v0;\n
}\n
", "4236565:sub_40a515": null, "4236576:cgc_print_monster": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_monster(unsigned int v2[6])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v2)\n
    {\n
        v0 = v2[0];\n
        cgc_printf(v1 - 6143);\n
        v0 = v2[5];\n
        cgc_printf(v1 - 6132);\n
        v0 = v2[1];\n
        cgc_printf(v1 - 6120);\n
        v0 = v2[2];\n
        cgc_printf(v1 - 6057);\n
        v0 = v2[3];\n
        return cgc_printf(v1 - 6107);\n
    }\n
    return v2;\n
}\n
", "4236756:sub_40a5d4": null, "4236768:cgc_oneup_monster": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_oneup_monster(unsigned int v3[6])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[6];  // eax\n
    unsigned int v5[6];  // eax\n
    unsigned int v6[6];  // eax\n
    unsigned int v7[6];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v4 = v3;\n
    v4[4] = v4[4] + 1;\n
    if (!(0 CONCAT v3[4]) /m 15 >> 32)\n
    {\n
        v0 = v3[0];\n
        cgc_printf(v1 - 6040);\n
        v5 = v3;\n
        v5[2] = v5[2] + 1;\n
        v6 = v3;\n
        v6[3] = v6[3] + 1;\n
        v3[1] = v3[2];\n
        v7 = v3;\n
        v7[5] = v7[5] + 1;\n
        v3[4] = 0;\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4236951:sub_40a697": null, "4236960:cgc_generate_boss": "extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
\n
int cgc_generate_boss()\n
{\n
    char v0;  // [bp-0x1c]\n
    unsigned int v1[322];  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v2[0] = 0;\n
    v2[0] = cgc_malloc(24);\n
    if (!v2)\n
    {\n
        cgc_printf(&v1[4 + 217] + 1);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v2, 0x18);\n
    v2[0] = cgc_select_name(*(&v0));\n
    v2[1] = ((*((v1[321] + v1[195])) >> 31 CONCAT *((v1[321] + v1[195]))) /m 10 >> 32) + 9;\n
    v2[2] = v2[1];\n
    cgc_update_page_index();\n
    v2[3] = ((*((v1[321] + v1[195])) >> 31 CONCAT *((v1[321] + v1[195]))) /m 6 >> 32) + 4;\n
    cgc_update_page_index();\n
    v2[5] = 4;\n
    v6 = v3;\n
    return v2;\n
}\n
", "4237208:sub_40a798": null, "4237216:cgc_select_name": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_page_index;\n
extern unsigned int secret_page;\n
\n
int cgc_select_name()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = *((secret_page + cgc_page_index));\n
    cgc_update_page_index();\n
    for (; v1; v1 -= 1)\n
    {\n
        v2 += 1;\n
        if (!*((v0 + (v2 << 2) + 52)))\n
            v2 = 0;\n
    }\n
    v6 = v3;\n
    return *((v0 + v2 * 4 + 52));\n
}\n
", "4237348:sub_40a824": null, "4237360:cgc_change_monster_name": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_change_monster_name(unsigned int *v5)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: void*\n
    void* v2;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_bzero(&v3, 0x20);\n
    cgc_printf(v0 - 5970);\n
    v2 = cgc_read_line_u(&v3);\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        cgc_printf(v0 - 5959);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1, v2 + 1);\n
    cgc_memcpy(v1, &v3, v2);\n
    *(v5) = v1;\n
    return 1;\n
}\n
", "4237587:sub_40a913": null, "4237600:cgc_capture_boss": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_capture_boss(unsigned int v4[3], struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x17]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (v4 && a0)\n
    {\n
        cgc_printf(v0 - 5921);\n
        cgc_bzero(&v2, 0x3);\n
        cgc_read_line(&v2, 2);\n
        if (v2 != 121)\n
        {\n
            cgc_free(v4);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_printf(v0 - 5896);\n
        cgc_bzero(&v2, 0x3);\n
        cgc_read_line(&v2, 2);\n
        if (v2 == 121)\n
            cgc_change_monster_name(v4);\n
        if (a0->field_14 < 5)\n
        {\n
            v5 = a0;\n
            v6 = v5->field_14;\n
            v5->field_14 = v6 + 1;\n
            *(&a0[1].padding_0[4 * v6]) = v4;\n
            v3 = 1;\n
            return v3;\n
        }\n
        cgc_printf(v0 - 5870);\n
        for (v1 = 0; v1 < 5; v1 += 1)\n
        {\n
            cgc_printf(v0 - 6149);\n
            cgc_print_monster(*(&a0[1].padding_0[4 * v1]));\n
        }\n
        cgc_printf(v0 - 5850);\n
        v4[1] = v4[2];\n
        cgc_print_monster(v4);\n
        cgc_printf(v0 - 5850);\n
        cgc_printf(v0 - 5815);\n
        cgc_bzero(&v2, 0x3);\n
        cgc_read_line(&v2, 2);\n
        if (v2 != 121)\n
        {\n
            cgc_free(v4);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_bzero(&v2, 0x3);\n
        cgc_printf(v0 - 5785);\n
        cgc_read_line(&v2, 3);\n
        v1 = cgc_atoi(&v2);\n
        if (v1 > 0 && v1 <= 5)\n
        {\n
            cgc_free((&a0->field_14)[v1]);\n
            (&a0->field_14)[v1] = v4;\n
            v3 = 1;\n
            return v3;\n
        }\n
        cgc_printf(v0 - 5773);\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4238361:sub_40ac19": null, "4238368:cgc_daboss": "extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
\n
int cgc_daboss(void* v8)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2[322];  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5[4];  // [bp-0x18]\n
    unsigned int v6[4];  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v9[322];  // ebx\n
    unsigned int v10[4];  // eax\n
    unsigned int v11[322];  // ebx\n
    unsigned int v12[4];  // eax\n
\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v6[0] = 0;\n
    v5[0] = 0;\n
    if (!v8)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v6[0] = cgc_generate_boss();\n
    cgc_reset_monsters(v8);\n
    cgc_printf(&v2[4 + 153]);\n
    cgc_printf(&v2[4 + 146] + 1);\n
    cgc_print_monster(v6);\n
    while (true)\n
    {\n
        if (v6[1] > 0)\n
        {\n
            v5[0] = cgc_select_monster(v8);\n
            if (!v5)\n
            {\n
                cgc_printf(&v2[4 + 138]);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v9 = v2;\n
            v4 = (0 CONCAT *((v9[321] + v9[195]))) /m v5[3] >> 32;\n
            cgc_update_page_index();\n
            v10 = v6;\n
            v10[1] = v10[1] - v4;\n
            v0 = v6[1];\n
            cgc_printf(&v2[4 + 128]);\n
            cgc_oneup_monster(v5);\n
            if (v6[1] <= 0)\n
            {\n
                cgc_printf(&v2[4 + 121] + 3);\n
                cgc_reset_monsters(v8);\n
                cgc_capture_boss(v6, v8);\n
                v7 = 1;\n
                return v7;\n
            }\n
            v11 = v2;\n
            v3 = (0 CONCAT *((v11[321] + v11[195]))) /m v6[3] >> 32;\n
            cgc_update_page_index();\n
            v0 = v5[0];\n
            v1 = v3;\n
            cgc_printf(&v2[4 + 114] + 3);\n
            v12 = v5;\n
            v12[1] = v12[1] - v3;\n
            if (v5[1] <= 0)\n
                cgc_printf(&v2[4 + 110]);\n
        }\n
        else\n
        {\n
            v7 = 1;\n
            return v7;\n
        }\n
    }\n
}\n
", "4238898:sub_40ae32": null, "4238912:cgc_capture_monster": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_capture_monster(unsigned int v4[6], struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x17]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (v4 && a0)\n
    {\n
        cgc_printf(v0 - 5921);\n
        cgc_bzero(&v2, 0x3);\n
        cgc_read_line(&v2, 2);\n
        if (v2 != 121)\n
        {\n
            cgc_free(v4);\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (a0->field_14 >= 5)\n
        {\n
            cgc_printf(v0 - 5870);\n
            for (v1 = 0; v1 < 5; v1 += 1)\n
            {\n
                cgc_printf(v0 - 6149);\n
                cgc_print_monster(*(&a0[1].padding_0[4 * v1]));\n
            }\n
            cgc_printf(v0 - 5850);\n
            cgc_print_monster(v4);\n
            cgc_printf(v0 - 5850);\n
            cgc_printf(v0 - 5815);\n
            cgc_bzero(&v2, 0x3);\n
            cgc_read_line(&v2, 2);\n
            if (v2 != 121)\n
            {\n
                cgc_free(v4);\n
                v3 = 0;\n
                return v3;\n
            }\n
            cgc_bzero(&v2, 0x3);\n
            cgc_printf(v0 - 5785);\n
            cgc_read_line(&v2, 3);\n
            v1 = cgc_atoi(&v2);\n
            if (v1 > 0 && v1 <= 5)\n
            {\n
                cgc_free((&a0->field_14)[v1]);\n
                (&a0->field_14)[v1] = v4;\n
                v3 = 1;\n
                return v3;\n
            }\n
            cgc_printf(v0 - 5773);\n
            cgc_free(v4);\n
            v3 = 0;\n
            return v3;\n
        }\n
        else\n
        {\n
            v5 = a0;\n
            v6 = v5->field_14;\n
            v5->field_14 = v6 + 1;\n
            *(&a0[1].padding_0[4 * v6]) = v4;\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4239573:sub_40b0d5": null, "4239584:cgc_fight": "extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
\n
int cgc_fight(void* v8)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2[322];  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v5[4];  // [bp-0x18]\n
    unsigned int v6[4];  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v9[322];  // ebx\n
    unsigned int v10[4];  // eax\n
    unsigned int v11[322];  // ebx\n
    unsigned int v12[4];  // eax\n
\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v6[0] = 0;\n
    v5[0] = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v8)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    cgc_reset_monsters(v8);\n
    v6[0] = cgc_generate_monster();\n
    cgc_printf(&v2[4 + 105]);\n
    cgc_print_monster(v6);\n
    while (true)\n
    {\n
        if (v6[1] > 0)\n
        {\n
            v5[0] = cgc_select_monster(v8);\n
            if (!v5)\n
            {\n
                cgc_printf(&v2[4 + 138]);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v9 = v2;\n
            v3 = (0 CONCAT *((v9[321] + v9[195]))) /m v5[3] >> 32;\n
            cgc_update_page_index();\n
            v10 = v6;\n
            v10[1] = v10[1] - v3;\n
            v0 = v6[1];\n
            cgc_printf(&v2[4 + 128]);\n
            cgc_oneup_monster(v5);\n
            if (v6[1] <= 0)\n
            {\n
                cgc_printf(&v2[4 + 98] + 1);\n
                cgc_reset_monsters(v8);\n
                cgc_capture_monster(v6, v8);\n
                v7 = 1;\n
                return v7;\n
            }\n
            v11 = v2;\n
            v4 = (0 CONCAT *((v11[321] + v11[195]))) /m v6[3] >> 32;\n
            cgc_update_page_index();\n
            v0 = v5[0];\n
            v1 = v4;\n
            cgc_printf(&v2[4 + 114] + 3);\n
            v12 = v5;\n
            v12[1] = v12[1] - v4;\n
            if (v5[1] <= 0)\n
                cgc_printf(&v2[4 + 110]);\n
        }\n
        else\n
        {\n
            v7 = 1;\n
            return v7;\n
        }\n
    }\n
}\n
", "4240120:sub_40b2f8": null, "4240128:cgc_generate_monster": "extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
\n
int cgc_generate_monster()\n
{\n
    unsigned int v0[322];  // [bp-0x10]\n
    unsigned int v1[6];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1[0] = 0;\n
    v1[0] = cgc_malloc(24);\n
    if (!v1)\n
    {\n
        cgc_printf(&v0[4 + 52] + 1);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1, 0x18);\n
    v1[0] = cgc_select_name();\n
    v1[1] = ((*((v0[321] + v0[195])) >> 31 CONCAT *((v0[321] + v0[195]))) /m 10 >> 32) + 4;\n
    v1[2] = v1[1];\n
    cgc_update_page_index();\n
    v1[3] = ((*((v0[321] + v0[195])) >> 31 CONCAT *((v0[321] + v0[195]))) /m 6 >> 32) + 2;\n
    cgc_update_page_index();\n
    v1[5] = 1;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4240366:sub_40b3ee": null, "4240368:cgc_movement_loop": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_movement_loop()\n
{\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7;  // [bp+0x4]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    if (!(!v7))\n
        goto LABEL_0x40b42f;\n
    v5 = 0;\n
    return;\n
}\n
", "4241777:sub_40b971": null, "4241792:cgc_generate_player": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_generate_player()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v3[6];  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7[6];  // esi\n
    unsigned int v8;  // ecx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3[0] = 0;\n
    v1 = 0;\n
    cgc_printf(\"Enter your name|| \");\n
    cgc_bzero(&v2, 0x10);\n
    v1 = cgc_read_line(&v2, 15);\n
    if (!v1)\n
        cgc_memcpy(&v2, v0 - 5296, 10);\n
    v3[0] = cgc_malloc(44);\n
    if (!v3)\n
    {\n
        cgc_printf(v0 - 5285);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v3, 0x2c);\n
    cgc_memcpy(v3, &v2, 16);\n
    for (v1 = 0; v1 < 3; v1 += 1)\n
    {\n
        v7 = v3;\n
        v8 = v7[5];\n
        v7[5] = v8 + 1;\n
        v3[1 + v8] = cgc_generate_monster();\n
    }\n
    v3[4] = 1;\n
    return v3;\n
}\n
", "4242129:sub_40bad1": null, "4242144:cgc_print_player": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_player(struct_0 *v3)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v3)\n
        return v3;\n
    v0 = v3;\n
    cgc_printf(v1 - 5242);\n
    v0 = v3->field_10;\n
    cgc_printf(v1 - 6131);\n
    cgc_printf(v1 - 6162);\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v3->field_14)\n
            break;\n
        v0 = *(*(&v3[1].padding_0[4 * v2]));\n
        cgc_printf(v1 - 6143);\n
        v0 = *((*(&v3[1].padding_0[4 * v2]) + 4));\n
        cgc_printf(v1 - 6120);\n
        v0 = *((*(&v3[1].padding_0[4 * v2]) + 12));\n
        cgc_printf(v1 - 6107);\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4242407:sub_40bbe7": null, "4242416:main": "extern unsigned int _GLOBAL_OFFSET_TABLE_[322];\n
extern void* cgc_page_index;\n
extern void* queue_matrix;\n
extern void* root;\n
extern unsigned int secret_page;\n
\n
int main(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0[322];  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v5 = 0;\n
    v7 = 0x4347c000;\n
    v4 = 0;\n
    v3 = 0;\n
    secret_page = v7;\n
    cgc_page_index = 0;\n
    root = 0;\n
    queue_matrix = 0;\n
    v3 = cgc_generate_player();\n
    cgc_print_player(v3);\n
    v2 = ((*((v0[321] + v0[195])) >> 31 CONCAT *((v0[321] + v0[195]))) /m 31 >> 32) + 5;\n
    cgc_update_page_index();\n
    v1 = ((*((v0[321] + v0[195])) >> 31 CONCAT *((v0[321] + v0[195]))) /m 31 >> 32) + 5;\n
    cgc_update_page_index();\n
    v4 = cgc_generate_map(v2, v1);\n
    cgc_movement_loop(v4);\n
    v9 = v6;\n
    return 0;\n
}\n
", "4242664:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_log10": null, "5242908:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}