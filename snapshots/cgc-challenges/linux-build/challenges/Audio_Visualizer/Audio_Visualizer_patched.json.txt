{"4198400:_init": "extern struct_0 *g_40812c;\n
\n
int _init()\n
{\n
    if (g_40812c)\n
    {\n
        g_40812c();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_log2": "// attributes: PLT stub\n
int cgc_log2()\n
{\n
    ::libc.so.0::cgc_log2();\n
    return;\n
}\n
", "4198480:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198496:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198512:cgc_atan2": "// attributes: PLT stub\n
int cgc_atan2()\n
{\n
    ::libc.so.0::cgc_atan2();\n
    return;\n
}\n
", "4198528:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198544:cgc_cos": "// attributes: PLT stub\n
int cgc_cos()\n
{\n
    ::libc.so.0::cgc_cos();\n
    return;\n
}\n
", "4198560:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198576:cgc_log": "// attributes: PLT stub\n
int cgc_log()\n
{\n
    ::libc.so.0::cgc_log();\n
    return;\n
}\n
", "4198592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198608:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libc.so.0::cgc_sin();\n
    return;\n
}\n
", "4198624:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4198640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198656:sub_401100": "int sub_401100()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198662:sub_401106": null, "4198672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198715:sub_40113b": null, "4198716:sub_40113c": "int sub_40113c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198724:sub_401144": null, "4198736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28643;\n
    v6 = v5 + 49;\n
    v7 = v5 + 49;\n
    if (v7 == v6)\n
        return v5 + 49;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198787:sub_401183": "int sub_401183()\n
{\n
}\n
", "4198793:sub_401189": "int sub_401189()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28579;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 49;\n
    v9 = (v6 + 49 - (v6 + 49) >> 31) + (49 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198871:sub_4011d7": "int sub_4011d7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408128;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408128)\n
    {\n
        v0 = __dso_handle;\n
        sub_401100();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198955:sub_40122b": "int sub_40122b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198973:sub_40123d": null, "4198976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4199157:sub_4012f5": null, "4199168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199257:sub_401359": null, "4199264:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199353:sub_4013b9": null, "4199360:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199385:sub_4013d9": null, "4199392:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199417:sub_4013f9": null, "4199424:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199449:sub_401419": null, "4199456:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4199483:sub_40143b": null, "4199488:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4199533:sub_40146d": null, "4199536:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4199581:sub_40149d": null, "4199584:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199661:sub_4014ed": null, "4199664:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4199709:sub_40151d": null, "4199712:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0];\n
}\n
", "4199743:sub_40153f": null, "4199744:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4199799:sub_401577": null, "4199808:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8368 + v0];\n
}\n
", "4199839:sub_40159f": null, "4199840:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199854:sub_4015ae": null, "4199856:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4199927:sub_4015f7": null, "4199936:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4200007:sub_401647": null, "4200016:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4200151:sub_4016d7": null, "4200160:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4200208:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 200 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4200616:sub_4018a8": null, "4200624:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4200786:sub_401952": null, "4200800:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 200 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4200978:sub_401a12": null, "4200992:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4201186:sub_401ae2": null, "4201200:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 68)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4201311:sub_401b5f": null, "4201312:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[12 + 2 + v1])\n
    {\n
        v5 = v0;\n
        v5[12 + 2 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[12 + 2 + v1];\n
    *((v6[12 + 2 + v1] + 12)) = v3;\n
    v6[12 + 2 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4201470:sub_401bfe": null, "4201472:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 200)) == v3)\n
        *((v0 + v1 * 4 + 200)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4201646:sub_401cae": null, "4201648:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_401e9c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_401e9c:\n
    return v6;\n
}\n
", "4202156:sub_401eac": null, "4202160:cgc_remove_from_blist": "int cgc_remove_from_blist(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (*((v0 + 20)))\n
        *((*((v0 + 20)) + 16)) = *((v0 + 16));\n
    v1 = v0;\n
    if (*((v1 + 16)))\n
    {\n
        v1 = *((v0 + 16));\n
        *((v1 + 20)) = *((v0 + 20));\n
    }\n
    return v1;\n
}\n
", "4202224:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[v2] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4202320:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*(v2) == *(a0))\n
        {\n
            v2 += 1;\n
            a0 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *(a0) - *(v2);\n
            return v1;\n
        }\n
    }\n
}\n
", "4202448:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    for (v1 = a0; *(&v0) < a1; v0 = *(&v0) + 1)\n
    {\n
        v2[*(&v0)] = *((v1 + *(&v0)));\n
    }\n
    return v3;\n
}\n
", "4202527:sub_40201f": null, "4202528:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4202657:sub_4020a1": null, "4202672:cgc_output_number": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (v8 >= a0)\n
    {\n
        v7 = cgc_output_number((0 CONCAT v8) /m a0, a0, a1 - 1, a2);\n
        v8 = (0 CONCAT v8) /m a0 >> 32;\n
    }\n
    if (!v7 && a1 > 0)\n
    {\n
        while (true)\n
        {\n
            a1 -= 1;\n
            if (!a1)\n
                break;\n
            if ((a2 & 1))\n
            {\n
                v6 = 48;\n
                cgc_transmit(1, &v6, 1);\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                cgc_transmit(1, &v5, 1);\n
            }\n
        }\n
    }\n
    if ((a2 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v4 = v1;\n
        cgc_transmit(1, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v3 = v0;\n
        cgc_transmit(1, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4203163:sub_40229b": null, "4203168:cgc_send_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_n_bytes(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 && a1)\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
        while (true)\n
        {\n
            if (v2 >= a0)\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            v0 = &v3;\n
            if (cgc_transmit(v5, a1 + v2, a0 - v2))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            v2 = v3 + v2;\n
        }\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4203350:sub_402356": null, "4203360:cgc_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf(char *v16)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x54]\n
    unsigned int v3;  // [bp-0x50]\n
    char v4;  // [bp-0x49]\n
    char v5;  // [bp-0x41]\n
    char v6;  // [bp-0x39]\n
    char v7;  // [bp-0x31]\n
    char v8;  // [bp-0x29]\n
    unsigned int *v9;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x24]\n
    void* v11;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v15;  // [bp-0xc]\n
    char v17;  // [bp+0x8]\n
    char *v18;  // eax\n
    char *v19;  // eax\n
    unsigned int *v20;  // eax\n
    unsigned int *v21;  // eax\n
    unsigned int *v22;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v9 = &v17;\n
    while (*(v16))\n
    {\n
        v18 = v16;\n
        v16 = v18 + 1;\n
        v8 = *(v18);\n
        if (v8 != 37)\n
        {\n
            v4 = v8;\n
            cgc_transmit(1, &v4, 1);\n
LABEL_402642:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v19 = v16;\n
                    v16 = v19 + 1;\n
                    v8 = *(v19);\n
                    v2 = v8;\n
                    if (v2 != 48)\n
                        break;\n
                    v12 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v11 = cgc_strtol(v16 - 1, &v16);\n
            }\n
            v1 = v8;\n
            if (v1 == 37)\n
            {\n
                v7 = 37;\n
                cgc_transmit(1, &v7, 1);\n
                goto LABEL_4025fa;\n
            }\n
            if (v1 == 88)\n
            {\n
                v12 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v20 = v9;\n
                    v9 = v20 + 1;\n
                    v14 = *(v20);\n
                    if (v14 < 0)\n
                    {\n
                        v6 = 45;\n
                        cgc_transmit(1, &v6, 1);\n
                        v14 = -(v14);\n
                    }\n
                    cgc_output_number(v14, 10, v11, v12);\n
                    goto LABEL_4025fa;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v21 = v9;\n
                    v9 = v21 + 1;\n
                    v15 = *(v21);\n
                    v0 = v15;\n
                    cgc_send_n_bytes(1, v0, cgc_strlen());\n
                    goto LABEL_4025fa;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v8;\n
                    cgc_transmit(1, &v5, 1);\n
LABEL_4025fa:\n
                    v11 = 0;\n
                    v12 = 0;\n
                    goto LABEL_402642;\n
                }\n
            }\n
            v22 = v9;\n
            v9 = v22 + 1;\n
            v10 = *(v22);\n
            cgc_output_number(v10, 16, v11, v12);\n
            goto LABEL_4025fa;\n
        }\n
    }\n
    return v13;\n
}\n
", "4204112:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4204370:sub_402752": null, "4204384:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (*(v0))\n
        {\n
            v3 = v0;\n
            v0 = v3 + 1;\n
            if (*(v3) == a0)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4204468:sub_4027b4": null, "4204480:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(a0) - *(v2);\n
}\n
", "4204608:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4204692:sub_402894": null, "4204704:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4204756:sub_4028d4": null, "4204768:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
        if (!*((a0 + v0)))\n
            break;\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = 0;\n
    }\n
    return v1;\n
}\n
", "4204910:sub_40296e": null, "4204912:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = &v2[1];\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4205128:sub_402a48": null, "4205136:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_402a98:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_402a98;\n
        if (a1 < 0)\n
            goto LABEL_402a98;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 43)\n
            v6 = &v6[1];\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_402b8f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_402b8f;\n
                v6 = &v6[1];\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_402c04;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_402c04:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_402d62;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_402d22;\n
            }\n
            if (!v7)\n
            {\n
LABEL_402d22:\n
                if (v8 >= a1)\n
                    goto LABEL_402d62;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = &v6[1];\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_402d19;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_402d19:\n
                v8 += 10;\n
                goto LABEL_402d22;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_402c98;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_402c98:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_402d62:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4205998:sub_402dae": null, "4206000:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4206059:sub_402deb": null, "4206064:cgc_dft": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dft(char *v12, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned short v1;  // [bp-0x30]\n
    unsigned short v2;  // [bp-0x2e]\n
    unsigned int v3;  // [bp-0x2c]\n
    void* v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6[2];  // [bp-0x1c], Other Possible Types: void*\n
    unsigned int v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x10]\n
    void* v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    v4 = 0;\n
    if ([D] GetI(136:I8x8)[t45,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(136:I8x8)[t6,0] = 0x00\n
    cgc_log2();\n
    [D] PutI(72:F64x8)[t36,0] = t39\n
    [D] PutI(136:I8x8)[t36,0] = 0x01\n
    [D] PutI(72:F64x8)[t45,0] = t46\n
    [D] PutI(136:I8x8)[t45,0] = 0x01\n
    [D] PutI(136:I8x8)[t45,0] = 0x00\n
    v2 = [D] x86g_create_fpucw(fpround<4>);\n
    v1 = v2 | 0xc00;\n
    v5 = ([D] GetI(136:I8x8)[t83,0] ? [D] GetI(72:F64x8)[t83,0] : nan);\n
    [D] PutI(136:I8x8)[t83,0] = 0x00\n
    v9 = v5;\n
    v8 = 0;\n
    if (1 << (v9 & 31) == a0)\n
    {\n
        v8 = cgc_fft(v12);\n
    }\n
    else\n
    {\n
        v7 = a0;\n
        v6 = 0;\n
        a0 = 1 << (v9 + 1 & 31);\n
        v6[0] = cgc_malloc(a0 * 8);\n
        if (!v6)\n
        {\n
            *(a1) = 0;\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_memset(v6, 0, a0 * 8);\n
        cgc_memcpy(v6, v12, v7 * 8);\n
        v8 = cgc_fft(v6);\n
        cgc_free(v6);\n
    }\n
    *(a1) = a0;\n
    v10 = v8;\n
    return v10;\n
}\n
", "4206416:cgc_fft": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fft(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned long long *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned long long *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
    unsigned long long *v11;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // ftop\n
    unsigned long long *v14;  // eax\n
    unsigned long long *v15;  // ecx\n
    unsigned int v16;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_malloc(a0 * 16);\n
    v3 = 0;\n
    for (v2 = 0; v2 < a0; v2 = v2 + 1)\n
    {\n
        v9 = v13 - 1;\n
        if (![D] GetI(136:I8x8)[t30,0])\n
        {\n
            v10 = v9 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        else\n
        {\n
            v10 = v9 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        v11 = v4;\n
        v12 = v2 * 16;\n
        if ([D] GetI(136:I8x8)[t30,0])\n
        {\n
            *((v11 + v12)) = [D] GetI(72:F64x8)[t8,0];\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v13 = v10 + 1;\n
        }\n
        else\n
        {\n
            *((v11 + v12)) = nan;\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v13 = v10 + 1;\n
        }\n
        v14 = v4;\n
        v15 = v2 * 16;\n
        *((v14 + v15 + 12)) = 0;\n
        *((v14 + v15 + 8)) = 0;\n
    }\n
    v0 = a0;\n
    v3 = cgc_cfft(v4);\n
    cgc_free(v4);\n
    v16 = v5;\n
    return v3;\n
}\n
", "4206591:sub_402fff": null, "4206592:cgc_idft": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_idft(char *v16, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned short v1;  // [bp-0x40]\n
    unsigned short v2;  // [bp-0x3e]\n
    unsigned int v3;  // [bp-0x3c]\n
    void* v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    void* v6;  // [bp-0x30]\n
    unsigned int v7;  // [bp-0x28]\n
    void* v8;  // [bp-0x24], Other Possible Types: unsigned int [2]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned long long *v10;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned long long *v11;  // [bp-0x18]\n
    void* v12;  // [bp-0x14], Other Possible Types: unsigned int, unsigned int [2]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned long long *v14;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
\n
    v15 = v17;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0;\n
    v6 = 0;\n
    v19 = v18 - 1;\n
    if ([D] GetI(136:I8x8)[t14,0])\n
    {\n
        v20 = v19 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v20 = v19 - 1;\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(136:I8x8)[t6,0] = 0x00\n
    v21 = v20 + 1;\n
    cgc_log2();\n
    [D] PutI(72:F64x8)[t26,0] = t29\n
    [D] PutI(136:I8x8)[t26,0] = 0x01\n
    [D] PutI(72:F64x8)[t35,0] = t36\n
    [D] PutI(136:I8x8)[t35,0] = 0x01\n
    [D] PutI(136:I8x8)[t35,0] = 0x00\n
    v23 = v21 - 1 + 1;\n
    v2 = [D] x86g_create_fpucw(fpround<4>);\n
    v1 = v2 | 0xc00;\n
    v7 = ([D] GetI(136:I8x8)[t73,0] ? [D] GetI(72:F64x8)[t73,0] : nan);\n
    [D] PutI(136:I8x8)[t73,0] = 0x00\n
    v26 = v23 + 1;\n
    v13 = v7;\n
    v12 = 0;\n
    v11 = 0;\n
    for (v10 = 0; v10 < a0; v10 = v10 + 1)\n
    {\n
        v24 = v26 - 1;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            v25 = v24 - 1;\n
            [D] PutI(72:F64x8)[t6,0] = t9\n
            [D] PutI(136:I8x8)[t6,0] = 0x01\n
        }\n
        else\n
        {\n
            v25 = v24 - 1;\n
            [D] PutI(72:F64x8)[t6,0] = t9\n
            [D] PutI(136:I8x8)[t6,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t6,0] = t7\n
        [D] PutI(136:I8x8)[t6,0] = 0x01\n
        *((8 + v16 + 0x10 * v10)) = ([D] GetI(136:I8x8)[t24,0] ? [D] GetI(72:F64x8)[t24,0] : nan);\n
        [D] PutI(136:I8x8)[t24,0] = 0x00\n
        v26 = v25 + 1;\n
    }\n
    if (1 << (v13 & 31) == a0)\n
    {\n
        v12[0] = cgc_cfft(v16);\n
    }\n
    else\n
    {\n
        v9 = a0;\n
        v8 = 0;\n
        a0 = 1 << (v13 + 1 & 31);\n
        v8[0] = cgc_malloc(a0 * 16);\n
        if (v8)\n
        {\n
            cgc_memset(v8, 0, a0 * 16);\n
            cgc_memcpy(v8, v16, v9 * 16);\n
            v12 = cgc_cfft(v8);\n
            cgc_free(v8);\n
        }\n
        else\n
        {\n
            for (v10 = 0; v10 < a0; v10 = v10 + 1)\n
            {\n
                v27 = v26 - 1;\n
                if ([D] GetI(136:I8x8)[t14,0])\n
                {\n
                    v28 = v27 - 1;\n
                    [D] PutI(72:F64x8)[t6,0] = t9\n
                    [D] PutI(136:I8x8)[t6,0] = 0x01\n
                }\n
                else\n
                {\n
                    v28 = v27 - 1;\n
                    [D] PutI(72:F64x8)[t6,0] = t9\n
                    [D] PutI(136:I8x8)[t6,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t6,0] = t7\n
                [D] PutI(136:I8x8)[t6,0] = 0x01\n
                *((8 + v16 + 0x10 * v10)) = ([D] GetI(136:I8x8)[t24,0] ? [D] GetI(72:F64x8)[t24,0] : nan);\n
                [D] PutI(136:I8x8)[t24,0] = 0x00\n
                v26 = v28 + 1;\n
            }\n
            *(a1) = 0;\n
            v14 = 0;\n
            return v14;\n
        }\n
    }\n
    for (v10 = 0; v10 < a0; v10 = v10 + 1)\n
    {\n
        v29 = v26 - 1;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            v30 = v29 - 1;\n
            [D] PutI(72:F64x8)[t6,0] = t9\n
            [D] PutI(136:I8x8)[t6,0] = 0x01\n
        }\n
        else\n
        {\n
            v30 = v29 - 1;\n
            [D] PutI(72:F64x8)[t6,0] = t9\n
            [D] PutI(136:I8x8)[t6,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t6,0] = t7\n
        [D] PutI(136:I8x8)[t6,0] = 0x01\n
        *((8 + v16 + 0x10 * v10)) = ([D] GetI(136:I8x8)[t24,0] ? [D] GetI(72:F64x8)[t24,0] : nan);\n
        [D] PutI(136:I8x8)[t24,0] = 0x00\n
        v26 = v30 + 1;\n
    }\n
    if (!v12)\n
    {\n
        v14 = 0;\n
        return v14;\n
    }\n
    v11 = cgc_malloc(a0 * 8);\n
    if (!v11)\n
    {\n
        cgc_free(v12);\n
        *(a1) = 0;\n
        v14 = 0;\n
        return v14;\n
    }\n
    for (v10 = 0; v10 < a0; v10 = v10 + 1)\n
    {\n
        v31 = v26 - 1;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            v32 = v31 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        else\n
        {\n
            v32 = v31 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        v3 = a0;\n
        v4 = 0;\n
        v33 = v32 - 1;\n
        if ([D] GetI(136:I8x8)[t14,0])\n
        {\n
            v34 = v33 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v34 = v33 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t7,1] = t8\n
        [D] PutI(136:I8x8)[t7,1] = 0x01\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
        v35 = v34 + 1;\n
        *(&v11[v10]) = ([D] GetI(136:I8x8)[t37,0] ? [D] GetI(72:F64x8)[t37,0] : nan);\n
        [D] PutI(136:I8x8)[t37,0] = 0x00\n
        v26 = v35 + 1;\n
    }\n
    cgc_free(v12);\n
    *(a1) = a0;\n
    v14 = v11;\n
    return v14;\n
}\n
", "4207279:sub_4032af": null, "4207280:cgc_cfft": null, "4208062:sub_4035be": null, "4208064:cgc_load_file": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_load_file(unsigned int *v2)\n
{\n
    unsigned int *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (*(v2))\n
    {\n
        v0 = v2;\n
        cgc_clear_track();\n
    }\n
    *(v2) = cgc_init_track();\n
    return v2;\n
}\n
", "4208136:sub_403608": null, "4208144:cgc_quit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_quit(unsigned int *v2)\n
{\n
    unsigned int *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    if (*(v3))\n
    {\n
        v0 = v2;\n
        v3 = cgc_clear_track();\n
    }\n
    return v3;\n
}\n
", "4208201:sub_403649": null, "4208208:cgc_select_option": "typedef struct struct_0 {\n
    char padding_0[328];\n
    unsigned int field_148;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_select_option()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int *v8;  // [bp+0x4]\n
    unsigned int v15;  // ebx\n
\n
    v6 = v15;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = *(v8);\n
    v3 = cgc_readopt();\n
    if (v3 != 255)\n
    {\n
        if (v4)\n
        {\n
            v0 = v3 - 49;\n
            if (v0 > 8)\n
            {\n
                v5 = -8;\n
                return;\n
            }\n
            goto *(((stack_base)[24] + (stack_base)[32] * 4 - 8236)) + (stack_base)[24];\n
        }\n
        else\n
        {\n
            v1 = v3;\n
            if (v1 == 49)\n
            {\n
                cgc_load_file(v8);\n
                if (!(!*(v8)))\n
                    goto LABEL_0x40386c;\n
                v5 = -2;\n
                return;\n
            }\n
            else if (v1 != 50)\n
            {\n
                v5 = -8;\n
                return;\n
            }\n
            else\n
            {\n
                cgc_quit(v8);\n
                v5 = 0;\n
                return;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (v4)\n
        {\n
            v5 = -32;\n
            return;\n
        }\n
        v5 = -0x10;\n
        return;\n
    }\n
}\n
", "4208764:sub_40387c": null, "4208768:cgc_readopt": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readopt(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    char v4;  // [bp-0xb]\n
    char v5;  // [bp-0xa]\n
    char v6;  // [bp-0x9]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 10;\n
    v0 = &v2;\n
    if (!cgc_receive(v8, &v5, 1) && *(&v2))\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v8, &v4, 1) && *(&v2))\n
        {\n
            if (v4 != v3)\n
            {\n
                while (true)\n
                {\n
                    if (v4 == v3)\n
                    {\n
                        v6 = 255;\n
                        return v6;\n
                    }\n
                    v0 = &v2;\n
                    if (cgc_receive(v8, &v4, 1))\n
                        break;\n
                    if (!*(&v2))\n
                        break;\n
                }\n
                v6 = 255;\n
                return v6;\n
            }\n
            else\n
            {\n
                v6 = v5;\n
                return v6;\n
            }\n
        }\n
        v6 = 255;\n
        return v6;\n
    }\n
    v6 = 255;\n
    return v6;\n
}\n
", "4209061:sub_4039a5": null, "4209072:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 1;\n
    do\n
    {\n
        cgc_print_error_code();\n
        cgc_print_menu();\n
        v1 = cgc_select_option();\n
    } while (v1);\n
    cgc_printf(v0 - 8200);\n
    return 0;\n
}\n
", "4209201:sub_403a31": null, "4209216:cgc_print_error_code": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_error_code(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v1;\n
    if (v1 == -2)\n
        v2 = cgc_printf(v0 - 8188);\n
    if (v1 == -0x4)\n
        v2 = cgc_printf(v0 - 8140);\n
    if (v1 == -8)\n
        v2 = cgc_printf(v0 - 8079);\n
    if (v1 == -0x10)\n
        v2 = cgc_printf(v0 - 8037);\n
    if (v1 == -32)\n
        v2 = cgc_printf(v0 - 7998);\n
    return v2;\n
}\n
", "4209382:sub_403ae6": null, "4209392:cgc_print_menu": "typedef struct struct_0 {\n
    char padding_0[328];\n
    unsigned int field_148;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[22];\n
    unsigned short field_16;\n
    unsigned int field_18;\n
    char padding_1c[6];\n
    unsigned short field_22;\n
    char padding_24[4];\n
    unsigned int field_28;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_menu(struct_1 *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v3)\n
    {\n
        cgc_printf(&v2[23].padding_0[302]);\n
        cgc_printf(&v2[23].padding_0[288]);\n
        v4 = cgc_printf(&v2[23].padding_0[278]);\n
        return v4;\n
    }\n
    cgc_printf(&v2[23].padding_0[258]);\n
    cgc_printf(&v2[23].padding_0[240]);\n
    cgc_printf(&v2[23].padding_0[220]);\n
    cgc_printf(&v2[23].padding_0[202]);\n
    cgc_printf(&v2[23].padding_0[181]);\n
    cgc_printf(&v2[23].padding_0[154]);\n
    cgc_printf(&v2[23].padding_0[126]);\n
    cgc_printf(&v2[23].padding_0[106]);\n
    cgc_printf(&v2[23].padding_0[61]);\n
    cgc_printf(&v2[23].padding_0[51]);\n
    v0 = v3->field_18;\n
    v1 = v3->field_22;\n
    cgc_printf(&v2[23].padding_0[33]);\n
    if (v3->field_16 != 1)\n
        cgc_printf(&v2[23].padding_0[2]);\n
    else\n
        cgc_printf(&v2[23].padding_0[10]);\n
    v0 = v3->field_28;\n
    cgc_printf(&v2[22].padding_0[324]);\n
    cgc_printf(&v2[22].padding_0[310]);\n
    if (!v2->field_148)\n
    {\n
        cgc_printf(&v2[22].padding_0[286]);\n
    }\n
    else if (v2->field_148 == 1)\n
    {\n
        cgc_printf(&v2[22].padding_0[281]);\n
    }\n
    else if (v2->field_148 == 2)\n
    {\n
        cgc_printf(&v2[22].padding_0[272]);\n
    }\n
    v0 = cgc_get_vis_multiplier();\n
    v4 = cgc_printf(&v2[22].padding_0[262]);\n
    return v4;\n
}\n
", "4209944:sub_403d18": null, "4209952:cgc_set_vis_multiplier": "typedef struct struct_0 {\n
    char padding_0[332];\n
    unsigned int field_14c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_set_vis_multiplier(char v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0xc]\n
    struct_0 *v3;  // ebx\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v2 <= 57 && v2 >= 48)\n
    {\n
        v3 = v1;\n
        v3->field_14c = v2 - 48;\n
        v0 = v2 - 48;\n
        v4 = cgc_printf(&v3[22].padding_0[104]);\n
        return v4;\n
    }\n
    v4 = cgc_printf(&v1[22].padding_0[82]);\n
    return v4;\n
}\n
", "4210072:sub_403d98": null, "4210080:cgc_get_vis_multiplier": "extern unsigned int vis_multiplier;\n
\n
int cgc_get_vis_multiplier()\n
{\n
    return vis_multiplier;\n
}\n
", "4210103:sub_403db7": null, "4210112:cgc_validate_header": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    unsigned short field_14;\n
    unsigned short field_16;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned short field_20;\n
    unsigned short field_22;\n
    char padding_24[4];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_validate_header(struct_0 *v9)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x14]\n
    char *v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = \"FFIR\";\n
    v5 = \"UWFC\";\n
    v4 = \"cgc \";\n
    v3 = \"data\";\n
    if (cgc_memcmp(v9, v6, 4))\n
    {\n
        v7 = -2;\n
        return v7;\n
    }\n
    else if (v9->field_4 == v9->field_10 + v9->field_28 + 20)\n
    {\n
        v2 = &v9->padding_8[0];\n
        if (cgc_memcmp(v2, v5, 4))\n
        {\n
            v7 = -8;\n
            return v7;\n
        }\n
        else if (cgc_memcmp(&v9->padding_8[4], v4, 4))\n
        {\n
            v7 = -0x10;\n
            return v7;\n
        }\n
        else if (v9->field_14 == 1)\n
        {\n
            if (v9->field_16 != 1 && v9->field_16 != 2)\n
            {\n
                v7 = -64;\n
                return v7;\n
            }\n
            if (v9->field_18 != 8000 && v9->field_18 != 11025 && v9->field_18 != 16000 && v9->field_18 != 22050 && v9->field_18 != 0x7d00 && v9->field_18 != 44100 && v9->field_18 != 48000 && v9->field_18 != 4000)\n
            {\n
                v7 = -128;\n
                return v7;\n
            }\n
            if (v9->field_1c != v9->field_22 * v9->field_16 * v9->field_18 >> 3)\n
            {\n
                v7 = -0x100;\n
                return v7;\n
            }\n
            v0 = v9->field_20;\n
            v11 = v9->field_22 * v9->field_16;\n
            if (v0 != (v11 >> 31 CONCAT v11) /m 8)\n
            {\n
                v7 = -0x100;\n
                return v7;\n
            }\n
            if (v9->field_22 != 8 && v9->field_22 != 16)\n
            {\n
                v7 = -0x400;\n
                return v7;\n
            }\n
            if (cgc_memcmp(&v9->padding_24, v3, 4))\n
            {\n
                v7 = -0x800;\n
                return v7;\n
            }\n
            v7 = v9->field_28;\n
            return v7;\n
        }\n
        else\n
        {\n
            v7 = -32;\n
            return v7;\n
        }\n
    }\n
    else\n
    {\n
        v7 = -0x4;\n
        return v7;\n
    }\n
}\n
", "4210823:sub_404087": null, "4210832:cgc_init_track": "typedef struct struct_1 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
    unsigned int field_2c[2];\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_init_track()\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_1 *v6;  // [bp-0x10]\n
    unsigned int v7[12];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v6 = cgc_malloc(48);\n
    if (!v6)\n
    {\n
        v7[0] = 0;\n
        return v7;\n
    }\n
    v0 = &v4;\n
    if (!cgc_receive(0, v6, 44) && v4 == 44)\n
    {\n
        v5 = cgc_validate_header(v6);\n
        if (v5 < 0)\n
        {\n
            cgc_free(v6);\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (!v5)\n
        {\n
            v6->field_2c = 0;\n
        }\n
        else\n
        {\n
            v6->field_2c = cgc_malloc(v5);\n
            if (!v6->field_2c)\n
            {\n
                cgc_free(v6);\n
                v7 = 0;\n
                return v7;\n
            }\n
        }\n
        while (true)\n
        {\n
            v0 = &v4;\n
            v1 = 0;\n
            if (!cgc_receive(0, (v6->field_2c + v3), v6->field_28 - v3))\n
                v1 = v3 + v4 != v6->field_28;\n
            if (!(v1 & 1))\n
            {\n
                v7 = v6;\n
                return v7;\n
            }\n
            if (!v4)\n
            {\n
                cgc_free(v6->field_2c);\n
                cgc_free(v6);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v3 = v4 + v3;\n
        }\n
    }\n
    cgc_free(v6);\n
    v7 = 0;\n
    return v7;\n
}\n
", "4211327:sub_40427f": null, "4211328:cgc_clear_track": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[40];\n
    unsigned int field_2c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char padding_4[40];\n
    unsigned int field_2c[2];\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear_track(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_1 *v1;  // [bp-0xc]\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2->field_0;\n
    v1 = &v3->field_0;\n
    if (!v1)\n
        return v2->field_0;\n
    if (v1->field_2c)\n
        cgc_free(v1->field_2c);\n
    if (v1)\n
        cgc_free(v1);\n
    v3 = v2;\n
    *(v3) = 0;\n
    return v2;\n
}\n
", "4211445:sub_4042f5": null, "4211456:cgc_wave_vis": "typedef struct struct_0 {\n
    char padding_0[22];\n
    unsigned short field_16;\n
    unsigned int field_18;\n
    char padding_1c[4];\n
    unsigned short field_20;\n
    char padding_22[6];\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wave_vis(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v5->field_2c;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v1 = v3;\n
        if (v1 >= (0 CONCAT v5->field_28) /m v5->field_20)\n
            break;\n
        if (!(0 CONCAT v3) /m v5->field_18 >> 32)\n
            cgc_slow_vis();\n
        if (v5->field_16 == 2)\n
        {\n
            v0 = v4;\n
            cgc_plot_stereo_wave(v5);\n
        }\n
        else if (v5->field_16 == 1)\n
        {\n
            v0 = v4;\n
            cgc_plot_mono_wave(v5);\n
        }\n
        v3 += 1;\n
        v4 = v5->field_20 + v4;\n
    }\n
    return cgc_printf(v2 - 7429);\n
}\n
", "4211695:sub_4043ef": null, "4211696:cgc_plot_stereo_wave": "typedef struct struct_1 {\n
    char padding_0[34];\n
    unsigned short field_22;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_plot_stereo_wave(struct_1 *v31, struct_0 *a0)\n
{\n
    char v0[83];  // [bp-0xdc]\n
    unsigned int v1;  // [bp-0xd8]\n
    unsigned int v2;  // [bp-0xd4]\n
    char v3;  // [bp-0xcc]\n
    char v4;  // [bp-0x6c]\n
    char v5[83];  // [bp-0x68]\n
    unsigned int v6;  // [bp-0x64]\n
    unsigned short v7;  // [bp-0x60]\n
    unsigned short v8;  // [bp-0x5e]\n
    unsigned short v9;  // [bp-0x5c]\n
    unsigned short v10;  // [bp-0x5a]\n
    unsigned int v11;  // [bp-0x58]\n
    char v12[83];  // [bp-0x54]\n
    char v13[83];  // [bp-0x50]\n
    unsigned int v14;  // [bp-0x4c]\n
    char v15[83];  // [bp-0x48]\n
    unsigned int v16;  // [bp-0x44]\n
    unsigned int v17;  // [bp-0x40]\n
    unsigned int v18;  // [bp-0x3c]\n
    unsigned int v19;  // [bp-0x38]\n
    unsigned int v20;  // [bp-0x34]\n
    unsigned int v21;  // [bp-0x30]\n
    unsigned int v22;  // [bp-0x2c]\n
    unsigned int v23;  // [bp-0x28]\n
    char v24[83];  // [bp-0x24]\n
    unsigned int v25;  // [bp-0x20]\n
    void* v26;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v27;  // [bp-0x18]\n
    void* v28;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v29;  // [bp-0x10]\n
    unsigned int v30;  // [bp+0x0]\n
    unsigned int v32;  // [bp+0xc]\n
    char v33[83];  // eax\n
    unsigned int v35;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v29 = 0;\n
    v28 = 0;\n
    v27 = 0;\n
    v26 = 0;\n
    if (v31->field_22 == 8)\n
    {\n
        v16 = a0->field_0 - 127;\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t11,1] = t12\n
        [D] PutI(136:I8x8)[t11,1] = 0x01\n
        [D] PutI(72:F64x8)[t31,0] = t35\n
        [D] PutI(136:I8x8)[t31,0] = 0x01\n
        [D] PutI(72:F64x8)[t31,1] = t28\n
        [D] PutI(136:I8x8)[t31,1] = 0x01\n
        v28 = ([D] GetI(136:I8x8)[t51,0] ? [D] GetI(72:F64x8)[t51,0] : nan);\n
        [D] PutI(136:I8x8)[t51,0] = 0x00\n
        v17 = (a0->padding_1 - 127);\n
        [D] PutI(72:F64x8)[t70,0] = t73\n
        [D] PutI(136:I8x8)[t70,0] = 0x01\n
        [D] PutI(72:F64x8)[t81,1] = t82\n
        [D] PutI(136:I8x8)[t81,1] = 0x01\n
        [D] PutI(136:I8x8)[t81,0] = 0x00\n
        v26 = ([D] GetI(136:I8x8)[t106,0] ? [D] GetI(72:F64x8)[t106,0] : nan);\n
        [D] PutI(136:I8x8)[t106,0] = 0x00\n
    }\n
    else\n
    {\n
        v18 = *(&a0->field_0);\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t8,1] = t9\n
        [D] PutI(136:I8x8)[t8,1] = 0x01\n
        [D] PutI(72:F64x8)[t28,0] = t32\n
        [D] PutI(136:I8x8)[t28,0] = 0x01\n
        [D] PutI(72:F64x8)[t28,1] = t25\n
        [D] PutI(136:I8x8)[t28,1] = 0x01\n
        v28 = ([D] GetI(136:I8x8)[t48,0] ? [D] GetI(72:F64x8)[t48,0] : nan);\n
        [D] PutI(136:I8x8)[t48,0] = 0x00\n
        v19 = a0->field_2;\n
        [D] PutI(72:F64x8)[t67,0] = t70\n
        [D] PutI(136:I8x8)[t67,0] = 0x01\n
        [D] PutI(72:F64x8)[t78,1] = t79\n
        [D] PutI(136:I8x8)[t78,1] = 0x01\n
        [D] PutI(136:I8x8)[t78,0] = 0x00\n
        v26 = ([D] GetI(136:I8x8)[t103,0] ? [D] GetI(72:F64x8)[t103,0] : nan);\n
        [D] PutI(136:I8x8)[t103,0] = 0x00\n
    }\n
    v25 = 83;\n
    *(&v24[0]) = 41;\n
    v33 = v24;\n
    v23 = &v33[(&v33[2] >> 31) + 2] >> 1;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v11 = v23;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t51,1] = t52\n
    [D] PutI(136:I8x8)[t51,1] = 0x01\n
    [D] PutI(72:F64x8)[t68,1] = t69\n
    [D] PutI(136:I8x8)[t68,1] = 0x01\n
    [D] PutI(136:I8x8)[t68,0] = 0x00\n
    [D] PutI(72:F64x8)[t90,0] = t93\n
    [D] PutI(136:I8x8)[t90,0] = 0x01\n
    [D] PutI(72:F64x8)[t101,1] = t102\n
    [D] PutI(136:I8x8)[t101,1] = 0x01\n
    [D] PutI(136:I8x8)[t101,0] = 0x00\n
    v10 = [D] x86g_create_fpucw(fpround<4>);\n
    v9 = v10 | 0xc00;\n
    *(&v12[0]) = ([D] GetI(136:I8x8)[t147,0] ? [D] GetI(72:F64x8)[t147,0] : nan);\n
    [D] PutI(136:I8x8)[t147,0] = 0x00\n
    v22 = v12;\n
    [D] PutI(72:F64x8)[t172,0] = t175\n
    [D] PutI(136:I8x8)[t172,0] = 0x01\n
    v14 = v23;\n
    [D] PutI(72:F64x8)[t190,0] = t193\n
    [D] PutI(136:I8x8)[t190,0] = 0x01\n
    [D] PutI(72:F64x8)[t201,1] = t202\n
    [D] PutI(136:I8x8)[t201,1] = 0x01\n
    [D] PutI(72:F64x8)[t218,1] = t219\n
    [D] PutI(136:I8x8)[t218,1] = 0x01\n
    [D] PutI(136:I8x8)[t218,0] = 0x00\n
    *(&v13[0]) = v24;\n
    [D] PutI(72:F64x8)[t246,0] = t249\n
    [D] PutI(136:I8x8)[t246,0] = 0x01\n
    [D] PutI(72:F64x8)[t257,1] = t258\n
    [D] PutI(136:I8x8)[t257,1] = 0x01\n
    [D] PutI(136:I8x8)[t257,0] = 0x00\n
    [D] PutI(72:F64x8)[t279,0] = t282\n
    [D] PutI(136:I8x8)[t279,0] = 0x01\n
    [D] PutI(72:F64x8)[t290,1] = t291\n
    [D] PutI(136:I8x8)[t290,1] = 0x01\n
    [D] PutI(136:I8x8)[t290,0] = 0x00\n
    v8 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-90, size=2, endness=Iend_LE)))));\n
    v7 = v8 | 0xc00;\n
    *(&v15[0]) = ([D] GetI(136:I8x8)[t336,0] ? [D] GetI(72:F64x8)[t336,0] : nan);\n
    [D] PutI(136:I8x8)[t336,0] = 0x00\n
    v21 = v15;\n
    v20 = &v4;\n
    *(&v5[0]) = &v3;\n
    *(&v0[0]) = &v3;\n
    v1 = 32;\n
    v2 = 83;\n
    cgc_memset(v31, a0, v32);\n
    v35 = v5;\n
    *((v35 + 82)) = 0;\n
    v24[v35] = 124;\n
    *((v35 + v22)) = 42;\n
    *((v35 + v21)) = 42;\n
    v30 = v6 - 7401;\n
    *(&v31[0]) = v35;\n
    cgc_printf(v6 - 7401);\n
    return v20;\n
}\n
", "4212140:sub_4045ac": null, "4212144:cgc_plot_mono_wave": "typedef struct struct_0 {\n
    char padding_0[34];\n
    unsigned short field_22;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_plot_mono_wave(struct_0 *v20, char *a0)\n
{\n
    char v0[42];  // [bp-0x8c]\n
    unsigned int v1;  // [bp-0x88]\n
    unsigned int v2;  // [bp-0x84]\n
    char v3;  // [bp-0x7c]\n
    char v4;  // [bp-0x4c]\n
    char v5[42];  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x3c]\n
    unsigned short v7;  // [bp-0x38]\n
    unsigned short v8;  // [bp-0x36]\n
    unsigned int v9;  // [bp-0x34]\n
    char v10[42];  // [bp-0x30]\n
    unsigned int v11;  // [bp-0x2c]\n
    unsigned int v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x24]\n
    char v14[42];  // [bp-0x20]\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    void* v17;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v18;  // [bp-0x10]\n
    unsigned int v19;  // [bp+0x0]\n
    unsigned int v21;  // [bp+0xc]\n
    unsigned int v22;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v18 = 0;\n
    v17 = 0;\n
    if (v20->field_22 == 8)\n
    {\n
        v11 = *(a0) - 127;\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t1,1] = t2\n
        [D] PutI(136:I8x8)[t1,1] = 0x01\n
        [D] PutI(136:I8x8)[t1,0] = 0x00\n
        v17 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
        [D] PutI(136:I8x8)[t26,0] = 0x00\n
    }\n
    else\n
    {\n
        v12 = *(&a0);\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t11,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t1,1] = t2\n
        [D] PutI(136:I8x8)[t1,1] = 0x01\n
        [D] PutI(136:I8x8)[t1,0] = 0x00\n
        v17 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
        [D] PutI(136:I8x8)[t26,0] = 0x00\n
    }\n
    v16 = 42;\n
    v15 = 20;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v9 = v15;\n
    if ([D] GetI(136:I8x8)[t11,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t28,1] = t29\n
    [D] PutI(136:I8x8)[t28,1] = 0x01\n
    [D] PutI(72:F64x8)[t45,1] = t46\n
    [D] PutI(136:I8x8)[t45,1] = 0x01\n
    [D] PutI(136:I8x8)[t45,0] = 0x00\n
    [D] PutI(72:F64x8)[t67,0] = t70\n
    [D] PutI(136:I8x8)[t67,0] = 0x01\n
    [D] PutI(72:F64x8)[t78,1] = t79\n
    [D] PutI(136:I8x8)[t78,1] = 0x01\n
    [D] PutI(136:I8x8)[t78,0] = 0x00\n
    v8 = [D] x86g_create_fpucw(fpround<4>);\n
    v7 = v8 | 0xc00;\n
    *(&v10[0]) = ([D] GetI(136:I8x8)[t124,0] ? [D] GetI(72:F64x8)[t124,0] : nan);\n
    [D] PutI(136:I8x8)[t124,0] = 0x00\n
    *(&v14[0]) = v10;\n
    v13 = &v4;\n
    *(&v5[0]) = &v3;\n
    *(&v0[0]) = &v3;\n
    v1 = 32;\n
    v2 = 42;\n
    cgc_memset(v20, a0, v21);\n
    v22 = v5;\n
    *((v22 + 41)) = 0;\n
    v14[v22] = 42;\n
    v19 = v6 - 7401;\n
    *(&v20[0]) = v22;\n
    cgc_printf(v6 - 7401);\n
    return v13;\n
}\n
", "4212431:sub_4046cf": null, "4212432:cgc_eq_vis": "typedef struct struct_2 {\n
    char padding_0[22];\n
    unsigned short field_16;\n
    unsigned int field_18;\n
    char padding_1c[4];\n
    unsigned short field_20;\n
    unsigned short field_22;\n
    char padding_24[4];\n
    unsigned int field_28;\n
    struct struct_1 *field_2c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_eq_vis(struct_2 *v32, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x180]\n
    unsigned int v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x16c]\n
    unsigned int *v3;  // [bp-0x168]\n
    char v4;  // [bp-0x161]\n
    unsigned int *v5;  // [bp-0x160]\n
    char v6;  // [bp-0x159]\n
    unsigned int v7;  // [bp-0x158]\n
    char v8;  // [bp-0x151]\n
    unsigned int v9;  // [bp-0x150]\n
    unsigned int v10;  // [bp-0x14c]\n
    unsigned int v11;  // [bp-0x148]\n
    unsigned int v12;  // [bp-0x144]\n
    unsigned int v13;  // [bp-0x140]\n
    unsigned int v14;  // [bp-0x13c]\n
    unsigned int *v15;  // [bp-0x138], Other Possible Types: unsigned int\n
    char v16;  // [bp-0x134]\n
    char v17;  // [bp-0x130]\n
    char v18;  // [bp-0x12c]\n
    char v19;  // [bp-0x128]\n
    char v20;  // [bp-0x124]\n
    unsigned long v21;  // [bp-0x44]\n
    unsigned long v22;  // [bp-0x3c]\n
    unsigned int *v23;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int *v24;  // [bp-0x2c]\n
    struct_0 *v25;  // [bp-0x28]\n
    struct_0 *v26;  // [bp-0x24]\n
    struct_1 *v27;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0x1c]\n
    struct_0 *v29;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v30;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v31;  // [bp-0x8]\n
    unsigned int v33;  // ebx\n
    struct_0 *v34;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v35;  // eax\n
    struct_0 *v36;  // eax\n
    unsigned int v38;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    struct_0 *v62;  // eax\n
    unsigned int v63;  // ecx\n
    unsigned int v64;  // ftop\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    struct_0 *v67;  // eax\n
    unsigned int v68;  // ecx\n
    unsigned int *v69;  // eax\n
    unsigned int v70;  // ecx\n
    unsigned int *v71;  // eax\n
    unsigned int *v72;  // ecx\n
    unsigned int *v73;  // eax\n
    unsigned int v74;  // ecx\n
    unsigned int *v75;  // eax\n
    unsigned int *v76;  // ecx\n
    unsigned int *v77;  // eax\n
    unsigned int v78;  // ecx\n
    unsigned int *v79;  // eax\n
    unsigned int *v80;  // ecx\n
    unsigned int *v81;  // eax\n
    unsigned int v82;  // ecx\n
    unsigned int *v83;  // eax\n
    unsigned int *v84;  // ecx\n
    struct_0 *v85;  // eax\n
    struct_0 *v86;  // eax\n
    struct_0 *v88;  // eax\n
\n
    v31 = v33;\n
    v10 = &_GLOBAL_OFFSET_TABLE_;\n
    v27 = v32->field_2c;\n
    v24 = 0;\n
    v23 = 0;\n
    v34 = cgc_malloc(v32->field_18 * 8);\n
    v26 = v34;\n
    if (!v26)\n
        return v34;\n
    if (v32->field_16 == 2)\n
    {\n
        v34 = cgc_malloc(v32->field_18 * 8);\n
        v25 = v34;\n
        if (!v25)\n
            return v34;\n
    }\n
    v30 = 0;\n
    while (true)\n
    {\n
        v9 = v30;\n
        if (v9 >= (0 CONCAT v32->field_28) /m v32->field_20)\n
            break;\n
        for (v29 = 0; v29 < 12; v29 += 1)\n
        {\n
            v35 = v29 * 5;\n
            *((&v19 + 0x4 * v35)) = 0;\n
            *((&v18 + 0x4 * v35)) = 0;\n
            v36 = v29 * 5;\n
            *((&v17 + 0x4 * v36)) = 0;\n
            *((&v16 + 0x4 * v36)) = 0;\n
            *(&(&v20)[20 * v29]) = 0;\n
        }\n
        v29 = 0;\n
        while (true)\n
        {\n
            v8 = 0;\n
            if (v29 < v32->field_18)\n
            {\n
                v7 = v30;\n
                v8 = v7 < (0 CONCAT v32->field_28) /m v32->field_20;\n
            }\n
            if (!(v8 & 1))\n
                break;\n
            if (v32->field_22 != 8)\n
            {\n
                v14 = *(v27);\n
                v40 = v64 - 1;\n
                if ([D] GetI(136:I8x8)[t16,0])\n
                {\n
                    v42 = v40 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v42 = v40 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v44 = v42 - 1;\n
                if ([D] GetI(136:I8x8)[t16,0])\n
                {\n
                    v46 = v44 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v46 = v44 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t6,1] = t7\n
                [D] PutI(136:I8x8)[t6,1] = 0x01\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
                v49 = v46 + 1;\n
                v22 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
                [D] PutI(136:I8x8)[t31,0] = 0x00\n
                v48 = v49 + 1;\n
                if (v32->field_16 == 2)\n
                {\n
                    v13 = v27->field_2;\n
                    v51 = v48 - 1;\n
                    if (![D] GetI(136:I8x8)[t16,0])\n
                    {\n
                        v53 = v51 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v53 = v51 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v55 = v53 - 1;\n
                    if ([D] GetI(136:I8x8)[t16,0])\n
                    {\n
                        v57 = v55 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v57 = v55 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,1] = t2\n
                    [D] PutI(136:I8x8)[t1,1] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v59 = v57 + 1;\n
                    v21 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                    [D] PutI(136:I8x8)[t26,0] = 0x00\n
                    v48 = v59 + 1;\n
                }\n
            }\n
            else\n
            {\n
                v12 = *(v27) - 127;\n
                v38 = v64 - 1;\n
                if ([D] GetI(136:I8x8)[t16,0])\n
                {\n
                    v41 = v38 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v41 = v38 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v43 = v41 - 1;\n
                if ([D] GetI(136:I8x8)[t16,0])\n
                {\n
                    v45 = v43 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v45 = v43 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t6,1] = t7\n
                [D] PutI(136:I8x8)[t6,1] = 0x01\n
                [D] PutI(136:I8x8)[t6,0] = 0x00\n
                v47 = v45 + 1;\n
                v22 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
                [D] PutI(136:I8x8)[t31,0] = 0x00\n
                v48 = v47 + 1;\n
                if (v32->field_16 == 2)\n
                {\n
                    v11 = *((v27 + 1)) - 127;\n
                    v50 = v48 - 1;\n
                    if (![D] GetI(136:I8x8)[t16,0])\n
                    {\n
                        v52 = v50 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v52 = v50 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v54 = v52 - 1;\n
                    if ([D] GetI(136:I8x8)[t16,0])\n
                    {\n
                        v56 = v54 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v56 = v54 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,1] = t2\n
                    [D] PutI(136:I8x8)[t1,1] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v58 = v56 + 1;\n
                    v21 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                    [D] PutI(136:I8x8)[t26,0] = 0x00\n
                    v48 = v58 + 1;\n
                }\n
            }\n
            v60 = v48 - 1;\n
            if (![D] GetI(136:I8x8)[t16,0])\n
            {\n
                v61 = v60 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v61 = v60 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v62 = v26;\n
            v63 = v29;\n
            if (![D] GetI(136:I8x8)[t16,0])\n
            {\n
                *(&v62[8 * v63]) = nan;\n
                [D] PutI(136:I8x8)[t8,0] = 0x00\n
                v64 = v61 + 1;\n
            }\n
            else\n
            {\n
                *(&v62[8 * v63]) = [D] GetI(72:F64x8)[t8,0];\n
                [D] PutI(136:I8x8)[t8,0] = 0x00\n
                v64 = v61 + 1;\n
            }\n
            if (v32->field_16 == 2)\n
            {\n
                v65 = v64 - 1;\n
                if ([D] GetI(136:I8x8)[t16,0])\n
                {\n
                    v66 = v65 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v66 = v65 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v67 = v25;\n
                v68 = v29;\n
                if (![D] GetI(136:I8x8)[t16,0])\n
                {\n
                    *(&v67[8 * v68]) = nan;\n
                    [D] PutI(136:I8x8)[t8,0] = 0x00\n
                    v64 = v66 + 1;\n
                }\n
                else\n
                {\n
                    *(&v67[8 * v68]) = [D] GetI(72:F64x8)[t8,0];\n
                    [D] PutI(136:I8x8)[t8,0] = 0x00\n
                    v64 = v66 + 1;\n
                }\n
            }\n
            v29 += 1;\n
            v30 += 1;\n
            v27 = v32->field_20 + v27;\n
        }\n
        v24 = cgc_dft(v26, v29, &v28);\n
        if (v32->field_16 == 2)\n
            v23 = cgc_dft(v25, v29, &v28);\n
        if (a1 == 1)\n
        {\n
            v15 = (0 CONCAT v32->field_18 * 4) /m 20;\n
            while (true)\n
            {\n
                v6 = 0;\n
                if (v15 < v29)\n
                {\n
                    v5 = v15;\n
                    v6 = v5 < (0 CONCAT v32->field_18 * 16) /m 20;\n
                }\n
                if (!(v6 & 1))\n
                    break;\n
                v69 = v24;\n
                v70 = v15 * 16;\n
                *((4 + v69 + v70)) = 0;\n
                *((v69 + v70)) = 0;\n
                v71 = v24;\n
                v72 = v15 * 16;\n
                *((v71 + v72 + 12)) = 0;\n
                *((v71 + v72 + 8)) = 0;\n
                if (v32->field_16 == 2)\n
                {\n
                    v73 = v23;\n
                    v74 = v15 * 16;\n
                    *((4 + v73 + v74)) = 0;\n
                    *((v73 + v74)) = 0;\n
                    v75 = v23;\n
                    v76 = v15 * 16;\n
                    *((v75 + v76 + 12)) = 0;\n
                    *((v75 + v76 + 8)) = 0;\n
                }\n
                v15 = v15 + 1;\n
            }\n
        }\n
        else if (a1 == 2)\n
        {\n
            v15 = 0;\n
            while (true)\n
            {\n
                v4 = 0;\n
                if (v15 < (0 CONCAT v32->field_18 << 1) /m 20)\n
                    v4 = v15 < v29;\n
                if (!(v4 & 1))\n
                    break;\n
                v77 = v24;\n
                v78 = v15 * 16;\n
                *((4 + v77 + v78)) = 0;\n
                *((v77 + v78)) = 0;\n
                v79 = v24;\n
                v80 = v15 * 16;\n
                *((v79 + v80 + 12)) = 0;\n
                *((v79 + v80 + 8)) = 0;\n
                if (v32->field_16 == 2)\n
                {\n
                    v81 = v23;\n
                    v82 = v15 * 16;\n
                    *((4 + v81 + v82)) = 0;\n
                    *((v81 + v82)) = 0;\n
                    v83 = v23;\n
                    v84 = v15 * 16;\n
                    *((v83 + v84 + 12)) = 0;\n
                    *((v83 + v84 + 8)) = 0;\n
                }\n
                v15 = v15 + 1;\n
            }\n
            v15 = (0 CONCAT v32->field_18 * 18) /m 20;\n
            if ((Not (Not (Load(addr=stack_base-312, size=4, endness=Iend_LE) <s Load(addr=stack_base-24, size=4, endness=Iend_LE))))) { Goto None } else { Goto None }\n
        }\n
        v15 = 0;\n
        while (true)\n
        {\n
            v3 = v15;\n
            v85 = v29;\n
            if (v3 >= (v85 >> 31 CONCAT v85) /m 2)\n
                break;\n
            v2 = v24 + 0x10 * v15;\n
            v86 = v29;\n
            v0 = (v86 >> 31 CONCAT v86) /m 2;\n
            cgc_add_to_bucket(&v16, v2, v15);\n
            if (v32->field_16 == 2)\n
            {\n
                v1 = v23 + v15 * 16;\n
                v88 = v29;\n
                v0 = (v88 >> 31 CONCAT v88) /m 2;\n
                cgc_add_to_bucket(&v16, v1, v15);\n
            }\n
            v15 = v15 + 1;\n
        }\n
        cgc_vis_buckets(&v16);\n
        cgc_free(v24);\n
        if (v32->field_16 == 2)\n
            cgc_free(v23);\n
    }\n
    v34 = cgc_printf(v10 - 7429);\n
    return v34;\n
}\n
", "4214142:sub_404d7e": null, "4214144:cgc_add_to_bucket": null, "4214427:sub_404e9b": null, "4214432:cgc_vis_buckets": "typedef struct struct_1 {\n
    char padding_0[164];\n
    unsigned int field_a4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vis_buckets(unsigned int v19, unsigned int a0)\n
{\n
    char v0;  // [bp-0xac]\n
    unsigned int v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    unsigned short v3;  // [bp-0x98]\n
    unsigned short v4;  // [bp-0x96]\n
    unsigned short v5;  // [bp-0x94]\n
    unsigned short v6;  // [bp-0x92]\n
    unsigned int v7;  // [bp-0x90]\n
    struct_0 *v8;  // [bp-0x8c]\n
    char v9;  // [bp-0x87]\n
    struct_0 *v10;  // [bp-0x2c]\n
    unsigned int v11;  // [bp-0x28]\n
    void* v12;  // [bp-0x24], Other Possible Types: unsigned long\n
    void* v13;  // [bp-0x20]\n
    unsigned int v14;  // [bp-0x18]\n
    struct_1 *v15;  // [bp-0x14]\n
    unsigned int v16;  // [bp-0x10]\n
    void* v17;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v18;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v30;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
\n
    v18 = v20;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v16 = 90;\n
    v15 = &v0;\n
    cgc_slow_vis();\n
    if (a0 == 1)\n
    {\n
        for (v14 = 90; v14 >= 0; v14 -= 1)\n
        {\n
            cgc_printf(v2 - 7397);\n
            for (v17 = 0; v17 < 12; v17 += 1)\n
            {\n
                if (!v14)\n
                {\n
                    cgc_printf(v2 - 7393);\n
                }\n
                else\n
                {\n
                    v1 = v14;\n
                    v22 = ftop<4> - 1;\n
                    if ([D] GetI(136:I8x8)[t31,0])\n
                    {\n
                        v23 = v22 - 1;\n
                        [D] PutI(72:F64x8)[t6,0] = t9\n
                        [D] PutI(136:I8x8)[t6,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v22 - 1;\n
                        [D] PutI(72:F64x8)[t6,0] = t9\n
                        [D] PutI(136:I8x8)[t6,0] = 0x01\n
                    }\n
                    [D] PutI(136:I8x8)[t6,0] = 0x00\n
                    v24 = v23 + 1;\n
                    cgc_log();\n
                    [D] PutI(72:F64x8)[t29,0] = t32\n
                    [D] PutI(136:I8x8)[t29,0] = 0x01\n
                    [D] PutI(72:F64x8)[t38,0] = t39\n
                    [D] PutI(136:I8x8)[t38,0] = 0x01\n
                    [D] PutI(136:I8x8)[t38,0] = 0x00\n
                    v26 = v24 - 1 + 1;\n
                    v6 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-146, size=2, endness=Iend_LE)))));\n
                    v5 = v6 | 0xc00;\n
                    v7 = ([D] GetI(136:I8x8)[t76,0] ? [D] GetI(72:F64x8)[t76,0] : nan);\n
                    [D] PutI(136:I8x8)[t76,0] = 0x00\n
                    v27 = v26 + 1;\n
                    if (v1 <= v7)\n
                    {\n
                        cgc_printf(v2 - 7385);\n
                    }\n
                    else\n
                    {\n
                        if (v14 <= 30)\n
                            cgc_printf(v2 - 7377);\n
                    }\n
                }\n
            }\n
            cgc_printf(v2 - 7403);\n
        }\n
    }\n
    else if (a0 == 2)\n
    {\n
        v13 = 0;\n
        v12 = 0;\n
        v11 = 2;\n
        v10 = 0;\n
        for (v17 = 0; v17 < 12; v17 += 1)\n
        {\n
            v29 = ftop<4> - 1;\n
            if ([D] GetI(136:I8x8)[t31,0])\n
            {\n
                v30 = v29 - 1;\n
                [D] PutI(72:F64x8)[t5,0] = t8\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
            }\n
            else\n
            {\n
                v30 = v29 - 1;\n
                [D] PutI(72:F64x8)[t5,0] = t8\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
            }\n
            v31 = v30 - 1;\n
            if (![D] GetI(136:I8x8)[t31,0])\n
            {\n
                v32 = v31 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v32 = v31 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t6,1] = t7\n
            [D] PutI(136:I8x8)[t6,1] = 0x01\n
            [D] PutI(136:I8x8)[t6,0] = 0x00\n
            v33 = v32 + 1;\n
            v12 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
            [D] PutI(136:I8x8)[t31,0] = 0x00\n
            v34 = v33 + 1;\n
        }\n
        if ([D] GetI(136:I8x8)[t31,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t2,0] = t5\n
        [D] PutI(136:I8x8)[t2,0] = 0x01\n
        [D] PutI(72:F64x8)[t12,1] = t13\n
        [D] PutI(136:I8x8)[t12,1] = 0x01\n
        [D] PutI(136:I8x8)[t12,0] = 0x00\n
        [D] PutI(136:I8x8)[t36,0] = 0x00\n
        cgc_log();\n
        if ([D] GetI(136:I8x8)[t31,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t23,1] = t24\n
        [D] PutI(136:I8x8)[t23,1] = 0x01\n
        [D] PutI(136:I8x8)[t23,0] = 0x00\n
        v4 = [D] x86g_create_fpucw(fpround<4>);\n
        v3 = v4 | 0xc00;\n
        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
        [D] PutI(136:I8x8)[t69,0] = 0x00\n
        v10 = v8;\n
        cgc_memset(&v9, 0, 91);\n
        cgc_memset(&v9, 61, v10);\n
        *((&v9 + v10)) = 93;\n
        for (v17 = 0; v17 < v11; v17 += 1)\n
        {\n
            cgc_printf(v2 - 7401);\n
        }\n
    }\n
    return v15;\n
}\n
", "4215152:cgc_slow_vis": "typedef struct struct_0 {\n
    char padding_0[332];\n
    unsigned int field_14c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_slow_vis()\n
{\n
    unsigned long v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // ftop\n
    unsigned int v8;  // ftop\n
    unsigned int v9;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    for (v4 = 0; v4 < v1->field_14c * 200000; v4 += 1)\n
    {\n
        v2 = v4;\n
        v7 = ftop<4> - 1;\n
        if (![D] GetI(136:I8x8)[t15,0])\n
        {\n
            v8 = v7 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v8 = v7 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(136:I8x8)[t6,0] ? [D] GetI(72:F64x8)[t6,0] : nan);\n
        [D] PutI(136:I8x8)[t6,0] = 0x00\n
        v9 = v8 + 1;\n
        cgc_sin();\n
        [D] PutI(72:F64x8)[t6,0] = t7\n
        [D] PutI(136:I8x8)[t6,0] = 0x01\n
        [D] PutI(136:I8x8)[t6,0] = 0x00\n
        v3 = v4;\n
        v11 = v9 + 1 - 1;\n
        [D] PutI(72:F64x8)[t29,0] = t32\n
        [D] PutI(136:I8x8)[t29,0] = 0x01\n
        v0 = ([D] GetI(136:I8x8)[t44,0] ? [D] GetI(72:F64x8)[t44,0] : nan);\n
        [D] PutI(136:I8x8)[t44,0] = 0x00\n
        v12 = v11 + 1;\n
        cgc_cos();\n
        [D] PutI(72:F64x8)[t5,0] = t6\n
        [D] PutI(136:I8x8)[t5,0] = 0x01\n
        [D] PutI(136:I8x8)[t5,0] = 0x00\n
        v13 = v12 + 1;\n
    }\n
    return v4;\n
}\n
", "4215280:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_log2": null, "5242884:cgc_pow": null, "5242888:__libc_start_main": null, "5242892:cgc_atan2": null, "5242896:cgc_transmit": null, "5242900:cgc_cos": null, "5242904:cgc_allocate": null, "5242908:cgc_log": null, "5242912:cgc_deallocate": null, "5242916:cgc_sin": null, "5242920:cgc_sqrt": null, "5242924:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}