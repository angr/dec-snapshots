{"4202496:_init": "extern struct_0 *g_414ba8;\n
\n
int _init()\n
{\n
    if (g_414ba8)\n
    {\n
        g_414ba8();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:sub_4020b0": "int sub_4020b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202678:sub_4020b6": null, "4202688:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202731:sub_4020eb": null, "4202732:sub_4020ec": "int sub_4020ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202736:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202740:sub_4020f4": null, "4202752:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 76463;\n
    v6 = v5 + 53;\n
    v7 = v5 + 53;\n
    if (v7 == v6)\n
        return v5 + 53;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202803:sub_402133": "int sub_402133()\n
{\n
}\n
", "4202809:sub_402139": "int sub_402139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202816:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 76399;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 53;\n
    v9 = (v6 + 53 - (v6 + 53) >> 31) + (53 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202887:sub_402187": "int sub_402187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202896:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_414ba4;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__TMC_END__)\n
        return;\n
    if (g_414ba4)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020b0();\n
    }\n
    deregister_tm_clones();\n
    __TMC_END__ = 1;\n
    return;\n
}\n
", "4202971:sub_4021db": "int sub_4021db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202976:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202985:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203071:sub_40223f": null, "4203072:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return (v1 & -33) - 65 < 26 | v1 - 48 < 10;\n
}\n
", "4203103:sub_40225f": null, "4203104:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 65 < 26 | v1 - 97 < 26;\n
}\n
", "4203132:sub_40227c": null, "4203136:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203152:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203168:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203184:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203198:sub_4022be": null, "4203200:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203222:sub_4022d6": null, "4203232:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203286:sub_402316": null, "4203296:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[27564 + v0];\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[27436 + v0];\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203459:sub_4023c3": null, "4203472:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203491:sub_4023e3": null, "4203504:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4203593:sub_402449": null, "4203600:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_414d08;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_402507;\n
            else\n
                goto LABEL_0x402520;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_414d08;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (true)\n
            {\n
LABEL_402507:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_402507;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4204026:sub_4025fa": null, "4204032:cgc_get_size_class": "extern unsigned int g_414be8;\n
extern unsigned int g_414bec;\n
extern unsigned int g_414bf0;\n
extern unsigned int g_414bf4;\n
extern unsigned int g_414bf8;\n
extern unsigned int g_414bfc;\n
extern unsigned int g_414c00;\n
extern unsigned int g_414c04;\n
extern unsigned int g_414c08;\n
extern unsigned int g_414c0c;\n
extern unsigned int g_414c10;\n
extern unsigned int g_414c14;\n
extern unsigned int g_414c18;\n
extern unsigned int g_414c1c;\n
extern unsigned int g_414c20;\n
extern unsigned int g_414c24;\n
extern unsigned int g_414c28;\n
extern unsigned int g_414c2c;\n
extern unsigned int g_414c30;\n
extern unsigned int g_414c34;\n
extern unsigned int g_414c38;\n
extern unsigned int g_414c3c;\n
extern unsigned int g_414c40;\n
extern unsigned int g_414c44;\n
extern unsigned int g_414c48;\n
extern unsigned int g_414c4c;\n
extern unsigned int g_414c50;\n
extern unsigned int g_414c54;\n
extern unsigned int g_414c58;\n
extern unsigned int g_414c5c;\n
extern unsigned int g_414c60;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_414be8 < v1)\n
    {\n
        v2 = 2;\n
        if (g_414bec < v1)\n
        {\n
            v2 = 3;\n
            if (g_414bf0 < v1)\n
            {\n
                v2 = 4;\n
                if (g_414bf4 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_414bf8 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_414bfc < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_414c00 < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_414c04 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_414c08 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_414c0c < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_414c10 < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_414c14 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_414c18 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_414c1c < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_414c20 < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_414c24 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_414c28 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_414c2c < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_414c30 < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_414c34 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_414c38 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_414c3c < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_414c40 < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_414c44 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_414c48 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_414c4c < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_414c50 < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_414c54 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_414c58 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_414c5c < v1)\n
                                                                                                                            v2 = 31 + (g_414c60 < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204551:sub_402807": null, "4204560:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4204653:sub_40286d": null, "4204656:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // ecx\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4204751:sub_4028cf": null, "4204752:cgc_coalesce": "typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    struct struct_3 *field_10;\n
    struct struct_4 *field_14;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
    struct struct_3 *field_10;\n
    struct struct_2 *field_14;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_5 *v0)\n
{\n
    struct_5 *v1;  // esi\n
    struct_4 *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // ecx\n
    unsigned int v7;  // eax\n
    struct_1 *v8;  // edx\n
    struct_0 *v9;  // ecx\n
    struct_1 *v10;  // edx\n
    struct_1 *v11;  // edx\n
    struct_3 *v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ecx\n
    struct_0 *v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    struct_1 *v20;  // edx\n
    struct_0 *v21;  // ecx\n
    struct_1 *v22;  // edx\n
    struct_1 *v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    struct_0 *v28;  // ecx\n
    unsigned int v29;  // ecx\n
    struct_4 *v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    struct_3 *v33;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v34;  // eax, Other Possible Types: unsigned int, struct_3 *, struct_4 *\n
    struct_1 *v35;  // edx\n
    unsigned int v36;  // ecx\n
    struct_3 *v37;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    struct_3 *v43;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v44;  // eax, Other Possible Types: unsigned int\n
    struct_3 *v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_14;\n
    if (!v1->field_14)\n
        return v34;\n
    v12 = v1->field_10;\n
    if (!v2->field_4)\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!v12->field_4)\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(v12->field_0);\n
            v6 = v12->field_c;\n
            if (v6)\n
                v6->field_8 = v12->field_8;\n
            v10 = v12->field_8;\n
            if (v10)\n
                v10->field_c = v6;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v4]) == v12)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v4]) = v10;\n
            v12->field_8 = 0;\n
            v12->field_c = 0;\n
            v12->field_4 = 0;\n
            v14 = v1->field_0;\n
            v15 = cgc_get_size_class(v14);\n
            v17 = v1->field_c;\n
            if (v17)\n
                v17->field_8 = v1->field_8;\n
            v22 = v1->field_8;\n
            if (v22)\n
                v22->field_c = v17;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v15]) == v1)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v15]) = v22;\n
            v1->field_8 = 0;\n
            v1->field_c = 0;\n
            v1->field_4 = 0;\n
            v26 = v14 + v1->field_10->field_0;\n
            v1->field_0 = v26;\n
            v27 = cgc_get_size_class(v26);\n
            v1->field_4 = 1;\n
            v29 = *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v27]);\n
            if (v29)\n
            {\n
                v1->field_8 = v29;\n
                *((*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v27]) + 12)) = v1;\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v27]) = v1;\n
                v1->field_c = 0;\n
                v33 = v1->field_10;\n
                v34 = v33->field_14;\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            else\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v27]) = v1;\n
                v33 = v1->field_10;\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_402c4a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_402c51:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && v12->field_4)\n
    {\n
        v3 = cgc_get_size_class(v2->field_0);\n
        v5 = v2->field_c;\n
        if (v5)\n
            v5->field_8 = v2->field_8;\n
        v8 = v2->field_8;\n
        if (v8)\n
            v8->field_c = v5;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v3]) == v2)\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v3]) = v8;\n
            v12 = v1->field_10;\n
        }\n
        v2->field_8 = 0;\n
        v2->field_c = 0;\n
        v2->field_4 = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            v16->field_8 = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            v20->field_c = v16;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v13]) == v12)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v13]) = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = v1->field_0;\n
        v25 = cgc_get_size_class(v24);\n
        v28 = v1->field_c;\n
        if (v28)\n
            v28->field_8 = v1->field_8;\n
        v35 = v1->field_8;\n
        if (v35)\n
            v35->field_c = v28;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v25]) == v1)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v25]) = v35;\n
        v1->field_8 = 0;\n
        v1->field_c = 0;\n
        v1->field_4 = 0;\n
        v38 = v1->field_14;\n
        v39 = v24 + v1->field_14->field_0;\n
        v1->field_14->field_0 = v39;\n
        v40 = v39 + v1->field_10->field_0;\n
        v38->field_0 = v40;\n
        v41 = cgc_get_size_class(v40);\n
        v38->field_4 = 1;\n
        v42 = *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v41]);\n
        if (v42)\n
        {\n
            v38->field_8 = v42;\n
            *((*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v41]) + 12)) = v38;\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v41]) = v38;\n
            v38->field_c = 0;\n
            v43 = v1->field_10;\n
            v44 = v43->field_14;\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        else\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v41]) = v38;\n
            v43 = v1->field_10;\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_402a41:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            v45->field_14 = v44;\n
            v34 = v1->field_14;\n
            if (!v34)\n
                goto LABEL_402b50;\n
            goto LABEL_402b4a;\n
        }\n
    }\n
    v34 = v1->field_10;\n
    if (!v34)\n
        return v1->field_10;\n
    if (v34->field_4)\n
        return v1->field_10;\n
    v7 = cgc_get_size_class(v2->field_0);\n
    v9 = v2->field_c;\n
    if (v9)\n
        v9->field_8 = v2->field_8;\n
    v11 = v2->field_8;\n
    if (v11)\n
        v11->field_c = v9;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v7]) == v2)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v7]) = v11;\n
    v2->field_8 = 0;\n
    v2->field_c = 0;\n
    v2->field_4 = 0;\n
    v18 = v1->field_0;\n
    v19 = cgc_get_size_class(v18);\n
    v21 = v1->field_c;\n
    if (v21)\n
        v21->field_8 = v1->field_8;\n
    v23 = v1->field_8;\n
    if (v23)\n
        v23->field_c = v21;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v19]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v19]) = v23;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    v30 = v1->field_14;\n
    v31 = v18 + v1->field_14->field_0;\n
    v1->field_14->field_0 = v31;\n
    v32 = cgc_get_size_class(v31);\n
    v30->field_4 = 1;\n
    v36 = *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v32]);\n
    if (v36)\n
    {\n
        v30->field_8 = v36;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v32]) + 12)) = v30;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v32]) = v30;\n
        v30->field_c = 0;\n
    }\n
    else\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[216 + 4 * v32]) = v30;\n
        v34 = v1->field_14;\n
        if (!v34)\n
            goto LABEL_402b50;\n
LABEL_402b4a:\n
        *((v34 + 16)) = v1->field_10;\n
LABEL_402b50:\n
        v37 = v1->field_10;\n
        if (!v37)\n
            return v34;\n
        goto LABEL_402c51;\n
    }\n
    v34 = v1->field_14;\n
    if (!v34)\n
        goto LABEL_402b50;\n
    goto LABEL_402b4a;\n
}\n
", "4205728:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205785:sub_402cd9": null, "4205792:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205855:sub_402d1f": null, "4205856:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4205986:sub_402da2": null, "4206000:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4206256:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4206366:sub_402f1e": null, "4206368:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
\n
    v6 = a2;\n
    v7 = a1;\n
    v8 = a0;\n
    v11 = v5;\n
    if (v8 < v7)\n
    {\n
        v3 = v8;\n
        v2 = 0;\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v8) /m v7;\n
        v3 = tmp_9 >> 32;\n
        v11 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v8) /m v7, v7, v6 - 1, a3);\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    if (!v2)\n
    {\n
        tmp_2 = v6;\n
        v12 = v6 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_402ffb:\n
    if (!(a3 & 2))\n
    {\n
        v13 = v3;\n
        v14 = v13 + 87;\n
    }\n
    else\n
    {\n
        v13 = v3;\n
        v14 = v13 + 55;\n
    }\n
    if (v13 < 10)\n
        v14 = v13 + 48;\n
    v1 = v14;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4206660:sub_403044": null, "4206672:cgc_fdprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fdprintf(unsigned int v10, struct struct_2 **a0)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x38]\n
    struct_0 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    struct struct_1 **v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x18]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v11;  // [bp+0xc]\n
    struct struct_2 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_0 *v14;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // edi\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    struct struct_2 **v19;  // ecx, Other Possible Types: unsigned int\n
    struct struct_2 **v21;  // eax, Other Possible Types: unsigned int\n
    struct struct_1 **v22;  // eax\n
    unsigned int v23;  // ecx\n
    char *v24;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v25;  // eax\n
    struct struct_1 **v26;  // eax\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax, Other Possible Types: unsigned int\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
\n
    v12 = a0;\n
    v7 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v8;\n
    v15 = &v6;\n
    do\n
    {\n
        v21 = v12 + 1;\n
        a0 = v21;\n
        *(&v12) = *(v12);\n
        if (v6 != 37)\n
        {\n
            v6 = v12;\n
            v5 = v14;\n
            cgc_transmit(v13, v15, 1);\n
            v23 = v13;\n
        }\n
        else\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = v21;\n
                while (true)\n
                {\n
                    v21 = v19 + 1;\n
                    a0 = v21;\n
                    v16 = *(v19);\n
                    v17 = v16;\n
                    if (v17 - 49 >= 9)\n
                        break;\n
                    v18 = cgc_strtol(v19, &a0);\n
                    v19 = a0;\n
                }\n
                switch (v17)\n
                {\n
                case 37:\n
                    v6 = 37;\n
                    break;\n
                case 48:\n
                    v9 = 1;\n
                    continue;\n
                case 80:\n
                    v22 = v7;\n
                    v7 = v22 + 1;\n
                    *(&*(v22)) = 0;\n
                    v23 = v10;\n
                    goto LABEL_40328c;\n
                case 88:\n
                    v24 = v9 | 2;\n
                    goto LABEL_403219;\n
                case 99:\n
                    v25 = v7;\n
                    v7 = v25 + 1;\n
                    v6 = *(v25);\n
                    break;\n
                case 100:\n
                    v26 = v7;\n
                    v7 = v26 + 1;\n
                    v27 = *(v26);\n
                    if (v27 >= 0)\n
                    {\n
                        v30 = v10;\n
                    }\n
                    else\n
                    {\n
LABEL_403256:\n
                        v6 = 45;\n
                        v5 = &v8;\n
                        v30 = v10;\n
                        cgc_transmit(v10, &v6, 1);\n
                        v27 = -(v27);\n
                    }\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    v0 = v27;\n
                    goto LABEL_403281;\n
                case 115:\n
                    v28 = v7;\n
                    v7 = v28 + 1;\n
                    v9 = &*(v28)->field_0;\n
                    v23 = v10;\n
                    v14 = &v8;\n
                    v15 = &v6;\n
                    if (cgc_strlen())\n
                    {\n
                        v31 = 0;\n
                        do\n
                        {\n
                            v6 = v9[v31];\n
                            v5 = v14;\n
                            v4 = v15;\n
                            cgc_transmit(v23, v15, 1);\n
                            v31 += 1;\n
                            v15 = &v6;\n
                            v14 = &v8;\n
                        } while (v31 < cgc_strlen(v9, v4, 1));\n
                    }\n
                    goto LABEL_4030a7;\n
                case 117:\n
                    v29 = v7;\n
                    v7 = v29 + 1;\n
                    v3 = v9;\n
                    v2 = v18;\n
                    v1 = 10;\n
                    goto LABEL_40322b;\n
                case 120:\n
                    v24 = v9;\n
LABEL_403219:\n
                    v29 = v7;\n
                    v7 = v29 + 4;\n
                    v3 = v24;\n
                    v2 = v18;\n
                    v1 = 16;\n
LABEL_40322b:\n
                    v0 = *(v29);\n
                    v30 = v10;\n
LABEL_403281:\n
                    cgc_output_number_printf(v30, v0, v1, v2, v3);\n
                    v23 = v30;\n
LABEL_40328c:\n
                    v14 = &v8;\n
                    v15 = &v6;\n
                default:\n
                    v6 = v16;\n
                    v5 = &v8;\n
                    v15 = &v6;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v23 = v10;\n
                    goto LABEL_403256;\n
                }\n
            }\n
            continue;\n
        }\n
        v14 = &v8;\n
LABEL_4030a7:\n
        v13 = v23;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4206726:sub_403086": null, "4207267:sub_4032a3": null, "4207280:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033d4;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033d4;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_4033d4:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4207626:sub_40340a": null, "4207632:cgc_sprintf": null, "4207686:sub_403446": null, "4208098:sub_4035e2": null, "4208112:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40365a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40365a:\n
    return v5;\n
}\n
", "4208228:sub_403664": null, "4208240:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4036da;\n
        }\n
    }\n
LABEL_4036da:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4208279:sub_403697": null, "4208384:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4208441:sub_403739": null, "4208448:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4208490:sub_40376a": null, "4208496:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4208564:sub_4037b4": null, "4208576:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4208641:sub_403801": null, "4208656:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208732:sub_40385c": null, "4208736:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4208763:sub_40387b": null, "4208768:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4208850:sub_4038d2": null, "4208919:sub_403917": null, "4208928:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(v0) - *(a0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v4);\n
        }\n
    }\n
}\n
", "4209010:sub_403972": null, "4209024:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4209162:sub_403a0a": null, "4209168:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_403a7d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_403a7d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4209287:sub_403a87": null, "4209296:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4209339:sub_403abb": null, "4209511:sub_403b67": null, "4209607:sub_403bc7": null, "4209616:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4209657:sub_403bf9": null, "4209664:cgc_bn_init": "int cgc_bn_init(unsigned int v0[2])\n
{\n
    unsigned int v1[2];  // eax\n
\n
    v1 = v0;\n
    v1[0] = 0;\n
    v1[1] = 0;\n
    return v0;\n
}\n
", "4209682:sub_403c12": null, "4209696:cgc_bn_destroy": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_bn_destroy(struct_0 *v0)\n
{\n
    unsigned int v1[2];  // esi\n
\n
    v1 = v0;\n
    v1[0] = 0;\n
    v1[1] = 0;\n
    return cgc_free(v0->field_0);\n
}\n
", "4209744:cgc_bn_const": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_bn_const(unsigned int v0[2], unsigned int a0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int *v2;  // eax\n
\n
    v1 = v0;\n
    cgc_free(v1->field_0);\n
    v1->field_0 = 0;\n
    v1->field_4 = 0;\n
    v2 = cgc_calloc(1, 4);\n
    v1->field_0 = v2;\n
    if (v2)\n
    {\n
        v1->field_4 = 1;\n
        *(v2) = a0;\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4209846:sub_403cb6": null, "4209856:cgc_bn_init_bits": "int cgc_bn_init_bits(unsigned int v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // edi\n
    unsigned int v3[2];  // esi\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v4 = (a0 + 7 >> 3) + 3 >> 2;\n
    v5 = cgc_calloc(v4, 4);\n
    v3[0] = v5;\n
    if (!v5)\n
        return 1;\n
    v3[1] = v4;\n
    return 0;\n
}\n
", "4209929:sub_403d09": null, "4209936:cgc_bn_length": "extern char g_400000;\n
extern char g_800000;\n
\n
int cgc_bn_length(unsigned int v0[2])\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v1[2];  // edx\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edi\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1[1];\n
    v5 = v2 * 32 + 32;\n
    v4 = v2;\n
    do\n
    {\n
        tmp_2 = v4;\n
        v4 -= 1;\n
        if (tmp_2 < 1)\n
            return 0;\n
        v3 = *((v1[0] + v2 * 4 - 4));\n
        v5 -= 32;\n
        v2 = v4;\n
    } while (!v3);\n
    if ([D] x86g_calculate_condition(0x8<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>))\n
    {\n
        return v5;\n
    }\n
    else if ((v3 & 0x40000000))\n
    {\n
        return v5 - 1;\n
    }\n
    else if ((v3 & 0x20000000))\n
    {\n
        return v5 - 2;\n
    }\n
    else if ((v3 & 0x10000000))\n
    {\n
        return v5 - 3;\n
    }\n
    else if ((v3 & 0x8000000))\n
    {\n
        return v5 - 4;\n
    }\n
    else if ((v3 & 0x4000000))\n
    {\n
        return v5 - 5;\n
    }\n
    else if ((v3 & 0x2000000))\n
    {\n
        return v5 - 6;\n
    }\n
    else if ((v3 & 0x1000000))\n
    {\n
        return v5 - 7;\n
    }\n
    else if ((v3 & 0x800000))\n
    {\n
        return v5 - 8;\n
    }\n
    else if ((v3 & 0x400000))\n
    {\n
        return v5 - 9;\n
    }\n
    else if ((v3 & 0x200000))\n
    {\n
        return v5 - 10;\n
    }\n
    else if ((v3 & 0x100000))\n
    {\n
        return v5 - 11;\n
    }\n
    else if ((v3 & 0x80000))\n
    {\n
        return v5 - 12;\n
    }\n
    else if ((v3 & 0x40000))\n
    {\n
        return v5 - 13;\n
    }\n
    else if ((v3 & 0x20000))\n
    {\n
        return v5 - 14;\n
    }\n
    else if ((v3 & 0x10000))\n
    {\n
        return v5 - 15;\n
    }\n
    else if ((v3 & 0x8000))\n
    {\n
        return v5 - 16;\n
    }\n
    else if ((v3 & 0x4000))\n
    {\n
        return v5 - 17;\n
    }\n
    else if ((v3 & 0x2000))\n
    {\n
        return v5 - 18;\n
    }\n
    else if ((v3 & 0x1000))\n
    {\n
        return v5 - 19;\n
    }\n
    else if ((v3 & 0x800))\n
    {\n
        return v5 - 20;\n
    }\n
    else if ((v3 & 0x400))\n
    {\n
        return v5 - 21;\n
    }\n
    else if ((v3 & 0x200))\n
    {\n
        return v5 - 22;\n
    }\n
    else if ((v3 & 0x100))\n
    {\n
        return v5 - 23;\n
    }\n
    else if ((v3 & 128))\n
    {\n
        return v5 - 24;\n
    }\n
    else if ((v3 & 64))\n
    {\n
        return v5 - 25;\n
    }\n
    else if ((v3 & 32))\n
    {\n
        return v5 - 26;\n
    }\n
    else if ((v3 & 16))\n
    {\n
        return v5 - 27;\n
    }\n
    else if ((v3 & 8))\n
    {\n
        return v5 - 28;\n
    }\n
    else if ((v3 & 4))\n
    {\n
        return v5 - 29;\n
    }\n
    else if ((v3 & 2))\n
    {\n
        return v5 - 30;\n
    }\n
    else\n
    {\n
        return v5 + (v3 & 1) - 32;\n
    }\n
}\n
", "4210533:sub_403f65": null, "4210544:cgc_bn_copy": "typedef struct struct_1 {\n
    char *field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_bn_copy(unsigned int v0[2], unsigned int a0[2])\n
{\n
    struct_1 *v1;  // edi\n
    struct_0 *v2;  // esi\n
    char *v3;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    cgc_free(v2->field_0);\n
    v2->field_0 = 0;\n
    v2->field_4 = 0;\n
    v3 = cgc_calloc(134217727 & v1->field_4, 4);\n
    v2->field_0 = v3;\n
    if (!v3)\n
        return 1;\n
    v2->field_4 = 134217727 & v1->field_4;\n
    cgc_memcpy(v3, v1->field_0, v1->field_4 * 4);\n
    v2->field_4 = v1->field_4;\n
    return 0;\n
}\n
", "4210672:cgc_bn_from_bytes": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_-3;\n
    char padding_-2[1];\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_bn_from_bytes(unsigned int v2[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // ebp\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int *v6;  // eax\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ecx\n
    struct_1 *v12;  // edi, Other Possible Types: unsigned int\n
\n
    v3 = a1;\n
    v4 = v2;\n
    cgc_free(v4->field_0);\n
    v4->field_0 = 0;\n
    v4->field_4 = 0;\n
    v5 = (v3 & 536870911) + 3 >> 2;\n
    v6 = cgc_calloc(v5, 4);\n
    v4->field_0 = v6;\n
    if (!v6)\n
        return 1;\n
    v4->field_4 = v5;\n
    if (!v3)\n
        return 0;\n
    v7 = v3 - 1;\n
    v12 = a0 + v3 - 1;\n
    v1 = v3 - 2;\n
    v0 = v3 - 3;\n
    v11 = 0;\n
    do\n
    {\n
        v8 = v3;\n
        v9 = *(v12);\n
        if (v7 != v11)\n
        {\n
            v10 = *((v12 - 1)) * 0x100 | v9;\n
            if (v1 == v11)\n
                goto LABEL_4040ba;\n
            v10 |= *((v12 - 2)) * 0x10000;\n
            if (v0 == v11)\n
                goto LABEL_4040ba;\n
        }\n
        else\n
        {\n
            v10 = v9;\n
LABEL_4040ba:\n
            *((v6 + v11)) = v10;\n
            break;\n
        }\n
        *((v6 + v11)) = *((v12 - 3)) * 0x1000000 | v10;\n
        v11 += 4;\n
        v12 -= 4;\n
        v3 = v8;\n
    } while (v8 != v11);\n
}\n
", "4210887:sub_4040c7": null, "4210896:cgc_bn_to_bytes": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_bn_to_bytes(unsigned int v0[2], struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    char v13;  // dl\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0[1] * 4;\n
    if (v3 >= v1)\n
    {\n
        v9 = v1;\n
    }\n
    else\n
    {\n
        v4 = v1 - v3;\n
        v5 = v3;\n
        v6 = ~(v3) + v1;\n
        v7 = v4 & 7;\n
        if (v7)\n
        {\n
            v8 = 0;\n
            do\n
            {\n
                (&v2->field_0)[v8] = 0;\n
                v8 += 1;\n
            } while (v7 != v8);\n
            v2 = &(&v2->field_0)[v8];\n
            v1 -= v8;\n
        }\n
        v9 = v5;\n
        if (v6 >= 7)\n
        {\n
            do\n
            {\n
                *(v2) = 0;\n
                *((v2 + 4)) = 0;\n
                v2 += 8;\n
                v1 -= 8;\n
            } while (v1 > v5);\n
        }\n
    }\n
    v10 = v9 + 3;\n
    if (v10 < 4)\n
        return v2;\n
    v11 = v10 / 4;\n
    v12 = v10 & -0x4;\n
    do\n
    {\n
        v13 = *((v0[0] + v11 * 4 - 4));\n
        v14 = v12 - 1;\n
        if (v12 > v9)\n
        {\n
            v15 = v12 - 2;\n
            if (v14 <= v9)\n
                goto LABEL_4041a1;\n
            goto LABEL_40417f;\n
        }\n
        else\n
        {\n
            *(v2) = v13 / 0x1000000;\n
            v2 += 1;\n
            v15 = v12 - 2;\n
            if (v14 > v9)\n
            {\n
LABEL_40417f:\n
                v16 = v12 - 3;\n
                if (v15 <= v9)\n
                    goto LABEL_4041b6;\n
                goto LABEL_404186;\n
            }\n
            else\n
            {\n
LABEL_4041a1:\n
                *(v2) = v13 / 0x10000;\n
                v2 += 1;\n
                v16 = v12 - 3;\n
                if (v15 > v9)\n
                {\n
LABEL_404186:\n
                    v11 -= 1;\n
                    if (!(v16 <= v9))\n
                        continue;\n
                    goto LABEL_4041c2;\n
                }\n
                else\n
                {\n
LABEL_4041b6:\n
                    *(v2) = v9;\n
                    v2 += 1;\n
                    v11 -= 1;\n
                    if (!(v16 <= v9))\n
                        continue;\n
LABEL_4041c2:\n
                    *(v2) = v13;\n
                    v2 += 1;\n
                }\n
            }\n
        }\n
        v12 -= 4;\n
    } while (v11);\n
    return v2;\n
}\n
", "4211026:sub_404152": null, "4211087:sub_40418f": null, "4211145:sub_4041c9": null, "4211152:cgc_bn_cgc_random": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_bn_cgc_random(struct_0 *v3, unsigned int a0[2], struct struct_3 **a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_4;  // tmp #4\n
    int tmp_6;  // tmp #6\n
    int tmp_2;  // tmp #2\n
    unsigned int *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v5;  // eax\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    struct struct_3 **v10;  // edx\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // ecx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // esi\n
    unsigned int *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // ebp\n
    struct struct_3 **v22;  // esi\n
\n
    v4 = v3;\n
    v5 = cgc_bn_length(a0);\n
    cgc_free(v4->field_0);\n
    v4->field_0 = 0;\n
    v4->field_4 = 0;\n
    v1 = v5;\n
    v6 = (&v5[1] + 3 >> 3) + 3;\n
    v7 = v6 / 4;\n
    v8 = cgc_calloc(v7, 4);\n
    v4->field_0 = v8;\n
    if (!v8)\n
        return 1;\n
    v10 = a1;\n
    v4->field_4 = v7;\n
    v0 = v6 & -0x4;\n
    if (!*(v10)->field_c(v10, v8))\n
    {\n
        v11 = v1;\n
        v12 = v11 & 31;\n
        v2 = -1 << (v12 & 31);\n
        if (v12)\n
        {\n
            v1 = v11 / 32;\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v13 = *((v4 + 4));\n
                v14 = a0[1];\n
                v15 = (v13 < v14 ? v14 : v13);\n
                v16 = v13;\n
                while (v16 > v14)\n
                {\n
                    v17 = v4->field_0;\n
                    v16 -= 1;\n
                    if (!(!v17[1 + v13]))\n
                        goto LABEL_404350;\n
                }\n
                for (; v14 > v13; v14 -= 1)\n
                {\n
                    tmp_4 = *((a0[0] + v14 * 4 - 4));\n
                }\n
                v18 = v15;\n
                do\n
                {\n
                    tmp_2 = v18;\n
                    v18 -= 1;\n
                    if (tmp_2 < 1)\n
                    {\n
                        v17 = *(v4);\n
                        goto LABEL_404350;\n
                    }\n
                    v17 = *(v4);\n
                    v19 = *((v17 + v15 * 4 - 4));\n
                    v20 = *((a0[0] + v15 * 4 - 4));\n
                    v15 = v18;\n
                    tmp_6 = v20;\n
                    v4 = v3;\n
                } while (v19 == tmp_6);\n
                if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, edi<4>, ebp<4>, 0x0<32>))\n
                    goto LABEL_0x4043eb;\n
LABEL_404350:\n
                v22 = a1;\n
                v0 = v13 * 4;\n
            }\n
        }\n
    }\n
}\n
", "4211452:sub_4042fc": null, "4211603:sub_404393": null, "4211703:sub_4043f7": null, "4211712:cgc_bn_cmp": "int cgc_bn_cmp(unsigned int v0[2], unsigned int a0[2])\n
{\n
    int tmp_3;  // tmp #3\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1[2];  // eax\n
    unsigned int v2[2];  // ecx\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // esi\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // cc_dep1\n
    unsigned int v11;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[1];\n
    v5 = v1[1];\n
    v11 = (v3 < v5 ? v5 : v3);\n
    v4 = v3;\n
    while (true)\n
    {\n
        if (v4 > v5)\n
        {\n
            v4 -= 1;\n
            if (*((v2[0] + (v3 << 2) - 4)))\n
                return 1;\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                if (v5 > v3)\n
                {\n
                    tmp_3 = *((v1[0] + v5 * 4 - 4));\n
                    v5 -= 1;\n
                    if (tmp_3)\n
                        return -1;\n
                }\n
                else\n
                {\n
                    v6 = v11;\n
                    while (true)\n
                    {\n
                        tmp_2 = v6;\n
                        v6 -= 1;\n
                        if (tmp_2 < 1)\n
                            return 0;\n
                        v8 = v2[0];\n
                        v9 = *((v1[0] + v11 * 4 - 4));\n
                        tmp_5 = *((v8 + v11 * 4 - 4));\n
                        v10 = *((v8 + v11 * 4 - 4));\n
                        v11 = v6;\n
                        if (tmp_5 != v9)\n
                            return [D] x86g_calculate_condition(0x7<32>, 0x6<32>, cc_dep1<4>, ebx<4>, 0x0<32>) * 2 - 1;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4211767:sub_404437": null, "4211856:cgc_bn_modexp": "typedef struct struct_2 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_bn_modexp(unsigned int v9[2], unsigned int a0, struct struct_1 **a1, unsigned int a2[2])\n
{\n
    unsigned int v0;  // [bp-0xbc]\n
    unsigned int v1;  // [bp-0x40]\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x2c]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x24]\n
    void* v6;  // [bp-0x20]\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18]\n
    struct_2 *v10;  // esi\n
    unsigned int v11;  // edi\n
    unsigned int *v12;  // eax\n
    struct_0 *v13;  // esi, Other Possible Types: unsigned int\n
    unsigned int v14[2];  // edi\n
    void* v15;  // ebp, Other Possible Types: unsigned int\n
    struct struct_1 **v16;  // edi, Other Possible Types: unsigned int\n
\n
    v10 = v9;\n
    v7 = 0;\n
    v8 = 0;\n
    v5 = 0;\n
    v6 = 0;\n
    v3 = 0;\n
    v4 = 0;\n
    cgc_free(v10->field_0);\n
    v10->field_0 = 0;\n
    v10->field_4 = 0;\n
    v11 = (cgc_bn_length(a2) + 7 >> 3) + 3 >> 2;\n
    v12 = cgc_calloc(v11, 4);\n
    v10->field_0 = v12;\n
    v15 = 0;\n
    if (!v12)\n
    {\n
        v2 = 1;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        v10->field_4 = v11;\n
        *(v12) = 1;\n
        v13 = &v7;\n
        v1 = a2;\n
        if (!cgc_bn_div(&v3, &v7, a0))\n
        {\n
            v16 = a1;\n
            v15 = 0;\n
            if (!cgc_bn_length(v16))\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = *((*(v16) + (v15 >> 5) * 4));\n
                    if (((*(&v0 + ((v15 & 31) >> 3)) >> (v15 & 31 & 7)) & 1) == 1)\n
                    {\n
                        v14 = v9;\n
                        v2 = 1;\n
                        if (cgc_bn_mul(&v5, v14))\n
                            goto LABEL_404624;\n
                        v1 = a2;\n
                        v13 = &v7;\n
                        if (cgc_bn_div(&v3, v14, &v5))\n
                            goto LABEL_404624;\n
                    }\n
                    v2 = 1;\n
                    if (cgc_bn_mul(&v5, v13))\n
                        goto LABEL_404624;\n
                    v1 = a2;\n
                    if (cgc_bn_div(&v3, v13, &v5))\n
                        goto LABEL_404624;\n
                    v15 += 1;\n
                    v16 = a1;\n
                } while (v15 < cgc_bn_length(v16));\n
                v2 = 0;\n
LABEL_404624:\n
                v15 = v5;\n
            }\n
        }\n
    }\n
    cgc_free(v7);\n
    cgc_free(NULL);\n
    cgc_free(v15);\n
    cgc_free(v3);\n
    return v2;\n
}\n
", "4212342:sub_404676": null, "4212352:cgc_bn_div": "typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
int cgc_bn_div(unsigned int v8[2], struct_1 *a0, struct struct_0 **a1, struct_1 *a2)\n
{\n
    int tmp_25;  // tmp #25\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_3;  // tmp #3\n
    int tmp_2;  // tmp #2\n
    int tmp_4;  // tmp #4\n
    int tmp_62;  // tmp #62\n
    int tmp_97;  // tmp #97\n
    int tmp_31;  // tmp #31\n
    int tmp_29;  // tmp #29\n
    int tmp_11;  // tmp #11\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int *v5;  // [bp-0x1c]\n
    unsigned int *v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    struct_1 *v9;  // edi\n
    struct_1 *v10;  // ebp, Other Possible Types: unsigned int\n
    struct_3 *v11;  // esi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v17[2];  // edi\n
    unsigned int v18;  // esi\n
    unsigned int *v19;  // eax\n
    struct struct_0 **v20;  // esi\n
    unsigned int v21[2];  // ebx\n
    void* v22;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // ecx\n
    char v28;  // cl\n
    unsigned int v29;  // esi\n
    struct_1 *v30;  // edx\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebp\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // esi\n
    unsigned int v36;  // cc_dep1\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // ecx\n
    unsigned int v40;  // esi\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // edi\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // ebp\n
    unsigned int v48;  // ecx\n
    unsigned int v49;  // ebp\n
    unsigned int v50;  // ecx\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // ecx\n
    unsigned int v53;  // esi\n
    unsigned int *v54;  // eax, Other Possible Types: unsigned int\n
    unsigned int v55;  // ebp\n
    unsigned int v58;  // ecx\n
\n
    v9 = a2;\n
    v10 = a0;\n
    v11 = v8;\n
    cgc_free(v11->field_0);\n
    v11->field_0 = 0;\n
    v11->field_4 = 0;\n
    cgc_free(v10->field_0);\n
    v10->field_0 = 0;\n
    v10->field_4 = 0;\n
    v12 = (cgc_bn_length(v9) + 8 >> 3) + 3 >> 2;\n
    v13 = cgc_calloc(v12, 4);\n
    v10->field_0 = v13;\n
    if (!v13)\n
        return 1;\n
    v10->field_4 = v12;\n
    v15 = cgc_bn_length(a1);\n
    v16 = cgc_bn_length(v9);\n
    v18 = (v15 - v16 + 7 >> 3) + 3 >> 2;\n
    tmp_25 = v15;\n
    v17 = v8;\n
    if (tmp_25 <= v16)\n
        v18 = 1;\n
    v19 = cgc_calloc(v18, 4);\n
    v17[0] = v19;\n
    v5 = v19;\n
    if (!v5)\n
    {\n
        cgc_free(v10->field_0);\n
        v10->field_0 = 0;\n
        v10->field_4 = 0;\n
        return 1;\n
    }\n
    v17[1] = v18;\n
    v20 = a1;\n
    v58 = cgc_bn_length(v20);\n
    if (!v58)\n
        return 0;\n
    v6 = &*(v20)->field_0;\n
    v21 = v10->field_0;\n
    do\n
    {\n
        v2 = v58 - 1;\n
        if (*((v10 + 4)))\n
        {\n
            v22 = 0;\n
            v23 = 0;\n
            do\n
            {\n
                v24 = v21[v23];\n
                v26 = v24 * 2 | v22;\n
                v21[v23] = v26;\n
                v23 += 1;\n
                v22 = v24 / 0x80000000;\n
            } while (v23 < v10->field_4);\n
        }\n
        v27 = v2;\n
        v7 = v27 / 32;\n
        v28 = v27 & 31;\n
        v0 = v6[v7] >> (v28 & 31) & 1 | v21[0];\n
        v21[0] = v0;\n
        v29 = *((v10 + 4));\n
        v30 = a2;\n
        v31 = v30->field_4;\n
        v32 = (v29 < v31 ? v31 : v29);\n
        v33 = v29;\n
        v1 = v31;\n
        while (true)\n
        {\n
            if (v33 > v31)\n
            {\n
                v33 -= 1;\n
                if (!(!v21[1 + v29]))\n
                    goto LABEL_404822;\n
            }\n
            else\n
            {\n
                v34 = v31;\n
                while (v34 > v29)\n
                {\n
                    tmp_3 = (&v30->field_0->field_4)[v34];\n
                    v31 = v1;\n
                    v34 -= 1;\n
                    if (!(!tmp_3))\n
                        goto LABEL_40478b;\n
                }\n
                v35 = v32;\n
                while (true)\n
                {\n
                    tmp_2 = v35;\n
                    v35 -= 1;\n
                    if (tmp_2 < 1)\n
                        break;\n
                    tmp_4 = v21[1 + v32];\n
                    tmp_3 = (&v30->field_0->field_4)[v32];\n
                    v36 = v21[1 + v32];\n
                    v31 = v1;\n
                    v32 = v35;\n
                    if (tmp_4 != tmp_3)\n
                        break;\n
                }\n
LABEL_404822:\n
                v55 = 1 << (v28 & 31);\n
                if (v31)\n
                {\n
                    v37 = v30->field_0;\n
                    v38 = v0;\n
                    tmp_4 = v38;\n
                    *(&v32) = tmp_4 < *(v37);\n
                    v21[0] = v38 - *(v37);\n
                    if (v31 != 1)\n
                    {\n
                        v40 = v31 - 1;\n
                        v41 = v31;\n
                        v42 = 1;\n
                        v4 = v55;\n
                        v3 = v40;\n
                        if (v41 != 2)\n
                        {\n
                            v0 = -(v3 & -2);\n
                            v42 = 1;\n
                            do\n
                            {\n
                                v43 = v32 & 1;\n
                                v44 = v21[v42];\n
                                tmp_62 = v44 < *((v37 + v42 * 4));\n
                                v45 = v43 + *((v37 + v42 * 4));\n
                                v46 = v21[1 + v42];\n
                                v21[v42] = v44 - v45;\n
                                v48 = *((v37 + v42 * 4 + 4));\n
                                tmp_97 = v46 < v48;\n
                                v32 = (v44 < v45 | tmp_62) + v48;\n
                                tmp_31 = v46;\n
                                v49 = v46 - v32;\n
                                *(&v32) = tmp_31 < v32 | tmp_97;\n
                                v21[1 + v42] = v49;\n
                                v50 = v0 + v42 + 2;\n
                                v42 += 2;\n
                            } while (v50 != 1);\n
                        }\n
                        v55 = v4;\n
                        if ((v3 & 1))\n
                        {\n
                            v51 = v21[v42];\n
                            v52 = *((v37 + v42 * 4));\n
                            tmp_29 = v51 < v52;\n
                            v32 += v52;\n
                            tmp_11 = v51;\n
                            v53 = v51 - v32;\n
                            *(&v32) = tmp_11 < v32 | tmp_29;\n
                            v21[v42] = v53;\n
                        }\n
                    }\n
                    if ((v32 & 1))\n
                    {\n
                        v54 = &v21[v1];\n
                        do\n
                        {\n
                            tmp_2 = *(v54);\n
                            *(v54) = *(v54) - 1;\n
                            v54 += 4;\n
                        } while (tmp_2 < 1);\n
                    }\n
                }\n
                v5[v7] = v5[v7] | v55;\n
                break;\n
            }\n
        }\n
LABEL_40478b:\n
        v58 = v2;\n
        v10 = a0;\n
    } while (v58);\n
    return 0;\n
}\n
", "4212605:sub_40477d": null, "4213005:sub_40490d": null, "4213049:sub_404939": null, "4213159:sub_4049a7": null, "4213168:cgc_bn_mul": "typedef struct struct_2 {\n
    void* field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_bn_mul(unsigned int v4[2], struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned int *v0;  // [bp-0x20]\n
    int tmp_45;  // tmp #45\n
    int tmp_14;  // tmp #14\n
    int tmp_2;  // tmp #2\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int *v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    struct_2 *v5;  // edi\n
    unsigned int v6;  // esi\n
    unsigned int *v7;  // eax\n
    unsigned int *v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int *v10;  // esi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    unsigned int *v17;  // eax, Other Possible Types: unsigned int\n
    unsigned int v18;  // edi\n
    unsigned int *v19;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v20;  // edi, Other Possible Types: unsigned int\n
    unsigned int v21;  // edx\n
\n
    v5 = v4;\n
    cgc_free(v5->field_0);\n
    v5->field_0 = 0;\n
    v5->field_4 = 0;\n
    v6 = (cgc_bn_length(a0) + cgc_bn_length(a1) + 7 >> 3) + 3 >> 2;\n
    v7 = cgc_calloc(v6, 4);\n
    v5->field_0 = v7;\n
    if (!v7)\n
        return 1;\n
    v8 = v7;\n
    v5->field_4 = v6;\n
    v20 = a0;\n
    v21 = v20->field_4;\n
    if (!v21)\n
    {\n
        return 0;\n
    }\n
    else if (!a1->field_4)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v19 = v8 + 2;\n
        v0 = 0;\n
        do\n
        {\n
            v3 = *(v20);\n
            v2 = &a1->field_0->field_0;\n
            v18 = 0;\n
            v1 = v19;\n
            do\n
            {\n
                v9 = v2[v18];\n
                v10 = v0;\n
                v11 = v3;\n
                tmp_45 = v9 * *((v11 + v10 * 4));\n
                v12 = v9 * *((v11 + v10 * 4)) >> 32;\n
                v13 = tmp_45;\n
                v14 = v18 + v10;\n
                tmp_14 = v8[v14];\n
                v8[v14] = v8[v14] + v13;\n
                v15 = v8[1 + v14];\n
                v16 = v15 + v12 + (tmp_14 + v13 < tmp_14);\n
                v8[1 + v14] = v16;\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x3<32>, edx<4>, esi<4>, 0x0<32>)) && !(v16 < v15))\n
                    continue;\n
                v17 = v19;\n
                do\n
                {\n
                    tmp_2 = *(v17);\n
                    *(v17) = *(v17) + 1;\n
                    v17 += 4;\n
                } while (!tmp_2 + 1);\n
                v18 += 1;\n
                v19 += 4;\n
            } while (v18 < a1->field_4);\n
            v20 = a0;\n
            v21 = v20->field_4;\n
            v19 = v1;\n
            v19 += 4;\n
            v0 = v0 + 1;\n
        } while (v0 < v21);\n
        return 0;\n
    }\n
}\n
", "4213336:sub_404a58": null, "4213406:sub_404a9e": null, "4213499:sub_404afb": null, "4213504:cgc_bn_slr": "int cgc_bn_slr(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_13;  // tmp #13\n
    int tmp_50;  // tmp #50\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // ecx\n
    unsigned int v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // esi\n
    void* v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
    unsigned int *v15;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ebp\n
    unsigned int v20;  // ebx\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // edi\n
    unsigned int v24;  // edx\n
\n
    v5 = a0;\n
    v6 = v4;\n
    if (v5 >= 33)\n
    {\n
        v13 = v6[1];\n
        if (!v13)\n
        {\n
            v12 = -(v5 - 33 & -32);\n
            v5 = v5 + v12 - 32;\n
        }\n
        else\n
        {\n
            v0 = v5;\n
            if (!v13)\n
                goto LABEL_404b9f;\n
LABEL_404b30:\n
            v7 = *(v6);\n
            v12 = v13 - 1;\n
            v8 = v13 & 3;\n
            v9 = 0;\n
            if (v12 >= 3)\n
            {\n
                v14 = v13 & -0x4;\n
                v9 = 0;\n
                do\n
                {\n
                    v10 = *((v7 + v13 * 4 - 4));\n
                    *((v7 + v13 * 4 - 4)) = v9;\n
                    v11 = *((v7 + v13 * 4 - 8));\n
                    *((v7 + v13 * 4 - 8)) = v10;\n
                    v9 = *((v7 + v13 * 4 - 16));\n
                    v12 = *((v7 + v13 * 4 - 12));\n
                    *((v7 + v13 * 4 - 12)) = v11;\n
                    *((v7 + v13 * 4 - 16)) = v12;\n
                    v13 -= 4;\n
                    tmp_13 = v14;\n
                    v14 -= 4;\n
                } while (tmp_13 != 4);\n
            }\n
            v6 = v4;\n
            if (v8)\n
            {\n
                v15 = v7 + v13 * 4 - 4;\n
                v12 = 0;\n
                do\n
                {\n
                    v17 = v15[v12];\n
                    v15[v12] = v9;\n
                    v12 -= 1;\n
                    v9 = v17;\n
                } while (-(v8) != v12);\n
            }\n
            while (true)\n
            {\n
LABEL_404b9f:\n
                v5 = v0 - 32;\n
                if (v5 < 33)\n
                    break;\n
                v0 = v5;\n
                v13 = *((v6 + 4));\n
                if (v13)\n
                    goto LABEL_404b30;\n
            }\n
        }\n
    }\n
    if (!v5)\n
    {\n
        return v12;\n
    }\n
    else if (!v6)\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v18 = *(v6);\n
        v12 = 0;\n
        v6 = *((v6 + 4));\n
        v2 = v6;\n
        v0 = v5;\n
        if (v6 != 1)\n
        {\n
            v3 = 32 - v0;\n
            v19 = v2;\n
            v20 = v2 & -2;\n
            v12 = 0;\n
            v1 = v18;\n
            do\n
            {\n
                v21 = *((v18 + v19 * 4 - 4));\n
                v22 = v21 << (v3 & 31);\n
                v23 = *((v1 + v19 * 4 - 8));\n
                v24 = v21 >> (v0 & 31) | v12;\n
                v12 = v23 << (v3 & 31);\n
                *((v1 + v19 * 4 - 4)) = v24;\n
                v18 = v1;\n
                *((v18 + v19 * 4 - 8)) = v23 >> (v0 & 31) | v22;\n
                v19 -= 2;\n
                tmp_50 = v20;\n
                v20 -= 2;\n
            } while (tmp_50 != 2);\n
        }\n
        if (!(v2 & 1))\n
            return v12;\n
        *((v18 + v19 * 4 - 4)) = *((v18 + v19 * 4 - 4)) >> (v0 & 31) | v12;\n
    }\n
}\n
", "4213872:cgc_bn_self_test": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern void g_40e3a8;\n
extern void g_40e428;\n
\n
int cgc_bn_self_test()\n
{\n
    unsigned int v0[3];  // [bp-0x160]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1[3];  // [bp-0x15c], Other Possible Types: unsigned int, unsigned int *\n
    void* v2;  // [bp-0x158], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x154]\n
    void* v4;  // [bp-0x150]\n
    unsigned int v5;  // [bp-0x148]\n
    struct_0 *v6;  // [bp-0x144]\n
    void* v7;  // [bp-0x140], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x13c]\n
    void* v9;  // [bp-0x138]\n
    void* v10;  // [bp-0x134]\n
    void* v11;  // [bp-0x130]\n
    unsigned int *v12;  // [bp-0x12c]\n
    void* v13;  // [bp-0x128], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x124]\n
    unsigned int v15;  // [bp-0x120]\n
    unsigned int v16;  // [bp-0x11c]\n
    unsigned int v17;  // [bp-0x118]\n
    char v18;  // [bp-0x114]\n
    char v19;  // [bp-0x110]\n
    char v20;  // [bp-0x90]\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // ebp\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // edi\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edx\n
    void* v40;  // edi, Other Possible Types: unsigned int\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ebp\n
    unsigned int v44;  // esi\n
\n
    memcpy(&v20, &g_40e3a8, 128);\n
    memcpy(&v19, &g_40e428, 128);\n
    strncpy(&v18, \"IF#S\", 4);\n
    v17 = 2647373668;\n
    v16 = 2102311562;\n
    v15 = 668969089;\n
    v14 = 2276071669;\n
    v10 = 0;\n
    v11 = 0;\n
    v1[0] = 0;\n
    v2 = 0;\n
    v3 = 0;\n
    v4 = 0;\n
    v8 = 0;\n
    v9 = 0;\n
    cgc_free(NULL);\n
    v7 = 0;\n
    v6 = cgc_calloc(2, 4);\n
    if (v6)\n
    {\n
        v7 = 2;\n
        strncpy(v6, \"P@0 \", 4);\n
        v6->field_4 = 16;\n
    }\n
    cgc_free(NULL);\n
    v13 = 0;\n
    v12 = cgc_calloc(2, 4);\n
    v22 = 0;\n
    v23 = 0;\n
    if (v12)\n
    {\n
        v13 = 2;\n
        strncpy(v12, \"UUUUU\", 5);\n
        v23 = 2;\n
    }\n
    v5 = v12;\n
    cgc_free(NULL);\n
    v2 = 0;\n
    v1[0] = cgc_calloc(3, 4);\n
    if (v1)\n
    {\n
        v2 = 3;\n
        v1[0] = 2683300496;\n
        v1[1] = 269840378;\n
        v1[2] = 1376;\n
        v22 = 3;\n
    }\n
    v0[0] = v1;\n
    cgc_bn_mul(&v10, &v6, &v12);\n
    v24 = v10;\n
    v25 = v11;\n
    v26 = (v25 < v22 ? v22 : v25);\n
    v27 = v25;\n
    while (v27 > v22)\n
    {\n
        v27 -= 1;\n
        if (!(!*((v24 + (v25 << 2) - 4))))\n
            goto LABEL_4051a2;\n
    }\n
    if (v22 > v25)\n
    {\n
        if (!(!v0[1 + v22]))\n
            goto LABEL_4051a2;\n
        if (v22 - 1 > v25)\n
        {\n
            if (!(!v0[2 + v22]))\n
                goto LABEL_4051a2;\n
            if (v22 - 2 > v25)\n
            {\n
                if (!(!v0[1 + v22]))\n
                    goto LABEL_4051a2;\n
                if (!(v22 - 3 <= v25))\n
                    goto LABEL_4051a2;\n
            }\n
        }\n
    }\n
    if (v26)\n
    {\n
        if (!(*((v24 + (v26 << 2) - 4)) == v0[1 + v26]))\n
            goto LABEL_4051a2;\n
        if (v26 != 1)\n
        {\n
            if (!(*((v24 + (v26 << 2) - 8)) == v0[2 + v26]))\n
                goto LABEL_4051a2;\n
            if (v26 != 2)\n
            {\n
                if (!(*((v24 + (v26 << 2) - 12)) == v0[1 + v26]))\n
                    goto LABEL_4051a2;\n
                if (!(!v26 - 3))\n
                    goto LABEL_4051a2;\n
            }\n
        }\n
    }\n
    cgc_bn_div(&v3, &v8, v1, &v6);\n
    v28 = v3;\n
    v29 = v4;\n
    v30 = (v29 < v23 ? v23 : v29);\n
    v31 = v29;\n
    while (v31 > v23)\n
    {\n
        v31 -= 1;\n
        if (!(!*((v28 + (v29 << 2) - 4))))\n
            goto LABEL_4051a2;\n
    }\n
    if (v23 > v29)\n
    {\n
        if (!(!*((v5 + (v23 << 2) - 4))))\n
            goto LABEL_4051a2;\n
        if (v23 - 1 > v29)\n
        {\n
            if (!(!*((v5 + (v23 << 2) - 8))))\n
                goto LABEL_4051a2;\n
            if (!(v23 - 2 <= v29))\n
                goto LABEL_4051a2;\n
        }\n
    }\n
    if (v30)\n
    {\n
        if (!(*((v28 + (v30 << 2) - 4)) == *((v5 + (v30 << 2) - 4))))\n
            goto LABEL_4051a2;\n
        if (v30 != 1)\n
        {\n
            if (!(*((v28 + (v30 << 2) - 8)) == *((v5 + (v30 << 2) - 8))))\n
                goto LABEL_4051a2;\n
            if (!(!v30 - 2))\n
                goto LABEL_4051a2;\n
        }\n
    }\n
    v32 = v9;\n
    v33 = v32;\n
    while (true)\n
    {\n
        tmp_2 = v33;\n
        v33 -= 1;\n
        if (tmp_2 < 1)\n
            break;\n
        tmp_2 = *((-4 + v8 + 4 * v32));\n
        v32 = v33;\n
        if (!(!tmp_2))\n
            goto LABEL_4051a2;\n
    }\n
    cgc_bn_div(&v3, &v8, &v12, &v6);\n
    cgc_free(v0);\n
    v1[0] = cgc_calloc(1, 4);\n
    if (v1)\n
    {\n
        v1[0] = 5;\n
        v34 = 1;\n
    }\n
    else\n
    {\n
        v34 = 0;\n
    }\n
    v35 = v3;\n
    v36 = v4;\n
    v37 = (v36 < v34 ? v34 : v36);\n
    v38 = v36;\n
    while (v38 > v34)\n
    {\n
        v38 -= 1;\n
        if (!(!*((v35 + (v36 << 2) - 4))))\n
            goto LABEL_4051a2;\n
    }\n
    if (v34 > v36)\n
    {\n
        if (!(!v1[1 + v34]))\n
            goto LABEL_4051a2;\n
        if (!(v34 - 1 <= v36))\n
            goto LABEL_4051a2;\n
    }\n
    if (v37)\n
    {\n
        if (!(*((v35 + (v37 << 2) - 4)) == v1[1 + v37]))\n
            goto LABEL_4051a2;\n
        if (!(!v37 - 1))\n
            goto LABEL_4051a2;\n
    }\n
    cgc_free(v1);\n
    v2 = 0;\n
    v1 = cgc_calloc(2, 4);\n
    if (!v1)\n
    {\n
        v39 = 0;\n
    }\n
    else\n
    {\n
        v2 = 2;\n
        *(v1) = 3026457541;\n
        v1[1] = 4;\n
        v39 = 2;\n
    }\n
    v40 = v8;\n
    v41 = v9;\n
    v42 = (v41 < v39 ? v39 : v41);\n
    v43 = v41;\n
    while (v43 > v39)\n
    {\n
        v43 -= 1;\n
        if (!(!*((-4 + v40 + 4 * v41))))\n
            goto LABEL_4051a2;\n
    }\n
    if (v39 > v41)\n
    {\n
        if (!(!v1[1 + v39]))\n
            goto LABEL_4051a2;\n
        if (v39 - 1 > v41)\n
        {\n
            if (!(!v1[2 + v39]))\n
                goto LABEL_4051a2;\n
            if (!(v39 - 2 <= v41))\n
                goto LABEL_4051a2;\n
        }\n
    }\n
    if (v42)\n
    {\n
        if (!(*((-4 + v40 + 4 * v42)) == v1[1 + v42]))\n
            goto LABEL_4051a2;\n
        if (v42 != 1)\n
        {\n
            if (!(*((-8 + v40 + 4 * v42)) == v1[2 + v42]))\n
                goto LABEL_4051a2;\n
            if (!(!v42 - 2))\n
                goto LABEL_4051a2;\n
        }\n
    }\n
    cgc_bn_from_bytes(&v6, &v20, 128);\n
    cgc_bn_from_bytes(&v3, &v14, 20);\n
    cgc_bn_from_bytes(&v12, &v19, 128);\n
    cgc_bn_modexp(&v10, &v6, &v3, &v12);\n
    cgc_bn_const(v1, 1);\n
    if (!cgc_bn_cmp(&v10, v1))\n
    {\n
        v44 = 0;\n
        goto LABEL_4051bf;\n
    }\n
LABEL_4051a2:\n
    cgc_fdprintf(2, \"BN self-test FAILED!\\n
\");\n
    v44 = 1;\n
    v40 = v8;\n
LABEL_4051bf:\n
    cgc_free(v6);\n
    cgc_free(v12);\n
    cgc_free(v10);\n
    cgc_free(v1);\n
    cgc_free(v3);\n
    cgc_free(v40);\n
    return v44;\n
}\n
", "4215320:sub_405218": null, "4215328:cgc_best_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_best_init(struct_0 *v13, char *a0)\n
{\n
    char v0[144];  // [bp-0x1d], Other Possible Types: char\n
    int tmp_266;  // tmp #266\n
    int tmp_292;  // tmp #292\n
    int tmp_320;  // tmp #320\n
    int tmp_348;  // tmp #348\n
    int tmp_376;  // tmp #376\n
    int tmp_404;  // tmp #404\n
    int tmp_432;  // tmp #432\n
    int tmp_460;  // tmp #460\n
    int tmp_488;  // tmp #488\n
    int tmp_695;  // tmp #695\n
    int tmp_178;  // tmp #178\n
    int tmp_264;  // tmp #264\n
    int tmp_456;  // tmp #456\n
    int tmp_647;  // tmp #647\n
    int tmp_280;  // tmp #280\n
    int tmp_27;  // tmp #27\n
    int tmp_304;  // tmp #304\n
    int tmp_226;  // tmp #226\n
    int tmp_701;  // tmp #701\n
    int tmp_133;  // tmp #133\n
    int tmp_135;  // tmp #135\n
    char v1[144];  // [bp-0x1c]\n
    char v2[144];  // [bp-0x1b]\n
    char v3[144];  // [bp-0x1a]\n
    char v4[144];  // [bp-0x19]\n
    char v5;  // [bp-0x18]\n
    char v6[144];  // [bp-0x17]\n
    char v7[144];  // [bp-0x16], Other Possible Types: char\n
    char v8[144];  // [bp-0x15]\n
    char v9;  // [bp-0x14]\n
    char v10[144];  // [bp-0x13]\n
    char v11;  // [bp-0x12]\n
    char v12[144];  // [bp-0x11]\n
    char v14[144];  // eax\n
    char v15[144];  // esi\n
    char v17[144];  // ch\n
    char v18;  // dh\n
    char v19[144];  // cl\n
    char v20[144];  // bl\n
    char v21[144];  // dl\n
    char v22[144];  // ch\n
    char v23[144];  // dh\n
    char v24;  // cl\n
    char v25[144];  // dh\n
    char v26[144];  // ch\n
    char v27;  // cl\n
    char v28[144];  // bh\n
    char v29[144];  // bl\n
    char v30;  // bh\n
    char v31[144];  // dh\n
    char v32[144];  // ch\n
    char v34[144];  // bl\n
    char v35[144];  // ch\n
    char v36[144];  // dl\n
    char v37[144];  // cl\n
\n
    v14 = cgc_malloc(144);\n
    v13->field_4 = v14;\n
    if (!v14)\n
        return 1;\n
    v15 = v14;\n
    cgc_memcpy(v0, a0 + 8, 8);\n
    v8[0] = v1 ^ v0 ^ v2 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;\n
    tmp_266 = __ROL__(v0, 3);\n
    v0[0] = __ROL__(v0, 3);\n
    v14[0] = tmp_266 ^ 183;\n
    tmp_292 = __ROL__(v1, 3);\n
    v1[0] = __ROL__(v1, 3);\n
    v14[1] = tmp_292 ^ 110;\n
    tmp_320 = __ROL__(v2, 3);\n
    v2[0] = __ROL__(v2, 3);\n
    v14[2] = tmp_320 ^ 37;\n
    tmp_348 = __ROL__(v3, 3);\n
    v3[0] = __ROL__(v3, 3);\n
    v14[3] = tmp_348 ^ 220;\n
    tmp_376 = __ROL__(v4, 3);\n
    v4[0] = __ROL__(v4, 3);\n
    v14[4] = tmp_376 ^ 147;\n
    tmp_404 = __ROL__(v5, 3);\n
    v5 = __ROL__(v5, 3);\n
    v14[5] = tmp_404 ^ 74;\n
    tmp_432 = __ROL__(v6, 3);\n
    v6[0] = __ROL__(v6, 3);\n
    v14[6] = tmp_432 ^ 1;\n
    tmp_460 = __ROL__(v7, 3);\n
    v7[0] = __ROL__(v7, 3);\n
    v14[7] = tmp_460 ^ 184;\n
    tmp_488 = __ROL__(v1, 3);\n
    v1[0] = __ROL__(v1, 3);\n
    v14[8] = tmp_488 ^ 111;\n
    v14[9] = __ROL__(v2, 3) ^ 38;\n
    v17 = v3;\n
    v14[10] = __ROL__(v3, 3) ^ 221;\n
    v14[0] = v4;\n
    v15[11] = __ROL__(v4, 3) ^ 148;\n
    v18 = v5;\n
    v15[12] = __ROL__(v5, 3) ^ 75;\n
    v14[0] = v6;\n
    v15[13] = __ROL__(v6, 3) ^ 2;\n
    v19 = v7;\n
    *(&v15[14]) = __ROL__(v19, 3) ^ 185;\n
    v20 = v8;\n
    v15[15] = __ROL__(v8, 3) ^ 112;\n
    tmp_695 = __ROL__(v2, 6);\n
    v2[0] = __ROL__(v2, 6);\n
    v15[16] = tmp_695 ^ 39;\n
    v15[17] = __ROL__(v3, 6) ^ 222;\n
    v15[18] = __ROL__(v4, 6) ^ 149;\n
    v15[19] = __ROL__(v18, 6) ^ 76;\n
    v15[20] = __ROL__(v14[0], 6) ^ 3;\n
    *(&v15[21]) = __ROL__(v19, 6) ^ 186;\n
    *(&v15[22]) = __ROL__(v20, 6) ^ 113;\n
    v21 = v0;\n
    v15[23] = __ROL__(v0, 3) ^ 40;\n
    *(&v3[0]) = __ROL__(v17, 1);\n
    *(&v15[24]) = __ROL__(v17, 1) ^ 223;\n
    v15[25] = __ROL__(v14[0], 1) ^ 150;\n
    v15[26] = __ROL__(v18, 1) ^ 77;\n
    v15[27] = __ROL__(v14[0], 1) ^ 4;\n
    *(&v15[28]) = __ROL__(v19, 1) ^ 187;\n
    *(&v15[29]) = __ROL__(v20, 1) ^ 114;\n
    v15[30] = __ROL__(v0, 6) ^ 41;\n
    v22 = v1;\n
    v15[31] = __ROL__(v1, 3) ^ 224;\n
    v4[0] = __ROL__(v14[0], 4);\n
    v15[32] = __ROL__(v14[0], 4) ^ 151;\n
    v15[33] = __ROL__(v18, 4) ^ 78;\n
    v15[34] = __ROL__(v14[0], 4) ^ 5;\n
    *(&v15[35]) = __ROL__(v19, 4) ^ 188;\n
    *(&v15[36]) = __ROL__(v20, 4) ^ 115;\n
    v15[37] = __ROL__(v0, 1) ^ 42;\n
    v15[38] = __ROL__(v1, 6) ^ 225;\n
    v14[0] = v2;\n
    v15[39] = __ROL__(v2, 3) ^ 152;\n
    v5 = __ROR__(v18, 1);\n
    v15[40] = __ROR__(v18, 1) ^ 79;\n
    v15[41] = __ROR__(v14[0], 1) ^ 6;\n
    *(&v15[42]) = __ROR__(v19, 1) ^ 189;\n
    *(&v15[43]) = __ROR__(v20, 1) ^ 116;\n
    *(&v15[44]) = __ROL__(v21, 4) ^ 43;\n
    *(&v15[45]) = __ROL__(v22, 1) ^ 226;\n
    v15[46] = __ROL__(v14[0], 6) ^ 153;\n
    v23 = v3;\n
    v15[47] = __ROL__(v3, 3) ^ 80;\n
    v6[0] = __ROL__(v14[0], 2);\n
    v15[48] = __ROL__(v14[0], 2) ^ 7;\n
    *(&v15[49]) = __ROL__(v19, 2) ^ 190;\n
    *(&v15[50]) = __ROL__(v20, 2) ^ 117;\n
    *(&v15[51]) = __ROR__(v21, 1) ^ 44;\n
    *(&v15[52]) = __ROL__(v22, 4) ^ 227;\n
    v15[53] = __ROL__(v14[0], 1) ^ 154;\n
    v15[54] = __ROL__(v3, 6) ^ 81;\n
    v14[0] = v4;\n
    v15[55] = __ROL__(v4, 3) ^ 8;\n
    *(&v7[0]) = __ROL__(v19, 5);\n
    *(&v15[56]) = __ROL__(v19, 5) ^ 191;\n
    *(&v15[57]) = __ROL__(v20, 5) ^ 118;\n
    *(&v15[58]) = __ROL__(v21, 2) ^ 45;\n
    *(&v15[59]) = __ROR__(v22, 1) ^ 228;\n
    v15[60] = __ROL__(v14[0], 4) ^ 155;\n
    v15[61] = __ROL__(v3, 1) ^ 82;\n
    v15[62] = __ROL__(v4, 6) ^ 9;\n
    v24 = v5;\n
    v15[63] = __ROL__(v5, 3) ^ 192;\n
    *(&v8[0]) = v20;\n
    *(&v15[64]) = v20 ^ 119;\n
    *(&v0[0]) = __ROL__(v21, 5);\n
    *(&v15[65]) = __ROL__(v21, 5) ^ 46;\n
    *(&v1[0]) = __ROL__(v22, 2);\n
    v15[66] = v1 ^ 229;\n
    v2[0] = __ROR__(v14[0], 1);\n
    v15[67] = __ROR__(v14[0], 1) ^ 156;\n
    *(&v3[0]) = __ROL__(v23, 4);\n
    *(&v15[68]) = __ROL__(v23, 4) ^ 83;\n
    v4[0] = __ROL__(v14[0], 1);\n
    v15[69] = __ROL__(v14[0], 1) ^ 10;\n
    v5 = __ROL__(v24, 6);\n
    v15[70] = __ROL__(v24, 6) ^ 193;\n
    tmp_178 = __ROL__(v6, 3);\n
    v6[0] = __ROL__(v6, 3);\n
    v15[71] = tmp_178 ^ 120;\n
    cgc_memcpy(v0, a0, 8);\n
    v25 = v3;\n
    v26 = v4;\n
    v9 = v5;\n
    v12[0] = v6;\n
    v10[0] = v4 ^ v5 ^ v6 ^ v2 ^ v3 ^ v0 ^ v1 ^ v7;\n
    tmp_264 = __ROL__(v0, 3);\n
    v0[0] = __ROL__(v0, 3);\n
    v15[72] = tmp_264 ^ 47;\n
    v15[73] = __ROL__(v1, 3) ^ 230;\n
    v15[74] = __ROL__(v2, 3) ^ 157;\n
    v15[75] = __ROL__(v3, 3) ^ 84;\n
    v15[76] = __ROL__(v4, 3) ^ 11;\n
    v27 = v9;\n
    *(&v15[77]) = __ROL__(v19, 3) ^ 194;\n
    v15[78] = __ROL__(v12, 3) ^ 121;\n
    v15[79] = __ROL__(v7, 3) ^ 48;\n
    tmp_456 = __ROL__(v1, 6);\n
    v1[0] = __ROL__(v1, 6);\n
    v15[80] = tmp_456 ^ 231;\n
    v15[81] = __ROL__(v2, 6) ^ 158;\n
    v15[82] = __ROL__(v3, 6) ^ 85;\n
    v15[83] = __ROL__(v4, 6) ^ 12;\n
    v15[84] = __ROL__(v9, 6) ^ 195;\n
    v28 = v12;\n
    v15[85] = __ROL__(v12, 6) ^ 122;\n
    v14[0] = v7;\n
    v15[86] = __ROL__(v7, 6) ^ 49;\n
    v29 = v10;\n
    v15[87] = __ROL__(v10, 3) ^ 232;\n
    tmp_647 = __ROL__(v2, 1);\n
    v2[0] = __ROL__(v2, 1);\n
    v15[88] = tmp_647 ^ 159;\n
    v15[89] = __ROL__(v3, 1) ^ 86;\n
    *(&v15[90]) = __ROL__(v26, 1) ^ 13;\n
    tmp_280 = v28;\n
    v15[91] = __ROL__(v27, 1) ^ 196;\n
    tmp_27 = __ROL__(v28, 1) ^ 123;\n
    tmp_304 = v14[0];\n
    v30 = v14[0];\n
    v15[92] = tmp_27;\n
    v15[93] = __ROL__(v14[0], 1) ^ 50;\n
    *(&v15[94]) = __ROL__(v29, 6) ^ 233;\n
    v14[0] = v0;\n
    v15[95] = __ROL__(v0, 3) ^ 160;\n
    *(&v3[0]) = __ROL__(v25, 4);\n
    *(&v15[96]) = __ROL__(v25, 4) ^ 87;\n
    *(&v15[97]) = __ROL__(v26, 4) ^ 14;\n
    v15[98] = __ROL__(v9, 4) ^ 197;\n
    v15[99] = __ROL__(tmp_280, 4) ^ 124;\n
    v15[100] = __ROL__(tmp_304, 4) ^ 51;\n
    *(&v15[101]) = __ROL__(v29, 1) ^ 234;\n
    v15[102] = __ROL__(v0, 6) ^ 161;\n
    v31 = v1;\n
    v15[103] = __ROL__(v1, 3) ^ 88;\n
    *(&v4[0]) = __ROR__(v26, 1);\n
    *(&v15[104]) = __ROR__(v26, 1) ^ 15;\n
    v32 = tmp_280;\n
    v15[105] = __ROR__(v9, 1) ^ 198;\n
    v15[106] = __ROR__(tmp_280, 1) ^ 125;\n
    v15[107] = __ROR__(tmp_304, 1) ^ 52;\n
    *(&v15[108]) = __ROL__(v29, 4) ^ 235;\n
    v15[109] = __ROL__(v0, 1) ^ 162;\n
    v15[110] = __ROL__(v1, 6) ^ 89;\n
    v34 = v2;\n
    v15[111] = __ROL__(v2, 3) ^ 16;\n
    v5 = __ROL__(v9, 2);\n
    v15[112] = v5 ^ 199;\n
    tmp_226 = v32;\n
    *(&v15[113]) = __ROL__(v32, 2) ^ 126;\n
    v11 = v30;\n
    v15[114] = __ROL__(v11, 2) ^ 53;\n
    *(&v15[115]) = __ROR__(v29, 1) ^ 236;\n
    v15[116] = __ROL__(v14[0], 4) ^ 163;\n
    *(&v15[117]) = __ROL__(v31, 1) ^ 90;\n
    *(&v15[118]) = __ROL__(v34, 6) ^ 17;\n
    v35 = v3;\n
    v15[119] = __ROL__(v3, 3) ^ 200;\n
    v6[0] = __ROL__(tmp_226, 5);\n
    v15[120] = __ROL__(tmp_226, 5) ^ 127;\n
    v15[121] = __ROL__(v11, 5) ^ 54;\n
    v15[122] = __ROL__(v10, 2) ^ 237;\n
    v15[123] = __ROR__(v14[0], 1) ^ 164;\n
    *(&v15[124]) = __ROL__(v31, 4) ^ 91;\n
    *(&v15[125]) = __ROL__(v34, 1) ^ 18;\n
    v15[126] = __ROL__(v3, 6) ^ 201;\n
    v36 = v4;\n
    v15[127] = __ROL__(v4, 3) ^ 128;\n
    v7 = v11;\n
    v15[128] = v11 ^ 55;\n
    v15[129] = __ROL__(v10, 5) ^ 238;\n
    v0 = __ROL__(v14[0], 2);\n
    v15[130] = __ROL__(v14[0], 2) ^ 165;\n
    *(&v1[0]) = __ROR__(v31, 1);\n
    *(&v15[131]) = __ROR__(v31, 1) ^ 92;\n
    *(&v2[0]) = __ROL__(v34, 4);\n
    *(&v15[132]) = __ROL__(v34, 4) ^ 19;\n
    tmp_701 = __ROL__(v3, 1);\n
    v3[0] = __ROL__(v3, 1);\n
    v14[0] = tmp_701 ^ 202;\n
    v37 = v4;\n
    v15[133] = v14[0];\n
    *(&v4[0]) = __ROL__(v37, 6);\n
    *(&v15[134]) = __ROL__(v37, 6) ^ 129;\n
    tmp_133 = v5;\n
    tmp_135 = __ROL__(v5, 3);\n
    v5 = __ROL__(v5, 3);\n
    v15[135] = tmp_135 ^ 56;\n
    v8[0] = v10;\n
    v15[136] = v8 ^ 239;\n
    v15[137] = __ROL__(v14[0], 5) ^ 166;\n
    *(&v15[138]) = __ROL__(v31, 2) ^ 93;\n
    *(&v15[139]) = __ROR__(v34, 1) ^ 20;\n
    *(&v15[140]) = __ROL__(v35, 4) ^ 203;\n
    *(&v15[141]) = __ROL__(v36, 1) ^ 130;\n
    v15[142] = __ROL__(tmp_133, 6) ^ 57;\n
    v15[143] = __ROL__(v6, 3) ^ 240;\n
    return 0;\n
}\n
", "4217307:sub_4059db": null, "4217312:cgc_best_destroy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    void* field_4;\n
} struct_0;\n
\n
int cgc_best_destroy(struct_0 *v0)\n
{\n
    return cgc_free(v0->field_4);\n
}\n
", "4217348:sub_405a04": null, "4217360:cgc_best_encode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[64];\n
    char field_40;\n
    char field_41;\n
    char field_42;\n
    char field_43;\n
    char field_44;\n
    char field_45;\n
    char field_46;\n
    char field_47;\n
} struct_1;\n
\n
int cgc_best_encode(struct_0 *v11, char a0[8])\n
{\n
    char v0;  // [bp-0x18]\n
    int tmp_6;  // tmp #6\n
    int tmp_11;  // tmp #11\n
    int tmp_16;  // tmp #16\n
    int tmp_21;  // tmp #21\n
    int tmp_26;  // tmp #26\n
    int tmp_31;  // tmp #31\n
    int tmp_36;  // tmp #36\n
    char v1;  // [bp-0x17]\n
    char v2;  // [bp-0x16]\n
    char v3;  // [bp-0x15]\n
    char v4;  // [bp-0x14]\n
    char v5;  // [bp-0x13]\n
    char v6;  // [bp-0x12]\n
    char v7;  // [bp-0x11]\n
    char v8;  // [bp-0x10]\n
    char v9;  // [bp-0xc]\n
    char v10;  // [bp-0x8]\n
    char v12[8];  // edi\n
    char v13[72];  // esi\n
\n
    v12 = a0;\n
    v13 = v11->field_4;\n
    v0 = v12[0];\n
    v1 = v12[1];\n
    v2 = v12[2];\n
    v3 = v12[3];\n
    v4 = v12[4];\n
    v5 = v12[5];\n
    v6 = v12[6];\n
    v7 = v12[7];\n
    cgc_R(&v0, *(&v0), *(&v4), *(&v8), *(&v9), *(&v10));\n
    cgc_R(&v0, *(&v0), *(&v4), *(&v8), *(&v9), *(&v10));\n
    cgc_R();\n
    cgc_R();\n
    cgc_R();\n
    cgc_R();\n
    cgc_R();\n
    cgc_R();\n
    tmp_6 = v1 + v13[65];\n
    tmp_11 = v2 + v13[66];\n
    tmp_16 = v3 ^ v13[67];\n
    tmp_21 = v4 ^ v13[68];\n
    tmp_26 = v5 + v13[69];\n
    tmp_31 = v6 + v13[70];\n
    tmp_36 = v7 ^ v13[71];\n
    v12[0] = v0 ^ v13[64];\n
    v12[1] = tmp_6;\n
    v12[2] = tmp_11;\n
    v12[3] = tmp_16;\n
    v12[4] = tmp_21;\n
    v12[5] = tmp_26;\n
    v12[6] = tmp_31;\n
    v12[7] = tmp_36;\n
    return 0;\n
}\n
", "4217652:sub_405b34": null, "4217664:cgc_best_decode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char field_4;\n
    char field_5;\n
    char field_6;\n
    char field_7;\n
    char field_8;\n
    char field_9;\n
    char field_a;\n
    char field_b;\n
    char field_c;\n
    char field_d;\n
    char field_e;\n
    char field_f;\n
    char field_10;\n
    char field_11;\n
    char field_12;\n
    char field_13;\n
    char field_14;\n
    char field_15;\n
    char field_16;\n
    char field_17;\n
    char field_18;\n
    char field_19;\n
    char field_1a;\n
    char field_1b;\n
    char field_1c;\n
    char field_1d;\n
    char field_1e;\n
    char field_1f;\n
    char field_20;\n
    char field_21;\n
    char field_22;\n
    char field_23;\n
    char field_24;\n
    char field_25;\n
    char field_26;\n
    char field_27;\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
    char field_2b;\n
    char field_2c;\n
    char field_2d;\n
    char field_2e;\n
    char field_2f;\n
    char field_30;\n
    char field_31;\n
    char field_32;\n
    char field_33;\n
    char field_34;\n
    char field_35;\n
    char field_36;\n
    char field_37;\n
    char field_38;\n
    char field_39;\n
    char field_3a;\n
    char field_3b;\n
    char field_3c;\n
    char field_3d;\n
    char field_3e;\n
    char field_3f;\n
    char field_40;\n
    char field_41;\n
    char field_42;\n
    char field_43;\n
    char field_44;\n
    char field_45;\n
    char field_46;\n
    char field_47;\n
    char field_48;\n
    char field_49;\n
    char field_4a;\n
    char field_4b;\n
    char field_4c;\n
    char field_4d;\n
    char field_4e;\n
    char field_4f;\n
    char field_50;\n
    char field_51;\n
    char field_52;\n
    char field_53;\n
    char field_54;\n
    char field_55;\n
    char field_56;\n
    char field_57;\n
    char field_58;\n
    char field_59;\n
    char field_5a;\n
    char field_5b;\n
    char field_5c;\n
    char field_5d;\n
    char field_5e;\n
    char field_5f;\n
    char field_60;\n
    char field_61;\n
    char field_62;\n
    char field_63;\n
    char field_64;\n
    char field_65;\n
    char field_66;\n
    char field_67;\n
    char field_68;\n
    char field_69;\n
    char field_6a;\n
    char field_6b;\n
    char field_6c;\n
    char field_6d;\n
    char field_6e;\n
    char field_6f;\n
    char field_70;\n
    char field_71;\n
    char field_72;\n
    char field_73;\n
    char field_74;\n
    char field_75;\n
    char field_76;\n
    char field_77;\n
    char field_78;\n
    char field_79;\n
    char field_7a;\n
    char field_7b;\n
    char field_7c;\n
    char field_7d;\n
    char field_7e;\n
    char field_7f;\n
    char field_80;\n
    char field_81;\n
    char field_82;\n
    char field_83;\n
    char field_84;\n
    char field_85;\n
    char field_86;\n
    char field_87;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_best_decode(struct_0 *v10, char a0[8])\n
{\n
    char v0;  // [bp-0x1a]\n
    int tmp_61;  // tmp #61\n
    int tmp_77;  // tmp #77\n
    int tmp_33;  // tmp #33\n
    int tmp_44;  // tmp #44\n
    int tmp_47;  // tmp #47\n
    int tmp_83;  // tmp #83\n
    int tmp_126;  // tmp #126\n
    int tmp_132;  // tmp #132\n
    int tmp_152;  // tmp #152\n
    int tmp_22;  // tmp #22\n
    int tmp_26;  // tmp #26\n
    int tmp_34;  // tmp #34\n
    int tmp_66;  // tmp #66\n
    int tmp_109;  // tmp #109\n
    int tmp_112;  // tmp #112\n
    int tmp_146;  // tmp #146\n
    int tmp_184;  // tmp #184\n
    int tmp_194;  // tmp #194\n
    int tmp_23;  // tmp #23\n
    int tmp_27;  // tmp #27\n
    int tmp_72;  // tmp #72\n
    int tmp_80;  // tmp #80\n
    int tmp_91;  // tmp #91\n
    int tmp_102;  // tmp #102\n
    int tmp_150;  // tmp #150\n
    int tmp_153;  // tmp #153\n
    int tmp_168;  // tmp #168\n
    int tmp_37;  // tmp #37\n
    int tmp_60;  // tmp #60\n
    int tmp_71;  // tmp #71\n
    int tmp_119;  // tmp #119\n
    int tmp_158;  // tmp #158\n
    int tmp_162;  // tmp #162\n
    int tmp_475;  // tmp #475\n
    int tmp_8;  // tmp #8\n
    int tmp_11;  // tmp #11\n
    int tmp_309;  // tmp #309\n
    int tmp_88;  // tmp #88\n
    int tmp_92;  // tmp #92\n
    int tmp_1;  // tmp #1\n
    int tmp_38;  // tmp #38\n
    int tmp_48;  // tmp #48\n
    int tmp_55;  // tmp #55\n
    int tmp_87;  // tmp #87\n
    int tmp_94;  // tmp #94\n
    int tmp_129;  // tmp #129\n
    int tmp_135;  // tmp #135\n
    char v1;  // [bp-0x19]\n
    char v2;  // [bp-0x18]\n
    char v3;  // [bp-0x17]\n
    char v4;  // [bp-0x16]\n
    char v5;  // [bp-0x15]\n
    char v6;  // [bp-0x14]\n
    char v7;  // [bp-0x13]\n
    char v8;  // [bp-0x12]\n
    char v9;  // [bp-0x11]\n
    char v11[8];  // esi\n
    char v12[136];  // ecx\n
    unsigned int v13;  // edi\n
    unsigned int v15;  // eax\n
    char v16;  // dh\n
    char v17;  // bh\n
    char v18;  // bl\n
    char v19;  // dl\n
    unsigned int v20;  // eax\n
    char v24;  // bl\n
    char v26;  // bh\n
    unsigned int v27;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // ebp\n
    unsigned int v32;  // edx\n
    char v33;  // bl\n
    char v34;  // bh\n
    unsigned int v35;  // edx\n
    unsigned int v38;  // eax\n
    char v39;  // bl\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // ebp\n
    unsigned int v43;  // edx\n
    char v44;  // bh\n
    char v47;  // bl\n
    unsigned int v49;  // ebp\n
    unsigned int v50;  // ebp\n
    unsigned int v52;  // edx\n
    unsigned int v55;  // ebp\n
    unsigned int v56;  // ebp\n
    unsigned int v58;  // ebp\n
    unsigned int v60;  // ebx\n
\n
    v11 = a0;\n
    v12 = v10->field_4;\n
    v0 = v11[2];\n
    v2 = v11[7];\n
    v3 = v11[1] - v12[65];\n
    v6 = v11[3] ^ v12[67];\n
    v2 ^= v12[71];\n
    v9 = (v11[0] ^ v12[64]) - (v11[1] - v12[65]);\n
    tmp_61 = v0 - (v12[66] + (v11[3] ^ v12[67]));\n
    v0 -= v12[66] + (v11[3] ^ v12[67]);\n
    v1 = v11[5] - v12[69] - ((v11[4] ^ v12[68]) - (v11[5] - v12[69]));\n
    tmp_77 = v11[6] - (v12[70] + v2);\n
    v2 -= v11[6] - (v12[70] + v2);\n
    v7 = v12[130] ^ (v11[4] ^ v12[68]) - (v11[5] - v12[69]) - (v9 - ((v11[4] ^ v12[68]) - (v11[5] - v12[69])) + tmp_77 - (tmp_61 - tmp_77));\n
    v13 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = tmp_61 - tmp_77 - (v9 - ((v11[4] ^ v12[68]) - (v11[5] - v12[69])) - (tmp_61 - tmp_77));\n
    v5 = v12[56] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_77 + v11[5] + v9 + -1 * v12[128] + -1 * tmp_61 + -1 * v12[69] + -1 * (v11[4] ^ v12[68])];\n
    v15 = tmp_77 - (tmp_61 - tmp_77) - ((v11[4] ^ v12[68]) - (v11[5] - v12[69]) - (v9 - ((v11[4] ^ v12[68]) - (v11[5] - v12[69])) + tmp_77 - (tmp_61 - tmp_77)) + v12[131]);\n
    v4 = v12[59] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v15];\n
    v16 = v6 - (v0 + v2) - (v3 - (v9 + v1) - (v6 - (v0 + v2)));\n
    v17 = v12[60] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v2 + v0 + v3 + -1 * v12[132] + -1 * v6 + -1 * v1 + -1 * v9];\n
    *(&v15) = v12[134] ^ v1 - (v3 - (v9 + v1) + v2 - (v6 - (v0 + v2)));\n
    v18 = v12[63] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v2 + v0 + v2 + v3 + v2 + v0 + v2 + -1 * v12[135] + -1 * v6 + -1 * v1 + -1 * v9 + -1 * v1 + -1 * v6];\n
    v0 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v8 ^ v12[129])];\n
    *(&v15) = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v16 ^ v12[133])];\n
    v1 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v16 ^ v12[133])];\n
    v6 = *(&v15) - (v12[58] + v4);\n
    tmp_33 = v0 - v12[57];\n
    v0 -= v12[57];\n
    tmp_44 = v5 - tmp_33;\n
    v19 = v5 - tmp_33;\n
    tmp_47 = v17 - (v1 - v12[61]);\n
    v1 = v1 - v12[61] - (v17 - (v1 - v12[61]));\n
    v5 = v18 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v15] - (v12[62] + v18));\n
    v7 = v12[122] ^ tmp_47 - (v19 - tmp_47 + *((v13 + v15 - 26332)) - (v12[62] + v18) - (v6 - (*((v13 + v15 - 26332)) - (v12[62] + v18))));\n
    tmp_83 = *((v13 + v15 - 26332)) - (v12[62] + v18) - (v6 - (*((v13 + v15 - 26332)) - (v12[62] + v18))) - (tmp_47 - (v19 - tmp_47 + *((v13 + v15 - 26332)) - (v12[62] + v18) - (v6 - (*((v13 + v15 - 26332)) - (v12[62] + v18)))) + v12[123]);\n
    v8 = v6 - (*((v13 + v15 - 26332)) - (v12[62] + v18)) - (v19 - tmp_47 - (v6 - (*((v13 + v15 - 26332)) - (v12[62] + v18))));\n
    v20 = v19 - tmp_47 - (v6 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v15] - (v12[62] + v18))) - v12[120];\n
    v3 = v12[48] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v20];\n
    v2 = v12[51] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_83];\n
    tmp_126 = v5 - (v4 - (v6 + v5));\n
    tmp_132 = v4 - (v6 + v5) - (v0 - (tmp_44 + v1) - (v4 - (v6 + v5)));\n
    v4 = v12[52] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v5 + v6 + v0 + -1 * v12[124] + -1 * v4 + -1 * v1 + -1 * tmp_44];\n
    tmp_152 = v12[126] ^ v1 - (v0 - (tmp_44 + v1) + tmp_126);\n
    v0 = v12[55] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_126 - (v1 - (v0 - (tmp_44 + v1) + tmp_126) + v12[127])];\n
    v24 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v8 ^ v12[121])];\n
    v26 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (tmp_132 ^ v12[125])];\n
    v27 = tmp_152;\n
    *(&v27) = (&_GLOBAL_OFFSET_TABLE_)[26332 + v27];\n
    v1 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v7] - (v12[50] + v2);\n
    v5 = v24 - v12[49];\n
    tmp_22 = v27 - (v12[54] + v0);\n
    tmp_26 = v3 - (v24 - v12[49]);\n
    v3 -= v24 - v12[49];\n
    tmp_34 = v26 - v12[53] - (v4 - (v26 - v12[53]));\n
    v0 -= v27 - (v12[54] + v0);\n
    v7 = v12[114] ^ v4 - (v26 - v12[53]) - (tmp_26 - (v4 - (v26 - v12[53])) + tmp_22 - (v1 - tmp_22));\n
    tmp_66 = tmp_22 - (v1 - tmp_22) - (v4 - (v26 - v12[53]) - (tmp_26 - (v4 - (v26 - v12[53])) + tmp_22 - (v1 - tmp_22)) + v12[115]);\n
    v8 = v1 - tmp_22 - (tmp_26 - (v4 - (v26 - v12[53])) - (v1 - tmp_22));\n
    v4 = v12[40] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_26 - (v4 - (v26 - v12[53])) - (v1 - tmp_22) - v12[112]];\n
    v29 = tmp_66;\n
    v6 = v12[43] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v29];\n
    tmp_109 = v0 - (v2 - (v1 + v0));\n
    tmp_112 = v5 - (v3 + tmp_34) - (v2 - (v1 + v0));\n
    v2 = v2 - (v1 + v0) - (v5 - (v3 + tmp_34) - (v2 - (v1 + v0)));\n
    v30 = tmp_112 - v12[116];\n
    tmp_146 = v12[47] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_109 - (tmp_34 - (v5 - (v3 + tmp_34) + tmp_109) + v12[119])];\n
    v1 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v8 ^ v12[113])];\n
    v0 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v7];\n
    v32 = v12[118] ^ tmp_34 - (v5 - (v3 + tmp_34) + tmp_109);\n
    v0 -= v12[42] + v6;\n
    *(&v29) = (&_GLOBAL_OFFSET_TABLE_)[26332 + v32] - (v12[46] + tmp_146);\n
    tmp_184 = v1 - v12[41];\n
    v1 -= v12[41];\n
    tmp_194 = v4 - tmp_184;\n
    v4 -= tmp_184;\n
    v33 = (v12[44] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v30]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[117])] - v12[45]);\n
    *(&v29) = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[117])] - v12[45] - ((v12[44] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v30]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[117])] - v12[45]));\n
    v34 = tmp_146 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v32] - (v12[46] + tmp_146));\n
    *(&v32) = tmp_194 - ((v12[44] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v30]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[117])] - v12[45]));\n
    v3 = v0 - v29;\n
    v7 = v12[106] ^ v33 - (v32 + v29 - (v0 - v29));\n
    tmp_23 = v29 - (v0 - v29) - (v33 - (v32 + v29 - (v0 - v29)) + v12[107]);\n
    tmp_27 = v32 - v3;\n
    v3 -= v32 - v3;\n
    v35 = tmp_27 - v12[104];\n
    v5 = v12[32] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v35];\n
    v2 = v12[35] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_23];\n
    tmp_72 = v6 - (v0 + v34) - (v1 - (v4 + v29) - (v6 - (v0 + v34)));\n
    tmp_80 = v12[36] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v34 + v0 + v1 + -1 * v12[108] + -1 * v6 + -1 * v29 + -1 * v4];\n
    tmp_91 = v12[110] ^ v29 - (v1 - (v4 + v29) + v34 - (v6 - (v0 + v34)));\n
    tmp_102 = v12[39] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v34 + v0 + v34 + v1 + v34 + v0 + v34 + -1 * v12[111] + -1 * v6 + -1 * v29 + -1 * v4 + -1 * v29 + -1 * v6];\n
    v1 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v3 ^ v12[105])];\n
    v3 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (tmp_72 ^ v12[109])];\n
    v38 = tmp_91;\n
    v4 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v7] - (v12[34] + v2);\n
    tmp_132 = v1 - v12[33];\n
    v1 -= v12[33];\n
    tmp_150 = v5 - tmp_132;\n
    tmp_153 = tmp_80 - (v3 - v12[37]);\n
    v3 = v3 - v12[37] - (tmp_80 - (v3 - v12[37]));\n
    v5 = tmp_102 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v38] - (v12[38] + tmp_102));\n
    v39 = tmp_150;\n
    tmp_168 = v4 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v38] - (v12[38] + tmp_102));\n
    v7 = v12[98] ^ tmp_153 - (tmp_150 - tmp_153 + *((v13 + v38 - 26332)) - (v12[38] + tmp_102) - (v4 - (*((v13 + v38 - 26332)) - (v12[38] + tmp_102))));\n
    *(&v38) = *((v13 + v38 - 26332)) - (v12[38] + tmp_102) - (v4 - (*((v13 + v38 - 26332)) - (v12[38] + tmp_102))) - (tmp_153 - (tmp_150 - tmp_153 + *((v13 + v38 - 26332)) - (v12[38] + tmp_102) - (v4 - (*((v13 + v38 - 26332)) - (v12[38] + tmp_102)))) + v12[99]);\n
    *(&v35) = tmp_150 - tmp_153 - tmp_168;\n
    *(&v35) = tmp_168 - (tmp_150 - tmp_153 - tmp_168);\n
    v8 = v35;\n
    v40 = v35 - v12[96];\n
    *(&v38) = v12[24] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v40];\n
    v6 = v12[24] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v40];\n
    v0 = v12[27] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v38];\n
    tmp_34 = v5 - (v2 - (v4 + v5));\n
    tmp_37 = v1 - (v39 + v3) - (v2 - (v4 + v5));\n
    v2 = v2 - (v4 + v5) - (v1 - (v39 + v3) - (v2 - (v4 + v5)));\n
    v41 = tmp_37 - v12[100];\n
    tmp_60 = v12[102] ^ v3 - (v1 - (v39 + v3) + tmp_34);\n
    tmp_71 = v12[31] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_34 - (v3 - (v1 - (v39 + v3) + tmp_34) + v12[103])];\n
    v3 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v8 ^ v12[97])];\n
    v1 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v7];\n
    v43 = tmp_60;\n
    v1 -= v12[26] + v0;\n
    tmp_109 = v3 - v12[25];\n
    v3 -= v12[25];\n
    tmp_119 = v6 - tmp_109;\n
    v6 -= tmp_109;\n
    tmp_126 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29] - ((v12[28] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v41]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29]));\n
    *(&v38) = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29] - ((v12[28] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v41]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29]));\n
    v44 = tmp_71 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v43] - (v12[30] + tmp_71));\n
    v5 = v1 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v43] - (v12[30] + tmp_71));\n
    v8 = v12[90] ^ (v12[28] ^ *((v13 + v41 - 26076))) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29]) - (tmp_119 - ((v12[28] ^ *((v13 + v41 - 26076))) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29])) + *((v13 + v43 - 26332)) - (v12[30] + tmp_71) - (v1 - (*((v13 + v43 - 26332)) - (v12[30] + tmp_71))));\n
    tmp_158 = *((v13 + v43 - 26332)) - (v12[30] + tmp_71) - (v1 - (*((v13 + v43 - 26332)) - (v12[30] + tmp_71))) - ((v12[28] ^ *((v13 + v41 - 26076))) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29]) - (tmp_119 - ((v12[28] ^ *((v13 + v41 - 26076))) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29])) + *((v13 + v43 - 26332)) - (v12[30] + tmp_71) - (v1 - (*((v13 + v43 - 26332)) - (v12[30] + tmp_71)))) + v12[91]);\n
    tmp_162 = tmp_119 - ((v12[28] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v41]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29])) - v5;\n
    v5 -= tmp_119 - ((v12[28] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v41]) - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v2 ^ v12[101])] - v12[29])) - v5;\n
    v4 = v12[16] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_162 - v12[88]];\n
    v7 = v12[19] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_158];\n
    tmp_475 = v6;\n
    v47 = v3 - (tmp_475 + tmp_126);\n
    tmp_8 = v44 - (v0 - (v1 + v44));\n
    tmp_11 = v47 - (v0 - (v1 + v44));\n
    v0 = v0 - (v1 + v44) - (v47 - (v0 - (v1 + v44)));\n
    tmp_23 = v12[20] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_11 - v12[92]];\n
    v49 = tmp_8 - (v38 - (v47 + tmp_8) + v12[95]);\n
    v2 = v12[23] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v49];\n
    tmp_309 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v0 ^ v12[93])];\n
    v50 = v12[94] ^ v38 - (v47 + tmp_8);\n
    v0 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v8] - (v12[18] + v7);\n
    v6 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v5 ^ v12[89])] - v12[17];\n
    tmp_88 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v50] - (v12[22] + v2);\n
    tmp_92 = v4 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v5 ^ v12[89])] - v12[17]);\n
    v4 -= (&_GLOBAL_OFFSET_TABLE_)[26332 + (v5 ^ v12[89])] - v12[17];\n
    v2 -= (&_GLOBAL_OFFSET_TABLE_)[26332 + v50] - (v12[22] + v2);\n
    v5 = v12[82] ^ tmp_23 - (tmp_309 - v12[21]) - (tmp_92 - (tmp_23 - (tmp_309 - v12[21])) + tmp_88 - (v0 - tmp_88));\n
    v8 = v0 - tmp_88 - (tmp_92 - (tmp_23 - (tmp_309 - v12[21])) - (v0 - tmp_88));\n
    v1 = v12[8] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_92 - (tmp_23 - (tmp_309 - v12[21])) - (v0 - tmp_88) - v12[80]];\n
    v52 = tmp_88 - (v0 - tmp_88) - (tmp_23 - (tmp_309 - v12[21]) - (tmp_92 - (tmp_23 - (tmp_309 - v12[21])) + tmp_88 - (v0 - tmp_88)) + v12[83]);\n
    v3 = v12[11] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v52];\n
    *(&v52) = v7 - (v0 + v2) - (v6 - (v4 + tmp_309 - v12[21] - (tmp_23 - (tmp_309 - v12[21]))) - (v7 - (v0 + v2)));\n
    *(&v52) = v12[12] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v2 + v0 + v12[21] + tmp_23 + v12[21] + v6 + -1 * v12[84] + -1 * v7 + -1 * tmp_309 + -1 * tmp_309 + -1 * v4];\n
    *(&v38) = v12[86] ^ tmp_309 - v12[21] - (tmp_23 - (tmp_309 - v12[21])) - (v6 - (v4 + tmp_309 - v12[21] - (tmp_23 - (tmp_309 - v12[21]))) + v2 - (v7 - (v0 + v2)));\n
    tmp_1 = v12[15] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v2 + v0 + v2 + v12[21] + tmp_23 + v12[21] + v6 + v12[21] + tmp_23 + v12[21] + v2 + v0 + v2 + -1 * v12[87] + -1 * v7 + -1 * tmp_309 + -1 * tmp_309 + -1 * v4 + -1 * tmp_309 + -1 * tmp_309 + -1 * v7];\n
    v0 = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v8 ^ v12[81])];\n
    *(&v38) = (&_GLOBAL_OFFSET_TABLE_)[26332 + v5];\n
    v2 = (&_GLOBAL_OFFSET_TABLE_)[26332 + v5];\n
    v55 = v52 ^ v12[85];\n
    v2 -= v12[10] + v3;\n
    tmp_38 = v0 - v12[9];\n
    v0 -= v12[9];\n
    tmp_48 = v1 - tmp_38;\n
    v1 -= tmp_38;\n
    tmp_55 = *((v13 + v55 - 26332)) - v12[13] - (v52 - (*((v13 + v55 - 26332)) - v12[13]));\n
    v4 = v2 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v38] - (v12[14] + tmp_1));\n
    v6 = v12[74] ^ v52 - (*((v13 + v55 - 26332)) - v12[13]) - (tmp_48 - (v52 - (*((v13 + v55 - 26332)) - v12[13])) + *((v13 + v38 - 26332)) - (v12[14] + tmp_1) - (v2 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1))));\n
    tmp_87 = *((v13 + v38 - 26332)) - (v12[14] + tmp_1) - (v2 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1))) - (v52 - (*((v13 + v55 - 26332)) - v12[13]) - (tmp_48 - (v52 - (*((v13 + v55 - 26332)) - v12[13])) + *((v13 + v38 - 26332)) - (v12[14] + tmp_1) - (v2 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1)))) + v12[75]);\n
    tmp_94 = v4 - (tmp_48 - (v52 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v52 ^ v12[85])] - v12[13])) - v4);\n
    v56 = tmp_48 - (v52 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + (v52 ^ v12[85])] - v12[13])) - v4 - v12[72];\n
    v4 = v12[0] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v56];\n
    v5 = v12[3] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_87];\n
    tmp_129 = tmp_1 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1)) - (v3 - (v2 + tmp_1 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1))));\n
    tmp_135 = v3 - (v2 + tmp_1 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1))) - (v0 - (v1 + tmp_55) - (v3 - (v2 + tmp_1 - (*((v13 + v38 - 26332)) - (v12[14] + tmp_1)))));\n
    v58 = v0 - (v1 + tmp_55) - (v3 - (v2 + tmp_1 - ((&_GLOBAL_OFFSET_TABLE_)[26332 + v38] - (v12[14] + tmp_1)))) - v12[76];\n
    v2 = v12[4] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v58];\n
    *(&v52) = v12[7] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + tmp_129 - (tmp_55 - (v0 - (v1 + tmp_55) + tmp_129) + v12[79])];\n
    v60 = tmp_94 ^ v12[73];\n
    *(&v60) = (&_GLOBAL_OFFSET_TABLE_)[26332 + v60] - v12[1];\n
    *(&v60) = (&_GLOBAL_OFFSET_TABLE_)[26332 + v6] - v12[2];\n
    *(&v38) = (&_GLOBAL_OFFSET_TABLE_)[26332 + (tmp_135 ^ v12[77])] - v12[5];\n
    *(&v38) = (&_GLOBAL_OFFSET_TABLE_)[26332 + (v12[78] ^ tmp_55 - (v0 - (v1 + tmp_55) + tmp_129))] - v12[6];\n
    v11[0] = v4;\n
    v11[1] = v60;\n
    v11[2] = v60;\n
    v11[3] = v5;\n
    v11[4] = v2;\n
    v11[5] = v38;\n
    v11[6] = v38;\n
    v11[7] = v52;\n
    return 0;\n
}\n
", "4220009:sub_406469": null, "4220016:cgc_R": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_R(char v4[8])\n
{\n
    char v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    int tmp_68;  // tmp #68\n
    int tmp_79;  // tmp #79\n
    int tmp_90;  // tmp #90\n
    int tmp_357;  // tmp #357\n
    int tmp_110;  // tmp #110\n
    int tmp_122;  // tmp #122\n
    int tmp_141;  // tmp #141\n
    int tmp_144;  // tmp #144\n
    char v1;  // [bp-0x13]\n
    char v2;  // [bp-0x12]\n
    char v3;  // [bp-0x11]\n
    unsigned int v5;  // eax\n
    char v6[8];  // esi\n
    char v7[8];  // ecx\n
    unsigned int v8;  // eax\n
    char v9[8];  // edx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // edx\n
    char v15;  // ch\n
    char v16;  // cl\n
    unsigned int v17;  // eax\n
\n
    v0 = v5;\n
    v6 = v4;\n
    v8 = v7[0] ^ v6[0];\n
    v3 = v9[0] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v8];\n
    v6[0] = v9[0] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v8];\n
    v10 = v7[1] + v6[1];\n
    v1 = v9[1] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v10];\n
    v6[1] = v9[1] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v10];\n
    v11 = v7[2] + v6[2];\n
    v2 = v9[2] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v11];\n
    v6[2] = v9[2] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v11];\n
    v12 = v7[3] ^ v6[3];\n
    v0 = v9[3] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v12];\n
    v6[3] = v9[3] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v12];\n
    v13 = v7[4] ^ v6[4];\n
    tmp_68 = v9[4] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v13];\n
    v6[4] = v9[4] + (&_GLOBAL_OFFSET_TABLE_)[26332 + v13];\n
    tmp_79 = v9[5] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v6[5] + v7[5]];\n
    v6[5] = v9[5] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v6[5] + v7[5]];\n
    tmp_90 = v9[6] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v6[6] + v7[6]];\n
    v6[6] = v9[6] ^ (&_GLOBAL_OFFSET_TABLE_)[26076 + v6[6] + v7[6]];\n
    tmp_357 = v9[7];\n
    v14 = v7[7] ^ v6[7];\n
    tmp_110 = v3 * 2 + v1;\n
    v1 += v3;\n
    tmp_122 = v2 * 2 + v0;\n
    v0 += v2;\n
    tmp_141 = tmp_90 * 2 + tmp_357 + (&_GLOBAL_OFFSET_TABLE_)[26332 + v14];\n
    tmp_144 = tmp_357 + (&_GLOBAL_OFFSET_TABLE_)[26332 + v14] + tmp_90;\n
    *(&v13) = tmp_110 * 2 + tmp_122;\n
    *(&v14) = tmp_122 + tmp_110;\n
    *(&v14) = (tmp_68 * 2 + tmp_79) * 2 + tmp_141;\n
    *(&v12) = tmp_141 + tmp_68 * 2 + tmp_79;\n
    v15 = v1 * 2 + v0;\n
    v0 += v1;\n
    *(&v12) = (tmp_79 + tmp_68) * 2 + tmp_144;\n
    v16 = tmp_144 + tmp_79 + tmp_68;\n
    v6[1] = v14 + v13;\n
    v6[0] = v13 * 2 + v14;\n
    *(&v14) = v15 * 2 + v12;\n
    v6[3] = v12 + v15;\n
    v6[2] = v15 * 2 + v12;\n
    v6[5] = v12 + v14;\n
    v6[4] = v14 * 2 + v12;\n
    *(&v14) = v0;\n
    v17 = v14;\n
    *(&v14) = al<1> + v0 + v16;\n
    v6[7] = v16 + v0;\n
    v6[6] = *(&v14);\n
    return eax<4>;\n
}\n
", "4220383:sub_4065df": null, "4220384:cgc_coffee_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_coffee_init(struct_0 *v0, unsigned int a0[4])\n
{\n
    unsigned int *v1;  // eax\n
    unsigned int v2[4];  // edx\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // edi\n
\n
    v1 = cgc_malloc(0x100);\n
    v0->field_4 = v1;\n
    if (!v1)\n
        return 1;\n
    v2 = a0;\n
    v3 = 0;\n
    v4 = 0;\n
    do\n
    {\n
        v1[2 * v3] = v2[v4 & 2] + v4;\n
        v1[1 + 2 * v3] = *((&v2[0] + (v4 + 1367130551 >> 12 & 12))) + v4 + 1367130551;\n
        v4 -= 1560706194;\n
        v3 += 1;\n
    } while (v3 != 32);\n
    return 0;\n
}\n
", "4220518:sub_406666": null, "4220528:cgc_coffee_destroy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    void* field_4;\n
} struct_0;\n
\n
int cgc_coffee_destroy(struct_0 *v0)\n
{\n
    return cgc_free(v0->field_4);\n
}\n
", "4220564:sub_406694": null, "4220576:cgc_coffee_encode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
    unsigned int field_5c;\n
    unsigned int field_60;\n
    unsigned int field_64;\n
    unsigned int field_68;\n
    unsigned int field_6c;\n
    unsigned int field_70;\n
    unsigned int field_74;\n
    unsigned int field_78;\n
    unsigned int field_7c;\n
    unsigned int field_80;\n
    unsigned int field_84;\n
    unsigned int field_88;\n
    unsigned int field_8c;\n
    unsigned int field_90;\n
    unsigned int field_94;\n
    unsigned int field_98;\n
    unsigned int field_9c;\n
    unsigned int field_a0;\n
    unsigned int field_a4;\n
    unsigned int field_a8;\n
    unsigned int field_ac;\n
    unsigned int field_b0;\n
    unsigned int field_b4;\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
    unsigned int field_c0;\n
    unsigned int field_c4;\n
    unsigned int field_c8;\n
    unsigned int field_cc;\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    unsigned int field_dc;\n
    unsigned int field_e0;\n
    unsigned int field_e4;\n
    unsigned int field_e8;\n
    unsigned int field_ec;\n
    unsigned int field_f0;\n
    unsigned int field_f4;\n
    unsigned int field_f8;\n
    unsigned int field_fc;\n
} struct_1;\n
\n
int cgc_coffee_encode(struct_0 *v0, unsigned int a0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2[64];  // ecx\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // edx\n
    unsigned int v29;  // esi\n
    unsigned int v30;  // edi\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // esi\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // edx\n
    unsigned int v35;  // esi\n
    unsigned int v36;  // edi\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // esi\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // edi\n
    unsigned int v43;  // edx\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // esi\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // esi\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // edx\n
    unsigned int v53;  // esi\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // edx\n
    unsigned int v56;  // esi\n
    unsigned int v57;  // edi\n
    unsigned int v58;  // edx\n
    unsigned int v59;  // esi\n
    unsigned int v60;  // edi\n
    unsigned int v61;  // edx\n
    unsigned int v62;  // esi\n
    unsigned int v63;  // edi\n
    unsigned int v64;  // edx\n
    unsigned int v65;  // esi\n
    unsigned int v66;  // edi\n
\n
    v1 = a0;\n
    v2 = v0->field_4;\n
    v3 = v1[1];\n
    v4 = ((v3 >> 4 ^ v3 * 8) + v3 ^ v2[0]) + v1[0];\n
    v5 = ((((v1[1] >> 4 ^ v1[1] * 8) + v1[1] ^ v2[0]) + v1[0] >> 4 ^ v4 * 8) + v4 ^ v2[1]) + v1[1];\n
    v6 = ((v5 / 16 ^ v5 * 8) + v5 ^ v2[2]) + v4;\n
    v7 = ((v6 >> 4 ^ v6 * 8) + v6 ^ v2[3]) + v5;\n
    v8 = ((v7 / 16 ^ v7 * 8) + v7 ^ v2[4]) + v6;\n
    v9 = ((v8 >> 4 ^ v8 * 8) + v8 ^ v2[5]) + v7;\n
    v10 = ((v9 / 16 ^ v9 * 8) + v9 ^ v2[6]) + v8;\n
    v11 = ((v10 >> 4 ^ v10 * 8) + v10 ^ v2[7]) + v9;\n
    v12 = ((v11 / 16 ^ v11 * 8) + v11 ^ v2[8]) + v10;\n
    v13 = ((v12 >> 4 ^ v12 * 8) + v12 ^ v2[9]) + v11;\n
    v14 = ((v13 / 16 ^ v13 * 8) + v13 ^ v2[10]) + v12;\n
    v15 = ((v14 >> 4 ^ v14 * 8) + v14 ^ v2[11]) + v13;\n
    v16 = ((v15 / 16 ^ v15 * 8) + v15 ^ v2[12]) + v14;\n
    v17 = ((v16 >> 4 ^ v16 * 8) + v16 ^ v2[13]) + v15;\n
    v18 = ((v17 / 16 ^ v17 * 8) + v17 ^ v2[14]) + v16;\n
    v19 = ((v18 >> 4 ^ v18 * 8) + v18 ^ v2[15]) + v17;\n
    v20 = ((v19 / 16 ^ v19 * 8) + v19 ^ v2[16]) + v18;\n
    v21 = ((v20 >> 4 ^ v20 * 8) + v20 ^ v2[17]) + v19;\n
    v22 = ((v21 / 16 ^ v21 * 8) + v21 ^ v2[18]) + v20;\n
    v23 = ((v22 >> 4 ^ v22 * 8) + v22 ^ v2[19]) + v21;\n
    v24 = ((v23 / 16 ^ v23 * 8) + v23 ^ v2[20]) + v22;\n
    v25 = ((v24 >> 4 ^ v24 * 8) + v24 ^ v2[21]) + v23;\n
    v26 = ((v25 / 16 ^ v25 * 8) + v25 ^ v2[22]) + v24;\n
    v27 = ((v26 >> 4 ^ v26 * 8) + v26 ^ v2[23]) + v25;\n
    v28 = ((v27 / 16 ^ v27 * 8) + v27 ^ v2[24]) + v26;\n
    v29 = ((v28 >> 4 ^ v28 * 8) + v28 ^ v2[25]) + v27;\n
    v30 = ((v29 / 16 ^ v29 * 8) + v29 ^ v2[26]) + v28;\n
    v31 = ((v30 >> 4 ^ v30 * 8) + v30 ^ v2[27]) + v29;\n
    v32 = ((v31 / 16 ^ v31 * 8) + v31 ^ v2[28]) + v30;\n
    v33 = ((v32 >> 4 ^ v32 * 8) + v32 ^ v2[29]) + v31;\n
    v34 = ((v33 / 16 ^ v33 * 8) + v33 ^ v2[30]) + v32;\n
    v35 = ((v34 >> 4 ^ v34 * 8) + v34 ^ v2[31]) + v33;\n
    v36 = ((v35 / 16 ^ v35 * 8) + v35 ^ v2[32]) + v34;\n
    v37 = ((v36 >> 4 ^ v36 * 8) + v36 ^ v2[33]) + v35;\n
    v38 = ((v37 / 16 ^ v37 * 8) + v37 ^ v2[34]) + v36;\n
    v39 = ((v38 >> 4 ^ v38 * 8) + v38 ^ v2[35]) + v37;\n
    v40 = ((v39 / 16 ^ v39 * 8) + v39 ^ v2[36]) + v38;\n
    v41 = ((v40 >> 4 ^ v40 * 8) + v40 ^ v2[37]) + v39;\n
    v42 = ((v41 / 16 ^ v41 * 8) + v41 ^ v2[38]) + v40;\n
    v43 = ((v42 >> 4 ^ v42 * 8) + v42 ^ v2[39]) + v41;\n
    v44 = ((v43 / 16 ^ v43 * 8) + v43 ^ v2[40]) + v42;\n
    v45 = ((v44 >> 4 ^ v44 * 8) + v44 ^ v2[41]) + v43;\n
    v46 = ((v45 / 16 ^ v45 * 8) + v45 ^ v2[42]) + v44;\n
    v47 = ((v46 >> 4 ^ v46 * 8) + v46 ^ v2[43]) + v45;\n
    v48 = ((v47 / 16 ^ v47 * 8) + v47 ^ v2[44]) + v46;\n
    v49 = ((v48 >> 4 ^ v48 * 8) + v48 ^ v2[45]) + v47;\n
    v50 = ((v49 / 16 ^ v49 * 8) + v49 ^ v2[46]) + v48;\n
    v51 = ((v50 >> 4 ^ v50 * 8) + v50 ^ v2[47]) + v49;\n
    v52 = ((v51 / 16 ^ v51 * 8) + v51 ^ v2[48]) + v50;\n
    v53 = ((v52 >> 4 ^ v52 * 8) + v52 ^ v2[49]) + v51;\n
    v54 = ((v53 / 16 ^ v53 * 8) + v53 ^ v2[50]) + v52;\n
    v55 = ((v54 >> 4 ^ v54 * 8) + v54 ^ v2[51]) + v53;\n
    v56 = ((v55 / 16 ^ v55 * 8) + v55 ^ v2[52]) + v54;\n
    v57 = ((v56 >> 4 ^ v56 * 8) + v56 ^ v2[53]) + v55;\n
    v58 = ((v57 / 16 ^ v57 * 8) + v57 ^ v2[54]) + v56;\n
    v59 = ((v58 >> 4 ^ v58 * 8) + v58 ^ v2[55]) + v57;\n
    v60 = ((v59 >> 4 ^ v59 * 8) + v59 ^ v2[56]) + v58;\n
    v61 = ((v60 >> 4 ^ v60 * 8) + v60 ^ v2[57]) + v59;\n
    v62 = ((v61 >> 4 ^ v61 * 8) + v61 ^ v2[58]) + v60;\n
    v63 = ((v62 >> 4 ^ v62 * 8) + v62 ^ v2[59]) + v61;\n
    v64 = ((v63 >> 4 ^ v63 * 8) + v63 ^ v2[60]) + v62;\n
    v65 = ((v64 >> 4 ^ v64 * 8) + v64 ^ v2[61]) + v63;\n
    v66 = ((v65 >> 4 ^ v65 * 8) + v65 ^ v2[62]) + v64;\n
    v1[0] = ((v66 >> 4 ^ v66 * 8) + v66 ^ v2[63]) + v65;\n
    v1[1] = v66;\n
    return 0;\n
}\n
", "4222043:sub_406c5b": null, "4222048:cgc_coffee_decode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
    unsigned int field_5c;\n
    unsigned int field_60;\n
    unsigned int field_64;\n
    unsigned int field_68;\n
    unsigned int field_6c;\n
    unsigned int field_70;\n
    unsigned int field_74;\n
    unsigned int field_78;\n
    unsigned int field_7c;\n
    unsigned int field_80;\n
    unsigned int field_84;\n
    unsigned int field_88;\n
    unsigned int field_8c;\n
    unsigned int field_90;\n
    unsigned int field_94;\n
    unsigned int field_98;\n
    unsigned int field_9c;\n
    unsigned int field_a0;\n
    unsigned int field_a4;\n
    unsigned int field_a8;\n
    unsigned int field_ac;\n
    unsigned int field_b0;\n
    unsigned int field_b4;\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
    unsigned int field_c0;\n
    unsigned int field_c4;\n
    unsigned int field_c8;\n
    unsigned int field_cc;\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    unsigned int field_dc;\n
    unsigned int field_e0;\n
    unsigned int field_e4;\n
    unsigned int field_e8;\n
    unsigned int field_ec;\n
    unsigned int field_f0;\n
    unsigned int field_f4;\n
    unsigned int field_f8;\n
    unsigned int field_fc;\n
} struct_1;\n
\n
int cgc_coffee_decode(struct_0 *v0, unsigned int a0[2])\n
{\n
    unsigned int v1[2];  // eax\n
    unsigned int v2[64];  // edx\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // ecx\n
    unsigned int v32;  // esi\n
    unsigned int v33;  // ecx\n
    unsigned int v34;  // esi\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // esi\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // esi\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // esi\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // ecx\n
    unsigned int v46;  // esi\n
    unsigned int v47;  // ecx\n
    unsigned int v48;  // esi\n
    unsigned int v49;  // ecx\n
    unsigned int v50;  // esi\n
    unsigned int v51;  // ecx\n
    unsigned int v52;  // esi\n
    unsigned int v53;  // ecx\n
    unsigned int v54;  // esi\n
    unsigned int v55;  // ecx\n
    unsigned int v56;  // esi\n
    unsigned int v57;  // ecx\n
    unsigned int v58;  // esi\n
    unsigned int v59;  // ecx\n
    unsigned int v60;  // esi\n
    unsigned int v61;  // ecx\n
    unsigned int v62;  // esi\n
    unsigned int v63;  // ecx\n
    unsigned int v64;  // esi\n
    unsigned int v65;  // ecx\n
    unsigned int v66;  // esi\n
\n
    v1 = a0;\n
    v2 = v0->field_4;\n
    v3 = v1[1];\n
    v4 = v1[0] - ((v3 >> 4 ^ v3 * 8) + v3 ^ v2[63]);\n
    v5 = v1[1] - ((v1[0] - ((v1[1] >> 4 ^ v1[1] * 8) + v1[1] ^ v2[63]) >> 4 ^ v4 * 8) + v4 ^ v2[62]);\n
    v6 = v4 - ((v5 >> 4 ^ v5 * 8) + v5 ^ v2[61]);\n
    v7 = v5 - ((v6 >> 4 ^ v6 * 8) + v6 ^ v2[60]);\n
    v8 = v6 - ((v7 >> 4 ^ v7 * 8) + v7 ^ v2[59]);\n
    v9 = v7 - ((v8 >> 4 ^ v8 * 8) + v8 ^ v2[58]);\n
    v10 = v8 - ((v9 >> 4 ^ v9 * 8) + v9 ^ v2[57]);\n
    v11 = v9 - ((v10 >> 4 ^ v10 * 8) + v10 ^ v2[56]);\n
    v12 = v10 - ((v11 >> 4 ^ v11 * 8) + v11 ^ v2[55]);\n
    v13 = v11 - ((v12 >> 4 ^ v12 * 8) + v12 ^ v2[54]);\n
    v14 = v12 - ((v13 >> 4 ^ v13 * 8) + v13 ^ v2[53]);\n
    v15 = v13 - ((v14 >> 4 ^ v14 * 8) + v14 ^ v2[52]);\n
    v16 = v14 - ((v15 >> 4 ^ v15 * 8) + v15 ^ v2[51]);\n
    v17 = v15 - ((v16 >> 4 ^ v16 * 8) + v16 ^ v2[50]);\n
    v18 = v16 - ((v17 >> 4 ^ v17 * 8) + v17 ^ v2[49]);\n
    v19 = v17 - ((v18 >> 4 ^ v18 * 8) + v18 ^ v2[48]);\n
    v20 = v18 - ((v19 >> 4 ^ v19 * 8) + v19 ^ v2[47]);\n
    v21 = v19 - ((v20 >> 4 ^ v20 * 8) + v20 ^ v2[46]);\n
    v22 = v20 - ((v21 >> 4 ^ v21 * 8) + v21 ^ v2[45]);\n
    v23 = v21 - ((v22 >> 4 ^ v22 * 8) + v22 ^ v2[44]);\n
    v24 = v22 - ((v23 >> 4 ^ v23 * 8) + v23 ^ v2[43]);\n
    v25 = v23 - ((v24 >> 4 ^ v24 * 8) + v24 ^ v2[42]);\n
    v26 = v24 - ((v25 >> 4 ^ v25 * 8) + v25 ^ v2[41]);\n
    v27 = v25 - ((v26 >> 4 ^ v26 * 8) + v26 ^ v2[40]);\n
    v28 = v26 - ((v27 >> 4 ^ v27 * 8) + v27 ^ v2[39]);\n
    v29 = v27 - ((v28 >> 4 ^ v28 * 8) + v28 ^ v2[38]);\n
    v30 = v28 - ((v29 >> 4 ^ v29 * 8) + v29 ^ v2[37]);\n
    v31 = v29 - ((v30 >> 4 ^ v30 * 8) + v30 ^ v2[36]);\n
    v32 = v30 - ((v31 >> 4 ^ v31 * 8) + v31 ^ v2[35]);\n
    v33 = v31 - ((v32 >> 4 ^ v32 * 8) + v32 ^ v2[34]);\n
    v34 = v32 - ((v33 >> 4 ^ v33 * 8) + v33 ^ v2[33]);\n
    v35 = v33 - ((v34 >> 4 ^ v34 * 8) + v34 ^ v2[32]);\n
    v36 = v34 - ((v35 >> 4 ^ v35 * 8) + v35 ^ v2[31]);\n
    v37 = v35 - ((v36 >> 4 ^ v36 * 8) + v36 ^ v2[30]);\n
    v38 = v36 - ((v37 >> 4 ^ v37 * 8) + v37 ^ v2[29]);\n
    v39 = v37 - ((v38 >> 4 ^ v38 * 8) + v38 ^ v2[28]);\n
    v40 = v38 - ((v39 >> 4 ^ v39 * 8) + v39 ^ v2[27]);\n
    v41 = v39 - ((v40 >> 4 ^ v40 * 8) + v40 ^ v2[26]);\n
    v42 = v40 - ((v41 >> 4 ^ v41 * 8) + v41 ^ v2[25]);\n
    v43 = v41 - ((v42 >> 4 ^ v42 * 8) + v42 ^ v2[24]);\n
    v44 = v42 - ((v43 >> 4 ^ v43 * 8) + v43 ^ v2[23]);\n
    v45 = v43 - ((v44 >> 4 ^ v44 * 8) + v44 ^ v2[22]);\n
    v46 = v44 - ((v45 >> 4 ^ v45 * 8) + v45 ^ v2[21]);\n
    v47 = v45 - ((v46 >> 4 ^ v46 * 8) + v46 ^ v2[20]);\n
    v48 = v46 - ((v47 >> 4 ^ v47 * 8) + v47 ^ v2[19]);\n
    v49 = v47 - ((v48 >> 4 ^ v48 * 8) + v48 ^ v2[18]);\n
    v50 = v48 - ((v49 >> 4 ^ v49 * 8) + v49 ^ v2[17]);\n
    v51 = v49 - ((v50 >> 4 ^ v50 * 8) + v50 ^ v2[16]);\n
    v52 = v50 - ((v51 >> 4 ^ v51 * 8) + v51 ^ v2[15]);\n
    v53 = v51 - ((v52 >> 4 ^ v52 * 8) + v52 ^ v2[14]);\n
    v54 = v52 - ((v53 >> 4 ^ v53 * 8) + v53 ^ v2[13]);\n
    v55 = v53 - ((v54 >> 4 ^ v54 * 8) + v54 ^ v2[12]);\n
    v56 = v54 - ((v55 >> 4 ^ v55 * 8) + v55 ^ v2[11]);\n
    v57 = v55 - ((v56 >> 4 ^ v56 * 8) + v56 ^ v2[10]);\n
    v58 = v56 - ((v57 >> 4 ^ v57 * 8) + v57 ^ v2[9]);\n
    v59 = v57 - ((v58 >> 4 ^ v58 * 8) + v58 ^ v2[8]);\n
    v60 = v58 - ((v59 >> 4 ^ v59 * 8) + v59 ^ v2[7]);\n
    v61 = v59 - ((v60 >> 4 ^ v60 * 8) + v60 ^ v2[6]);\n
    v62 = v60 - ((v61 >> 4 ^ v61 * 8) + v61 ^ v2[5]);\n
    v63 = v61 - ((v62 >> 4 ^ v62 * 8) + v62 ^ v2[4]);\n
    v64 = v62 - ((v63 >> 4 ^ v63 * 8) + v63 ^ v2[3]);\n
    v65 = v63 - ((v64 >> 4 ^ v64 * 8) + v64 ^ v2[2]);\n
    v66 = v64 - ((v65 >> 4 ^ v65 * 8) + v65 ^ v2[1]);\n
    v1[0] = v65 - ((v66 >> 4 ^ v66 * 8) + v66 ^ v2[0]);\n
    v1[1] = v66;\n
    return 0;\n
}\n
", "4223517:sub_40721d": null, "4223520:cgc_dolphin_init": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-c;\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern struct_0 g_40e73c;\n
extern struct_0 g_40eb3c;\n
extern struct_0 g_40ef3c;\n
extern struct_0 g_40f33c;\n
\n
int cgc_dolphin_init(struct_1 *v13, unsigned int a0[8])\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    unsigned int *v14;  // eax\n
    unsigned int *v15;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v16;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v18;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v20;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v22;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v23;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v24[8];  // edx\n
    struct_1 *v25;  // edi\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // esi\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // esi\n
    unsigned int v34;  // edi\n
\n
    v14 = cgc_malloc(4168);\n
    v13->field_4 = v14;\n
    if (!v14)\n
        return 1;\n
    *(v14) = 421264140;\n
    strncpy(v14 + 1, \" ~Kk\", 4);\n
    v2 = eax<4> + 8;\n
    *((eax<4> + 8)) = 2489086769;\n
    *((eax<4> + 12)) = 1630411037;\n
    v3 = eax<4> + 16;\n
    *((eax<4> + 16)) = 2270272900;\n
    *((eax<4> + 20)) = 2556193721;\n
    v4 = eax<4> + 24;\n
    *((eax<4> + 24)) = 409553872;\n
    *((eax<4> + 28)) = 3203384459;\n
    v5 = eax<4> + 32;\n
    *((eax<4> + 32)) = 2175509570;\n
    strncpy(eax<4> + 36, \"$;mk\", 4);\n
    v6 = eax<4> + 40;\n
    *((eax<4> + 40)) = -232122211;\n
    *((eax<4> + 44)) = 683968745;\n
    v8 = eax<4> + 48;\n
    *((eax<4> + 48)) = 3550618122;\n
    *((eax<4> + 52)) = 2853861867;\n
    *((eax<4> + 56)) = 3268158320;\n
    *((eax<4> + 60)) = 3546403943;\n
    *((eax<4> + 64)) = 648146909;\n
    strncpy(eax<4> + 68, \"\\rj''\", 4);\n
    v7 = eax<4> + 56;\n
    v9 = eax<4> + 64;\n
    v15 = 21;\n
    v16 = &g_40e73c.field_-c;\n
    do\n
    {\n
        *((eax<4> + v15 * 4 - 12)) = *((v16 - 12));\n
        *((eax<4> + v15 * 4 - 8)) = *((v16 - 8));\n
        *((eax<4> + v15 * 4 - 4)) = *((v16 - 4));\n
        *((eax<4> + v15 * 4)) = *(v16);\n
        v15 += 4;\n
        v16 += 16;\n
    } while (v15 != 277);\n
    v12 = eax<4> + 72;\n
    v11 = eax<4> + 1096;\n
    v18 = 277;\n
    v19 = &g_40eb3c.field_-c;\n
    do\n
    {\n
        *((eax<4> + v18 * 4 - 12)) = *((v19 - 12));\n
        *((eax<4> + v18 * 4 - 8)) = *((v19 - 8));\n
        *((eax<4> + v18 * 4 - 4)) = *((v19 - 4));\n
        *((eax<4> + v18 * 4)) = *(v19);\n
        v18 += 4;\n
        v19 += 16;\n
    } while (v18 != 533);\n
    v20 = 533;\n
    v21 = &g_40ef3c.field_-c;\n
    do\n
    {\n
        *((eax<4> + v20 * 4 - 12)) = *((v21 - 12));\n
        *((eax<4> + v20 * 4 - 8)) = *((v21 - 8));\n
        *((eax<4> + v20 * 4 - 4)) = *((v21 - 4));\n
        *((eax<4> + v20 * 4)) = *(v21);\n
        v20 += 4;\n
        v21 += 16;\n
    } while (v20 != 789);\n
    v10 = eax<4> + 2120;\n
    v1 = eax<4> + 3144;\n
    v22 = 789;\n
    v23 = &g_40f33c.field_-c;\n
    do\n
    {\n
        *((eax<4> + v22 * 4 - 12)) = *((v23 - 12));\n
        *((eax<4> + v22 * 4 - 8)) = *((v23 - 8));\n
        *((eax<4> + v22 * 4 - 4)) = *((v23 - 4));\n
        *((eax<4> + v22 * 4)) = *(v23);\n
        v22 += 4;\n
        v23 += 16;\n
    } while (v22 != 1045);\n
    v24 = a0;\n
    *(eax<4>) = 421264140 ^ v24[0];\n
    *((eax<4> + 4)) = 1800109600 ^ v24[1];\n
    *((eax<4> + 8)) = 2489086769 ^ v24[2];\n
    *((eax<4> + 12)) = 1630411037 ^ v24[3];\n
    *((eax<4> + 16)) = 2270272900 ^ v24[4];\n
    *((eax<4> + 20)) = 2556193721 ^ v24[5];\n
    *((eax<4> + 24)) = 409553872 ^ v24[6];\n
    *((eax<4> + 28)) = 3203384459 ^ v24[7];\n
    *((eax<4> + 32)) = 2175509570 ^ v24[0];\n
    *((eax<4> + 36)) = 1802320676 ^ v24[1];\n
    *((eax<4> + 40)) = -232122211 ^ v24[2];\n
    *((eax<4> + 44)) = 683968745 ^ v24[3];\n
    *((eax<4> + 48)) = 3550618122 ^ v24[4];\n
    *((eax<4> + 52)) = 2853861867 ^ v24[5];\n
    *((eax<4> + 56)) = 3268158320 ^ v24[6];\n
    *((eax<4> + 60)) = 3546403943 ^ v24[7];\n
    *((eax<4> + 64)) = 648146909 ^ v24[0];\n
    *((eax<4> + 68)) = 656894477 ^ v24[1];\n
    v0 = eax<4>;\n
    v25 = v13;\n
    cgc_dolphin_encode(v25);\n
    v0 = v2;\n
    cgc_dolphin_encode(v25);\n
    v0 = v3;\n
    cgc_dolphin_encode(v25);\n
    v0 = v4;\n
    cgc_dolphin_encode(v25);\n
    v0 = v5;\n
    cgc_dolphin_encode(v25);\n
    v0 = v6;\n
    cgc_dolphin_encode(v25);\n
    v0 = v8;\n
    cgc_dolphin_encode(v25);\n
    v0 = v7;\n
    cgc_dolphin_encode(v25);\n
    v0 = v9;\n
    cgc_dolphin_encode(v25);\n
    v26 = -2;\n
    v27 = v12;\n
    do\n
    {\n
        v0 = v27;\n
        cgc_dolphin_encode(v25);\n
        v26 += 2;\n
        v27 += 8;\n
    } while (v26 < 254);\n
    v28 = -2;\n
    v29 = v11;\n
    do\n
    {\n
        v0 = v29;\n
        cgc_dolphin_encode(v25);\n
        v28 += 2;\n
        v29 += 8;\n
    } while (v28 < 254);\n
    v30 = -2;\n
    v31 = v10;\n
    do\n
    {\n
        v0 = v31;\n
        cgc_dolphin_encode(v25);\n
        v30 += 2;\n
        v31 += 8;\n
    } while (v30 < 254);\n
    v32 = -2;\n
    v34 = v1;\n
    do\n
    {\n
        v0 = v34;\n
        cgc_dolphin_encode(v25);\n
        v32 += 2;\n
        v34 += 8;\n
    } while (v32 < 254);\n
    return 0;\n
}\n
", "4224587:sub_40764b": null, "4224592:cgc_dolphin_destroy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    void* field_4;\n
} struct_0;\n
\n
int cgc_dolphin_destroy(struct_0 *v0)\n
{\n
    return cgc_free(v0->field_4);\n
}\n
", "4224628:sub_407674": null, "4224640:cgc_dolphin_encode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
int cgc_dolphin_encode(struct_0 *v0, unsigned int a0[2])\n
{\n
    unsigned int v1[2];  // esi\n
    unsigned int v2[18];  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edx\n
\n
    v1 = a0;\n
    v2 = v0->field_4;\n
    v3 = ...;\n
    v5 = ...;\n
    v6 = ...;\n
    v7 = (*((1096 + &v2[0] + (v6 >> 14 & 1020))) + v2[1 + (v6 >> 24)] ^ v2[29 + 8 + v6]) + v2[43 + 12 + v6] ^ v5 ^ v2[7];\n
    v8 = ...;\n
    v9 = (*((1096 + &v2[0] + (v8 >> 14 & 1020))) + v2[1 + (v8 >> 24)] ^ v2[29 + 8 + v8]) + v2[43 + 12 + v8] ^ v7 ^ v2[9];\n
    v10 = (*((1096 + &v2[0] + (v9 >> 14 & 1020))) + v2[1 + v9 / 0x1000000] ^ v2[29 + 8 + v9]) + v2[43 + 12 + v9] ^ v8 ^ v2[10];\n
    v11 = ...;\n
    v12 = (*((1096 + &v2[0] + (v11 >> 14 & 1020))) + v2[1 + v11 / 0x1000000] ^ v2[29 + 8 + v11]) + v2[43 + 12 + v11] ^ v10 ^ v2[12];\n
    v13 = (*((1096 + &v2[0] + (v12 >> 14 & 1020))) + v2[1 + (v12 >> 24)] ^ v2[29 + 8 + v12]) + v2[43 + 12 + v12] ^ v11 ^ v2[13];\n
    v14 = ((*((1096 + &v2[0] + (v12 >> 14 & 1020))) + v2[1 + (v12 >> 24)] ^ v2[29 + 8 + v12]) + v2[43 + 12 + v12] ^ v11 ^ v2[13]) >> 24;\n
    v15 = (*((1096 + &v2[0] + (v13 >> 14 & 1020))) + v2[1 + v14] ^ v2[29 + 8 + v13]) + v2[43 + 12 + v13] ^ v12 ^ v2[14];\n
    v16 = ...;\n
    v17 = (*((1096 + &v2[0] + (v16 >> 14 & 1020))) + v2[1 + v16 / 0x1000000] ^ v2[29 + 8 + v16]) + v2[43 + 12 + v16] ^ v15 ^ v2[16];\n
    v1[0] = v16 ^ v2[17];\n
    v1[1] = v17;\n
    return 0;\n
}\n
", "4225532:sub_4079fc": null, "4225536:cgc_dolphin_decode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
int cgc_dolphin_decode(struct_0 *v0, unsigned int a0[2])\n
{\n
    unsigned int v1[2];  // esi\n
    unsigned int v2[18];  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // eax\n
    unsigned int v20;  // edx\n
\n
    v1 = a0;\n
    v2 = v0->field_4;\n
    v3 = ...;\n
    v4 = ...;\n
    v5 = ...;\n
    v6 = v4 ^ v2[10];\n
    v7 = (*((1096 + &v2[0] + (v5 >> 14 & 1020))) + v2[1 + (v5 >> 24)] ^ v2[29 + 8 + v5]) + v2[43 + 12 + v5] ^ v6;\n
    v8 = ...;\n
    v9 = (*((1096 + &v2[0] + (v8 >> 14 & 1020))) + v2[1 + (v8 >> 24)] ^ v2[29 + 8 + v8]) + v2[43 + 12 + v8] ^ v7 ^ v2[8];\n
    v10 = ...;\n
    v11 = (*((1096 + &v2[0] + (v10 >> 14 & 1020))) + v2[1 + (v10 >> 24)] ^ v2[29 + 8 + v10]) + v2[43 + 12 + v10] ^ v9 ^ v2[6];\n
    v12 = ...;\n
    v13 = (*((1096 + &v2[0] + (v12 >> 14 & 1020))) + v2[1 + (v12 >> 24)] ^ v2[29 + 8 + v12]) + v2[43 + 12 + v12] ^ v11 ^ v2[4];\n
    v14 = v12 ^ v2[3];\n
    v15 = (*((1096 + &v2[0] + (v13 >> 14 & 1020))) + v2[1 + (v13 >> 24)] ^ v2[29 + 8 + v13]) + v2[43 + 12 + v13] ^ v14;\n
    v16 = ...;\n
    v20 = (*((1096 + &v2[0] + (v16 >> 14 & 1020))) + v2[1 + (v16 >> 24)] ^ v2[29 + 8 + v16]) + v2[43 + 12 + v16] ^ v15 ^ v2[1];\n
    v1[0] = v16 ^ v2[0];\n
    v1[1] = v20;\n
    return 0;\n
}\n
", "4226430:sub_407d7e": null, "4226432:cgc_faith_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_faith_init(struct_0 *v7, unsigned int a0[4])\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned short *v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned short *v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned short *v8;  // eax\n
    unsigned int v9[4];  // ecx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ecx\n
    unsigned short *v20;  // edx\n
    unsigned int v21;  // esi\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned short *v23;  // esi, Other Possible Types: unsigned int\n
    unsigned int v24;  // edi\n
    void* v25;  // ebx, Other Possible Types: unsigned int\n
\n
    v8 = cgc_malloc(80);\n
    v7->field_4 = v8;\n
    v3 = v8;\n
    if (!v3)\n
        return 1;\n
    v9 = a0;\n
    v10 = v9[0];\n
    v24 = v9[1];\n
    v0 = v9[3];\n
    v2 = v9[2];\n
    v1 = v0 ^ v2;\n
    v22 = 0;\n
    v23 = 2;\n
    v25 = 0;\n
    do\n
    {\n
        v5 = v23;\n
        v11 = v25;\n
        v25 = v10;\n
        v6 = v22;\n
        v12 = v22 - (v22 * 2863311531 >> 32 >> 1) * 3;\n
        v13 = v2;\n
        if (v12 != 1)\n
        {\n
            v13 = v1;\n
            if (v12)\n
                v13 = v0;\n
        }\n
        v14 = v11 ^ v24 ^ v13;\n
        v4 = v24;\n
        v15 = ((v25 >> 16 ^ v25 >> 24) + (v14 >> 24 ^ v25 >> 8 ^ v25) + 1) * 4 + ((v25 >> 16 ^ v25 >> 24) + (v14 >> 24 ^ v25 >> 8 ^ v25) + 1 >> 6);\n
        v16 = (v14 >> 8 ^ ((v25 >> 16 ^ v25 >> 24) + (v14 >> 24 ^ v25 >> 8 ^ v25) + 1) * 4 + ((v25 >> 16 ^ v25 >> 24) + (v14 >> 24 ^ v25 >> 8 ^ v25) + 1 >> 6)) + (v25 >> 24);\n
        v17 = v15 * 0x10000 | v16 * 0x40000 & 0x3000000 | v16 * 0x4000000;\n
        v18 = ...;\n
        v20 = v3;\n
        v21 = v5;\n
        *((-2 + v20 + v21)) = v17 / 0x10000;\n
        v10 = v4;\n
        *((v20 + v21)) = v18;\n
        v22 = v6 + 1;\n
        v23 = v21 + 4;\n
        v24 = v18;\n
    } while (v23 != 82);\n
    return 0;\n
}\n
", "4226525:sub_407ddd": null, "4226789:sub_407ee5": null, "4226800:cgc_faith_destroy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    void* field_4;\n
} struct_0;\n
\n
int cgc_faith_destroy(struct_0 *v0)\n
{\n
    return cgc_free(v0->field_4);\n
}\n
", "4226836:sub_407f14": null, "4226848:cgc_faith_encode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    char padding_4[60];\n
    unsigned short field_40;\n
    unsigned short field_42;\n
    unsigned short field_44;\n
    unsigned short field_46;\n
} struct_1;\n
\n
int cgc_faith_encode(struct_0 *v1, unsigned int a0[2])\n
{\n
    unsigned short v0[32];  // [bp-0x14]\n
    unsigned short v2[32];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned short v4[36];  // ecx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v16;  // ebx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // edi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // ecx\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // edx\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // esi\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // ecx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // esi\n
    unsigned int v49;  // ecx\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // edi\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ebx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // ebx\n
    unsigned int v58;  // ecx\n
    unsigned int v59;  // edi\n
    unsigned int v60;  // ecx\n
    unsigned int v62;  // edi\n
    unsigned int v63;  // edx\n
    unsigned int v65;  // edx\n
    unsigned int v66;  // ebx\n
    unsigned int v67;  // ecx\n
    unsigned int v68;  // ebx\n
    unsigned int v69;  // ecx\n
    unsigned int v70;  // edx\n
    unsigned int v71;  // ecx\n
    unsigned int v73;  // edx\n
    unsigned int v74;  // esi\n
    unsigned int v76;  // esi\n
    unsigned int v77;  // ebx\n
    unsigned int v78;  // ecx\n
    unsigned int v79;  // ebx\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // esi\n
    unsigned int v82;  // ecx\n
    unsigned int v84;  // esi\n
    unsigned int v85;  // edi\n
    unsigned int v87;  // edi\n
    unsigned int v88;  // ebx\n
    unsigned int v89;  // ecx\n
    unsigned int v90;  // ebx\n
    unsigned int v91;  // ecx\n
    unsigned int v92;  // edi\n
    unsigned int v93;  // ecx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // edx\n
    unsigned int v98;  // edx\n
    unsigned int v99;  // ebx\n
    unsigned int v100;  // ecx\n
    unsigned int v101;  // ebx\n
    unsigned int v102;  // ecx\n
    unsigned int v103;  // edx\n
    unsigned int v104;  // ecx\n
    unsigned int v106;  // edx\n
    unsigned int v107;  // esi\n
    unsigned int v109;  // esi\n
    unsigned int v110;  // ebx\n
    unsigned int v111;  // ecx\n
    unsigned int v112;  // ebx\n
    unsigned int v113;  // ecx\n
    unsigned int v114;  // esi\n
    unsigned int v115;  // ecx\n
    unsigned int v117;  // esi\n
    unsigned int v118;  // edi\n
    unsigned int v120;  // edi\n
    unsigned int v121;  // ebx\n
    unsigned int v122;  // ecx\n
    unsigned int v123;  // ebx\n
    unsigned int v124;  // ecx\n
    unsigned int v125;  // edi\n
    unsigned int v126;  // ecx\n
    unsigned int v128;  // edi\n
    unsigned int v129;  // edx\n
    unsigned int v131;  // edx\n
    unsigned int v132;  // ebx\n
    unsigned int v133;  // ecx\n
    unsigned int v134;  // ebx\n
    unsigned int v135;  // ecx\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // ecx\n
    unsigned int v139;  // edx\n
    unsigned int v140;  // esi\n
    unsigned int v142;  // esi\n
    unsigned int v143;  // ebx\n
    unsigned int v144;  // ecx\n
    unsigned int v145;  // ebx\n
    unsigned int v146;  // ecx\n
    unsigned int v147;  // esi\n
    unsigned int v148;  // ecx\n
    unsigned int v150;  // esi\n
    unsigned int v151;  // edi\n
    unsigned int v153;  // edi\n
    unsigned int v154;  // ebx\n
    unsigned int v155;  // ecx\n
    unsigned int v156;  // ebx\n
    unsigned int v157;  // ecx\n
    unsigned int v158;  // edi\n
    unsigned int v159;  // ecx\n
    unsigned int v161;  // edi\n
    unsigned int v162;  // edx\n
    unsigned int v164;  // edx\n
    unsigned int v165;  // eax\n
    unsigned int v166;  // ebx\n
    unsigned int v167;  // ecx\n
    unsigned int v168;  // ebx\n
    unsigned int v169;  // ecx\n
    unsigned int v170;  // edx\n
    unsigned int v173;  // ebp\n
    unsigned int v174;  // ecx\n
    unsigned int v176;  // edx\n
    unsigned int v177;  // esi\n
    unsigned int v179;  // esi\n
    unsigned int v180;  // ebx\n
    unsigned int v181;  // ecx\n
    unsigned int v182;  // ebx\n
    unsigned int v183;  // ecx\n
    unsigned int v184;  // esi\n
    unsigned int v185;  // ecx\n
    unsigned int v187;  // esi\n
    unsigned int v188;  // edi\n
    unsigned int v190;  // edi\n
    unsigned int v191;  // ebx\n
    unsigned int v192;  // ecx\n
    unsigned int v193;  // ebx\n
    unsigned int v194;  // ecx\n
    unsigned int v195;  // edi\n
    unsigned int v196;  // ecx\n
    unsigned int v198;  // edi\n
    unsigned int v199;  // edx\n
    unsigned int v201;  // edx\n
    unsigned int v202;  // ebx\n
    unsigned int v203;  // ecx\n
    unsigned int v204;  // ebx\n
    unsigned int v205;  // ecx\n
    unsigned int v206;  // edx\n
    unsigned int v207;  // ecx\n
    unsigned int v209;  // edx\n
    unsigned int v210;  // esi\n
    unsigned int v212;  // esi\n
    unsigned int v213;  // eax\n
    unsigned int v214;  // ebx\n
    unsigned int v215;  // ecx\n
    unsigned int v216;  // ebx\n
    unsigned int v217;  // ecx\n
    unsigned int v218;  // esi\n
    unsigned int v219;  // ecx\n
    unsigned int v221;  // ebx\n
    unsigned int v224;  // esi\n
    unsigned int v225;  // edi\n
    unsigned int v227;  // edi\n
    unsigned int v228;  // ebx\n
    unsigned int v229;  // ecx\n
    unsigned int v230;  // ebx\n
    unsigned int v231;  // ecx\n
    unsigned int v232;  // edi\n
    unsigned int v233;  // ecx\n
    unsigned int v235;  // edi\n
    unsigned int v236;  // edx\n
    unsigned int v238;  // edx\n
    unsigned int v239;  // ebx\n
    unsigned int v240;  // ecx\n
    unsigned int v241;  // ebx\n
    unsigned int v242;  // ecx\n
    unsigned int v243;  // edx\n
    unsigned int v244;  // ecx\n
    unsigned int v246;  // edx\n
    unsigned int v247;  // esi\n
    unsigned int v249;  // esi\n
    unsigned int v250;  // ebx\n
    unsigned int v251;  // ecx\n
    unsigned int v252;  // ebx\n
    unsigned int v253;  // ecx\n
    unsigned int v254;  // esi\n
    unsigned int v255;  // ecx\n
    unsigned int v257;  // esi\n
    unsigned int v258;  // edi\n
    unsigned int v260;  // edi\n
    unsigned int v261;  // ebx\n
    unsigned int v262;  // ecx\n
    unsigned int v263;  // ebx\n
    unsigned int v264;  // ecx\n
    unsigned int v265;  // edi\n
    unsigned int v266;  // ecx\n
    unsigned int v268;  // edi\n
    unsigned int v269;  // edx\n
    unsigned int v271;  // edx\n
    unsigned int v272;  // ebx\n
    unsigned int v273;  // ecx\n
    unsigned int v274;  // ebx\n
    unsigned int v275;  // ecx\n
    unsigned int v276;  // edx\n
    unsigned int v277;  // ecx\n
    unsigned int v279;  // edx\n
    unsigned int v280;  // esi\n
    unsigned int v282;  // esi\n
    unsigned int v283;  // ebx\n
    unsigned int v284;  // ecx\n
    unsigned int v285;  // ebx\n
    unsigned int v286;  // ecx\n
    unsigned int v287;  // esi\n
    unsigned int v288;  // ecx\n
    unsigned int v290;  // esi\n
    unsigned int v291;  // edi\n
    unsigned int v293;  // edi\n
    unsigned int v294;  // ebx\n
    unsigned int v295;  // ecx\n
    unsigned int v296;  // ebx\n
    unsigned int v297;  // ecx\n
    unsigned int v298;  // edi\n
    unsigned int v299;  // ecx\n
    unsigned int v301;  // edi\n
    unsigned int v302;  // edx\n
    unsigned int v304;  // edx\n
    unsigned int v305;  // ebx\n
    unsigned int v306;  // ecx\n
    unsigned int v307;  // ebx\n
    unsigned int v308;  // ecx\n
    unsigned int v309;  // edx\n
    unsigned int v310;  // ecx\n
    unsigned int v312;  // edx\n
    unsigned int v313;  // esi\n
    unsigned int v315;  // esi\n
    unsigned int v316;  // ebx\n
    unsigned int v317;  // ecx\n
    unsigned int v318;  // ebx\n
    unsigned int v319;  // ecx\n
    unsigned int v320;  // esi\n
    unsigned int v321;  // ecx\n
    unsigned int v323;  // esi\n
    unsigned int v324;  // edi\n
    unsigned int v326;  // edi\n
    unsigned int v327;  // ebx\n
    unsigned int v328;  // ecx\n
    unsigned int v329;  // ebx\n
    unsigned int v330;  // ecx\n
    unsigned int v331;  // edi\n
    unsigned int v332;  // ecx\n
    unsigned int v334;  // edi\n
    unsigned int v335;  // edx\n
    unsigned int v337;  // edx\n
    unsigned int v338;  // ebx\n
    unsigned int v339;  // ecx\n
    unsigned int v340;  // ebx\n
    unsigned int v341;  // ecx\n
    unsigned int v342;  // edx\n
    unsigned int v343;  // ecx\n
    unsigned int v345;  // edx\n
    unsigned int v346;  // esi\n
    unsigned int v348;  // esi\n
    unsigned int v349;  // ebx\n
    unsigned int v350;  // ecx\n
    unsigned int v351;  // ebx\n
    unsigned int v352;  // ecx\n
    unsigned int v353;  // esi\n
    unsigned int v354;  // ecx\n
    unsigned int v356;  // esi\n
    unsigned int v357;  // edi\n
    unsigned int v359;  // edi\n
    unsigned int v360;  // eax\n
    unsigned int v361;  // ebx\n
    unsigned int v362;  // ecx\n
    unsigned int v363;  // ebx\n
    unsigned int v364;  // ecx\n
    unsigned int v365;  // edi\n
    unsigned short v367[40];  // ecx\n
    unsigned int v369;  // ebx\n
    unsigned short v371[40];  // ecx\n
    unsigned int v372;  // edi\n
    unsigned int v376;  // ecx\n
    unsigned int v377;  // edx\n
    unsigned int v378;  // ecx\n
    unsigned int v379[2];  // eax\n
\n
    *(&v0[0]) = v2;\n
    v3 = a0;\n
    v4 = v1->field_4;\n
    v5 = (v4[33] | v4[32] * 0x10000) ^ v3[0];\n
    v6 = v3[1] ^ v5 ^ (v4[35] | v4[34] * 0x10000);\n
    v7 = v4[0];\n
    v9 = v7 ^ v6 ^ v6 / 0x100;\n
    v10 = (v7 / 0x100 ^ v6 / 0x10000 ^ v6 >> 24) + v9;\n
    v11 = v10;\n
    v12 = (v11 >> 6) + v11 * 4;\n
    v13 = v9 + v12 + 1;\n
    v14 = (v13 >> 6) + v13 * 4;\n
    v16 = v14 + v6;\n
    v18 = ((v16 >> 6) + (v16 & 63) * 4 | v14 * 0x100 | v12 * 0x10000 | ((v6 >> 24) + v12 + 1) * 0x40000 & 0x3000000 | ((v6 >> 24) + v12 + 1) * 0x4000000) ^ v5;\n
    v19 = v4[1];\n
    v21 = v19 ^ v18 ^ v18 / 0x100;\n
    v22 = ((v19 / 0x100 ^ v18 / 0x10000 ^ v18 >> 24) + v21) * 4 + ((v19 / 0x100 ^ v18 / 0x10000 ^ v18 >> 24) + v21 >> 6);\n
    v23 = v21 + v22 + 1;\n
    v24 = (v23 >> 6) + v23 * 4;\n
    v25 = v24 + v18;\n
    v27 = ((v25 >> 6) + (v25 & 63) * 4 | v24 * 0x100 | v22 * 0x10000 | ((v18 >> 24) + v22 + 1) * 0x40000 & 0x3000000 | ((v18 >> 24) + v22 + 1) * 0x4000000) ^ v6;\n
    v28 = v0[2];\n
    v30 = v28 ^ v27 ^ v27 / 0x100;\n
    v31 = (v28 / 0x100 ^ v27 / 0x10000 ^ v27 >> 24) + v30;\n
    v32 = v31;\n
    v33 = (v32 >> 6) + v32 * 4;\n
    v34 = v30 + v33 + 1;\n
    v35 = (v34 >> 6) + v34 * 4;\n
    v36 = v35 + v27;\n
    v38 = ((v36 >> 6) + (v36 & 63) * 4 | v35 * 0x100 | v33 * 0x10000 | ((v27 >> 24) + v33 + 1) * 0x40000 & 0x3000000 | ((v27 >> 24) + v33 + 1) * 0x4000000) ^ v18;\n
    v39 = v0[3];\n
    v41 = v39 ^ v38 ^ v38 / 0x100;\n
    v42 = v38 / 0x1000000;\n
    v43 = (v39 / 0x100 ^ v38 / 0x10000 ^ v42) + v41;\n
    v44 = v43;\n
    v45 = (v44 >> 6) + v44 * 4;\n
    v46 = v41 + v45 + 1;\n
    v47 = (v46 >> 6) + v46 * 4;\n
    v49 = v47 + v38;\n
    v51 = ((v49 >> 6) + (v49 & 63) * 4 | v47 * 0x100 | v45 * 0x10000 | (v42 + v45 + 1) * 0x40000 & 0x3000000 | (v42 + v45 + 1) * 0x4000000) ^ v27;\n
    v52 = v0[4];\n
    v54 = v52 ^ v51 ^ v51 / 0x100;\n
    v55 = (v52 / 0x100 ^ v51 / 0x10000 ^ v51 >> 24) + v54;\n
    v56 = v55;\n
    v57 = (v56 >> 6) + v56 * 4;\n
    v58 = v54 + v57 + 1;\n
    v59 = (v58 >> 6) + v58 * 4;\n
    v60 = v59 + v51;\n
    v62 = ((v60 >> 6) + (v60 & 63) * 4 | v59 * 0x100 | v57 * 0x10000 | ((v51 >> 24) + v57 + 1) * 0x40000 & 0x3000000 | ((v51 >> 24) + v57 + 1) * 0x4000000) ^ v38;\n
    v63 = v0[5];\n
    v65 = v63 ^ v62 ^ v62 / 0x100;\n
    v66 = (v63 / 0x100 ^ v62 / 0x10000 ^ v62 >> 24) + v65;\n
    v67 = v66;\n
    v68 = (v67 >> 6) + v67 * 4;\n
    v69 = v65 + v68 + 1;\n
    v70 = (v69 >> 6) + v69 * 4;\n
    v71 = v70 + v62;\n
    v73 = ((v71 >> 6) + (v71 & 63) * 4 | v70 * 0x100 | v68 * 0x10000 | ((v62 >> 24) + v68 + 1) * 0x40000 & 0x3000000 | ((v62 >> 24) + v68 + 1) * 0x4000000) ^ v51;\n
    v74 = v0[6];\n
    v76 = v74 ^ v73 ^ v73 / 0x100;\n
    v77 = (v74 / 0x100 ^ v73 / 0x10000 ^ v73 >> 24) + v76;\n
    v78 = v77;\n
    v79 = (v78 >> 6) + v78 * 4;\n
    v80 = v76 + v79 + 1;\n
    v81 = (v80 >> 6) + v80 * 4;\n
    v82 = v81 + v73;\n
    v84 = ((v82 >> 6) + (v82 & 63) * 4 | v81 * 0x100 | v79 * 0x10000 | ((v73 >> 24) + v79 + 1) * 0x40000 & 0x3000000 | ((v73 >> 24) + v79 + 1) * 0x4000000) ^ v62;\n
    v85 = v0[7];\n
    v87 = v85 ^ v84 ^ v84 / 0x100;\n
    v88 = (v85 / 0x100 ^ v84 / 0x10000 ^ v84 >> 24) + v87;\n
    v89 = v88;\n
    v90 = (v89 >> 6) + v89 * 4;\n
    v91 = v87 + v90 + 1;\n
    v92 = (v91 >> 6) + v91 * 4;\n
    v93 = v92 + v84;\n
    v95 = ((v93 >> 6) + (v93 & 63) * 4 | v92 * 0x100 | v90 * 0x10000 | ((v84 >> 24) + v90 + 1) * 0x40000 & 0x3000000 | ((v84 >> 24) + v90 + 1) * 0x4000000) ^ v73;\n
    v96 = v0[8];\n
    v98 = v96 ^ v95 ^ v95 / 0x100;\n
    v99 = (v96 / 0x100 ^ v95 / 0x10000 ^ v95 >> 24) + v98;\n
    v100 = v99;\n
    v101 = (v100 >> 6) + v100 * 4;\n
    v102 = v98 + v101 + 1;\n
    v103 = (v102 >> 6) + v102 * 4;\n
    v104 = v103 + v95;\n
    v106 = ((v104 >> 6) + (v104 & 63) * 4 | v103 * 0x100 | v101 * 0x10000 | ((v95 >> 24) + v101 + 1) * 0x40000 & 0x3000000 | ((v95 >> 24) + v101 + 1) * 0x4000000) ^ v84;\n
    v107 = v0[9];\n
    v109 = v107 ^ v106 ^ v106 / 0x100;\n
    v110 = (v107 / 0x100 ^ v106 / 0x10000 ^ v106 >> 24) + v109;\n
    v111 = v110;\n
    v112 = (v111 >> 6) + v111 * 4;\n
    v113 = v109 + v112 + 1;\n
    v114 = (v113 >> 6) + v113 * 4;\n
    v115 = v114 + v106;\n
    v117 = ((v115 >> 6) + (v115 & 63) * 4 | v114 * 0x100 | v112 * 0x10000 | ((v106 >> 24) + v112 + 1) * 0x40000 & 0x3000000 | ((v106 >> 24) + v112 + 1) * 0x4000000) ^ v95;\n
    v118 = v0[10];\n
    v120 = v118 ^ v117 ^ v117 / 0x100;\n
    v121 = (v118 / 0x100 ^ v117 / 0x10000 ^ v117 >> 24) + v120;\n
    v122 = v121;\n
    v123 = (v122 >> 6) + v122 * 4;\n
    v124 = v120 + v123 + 1;\n
    v125 = (v124 >> 6) + v124 * 4;\n
    v126 = v125 + v117;\n
    v128 = ((v126 >> 6) + (v126 & 63) * 4 | v125 * 0x100 | v123 * 0x10000 | ((v117 >> 24) + v123 + 1) * 0x40000 & 0x3000000 | ((v117 >> 24) + v123 + 1) * 0x4000000) ^ v106;\n
    v129 = v0[11];\n
    v131 = v129 ^ v128 ^ v128 / 0x100;\n
    v132 = (v129 / 0x100 ^ v128 / 0x10000 ^ v128 >> 24) + v131;\n
    v133 = v132;\n
    v134 = (v133 >> 6) + v133 * 4;\n
    v135 = v131 + v134 + 1;\n
    v136 = (v135 >> 6) + v135 * 4;\n
    v137 = v136 + v128;\n
    v139 = ((v137 >> 6) + (v137 & 63) * 4 | v136 * 0x100 | v134 * 0x10000 | ((v128 >> 24) + v134 + 1) * 0x40000 & 0x3000000 | ((v128 >> 24) + v134 + 1) * 0x4000000) ^ v117;\n
    v140 = v0[12];\n
    v142 = v140 ^ v139 ^ v139 / 0x100;\n
    v143 = (v140 / 0x100 ^ v139 / 0x10000 ^ v139 >> 24) + v142;\n
    v144 = v143;\n
    v145 = (v144 >> 6) + v144 * 4;\n
    v146 = v142 + v145 + 1;\n
    v147 = (v146 >> 6) + v146 * 4;\n
    v148 = v147 + v139;\n
    v150 = ((v148 >> 6) + (v148 & 63) * 4 | v147 * 0x100 | v145 * 0x10000 | ((v139 >> 24) + v145 + 1) * 0x40000 & 0x3000000 | ((v139 >> 24) + v145 + 1) * 0x4000000) ^ v128;\n
    v151 = v0[13];\n
    v153 = v151 ^ v150 ^ v150 / 0x100;\n
    v154 = (v151 / 0x100 ^ v150 / 0x10000 ^ v150 >> 24) + v153;\n
    v155 = v154;\n
    v156 = (v155 >> 6) + v155 * 4;\n
    v157 = v153 + v156 + 1;\n
    v158 = (v157 >> 6) + v157 * 4;\n
    v159 = v158 + v150;\n
    v161 = ((v159 >> 6) + (v159 & 63) * 4 | v158 * 0x100 | v156 * 0x10000 | ((v150 >> 24) + v156 + 1) * 0x40000 & 0x3000000 | ((v150 >> 24) + v156 + 1) * 0x4000000) ^ v139;\n
    v162 = v0[14];\n
    v164 = v162 ^ v161 ^ v161 / 0x100;\n
    v165 = v161 / 0x1000000;\n
    v166 = (v162 / 0x100 ^ v161 / 0x10000 ^ v165) + v164;\n
    v167 = v166;\n
    v168 = (v167 >> 6) + v167 * 4;\n
    v169 = v164 + v168 + 1;\n
    v170 = (v169 >> 6) + v169 * 4;\n
    v173 = (v165 + v168 + 1) * 0x40000 & 0x3000000 | (v165 + v168 + 1) * 0x4000000;\n
    v174 = v170 + v161;\n
    v176 = ((v174 >> 6) + (v174 & 63) * 4 | v170 * 0x100 | v168 * 0x10000 | v173) ^ v150;\n
    v177 = v0[15];\n
    v179 = v177 ^ v176 ^ v176 / 0x100;\n
    v180 = (v177 / 0x100 ^ v176 / 0x10000 ^ v176 >> 24) + v179;\n
    v181 = v180;\n
    v182 = (v181 >> 6) + v181 * 4;\n
    v183 = v179 + v182 + 1;\n
    v184 = (v183 >> 6) + v183 * 4;\n
    v185 = v184 + v176;\n
    v187 = ((v185 >> 6) + (v185 & 63) * 4 | v184 * 0x100 | v182 * 0x10000 | ((v176 >> 24) + v182 + 1) * 0x40000 & 0x3000000 | ((v176 >> 24) + v182 + 1) * 0x4000000) ^ v161;\n
    v188 = v0[16];\n
    v190 = v188 ^ v187 ^ v187 / 0x100;\n
    v191 = (v188 / 0x100 ^ v187 / 0x10000 ^ v187 >> 24) + v190;\n
    v192 = v191;\n
    v193 = (v192 >> 6) + v192 * 4;\n
    v194 = v190 + v193 + 1;\n
    v195 = (v194 >> 6) + v194 * 4;\n
    v196 = v195 + v187;\n
    v198 = ((v196 >> 6) + (v196 & 63) * 4 | v195 * 0x100 | v193 * 0x10000 | ((v187 >> 24) + v193 + 1) * 0x40000 & 0x3000000 | ((v187 >> 24) + v193 + 1) * 0x4000000) ^ v176;\n
    v199 = v0[17];\n
    v201 = v199 ^ v198 ^ v198 / 0x100;\n
    v202 = (v199 / 0x100 ^ v198 / 0x10000 ^ v198 >> 24) + v201;\n
    v203 = v202;\n
    v204 = (v203 >> 6) + v203 * 4;\n
    v205 = v201 + v204 + 1;\n
    v206 = (v205 >> 6) + v205 * 4;\n
    v207 = v206 + v198;\n
    v209 = ((v207 >> 6) + (v207 & 63) * 4 | v206 * 0x100 | v204 * 0x10000 | ((v198 >> 24) + v204 + 1) * 0x40000 & 0x3000000 | ((v198 >> 24) + v204 + 1) * 0x4000000) ^ v187;\n
    v210 = v0[18];\n
    v212 = v210 ^ v209 ^ v209 / 0x100;\n
    v213 = v209 / 0x1000000;\n
    v214 = (v210 / 0x100 ^ v209 / 0x10000 ^ v213) + v212;\n
    v215 = v214;\n
    v216 = (v215 >> 6) + v215 * 4;\n
    v217 = v212 + v216 + 1;\n
    v218 = (v217 >> 6) + v217 * 4;\n
    v219 = v218 + v209;\n
    v221 = v218 * 0x100 | v216 * 0x10000 | (v213 + v216 + 1) * 0x40000 & 0x3000000 | (v213 + v216 + 1) * 0x4000000;\n
    v224 = (v219 / 64 + (v219 & 63) * 4 | v221) ^ v198;\n
    v225 = v0[19];\n
    v227 = v225 ^ v224 ^ v224 / 0x100;\n
    v228 = (v225 / 0x100 ^ v224 / 0x10000 ^ v224 >> 24) + v227;\n
    v229 = v228;\n
    v230 = (v229 >> 6) + v229 * 4;\n
    v231 = v227 + v230 + 1;\n
    v232 = (v231 >> 6) + v231 * 4;\n
    v233 = v232 + v224;\n
    v235 = ((v233 >> 6) + (v233 & 63) * 4 | v232 * 0x100 | v230 * 0x10000 | ((v224 >> 24) + v230 + 1) * 0x40000 & 0x3000000 | ((v224 >> 24) + v230 + 1) * 0x4000000) ^ v209;\n
    v236 = v0[20];\n
    v238 = v236 ^ v235 ^ v235 / 0x100;\n
    v239 = (v236 / 0x100 ^ v235 / 0x10000 ^ v235 >> 24) + v238;\n
    v240 = v239;\n
    v241 = (v240 >> 6) + v240 * 4;\n
    v242 = v238 + v241 + 1;\n
    v243 = (v242 >> 6) + v242 * 4;\n
    v244 = v243 + v235;\n
    v246 = ((v244 >> 6) + (v244 & 63) * 4 | v243 * 0x100 | v241 * 0x10000 | ((v235 >> 24) + v241 + 1) * 0x40000 & 0x3000000 | ((v235 >> 24) + v241 + 1) * 0x4000000) ^ v224;\n
    v247 = v0[21];\n
    v249 = v247 ^ v246 ^ v246 / 0x100;\n
    v250 = (v247 / 0x100 ^ v246 / 0x10000 ^ v246 >> 24) + v249;\n
    v251 = v250;\n
    v252 = (v251 >> 6) + v251 * 4;\n
    v253 = v249 + v252 + 1;\n
    v254 = (v253 >> 6) + v253 * 4;\n
    v255 = v254 + v246;\n
    v257 = ((v255 >> 6) + (v255 & 63) * 4 | v254 * 0x100 | v252 * 0x10000 | ((v246 >> 24) + v252 + 1) * 0x40000 & 0x3000000 | ((v246 >> 24) + v252 + 1) * 0x4000000) ^ v235;\n
    v258 = v0[22];\n
    v260 = v258 ^ v257 ^ v257 / 0x100;\n
    v261 = (v258 / 0x100 ^ v257 / 0x10000 ^ v257 >> 24) + v260;\n
    v262 = v261;\n
    v263 = (v262 >> 6) + v262 * 4;\n
    v264 = v260 + v263 + 1;\n
    v265 = (v264 >> 6) + v264 * 4;\n
    v266 = v265 + v257;\n
    v268 = ((v266 >> 6) + (v266 & 63) * 4 | v265 * 0x100 | v263 * 0x10000 | ((v257 >> 24) + v263 + 1) * 0x40000 & 0x3000000 | ((v257 >> 24) + v263 + 1) * 0x4000000) ^ v246;\n
    v269 = v0[23];\n
    v271 = v269 ^ v268 ^ v268 / 0x100;\n
    v272 = (v269 / 0x100 ^ v268 / 0x10000 ^ v268 >> 24) + v271;\n
    v273 = v272;\n
    v274 = (v273 >> 6) + v273 * 4;\n
    v275 = v271 + v274 + 1;\n
    v276 = (v275 >> 6) + v275 * 4;\n
    v277 = v276 + v268;\n
    v279 = ((v277 >> 6) + (v277 & 63) * 4 | v276 * 0x100 | v274 * 0x10000 | ((v268 >> 24) + v274 + 1) * 0x40000 & 0x3000000 | ((v268 >> 24) + v274 + 1) * 0x4000000) ^ v257;\n
    v280 = v0[24];\n
    v282 = v280 ^ v279 ^ v279 / 0x100;\n
    v283 = (v280 / 0x100 ^ v279 / 0x10000 ^ v279 >> 24) + v282;\n
    v284 = v283;\n
    v285 = (v284 >> 6) + v284 * 4;\n
    v286 = v282 + v285 + 1;\n
    v287 = (v286 >> 6) + v286 * 4;\n
    v288 = v287 + v279;\n
    v290 = ((v288 >> 6) + (v288 & 63) * 4 | v287 * 0x100 | v285 * 0x10000 | ((v279 >> 24) + v285 + 1) * 0x40000 & 0x3000000 | ((v279 >> 24) + v285 + 1) * 0x4000000) ^ v268;\n
    v291 = v0[25];\n
    v293 = v291 ^ v290 ^ v290 / 0x100;\n
    v294 = (v291 / 0x100 ^ v290 / 0x10000 ^ v290 >> 24) + v293;\n
    v295 = v294;\n
    v296 = (v295 >> 6) + v295 * 4;\n
    v297 = v293 + v296 + 1;\n
    v298 = (v297 >> 6) + v297 * 4;\n
    v299 = v298 + v290;\n
    v301 = ((v299 >> 6) + (v299 & 63) * 4 | v298 * 0x100 | v296 * 0x10000 | ((v290 >> 24) + v296 + 1) * 0x40000 & 0x3000000 | ((v290 >> 24) + v296 + 1) * 0x4000000) ^ v279;\n
    v302 = v0[26];\n
    v304 = v302 ^ v301 ^ v301 / 0x100;\n
    v305 = (v302 / 0x100 ^ v301 / 0x10000 ^ v301 >> 24) + v304;\n
    v306 = v305;\n
    v307 = (v306 >> 6) + v306 * 4;\n
    v308 = v304 + v307 + 1;\n
    v309 = (v308 >> 6) + v308 * 4;\n
    v310 = v309 + v301;\n
    v312 = ((v310 >> 6) + (v310 & 63) * 4 | v309 * 0x100 | v307 * 0x10000 | ((v301 >> 24) + v307 + 1) * 0x40000 & 0x3000000 | ((v301 >> 24) + v307 + 1) * 0x4000000) ^ v290;\n
    v313 = v0[27];\n
    v315 = v313 ^ v312 ^ v312 / 0x100;\n
    v316 = (v313 / 0x100 ^ v312 / 0x10000 ^ v312 >> 24) + v315;\n
    v317 = v316;\n
    v318 = (v317 >> 6) + v317 * 4;\n
    v319 = v315 + v318 + 1;\n
    v320 = (v319 >> 6) + v319 * 4;\n
    v321 = v320 + v312;\n
    v323 = ((v321 >> 6) + (v321 & 63) * 4 | v320 * 0x100 | v318 * 0x10000 | ((v312 >> 24) + v318 + 1) * 0x40000 & 0x3000000 | ((v312 >> 24) + v318 + 1) * 0x4000000) ^ v301;\n
    v324 = v0[28];\n
    v326 = v324 ^ v323 ^ v323 / 0x100;\n
    v327 = (v324 / 0x100 ^ v323 / 0x10000 ^ v323 >> 24) + v326;\n
    v328 = v327;\n
    v329 = (v328 >> 6) + v328 * 4;\n
    v330 = v326 + v329 + 1;\n
    v331 = (v330 >> 6) + v330 * 4;\n
    v332 = v331 + v323;\n
    v334 = ((v332 >> 6) + (v332 & 63) * 4 | v331 * 0x100 | v329 * 0x10000 | ((v323 >> 24) + v329 + 1) * 0x40000 & 0x3000000 | ((v323 >> 24) + v329 + 1) * 0x4000000) ^ v312;\n
    v335 = v0[29];\n
    v337 = v335 ^ v334 ^ v334 / 0x100;\n
    v338 = (v335 / 0x100 ^ v334 / 0x10000 ^ v334 >> 24) + v337;\n
    v339 = v338;\n
    v340 = (v339 >> 6) + v339 * 4;\n
    v341 = v337 + v340 + 1;\n
    v342 = (v341 >> 6) + v341 * 4;\n
    v343 = v342 + v334;\n
    v345 = ((v343 >> 6) + (v343 & 63) * 4 | v342 * 0x100 | v340 * 0x10000 | ((v334 >> 24) + v340 + 1) * 0x40000 & 0x3000000 | ((v334 >> 24) + v340 + 1) * 0x4000000) ^ v323;\n
    v346 = v0[30];\n
    v348 = v346 ^ v345 ^ v345 / 0x100;\n
    v349 = (v346 / 0x100 ^ v345 / 0x10000 ^ v345 >> 24) + v348;\n
    v350 = v349;\n
    v351 = (v350 >> 6) + v350 * 4;\n
    v352 = v348 + v351 + 1;\n
    v353 = (v352 >> 6) + v352 * 4;\n
    v354 = v353 + v345;\n
    v356 = ((v354 >> 6) + (v354 & 63) * 4 | v353 * 0x100 | v351 * 0x10000 | ((v345 >> 24) + v351 + 1) * 0x40000 & 0x3000000 | ((v345 >> 24) + v351 + 1) * 0x4000000) ^ v334;\n
    v357 = v0[31];\n
    v359 = v357 ^ v356 ^ v356 / 0x100;\n
    v360 = v356 / 0x1000000;\n
    v361 = (v357 / 0x100 ^ v356 / 0x10000 ^ v360) + v359;\n
    v362 = v361;\n
    v363 = (v362 >> 6) + v362 * 4;\n
    v364 = v359 + v363 + 1;\n
    v365 = (v364 >> 6) + v364 * 4;\n
    v367 = v365 + v356;\n
    v369 = v365 * 0x100 | v363 * 0x10000 | (v360 + v363 + 1) * 0x40000 & 0x3000000 | (v360 + v363 + 1) * 0x4000000;\n
    v371 = v367 & 63;\n
    v372 = (v367 / 64 + v371 * 4 | v369) ^ v345;\n
    v376 = (v371[39] | v371[38] * 0x10000) ^ v356;\n
    v377 = (v371[37] | v371[36] * 0x10000) ^ v372;\n
    v378 = v376 ^ v372;\n
    v379 = a0;\n
    v379[0] = v377;\n
    v379[1] = v378;\n
    return 0;\n
}\n
", "4230922:sub_408f0a": null, "4230928:cgc_faith_decode": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[60];\n
    unsigned short field_3c;\n
    unsigned short field_3e;\n
    char padding_40[8];\n
    unsigned short field_48;\n
    unsigned short field_4a;\n
    unsigned short field_4c;\n
    unsigned short field_4e;\n
} struct_1;\n
\n
int cgc_faith_decode(struct_0 *v1, unsigned int a0[2])\n
{\n
    unsigned short v0[30];  // [bp-0x14]\n
    unsigned short v2[30];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned short v4[40];  // ecx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v16;  // ebx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // edi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // ecx\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // edx\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // esi\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // ecx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // esi\n
    unsigned int v49;  // ecx\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // edi\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ebx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // ebx\n
    unsigned int v58;  // ecx\n
    unsigned int v59;  // edi\n
    unsigned int v60;  // ecx\n
    unsigned int v62;  // edi\n
    unsigned int v63;  // edx\n
    unsigned int v65;  // edx\n
    unsigned int v66;  // ebx\n
    unsigned int v67;  // ecx\n
    unsigned int v68;  // ebx\n
    unsigned int v69;  // ecx\n
    unsigned int v70;  // edx\n
    unsigned int v71;  // ecx\n
    unsigned int v73;  // edx\n
    unsigned int v74;  // esi\n
    unsigned int v76;  // esi\n
    unsigned int v77;  // ebx\n
    unsigned int v78;  // ecx\n
    unsigned int v79;  // ebx\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // esi\n
    unsigned int v82;  // ecx\n
    unsigned int v84;  // esi\n
    unsigned int v85;  // edi\n
    unsigned int v87;  // edi\n
    unsigned int v88;  // ebx\n
    unsigned int v89;  // ecx\n
    unsigned int v90;  // ebx\n
    unsigned int v91;  // ecx\n
    unsigned int v92;  // edi\n
    unsigned int v93;  // ecx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // edx\n
    unsigned int v98;  // edx\n
    unsigned int v99;  // ebx\n
    unsigned int v100;  // ecx\n
    unsigned int v101;  // ebx\n
    unsigned int v102;  // ecx\n
    unsigned int v103;  // edx\n
    unsigned int v104;  // ecx\n
    unsigned int v106;  // edx\n
    unsigned int v107;  // esi\n
    unsigned int v109;  // esi\n
    unsigned int v110;  // ebx\n
    unsigned int v111;  // ecx\n
    unsigned int v112;  // ebx\n
    unsigned int v113;  // ecx\n
    unsigned int v114;  // esi\n
    unsigned int v115;  // ecx\n
    unsigned int v117;  // esi\n
    unsigned int v118;  // edi\n
    unsigned int v120;  // edi\n
    unsigned int v121;  // ebx\n
    unsigned int v122;  // ecx\n
    unsigned int v123;  // ebx\n
    unsigned int v124;  // ecx\n
    unsigned int v125;  // edi\n
    unsigned int v126;  // ecx\n
    unsigned int v128;  // edi\n
    unsigned int v129;  // edx\n
    unsigned int v131;  // edx\n
    unsigned int v132;  // ebx\n
    unsigned int v133;  // ecx\n
    unsigned int v134;  // ebx\n
    unsigned int v135;  // ecx\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // ecx\n
    unsigned int v139;  // edx\n
    unsigned int v140;  // esi\n
    unsigned int v142;  // esi\n
    unsigned int v143;  // ebx\n
    unsigned int v144;  // ecx\n
    unsigned int v145;  // ebx\n
    unsigned int v146;  // ecx\n
    unsigned int v147;  // esi\n
    unsigned int v148;  // ecx\n
    unsigned int v150;  // esi\n
    unsigned int v151;  // edi\n
    unsigned int v153;  // edi\n
    unsigned int v154;  // ebx\n
    unsigned int v155;  // ecx\n
    unsigned int v156;  // ebx\n
    unsigned int v157;  // ecx\n
    unsigned int v158;  // edi\n
    unsigned int v159;  // ecx\n
    unsigned int v161;  // edi\n
    unsigned int v162;  // edx\n
    unsigned int v164;  // edx\n
    unsigned int v165;  // eax\n
    unsigned int v166;  // ebx\n
    unsigned int v167;  // ecx\n
    unsigned int v168;  // ebx\n
    unsigned int v169;  // ecx\n
    unsigned int v170;  // edx\n
    unsigned int v173;  // ebp\n
    unsigned int v174;  // ecx\n
    unsigned int v176;  // edx\n
    unsigned int v177;  // esi\n
    unsigned int v179;  // esi\n
    unsigned int v180;  // ebx\n
    unsigned int v181;  // ecx\n
    unsigned int v182;  // ebx\n
    unsigned int v183;  // ecx\n
    unsigned int v184;  // esi\n
    unsigned int v185;  // ecx\n
    unsigned int v187;  // esi\n
    unsigned int v188;  // edi\n
    unsigned int v190;  // edi\n
    unsigned int v191;  // ebx\n
    unsigned int v192;  // ecx\n
    unsigned int v193;  // ebx\n
    unsigned int v194;  // ecx\n
    unsigned int v195;  // edi\n
    unsigned int v196;  // ecx\n
    unsigned int v198;  // edi\n
    unsigned int v199;  // edx\n
    unsigned int v201;  // edx\n
    unsigned int v202;  // ebx\n
    unsigned int v203;  // ecx\n
    unsigned int v204;  // ebx\n
    unsigned int v205;  // ecx\n
    unsigned int v206;  // edx\n
    unsigned int v207;  // ecx\n
    unsigned int v209;  // edx\n
    unsigned int v210;  // esi\n
    unsigned int v212;  // esi\n
    unsigned int v213;  // eax\n
    unsigned int v214;  // ebx\n
    unsigned int v215;  // ecx\n
    unsigned int v216;  // ebx\n
    unsigned int v217;  // ecx\n
    unsigned int v218;  // esi\n
    unsigned int v219;  // ecx\n
    unsigned int v221;  // ebx\n
    unsigned int v224;  // esi\n
    unsigned int v225;  // edi\n
    unsigned int v227;  // edi\n
    unsigned int v228;  // ebx\n
    unsigned int v229;  // ecx\n
    unsigned int v230;  // ebx\n
    unsigned int v231;  // ecx\n
    unsigned int v232;  // edi\n
    unsigned int v233;  // ecx\n
    unsigned int v235;  // edi\n
    unsigned int v236;  // edx\n
    unsigned int v238;  // edx\n
    unsigned int v239;  // ebx\n
    unsigned int v240;  // ecx\n
    unsigned int v241;  // ebx\n
    unsigned int v242;  // ecx\n
    unsigned int v243;  // edx\n
    unsigned int v244;  // ecx\n
    unsigned int v246;  // edx\n
    unsigned int v247;  // esi\n
    unsigned int v249;  // esi\n
    unsigned int v250;  // ebx\n
    unsigned int v251;  // ecx\n
    unsigned int v252;  // ebx\n
    unsigned int v253;  // ecx\n
    unsigned int v254;  // esi\n
    unsigned int v255;  // ecx\n
    unsigned int v257;  // esi\n
    unsigned int v258;  // edi\n
    unsigned int v260;  // edi\n
    unsigned int v261;  // ebx\n
    unsigned int v262;  // ecx\n
    unsigned int v263;  // ebx\n
    unsigned int v264;  // ecx\n
    unsigned int v265;  // edi\n
    unsigned int v266;  // ecx\n
    unsigned int v268;  // edi\n
    unsigned int v269;  // edx\n
    unsigned int v271;  // edx\n
    unsigned int v272;  // ebx\n
    unsigned int v273;  // ecx\n
    unsigned int v274;  // ebx\n
    unsigned int v275;  // ecx\n
    unsigned int v276;  // edx\n
    unsigned int v277;  // ecx\n
    unsigned int v279;  // edx\n
    unsigned int v280;  // esi\n
    unsigned int v282;  // esi\n
    unsigned int v283;  // ebx\n
    unsigned int v284;  // ecx\n
    unsigned int v285;  // ebx\n
    unsigned int v286;  // ecx\n
    unsigned int v287;  // esi\n
    unsigned int v288;  // ecx\n
    unsigned int v290;  // esi\n
    unsigned int v291;  // edi\n
    unsigned int v293;  // edi\n
    unsigned int v294;  // ebx\n
    unsigned int v295;  // ecx\n
    unsigned int v296;  // ebx\n
    unsigned int v297;  // ecx\n
    unsigned int v298;  // edi\n
    unsigned int v299;  // ecx\n
    unsigned int v301;  // edi\n
    unsigned int v302;  // edx\n
    unsigned int v304;  // edx\n
    unsigned int v305;  // ebx\n
    unsigned int v306;  // ecx\n
    unsigned int v307;  // ebx\n
    unsigned int v308;  // ecx\n
    unsigned int v309;  // edx\n
    unsigned int v310;  // ecx\n
    unsigned int v312;  // edx\n
    unsigned int v313;  // esi\n
    unsigned int v315;  // esi\n
    unsigned int v316;  // ebx\n
    unsigned int v317;  // ecx\n
    unsigned int v318;  // ebx\n
    unsigned int v319;  // ecx\n
    unsigned int v320;  // esi\n
    unsigned int v321;  // ecx\n
    unsigned int v323;  // esi\n
    unsigned int v324;  // edi\n
    unsigned int v326;  // edi\n
    unsigned int v327;  // ebx\n
    unsigned int v328;  // ecx\n
    unsigned int v329;  // ebx\n
    unsigned int v330;  // ecx\n
    unsigned int v331;  // edi\n
    unsigned int v332;  // ecx\n
    unsigned int v334;  // edi\n
    unsigned int v335;  // edx\n
    unsigned int v337;  // edx\n
    unsigned int v338;  // ebx\n
    unsigned int v339;  // ecx\n
    unsigned int v340;  // ebx\n
    unsigned int v341;  // ecx\n
    unsigned int v342;  // edx\n
    unsigned int v343;  // ecx\n
    unsigned int v345;  // edx\n
    unsigned int v346;  // esi\n
    unsigned int v348;  // esi\n
    unsigned int v349;  // ebx\n
    unsigned int v350;  // ecx\n
    unsigned int v351;  // ebx\n
    unsigned int v352;  // ecx\n
    unsigned int v353;  // esi\n
    unsigned int v354;  // ecx\n
    unsigned int v356;  // esi\n
    unsigned int v357;  // edi\n
    unsigned int v359;  // edi\n
    unsigned int v360;  // eax\n
    unsigned int v361;  // ebx\n
    unsigned int v362;  // ecx\n
    unsigned int v363;  // ebx\n
    unsigned int v364;  // ecx\n
    unsigned int v365;  // edi\n
    unsigned short v367[36];  // ecx\n
    unsigned int v369;  // ebx\n
    unsigned short v371[36];  // ecx\n
    unsigned int v372;  // edi\n
    unsigned int v376;  // ecx\n
    unsigned int v377;  // edx\n
    unsigned int v378;  // ecx\n
    unsigned int v379[2];  // eax\n
\n
    *(&v0[0]) = v2;\n
    v3 = a0;\n
    v4 = v1->field_4;\n
    v5 = (v4[37] | v4[36] * 0x10000) ^ v3[0];\n
    v6 = v3[1] ^ v5 ^ (v4[39] | v4[38] * 0x10000);\n
    v7 = v4[31];\n
    v9 = v7 ^ v6 ^ v6 / 0x100;\n
    v10 = (v7 / 0x100 ^ v6 / 0x10000 ^ v6 >> 24) + v9;\n
    v11 = v10;\n
    v12 = (v11 >> 6) + v11 * 4;\n
    v13 = v9 + v12 + 1;\n
    v14 = (v13 >> 6) + v13 * 4;\n
    v16 = v14 + v6;\n
    v18 = ((v16 >> 6) + (v16 & 63) * 4 | v14 * 0x100 | v12 * 0x10000 | ((v6 >> 24) + v12 + 1) * 0x40000 & 0x3000000 | ((v6 >> 24) + v12 + 1) * 0x4000000) ^ v5;\n
    v19 = v4[30];\n
    v21 = v19 ^ v18 ^ v18 / 0x100;\n
    v22 = ((v19 / 0x100 ^ v18 / 0x10000 ^ v18 >> 24) + v21) * 4 + ((v19 / 0x100 ^ v18 / 0x10000 ^ v18 >> 24) + v21 >> 6);\n
    v23 = v21 + v22 + 1;\n
    v24 = (v23 >> 6) + v23 * 4;\n
    v25 = v24 + v18;\n
    v27 = ((v25 >> 6) + (v25 & 63) * 4 | v24 * 0x100 | v22 * 0x10000 | ((v18 >> 24) + v22 + 1) * 0x40000 & 0x3000000 | ((v18 >> 24) + v22 + 1) * 0x4000000) ^ v6;\n
    v28 = v0[29];\n
    v30 = v28 ^ v27 ^ v27 / 0x100;\n
    v31 = (v28 / 0x100 ^ v27 / 0x10000 ^ v27 >> 24) + v30;\n
    v32 = v31;\n
    v33 = (v32 >> 6) + v32 * 4;\n
    v34 = v30 + v33 + 1;\n
    v35 = (v34 >> 6) + v34 * 4;\n
    v36 = v35 + v27;\n
    v38 = ((v36 >> 6) + (v36 & 63) * 4 | v35 * 0x100 | v33 * 0x10000 | ((v27 >> 24) + v33 + 1) * 0x40000 & 0x3000000 | ((v27 >> 24) + v33 + 1) * 0x4000000) ^ v18;\n
    v39 = v0[28];\n
    v41 = v39 ^ v38 ^ v38 / 0x100;\n
    v42 = v38 / 0x1000000;\n
    v43 = (v39 / 0x100 ^ v38 / 0x10000 ^ v42) + v41;\n
    v44 = v43;\n
    v45 = (v44 >> 6) + v44 * 4;\n
    v46 = v41 + v45 + 1;\n
    v47 = (v46 >> 6) + v46 * 4;\n
    v49 = v47 + v38;\n
    v51 = ((v49 >> 6) + (v49 & 63) * 4 | v47 * 0x100 | v45 * 0x10000 | (v42 + v45 + 1) * 0x40000 & 0x3000000 | (v42 + v45 + 1) * 0x4000000) ^ v27;\n
    v52 = v0[27];\n
    v54 = v52 ^ v51 ^ v51 / 0x100;\n
    v55 = (v52 / 0x100 ^ v51 / 0x10000 ^ v51 >> 24) + v54;\n
    v56 = v55;\n
    v57 = (v56 >> 6) + v56 * 4;\n
    v58 = v54 + v57 + 1;\n
    v59 = (v58 >> 6) + v58 * 4;\n
    v60 = v59 + v51;\n
    v62 = ((v60 >> 6) + (v60 & 63) * 4 | v59 * 0x100 | v57 * 0x10000 | ((v51 >> 24) + v57 + 1) * 0x40000 & 0x3000000 | ((v51 >> 24) + v57 + 1) * 0x4000000) ^ v38;\n
    v63 = v0[26];\n
    v65 = v63 ^ v62 ^ v62 / 0x100;\n
    v66 = (v63 / 0x100 ^ v62 / 0x10000 ^ v62 >> 24) + v65;\n
    v67 = v66;\n
    v68 = (v67 >> 6) + v67 * 4;\n
    v69 = v65 + v68 + 1;\n
    v70 = (v69 >> 6) + v69 * 4;\n
    v71 = v70 + v62;\n
    v73 = ((v71 >> 6) + (v71 & 63) * 4 | v70 * 0x100 | v68 * 0x10000 | ((v62 >> 24) + v68 + 1) * 0x40000 & 0x3000000 | ((v62 >> 24) + v68 + 1) * 0x4000000) ^ v51;\n
    v74 = v0[25];\n
    v76 = v74 ^ v73 ^ v73 / 0x100;\n
    v77 = (v74 / 0x100 ^ v73 / 0x10000 ^ v73 >> 24) + v76;\n
    v78 = v77;\n
    v79 = (v78 >> 6) + v78 * 4;\n
    v80 = v76 + v79 + 1;\n
    v81 = (v80 >> 6) + v80 * 4;\n
    v82 = v81 + v73;\n
    v84 = ((v82 >> 6) + (v82 & 63) * 4 | v81 * 0x100 | v79 * 0x10000 | ((v73 >> 24) + v79 + 1) * 0x40000 & 0x3000000 | ((v73 >> 24) + v79 + 1) * 0x4000000) ^ v62;\n
    v85 = v0[24];\n
    v87 = v85 ^ v84 ^ v84 / 0x100;\n
    v88 = (v85 / 0x100 ^ v84 / 0x10000 ^ v84 >> 24) + v87;\n
    v89 = v88;\n
    v90 = (v89 >> 6) + v89 * 4;\n
    v91 = v87 + v90 + 1;\n
    v92 = (v91 >> 6) + v91 * 4;\n
    v93 = v92 + v84;\n
    v95 = ((v93 >> 6) + (v93 & 63) * 4 | v92 * 0x100 | v90 * 0x10000 | ((v84 >> 24) + v90 + 1) * 0x40000 & 0x3000000 | ((v84 >> 24) + v90 + 1) * 0x4000000) ^ v73;\n
    v96 = v0[23];\n
    v98 = v96 ^ v95 ^ v95 / 0x100;\n
    v99 = (v96 / 0x100 ^ v95 / 0x10000 ^ v95 >> 24) + v98;\n
    v100 = v99;\n
    v101 = (v100 >> 6) + v100 * 4;\n
    v102 = v98 + v101 + 1;\n
    v103 = (v102 >> 6) + v102 * 4;\n
    v104 = v103 + v95;\n
    v106 = ((v104 >> 6) + (v104 & 63) * 4 | v103 * 0x100 | v101 * 0x10000 | ((v95 >> 24) + v101 + 1) * 0x40000 & 0x3000000 | ((v95 >> 24) + v101 + 1) * 0x4000000) ^ v84;\n
    v107 = v0[22];\n
    v109 = v107 ^ v106 ^ v106 / 0x100;\n
    v110 = (v107 / 0x100 ^ v106 / 0x10000 ^ v106 >> 24) + v109;\n
    v111 = v110;\n
    v112 = (v111 >> 6) + v111 * 4;\n
    v113 = v109 + v112 + 1;\n
    v114 = (v113 >> 6) + v113 * 4;\n
    v115 = v114 + v106;\n
    v117 = ((v115 >> 6) + (v115 & 63) * 4 | v114 * 0x100 | v112 * 0x10000 | ((v106 >> 24) + v112 + 1) * 0x40000 & 0x3000000 | ((v106 >> 24) + v112 + 1) * 0x4000000) ^ v95;\n
    v118 = v0[21];\n
    v120 = v118 ^ v117 ^ v117 / 0x100;\n
    v121 = (v118 / 0x100 ^ v117 / 0x10000 ^ v117 >> 24) + v120;\n
    v122 = v121;\n
    v123 = (v122 >> 6) + v122 * 4;\n
    v124 = v120 + v123 + 1;\n
    v125 = (v124 >> 6) + v124 * 4;\n
    v126 = v125 + v117;\n
    v128 = ((v126 >> 6) + (v126 & 63) * 4 | v125 * 0x100 | v123 * 0x10000 | ((v117 >> 24) + v123 + 1) * 0x40000 & 0x3000000 | ((v117 >> 24) + v123 + 1) * 0x4000000) ^ v106;\n
    v129 = v0[20];\n
    v131 = v129 ^ v128 ^ v128 / 0x100;\n
    v132 = (v129 / 0x100 ^ v128 / 0x10000 ^ v128 >> 24) + v131;\n
    v133 = v132;\n
    v134 = (v133 >> 6) + v133 * 4;\n
    v135 = v131 + v134 + 1;\n
    v136 = (v135 >> 6) + v135 * 4;\n
    v137 = v136 + v128;\n
    v139 = ((v137 >> 6) + (v137 & 63) * 4 | v136 * 0x100 | v134 * 0x10000 | ((v128 >> 24) + v134 + 1) * 0x40000 & 0x3000000 | ((v128 >> 24) + v134 + 1) * 0x4000000) ^ v117;\n
    v140 = v0[19];\n
    v142 = v140 ^ v139 ^ v139 / 0x100;\n
    v143 = (v140 / 0x100 ^ v139 / 0x10000 ^ v139 >> 24) + v142;\n
    v144 = v143;\n
    v145 = (v144 >> 6) + v144 * 4;\n
    v146 = v142 + v145 + 1;\n
    v147 = (v146 >> 6) + v146 * 4;\n
    v148 = v147 + v139;\n
    v150 = ((v148 >> 6) + (v148 & 63) * 4 | v147 * 0x100 | v145 * 0x10000 | ((v139 >> 24) + v145 + 1) * 0x40000 & 0x3000000 | ((v139 >> 24) + v145 + 1) * 0x4000000) ^ v128;\n
    v151 = v0[18];\n
    v153 = v151 ^ v150 ^ v150 / 0x100;\n
    v154 = (v151 / 0x100 ^ v150 / 0x10000 ^ v150 >> 24) + v153;\n
    v155 = v154;\n
    v156 = (v155 >> 6) + v155 * 4;\n
    v157 = v153 + v156 + 1;\n
    v158 = (v157 >> 6) + v157 * 4;\n
    v159 = v158 + v150;\n
    v161 = ((v159 >> 6) + (v159 & 63) * 4 | v158 * 0x100 | v156 * 0x10000 | ((v150 >> 24) + v156 + 1) * 0x40000 & 0x3000000 | ((v150 >> 24) + v156 + 1) * 0x4000000) ^ v139;\n
    v162 = v0[17];\n
    v164 = v162 ^ v161 ^ v161 / 0x100;\n
    v165 = v161 / 0x1000000;\n
    v166 = (v162 / 0x100 ^ v161 / 0x10000 ^ v165) + v164;\n
    v167 = v166;\n
    v168 = (v167 >> 6) + v167 * 4;\n
    v169 = v164 + v168 + 1;\n
    v170 = (v169 >> 6) + v169 * 4;\n
    v173 = (v165 + v168 + 1) * 0x40000 & 0x3000000 | (v165 + v168 + 1) * 0x4000000;\n
    v174 = v170 + v161;\n
    v176 = ((v174 >> 6) + (v174 & 63) * 4 | v170 * 0x100 | v168 * 0x10000 | v173) ^ v150;\n
    v177 = v0[16];\n
    v179 = v177 ^ v176 ^ v176 / 0x100;\n
    v180 = (v177 / 0x100 ^ v176 / 0x10000 ^ v176 >> 24) + v179;\n
    v181 = v180;\n
    v182 = (v181 >> 6) + v181 * 4;\n
    v183 = v179 + v182 + 1;\n
    v184 = (v183 >> 6) + v183 * 4;\n
    v185 = v184 + v176;\n
    v187 = ((v185 >> 6) + (v185 & 63) * 4 | v184 * 0x100 | v182 * 0x10000 | ((v176 >> 24) + v182 + 1) * 0x40000 & 0x3000000 | ((v176 >> 24) + v182 + 1) * 0x4000000) ^ v161;\n
    v188 = v0[15];\n
    v190 = v188 ^ v187 ^ v187 / 0x100;\n
    v191 = (v188 / 0x100 ^ v187 / 0x10000 ^ v187 >> 24) + v190;\n
    v192 = v191;\n
    v193 = (v192 >> 6) + v192 * 4;\n
    v194 = v190 + v193 + 1;\n
    v195 = (v194 >> 6) + v194 * 4;\n
    v196 = v195 + v187;\n
    v198 = ((v196 >> 6) + (v196 & 63) * 4 | v195 * 0x100 | v193 * 0x10000 | ((v187 >> 24) + v193 + 1) * 0x40000 & 0x3000000 | ((v187 >> 24) + v193 + 1) * 0x4000000) ^ v176;\n
    v199 = v0[14];\n
    v201 = v199 ^ v198 ^ v198 / 0x100;\n
    v202 = (v199 / 0x100 ^ v198 / 0x10000 ^ v198 >> 24) + v201;\n
    v203 = v202;\n
    v204 = (v203 >> 6) + v203 * 4;\n
    v205 = v201 + v204 + 1;\n
    v206 = (v205 >> 6) + v205 * 4;\n
    v207 = v206 + v198;\n
    v209 = ((v207 >> 6) + (v207 & 63) * 4 | v206 * 0x100 | v204 * 0x10000 | ((v198 >> 24) + v204 + 1) * 0x40000 & 0x3000000 | ((v198 >> 24) + v204 + 1) * 0x4000000) ^ v187;\n
    v210 = v0[13];\n
    v212 = v210 ^ v209 ^ v209 / 0x100;\n
    v213 = v209 / 0x1000000;\n
    v214 = (v210 / 0x100 ^ v209 / 0x10000 ^ v213) + v212;\n
    v215 = v214;\n
    v216 = (v215 >> 6) + v215 * 4;\n
    v217 = v212 + v216 + 1;\n
    v218 = (v217 >> 6) + v217 * 4;\n
    v219 = v218 + v209;\n
    v221 = v218 * 0x100 | v216 * 0x10000 | (v213 + v216 + 1) * 0x40000 & 0x3000000 | (v213 + v216 + 1) * 0x4000000;\n
    v224 = (v219 / 64 + (v219 & 63) * 4 | v221) ^ v198;\n
    v225 = v0[12];\n
    v227 = v225 ^ v224 ^ v224 / 0x100;\n
    v228 = (v225 / 0x100 ^ v224 / 0x10000 ^ v224 >> 24) + v227;\n
    v229 = v228;\n
    v230 = (v229 >> 6) + v229 * 4;\n
    v231 = v227 + v230 + 1;\n
    v232 = (v231 >> 6) + v231 * 4;\n
    v233 = v232 + v224;\n
    v235 = ((v233 >> 6) + (v233 & 63) * 4 | v232 * 0x100 | v230 * 0x10000 | ((v224 >> 24) + v230 + 1) * 0x40000 & 0x3000000 | ((v224 >> 24) + v230 + 1) * 0x4000000) ^ v209;\n
    v236 = v0[11];\n
    v238 = v236 ^ v235 ^ v235 / 0x100;\n
    v239 = (v236 / 0x100 ^ v235 / 0x10000 ^ v235 >> 24) + v238;\n
    v240 = v239;\n
    v241 = (v240 >> 6) + v240 * 4;\n
    v242 = v238 + v241 + 1;\n
    v243 = (v242 >> 6) + v242 * 4;\n
    v244 = v243 + v235;\n
    v246 = ((v244 >> 6) + (v244 & 63) * 4 | v243 * 0x100 | v241 * 0x10000 | ((v235 >> 24) + v241 + 1) * 0x40000 & 0x3000000 | ((v235 >> 24) + v241 + 1) * 0x4000000) ^ v224;\n
    v247 = v0[10];\n
    v249 = v247 ^ v246 ^ v246 / 0x100;\n
    v250 = (v247 / 0x100 ^ v246 / 0x10000 ^ v246 >> 24) + v249;\n
    v251 = v250;\n
    v252 = (v251 >> 6) + v251 * 4;\n
    v253 = v249 + v252 + 1;\n
    v254 = (v253 >> 6) + v253 * 4;\n
    v255 = v254 + v246;\n
    v257 = ((v255 >> 6) + (v255 & 63) * 4 | v254 * 0x100 | v252 * 0x10000 | ((v246 >> 24) + v252 + 1) * 0x40000 & 0x3000000 | ((v246 >> 24) + v252 + 1) * 0x4000000) ^ v235;\n
    v258 = v0[9];\n
    v260 = v258 ^ v257 ^ v257 / 0x100;\n
    v261 = (v258 / 0x100 ^ v257 / 0x10000 ^ v257 >> 24) + v260;\n
    v262 = v261;\n
    v263 = (v262 >> 6) + v262 * 4;\n
    v264 = v260 + v263 + 1;\n
    v265 = (v264 >> 6) + v264 * 4;\n
    v266 = v265 + v257;\n
    v268 = ((v266 >> 6) + (v266 & 63) * 4 | v265 * 0x100 | v263 * 0x10000 | ((v257 >> 24) + v263 + 1) * 0x40000 & 0x3000000 | ((v257 >> 24) + v263 + 1) * 0x4000000) ^ v246;\n
    v269 = v0[8];\n
    v271 = v269 ^ v268 ^ v268 / 0x100;\n
    v272 = (v269 / 0x100 ^ v268 / 0x10000 ^ v268 >> 24) + v271;\n
    v273 = v272;\n
    v274 = (v273 >> 6) + v273 * 4;\n
    v275 = v271 + v274 + 1;\n
    v276 = (v275 >> 6) + v275 * 4;\n
    v277 = v276 + v268;\n
    v279 = ((v277 >> 6) + (v277 & 63) * 4 | v276 * 0x100 | v274 * 0x10000 | ((v268 >> 24) + v274 + 1) * 0x40000 & 0x3000000 | ((v268 >> 24) + v274 + 1) * 0x4000000) ^ v257;\n
    v280 = v0[7];\n
    v282 = v280 ^ v279 ^ v279 / 0x100;\n
    v283 = (v280 / 0x100 ^ v279 / 0x10000 ^ v279 >> 24) + v282;\n
    v284 = v283;\n
    v285 = (v284 >> 6) + v284 * 4;\n
    v286 = v282 + v285 + 1;\n
    v287 = (v286 >> 6) + v286 * 4;\n
    v288 = v287 + v279;\n
    v290 = ((v288 >> 6) + (v288 & 63) * 4 | v287 * 0x100 | v285 * 0x10000 | ((v279 >> 24) + v285 + 1) * 0x40000 & 0x3000000 | ((v279 >> 24) + v285 + 1) * 0x4000000) ^ v268;\n
    v291 = v0[6];\n
    v293 = v291 ^ v290 ^ v290 / 0x100;\n
    v294 = (v291 / 0x100 ^ v290 / 0x10000 ^ v290 >> 24) + v293;\n
    v295 = v294;\n
    v296 = (v295 >> 6) + v295 * 4;\n
    v297 = v293 + v296 + 1;\n
    v298 = (v297 >> 6) + v297 * 4;\n
    v299 = v298 + v290;\n
    v301 = ((v299 >> 6) + (v299 & 63) * 4 | v298 * 0x100 | v296 * 0x10000 | ((v290 >> 24) + v296 + 1) * 0x40000 & 0x3000000 | ((v290 >> 24) + v296 + 1) * 0x4000000) ^ v279;\n
    v302 = v0[5];\n
    v304 = v302 ^ v301 ^ v301 / 0x100;\n
    v305 = (v302 / 0x100 ^ v301 / 0x10000 ^ v301 >> 24) + v304;\n
    v306 = v305;\n
    v307 = (v306 >> 6) + v306 * 4;\n
    v308 = v304 + v307 + 1;\n
    v309 = (v308 >> 6) + v308 * 4;\n
    v310 = v309 + v301;\n
    v312 = ((v310 >> 6) + (v310 & 63) * 4 | v309 * 0x100 | v307 * 0x10000 | ((v301 >> 24) + v307 + 1) * 0x40000 & 0x3000000 | ((v301 >> 24) + v307 + 1) * 0x4000000) ^ v290;\n
    v313 = v0[4];\n
    v315 = v313 ^ v312 ^ v312 / 0x100;\n
    v316 = (v313 / 0x100 ^ v312 / 0x10000 ^ v312 >> 24) + v315;\n
    v317 = v316;\n
    v318 = (v317 >> 6) + v317 * 4;\n
    v319 = v315 + v318 + 1;\n
    v320 = (v319 >> 6) + v319 * 4;\n
    v321 = v320 + v312;\n
    v323 = ((v321 >> 6) + (v321 & 63) * 4 | v320 * 0x100 | v318 * 0x10000 | ((v312 >> 24) + v318 + 1) * 0x40000 & 0x3000000 | ((v312 >> 24) + v318 + 1) * 0x4000000) ^ v301;\n
    v324 = v0[3];\n
    v326 = v324 ^ v323 ^ v323 / 0x100;\n
    v327 = (v324 / 0x100 ^ v323 / 0x10000 ^ v323 >> 24) + v326;\n
    v328 = v327;\n
    v329 = (v328 >> 6) + v328 * 4;\n
    v330 = v326 + v329 + 1;\n
    v331 = (v330 >> 6) + v330 * 4;\n
    v332 = v331 + v323;\n
    v334 = ((v332 >> 6) + (v332 & 63) * 4 | v331 * 0x100 | v329 * 0x10000 | ((v323 >> 24) + v329 + 1) * 0x40000 & 0x3000000 | ((v323 >> 24) + v329 + 1) * 0x4000000) ^ v312;\n
    v335 = v0[2];\n
    v337 = v335 ^ v334 ^ v334 / 0x100;\n
    v338 = (v335 / 0x100 ^ v334 / 0x10000 ^ v334 >> 24) + v337;\n
    v339 = v338;\n
    v340 = (v339 >> 6) + v339 * 4;\n
    v341 = v337 + v340 + 1;\n
    v342 = (v341 >> 6) + v341 * 4;\n
    v343 = v342 + v334;\n
    v345 = ((v343 >> 6) + (v343 & 63) * 4 | v342 * 0x100 | v340 * 0x10000 | ((v334 >> 24) + v340 + 1) * 0x40000 & 0x3000000 | ((v334 >> 24) + v340 + 1) * 0x4000000) ^ v323;\n
    v346 = v0[1];\n
    v348 = v346 ^ v345 ^ v345 / 0x100;\n
    v349 = (v346 / 0x100 ^ v345 / 0x10000 ^ v345 >> 24) + v348;\n
    v350 = v349;\n
    v351 = (v350 >> 6) + v350 * 4;\n
    v352 = v348 + v351 + 1;\n
    v353 = (v352 >> 6) + v352 * 4;\n
    v354 = v353 + v345;\n
    v356 = ((v354 >> 6) + (v354 & 63) * 4 | v353 * 0x100 | v351 * 0x10000 | ((v345 >> 24) + v351 + 1) * 0x40000 & 0x3000000 | ((v345 >> 24) + v351 + 1) * 0x4000000) ^ v334;\n
    v357 = v0[0];\n
    v359 = v357 ^ v356 ^ v356 / 0x100;\n
    v360 = v356 / 0x1000000;\n
    v361 = (v357 / 0x100 ^ v356 / 0x10000 ^ v360) + v359;\n
    v362 = v361;\n
    v363 = (v362 >> 6) + v362 * 4;\n
    v364 = v359 + v363 + 1;\n
    v365 = (v364 >> 6) + v364 * 4;\n
    v367 = v365 + v356;\n
    v369 = v365 * 0x100 | v363 * 0x10000 | (v360 + v363 + 1) * 0x40000 & 0x3000000 | (v360 + v363 + 1) * 0x4000000;\n
    v371 = v367 & 63;\n
    v372 = (v367 / 64 + v371 * 4 | v369) ^ v345;\n
    v376 = (v371[35] | v371[34] * 0x10000) ^ v356;\n
    v377 = (v371[33] | v371[32] * 0x10000) ^ v372;\n
    v378 = v376 ^ v372;\n
    v379 = a0;\n
    v379[0] = v377;\n
    v379[1] = v378;\n
    return 0;\n
}\n
", "4235002:sub_409efa": null, "4235008:cgc_null_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_null_init(struct_0 *v0)\n
{\n
    v0->field_4 = 0;\n
    return 0;\n
}\n
", "4235022:sub_409f0e": null, "4235024:cgc_null_destroy": "int cgc_null_destroy()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4235025:sub_409f11": null, "4235040:cgc_null_encode": "int cgc_null_encode()\n
{\n
    return 0;\n
}\n
", "4235043:sub_409f23": null, "4235056:cgc_null_decode": "int cgc_null_decode()\n
{\n
    return 0;\n
}\n
", "4235059:sub_409f33": null, "4235072:cgc_codes_ksize": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_codes_ksize(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = -1;\n
    if (v1 <= 4)\n
        v2 = *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v1]) + 12));\n
    return v2;\n
}\n
", "4235109:sub_409f65": null, "4235120:cgc_codes_init": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_codes_init(unsigned int *v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // eax\n
\n
    v2 = a0;\n
    if (v2 <= 4)\n
    {\n
        *(v1) = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]);\n
        v0 = a1;\n
        return v3->field_10(v1);\n
    }\n
    return 1;\n
}\n
", "4235185:sub_409fb1": null, "4235200:cgc_codes_self_test": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_0 *field_10;\n
    struct struct_0 *field_14;\n
    struct struct_0 *field_18;\n
    struct struct_0 *field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 *codes;\n
extern struct_1 *g_414c68;\n
extern struct_1 *g_414c6c;\n
extern struct_1 *g_414c70;\n
extern struct_1 *g_414c74;\n
extern char test_b;\n
extern char test_k;\n
\n
int cgc_codes_self_test()\n
{\n
    struct_1 *v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    char v3;  // [bp-0x20]\n
    char *v5;  // edi\n
    char *v6;  // edi\n
    char *v7;  // edi\n
    char *v8;  // edi\n
\n
    if (!(codes->field_c <= 0x100 && codes->field_8 <= 128))\n
        return 1;\n
    v0 = codes;\n
    if (!codes->field_10(&v0))\n
    {\n
        v2 = &test_k;\n
        cgc_memcpy(&v3, &test_b, 16);\n
        codes->field_18(&v0);\n
        codes->field_1c(&v0);\n
        codes->field_14(&v0);\n
        v1 = &test_b;\n
        if (!cgc_memcmp(&v3, &test_b, 16) && g_414c68->field_c <= 0x100 && g_414c68->field_8 <= 128)\n
        {\n
            v0 = g_414c68;\n
            if (!g_414c68->field_10(&v0))\n
            {\n
                v5 = v1;\n
                cgc_memcpy(&v3, v5, 16);\n
                g_414c68->field_18(&v0);\n
                g_414c68->field_1c(&v0);\n
                g_414c68->field_14(&v0);\n
                if (!cgc_memcmp(&v3, v5, 16) && g_414c6c->field_c <= 0x100 && g_414c6c->field_8 <= 128)\n
                {\n
                    v0 = g_414c6c;\n
                    if (!g_414c6c->field_10(&v0))\n
                    {\n
                        v6 = v1;\n
                        cgc_memcpy(&v3, v6, 16);\n
                        g_414c6c->field_18(&v0);\n
                        g_414c6c->field_1c(&v0);\n
                        g_414c6c->field_14(&v0);\n
                        if (!cgc_memcmp(&v3, v6, 16) && g_414c70->field_c <= 0x100 && g_414c70->field_8 <= 128)\n
                        {\n
                            v0 = g_414c70;\n
                            if (!g_414c70->field_10(&v0))\n
                            {\n
                                v7 = v1;\n
                                cgc_memcpy(&v3, v7, 16);\n
                                g_414c70->field_18(&v0);\n
                                g_414c70->field_1c(&v0);\n
                                g_414c70->field_14(&v0);\n
                                if (!cgc_memcmp(&v3, v7, 16) && g_414c74->field_c <= 0x100 && g_414c74->field_8 <= 128)\n
                                {\n
                                    v0 = g_414c74;\n
                                    if (!g_414c74->field_10(&v0))\n
                                    {\n
                                        v8 = v1;\n
                                        cgc_memcpy(&v3, v8, 16);\n
                                        g_414c74->field_18(&v0);\n
                                        g_414c74->field_1c(&v0);\n
                                        g_414c74->field_14(&v0);\n
                                        if (!cgc_memcmp(&v3, v8, 16))\n
                                            return 0;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4235933:sub_40a29d": null, "4235936:cgc_ht_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_ht_init()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    struct_0 *v2;  // [bp+0x4]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // esi\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v5 = v2;\n
    cgc_memset(v5, 0, 16);\n
    v5->field_8 = 4;\n
    _ht_resize();\n
    return;\n
}\n
", "4235987:sub_40a2d3": null, "4236000:_ht_resize": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    void* field_4;\n
    unsigned int field_8;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_4 *field_0;\n
    char padding_4[4];\n
    struct struct_5 *field_8;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    struct struct_3 *field_0;\n
} struct_5;\n
\n
int _ht_resize()\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    struct_1 *v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // edi\n
    struct_0 *v7;  // ecx, Other Possible Types: unsigned int, char\n
    struct_0 *v8;  // esi, Other Possible Types: struct_3 *, unsigned int\n
    unsigned int *v9;  // ebp\n
    struct struct_0 **v10;  // esi\n
    struct_1 *v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
    struct_1 *v17;  // eax\n
\n
    v4 = v6;\n
    v8 = v7;\n
    v13 = v7->field_8 * 2;\n
    v9 = cgc_calloc(v13, 4);\n
    if (!v9)\n
        return 1;\n
    v11 = v7->field_0;\n
    if (v11)\n
    {\n
        v0 = v7;\n
        v2 = v13;\n
        v1 = v13 - 1;\n
        do\n
        {\n
            v3 = v11;\n
            v10 = *((v11 + 8));\n
            v7 = *(v10);\n
            if (!*(v10))\n
            {\n
                v11 = 13573;\n
            }\n
            else\n
            {\n
                v12 = v10 + 1;\n
                do\n
                {\n
                    v11 = cgc_tolower(v7) + v11 + v11 * 36;\n
                    v7 = *(v12);\n
                    v12 += 1;\n
                } while (v7);\n
            }\n
            v13 = v2;\n
            v14 = (0 CONCAT v11) /m v13 >> 32;\n
            if (!v9[v14])\n
            {\n
                v8 = v0;\n
            }\n
            else\n
            {\n
                v15 = v1;\n
                v16 = v14 - 1 & v15;\n
                v8 = v0;\n
                do\n
                {\n
                    if (v14 == v16)\n
                    {\n
                        cgc_free(v9);\n
                        return 1;\n
                    }\n
                    v14 = v14 + 1 & v15;\n
                } while (v9[v14]);\n
            }\n
            v17 = v3;\n
            v9[v14] = v17;\n
            v11 = v17->field_0;\n
        } while (v11);\n
    }\n
    cgc_free(*((v8 + 4)));\n
    *((v8 + 4)) = v9;\n
    *((v8 + 8)) = v13;\n
    return 0;\n
}\n
", "4236143:sub_40a36f": null, "4236210:sub_40a3b2": null, "4236288:cgc_ht_compare": "int cgc_ht_compare(char *v0, char *a0)\n
{\n
    return cgc_strcasecmp(v0, a0);\n
}\n
", "4236325:sub_40a425": null, "4236336:cgc_ht_lookup": "typedef struct struct_1 {\n
    char padding_0[8];\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_ht_lookup(unsigned int v1[3], char *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3[3];  // ebp\n
    unsigned int v4;  // cl, Other Possible Types: char\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v6;  // edx\n
    struct_1 *v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    struct struct_0 **v9;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // edx\n
    struct_0 *v11;  // ecx\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = v1[2];\n
    v4 = *(v2);\n
    if (!*(v2))\n
    {\n
        v2 = 13573;\n
    }\n
    else\n
    {\n
        v5 = v2 + 1;\n
        do\n
        {\n
            v2 = cgc_tolower(v4) + v2 + v2 * 36;\n
            v4 = *(v5);\n
            v5 += 1;\n
        } while (v4);\n
    }\n
    v6 = (0 CONCAT v2) /m v0 >> 32;\n
    v7 = *((v3[1] + v6 * 4));\n
    if (!v7)\n
        return 1;\n
    v9 = v6;\n
    while (cgc_strcasecmp(*((v7 + 8)), a0))\n
    {\n
        v10 = (0 CONCAT v9 + 1) /m v3[2] >> 32;\n
        v9 = v10;\n
        v7 = *((v3[1] + v10 * 4));\n
        if (!v7)\n
            return 1;\n
    }\n
    v11 = *((v3[1] + v9 * 4));\n
    v8 = 1;\n
    if (!v11)\n
        return v8;\n
    *(a1) = v11;\n
    v8 = 0;\n
}\n
", "4236527:sub_40a4ef": null, "4236528:cgc_ht_delete": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    struct struct_4 *field_0;\n
    struct struct_6 *field_4;\n
    struct struct_7 *field_8;\n
    unsigned int field_c;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
} struct_6;\n
\n
typedef struct struct_7 {\n
    struct struct_4 *field_0;\n
} struct_7;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
int cgc_ht_delete(struct_3 *v4, char *a0, unsigned int *a1)\n
{\n
    struct struct_1 **v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    struct struct_1 **v2;  // [bp-0x18]\n
    struct_5 *v3;  // [bp-0x14]\n
    char *v5;  // esi\n
    unsigned int v6;  // cl, Other Possible Types: char\n
    char *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
    struct struct_5 **v10;  // edx\n
    struct_5 *v11;  // ecx, Other Possible Types: unsigned int\n
    struct struct_5 **v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_3 *v14;  // ecx\n
    struct struct_5 **v15;  // edx\n
    struct_3 *v16;  // edx\n
    struct_5 *v17;  // edi\n
    struct_4 *v18;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v19;  // eax, Other Possible Types: unsigned int\n
    struct struct_4 **v20;  // edi\n
    char *v21;  // edi, Other Possible Types: unsigned int\n
    struct struct_1 **v22;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v23;  // ecx, Other Possible Types: unsigned int\n
    struct_3 *v24;  // eax\n
    unsigned int v25;  // esi\n
    unsigned int v26;  // ebp\n
    struct_5 *v27;  // edi\n
    struct_3 *v28;  // eax\n
    unsigned int v29;  // esi\n
    struct struct_1 **v31;  // eax, Other Possible Types: unsigned int\n
    struct struct_1 **v32;  // edi\n
    struct struct_1 **v33;  // edx\n
    unsigned int v34;  // edx\n
    struct_1 *v35;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v36;  // esi\n
    char *v37;  // esi, Other Possible Types: unsigned int\n
    unsigned int v38;  // edx\n
    struct struct_1 **v39;  // eax\n
    struct struct_1 **v40;  // ecx\n
    struct_3 *v41;  // edx, Other Possible Types: unsigned int\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // ebp\n
    struct struct_1 **v45;  // ecx\n
    unsigned int v46;  // edx\n
    struct struct_1 **v47;  // ebp, Other Possible Types: unsigned int\n
    struct_5 *v48;  // esi\n
\n
    v5 = a0;\n
    v1 = v4->field_8;\n
    v6 = *(v5);\n
    if (!*(v5))\n
    {\n
        v9 = 13573;\n
    }\n
    else\n
    {\n
        v7 = v5 + 1;\n
        do\n
        {\n
            v9 = cgc_tolower(v6) + eax<4> + eax<4> * 36;\n
            v6 = *(v7);\n
            v7 += 1;\n
        } while (v6);\n
    }\n
    v10 = (0 CONCAT v9) /m v1 >> 32;\n
    v11 = *((&v4->field_4->field_0 + 0x4 * v10));\n
    if (!v11)\n
        return 1;\n
    v12 = v10;\n
    while (cgc_strcasecmp(*((v11 + 8)), v5))\n
    {\n
        v13 = v12 + 1;\n
        v14 = v4;\n
        v15 = (0 CONCAT v13) /m v14->field_8 >> 32;\n
        v12 = v15;\n
        v11 = *((&v14->field_4->field_0 + 0x4 * v15));\n
        if (!v11)\n
            return 1;\n
    }\n
    v16 = v4;\n
    v17 = v16->field_4[v12].field_0;\n
    if (!v17)\n
        return 1;\n
    *(a1) = v17->field_c;\n
    v18 = v17->field_0;\n
    v19 = v17->field_4;\n
    if (v19)\n
    {\n
        *(v19) = v18;\n
        v18 = v17->field_0;\n
        if (!v18)\n
            goto LABEL_40a5d8;\n
    }\n
    else\n
    {\n
        v16->field_0 = v18;\n
        if (!v18)\n
            goto LABEL_40a5d8;\n
    }\n
    *((v18 + 4)) = v19;\n
LABEL_40a5d8:\n
    v3 = v17;\n
    v20 = v17->field_8;\n
    *(&v18) = *(v20);\n
    if (!*(v20))\n
    {\n
        v19 = 13573;\n
    }\n
    else\n
    {\n
        v21 = v20 + 1;\n
        do\n
        {\n
            v19 = cgc_tolower(v18) + v19 + v19 * 36;\n
            v18 = *(v21);\n
            v21 += 1;\n
        } while (v18);\n
    }\n
    v22 = (0 CONCAT v19) /m v16->field_8 >> 32;\n
    v23 = v22;\n
    v24 = v4;\n
    v25 = v24->field_4;\n
    v26 = v24->field_8;\n
    v27 = v3;\n
    if (*((v25 + (v22 << 2))) != v27)\n
    {\n
        do\n
        {\n
            v22 = (0 CONCAT v22 + 1) /m v26 >> 32;\n
        } while (*((v25 + (v22 << 2))) != v27);\n
    }\n
    *((v25 + v22 * 4)) = 0;\n
    v28 = v4;\n
    v28->field_c = v28->field_c - 1;\n
    v29 = v26;\n
    v0 = &v28->field_4->field_0;\n
    v2 = v22;\n
    v31 = v22;\n
    do\n
    {\n
        v32 = v23;\n
        v33 = (0 CONCAT v31 + v26 - 1) /m v29 >> 32;\n
        v23 = v33;\n
        v31 = v33;\n
    } while (*((v0 + 0x4 * v33)));\n
    v1 = v29;\n
    v34 = (0 CONCAT v2 + 1) /m v29 >> 32;\n
    v35 = v0[v34];\n
    if (v35)\n
    {\n
        v47 = v34;\n
        v0 = v32;\n
        do\n
        {\n
            v36 = *((v35 + 8));\n
            *(&v23) = *(v36);\n
            if (!*(v36))\n
            {\n
                v35 = 13573;\n
            }\n
            else\n
            {\n
                v37 = v36 + 1;\n
                do\n
                {\n
                    v35 = cgc_tolower(v23) + v35 + v35 * 36;\n
                    v23 = *(v37);\n
                    v37 += 1;\n
                } while (v23);\n
            }\n
            v38 = (0 CONCAT v35) /m v1 >> 32;\n
            v39 = v2;\n
            v40 = v0;\n
            if (v40 <= v39 && v40 <= v38 && v38 <= v39)\n
                goto LABEL_40a6b0;\n
            if (v40 <= v39)\n
            {\n
LABEL_40a757:\n
                v41 = v4;\n
            }\n
            else\n
            {\n
                if (v40 > v38 && !(v38 <= v39))\n
                    goto LABEL_40a757;\n
LABEL_40a6b0:\n
                v41 = v4;\n
                v43 = v41->field_4;\n
                *((v43 + v39 * 4)) = *((v43 + v47 * 4));\n
                v41->field_4[v47].field_0 = 0;\n
                v2 = v47;\n
                continue;\n
            }\n
            v44 = v47 + 1;\n
            v45 = *((v41 + 4));\n
            v1 = *((v41 + 8));\n
            v46 = (0 CONCAT v44) /m v1 >> 32;\n
            v47 = v46;\n
            v35 = v45[v46];\n
        } while (v35);\n
    }\n
    v48 = v3;\n
    cgc_free(v48->field_8);\n
    cgc_free(v48);\n
    return 0;\n
}\n
", "4236972:sub_40a6ac": null, "4237087:sub_40a71f": null, "4237185:sub_40a781": null, "4237200:cgc_ht_insert": "typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    struct struct_4 *field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_5 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_ht_insert(struct_3 *v7, char *a0, unsigned int a1)\n
{\n
    struct_1 *v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x2c]\n
    unsigned int *v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    void* v6;  // [bp-0x18]\n
    char *v8;  // edi\n
    unsigned int v9;  // cl, Other Possible Types: char\n
    char *v10;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
    struct struct_5 **v13;  // edx\n
    struct_3 *v14;  // esi\n
    struct_5 *v15;  // eax, Other Possible Types: unsigned int\n
    struct struct_5 **v16;  // ebp, Other Possible Types: unsigned int\n
    char *v17;  // eax\n
    struct struct_5 **v18;  // edx\n
    char *v20;  // eax\n
    char *v21;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v22;  // eax, Other Possible Types: unsigned int\n
    struct_3 *v23;  // esi\n
    unsigned int v24;  // edi\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    char *v26;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v27;  // edx\n
    unsigned int *v28;  // esi\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // eax\n
    struct_3 *v31;  // ecx, Other Possible Types: unsigned int\n
    struct_1 *v32;  // eax\n
    struct_1 *v33;  // edx\n
    struct_0 *v34;  // eax\n
\n
    v8 = a0;\n
    v9 = *(v8);\n
    v0 = v7->field_8;\n
    if (!*(v8))\n
    {\n
        v12 = 13573;\n
    }\n
    else\n
    {\n
        v10 = v8 + 1;\n
        do\n
        {\n
            v12 = cgc_tolower(v9) + eax<4> + eax<4> * 36;\n
            v9 = *(v10);\n
            v10 += 1;\n
        } while (v9);\n
    }\n
    v13 = (0 CONCAT v12) /m v0 >> 32;\n
    v14 = v7;\n
    v15 = *((&v14->field_4->field_0 + 0x4 * v13));\n
    if (v15)\n
    {\n
        v16 = v13;\n
        do\n
        {\n
            v17 = *((v15 + 8));\n
            if (!cgc_strcasecmp(v17, v8))\n
            {\n
                if (v14->field_4[v16].field_0)\n
                    return 1;\n
                break;\n
            }\n
            v18 = (0 CONCAT v16 + 1) /m v14->field_8 >> 32;\n
            v16 = v18;\n
            v15 = *((&v14->field_4->field_0 + 0x4 * v18));\n
        } while (v15);\n
    }\n
    if (v14->field_c == 0x2000)\n
        return 1;\n
    v20 = cgc_strdup(v8);\n
    if (!v20)\n
    {\n
LABEL_40a8d9:\n
        return 1;\n
    }\n
    v21 = v20;\n
    v22 = cgc_malloc(16);\n
    v22->field_8 = v21;\n
    v22->field_c = a1;\n
    v23 = v7;\n
    v24 = v23->field_8;\n
    v5 = v23->field_c + 1;\n
    v6 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v3 = v24;\n
    v4 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t4\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t4\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,0] = t11\n
    [D] PutI(136:I8x8)[t7,0] = 0x01\n
    [D] PutI(72:F64x8)[t7,1] = t4\n
    [D] PutI(136:I8x8)[t7,1] = 0x01\n
    [D] PutI(136:I8x8)[t27,0] = 0x00\n
    [D] PutI(72:F64x8)[t41,0] = t42\n
    [D] PutI(136:I8x8)[t41,0] = 0x01\n
    [D] PutI(136:I8x8)[t41,0] = 0x00\n
    v1 = v21;\n
    v0 = v22;\n
    if ((CmpF(([D] GetI(136:I8x8)[t27,0] ? [D] GetI(72:F64x8)[t27,0] : nan), ([D] GetI(136:I8x8)[t27,1] ? [D] GetI(72:F64x8)[t27,1] : nan)) & 1) != 1)\n
    {\n
        v25 = v1;\n
        if (!(!_ht_resize()))\n
            goto LABEL_40a8c5;\n
        v24 = v23->field_8;\n
        v21 = v0->field_8;\n
    }\n
    v2 = &v23->field_4->field_0;\n
    *(&v9) = *(v21);\n
    if (!*(v21))\n
    {\n
        v22 = 13573;\n
    }\n
    else\n
    {\n
        v26 = v21 + 1;\n
        do\n
        {\n
            v22 = cgc_tolower(v9) + v22 + v22 * 36;\n
            v9 = *(v26);\n
            v26 += 1;\n
        } while (v9);\n
    }\n
    v27 = (0 CONCAT v22) /m v24 >> 32;\n
    v28 = v2;\n
    if (v28[v27])\n
    {\n
        v29 = v24 - 1;\n
        v30 = v27 - 1 & v29;\n
        v31 = v7;\n
        v25 = v1;\n
        while (v27 != v30)\n
        {\n
            v27 = v27 + 1 & v29;\n
            if (!v28[v27])\n
                goto LABEL_40a979;\n
        }\n
    }\n
    else\n
    {\n
        v31 = v7;\n
LABEL_40a979:\n
        v32 = v0;\n
        v28[v27] = v32;\n
        v33 = v32;\n
        *((v31 + 12)) = *((v31 + 12)) + 1;\n
        v32->field_4 = 0;\n
        v34 = *(v31);\n
        v33->field_0 = v34;\n
        if (v34)\n
            v34->field_4 = v33;\n
        *(v31) = v33;\n
        return 0;\n
    }\n
LABEL_40a8c5:\n
    cgc_free(v25);\n
    cgc_free(v0);\n
    goto LABEL_40a8d9;\n
}\n
", "4237732:sub_40a9a4": null, "4237744:cgc_ht_first": "int cgc_ht_first(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4237751:sub_40a9b7": null, "4237760:cgc_ht_next": "int cgc_ht_next()\n
{\n
    return;\n
}\n
", "4237767:sub_40a9c7": null, "4237776:cgc_kx_init_common": "int cgc_kx_init_common(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // esi\n
    unsigned int v3[2];  // esi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    cgc_bn_init(v3);\n
    cgc_bn_init(v3 + 1);\n
    cgc_bn_init(v3 + 2);\n
    cgc_bn_init(v3 + 3);\n
    cgc_bn_init(v3 + 4);\n
    return cgc_bn_init(v1 + 40);\n
}\n
", "4237864:sub_40aa28": null, "4237872:cgc_kx_init_std": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_kx_init_std(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x14]\n
    unsigned int v2;  // esi\n
    unsigned int v4[2];  // edi\n
    void* v5;  // ebp\n
    unsigned int v6;  // esi\n
\n
    v2 = a0;\n
    if (v2 > 3)\n
        return 1;\n
    v4 = v1;\n
    cgc_bn_init(v4);\n
    v5 = v4 + 1;\n
    cgc_bn_init(v4 + 1);\n
    v0 = v4 + 2;\n
    cgc_bn_init(v0);\n
    cgc_bn_init(v4 + 3);\n
    cgc_bn_init(v4 + 4);\n
    cgc_bn_init(v4 + 5);\n
    v6 = v2 * 1152;\n
    if (!cgc_bn_from_bytes(v4, &(&_GLOBAL_OFFSET_TABLE_)[v6 + 20997], 384) && !cgc_bn_from_bytes(v5, &(&_GLOBAL_OFFSET_TABLE_)[v6 + 20613], 384) && !cgc_bn_from_bytes(v0, &(&_GLOBAL_OFFSET_TABLE_)[v6 + 20229], 384))\n
        return 0;\n
    cgc_bn_destroy(v4);\n
    cgc_bn_destroy(v5);\n
    cgc_bn_destroy(v0);\n
    return 1;\n
}\n
", "4238131:sub_40ab33": null, "4238144:cgc_kx_init": "int cgc_kx_init(unsigned int v1, unsigned int a0[2], unsigned int a1[2], unsigned int a2[2])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v2;  // esi\n
    void* v3;  // esi\n
    unsigned int v4[2];  // edi\n
    unsigned int v5[2];  // ebp\n
\n
    v0 = v2;\n
    v3 = v1;\n
    cgc_bn_init(v3);\n
    v4 = v3 + 8;\n
    cgc_bn_init(v4);\n
    v5 = v3 + 16;\n
    cgc_bn_init(v3 + 16);\n
    cgc_bn_init(v3 + 24);\n
    cgc_bn_init(v3 + 32);\n
    cgc_bn_init(v3 + 40);\n
    if (!cgc_bn_copy(v3, a0) && !cgc_bn_copy(v4, a1) && !cgc_bn_copy(v5, a2))\n
        return 0;\n
    cgc_bn_destroy(v3);\n
    cgc_bn_destroy(v4);\n
    cgc_bn_destroy(v5);\n
    return 1;\n
}\n
", "4238331:sub_40abfb": null, "4238336:cgc_kx_destroy": "int cgc_kx_destroy(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // esi\n
    void* v3;  // esi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    cgc_bn_destroy(v3);\n
    cgc_bn_destroy(v3 + 8);\n
    cgc_bn_destroy(v3 + 16);\n
    cgc_bn_destroy(v3 + 24);\n
    cgc_bn_destroy(v3 + 32);\n
    return cgc_bn_destroy(v1 + 40);\n
}\n
", "4238424:sub_40ac58": null, "4238432:cgc_kx_gen_a": "int cgc_kx_gen_a(unsigned int v0, struct struct_3 **a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return cgc_bn_cgc_random(v1 + 24, v1 + 8, a0);\n
}\n
", "4238477:sub_40ac8d": null, "4238480:cgc_kx_get_A": "int cgc_kx_get_A(unsigned int v0, unsigned int a0[2])\n
{\n
    unsigned int v1[2];  // eax\n
\n
    v1 = v0;\n
    return cgc_bn_modexp(a0, v1 + 2, v1 + 3, v1);\n
}\n
", "4238523:sub_40acbb": null, "4238528:cgc_kx_set_b": "int cgc_kx_set_b(unsigned int v0, unsigned int a0[2])\n
{\n
    return cgc_bn_copy(v0 + 32, a0);\n
}\n
", "4238569:sub_40ace9": null, "4238576:cgc_kx_get_sk": "int cgc_kx_get_sk(unsigned int v2, void* a0, unsigned int a1)\n
{\n
    unsigned int **v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x20]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // ebp\n
    unsigned int v6[2];  // ecx\n
\n
    v3 = a1;\n
    v4 = v2;\n
    if (cgc_bn_length(v2 + 8) <= v3)\n
        return 1;\n
    v6 = v4 + 40;\n
    v1[0] = v4;\n
    v0 = v4 + 24;\n
    if (!cgc_bn_modexp(v6, v4 + 32, v0, v1))\n
    {\n
        cgc_bn_to_bytes(v6, a0, v3 / 8);\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4238686:sub_40ad5e": null, "4238688:cgc_kx_self_test": "extern unsigned int cgc_kx_self_test.exp_A;\n
extern unsigned int cgc_kx_self_test.exp_k;\n
extern unsigned int cgc_kx_self_test.test_a;\n
extern unsigned int cgc_kx_self_test.test_b;\n
\n
int cgc_kx_self_test()\n
{\n
    char v0;  // [bp-0x7d]\n
    char v1;  // [bp-0x7c]\n
    char v2;  // [bp-0x74]\n
    char v3;  // [bp-0x6c]\n
    char v4;  // [bp-0x64]\n
    char v5;  // [bp-0x5c]\n
    unsigned int *v6;  // [bp-0x54]\n
    char v7;  // [bp-0x4c]\n
    char v8;  // [bp-0x44]\n
    char v9;  // [bp-0x3c]\n
    char v10;  // [bp-0x2f]\n
    unsigned int v12;  // esi\n
\n
    cgc_bn_init(&v9);\n
    cgc_bn_init(&v2);\n
    cgc_bn_init(&v1);\n
    if (!cgc_kx_init_std(&v3, 2))\n
    {\n
        v0 = 1;\n
        if (cgc_bn_from_bytes(&v6, &cgc_kx_self_test.test_a, 32))\n
        {\n
LABEL_40adfd:\n
        }\n
        else\n
        {\n
            if (!(!cgc_bn_modexp(&v9, &v5, &v6, &v3)))\n
                goto LABEL_40adfd;\n
            if (!cgc_bn_from_bytes(&v1, &cgc_kx_self_test.exp_A, 0x100) && !cgc_bn_cmp(&v9, &v1) && !cgc_bn_from_bytes(&v2, &cgc_kx_self_test.test_b, 0x100) && !cgc_bn_copy(&v7, &v2) && !cgc_kx_get_sk(&v3, &v10, 248))\n
                v0 = cgc_memcmp(&v10, &cgc_kx_self_test.exp_k, 31);\n
        }\n
        cgc_bn_destroy(&v3);\n
        cgc_bn_destroy(&v4);\n
        cgc_bn_destroy(&v5);\n
        cgc_bn_destroy(&v6);\n
        cgc_bn_destroy(&v7);\n
        cgc_bn_destroy(&v8);\n
        v12 = 0;\n
        if (!v0)\n
            goto LABEL_40ae69;\n
    }\n
    cgc_fdprintf(2, \"KX self-test FAILED!\\n
\");\n
    v12 = 1;\n
LABEL_40ae69:\n
    cgc_bn_destroy(&v9);\n
    cgc_bn_destroy(&v2);\n
    cgc_bn_destroy(&v1);\n
    return v12;\n
}\n
", "4239192:sub_40af58": null, "4239200:cgc_read_line": "int cgc_read_line(unsigned int v2)\n
{\n
    int tmp_8;  // tmp #8\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v3;  // edi, Other Possible Types: unsigned int\n
    char *v4;  // esi, Other Possible Types: unsigned int\n
    char *v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v3 = 0;\n
    v4 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        if (v3 != v7)\n
        {\n
            v1 = v7;\n
            v5 = v4;\n
        }\n
        else\n
        {\n
            if (!(v3 <= 65535))\n
                goto LABEL_40affb;\n
            v1 = v3 + 0x400;\n
            v5 = cgc_realloc(v4, v1);\n
            if (!v5)\n
                goto LABEL_40affb;\n
        }\n
        v6 = v3 + v5;\n
        v0 = 1;\n
        if (cgc_silk_recv(v2, v6))\n
        {\n
            v4 = v5;\n
LABEL_40affb:\n
            cgc_free(v4);\n
            return 0;\n
        }\n
        v3 += 1;\n
        tmp_8 = *(v6);\n
        v4 = v5;\n
        v7 = v1;\n
    } while (tmp_8 != 8);\n
    if (v3 != v7)\n
    {\n
        v8 = v5;\n
LABEL_40b00d:\n
        *((v8 + v3)) = 0;\n
        return v8;\n
    }\n
    v8 = cgc_realloc(v5, v7 + 1);\n
    v4 = v5;\n
    if (!(!v8))\n
        goto LABEL_40b00d;\n
    goto LABEL_40affb;\n
}\n
", "4239275:sub_40afab": null, "4239385:sub_40b019": null, "4239392:cgc_do_buy": "typedef struct struct_0 {\n
    void* field_0;\n
    void* field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_do_buy(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0[4];  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ecx\n
    struct_0 *v6;  // edi\n
\n
    v3 = a0;\n
    v4 = v2;\n
    cgc_unescape();\n
    if (!cgc_ht_lookup(v4 + 20, v3, &v1))\n
    {\n
        v0[0] = *((v1 + 12));\n
        v5 = v0[3];\n
        if (v5)\n
        {\n
            v0[3] = v5 - 1;\n
            if (v5 != 1)\n
                return cgc_send_response();\n
            cgc_ht_delete(v4 + 20, v3, v0);\n
            v6 = v0;\n
            cgc_free(v6->field_4);\n
            cgc_free(v6->field_0);\n
            cgc_free(v6);\n
        }\n
    }\n
    return cgc_send_response();\n
}\n
", "4239579:sub_40b0db": null, "4239584:cgc_unescape": "int cgc_unescape()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v4;  // ecx\n
    char *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    char v9;  // al\n
    char v10;  // cl\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ebp\n
\n
    v5 = v4;\n
    v12 = cgc_strlen(v4);\n
    if (!v12)\n
    {\n
        v13 = 0;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        v13 = 0;\n
        v0 = v12;\n
        do\n
        {\n
            if (v5[v11] != 37)\n
            {\n
LABEL_40b110:\n
                v10 = v5[v11];\n
                continue;\n
            }\n
            else\n
            {\n
                v1 = v11 + 2;\n
                if (!(v1 < v12))\n
                    goto LABEL_40b110;\n
                tmp_2 = cgc_isxdigit(v5[1 + v11]);\n
                v12 = v0;\n
                if (!tmp_2)\n
                    goto LABEL_40b110;\n
                tmp_2 = cgc_isxdigit(v5[v1]);\n
                v12 = v0;\n
                if (!tmp_2)\n
                    goto LABEL_40b110;\n
                v6 = v5[1 + v11];\n
                if (cgc_isdigit(v5[1 + v11]))\n
                    v2 = v6 - 48;\n
                else\n
                    v2 = cgc_tolower(v6) - 87;\n
                v7 = v1;\n
                v8 = v5[v7];\n
                if (cgc_isdigit(v5[v7]))\n
                    v9 = v8 - 48;\n
                else\n
                    v9 = cgc_tolower(v8) - 87;\n
                v10 = (v2 * 16) | v9;\n
                v11 = v1;\n
                v12 = v0;\n
            }\n
            v5[v13] = v10;\n
            v11 += 1;\n
            v13 += 1;\n
        } while (v11 < v12);\n
    }\n
    v5[v13] = 0;\n
    return v12;\n
}\n
", "4239631:sub_40b10f": null, "4239847:sub_40b1e7": null, "4239856:cgc_send_response": "extern void g_410c3d;\n
\n
int cgc_send_response(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x424]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x414]\n
    char v3[2];  // [bp-0x410]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v9;  // edx\n
    void* v11;  // ebp\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
\n
    v4 = v6;\n
    v7 = v5;\n
    if (cgc_strlen(v7) + 64 <= 1023)\n
    {\n
        v1 = v7;\n
        v0 = v9;\n
        cgc_sprintf(v3, &g_410c3d);\n
        v0 = cgc_strlen(v3);\n
        v13 = cgc_silk_send(v12 + 16, v3);\n
        return v13;\n
    }\n
    v2 = v9;\n
    v11 = cgc_malloc(cgc_strlen(v7) + 64);\n
    v0 = v7;\n
    cgc_fdprintf(2, \"WARNING text is too long: %s\\n
\");\n
    if (!v11)\n
        return 1;\n
    v1 = v7;\n
    v0 = v2;\n
    cgc_sprintf(v11, &g_410c3d);\n
    v0 = cgc_strlen(v11);\n
    v13 = cgc_silk_send(v12 + 16, v11);\n
    cgc_free(v11);\n
    return v13;\n
}\n
", "4240105:sub_40b2e9": null, "4240112:cgc_do_sell": "typedef struct struct_1 {\n
    char padding_0[4];\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    void* field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_do_sell(unsigned int v5, char a0[2])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp+0x0]\n
    char *v6;  // ebp\n
    char *v7;  // eax\n
    char v8[2];  // edi\n
    char *v9;  // eax\n
    char v10[2];  // esi\n
    char *v11;  // eax\n
    unsigned int v12[3];  // esi\n
    unsigned int v13[4];  // eax\n
    struct_1 *v14;  // esi\n
    struct_0 *v15;  // esi\n
    void* v16;  // eax, Other Possible Types: unsigned int\n
    char *v17;  // ecx\n
\n
    v6 = a0;\n
    v7 = cgc_strchr(a0, 59);\n
    if (!v7)\n
        return cgc_send_response(*(&v4));\n
    v8 = v7 + 1;\n
    *(v7) = 0;\n
    v9 = cgc_strchr(v8, 59);\n
    if (v9)\n
    {\n
        v10 = v9 + 1;\n
        *(v9) = 0;\n
        v1 = cgc_strtoul(v10, NULL, 10);\n
        v11 = cgc_strchr(v10, 59);\n
        if (v11)\n
        {\n
            *(v11) = 0;\n
            v0 = cgc_strtoul(v11 + 1, NULL, 10);\n
            cgc_unescape();\n
            cgc_unescape();\n
            v12 = v5 + 20;\n
            if (!cgc_ht_lookup(v12, v6, &v3))\n
            {\n
                v14 = *((v3 + 12));\n
                if (cgc_strcasecmp(v14->field_4, v8))\n
                    return cgc_send_response(*(&v4));\n
                v14->field_8 = v1;\n
                v14->field_c = v14->field_c + v0;\n
                return cgc_send_response(*(&v4));\n
            }\n
            else\n
            {\n
                v2 = v12;\n
                v13 = cgc_malloc(16);\n
                if (!v13)\n
                    return cgc_send_response(*(&v4));\n
                v15 = v13;\n
                v13[2] = v1;\n
                v13[3] = v0;\n
                v13[0] = cgc_strdup(v6);\n
                v16 = cgc_strdup(v8);\n
                v15->field_4 = v16;\n
                v17 = v15->field_0;\n
                if (v17 && v16)\n
                {\n
                    if (cgc_ht_insert(v2, v17, v15))\n
                        v16 = v15->field_4;\n
                    else\n
                        return cgc_send_response(*(&v4));\n
                }\n
                cgc_free(v16);\n
                cgc_free(v15->field_0);\n
                cgc_free(v15);\n
            }\n
        }\n
    }\n
}\n
", "4240613:sub_40b4e5": null, "4240624:cgc_do_list": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    struct struct_2 *field_c;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
int cgc_do_list(struct_0 *v9)\n
{\n
    unsigned int v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    void* v4;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x5c]\n
    unsigned int *v6;  // [bp-0x58]\n
    struct_1 *v7;  // [bp-0x54]\n
    char v8[2];  // [bp-0x50]\n
    struct_0 *v10;  // edi\n
    unsigned int v12[4];  // esi\n
    unsigned int v13;  // eax\n
    void* v14;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v15;  // eax, Other Possible Types: unsigned int\n
    void* v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // ebp, Other Possible Types: unsigned int\n
\n
    v10 = v9;\n
    v0 = v10->field_20;\n
    cgc_sprintf(v8, \"%d\");\n
    if (cgc_send_response(v8))\n
        return 1;\n
    v6 = &v10->padding_0[20];\n
    v15 = cgc_ht_first(v6);\n
    v14 = 0;\n
    if (v15)\n
    {\n
        v16 = 0;\n
        v17 = 0;\n
        do\n
        {\n
            v4 = v16;\n
            v7 = v15;\n
            v12 = *((v15 + 12));\n
            v13 = cgc_strlen(v12[1]) + cgc_strlen(v12[0]) + 128;\n
            if (v5 <= v17)\n
            {\n
                v5 = v17;\n
                v14 = v4;\n
            }\n
            else\n
            {\n
                v5 = v13;\n
                v14 = cgc_realloc(v4, v5);\n
                if (!v14)\n
                    goto LABEL_40b651;\n
            }\n
            v3 = v12[3];\n
            v2 = v12[2];\n
            v1 = v12[1];\n
            v0 = v12[0];\n
            cgc_sprintf(v14, \"%s;%s;%d;%d\");\n
            if (cgc_send_response(v14))\n
            {\n
                v4 = v14;\n
LABEL_40b651:\n
                cgc_free(v4);\n
                return cgc_send_response(\"Internal error\");\n
            }\n
            v15 = cgc_ht_next(v6);\n
            v16 = v14;\n
            v17 = v5;\n
        } while (v15);\n
    }\n
    cgc_free(v14);\n
    return 0;\n
}\n
", "4240835:sub_40b5c3": null, "4241022:sub_40b67e": null, "4241024:cgc_do_quit": "int cgc_do_quit(unsigned int v0)\n
{\n
    cgc_send_response(\"Success\");\n
    return 1;\n
}\n
", "4241073:sub_40b6b1": null, "4241088:main": "int main()\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    char v2;  // [bp-0x34]\n
    char v3;  // [bp-0x24]\n
    unsigned int v6;  // eax\n
    void* v7;  // edi, Other Possible Types: unsigned int\n
\n
    if (cgc_ht_init())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_init())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v2, \"BUY\", cgc_do_buy))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v2, \"SELL\", cgc_do_sell))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v2, \"LIST\", cgc_do_list))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v2, \"QUIT\", cgc_do_quit))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_silk_init())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_silk_prepare())\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v6 = cgc_read_line(&v3);\n
        if (!v6)\n
            return 0;\n
        v7 = v6;\n
        do\n
        {\n
            if (!parse_request())\n
            {\n
                if (!(!cgc_ht_lookup(&v2, *(&v1), &v0)))\n
                    continue;\n
                if (*((v0 + 12))(&v2))\n
                    break;\n
                continue;\n
            }\n
            cgc_free(v7);\n
            v7 = cgc_read_line(&v3);\n
        } while (v7);\n
    }\n
}\n
", "4241456:parse_request": "int parse_request(unsigned int *v0)\n
{\n
    char v1[2];  // ecx\n
    char *v2;  // eax\n
    unsigned int *v3;  // edx\n
    char *v4;  // eax\n
    char *v5;  // eax\n
    void* v7;  // esi, Other Possible Types: unsigned int\n
\n
    v2 = cgc_strchr(v1, 9);\n
    if (v2)\n
    {\n
        *(v2) = 0;\n
        *(v3) = v1;\n
        v7 = v2 + 1;\n
        v4 = cgc_strchr(v7, 8);\n
        if (v4)\n
            *(v4) = 0;\n
    }\n
    else\n
    {\n
        v5 = cgc_strchr(v1, 8);\n
        if (!v5)\n
            return 1;\n
        *(v5) = 0;\n
        *(v3) = v1;\n
        v7 = 0;\n
    }\n
    *(v0) = v7;\n
    return 0;\n
}\n
", "4241578:sub_40b8aa": null, "4241584:cgc__do_encode": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__do_encode(struct_2 *v9, struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    int tmp_20;  // tmp #20\n
    int tmp_5;  // tmp #5\n
    int tmp_2;  // tmp #2\n
    struct struct_1 **v1;  // [bp-0x30]\n
    struct_1 *v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    char v4;  // [bp-0x24]\n
    char v5;  // [bp-0x23]\n
    char v6;  // [bp-0x22]\n
    char v7;  // [bp-0x21]\n
    unsigned int v8;  // [bp-0x14]\n
    struct_1 *v10;  // esi\n
    struct_2 *v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    struct_1 *v15;  // ebx\n
    struct_1 *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ebp\n
    struct struct_1 **v18;  // ebp\n
    struct_1 *v19;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v20;  // ebp\n
    unsigned int v21;  // eax\n
    struct_1 *v22;  // edi\n
    unsigned int v23;  // edx\n
    struct_2 *v24;  // ebp\n
    struct struct_1 **v25;  // edx\n
    char *v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edx\n
    void* v29;  // ebp\n
    struct_2 *v30;  // edi\n
    struct struct_4 **v31;  // eax\n
    unsigned int v32;  // eax\n
    struct_2 *v33;  // edi\n
    struct struct_4 **v34;  // eax\n
    struct_1 *v35;  // eax\n
    unsigned int v36;  // edx\n
    struct_1 *v37;  // ecx\n
    unsigned int v38;  // eax\n
    char *v39;  // esi\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // edx\n
    struct_1 *v42;  // eax\n
    struct_2 *v43;  // edi\n
    struct_1 *v44;  // edx\n
    unsigned int v45;  // edx\n
    unsigned int v46;  // esi\n
    char *v47;  // ecx, Other Possible Types: unsigned int, struct_1 *\n
    char *v48;  // edx, Other Possible Types: unsigned int\n
    unsigned int v49;  // edi\n
    unsigned int v50;  // esi\n
\n
    v10 = a0;\n
    v11 = v9;\n
    v1 = &v11->field_0->field_0;\n
    v47 = *(v1);\n
    v12 = *((v47 + 8));\n
    v23 = *((v47 + 8)) >> 3;\n
    v13 = v11->field_4;\n
    if (v13 == 1)\n
    {\n
        if (v12 >= 8)\n
        {\n
            v0 = &_GLOBAL_OFFSET_TABLE_;\n
            v15 = v23;\n
            v19 = v11->field_8;\n
            v47 = v11->field_c;\n
            v8 = &v15->padding_1;\n
            v16 = v15 & 3;\n
            v3 = v12;\n
            v2 = v15;\n
            v17 = v15;\n
            if ((v15 & 3))\n
            {\n
                do\n
                {\n
                    *(&v3 + v17) = v19;\n
                    v17 -= 1;\n
                    v19 = (v47 CONCAT v19) >> 8;\n
                    v47 /= 0x100;\n
                    tmp_20 = v16;\n
                    v16 -= 1;\n
                } while (tmp_20 != 1);\n
                if (v8 < 3)\n
                    goto LABEL_40bc22;\n
            }\n
            else\n
            {\n
                if (v8 < 3)\n
                    goto LABEL_40bc22;\n
            }\n
            do\n
            {\n
                *((&v3 + v17)) = __buildin_bswap32(v19);\n
                v19 = v47;\n
                v47 = 0;\n
                tmp_5 = v17;\n
                v17 -= 4;\n
            } while (tmp_5 != 4);\n
LABEL_40bc22:\n
            *(&v47) = 1;\n
            if (*(v25)->field_18(v1))\n
                return 1;\n
            if (v3 >= 8)\n
            {\n
                v47 = (!(v47 < 2) ? 1 : v2);\n
                v35 = v47 & 3;\n
                v36 = 0;\n
                if (v47 - 1 >= 3)\n
                {\n
                    v37 = v47 & -0x4;\n
                    v36 = 0;\n
                    do\n
                    {\n
                        (&v10->field_0)[v36] = (&v10->field_0)[v36] ^ (&v4)[v36];\n
                        v10->padding_1[v36] = v10->padding_1[v36] ^ (&v5)[v36];\n
                        v10->padding_1[1 + v36] = v10->padding_1[1 + v36] ^ (&v6)[v36];\n
                        v10->padding_1[2 + v36] = v10->padding_1[2 + v36] ^ (&v7)[v36];\n
                        v36 += 4;\n
                    } while (v37 != v36);\n
                }\n
                if (v35)\n
                {\n
                    v39 = &(&v10->field_0)[v36];\n
                    v40 = &(&v4)[v36];\n
                    v41 = 0;\n
                    do\n
                    {\n
                        v39[v41] = v39[v41] ^ *((v40 + v41));\n
                        v41 += 1;\n
                    } while (v35 != v41);\n
                }\n
            }\n
        }\n
        else\n
        {\n
            if (*((v47 + 24))(v1))\n
                return 1;\n
        }\n
        tmp_2 = v11->field_8;\n
        v11->field_8 = &v11->field_8->padding_1;\n
        v11->field_c = &v11->field_c->padding_1[tmp_2 - 1 < tmp_2];\n
    }\n
    else if (v13 == 3)\n
    {\n
        v0 = &_GLOBAL_OFFSET_TABLE_;\n
        v2 = v23;\n
        cgc_memcpy(&v4, v10, v23);\n
        v3 = v12;\n
        if (v12 >= 8)\n
        {\n
            v47 = (!(v47 < 2) ? 1 : v2);\n
            v22 = v47 & 3;\n
            v23 = 0;\n
            v24 = v9;\n
            if (v47 - 1 >= 3)\n
            {\n
                v47 &= -0x4;\n
                v23 = 0;\n
                do\n
                {\n
                    (&v10->field_0)[v23] = (&v10->field_0)[v23] ^ *(8 + &v24->field_0 + v23);\n
                    v10->padding_1[v23] = v10->padding_1[v23] ^ *(9 + &v24->field_0 + v23);\n
                    v10->padding_1[1 + v23] = v10->padding_1[1 + v23] ^ *(10 + &v24->field_0 + v23);\n
                    v10->padding_1[2 + v23] = v10->padding_1[2 + v23] ^ *(11 + &v24->field_0 + v23);\n
                    v23 += 4;\n
                } while (v47 != v23);\n
            }\n
            if (v22)\n
            {\n
                v47 = &(&v10->field_0)[v23];\n
                v23 = 8 + v23 + v9;\n
                v29 = 0;\n
                do\n
                {\n
                    *((v47 + v29)) = *((v47 + v29)) ^ *(v23 + v29);\n
                } while (v22 != 1);\n
            }\n
        }\n
        v33 = v9;\n
        if (*(v34)->field_18(v33->field_0))\n
            return 1;\n
        cgc_memcpy(&v33->field_8, &v4, v2);\n
        v47 = 0;\n
        if (v3 < 8)\n
            return 0;\n
        v23 = (!(v23 < 2) ? 1 : v2);\n
        v42 = v23 & 3;\n
        v43 = v9;\n
        if (v23 - 1 >= 3)\n
        {\n
            v44 = v23 & -0x4;\n
            v47 = 0;\n
            do\n
            {\n
                *(8 + &v43->field_0 + v47) = *(8 + &v43->field_0 + v47) ^ (&v10->field_0)[v47];\n
                *(9 + &v43->field_0 + v47) = *(9 + &v43->field_0 + v47) ^ v10->padding_1[v47];\n
                *(10 + &v43->field_0 + v47) = *(10 + &v43->field_0 + v47) ^ v10->padding_1[1 + v47];\n
                *(11 + &v43->field_0 + v47) = *(11 + &v43->field_0 + v47) ^ v10->padding_1[2 + v47];\n
                v47 += 4;\n
            } while (v44 != v47);\n
        }\n
        v48 = 0;\n
        if (v42)\n
        {\n
            v49 = 8 + v43 + v47;\n
            v50 = &(&v10->field_0)[v47];\n
            do\n
            {\n
                *((v49 + v48)) = *((v49 + v48)) ^ *((v50 + v48));\n
                v48 += 1;\n
            } while (v42 != v48);\n
            return 0;\n
        }\n
    }\n
    else if (v13 == 2)\n
    {\n
        if (v12 < 8)\n
        {\n
            *(&v47) = *((v47 + 24))(v1);\n
            return v47;\n
        }\n
        v3 = v12;\n
        v18 = (!(v23 < 2) ? 1 : v23);\n
        v47 = v18 + 1;\n
        v1 = v18;\n
        v20 = v18 & 3;\n
        v21 = 0;\n
        v0 = v47;\n
        if (v0 >= 3)\n
        {\n
            v21 = 0;\n
            do\n
            {\n
                (&v10->field_0)[v21] = (&v10->field_0)[v21] ^ *(8 + &v11->field_0 + v21);\n
                v10->padding_1[v21] = v10->padding_1[v21] ^ *(9 + &v11->field_0 + v21);\n
                v10->padding_1[1 + v21] = v10->padding_1[1 + v21] ^ *(10 + &v11->field_0 + v21);\n
                v10->padding_1[2 + v21] = v10->padding_1[2 + v21] ^ *(11 + &v11->field_0 + v21);\n
                v21 += 4;\n
            } while ((v1 & -0x4) != v21);\n
        }\n
        if (v20)\n
        {\n
            v26 = &(&v10->field_0)[v21];\n
            v27 = 8 + v21 + v9;\n
            v28 = 0;\n
            do\n
            {\n
                v26[v28] = v26[v28] ^ *((v27 + v28));\n
                v28 += 1;\n
            } while (v20 != v28);\n
        }\n
        v30 = v9;\n
        v32 = *(v31)->field_18(v30->field_0);\n
        if (v32)\n
            return v32;\n
        if (v3 < 8)\n
            return v32;\n
        v38 = 0;\n
        if (v0 >= 3)\n
        {\n
            v38 = 0;\n
            do\n
            {\n
                *(8 + &v30->field_0 + v38) = *(8 + &v30->field_0 + v38) ^ (&v10->field_0)[v38];\n
                *(9 + &v30->field_0 + v38) = *(9 + &v30->field_0 + v38) ^ v10->padding_1[v38];\n
                *(10 + &v30->field_0 + v38) = *(10 + &v30->field_0 + v38) ^ v10->padding_1[1 + v38];\n
                *(11 + &v30->field_0 + v38) = *(11 + &v30->field_0 + v38) ^ v10->padding_1[2 + v38];\n
                v38 += 4;\n
            } while ((v1 & -0x4) != v38);\n
        }\n
        v47 = 0;\n
        if (!v20)\n
            return 0;\n
        v45 = 8 + v38 + v30;\n
        v46 = &(&v10->field_0)[v38];\n
        do\n
        {\n
            *((v45 + v47)) = *((v45 + v47)) ^ *((v46 + v47));\n
            v47 += 1;\n
        } while (v20 != v47);\n
    }\n
    return 0;\n
}\n
", "4242663:sub_40bce7": null, "4242672:cgc__do_decode": "typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[16];\n
    struct struct_0 *field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__do_decode(struct_2 *v9, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34], Other Possible Types: char\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    char v3;  // [bp-0x28]\n
    char v4;  // [bp-0x27]\n
    char v5;  // [bp-0x26]\n
    char v6;  // [bp-0x25]\n
    unsigned int v7;  // [bp-0x18]\n
    char *v8;  // [bp-0x14], Other Possible Types: char\n
    char *v10;  // edi\n
    struct_2 *v11;  // esi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // ecx\n
    struct struct_1 **v14;  // eax\n
    struct struct_1 **v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    char *v24;  // esi\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    char *v27;  // edi\n
    char *v28;  // eax\n
    void* v29;  // ebp\n
    struct_2 *v30;  // esi\n
    unsigned int v31;  // ebp\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // ecx\n
    char *v35;  // edx\n
    unsigned int v36;  // esi\n
    unsigned int v37;  // edi\n
    char *v38;  // edx\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // ecx\n
\n
    v10 = a0;\n
    v11 = v9;\n
    v12 = *(&v0) >> 3;\n
    v13 = v11->field_4;\n
    if (v13 == 3)\n
    {\n
        v0 = v11->field_0->field_0->field_8;\n
        cgc_memcpy(&v3, v10, v12);\n
        v16 = *(v14)->field_1c(v11->field_0);\n
        if (v16)\n
            return 1;\n
        if (v0 <= 7)\n
        {\n
            cgc_memcpy(*(&v8), &v3, v12);\n
        }\n
        else\n
        {\n
            v8 = &v11[1].field_0;\n
            v2 = (!(v12 < 2) ? 1 : v12);\n
            v1 = v2 & 3;\n
            v21 = 0;\n
            v7 = v2 - 1;\n
            if (v7 >= 3)\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    v10[v21] = v10[v21] ^ *(8 + &v11->field_0 + v21);\n
                    v10[1 + v21] = v10[1 + v21] ^ *(9 + &v11->field_0 + v21);\n
                    v10[2 + v21] = v10[2 + v21] ^ *(10 + &v11->field_0 + v21);\n
                    v10[3 + v21] = v10[3 + v21] ^ *(11 + &v11->field_0 + v21);\n
                    v21 += 4;\n
                } while ((v2 & -0x4) != v21);\n
            }\n
            if (v1)\n
            {\n
                v24 = &v10[v21];\n
                v25 = 8 + v21 + v9;\n
                v26 = 0;\n
                do\n
                {\n
                    v24[v26] = v24[v26] ^ *((v25 + v26));\n
                    v26 += 1;\n
                } while (v1 != v26);\n
            }\n
            cgc_memcpy(v8, &v3, v12);\n
            v30 = v9;\n
            v31 = v1;\n
            if (v0 < 8)\n
                return 0;\n
            v33 = 0;\n
            if (v7 >= 3)\n
            {\n
                v33 = 0;\n
                do\n
                {\n
                    *(8 + &v30->field_0 + v33) = *(8 + &v30->field_0 + v33) ^ v10[v33];\n
                    *(9 + &v30->field_0 + v33) = *(9 + &v30->field_0 + v33) ^ v10[1 + v33];\n
                    *(10 + &v30->field_0 + v33) = *(10 + &v30->field_0 + v33) ^ v10[2 + v33];\n
                    *(11 + &v30->field_0 + v33) = *(11 + &v30->field_0 + v33) ^ v10[3 + v33];\n
                    v33 += 4;\n
                } while ((v2 & -0x4) != v33);\n
            }\n
            if (!v31)\n
                return 0;\n
            v38 = 8 + v33 + v30;\n
            v39 = &v10[v33];\n
            v40 = 0;\n
            do\n
            {\n
                v38[v40] = v38[v40] ^ *((v39 + v40));\n
                v40 += 1;\n
            } while (v31 != v40);\n
            return 0;\n
        }\n
    }\n
    else\n
    {\n
        if (v13 == 2)\n
        {\n
            v0 = *(&v0);\n
            cgc_memcpy(&v3, v10, v12);\n
            v17 = *(v15)->field_1c(v11->field_0);\n
            if (v17)\n
            {\n
                return 1;\n
            }\n
            else if (v0 < 8)\n
            {\n
                return 0;\n
            }\n
            else\n
            {\n
                v20 = (!(v12 < 2) ? 1 : v12);\n
                v22 = v20 & 3;\n
                v23 = 0;\n
                v1 = v20 - 1;\n
                if (v1 >= 3)\n
                {\n
                    v23 = 0;\n
                    do\n
                    {\n
                        v10[v23] = v10[v23] ^ *(8 + &v11->field_0 + v23);\n
                        v10[1 + v23] = v10[1 + v23] ^ *(9 + &v11->field_0 + v23);\n
                        v10[2 + v23] = v10[2 + v23] ^ *(10 + &v11->field_0 + v23);\n
                        v10[3 + v23] = v10[3 + v23] ^ *(11 + &v11->field_0 + v23);\n
                        v23 += 4;\n
                    } while ((v20 & -0x4) != v23);\n
                }\n
                if (v22)\n
                {\n
                    v27 = &v10[v23];\n
                    v28 = 8 + v23 + v11;\n
                    v29 = 0;\n
                    do\n
                    {\n
                        *((v27 + v29)) = *((v27 + v29)) ^ *((v28 + v29));\n
                    } while (v22 != 1);\n
                }\n
                if (v0 < 8)\n
                    return 0;\n
                v32 = 0;\n
                if (v1 >= 3)\n
                {\n
                    v32 = 0;\n
                    do\n
                    {\n
                        *(8 + &v11->field_0 + v32) = *(8 + &v11->field_0 + v32) ^ (&v3)[v32];\n
                        *(9 + &v11->field_0 + v32) = *(9 + &v11->field_0 + v32) ^ (&v4)[v32];\n
                        *(10 + &v11->field_0 + v32) = *(10 + &v11->field_0 + v32) ^ (&v5)[v32];\n
                        *(11 + &v11->field_0 + v32) = *(11 + &v11->field_0 + v32) ^ (&v6)[v32];\n
                        v32 += 4;\n
                    } while ((v20 & -0x4) != v32);\n
                }\n
                if (!v22)\n
                    return 0;\n
                v35 = 8 + v32 + v11;\n
                v36 = &(&v3)[v32];\n
                v37 = 0;\n
                do\n
                {\n
                    v35[v37] = v35[v37] ^ *((v36 + v37));\n
                    v37 += 1;\n
                } while (v22 != v37);\n
                return 0;\n
            }\n
        }\n
        if (v13 != 1)\n
            return 0;\n
        cgc__do_encode(v11, v10);\n
    }\n
    return 0;\n
}\n
", "4243446:sub_40bff6": null, "4243456:cgc_modes_init": "int cgc_modes_init(unsigned int v0[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v3[2];  // edx\n
\n
    v1 = a0;\n
    if (v1 <= 3)\n
    {\n
        v3 = v0;\n
        v3[1] = v1;\n
        v3[0] = a1;\n
        cgc_memset(v3 + 1, 0, 16);\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4243525:sub_40c045": null, "4243536:cgc_modes_encode": "int cgc_modes_encode(struct struct_1 **v7, unsigned int a0, unsigned int a1, unsigned int *a2, unsigned int *a3)\n
{\n
    void* v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    void* v6;  // [bp-0x14]\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // edi\n
    char *v13;  // ecx, Other Possible Types: unsigned int\n
    void* v14;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v15;  // ebp\n
    char v16[8];  // esi\n
\n
    v8 = a1;\n
    if (v8 < 1)\n
    {\n
        *(a3) = 0;\n
        *(a2) = 0;\n
        goto LABEL_40c082;\n
    }\n
    v9 = *(v7)->field_0->field_8 >> 3;\n
    v10 = v8 - 1 + v9;\n
    v15 = -(v9) & v10;\n
    v1 = v9;\n
    v11 = v9 + (-(v9) & v10);\n
    v0 = cgc_malloc(v11);\n
    if (!v0)\n
        return 1;\n
    v2 = v11;\n
    v12 = v1;\n
    if (v15)\n
    {\n
        v4 = v15;\n
        v13 = a0;\n
        v14 = 0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v8 < v12)\n
                v12 = v8;\n
            v5 = v13;\n
            v6 = v0 + v14;\n
            cgc_memcpy(v6, v13, v12);\n
            if (v8 < v1)\n
            {\n
                cgc_memset(v12 + v14 + v0, v12, v1 - v12);\n
                v3 = 1;\n
            }\n
            if (!(!cgc__do_encode(v7, v6)))\n
                goto LABEL_40c199;\n
            v13 = v5 + v12;\n
            v8 -= v12;\n
            v12 = v1;\n
            v14 += v12;\n
        } while (v14 < v4);\n
        v15 = v4;\n
        if (v3)\n
        {\n
            v2 = v15;\n
            goto LABEL_40c1b5;\n
        }\n
    }\n
    v16 = v0 + v15;\n
    cgc_memset(v16, 0, v12);\n
    if (!cgc__do_encode(v7, v16))\n
    {\n
LABEL_40c1b5:\n
        *(a2) = v0;\n
        *(a3) = v2;\n
LABEL_40c082:\n
        return 0;\n
    }\n
LABEL_40c199:\n
    cgc_free(v0);\n
    return 1;\n
}\n
", "4243917:sub_40c1cd": null, "4243920:cgc_modes_decode": "int cgc_modes_decode(struct struct_1 **v1, char *a0, unsigned int a1, unsigned int *a2, unsigned int *a3)\n
{\n
    void* v0;  // [bp-0x14]\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // edi\n
    char *v4;  // eax\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edx\n
    char *v8;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    if (!v2)\n
    {\n
        *(a3) = 0;\n
        *(a2) = 0;\n
        return 0;\n
    }\n
    v3 = *(v1)->field_0->field_8 >> 3;\n
    if ((0 CONCAT v2) /m (*(v1)->field_0->field_8 >> 3) >> 32)\n
        return 1;\n
    v4 = cgc_malloc(v2);\n
    if (!v4)\n
        return 1;\n
    v0 = v4;\n
    cgc_memcpy(v4, a0, v2);\n
    v5 = 0;\n
    do\n
    {\n
        if (cgc__do_decode(v1, v0 + v5))\n
        {\n
LABEL_40c2c6:\n
            cgc_free(v0);\n
            return 1;\n
        }\n
        v5 += v3;\n
    } while (v5 < v2);\n
    v6 = *(-1 + v2 + v0);\n
    if (v3 > v6)\n
    {\n
        v8 = v0 + v2 - 1;\n
        v7 = v3;\n
        while (*(v8) == v6)\n
        {\n
            v7 -= 1;\n
            v8 -= 1;\n
            if (v7 <= v6)\n
            {\n
                *(a2) = v0;\n
                *(a3) = v2 - v3 + v6;\n
                return 0;\n
            }\n
        }\n
    }\n
    goto LABEL_40c2c6;\n
}\n
", "4244193:sub_40c2e1": null, "4244208:cgc_modes_self_test": "extern unsigned int cgc_modes_self_test.test;\n
\n
int cgc_modes_self_test()\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    struct struct_0 **v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v5[8];  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // edi\n
\n
    if (!cgc_codes_init(&v6, 0, 0))\n
    {\n
        v4 = 0;\n
        v3 = &v6;\n
        cgc_memset(v5, 0, 16);\n
        if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
        {\n
            v4 = 0;\n
            v3 = &v6;\n
            cgc_memset(v5, 0, 16);\n
            if (!cgc_modes_decode(&v3, v2, 12, &v1, &v0))\n
            {\n
                cgc_free(v2);\n
                if (v0 == 10 && !cgc_memcmp(v1, &cgc_modes_self_test.test, 10))\n
                {\n
                    cgc_free(v1);\n
                    v4 = 1;\n
                    v3 = &v6;\n
                    cgc_memset(v5, 0, 16);\n
                    if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                    {\n
                        v4 = 1;\n
                        v3 = &v6;\n
                        cgc_memset(v5, 0, 16);\n
                        if (!cgc_modes_decode(&v3, v2, 12, &v1, &v0))\n
                        {\n
                            cgc_free(v2);\n
                            if (v0 == 10 && !cgc_memcmp(v1, &cgc_modes_self_test.test, 10))\n
                            {\n
                                cgc_free(v1);\n
                                v4 = 2;\n
                                v3 = &v6;\n
                                cgc_memset(v5, 0, 16);\n
                                if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                                {\n
                                    v4 = 2;\n
                                    v3 = &v6;\n
                                    cgc_memset(v5, 0, 16);\n
                                    if (!cgc_modes_decode(&v3, v2, 12, &v1, &v0))\n
                                    {\n
                                        cgc_free(v2);\n
                                        if (v0 == 10 && !cgc_memcmp(v1, &cgc_modes_self_test.test, 10))\n
                                        {\n
                                            cgc_free(v1);\n
                                            v4 = 3;\n
                                            v3 = &v6;\n
                                            cgc_memset(v5, 0, 16);\n
                                            if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                                            {\n
                                                v4 = 3;\n
                                                v3 = &v6;\n
                                                cgc_memset(v5, 0, 16);\n
                                                v14 = v2;\n
                                                if (!cgc_modes_decode(&v3, v14, 12, &v1, &v0))\n
                                                {\n
                                                    cgc_free(v14);\n
                                                    if (v0 == 10)\n
                                                    {\n
                                                        v15 = v1;\n
                                                        if (!cgc_memcmp(v15, &cgc_modes_self_test.test, 10))\n
                                                        {\n
                                                            cgc_free(v15);\n
                                                            return 0;\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_fdprintf(2, \"Modes self-init FAILED!\\n
\");\n
    return 1;\n
}\n
", "4245137:sub_40c691": null, "4245152:cgc_lcg_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_lcg_init(struct_0 *v0)\n
{\n
    unsigned int v1[2];  // eax\n
\n
    v1 = cgc_malloc(8);\n
    v0->field_4 = v1;\n
    if (v1)\n
    {\n
        v1[1] = 0;\n
        v1[0] = 1;\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4245222:sub_40c6e6": null, "4245232:cgc_lcg_get_bytes": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
int cgc_lcg_get_bytes(struct_0 *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_21;  // tmp #21\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // edi\n
    char *v5;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v6;  // eax\n
    unsigned int v7[2];  // ebp\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
\n
    v4 = a1;\n
    v0 = v4 - 3;\n
    v1 = v4 - 2;\n
    v2 = v4 - 1;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v4 == v5)\n
            break;\n
        v6 = v3;\n
        v7 = v6->field_4;\n
        v8 = v6->field_4->field_0;\n
        v9 = v8 * 1284865837;\n
        tmp_21 = v9;\n
        v11 = v7[1] * 1284865837 + v8 * 1481765933 + (v8 * 1284865837 >> 32) + (tmp_21 + 1 < tmp_21);\n
        v12 = a0;\n
        v7[0] = v9 + 1;\n
        v7[1] = v11;\n
        *((v12 + v5)) = v11 / 0x1000000;\n
        if (v2 == v5)\n
            break;\n
        *((v12 + v5 + 1)) = v11 / 0x10000;\n
        if (v1 == v5)\n
            break;\n
        *((v12 + v5 + 2)) = v11;\n
        if (v0 == v5)\n
            break;\n
        *((v12 + v5 + 3)) = v11;\n
        v5 += 4;\n
        if (v4 == v5)\n
            break;\n
    }\n
    return 0;\n
}\n
", "4245392:cgc_system_init": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_system_init(struct_0 *v0)\n
{\n
    v0->field_4 = 0;\n
    return 0;\n
}\n
", "4245406:sub_40c79e": null, "4245408:cgc_system_get_bytes": "int cgc_system_get_bytes(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
\n
    v2 = v5;\n
    v6 = *(&v4);\n
    v0 = &v1;\n
    return (v6 ^ v7) || cgc_random(a0, v6);\n
}\n
", "4245466:sub_40c7da": null, "4245472:cgc_rng_init": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_rng_init(unsigned int *v1, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // ecx\n
    struct_1 *v4;  // eax\n
\n
    v2 = a0;\n
    if (v2 <= 1)\n
    {\n
        v3 = v1;\n
        *(v3) = *(&(&_GLOBAL_OFFSET_TABLE_)[292 + 4 * v2]);\n
        v0 = v3;\n
        return v4->field_8();\n
    }\n
    return 1;\n
}\n
", "4245531:sub_40c81b": null, "4245536:cgc__recv_bytes": "int cgc__recv_bytes(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // esi\n
\n
    v0 = v2;\n
    return (a0 ^ v0) || cgc_receive(0, v1, a0, &v0, v2, v3);\n
}\n
", "4245591:sub_40c857": null, "4245600:cgc__recv": "int cgc__recv(char v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x11]\n
    char v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v6;  // esi\n
    unsigned int v9;  // ecx\n
\n
    v0 = &v2;\n
    if (cgc_receive(0, &v1, 1))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v2) != 1)\n
    {\n
        return 1;\n
    }\n
    else if (v1 != v4)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v6 = a1;\n
        if (v6)\n
        {\n
            v0 = &v3;\n
            v9 = cgc_receive(0, a0, v6);\n
            return (v6 ^ *(&v3)) || v9;\n
        }\n
        return 0;\n
    }\n
}\n
", "4245722:sub_40c8da": null, "4245728:cgc__send_bytes": "int cgc__send_bytes(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // esi\n
\n
    v0 = v2;\n
    return (a0 ^ v0) || cgc_transmit(1, v1, a0, &v0, v2, v3);\n
}\n
", "4245783:sub_40c917": null, "4245792:cgc__send": "int cgc__send()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp+0x4]\n
    char v4;  // [bp+0x8]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        return;\n
    }\n
    else if (*(&v1) != 1)\n
    {\n
        return;\n
    }\n
    else\n
    {\n
        v6 = *(&v5);\n
        if (v6)\n
        {\n
            v0 = &v2;\n
            cgc_transmit(1, *(&v4), v6);\n
            return;\n
        }\n
        return;\n
    }\n
}\n
", "4245904:cgc_silk_init": "int cgc_silk_init(unsigned int *v0)\n
{\n
    unsigned int v1[23];  // eax\n
\n
    v1 = cgc_malloc(92);\n
    *(v0) = v1;\n
    if (!v1)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_codes_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_bn_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_kx_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_modes_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_rng_init(&v1[16], 1))\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v1[21] = 0;\n
        v1[22] = 0;\n
        return 0;\n
    }\n
}\n
", "4246035:sub_40ca13": null, "4246048:cgc_silk_allowed_codes": "int cgc_silk_allowed_codes()\n
{\n
    return 983071;\n
}\n
", "4246054:sub_40ca26": null, "4246064:cgc_silk_preferred_code": "int cgc_silk_preferred_code()\n
{\n
    char v1;  // [bp+0x8]\n
    char v2;  // cl\n
\n
    v2 = *(&v1);\n
    return;\n
}\n
", "4246117:sub_40ca65": null, "4246128:cgc_silk_preferred_mode": "int cgc_silk_preferred_mode()\n
{\n
    char v1;  // [bp+0x8]\n
    unsigned int v2;  // ecx\n
\n
    v2 = *(&v1);\n
    return;\n
}\n
", "4246183:sub_40caa7": null, "4246192:cgc_silk_negotiate": "int cgc_silk_negotiate(struct struct_0 **v8)\n
{\n
    unsigned int v0;  // [bp-0xac]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2;  // [bp-0x29]\n
    char v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7[21];  // [bp-0x14]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // ecx\n
    unsigned int v13[21];  // esi\n
\n
    v4 = 983071;\n
    v2 = 1;\n
    v1 = &v3;\n
    if (!(!cgc_transmit(1, &v2, 1) && *(&v3) == 1))\n
        return 1;\n
    v7[0] = *(v8);\n
    v1 = &v3;\n
    if (cgc_transmit(1, &v4, 4))\n
        return 1;\n
    if (*(&v3) != 4)\n
        return 1;\n
    v1 = &v3;\n
    if (cgc_receive(0, &v2, 1))\n
        return 1;\n
    if (*(&v3) != 1)\n
        return 1;\n
    if (v2 != 1)\n
        return 1;\n
    v1 = &v3;\n
    if (cgc_receive(0, &v4, 4))\n
        return 1;\n
    if (*(&v3) != 4)\n
        return 1;\n
    v10 = v4;\n
    v11 = 4;\n
    if (!(v10 & 16))\n
    {\n
        v11 = 3;\n
        if (!(v10 & 8))\n
        {\n
            v11 = 2;\n
            if (!(v10 & 4))\n
            {\n
                v11 = 1;\n
                if (!(v10 & 2))\n
                {\n
                    v11 = 0;\n
                    if (!(v10 & 1))\n
                        return 1;\n
                }\n
            }\n
        }\n
    }\n
    v5 = 3;\n
    if (!(v10 & 0x80000))\n
    {\n
        v5 = 2;\n
        if (!(v10 & 0x40000))\n
        {\n
            v5 = 1;\n
            if (!(v10 & 0x20000))\n
            {\n
                v5 = 0;\n
                if (!(v10 & 0x10000))\n
                    return 1;\n
            }\n
        }\n
    }\n
    v6 = v11;\n
    v12 = v6;\n
    v0 = 1 << ((v5 | 16) & 31);\n
    *(&v0 + ((v6 & 31) >> 3)) = *(&v0 + ((v6 & 31) >> 3)) | 1 << (v6 & 31 & 7);\n
    if (v4 == v10)\n
    {\n
LABEL_40cc17:\n
        v13 = v7;\n
        v13[18] = v12;\n
        v13[20] = cgc_codes_ksize(v12);\n
        v13[19] = v5;\n
        return 0;\n
    }\n
    v4 = v0;\n
    v2 = 1;\n
    v1 = &v3;\n
    if (!cgc_transmit(1, &v2, 1) && *(&v3) == 1)\n
    {\n
        v1 = &v3;\n
        if (cgc_transmit(1, &v4, 4))\n
            return 1;\n
        v12 = v6;\n
        if (*(&v3) != 4)\n
            return 1;\n
        goto LABEL_40cc17;\n
    }\n
}\n
", "4246673:sub_40cc91": null, "4246688:cgc_silk_kx": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_silk_kx(struct struct_1 **v18)\n
{\n
    struct_0 *v0;  // [bp-0xb0]\n
    char v1;  // [bp-0xa4]\n
    unsigned int v2[21];  // [bp-0xa0]\n
    char v3;  // [bp-0x9c]\n
    void* v4;  // [bp-0x90], Other Possible Types: unsigned int\n
    char v5[8];  // [bp-0x8c]\n
    unsigned short v6;  // [bp-0x8a]\n
    unsigned short v7;  // [bp-0x88]\n
    unsigned short v8;  // [bp-0x86]\n
    unsigned int v9;  // [bp-0x80]\n
    char v10;  // [bp-0x7c]\n
    unsigned int v11;  // [bp-0x70]\n
    unsigned int v12;  // [bp-0x6c]\n
    unsigned int v13;  // [bp-0x68]\n
    char v14;  // [bp-0x64]\n
    unsigned int v15[2];  // [bp-0x44], Other Possible Types: char\n
    unsigned int v16[2];  // [bp-0x3c]\n
    unsigned int v17[2];  // [bp-0x34]\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ebp\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edi\n
    void* v28;  // edi, Other Possible Types: unsigned int\n
    unsigned int v29[21];  // edi\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // ebp\n
    unsigned int v33;  // ecx\n
    unsigned int *v34;  // esi\n
    unsigned int v35;  // ebp\n
    unsigned int v36;  // eax\n
    unsigned int v37[21];  // eax\n
    unsigned int v38[21];  // ecx\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    char v41;  // dl\n
    unsigned int v42;  // edx\n
    unsigned int v43[21];  // eax\n
    unsigned int v45[21];  // eax\n
\n
    v19 = v2[20];\n
    if (v19)\n
    {\n
        cgc_bn_init(&v3);\n
        cgc_bn_init(&v10);\n
        if (cgc_kx_init_std(v15, 3 - (v19 < 129)))\n
            return 1;\n
        v9 = 1;\n
        if (cgc_kx_gen_a(v15, &v2[16]))\n
        {\n
LABEL_40cd42:\n
            v28 = 0;\n
        }\n
        else\n
        {\n
            if (!(!cgc_kx_get_A(v15, &v3)))\n
                goto LABEL_40cd42;\n
            v2[0] = v2;\n
            v4 = cgc_bn_length(v15) + 7 >> 3;\n
            *(v5) = v4;\n
            v22 = cgc_bn_length(v17);\n
            v23 = v22 + 7 >> 3;\n
            v6 = v22 + 7 >> 3;\n
            v7 = cgc_bn_length(v16) + 7 >> 3;\n
            v8 = cgc_bn_length(&v3) + 7 >> 3;\n
            v13 = v8;\n
            v11 = v4;\n
            v12 = v7;\n
            v26 = cgc_malloc(v8 + v11 + v23 + v12);\n
            if (!v26)\n
            {\n
                v28 = 0;\n
LABEL_40d193:\n
            }\n
            else\n
            {\n
                v4 = v26;\n
                v27 = v11;\n
                cgc_bn_to_bytes(v15, v4, v27);\n
                cgc_bn_to_bytes(v17, v4 + v27, v23);\n
                v30 = v23 + v27;\n
                v28 = v4;\n
                v31 = v12;\n
                cgc_bn_to_bytes(v16, v28 + v30, v31);\n
                v32 = v30 + v31;\n
                v33 = v13;\n
                cgc_bn_to_bytes(&v3, v28 + v32, v33);\n
                v1 = 2;\n
                v0 = &v14;\n
                if (!(!cgc_transmit(1, &v1, 1)))\n
                    goto LABEL_40d193;\n
                if (!(*(&v14) == 1))\n
                    goto LABEL_40d193;\n
                v0 = &v14;\n
                if (!(!cgc_transmit(1, v5, 8)))\n
                    goto LABEL_40d193;\n
                if (!(*(&v14) == 8))\n
                    goto LABEL_40d193;\n
                v35 = v32 + v33;\n
                v0 = &v14;\n
                if (!(!cgc_transmit(1, v28, v35)))\n
                    goto LABEL_40d193;\n
                if (!(*(&v14) == v35))\n
                    goto LABEL_40d193;\n
                cgc_free(v28);\n
                if (!cgc__recv(3, &v1, 2))\n
                {\n
                    v36 = cgc_malloc(*(&v1));\n
                    if (v36)\n
                    {\n
                        v28 = v36;\n
                        v0 = &v14;\n
                        if (!cgc_receive(0, v36, *(&v1)) && *(&v14) == *(&v1))\n
                        {\n
                            if (!(!cgc_bn_from_bytes(&v10, v36, *(&v1))))\n
                                goto LABEL_40cd44;\n
                            if (!(!cgc_kx_set_b(v15, &v10)))\n
                                goto LABEL_40cd44;\n
                            if (!cgc_kx_get_sk(v15, &v14, v2[20]))\n
                            {\n
                                v37 = v2;\n
                                if (!cgc_codes_init(v37, v37[18], &v14))\n
                                {\n
                                    v38 = v2;\n
                                    if (!cgc_modes_init(&v38[4], v38[19], v38))\n
                                    {\n
                                        if (v2[20] >= 8)\n
                                        {\n
                                            v39 = 0;\n
                                            v40 = 255;\n
                                            do\n
                                            {\n
                                                v41 = (&v14)[v39];\n
                                                (&v14)[v39] = v41 ^ v40;\n
                                                v42 = (v41 ^ v40) >> 3;\n
                                                v40 ^= v42;\n
                                                v39 += 1;\n
                                            } while (v39 < v2[20] >> 3);\n
                                        }\n
                                        v43 = v2;\n
                                        if (!cgc_codes_init(&v43[2], v43[18], &v14))\n
                                        {\n
                                            v45 = v2;\n
                                            v9 = cgc_modes_init(&v45[10], v45[19], &v43[2]);\n
                                            goto LABEL_40d193;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
LABEL_40cd44:\n
        cgc_free(v28);\n
        cgc_bn_destroy(&v3);\n
        cgc_bn_destroy(&v10);\n
        cgc_kx_destroy(v15);\n
        return v9;\n
    }\n
    else\n
    {\n
        v2[0] = *(v18);\n
        cgc_memset(v5, 0, 8);\n
        v14 = 2;\n
        *(&v0) = v15;\n
        if (!(!cgc_transmit(1, &v14, 1) && v15[0] == 1))\n
            return 1;\n
        *(&v0) = v15;\n
        if (cgc_transmit(1, v5, 8))\n
        {\n
            return 1;\n
        }\n
        else if (*(&v15) != 8)\n
        {\n
            return 1;\n
        }\n
        else\n
        {\n
            *(&v0) = v15;\n
            if (!cgc_receive(0, &v14, 1) && v15[0] == 1 && v14 == 3)\n
            {\n
                *(&v0) = v15;\n
                if (!cgc_receive(0, &v1, 2))\n
                {\n
                    if (*(&v15) != 2)\n
                    {\n
                        return 1;\n
                    }\n
                    else if (*(&v1))\n
                    {\n
                        return 1;\n
                    }\n
                    else\n
                    {\n
                        v29 = v2;\n
                        if (!cgc_codes_init(v29, v29[18], 0) && !cgc_modes_init(&v29[4], v29[19], v29))\n
                        {\n
                            v34 = &v29[2];\n
                            if (!cgc_codes_init(v34, v29[18], 0))\n
                            {\n
                                v20 = 0;\n
                                *(&v20) = cgc_modes_init(&v29[10], v29[19], v34);\n
                                return v20;\n
                            }\n
                            return 1;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4248028:sub_40d1dc": null, "4248032:cgc_silk_prepare": "int cgc_silk_prepare(struct struct_0 **v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // esi\n
\n
    v0 = v2;\n
    if (!cgc_silk_negotiate(v1))\n
        return cgc_silk_kx(v1);\n
    return 1;\n
}\n
", "4248099:sub_40d223": null, "4248112:cgc_silk_send": "int cgc_silk_send(unsigned int *v7, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_8;  // tmp #8\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x25]\n
    unsigned short v2;  // [bp-0x24]\n
    char v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    struct struct_0 ***v6;  // [bp-0x14]\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ebp\n
\n
    v8 = a1;\n
    if (!v8)\n
        return 0;\n
    v9 = a0;\n
    v6 = *(v7) + 16;\n
    do\n
    {\n
        v10 = (v8 < 65519 ? 65519 : v8);\n
        if (cgc_modes_encode(v6, v9, v10, &v5, &v4))\n
            return 1;\n
        if (v2 > 65535)\n
            return 1;\n
        v2 = v4;\n
        v1 = 4;\n
        v0 = &v3;\n
        if (!cgc_transmit(1, &v1, 1) && *(&v3) == 1)\n
        {\n
            v0 = &v3;\n
            cgc_transmit(1, &v2, 2);\n
        }\n
        v0 = &v3;\n
        cgc_transmit(1, v5, v4);\n
        cgc_free(v5);\n
        v9 += v10;\n
        tmp_8 = v8;\n
        v8 -= v10;\n
    } while (tmp_8 != v10);\n
}\n
", "4248162:sub_40d262": null, "4248373:sub_40d335": null, "4248384:cgc_silk_recv": "typedef struct struct_0 {\n
    char padding_0[84];\n
    unsigned int field_54;\n
    unsigned short field_58;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[84];\n
    void* field_54;\n
    unsigned short field_58;\n
} struct_1;\n
\n
int cgc_silk_recv(struct struct_0 **v10, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0x40]\n
    char v1;  // [bp-0x34]\n
    char v2;  // [bp-0x2d]\n
    char v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    struct_0 *v5;  // [bp-0x24]\n
    struct struct_0 ***v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int v11;  // ecx\n
    struct struct_0 **v13;  // eax\n
    char *v14;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    char *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18;  // edi\n
    struct_0 *v19;  // esi\n
    struct_1 *v20;  // esi\n
    struct_0 *v21;  // ebp, Other Possible Types: unsigned int\n
    void* v22;  // esi, Other Possible Types: unsigned int\n
\n
    v11 = a1;\n
    if (!v11)\n
        return 0;\n
    v17 = a0;\n
    v13 = v10;\n
    v21 = *(v13);\n
    v6 = &*(v13)->padding_0[40];\n
    v5 = *(v13);\n
    while (true)\n
    {\n
        v16 = *((v21 + 84));\n
        v4 = v11;\n
        if (v16)\n
        {\n
LABEL_40d49c:\n
            v18 = *((v21 + 88));\n
            if (v11 <= v18)\n
                v18 = v11;\n
            v19 = v21;\n
            cgc_memcpy(v17, *((v21 + 90)) + v16, v18);\n
            *(&v19[1].padding_0[0]) = *(&v19[1].padding_0[0]) + v18;\n
            v11 = v4 - v18;\n
            tmp_13 = *((v21 + 88));\n
            v19->field_58 = v19->field_58 - v18;\n
            if (tmp_13 == v18)\n
            {\n
                v20 = v5;\n
                v4 = v11;\n
                cgc_free(v20->field_54);\n
                v11 = v4;\n
                v20->field_54 = 0;\n
                *(&v20->field_58) = 0;\n
            }\n
            v17 += v18;\n
            v21 = v5;\n
            if (!v11)\n
                return 0;\n
        }\n
        else\n
        {\n
            v7 = v17;\n
            v0 = &v3;\n
            if (!cgc_receive(0, &v2, 1) && *(&v3) == 1 && v2 == 4)\n
            {\n
                v0 = &v3;\n
                v22 = 0;\n
                if (cgc_receive(0, &v1, 2))\n
                    break;\n
                if (*(&v3) != 2)\n
                    break;\n
                v14 = cgc_malloc(*(&v1));\n
                if (!v14)\n
                    break;\n
                v15 = *(&v1);\n
                v0 = &v3;\n
                v22 = v14;\n
                if (cgc_receive(0, v14, v15))\n
                    break;\n
                if (*(&v3) != v15)\n
                    break;\n
                if (cgc_modes_decode(v6, v14, *(&v1), &v8, &v9))\n
                    break;\n
                *((v21 + 84)) = v8;\n
                *((v21 + 88)) = v9;\n
                *((v21 + 90)) = 0;\n
                cgc_free(v14);\n
                v16 = *((v21 + 84));\n
                v11 = v4;\n
                v17 = v7;\n
                goto LABEL_40d49c;\n
            }\n
            v22 = 0;\n
            break;\n
        }\n
    }\n
    cgc_free(v22);\n
    return 1;\n
}\n
", "4248440:sub_40d378": null, "4248864:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:memcpy": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}