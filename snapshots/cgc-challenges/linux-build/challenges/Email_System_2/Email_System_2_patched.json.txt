{"4202496:_init": "extern struct_0 *g_409118;\n
\n
int _init()\n
{\n
    if (g_409118)\n
    {\n
        g_409118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202720:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202736:sub_4020f0": "int sub_4020f0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202742:sub_4020f6": null, "4202752:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202795:sub_40212b": null, "4202796:sub_40212c": "int sub_40212c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202800:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202804:sub_402134": null, "4202816:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28639;\n
    v6 = v5 + 16;\n
    v7 = v5 + 16;\n
    if (v7 == v6)\n
        return v5 + 16;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202867:sub_402173": "int sub_402173()\n
{\n
}\n
", "4202873:sub_402179": "int sub_402179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202880:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28575;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 16;\n
    v9 = (v6 + 16 - (v6 + 16) >> 31) + (16 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202951:sub_4021c7": "int sub_4021c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202960:__do_global_dtors_aux": "extern unsigned int __dso_handle;\n
extern char completed.0;\n
extern unsigned int g_409114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (completed.0)\n
        return;\n
    if (g_409114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020f0();\n
    }\n
    deregister_tm_clones();\n
    completed.0 = 1;\n
    return;\n
}\n
", "4203035:sub_40221b": "int sub_40221b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203040:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203049:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203053:sub_40222d": null, "4203056:cgc_floor": null, "4203220:sub_4022d4": null, "4203232:cgc_round_away_from_zero": null, "4203386:sub_40237a": null, "4203392:cgc_round": null, "4203536:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203628:sub_40246c": null, "4203632:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4203841:sub_402541": null, "4203856:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 39;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4204049:sub_402611": null, "4204064:cgc_float_to_str": null, "4204927:sub_40297f": null, "4204928:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_403254:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    cgc_putc(v14->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    cgc_putc(v12->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    cgc_putc(v10->field_0);\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_403254;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_4030d3;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_4030d3:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4207211:sub_40326b": null, "4207216:cgc_vsprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_1 **a1)\n
{\n
    struct_0 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_0 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_0 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_1 **v27;  // eax\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_1 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            v24[v26] = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_403aab:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                v24[v26] = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                v24[v26] = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    v24[v26] = v14->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    v24[v26] = v12->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            v24[v26] = 32;\n
                        else\n
                            v24[v26] = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    v24[v26] = v10->field_0;\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_403aab;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_40394e;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_40394e:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        v24[v26] = 32;\n
                    else\n
                        v24[v26] = 48;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                v24[v26] = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    v24[v26] = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4209346:sub_403ac2": null, "4209360:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4209424:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4209493:sub_403b55": null, "4209504:cgc_sprng": "typedef struct struct_0 {\n
    char padding_0[220];\n
    unsigned int field_dc;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprng(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // edi\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = a0;\n
    v2 = v4;\n
    for (v1 = 0; v1 < 16; v1 += 1)\n
    {\n
        v5 = v2;\n
        v6 = v3;\n
        v3 = v6 ^ v6 / 0x1000;\n
        v2 = v5 ^ ((v6 CONCAT v5) * 0x100000 >> 32);\n
        v8 = v2;\n
        v9 = v3;\n
        v3 = v9 ^ ((v9 CONCAT v8) * 0x2000000 >> 32);\n
        v2 = v8 ^ v8 * 0x2000000;\n
        v12 = v2;\n
        v13 = v3;\n
        v3 = v13 ^ v13 / 0x8000000;\n
        v2 = v12 ^ ((v13 CONCAT v12) * 32 >> 32);\n
        v15 = v2;\n
        v16 = v0;\n
        v17 = v1;\n
        *(&v16->padding_0[92 + 8 * v17]) = v15 * 3625897269;\n
        *(&v16->padding_0[96 + 8 * v17]) = (v15 * 3625897269 >> 32) + v15 * 419896726 + v3 * 3625897269;\n
    }\n
    v0->field_dc = 0;\n
    return v0;\n
}\n
", "4209730:sub_403c42": null, "4209744:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int position;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[96 + 8 * position]);\n
    v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[92 + 8 * position]);\n
    v9 = position + 1;\n
    if (v9 < 0)\n
        v9 = position + 16;\n
    position = position + -(v9 & -0x10) + 1;\n
    v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[96 + 8 * position]);\n
    v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[92 + 8 * position]);\n
    v10 = v0;\n
    v11 = v1;\n
    v1 = v11 ^ ((v11 CONCAT v10) * 0x8000000 >> 32);\n
    v0 = v10 ^ v10 * 0x8000000;\n
    v14 = v0;\n
    v15 = v1;\n
    v1 = v15 ^ v15 / 0x2000;\n
    v0 = v14 ^ ((v15 CONCAT v14) * 0x80000 >> 32);\n
    v2 ^= v3 >> 14;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[96 + 8 * position]) = v3 ^ v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[92 + 8 * position]) = v2 ^ v0;\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[92 + 8 * position]) * 3479400805;\n
}\n
", "4210008:sub_403d58": null, "4210016:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 <= v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = a0 - v5 + 1;\n
    v2 = (0 CONCAT -1) /m v3;\n
    do\n
    {\n
        v1 = cgc_prng();\n
    } while (v1 >= v3 * v2);\n
    v4 = (0 CONCAT v1) /m v2 + v5;\n
    return v4;\n
}\n
", "4210145:sub_403de1": null, "4210160:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4210232:sub_403e38": null, "4210240:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210294:sub_403e76": null, "4210304:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210358:sub_403eb6": null, "4210368:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4210426:sub_403efa": null, "4210432:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4210490:sub_403f3a": null, "4210496:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4210562:sub_403f82": null, "4210576:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4210642:sub_403fd2": null, "4210656:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210710:sub_404016": null, "4210720:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4210814:sub_40407e": null, "4210816:cgc_isnan": null, "4210839:sub_404097": null, "4210848:cgc_isinf": null, "4210895:sub_4040cf": null, "4210896:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_404302:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_4042db;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_4042db;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_4042db;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_404302;\n
                if (!v4)\n
                {\n
LABEL_404257:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_4042db;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_404257;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_4042db:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4211484:sub_40431c": null, "4211488:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4211892:sub_4044b4": null, "4211904:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4211995:sub_40451b": null, "4212000:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4212155:sub_4045bb": null, "4212160:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212268:sub_40462c": null, "4212272:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4212350:sub_40467e": null, "4212352:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4212460:sub_4046ec": null, "4212464:cgc_stricmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stricmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v0 = cgc_tolower(*(v3));\n
            v1 = v0 == cgc_tolower(*(a0));\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4212621:sub_40478d": null, "4212624:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4212819:sub_404853": null, "4212832:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4212909:sub_4048ad": null, "4212912:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        if (!(*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_receive(v9, &v2, 0x400);\n
    }\n
}\n
", "4213234:sub_4049f2": null, "4213248:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4213351:sub_404a67": null, "4213360:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (v2 == a0)\n
            return v4;\n
        v4[v5] = v2;\n
        v4 += 1;\n
    }\n
}\n
", "4213574:sub_404b46": null, "4213584:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(0, v6 + v4, v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 -= v2;\n
        v4 = v2 + v4;\n
    }\n
}\n
", "4213760:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4213919:sub_404c9f": null, "4213920:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4214119:sub_404d67": null, "4214128:cgc_puts": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: char\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v5)\n
        return v5;\n
    v2 = cgc_strlen(v5);\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 < v2)\n
        {\n
            v0 = &v4;\n
            v6 = cgc_transmit(1, v5 + v3, v2 - v3);\n
            if (v6)\n
                return v6;\n
            v3 = *(&v4) + v3;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                if (v4 == 1)\n
                    return v6;\n
                v0 = &v4;\n
                v6 = cgc_transmit(1, v1 - 3974, 1);\n
                if (v6)\n
                    return v6;\n
            }\n
        }\n
    }\n
}\n
", "4214356:sub_404e54": null, "4214368:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4214474:sub_404eca": null, "4214480:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_4c)\n
        {\n
            cgc_deallocate(v4->field_4c);\n
            v12 = v4;\n
            v12->field_4c = 0;\n
            v12->field_50 = 0;\n
            v12->field_54 = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_4c)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_54 >= v11->field_4c + v11->field_50)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_4c)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_50 = cgc_strlen(v10);\n
        v0 = &v13->field_4c;\n
        if (cgc_allocate(v13->field_50, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_4c, v10);\n
        v14 = v4;\n
        v14->field_54 = v14->field_4c;\n
    }\n
    v10 = &v4->field_54->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_4c + v15->field_50;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_4c + v16->field_50)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_48 = v8;\n
    *(v7) = 0;\n
    v17->field_54 = v7 + 1;\n
    v9 = v17->field_48;\n
    return v9;\n
}\n
", "4215227:sub_4051bb": null, "4215232:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 < a0)\n
        {\n
            v0 = &v3;\n
            if (cgc_transmit(1, v5 + v2, a0 - v2))\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            v2 = *(&v3) + v2;\n
        }\n
        else\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215397:sub_405265": null, "4215408:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4215600:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc();\n
    cgc_memset(v1, 0, v3 * a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4215690:sub_40538a": null, "4215696:cgc_malloc": "typedef struct struct_2 {\n
    char padding_0[88];\n
    struct struct_1 *field_58;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_heap_manager;\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    char v0;  // [bp-0x1d]\n
    struct_2 *v1;  // [bp-0x1c]\n
    struct_3 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x14]\n
    struct_0 *v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_2 *v7;  // ebx\n
    struct_0 *v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(0x1000, 0);\n
        v7 = v1;\n
        v7->field_58 = *(&v3);\n
        v7->field_58->field_0 = 0x1000;\n
        v7->field_58->field_8 = 4;\n
        v7->field_58->field_4 = 0x1000 - v7->field_58->field_8;\n
        cgc_allocate(0x1000, 0);\n
        cgc_memset(v1->field_58->field_c, 0, 0x1000);\n
        v4 = v1->field_58->field_c;\n
        v4->field_0 = 4084;\n
        v4->field_4 = 0;\n
    }\n
    v4 = v1->field_58->field_c;\n
    if (v6 > v4->field_0)\n
    {\n
        cgc_allocate(0x1000, 0);\n
        if (!v4->field_4)\n
        {\n
            cgc_puts(&v1[46].padding_0[84]);\n
            cgc__terminate();\n
        }\n
        v4 = v4->field_4;\n
        v4->field_0 = 4084;\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        v8->field_0 = v8->field_0 - v6;\n
        v2 = &v4[1].field_0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v2 + 4)) & 1))\n
                v0 = *(v2) < v6 + 8;\n
            if (!(v0 & 1))\n
                break;\n
            v2 = v2 + 8 + *(v2);\n
        }\n
        *(v2) = v6;\n
        *((v2 + 4)) = 1;\n
        v5 = v2 + 8;\n
        return v5;\n
    }\n
}\n
", "4216209:sub_405591": null, "4216224:cgc_free": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_1 *v1;  // [bp-0x8]\n
    struct_0 *v3;  // eax\n
\n
    v1 = v2 - 8;\n
    v1->field_4 = 2;\n
    v0 = &v2 & -0x1000;\n
    v3 = v0;\n
    *(&v3) = v1->field_0 + *(&v3);\n
    return v0;\n
}\n
", "4216277:sub_4055d5": null, "4216288:cgc_print_message": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_40819f;\n
extern char globs;\n
\n
int cgc_print_message(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ebx\n
\n
    v3 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = cgc_strcmp(&(&globs)[1040 * v4 + 52 * a0 + 4], &g_40819f);\n
    if (v6)\n
    {\n
        cgc_printf(v2 - 4256);\n
        v7 = v2;\n
        v0 = v7 + 224 + v4 * 1040 + a0 * 52 + 19;\n
        v1 = v7 + 224 + v4 * 1040 + a0 * 52 + 34;\n
        v6 = cgc_printf(v7 - 4236);\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4216498:sub_4056b2": null, "4216512:cgc_add_message": "typedef struct struct_1 {\n
    char padding_0[10628];\n
    unsigned int field_2984;\n
    char padding_2988[44];\n
    struct struct_2 *field_29b4;\n
    unsigned int field_29b8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[45];\n
    char field_31;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_40baa4;\n
\n
int cgc_add_message(char *v8, unsigned int a0, unsigned int a1, char a2)\n
{\n
    struct_1 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int *v2;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int *v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v6;  // [bp-0xd]\n
    unsigned int v7;  // [bp-0xc]\n
    struct_1 *v9;  // eax\n
    struct_3 *v10;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    g_40baa4 = cgc_print_message;\n
    v6 = 255;\n
    for (v5 = 0; v5 < v0->field_29b8; v5 += 1)\n
    {\n
        if (!cgc_strcmp(v8, *(&v0->padding_2988[4 + 4 * v5])))\n
        {\n
            v6 = v5;\n
            break;\n
        }\n
    }\n
    if (v6 == 255)\n
    {\n
        cgc_printf(&v0->padding_0[4210]);\n
        v7 = 0;\n
        return v7;\n
    }\n
    v4 = -1;\n
    v3 = -1;\n
    if (a2 == 1)\n
        v3 = cgc_get_user_index();\n
    else\n
        v3 = cgc_get_user_index();\n
    if (v0->field_29b4->field_24 == 1)\n
        v0->field_29b4->field_24 = 0;\n
    for (v2 = 0; v2 < 20; v2 += 1)\n
    {\n
        if (*(&v0->padding_0[224 + 1040 * v3 + 52 * v2]) != 48879)\n
        {\n
            v4 = v2;\n
            break;\n
        }\n
    }\n
    if (v4 == -1)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v1 = &v0->padding_0[224 + 1040 * v3 + 52 * v4];\n
    v1->field_0 = 48879;\n
    cgc_strcpy(&v1->padding_4[15], a0);\n
    cgc_strcpy(&v1->padding_4, v8);\n
    cgc_strcpy(&v1->padding_4[30], a1);\n
    v9 = v0;\n
    v1->field_31 = a2;\n
    v9->field_2984 = v9->field_2984 + 1;\n
    v10 = v9->field_29b4;\n
    v10->field_28 = v10->field_28 + 1;\n
    v7 = 1;\n
    return v7;\n
}\n
", "4217086:sub_4058fe": null, "4217088:cgc_list_drafts": "typedef struct struct_1 {\n
    char padding_0[10624];\n
    struct struct_0 *field_2980;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_drafts(char *v5)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = cgc_get_user_index();\n
    v3 = v7;\n
    v2 = 0;\n
    for (v1 = 0; v1 < 20; v1 = v7)\n
    {\n
        if (*(&v0->padding_0[224 + 1040 * v3 + 52 * v1]) == 48879 && !cgc_strcmp(v5, &v0->padding_0[224 + 1040 * v3 + 52 * v1 + 19]) && v0->padding_0[273 + 1040 * v3 + 52 * v1] == 1)\n
        {\n
            v2 = 1;\n
            v0->field_2980(v3);\n
        }\n
        v7 = v1 + 1;\n
    }\n
    if (!v2)\n
        v7 = cgc_printf(&v0->padding_0[4188]);\n
    v8 = v4;\n
    return v7;\n
}\n
", "4217363:sub_405a13": null, "4217376:cgc_list_inbox": "typedef struct struct_1 {\n
    char padding_0[10624];\n
    struct struct_0 *field_2980;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_inbox(char *v5)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = cgc_get_user_index();\n
    v3 = v7;\n
    v2 = 0;\n
    for (v1 = 0; v1 < 20; v1 = v7)\n
    {\n
        if (*(&v0->padding_0[224 + 1040 * v3 + 52 * v1]) == 48879 && !cgc_strcmp(v5, &v0->padding_0[224 + 1040 * v3 + 52 * v1 + 4]) && !v0->padding_0[273 + 1040 * v3 + 52 * v1])\n
        {\n
            v2 = 1;\n
            v0->field_2980(v3);\n
        }\n
        v7 = v1 + 1;\n
    }\n
    if (!v2)\n
        v7 = cgc_printf(&v0->padding_0[4162]);\n
    v8 = v4;\n
    return v7;\n
}\n
", "4217651:sub_405b33": null, "4217664:cgc_list_all_messages": "typedef struct struct_1 {\n
    char padding_0[10624];\n
    struct struct_0 *field_2980;\n
    char padding_2984[52];\n
    unsigned int field_29b8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_all_messages()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct_1 *v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 >= v1->field_29b8)\n
            break;\n
        for (v2 = 0; v2 < 20; v2 += 1)\n
        {\n
            v4 = 1;\n
            v0 = v2;\n
            v1->field_2980(v3);\n
        }\n
        v3 += 1;\n
    }\n
    if (!v4)\n
        v6 = cgc_printf(&v1->padding_0[4134]);\n
    return v6;\n
}\n
", "4217834:sub_405bea": null, "4217840:cgc_get_draft_count": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_draft_count(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_get_user_index();\n
    v2 = 0;\n
    for (v1 = 0; v1 < 20; v1 += 1)\n
    {\n
        if (!cgc_strcmp(v5, v0 + 224 + v3 * 1040 + v1 * 52 + 19) && *((v0 + 224 + v3 * 1040 + v1 * 52 + 49)) == 1)\n
            v2 += 1;\n
    }\n
    v7 = v4;\n
    return v2;\n
}\n
", "4218028:sub_405cac": null, "4218032:cgc_get_inbox_count": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_inbox_count(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = cgc_get_user_index();\n
    for (v1 = 0; v1 < 20; v1 += 1)\n
    {\n
        if (!cgc_strcmp(v5, v0 + 224 + v2 * 1040 + v1 * 52 + 4) && !*((v0 + 224 + v2 * 1040 + v1 * 52 + 49)))\n
            v3 += 1;\n
    }\n
    v7 = v4;\n
    return v3;\n
}\n
", "4218220:sub_405d6c": null, "4218224:cgc_get_total_count": "typedef struct struct_0 {\n
    char padding_0[10680];\n
    unsigned int field_29b8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_total_count()\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    for (v2 = 0; v2 < v0->field_29b8; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < *((*((10636 + &v0->padding_0[0] + 0x4 * v2)) + 40)); v1 += 1)\n
        {\n
            v3 += 1;\n
        }\n
    }\n
    return v3;\n
}\n
", "4218363:sub_405dfb": null, "4218368:cgc_print_draft_for_send": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[45];\n
    char field_31;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_draft_for_send(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int *v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v9;  // [bp-0x18]\n
    unsigned int *v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
\n
    v12 = v14;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = cgc_get_user_index();\n
    v10 = 0;\n
    for (v10 = 0; v10 < 20; v10 += 1)\n
    {\n
        if (*((v1 + 224 + v11 * 1040 + v10 * 52)) == 48879 && !cgc_strcmp(v13, v1 + 224 + v11 * 1040 + v10 * 52 + 19) && *((v1 + 224 + v11 * 1040 + v10 * 52 + 49)) == 1)\n
        {\n
            v15 = v1;\n
            v0 = v15 + 224 + v11 * 1040 + v10 * 52 + 34;\n
            cgc_printf(v15 - 4120);\n
        }\n
    }\n
    memset(&v9, 0, 4);\n
    for (v8 = 0; v8 < 1; v8 = cgc_receive_until(&v9, 10, 3));\n
    v7 = cgc_atoi(&v9);\n
    if (v7 < 20 && v7 >= 0)\n
    {\n
        if (!cgc_strcmp(v13, v1 + 224 + v11 * 1040 + v7 * 52 + 19) && *((v1 + 224 + v11 * 1040 + v7 * 52 + 49)) == 1)\n
        {\n
            v6 = v1 + 224 + v11 * 1040 + v7 * 52;\n
            v5 = cgc_get_user_index();\n
            v4 = -1;\n
            for (v3 = 0; v3 < 20; v3 = v3 + 1)\n
            {\n
                if (*((v1 + 224 + v5 * 1040 + v3 * 52)) != 48879)\n
                {\n
                    v4 = v3;\n
                    break;\n
                }\n
            }\n
            if (v4 == -1)\n
            {\n
                v16 = cgc_printf(v1 - 4061);\n
                return v16;\n
            }\n
            v2 = v1 + 224 + v5 * 1040 + v4 * 52;\n
            cgc_strcpy(&v2->padding_4[15], &v6[4] + 3);\n
            cgc_strcpy(&v2->padding_4, v6 + 1);\n
            cgc_strcpy(&v2->padding_4[30], &v6[8] + 2);\n
            v2->field_31 = 0;\n
            v2->field_0 = 48879;\n
            cgc_bzero(v6 + 1, 15);\n
            cgc_bzero(&v6[4] + 3, 15);\n
            cgc_bzero(&v6[8] + 2, 15);\n
            v16 = v6;\n
            *(v16) = 0;\n
            return v6;\n
        }\n
        v16 = cgc_printf(v1 - 4085);\n
        return v16;\n
    }\n
    v16 = cgc_printf(v1 - 4100);\n
    return v16;\n
}\n
", "4219312:cgc_print_draft_for_del": "typedef struct struct_1 {\n
    char padding_0[10676];\n
    struct struct_0 *field_29b4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_draft_for_del(char *v8)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct_1 *v1;  // [bp-0x24]\n
    unsigned int *v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x17]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    struct_1 *v10;  // ebx\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v12;  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = cgc_get_user_index();\n
    v5 = 0;\n
    for (v5 = 0; v5 < 20; v5 += 1)\n
    {\n
        if (!cgc_strcmp(v8, &v1->padding_0[224 + 1040 * v6 + 52 * v5 + 19]) && v1->padding_0[273 + 1040 * v6 + 52 * v5] == 1)\n
        {\n
            v10 = v1;\n
            v0 = &v10->padding_0[224 + 1040 * v6 + 52 * v5 + 34];\n
            cgc_printf(&v10->padding_0[4120]);\n
        }\n
    }\n
    memset(&v4, 0, 3);\n
    for (v3 = 0; v3 < 1; v3 = cgc_receive_until(&v4, 10, 2));\n
    v2 = cgc_atoi(&v4);\n
    if (v2 < 20 && v2 >= 0)\n
    {\n
        if (!cgc_strcmp(v8, 19 + &v1->padding_0[224 + 1040 * v6] + 0x34 * v2) && *(273 + &v1->padding_0[1040 * v6] + 0x34 * v2) == 1)\n
        {\n
            cgc_bzero(4 + &v1->padding_0[224 + 1040 * v6] + 0x34 * v2, 15);\n
            cgc_bzero(19 + &v1->padding_0[224 + 1040 * v6] + 0x34 * v2, 15);\n
            cgc_bzero(34 + &v1->padding_0[224 + 1040 * v6] + 0x34 * v2, 15);\n
            v12 = v1;\n
            *((224 + &v12->padding_0[1040 * v6] + 0x34 * v2)) = 0;\n
            v11 = v12->field_29b4;\n
            *((v11 + 40)) = *((v11 + 40)) - 1;\n
            return v11;\n
        }\n
        v11 = cgc_printf(&v1->padding_0[4085]);\n
        return v11;\n
    }\n
    v11 = cgc_printf(&v1->padding_0[4100]);\n
    return v11;\n
}\n
", "4220002:sub_406462": null, "4220016:cgc_print_A": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_A()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"******************\\n
\");\n
    cgc_printf(v0 - 4031);\n
    cgc_printf(v0 - 4015);\n
    cgc_printf(v0 - 4005);\n
    v4 = v1;\n
    return cgc_printf(v0 - 3976);\n
}\n
", "4220126:sub_4064de": null, "4220128:cgc_handle_A_input": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[2659];\n
\n
int cgc_handle_A_input()\n
{\n
    unsigned int v0[2659];  // [bp-0x3c]\n
    struct_0 *v1;  // [bp-0x38]\n
    char v2;  // [bp-0x32]\n
    char v3;  // [bp-0x23]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0xf]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12[2659];  // eax\n
\n
    v7 = v9;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    memset(&v5, 0, 3);\n
    for (v4 = 0; v4 < 1; v4 = cgc_receive_until(&v5, 10, 2));\n
    if (v5 == 49)\n
    {\n
        cgc_create_user();\n
    }\n
    else if (v5 != 50)\n
    {\n
        if (v5 == 51)\n
        {\n
            cgc_printf(&v0[990]);\n
            cgc__terminate();\n
        }\n
        cgc_printf(&v0[987] + 2);\n
    }\n
    else\n
    {\n
        cgc_list_users();\n
        cgc_printf(&v0[999]);\n
        v1 = cgc_receive_until(&v3, 10, 14);\n
        v10 = v1;\n
        v1 = v10 + 1;\n
        (&v3)[v10] = 0;\n
        cgc_printf(&v0[996]);\n
        v1 = cgc_receive_until(&v2, 10, 14);\n
        v11 = v1;\n
        v1 = v11 + 1;\n
        (&v2)[v11] = 0;\n
        v0[2657] = 0;\n
        if (cgc_login(&v3) == 1)\n
        {\n
            v6 = 2;\n
            return v6;\n
        }\n
        cgc_printf(&v0[993]);\n
        v12 = v0;\n
        v12[2658] = v12[2658] + 1;\n
        if (v12[2658] >= 3)\n
        {\n
            cgc_create_user();\n
            v0[2658] = 0;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4220670:sub_4066fe": null, "4220672:cgc_print_B": "typedef struct struct_0 {\n
    char padding_0[10676];\n
    char *field_29b4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_current_user;\n
\n
int cgc_print_B()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v0 = cgc_current_user;\n
    cgc_printf(\"********@s********\\n
\");\n
    cgc_printf(&v1->padding_0[3908]);\n
    cgc_printf(&v1->padding_0[3889]);\n
    v0 = cgc_get_total_count();\n
    cgc_printf(&v1->padding_0[3872]);\n
    v0 = cgc_get_draft_count(v1->field_29b4);\n
    cgc_printf(&v1->padding_0[3854]);\n
    v0 = cgc_get_inbox_count(v1->field_29b4);\n
    cgc_printf(&v1->padding_0[3833]);\n
    cgc_printf(&v1->padding_0[3813]);\n
    cgc_printf(&v1->padding_0[3796]);\n
    cgc_printf(&v1->padding_0[3785]);\n
    v5 = v2;\n
    return cgc_printf(&v1->padding_0[3976]);\n
}\n
", "4220937:sub_406809": null, "4220944:cgc_handle_B_input": "typedef struct struct_0 {\n
    char padding_0[10628];\n
    unsigned int field_2984;\n
    char padding_2988[44];\n
    char *field_29b4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[2670];\n
\n
int cgc_handle_B_input()\n
{\n
    struct_0 *v0;  // [bp-0x3c]\n
    char v1;  // [bp-0x37]\n
    struct_1 *v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x23]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0xf]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp+0x4]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_[0];\n
    memset(&v5, 0, 3);\n
    for (v4 = 0; v4 < 1; v4 = cgc_receive_until(&v5, 10, 2));\n
    if (v5 == 55)\n
    {\n
        cgc_printf(&v0->padding_0[3776]);\n
        cgc_logout(v8);\n
        v6 = 2;\n
        return v6;\n
    }\n
    if (v5 == 56)\n
    {\n
        cgc_printf(&v0->padding_0[3960]);\n
        cgc__terminate();\n
    }\n
    if (v5 != 50)\n
    {\n
        if (v5 != 49)\n
        {\n
            if (v5 != 51)\n
            {\n
                if (v5 == 52)\n
                {\n
                    cgc_list_drafts(v0->field_29b4);\n
                }\n
                else if (v5 == 53)\n
                {\n
                    cgc_list_inbox(v0->field_29b4);\n
                }\n
                else if (v5 != 54)\n
                {\n
                    cgc_printf(&v0->padding_0[3647]);\n
                }\n
                else if (cgc_get_draft_count(v0->field_29b4))\n
                {\n
                    cgc_print_draft_for_del(v0->field_29b4);\n
                }\n
                else\n
                {\n
                    cgc_printf(&v0->padding_0[3752]);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
            }\n
            else\n
            {\n
                if (cgc_get_total_count())\n
                {\n
                    cgc_list_all_messages();\n
                }\n
                else\n
                {\n
                    cgc_printf(&v0->padding_0[4134]);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            if (v0->field_2984 < 4)\n
            {\n
                cgc_printf(&v0->padding_0[3682]);\n
                v2 = cgc_receive_until(&v3, 10, 14);\n
                v10 = v2;\n
                v2 = v10 + 1;\n
                (&v3)[v10] = 0;\n
                cgc_printf(&v0->padding_0[3677]);\n
                v2 = cgc_receive_until(&v1, 10, 14);\n
                v11 = v2;\n
                v2 = v11 + 1;\n
                (&v1)[v11] = 0;\n
                if (cgc_add_message(&v3, v0->field_29b4, &v1, 1) != 1)\n
                    cgc_printf(&v0->padding_0[3667]);\n
            }\n
            else\n
            {\n
                cgc_printf(&v0->padding_0[3726]);\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_get_draft_count(v0->field_29b4))\n
        {\n
            cgc_print_draft_for_send(v0->field_29b4);\n
        }\n
        else\n
        {\n
            cgc_printf(&v0->padding_0[3752]);\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4221841:sub_406b91": null, "4221856:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* bad_login_count;\n
extern void* cgc_msg_count_login;\n
extern void* cgc_user_count;\n
\n
int main(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    cgc_msg_count_login = 0;\n
    cgc_user_count = 0;\n
    bad_login_count = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            cgc_print_A();\n
        } while (cgc_handle_A_input() != 2);\n
        do\n
        {\n
            cgc_print_B();\n
        } while (cgc_handle_B_input() != 2);\n
    }\n
}\n
", "4222005:sub_406c35": null, "4222016:cgc_login": "extern unsigned int _GLOBAL_OFFSET_TABLE_[2671];\n
\n
int cgc_login(char *v3, char *a0)\n
{\n
    unsigned int v0[2671];  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[2671];  // eax\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < v0[2670])\n
        {\n
            if (!cgc_strcmp(v3, v0[2659 + v1]) && !cgc_strcmp(a0, v0[2659 + v1] + 15))\n
            {\n
                v4 = v0;\n
                v4[2669] = v4[2659 + v1];\n
                v2 = 1;\n
                return v2;\n
            }\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4222212:sub_406d04": null, "4222224:cgc_logout": "extern struct_0 *cgc_current_user;\n
\n
int cgc_logout()\n
{\n
    cgc_current_user->field_24 = 0;\n
    return 1;\n
}\n
", "4222259:sub_406d33": null, "4222272:cgc_get_user_index": "typedef struct struct_0 {\n
    char padding_0[10680];\n
    unsigned int field_29b8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_user_index(char *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_29b8)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v3, *(&v0->padding_0[10636 + 4 * v1])))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4222405:sub_406dc5": null, "4222416:cgc_create_user": "typedef struct struct_1 {\n
    char padding_0[10680];\n
    unsigned int field_29b8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_user(unsigned int v7)\n
{\n
    struct_1 *v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x30]\n
    struct_0 *v3;  // [bp-0x2c]\n
    char v4;  // [bp-0x26]\n
    char v5;  // [bp-0x17]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    struct_1 *v10;  // ebx\n
    unsigned int v11;  // eax\n
    struct_1 *v12;  // ebx\n
    unsigned int v13;  // eax\n
    struct_1 *v14;  // ebx\n
    struct_1 *v15;  // ebx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_printf(\"Username: \\n
\");\n
    v3 = cgc_receive_until(&v5, 10, 14);\n
    v9 = v3;\n
    v3 = v9 + 1;\n
    (&v5)[v9] = 0;\n
    v2 = -1;\n
    v13 = cgc_strlen(&v5);\n
    if (v13 < 1)\n
        return v13;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v13 = v1;\n
        if (v13 >= v0->field_29b8)\n
            break;\n
        if (cgc_strcmp(&v5, *((10636 + &v0->padding_0[0] + 0x4 * v1))))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v13 = v1;\n
            v2 = v13;\n
            break;\n
        }\n
    }\n
    if (v7 > 0)\n
    {\n
        if (v2 == -1)\n
            return v13;\n
        v10 = v0;\n
        *((*(&v10->padding_0[10636 + 4 * v2]) + 36)) = 1;\n
        cgc_printf(&v10->padding_0[3984]);\n
        v3 = cgc_receive_until(&v4, 10, 14);\n
        v11 = v3;\n
        v3 = v11 + 1;\n
        (&v4)[v11] = 0;\n
        cgc_bzero(*(&v0->padding_0[10636 + 4 * v2]) + 15, 15);\n
        v13 = cgc_strncpy(*(&v0->padding_0[10636 + 4 * v2]) + 15, &v4, v3);\n
        return v13;\n
    }\n
    else\n
    {\n
        if (v2 != -1)\n
        {\n
            return v13;\n
        }\n
        else if (v0->field_29b8 < 10)\n
        {\n
            v12 = v0;\n
            *(&v12->padding_0[10636 + 4 * v12->field_29b8]) = cgc_malloc(44);\n
            cgc_strncpy(*(&v12->padding_0[10636 + 4 * v12->field_29b8]), &v5, v3);\n
            v14 = v0;\n
            *((*(&v14->padding_0[10636 + 4 * v14->field_29b8]) + 32)) = v14->field_29b8;\n
            *((*(&v14->padding_0[10636 + 4 * v14->field_29b8]) + 36)) = 1;\n
            *((*(&v14->padding_0[10636 + 4 * v14->field_29b8]) + 40)) = 0;\n
            cgc_printf(&v14->padding_0[3984]);\n
            v15 = v0;\n
            v3 = cgc_receive_until(&v4, 10, 14);\n
            v16 = v3;\n
            v3 = v16 + 1;\n
            (&v4)[v16] = 0;\n
            v17 = v15->field_29b8;\n
            v15->field_29b8 = v17 + 1;\n
            v13 = cgc_strncpy(*(&v15->padding_0[10636 + 4 * v17]) + 15, &v4, v3);\n
            return v13;\n
        }\n
        else\n
        {\n
            v13 = cgc_printf(&v0->padding_0[3626]);\n
            return v13;\n
        }\n
    }\n
}\n
", "4223121:sub_407091": null, "4223136:cgc_list_users": "typedef struct struct_0 {\n
    char padding_0[10680];\n
    unsigned int field_29b8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_users()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v3 = 0; v3 < v2->field_29b8; v3 += 1)\n
    {\n
        v5 = v2;\n
        v0 = *((10636 + &v5->padding_0[0] + 0x4 * v3));\n
        v1 = *((10636 + &v5->padding_0[0] + 0x4 * v3)) + 15;\n
        cgc_printf(&v5->padding_0[3592]);\n
    }\n
    return v3;\n
}\n
", "4223252:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:memset": null, "5242912:cgc_deallocate": null, "5242916:cgc_log10": null, "5242920:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}