{"4202496:_init": "extern struct_0 *g_4091cc;\n
\n
int _init()\n
{\n
    if (g_4091cc)\n
    {\n
        g_4091cc();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28899;\n
    v6 = v5 + 97;\n
    v7 = v5 + 97;\n
    if (v7 == v6)\n
        return v5 + 97;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28835;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 97;\n
    v9 = (v6 + 97 - (v6 + 97) >> 31) + (97 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4091c8;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4091c8)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4203157:sub_402295": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203257:sub_4022f9": null, "4203264:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203449:sub_4023b9": null, "4203456:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4203483:sub_4023db": null, "4203488:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4203533:sub_40240d": null, "4203536:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4203581:sub_40243d": null, "4203584:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203661:sub_40248d": null, "4203664:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4203709:sub_4024bd": null, "4203712:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8656 + v0];\n
}\n
", "4203743:sub_4024df": null, "4203744:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4203799:sub_402517": null, "4203808:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8528 + v0];\n
}\n
", "4203839:sub_40253f": null, "4203840:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203854:sub_40254e": null, "4203856:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4203927:sub_402597": null, "4203936:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4204007:sub_4025e7": null, "4204016:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4204151:sub_402677": null, "4204160:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4204208:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 392 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4204616:sub_402848": null, "4204624:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4204786:sub_4028f2": null, "4204800:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 392 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4204978:sub_4029b2": null, "4204992:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4205186:sub_402a82": null, "4205200:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 44)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4205311:sub_402aff": null, "4205312:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[24 + 2 + v1])\n
    {\n
        v5 = v0;\n
        v5[24 + 2 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[24 + 2 + v1];\n
    *((v6[24 + 2 + v1] + 12)) = v3;\n
    v6[24 + 2 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4205470:sub_402b9e": null, "4205472:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 392)) == v3)\n
        *((v0 + v1 * 4 + 392)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4205646:sub_402c4e": null, "4205648:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_402e3c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_402e3c:\n
    return v6;\n
}\n
", "4206156:sub_402e4c": null, "4206160:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_remove_from_blist(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
\n
    if (v0->field_14)\n
        v0->field_14->field_10 = v0->field_10;\n
    v1 = v0;\n
    if (v1->field_10)\n
    {\n
        v1 = v0->field_10;\n
        *((v1 + 20)) = v0->field_14;\n
    }\n
    return v1;\n
}\n
", "4206224:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206320:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < a1)\n
        {\n
            if (*(v2) != *(a0))\n
            {\n
                v1 = *(v2) - *(a0);\n
                return v1;\n
            }\n
            v2 += 1;\n
            a0 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206448:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4206534:sub_402fc6": null, "4206544:cgc_memmove": "int cgc_memmove(char *v3, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v0 = v3;\n
    if (v0 >= v1)\n
    {\n
        if (v0 <= v1)\n
            return v3;\n
        for (v2 = a1; v2 > 0; v2 -= 1)\n
        {\n
            *((v0 + v2 - 1)) = v1[1 + v2];\n
        }\n
    }\n
    else\n
    {\n
        for (v2 = 0; v2 < a1; v2 += 1)\n
        {\n
            *((v0 + v2)) = v1[v2];\n
        }\n
        return v3;\n
    }\n
}\n
", "4206723:sub_403083": null, "4206736:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4206865:sub_403111": null, "4206880:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a0 >= a1)\n
    {\n
        v7 = cgc_output_number_printf(v8, (0 CONCAT a0) /m a1, a1, a2 - 1, a3);\n
        a0 = (0 CONCAT a0) /m a1 >> 32;\n
    }\n
    if (!v7 && a2 > 0)\n
    {\n
        while (true)\n
        {\n
            a2 -= 1;\n
            if (!a2)\n
                break;\n
            if (!(a3 & 1))\n
            {\n
                v5 = 32;\n
                cgc_transmit(v8, &v5, 1);\n
            }\n
            else\n
            {\n
                v6 = 48;\n
                cgc_transmit(v8, &v6, 1);\n
            }\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (a0 < 10)\n
            v1 = a0 + 48;\n
        else\n
            v1 = a0 + 55;\n
        v4 = v1;\n
        cgc_transmit(v8, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (a0 < 10)\n
            v0 = a0 + 48;\n
        else\n
            v0 = a0 + 87;\n
        v3 = v0;\n
        cgc_transmit(v8, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4207379:sub_403313": null, "4207392:cgc_fdprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fdprintf(unsigned int v20, char *a0)\n
{\n
    char *v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    char v4;  // [bp-0x61]\n
    char v5;  // [bp-0x59]\n
    char v6;  // [bp-0x51]\n
    char v7;  // [bp-0x49]\n
    char v8;  // [bp-0x41]\n
    char v9;  // [bp-0x39]\n
    char v10;  // [bp-0x31]\n
    struct struct_0 **v11;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v12;  // [bp-0x2c]\n
    void* v13;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    char *v17;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v18;  // [bp-0x11]\n
    char *v19;  // [bp-0x10]\n
    char v21;  // [bp+0xc]\n
    char *v22;  // eax\n
    char *v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = 0;\n
    v14 = 0;\n
    v13 = 0;\n
    v11 = &v21;\n
    while (*(a0))\n
    {\n
        v22 = a0;\n
        a0 = v22 + 1;\n
        v10 = *(v22);\n
        if (v10 != 37)\n
        {\n
            v4 = v10;\n
            cgc_transmit(v20, &v4, 1);\n
LABEL_4036f6:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v23 = a0;\n
                    a0 = v23 + 1;\n
                    v10 = *(v23);\n
                    v2 = v10;\n
                    if (v2 != 48)\n
                        break;\n
                    v14 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v10;\n
            if (v1 == 37)\n
            {\n
                v9 = 37;\n
                cgc_transmit(v20, &v9, 1);\n
                goto LABEL_4036af;\n
            }\n
            if (v1 == 88)\n
            {\n
                v14 |= 2;\n
            }\n
            else if (v1 == 99)\n
            {\n
                v24 = v11;\n
                v11 = v24 + 1;\n
                v18 = *(v24);\n
                v6 = v18;\n
                cgc_transmit(v20, &v6, 1);\n
                goto LABEL_4036af;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v25 = v11;\n
                    v11 = v25 + 1;\n
                    v17 = &*(v25)->field_0;\n
                    if (v17 < 0)\n
                    {\n
                        v7 = 45;\n
                        cgc_transmit(v20, &v7, 1);\n
                        v17 = -(v17);\n
                    }\n
                    cgc_output_number_printf(v20, v17, 10, v13, v14);\n
                    goto LABEL_4036af;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v26 = v11;\n
                    v11 = v26 + 1;\n
                    v19 = &*(v26)->field_0;\n
                    v16 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v16;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v8 = v19[v16];\n
                        cgc_transmit(v20, &v8, 1);\n
                        v16 += 1;\n
                    }\n
                    goto LABEL_4036af;\n
                }\n
                if (v1 == 117)\n
                {\n
                    v27 = v11;\n
                    v11 = v27 + 1;\n
                    v12 = &*(v27)->field_0;\n
                    cgc_output_number_printf(v20, v12, 10, v13, v14);\n
                    goto LABEL_4036af;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v10;\n
                    cgc_transmit(v20, &v5, 1);\n
LABEL_4036af:\n
                    v13 = 0;\n
                    v14 = 0;\n
                    goto LABEL_4036f6;\n
                }\n
            }\n
            v28 = v11;\n
            v11 = v28 + 1;\n
            v12 = &*(v28)->field_0;\n
            cgc_output_number_printf(v20, v12, 16, v13, v14);\n
            goto LABEL_4036af;\n
        }\n
    }\n
    return v15;\n
}\n
", "4208392:sub_403708": null, "4208400:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v8, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    unsigned int *v10;  // eax\n
    struct struct_0 **v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a1 >= a2)\n
    {\n
        v7 = cgc_output_number_sprintf(v8, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (!v7 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if (!(a4 & 1))\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            else\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            v9 = a0;\n
            *(v9) = *(v9) + 1;\n
            v10 = v8;\n
            *(v10) = *(v10) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v11 = a0;\n
    *(v11) = *(v11) + 1;\n
    v12 = v8;\n
    *(v12) = *(v12) + 1;\n
    return v7 + 1;\n
}\n
", "4208885:sub_4038f5": null, "4208896:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    char *v16;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_403c0f:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_403bd2;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = &*(v22)->field_0;\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_403bd2;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_403bd2;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_403bd2:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403c0f;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_403bd2;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4209709:sub_403c2d": null, "4209712:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v4[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[3];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4209970:sub_403d32": null, "4209984:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v6, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v6;\n
    v4 = a0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v5))\n
            v2 = *(v4);\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    return v0 - cgc_tolower(*(v4));\n
}\n
", "4210223:sub_403e2f": null, "4210224:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    v0 = a0;\n
    cgc_strcpy(v2 + cgc_strlen());\n
    v6 = v3;\n
    return v4;\n
}\n
", "4210301:sub_403e7d": null, "4210304:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4210410:sub_403eea": null, "4210416:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4210544:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4210628:sub_403fc4": null, "4210640:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen() + 1;\n
    v1 = cgc_malloc(v2);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4210764:sub_40404c": null, "4210768:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4210820:sub_404084": null, "4210832:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v7, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v7;\n
    v4 = a0;\n
    v8 = a1;\n
    a1 = v8 - 1;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (a1)\n
        {\n
            v2 = 0;\n
            if (*(v5))\n
                v2 = *(v4);\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    v6 = v0 - cgc_tolower(*(v4));\n
    return v6;\n
}\n
", "4211132:sub_4041bc": null, "4211136:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v3 = a1;\n
    a1 = v3 - 1;\n
    if (!v3)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        v0 = 0;\n
        if (v4)\n
        {\n
            v0 = 0;\n
            if (*(v2))\n
                v0 = *(a0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    v1 = *(v2) - *(a0);\n
    return v1;\n
}\n
", "4211337:sub_404289": null, "4211344:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
        if (!v0[v1])\n
            break;\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4211486:sub_40431e": null, "4211488:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4211704:sub_4043f8": null, "4211712:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_404448:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_404448;\n
        if (a1 < 0)\n
            goto LABEL_404448;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 43)\n
            v6 = &v6[1];\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_40453f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_40453f;\n
                v6 = &v6[1];\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_4045b4;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_4045b4:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_404712;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4046d2;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4046d2:\n
                if (v8 >= a1)\n
                    goto LABEL_404712;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                v6 = &v6[1];\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4046c9;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4046c9:\n
                v8 += 10;\n
                goto LABEL_4046d2;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_404648;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_404648:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_404712:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4212574:sub_40475e": null, "4212576:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4212635:sub_40479b": null, "4212640:cgc_send_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_n_bytes(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 && a1)\n
    {\n
        v3 = 0;\n
        for (v2 = a0; v2 > 0; v2 -= v3)\n
        {\n
            v0 = &v3;\n
            if (cgc_transmit(v5, a1 + a0 - v2, v2))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            if (!v3)\n
                break;\n
        }\n
        v4 = a0 - v2;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4212846:sub_40486e": null, "4212848:cgc_read_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_n_bytes(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 && a1)\n
    {\n
        v3 = 0;\n
        for (v2 = a0; v2 > 0; v2 -= v3)\n
        {\n
            v0 = &v3;\n
            if (cgc_receive(v5, a1 + a0 - v2, v2))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            if (!v3)\n
                break;\n
        }\n
        v4 = a0 - v2;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4213054:sub_40493e": null, "4213056:cgc_transmit_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_string(unsigned int v4, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_strlen(a0);\n
    if (!v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (cgc_send_n_bytes(v4, v1, a0) == v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
}\n
", "4213185:sub_4049c1": null, "4213200:cgc_read_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_until(unsigned int v5, unsigned int a0, char a1, unsigned int a2)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(v5, a2 + v3, a0 - v3))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        if (cgc_memchr(a2 + v3, a1, *(&v2)))\n
        {\n
            *(cgc_memchr(a2 + v3, a1, *(&v2))) = 0;\n
            v4 = v3 + *(&v2);\n
            return v4;\n
        }\n
        v3 = *(&v2) + v3;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4213447:sub_404ac7": null, "4213456:cgc_free_command": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_command(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1[2];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
        return v2;\n
    if (!v2->field_4)\n
        return cgc_free(v2);\n
    for (v1 = 0; v1 < v2->field_0; v1 = v1 + 1)\n
    {\n
        if (*((&v2->field_4[0] + 0x4 * v1)))\n
            cgc_free(*((&v2->field_4[0] + 0x4 * v1)));\n
    }\n
    cgc_free(v2->field_4);\n
}\n
", "4213628:sub_404b7c": null, "4213632:cgc_make_tree": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_make_tree(unsigned int v5, unsigned int a0, char *a1, char *a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3[6];  // [bp-0x10]\n
    unsigned int v4[6];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 && a2)\n
    {\n
        v3[0] = cgc_calloc(24, 1);\n
        if (!v3)\n
        {\n
            v6 = v2;\n
            v0 = v6 - 8260;\n
            v1 = 57;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v6 - 8235);\n
        }\n
        if (v5)\n
            v3[4] = v5;\n
        if (a0)\n
            v3[5] = a0;\n
        v3[0] = cgc_strlen(a1);\n
        v3[2] = cgc_calloc(1, v3[0] + 1);\n
        if (v3[2])\n
        {\n
            cgc_strcpy(v3[2], a1);\n
        }\n
        else\n
        {\n
            v7 = v2;\n
            v0 = v7 - 8260;\n
            v1 = 66;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v7 - 8235);\n
        }\n
        v3[1] = cgc_strlen(a2);\n
        v3[3] = cgc_calloc(1, v3[1] + 1);\n
        if (v3[3])\n
        {\n
            cgc_strcpy(v3[3], a2);\n
        }\n
        else\n
        {\n
            v8 = v2;\n
            v0 = v8 - 8260;\n
            v1 = 73;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v8 - 8235);\n
        }\n
        v4 = v3;\n
        return v4;\n
    }\n
    v4[0] = 0;\n
    return v4;\n
}\n
", "4214159:sub_404d8f": null, "4214160:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_ins_tree(v2, v3);\n
    return;\n
}\n
", "4214192:cgc_ins_tree": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char *field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ins_tree(struct_0 *v3, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    else if (v3)\n
    {\n
        v1 = cgc_strcmp(v3->field_8, a0);\n
        if (v1 < 0)\n
        {\n
            v3->field_10 = cgc_ins_tree(v3->field_10, a0, a1);\n
        }\n
        else if (v1 > 0)\n
        {\n
            v3->field_14 = cgc_ins_tree(v3->field_14, a0, a1);\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_make_tree(0, 0, a0, a1);\n
        return v2;\n
    }\n
}\n
", "4214452:sub_404eb4": null, "4214464:cgc_find_tree": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char *field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_tree(struct_0 *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 && a0)\n
    {\n
        v1 = cgc_strcmp(v3->field_8, a0);\n
        if (!v1)\n
        {\n
            v2 = v3;\n
            return v2;\n
        }\n
        else if (v1 >= 0)\n
        {\n
            v2 = cgc_find_tree(v3->field_14, a0);\n
            return v2;\n
        }\n
        else\n
        {\n
            v2 = cgc_find_tree(v3->field_10, a0);\n
            return v2;\n
        }\n
    }\n
    v2[0] = 0;\n
    return v2;\n
}\n
", "4214650:sub_404f7a": null, "4214656:cgc_replace_node": "int cgc_replace_node(unsigned int v0[4], unsigned int a0[4])\n
{\n
    v0[3] = a0[3];\n
    v0[1] = a0[1];\n
    v0[2] = a0[2];\n
    v0[0] = a0[0];\n
    return v0;\n
}\n
", "4214713:sub_404fb9": null, "4214720:cgc_tree_min": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tree_min(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2->field_10)\n
    {\n
        v1 = v2;\n
        return v1;\n
    }\n
    v1 = cgc_tree_min(v2->field_10);\n
    return v1;\n
}\n
", "4214798:sub_40500e": null, "4214800:cgc_del_tree": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char *field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    void* field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_del_tree(struct_0 *v4, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_1 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v3[0] = 0;\n
        return v3;\n
    }\n
    else if (v4)\n
    {\n
        v2 = cgc_strcmp(v4->field_8, a0);\n
        if (v2 < 0)\n
        {\n
            v4->field_10 = cgc_del_tree(v4->field_10, a0);\n
            v3 = v4;\n
            return v3;\n
        }\n
        else if (v2 <= 0)\n
        {\n
            if (v4->field_10 && v4->field_14)\n
            {\n
                v1 = cgc_tree_min(v4->field_14);\n
                cgc_replace_node(v4, v1);\n
                v4->field_14 = cgc_del_tree(v4->field_14, v1->field_8);\n
                goto LABEL_405182;\n
            }\n
            if (!v4->field_10)\n
            {\n
                v4 = v4->field_14;\n
            }\n
            else if (!v4->field_14)\n
            {\n
                v4 = v4->field_10;\n
            }\n
LABEL_405182:\n
            v3 = v4;\n
            return v3;\n
        }\n
        else\n
        {\n
            v4->field_14 = cgc_del_tree(v4->field_14, a0);\n
            v3 = v4;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
}\n
", "4215190:sub_405196": null, "4215200:cgc_append_tree_val": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_append_tree_val(struct_0 *v4, char *a0)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5[4];  // eax\n
    unsigned int v6;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 && v4)\n
    {\n
        v5 = v4;\n
        v5[1] = cgc_strlen(a0) + v5[1];\n
        v4->field_c = cgc_realloc(v4->field_c, v4->field_4 + 1);\n
        if (!v4->field_c)\n
        {\n
            v6 = v2;\n
            v0 = v6 - 8224;\n
            v1 = 182;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v6 - 8235);\n
        }\n
        cgc_strcat(v4->field_c, a0);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4215434:sub_40528a": null, "4215440:cgc_update_tree_val": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c[2];\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_update_tree_val(struct_0 *v4, char *a0)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v6;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    cgc_free(v4->field_c);\n
    v4->field_c = cgc_calloc(1, cgc_strlen(a0) + 1);\n
    if (!v4->field_c)\n
    {\n
        v6 = v2;\n
        v0 = v6 - 8260;\n
        v1 = 195;\n
        cgc_fdprintf(2, v0);\n
        cgc_exit(1, v0, v6 - 8235);\n
    }\n
    cgc_strcpy(v4->field_c, a0);\n
    v4->field_4 = cgc_strlen(a0);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4215684:sub_405384": null, "4215696:cgc_read_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_command(unsigned int v7)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_read_n_bytes(v7, 4, &v4) < 0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!cgc_strncmp(v2 - 8198, &v4, 4))\n
        cgc_exit();\n
    if (*(&v4) <= 0x4000 && *(&v4) >= 0)\n
    {\n
        v3[0] = cgc_calloc(1, *(&v4));\n
        if (!v3)\n
        {\n
            v9 = v2;\n
            v0 = v9 - 8260;\n
            v1 = 216;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v9 - 8235);\n
        }\n
        if (cgc_read_n_bytes(v7, *(&v4), v3) == *(&v4))\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
        cgc_free(v3);\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4216032:cgc_unserialize_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_unserialize_command(unsigned int v7)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    char **v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5[2];  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5[0] = cgc_calloc(16, 1);\n
    if (!v5)\n
    {\n
        v9 = v2;\n
        v0 = v9 - 8260;\n
        v1 = 231;\n
        cgc_fdprintf(2, v0);\n
        cgc_exit(1, v0, v9 - 8235);\n
    }\n
    v4 = v7;\n
    cgc_memcpy(&v5[1 + 1], v4, 4);\n
    v4 += 4;\n
    cgc_memcpy(v5, v4, 4);\n
    v4 += 4;\n
    if (v5[0] > 0)\n
    {\n
        v5[1] = cgc_calloc(4, v5[0]);\n
        if (!v5[1])\n
        {\n
            v10 = v2;\n
            v0 = v10 - 8260;\n
            v1 = 245;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v10 - 8235);\n
        }\n
    }\n
    for (v3 = 0; v3 < v5[0]; v3 = v3 + 1)\n
    {\n
        *((v5[1] + v3 * 4)) = cgc_calloc(1, cgc_strlen(v4) + 1);\n
        if (!*((v5[1] + (v3 << 2))))\n
        {\n
            v12 = v2;\n
            v0 = v12 - 8260;\n
            v1 = 252;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v12 - 8235);\n
        }\n
        cgc_strcpy(*((v5[1] + v3 * 4)), v4);\n
        v4 = cgc_strlen(*((v5[1] + v3 * 4))) + 1 + v4;\n
    }\n
    v13 = v6;\n
    return v5;\n
}\n
", "4216586:sub_40570a": null, "4216592:cgc_handle_append": "typedef struct struct_4 {\n
    char padding_0[520];\n
    void* field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[520];\n
    unsigned int field_208;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char *field_4;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern void* groot;\n
\n
int cgc_handle_append(struct_3 *v8)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c]\n
    struct_4 *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    struct_0 *v10;  // ebx\n
\n
    v7 = v9;\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = v8->field_4->field_0;\n
    v5 = cgc_find_tree(groot, v6);\n
    if (v5)\n
    {\n
        cgc_append_tree_val(v5, v8->field_4->field_4);\n
    }\n
    else\n
    {\n
        cgc_ins_tree(v3->field_208, v6, v8->field_4->field_4);\n
        v5 = cgc_find_tree(v3->field_208, v6);\n
    }\n
    v4 = cgc_calloc(1, 32);\n
    if (!v4)\n
    {\n
        v10 = v3;\n
        v0 = &v10[15].padding_0[400];\n
        v1 = 278;\n
        cgc_fdprintf(2, v0);\n
        cgc_exit(1, v0, &v10[15].padding_0[375]);\n
    }\n
    v2 = v4;\n
    cgc_strlen(*((v5 + 12)));\n
    cgc_sprintf(v2, &v3[15].padding_0[333]);\n
    return v4;\n
}\n
", "4216912:cgc_handle_auth": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[132];\n
\n
int cgc_handle_auth(struct_0 *v4)\n
{\n
    unsigned int v0[132];  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6[132];  // eax\n
\n
    v3 = v5;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = v4->field_4->field_0;\n
    if (!cgc_strncmp(v1, &v0[15 + 67] + 2, cgc_strlen(\"password\")))\n
    {\n
        v6 = v0;\n
        v6[131] = 1;\n
        v2 = v6[92];\n
        return v2;\n
    }\n
    v2 = v0[91];\n
    return v2;\n
}\n
", "4217047:sub_4058d7": null, "4217056:cgc_handle_bitcount": "typedef struct struct_4 {\n
    char padding_0[520];\n
    void* field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[520];\n
    unsigned int field_208;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_handle_bitcount(struct_3 *v12)\n
{\n
    char *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x30]\n
    struct_4 *v2;  // [bp-0x2c]\n
    void* v3;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int *v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x18]\n
    char *v8;  // [bp-0x14]\n
    char *v9;  // [bp-0x10]\n
    void* v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    struct_2 *v14;  // ebx\n
\n
    v11 = v13;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v10 = 0;\n
    v9 = v12->field_4->field_0;\n
    v8 = cgc_calloc(1, 32);\n
    v7 = cgc_find_tree(v2->field_208, v9);\n
    if (v7)\n
    {\n
        for (v6 = &v7->field_c->field_0; cgc_strlen(v6) >= 4; v6 += 1)\n
        {\n
            v10 = (((*(v6) - (*(v6) / 2 & 1431655765) & 858993459) + (*(v6) - (*(v6) / 2 & 1431655765) >> 2 & 858993459) + ((*(v6) - (*(v6) / 2 & 1431655765) & 858993459) + (*(v6) - (*(v6) / 2 & 1431655765) >> 2 & 858993459) >> 4) & 252645135) * 16843009 >> 24) + v10;\n
        }\n
        if (cgc_strlen(v6) > 0)\n
        {\n
            v5 = cgc_strlen(v6);\n
            v4 = 0;\n
            for (v3 = 0; v3 < v5; v3 += 1)\n
            {\n
                v4 = 255 << (v3 * 8 & 31) | v4;\n
            }\n
            v10 = ((((*(v6) & v4) - ((*(v6) & v4) / 2 & 1431655765) & 858993459) + ((*(v6) & v4) - ((*(v6) & v4) / 2 & 1431655765) >> 2 & 858993459) + (((*(v6) & v4) - ((*(v6) & v4) / 2 & 1431655765) & 858993459) + ((*(v6) & v4) - ((*(v6) & v4) / 2 & 1431655765) >> 2 & 858993459) >> 4) & 252645135) * 16843009 >> 24) + v10;\n
        }\n
    }\n
    if (!v8)\n
    {\n
        v14 = v2;\n
        v0 = &v14[15].padding_0[400];\n
        v1 = 320;\n
        cgc_fdprintf(2, v0);\n
        cgc_exit(1, v0, &v14[15].padding_0[375]);\n
    }\n
    cgc_sprintf(v8, &v2[15].padding_0[333]);\n
    return v8;\n
}\n
", "4217547:sub_405acb": null, "4217552:cgc_safe_str_index": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_safe_str_index(char *v3, unsigned int a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = a1;\n
        return v2;\n
    }\n
    v1 = cgc_strlen(v3);\n
    if (a0 >= v1)\n
    {\n
        v2 = a1;\n
        return v2;\n
    }\n
    v2 = v3[a0];\n
    return v2;\n
}\n
", "4217666:sub_405b42": null, "4217680:cgc_handle_bitop": "typedef struct struct_2 {\n
    char padding_0[372];\n
    unsigned int field_174;\n
    unsigned int field_178;\n
    char padding_17c[140];\n
    void* field_208;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_4 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char *field_0;\n
    char *field_4;\n
    char *field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[131];\n
\n
int cgc_handle_bitop()\n
{\n
    char *v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    unsigned int v4;  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x44]\n
    struct_2 *v6;  // [bp-0x40]\n
    char *v10;  // [bp-0x20]\n
    unsigned int v11;  // [bp-0x1c]\n
    void* v12;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0xc]\n
    unsigned int v16;  // [bp-0x8]\n
    struct_3 *v18;  // [bp+0x4]\n
    unsigned int v32;  // ebx\n
    unsigned int v64[131];  // ebx\n
\n
    v16 = v32;\n
    v6 = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (!cgc_strcasecmp(v18->field_4->field_0, \"and\"))\n
    {\n
        v14 = 0;\n
    }\n
    else if (!cgc_strcasecmp(v18->field_4->field_0, &v6[15].padding_0[230]))\n
    {\n
        v14 = 1;\n
    }\n
    else if (!cgc_strcasecmp(v18->field_4->field_0, &v6[15].padding_0[317]))\n
    {\n
        v14 = 2;\n
    }\n
    else\n
    {\n
        if (cgc_strcasecmp(v18->field_4->field_0, &v6[15].padding_0[313]))\n
        {\n
            v15 = v6->field_174;\n
            return;\n
        }\n
        v14 = 3;\n
    }\n
    if (!cgc_find_tree(v6->field_208, v18->field_4->field_4))\n
        v13 = 0;\n
    else\n
        v13 = *((cgc_find_tree(v6->field_208, v18->field_4->field_4) + 12));\n
    if (!cgc_find_tree(v6->field_208, v18->field_4->field_8))\n
        v12 = 0;\n
    else\n
        v12 = *((cgc_find_tree(v6->field_208, v18->field_4->field_8) + 12));\n
    if (v13 && v12)\n
    {\n
        v5 = cgc_strlen(v13);\n
        if (v5 <= cgc_strlen(v12))\n
            v4 = cgc_strlen(v12);\n
        else\n
            v4 = cgc_strlen(v13);\n
        v11 = v4;\n
        v10 = cgc_calloc(1, v11 + 1);\n
        if (!v10)\n
        {\n
            v64 = v6;\n
            v0 = &v64[15 + 100];\n
            v1 = 375;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, (&v64[15 + 93] + 3));\n
        }\n
        v3 = cgc_strlen(v13);\n
        if (v3 <= cgc_strlen(v12))\n
            cgc_strcpy(v10, v12);\n
        else\n
            cgc_strcpy(v10, v13);\n
        v2 = v14;\n
        if (!(v2 <= 3))\n
            goto LABEL_0x406028;\n
        goto *(((stack_base)[64] + (stack_base)[80] * 4 - 8400)) + (stack_base)[64];\n
    }\n
    v15 = v6->field_178;\n
    return;\n
}\n
", "4219202:sub_406142": null, "4219216:cgc_handle_cr": "typedef struct struct_1 {\n
    char padding_0[520];\n
    void* field_208;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_4 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    char field_c[2];\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
} struct_4;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
extern void* groot;\n
\n
int cgc_handle_cr(struct_3 *v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    struct_1 *v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x34]\n
    struct_0 *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    struct_1 *v10;  // ebx\n
    unsigned int v11;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v8->field_4->field_0;\n
    v4 = cgc_find_tree(groot, v5);\n
    if (!v4)\n
    {\n
        v10 = v1;\n
        cgc_ins_tree(v10->field_208, v5, &v10[15].padding_0[302]);\n
        v4 = cgc_find_tree(v1->field_208, v5);\n
    }\n
    v6 = cgc_strtol(*((v4 + 12)), NULL, 10);\n
    v6 = a0 + v6;\n
    cgc_memset(&v3, 0, 32);\n
    cgc_sprintf(&v3, &v1[15].padding_0[333]);\n
    cgc_update_tree_val(v4, &v3);\n
    v0 = cgc_strlen(&v3);\n
    v2 = cgc_calloc(1, v0 + cgc_strlen(&v1[15].padding_0[300]) + 1);\n
    cgc_strcat(v2, &v1[15].padding_0[300]);\n
    cgc_strcat(v2, &v3);\n
    v11 = v7;\n
    return v2;\n
}\n
", "4219601:sub_4062d1": null, "4219616:cgc_handle_del": "typedef struct struct_0 {\n
    char padding_0[376];\n
    unsigned int field_178;\n
    unsigned int field_17c;\n
    char padding_180[136];\n
    void* field_208;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[131];\n
extern void* groot;\n
\n
int cgc_handle_del(struct_1 *v5)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v2 = v5->field_4->field_0;\n
    v1 = cgc_find_tree(groot, v2);\n
    if (!v1)\n
    {\n
        v3 = v0->field_178;\n
        return v3;\n
    }\n
    cgc_del_tree(v0->field_208, v2);\n
    v3 = v0->field_17c;\n
    return v3;\n
}\n
", "4219748:sub_406364": null, "4219760:cgc_handle_exists": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[96];\n
extern void* groot;\n
\n
int cgc_handle_exists(struct_0 *v5)\n
{\n
    unsigned int v0[96];  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v2 = v5->field_4->field_0;\n
    v1 = cgc_find_tree(groot, v2);\n
    if (!v1)\n
    {\n
        v3 = v0[94];\n
        return v3;\n
    }\n
    v3 = v0[95];\n
    return v3;\n
}\n
", "4219868:sub_4063dc": null, "4219872:cgc_handle_get": "typedef struct struct_0 {\n
    char padding_0[384];\n
    unsigned int field_180;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern void* groot;\n
\n
int cgc_handle_get(struct_1 *v8)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18]\n
    struct_3 *v4;  // [bp-0x14]\n
    char *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    struct_0 *v11;  // ebx\n
\n
    v7 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v8->field_4->field_0;\n
    v4 = cgc_find_tree(groot, v5);\n
    if (!v4)\n
    {\n
        v6 = v2->field_180;\n
        return v6;\n
    }\n
    v3 = cgc_calloc(1, cgc_strlen(v4->field_c) + 12);\n
    if (!v3)\n
    {\n
        v11 = v2;\n
        v0 = &v11[21].padding_0[112];\n
        v1 = 481;\n
        cgc_fdprintf(2, v0);\n
        cgc_exit(1, v0, &v11[21].padding_0[87]);\n
    }\n
    cgc_sprintf(v3, &v2[21].padding_0[4]);\n
    v6 = v3;\n
    return v6;\n
}\n
", "4220118:sub_4064d6": null, "4220128:cgc_size_tree": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_size_tree(unsigned int v3[6])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_size_tree(v3[4]) + 1;\n
    v2 = v0 + cgc_size_tree(v3[5]);\n
    return v2;\n
}\n
", "4220234:sub_40654a": null, "4220240:cgc_preorder_walk": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char *field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_preorder_walk(struct_0 *v5, unsigned int *a0[2], unsigned int a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v7;  // ebx\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
        return v5;\n
    cgc_preorder_walk(v5->field_10, a0, a1);\n
    if (!(v5->field_8 && cgc_strlen(v5->field_8)))\n
        return cgc_preorder_walk(v5->field_14, a0, a1);\n
    v3 = cgc_strlen(*(a0));\n
    if (v3 + cgc_strlen(v5->field_8) + 4 >= a1)\n
    {\n
        v2 = cgc_strlen(*(a0));\n
        a1 = v2 + cgc_strlen(v5->field_8) + 4;\n
        *(a0) = cgc_realloc(*(a0), a1);\n
        if (!*(a0))\n
        {\n
            v7 = v4;\n
            v0 = v7 - 8224;\n
            v1 = 513;\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, v7 - 8235);\n
        }\n
    }\n
    cgc_strcat(*(a0), v4 - 8142);\n
    cgc_strcat(*(a0), v5->field_8);\n
    cgc_strcat(*(a0), v4 - 8142);\n
    cgc_strcat(*(a0), v4 - 8154);\n
}\n
", "4220706:sub_406722": null, "4220720:cgc_handle_keys": "typedef struct struct_1 {\n
    char padding_0[520];\n
    void* field_208;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_handle_keys(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x14]\n
    unsigned int v1[2];  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1[0] = cgc_calloc(1, 0x400);\n
    cgc_preorder_walk(v0->field_208, v1, 0x400);\n
    if (!cgc_strlen(v1))\n
    {\n
        v2 = &v0[15].padding_0[280];\n
        return v2;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4220855:sub_4067b7": null, "4220864:cgc_handle_rename": "typedef struct struct_4 {\n
    char padding_0[376];\n
    unsigned int field_178;\n
    unsigned int field_17c;\n
    char padding_180[136];\n
    void* field_208;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    char *field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    char *field_8;\n
    unsigned int field_c[2];\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    char *field_4;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[131];\n
extern void* groot;\n
\n
int cgc_handle_rename(struct_0 *v6)\n
{\n
    struct_4 *v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    struct_3 *v2;  // [bp-0x14], Other Possible Types: void*\n
    struct_2 *v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v3 = cgc_find_tree(groot, v6->field_4->field_0);\n
    v2 = cgc_find_tree(v0->field_208, v6->field_4->field_4);\n
    if (!v3)\n
    {\n
        v4 = v0->field_178;\n
        return v4;\n
    }\n
    v1 = v3->field_c;\n
    if (v3 == v2)\n
    {\n
        v4 = v0->field_178;\n
        return v4;\n
    }\n
    if (v2)\n
    {\n
        cgc_del_tree(v0->field_208, v2->field_8);\n
        cgc_free(v2->field_c);\n
        cgc_free(v2->field_8);\n
        cgc_free(v2);\n
        v2 = 0;\n
    }\n
    cgc_ins_tree(v0->field_208, v6->field_4->field_4, v1);\n
    if (v3)\n
        cgc_del_tree(v0->field_208, v3->field_8);\n
    v4 = v0->field_17c;\n
    return v4;\n
}\n
", "4221203:sub_406913": null, "4221216:cgc_handle_set": "typedef struct struct_0 {\n
    char padding_0[376];\n
    unsigned int field_178;\n
    unsigned int field_17c;\n
    char padding_180[136];\n
    void* field_208;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char *field_0;\n
    char *field_4;\n
} struct_2;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[131];\n
extern void* groot;\n
\n
int cgc_handle_set(struct_1 *v4)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_find_tree(groot, v4->field_4->field_0);\n
    if (v1)\n
    {\n
        v2 = v0->field_178;\n
        return v2;\n
    }\n
    cgc_ins_tree(v0->field_208, v4->field_4->field_0, v4->field_4->field_4);\n
    v2 = v0->field_17c;\n
    return v2;\n
}\n
", "4221360:cgc_call_command": "typedef struct struct_0 {\n
    char padding_0[372];\n
    unsigned int field_174;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_call_command()\n
{\n
    unsigned int v3;  // [bp+0x0]\n
    unsigned int v6;  // [bp+0xffffc]\n
    void* v7;  // [bp+0x10000c]\n
\n
    v3 = v7;\n
    v6 = cgc_handle_set(v7);\n
    return;\n
}\n
", "4221726:sub_406b1e": null, "4221728:main": "extern unsigned int _GLOBAL_OFFSET_TABLE_[132];\n
extern char g_4071ac;\n
\n
int main(unsigned int v13, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2[132];  // [bp-0x30]\n
    unsigned int v3[2];  // [bp-0x2c]\n
    void* v4;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v5[4];  // [bp-0x24]\n
    unsigned int v6[2];  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int v10;  // [bp-0x10]\n
    void* v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15[132];  // ebx\n
    unsigned int v16[132];  // ebx\n
    unsigned int v17[132];  // ebx\n
\n
    v12 = v14;\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v11 = 0;\n
    v10 = 4;\n
    v9 = 5;\n
    v7 = 1;\n
    v8 = 0;\n
    v2[130] = cgc_make_tree(0, 0, &g_4071ac, &g_4071ac);\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                do\n
                {\n
                    v6[0] = cgc_read_command(v10);\n
                } while (!v6);\n
                v5[0] = cgc_unserialize_command(v6);\n
                if (v5)\n
                    break;\n
                cgc_free(v6);\n
            }\n
            for (v4 = 0; v4 < 12; v4 += 1)\n
            {\n
                if (*((184 + &v2[0] + 0x10 * v4)) == v5[3] && *((172 + &v2[0] + 0x10 * v4)) == v5[0])\n
                    break;\n
            }\n
            if (v4 != 12)\n
                break;\n
            cgc_free(v6);\n
            cgc_free(v5);\n
        }\n
        if (v5[3] != 3735879682 && !v2[131])\n
        {\n
            if (cgc_transmit_string(v9, &v2[15 + 53] + 2))\n
            {\n
                v15 = v2;\n
                v0 = &v15[15 + 51];\n
                cgc_fdprintf(2, v0);\n
                cgc_exit(1, v0, (&v15[15 + 78] + 3));\n
            }\n
            continue;\n
        }\n
        v3[0] = cgc_call_command();\n
        if (cgc_transmit_string(v9, v3))\n
        {\n
            v16 = v2;\n
            v0 = &v16[15 + 51];\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, (&v16[15 + 78] + 3));\n
        }\n
        if (cgc_transmit_string(v9, &v2[15 + 79] + 1))\n
        {\n
            v17 = v2;\n
            v0 = &v17[15 + 51];\n
            cgc_fdprintf(2, v0);\n
            cgc_exit(1, v0, (&v17[15 + 78] + 3));\n
        }\n
        v1 = v5[3];\n
        if (v1 != 3735879681 && v1 + 559087613 >= 2 && !(v1 + 559087607 <= 2))\n
            goto LABEL_406e57;\n
        if (v3 == v2[93])\n
        {\n
LABEL_406e3f:\n
            goto LABEL_406e5c;\n
        }\n
        else\n
        {\n
            if (v3 == v2[95])\n
                goto LABEL_406e3f;\n
            if (v3 == v2[94])\n
                goto LABEL_406e3f;\n
            if (v3 == v2[96])\n
                goto LABEL_406e3f;\n
            cgc_free(v3);\n
LABEL_406e57:\n
LABEL_406e5c:\n
            cgc_free(v6);\n
            cgc_free_command(v5);\n
        }\n
    }\n
}\n
", "4222592:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}