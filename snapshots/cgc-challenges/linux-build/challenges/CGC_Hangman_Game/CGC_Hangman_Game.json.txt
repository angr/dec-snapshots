{"7528448:_init": "extern struct_0 *g_aac300;\n
\n
int _init()\n
{\n
    if (g_aac300)\n
    {\n
        g_aac300();\n
        return;\n
    }\n
    return;\n
}\n
", "7528496:sub_72e030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_72e030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "7528512:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "7528528:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "7528544:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "7528560:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "7528576:sub_72e080": "int sub_72e080()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "7528582:sub_72e086": null, "7528592:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "7528635:sub_72e0bb": null, "7528636:sub_72e0bc": "int sub_72e0bc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "7528640:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "7528644:sub_72e0c4": null, "7528656:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 3662391;\n
    v6 = v5 + 419018;\n
    v7 = v5 + 419018;\n
    if (v7 == v6)\n
        return v5 + 419018;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "7528707:sub_72e103": "int sub_72e103()\n
{\n
}\n
", "7528713:sub_72e109": "int sub_72e109()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "7528720:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 3662327;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 419018;\n
    v9 = (v6 + 419018 - (v6 + 419018) >> 31) + (419018 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "7528791:sub_72e157": "int sub_72e157()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "7528800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_aac2fc;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_aac2fc)\n
    {\n
        v0 = __dso_handle;\n
        sub_72e080();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "7528875:sub_72e1ab": "int sub_72e1ab()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "7528880:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "7528889:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "7528893:sub_72e1bd": null, "7528896:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 7);\n
}\n
", "7528947:sub_72e1f3": null, "7528960:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 6);\n
}\n
", "7529011:sub_72e233": null, "7529024:cgc_isascii": "int cgc_isascii(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 0)\n
        v1 = v2 < 128;\n
    return v1 & 1;\n
}\n
", "7529072:cgc_isblank": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isblank(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 64);\n
}\n
", "7529123:sub_72e2a3": null, "7529136:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 32);\n
}\n
", "7529187:sub_72e2e3": null, "7529200:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 1);\n
}\n
", "7529251:sub_72e323": null, "7529264:cgc_isgraph": "int cgc_isgraph(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 > 32)\n
        v1 = v2 <= 126;\n
    return v1 & 1;\n
}\n
", "7529309:sub_72e35d": null, "7529312:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 4);\n
}\n
", "7529363:sub_72e393": null, "7529376:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 <= 126;\n
    return v1 & 1;\n
}\n
", "7529421:sub_72e3cd": null, "7529424:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (cgc_isprint(v3))\n
    {\n
        v1 = !(*((v0 + v3 + 12384)) & 15);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "7529522:sub_72e432": null, "7529536:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 8);\n
}\n
", "7529587:sub_72e473": null, "7529600:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 2);\n
}\n
", "7529651:sub_72e4b3": null, "7529664:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return ((&_GLOBAL_OFFSET_TABLE_)[12384 + v0] & 16);\n
}\n
", "7529715:sub_72e4f3": null, "7529728:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & -33;\n
    return v0;\n
}\n
", "7529799:sub_72e547": null, "7529808:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "7529879:sub_72e597": null, "7529888:cgc_transmit_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    if (!a1)\n
    {\n
        v5 = 2;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 < a1)\n
        {\n
            v0 = &v3;\n
            v2 = cgc_transmit(v6, v4 + a0, a1 - v4);\n
            if (v2)\n
            {\n
                v5 = 3;\n
                return v5;\n
            }\n
            v4 = v3 + v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "7530092:sub_72e66c": null, "7530096:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "7530224:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    int tmp_22;  // tmp #22\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // ecx\n
\n
    v0 = v2;\n
    v0 = v1;\n
    do\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_22 = *(v3);\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = *(v3);\n
    } while (tmp_22);\n
    return v1;\n
}\n
", "7530291:sub_72e733": null, "7530304:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "7530360:sub_72e778": null, "7530368:cgc_strchr": "int cgc_strchr(char *v3, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x5]\n
\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v3))\n
            v2 = *(v3) != a0;\n
        if (!(v2 & 1))\n
            break;\n
        v3 += 1;\n
    }\n
    if (*(v3))\n
    {\n
        v1 = v3;\n
        return v1;\n
    }\n
    if (a0)\n
        v0 = 0;\n
    else\n
        v0 = v3;\n
    v1 = v0;\n
    return v1;\n
}\n
", "7530511:sub_72e80f": null, "7530512:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = v1;\n
    return cgc_vprintf(v2);\n
}\n
", "7530564:sub_72e844": null, "7530576:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "7530635:sub_72e88b": null, "7530640:cgc_vfprintf": "int cgc_vfprintf(unsigned int *v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a1;\n
    return cgc_vdprintf(*(v1), a0);\n
}\n
", "7530701:sub_72e8cd": null, "7530704:cgc_vdprintf": "int cgc_vdprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x101c]\n
    void* v1;  // [bp-0x1014]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // esi\n
\n
    v2 = v4;\n
    v1 = 0;\n
    cgc_printf_core(cgc_fd_printer, &v0, a0, a1, v3, 0);\n
    return v1;\n
}\n
", "7530819:sub_72e943": null, "7530832:cgc_printf_core": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_core(struct struct_0 **v9, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    void* v0;  // [bp-0xd4], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    unsigned int v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x24]\n
    char v5;  // [bp-0x1d]\n
    void* v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v10;  // eax\n
    char *v11;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = a2;\n
    v10 = a1;\n
    a1 = v10 + 1;\n
    for (v5 = *(v10); v5; v5 = *(v11))\n
    {\n
        v1 = v8;\n
        if (v1 <= 15)\n
        {\n
            if (v5 == 37)\n
            {\n
                v8 = 2;\n
            }\n
            else if (v5 == 92)\n
            {\n
                v8 = 1;\n
            }\n
            else\n
            {\n
                v0 = 0;\n
                v9(v5, a0);\n
            }\n
        }\n
        v11 = a1;\n
        a1 = v11 + 1;\n
    }\n
    v0 = 2;\n
    return v9(0, a0);\n
}\n
", "7531071:sub_72ea3f": "int sub_72ea3f()\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_7;  // tmp #7\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0xc]\n
    struct struct_0 **v6;  // [bp+0x8], Other Possible Types: void*\n
    char v7;  // [bp+0xc]\n
    char v8;  // [bp+0x10]\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    struct struct_0 **v17;  // eax\n
\n
    v15 = v0 - 34;\n
    tmp_7 = v15;\n
    v16 = v15 - 86;\n
    if (tmp_7 <= 86)\n
        goto *(((stack_base)[152] + eax<4> * 4 - 3645668)) + (stack_base)[152];\n
    if (v0 > 48 && v0 < 56)\n
    {\n
        v3 = 3;\n
        v2 = 1;\n
        v1 = v0 - 48;\n
        goto LABEL_72ebfe;\n
    }\n
    v17 = v6;\n
    v6 = 0;\n
    v17(*(*(&v8)), *(&v7));\n
LABEL_72ebfe:\n
}\n
", "7531545:sub_72ec19": "int sub_72ec19()\n
{\n
    char v0;  // [bp-0x19]\n
    void* v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v4;  // [bp+0x8], Other Possible Types: char\n
    char v5;  // [bp+0xc]\n
    char v6;  // [bp+0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // eax\n
\n
    if (v0 != 37)\n
    {\n
        v2 = 15;\n
        v1 = 0;\n
        v6 = *(&v6) - 1;\n
    }\n
    else\n
    {\n
        v7 = *(&v4);\n
        v4 = 0;\n
        v7(v0, *(&v5));\n
        v2 = 0;\n
    }\n
}\n
", "7531635:sub_72ec73": "int sub_72ec73()\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned int v1;  // [bp-0x18], Other Possible Types: char\n
    char v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc]\n
    struct struct_0 **v5;  // [bp+0x8], Other Possible Types: void*, char\n
    char v6;  // [bp+0xc]\n
    char v7;  // [bp+0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // eax\n
    struct struct_0 **v9;  // eax\n
\n
    if (v0 > 48 && v0 < 56 && *(&v2) < 3)\n
    {\n
        v2 = *(&v2) + 1;\n
        v1 = *(&v1) * 8 + v0 - 48;\n
        if (v2 == 3)\n
        {\n
            v9 = v5;\n
            v5 = 0;\n
            v9(v1, *(&v6));\n
            v3 = 0;\n
        }\n
        goto LABEL_72ed26;\n
    }\n
    v8 = *(&v5);\n
    v5 = 0;\n
    v8(v1, *(&v6));\n
    v3 = 0;\n
    v7 = *(&v7) - 1;\n
LABEL_72ed26:\n
}\n
", "7531819:sub_72ed2b": "int sub_72ed2b()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    char v1;  // [bp-0x19]\n
    char v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14], Other Possible Types: char\n
    void* v4;  // [bp-0xc]\n
    void* v6;  // [bp+0x8], Other Possible Types: char, struct struct_0 **\n
    char v7;  // [bp+0xc]\n
    char v8;  // [bp+0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    struct struct_0 **v10;  // eax\n
\n
    if (cgc_isxdigit(v1) && *(&v3) < 2)\n
    {\n
        v3 = *(&v3) + 1;\n
        v0 = *(&v2) * 16;\n
        v2 = v0 + cgc_hex_value_of();\n
        if (v3 == 2)\n
        {\n
            v10 = v6;\n
            v6 = 0;\n
            v10(v2, *(&v7));\n
            v4 = 0;\n
        }\n
        goto LABEL_72edf8;\n
    }\n
    v9 = *(&v6);\n
    v6 = 0;\n
    v9(*(&v2), *(&v7));\n
    v4 = 0;\n
    v8 = *(&v8) - 1;\n
LABEL_72edf8:\n
}\n
", "7532029:sub_72edfd": "int sub_72edfd()\n
{\n
    void* v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x19]\n
    void* v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    char *v8;  // [bp+0x10], Other Possible Types: char, unsigned int\n
    char *v9;  // eax\n
\n
    v3 = -1;\n
    v2 = -1;\n
    v5 = 0;\n
    v0 = 0;\n
    v1 = -1;\n
    if (v4 == 48)\n
    {\n
        v8 = *(&v8) - 1;\n
        v6 = 5;\n
    }\n
    else if (!cgc_isdigit(v4))\n
    {\n
        v8 = *(&v8) - 1;\n
        v6 = 5;\n
    }\n
    else\n
    {\n
        for (v3 = 0; cgc_isdigit(v4); v4 = *(v9))\n
        {\n
            v3 = v3 * 10 + v4 - 48;\n
            v9 = v8;\n
            v8 = v9 + 1;\n
        }\n
        if (v4 == 36)\n
        {\n
            v1 = v3 - 1;\n
            v3 = 0;\n
            v6 = 5;\n
        }\n
        else\n
        {\n
            v8 = *(&v8) - 1;\n
            v6 = 7;\n
        }\n
    }\n
}\n
", "7532279:sub_72eef7": "int sub_72eef7()\n
{\n
}\n
", "7532453:sub_72efa5": "int sub_72efa5()\n
{\n
    unsigned int *v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x34]\n
    void* v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    char v4;  // [bp-0x19]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // [bp+0x10], Other Possible Types: unsigned int, char\n
    char *v8;  // eax\n
    char *v9;  // eax\n
    unsigned int *v10;  // eax\n
    char *v11;  // eax\n
\n
    if (v4 == 42)\n
    {\n
        v8 = *(&v7);\n
        v7 = v8 + 1;\n
        v4 = *(v8);\n
        if (!cgc_isdigit(v4))\n
        {\n
            v10 = *(&v3);\n
            v3 = v10 + 1;\n
            v0 = v10;\n
            v7 += 1;\n
        }\n
        else\n
        {\n
            for (v0 = 0; cgc_isdigit(v4); v4 = *(v9))\n
            {\n
                v0 = v0 * 10 + v4 - 48;\n
                v9 = v7;\n
                v7 = v9 + 1;\n
            }\n
            v0 -= 1;\n
            if ((Not (Not (Load(addr=stack_base-25, size=1, endness=Iend_LE) == 0x24<8>)))) { Goto None } else { Goto None }\n
        }\n
        v2 = *((*(&v1) + v0 * 4));\n
    }\n
    else if (!cgc_isdigit(v4))\n
    {\n
        v7 += 1;\n
    }\n
    else\n
    {\n
        for (v2 = 0; cgc_isdigit(v4); v4 = *(v11))\n
        {\n
            v2 = v2 * 10 + v4 - 48;\n
            v11 = v7;\n
            v7 = v11 + 1;\n
        }\n
        v7 += 1;\n
    }\n
    v5 = 7;\n
}\n
", "7532795:sub_72f0fb": "int sub_72f0fb()\n
{\n
    unsigned int *v0;  // [bp-0x3c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x34]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    char v4;  // [bp-0x19]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // [bp+0x10], Other Possible Types: unsigned int, char\n
    char *v8;  // eax\n
    char *v9;  // eax\n
    char *v10;  // eax\n
    unsigned int *v11;  // eax\n
    char *v12;  // eax\n
\n
    if (v4 != 46)\n
    {\n
        v7 += 1;\n
    }\n
    else\n
    {\n
        v8 = *(&v7);\n
        v7 = v8 + 1;\n
        v4 = *(v8);\n
        if (v4 == 42)\n
        {\n
            v9 = v7;\n
            v7 = v9 + 1;\n
            v4 = *(v9);\n
            if (!cgc_isdigit(v4))\n
            {\n
                v11 = *(&v3);\n
                v3 = v11 + 1;\n
                v0 = v11;\n
                v7 += 1;\n
            }\n
            else\n
            {\n
                for (v0 = 0; cgc_isdigit(v4); v4 = *(v10))\n
                {\n
                    v0 = v0 * 10 + v4 - 48;\n
                    v10 = v7;\n
                    v7 = v10 + 1;\n
                }\n
                v0 -= 1;\n
                if ((Not (Not (Load(addr=stack_base-25, size=1, endness=Iend_LE) == 0x24<8>)))) { Goto None } else { Goto None }\n
            }\n
            v2 = *((*(&v1) + v0 * 4));\n
        }\n
        else if (!cgc_isdigit(v4))\n
        {\n
            v7 += 1;\n
        }\n
        else\n
        {\n
            for (v2 = 0; cgc_isdigit(v4); v4 = *(v12))\n
            {\n
                v2 = v2 * 10 + v4 - 48;\n
                v12 = v7;\n
                v7 = v12 + 1;\n
            }\n
            v7 += 1;\n
        }\n
    }\n
    v5 = 8;\n
}\n
", "7533180:sub_72f27c": "int sub_72f27c()\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_7;  // tmp #7\n
    unsigned int v3;  // [bp+0x10], Other Possible Types: char\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v6 = v0 - 76;\n
    tmp_7 = v6;\n
    v7 = v6 - 46;\n
    if (tmp_7 > 46)\n
        v3 = *(&v3) - 1;\n
    else\n
        goto *(((stack_base)[152] + eax<4> * 4 - 3645924)) + (stack_base)[152];\n
}\n
", "7533375:sub_72f33f": "int sub_72f33f()\n
{\n
    unsigned int v0;  // [bp-0xb0]\n
    unsigned int v1;  // [bp-0x64]\n
    char v2;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x19]\n
    unsigned int v44;  // eax\n
\n
    v1 = 1;\n
    if (*(&v2) == -1)\n
    {\n
        v44 = *(&v3);\n
        v3 = v44 + 1;\n
        v2 = v44;\n
    }\n
    v0 = v4 - 65;\n
    if (!(v0 <= 55))\n
        goto LABEL_0x730ac3;\n
    goto *(((stack_base)[152] + (stack_base)[176] * 4 - 3646148)) + (stack_base)[152];\n
}\n
", "7539473:sub_730b11": null, "7539488:cgc_fd_printer": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fd_printer(char v4, unsigned int a0[3], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2[3];  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // esi\n
    unsigned int v6;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = a0;\n
    if (!a1)\n
    {\n
        v5 = v2;\n
        v6 = v5[2];\n
        v5[2] = v6 + 1;\n
        *(12 + &v2[0] + (v6 & 4095)) = v4;\n
        if (!(v2[2] & 4095) && cgc_transmit_all(v2[0], &v4, 0x1000))\n
            cgc__terminate();\n
    }\n
    else if (a1 == 1)\n
    {\n
        v3 = v2[2];\n
        return v3;\n
    }\n
    else if (a1 == 2)\n
    {\n
        v1 = v2[2] & 4095;\n
        if (v1 && cgc_transmit_all(v2[0], v2 + 1, v1))\n
            cgc__terminate();\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "7539805:sub_730c5d": null, "7539808:cgc_fgetc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgetc(unsigned int v3[4])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v4[4];  // edx\n
    unsigned int v5;  // ecx\n
    unsigned int v6[4];  // eax\n
    unsigned int v7[4];  // eax\n
    unsigned int v8[4];  // edx\n
    unsigned int v9;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3[3] < v3[2])\n
    {\n
        v4 = v3;\n
        v5 = v4[3];\n
        v4[3] = v5 + 1;\n
        v2 = *(16 + &v3[0] + v5);\n
        return v2;\n
    }\n
    v3[2] = 0;\n
    v3[3] = 0;\n
    v0 = &v3[2];\n
    if (cgc_receive(v3[0], v3 + 1, 0x1000))\n
    {\n
        v6 = v3;\n
        v6[1] = v6[1] | 2;\n
        v2 = -1;\n
        return v2;\n
    }\n
    else if (!v3[2])\n
    {\n
        v7 = v3;\n
        v7[1] = v7[1] | 4;\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v8 = v3;\n
        v9 = v8[3];\n
        v8[3] = v9 + 1;\n
        v2 = *(16 + &v3[0] + v9);\n
        return v2;\n
    }\n
}\n
", "7540051:sub_730d53": null, "7540064:cgc_getc": "int cgc_getc(unsigned int v0[4])\n
{\n
    return cgc_fgetc(v0);\n
}\n
", "7540101:sub_730d85": null, "7540112:cgc_getchar": "extern unsigned int cgc_stdin[4];\n
\n
int cgc_getchar()\n
{\n
    return cgc_getc(cgc_stdin);\n
}\n
", "7540149:sub_730db5": null, "7540160:cgc_fgets": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgets(unsigned int v4, unsigned int a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a0 - 1)\n
        {\n
LABEL_730e74:\n
            *((v4 + v2)) = 0;\n
            v3 = v4;\n
            return v3;\n
        }\n
        v1 = cgc_fgetc(a1);\n
        if (v1 == -1)\n
        {\n
            if ((a1->field_4 & 4) && !(v2 <= 0))\n
                goto LABEL_730e74;\n
            v3 = 0;\n
            return v3;\n
        }\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        *((v4 + v5)) = v1;\n
        if (v1 == 10)\n
            goto LABEL_730e74;\n
    }\n
}\n
", "7540366:sub_730e8e": null, "7540368:cgc_fread": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2[4])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
    char *v7;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v4 = 0; v4 < a1; v4 += 1)\n
    {\n
        for (v3 = 0; v3 < a0; v3 += 1)\n
        {\n
            v1 = cgc_fgetc(a2);\n
            if (v1 == -1)\n
            {\n
                v5 = v4;\n
                return v5;\n
            }\n
            v7 = v2;\n
            v2 = v7 + 1;\n
            v7[v6] = v1;\n
        }\n
    }\n
    v5 = v4;\n
    return v5;\n
}\n
", "7540557:sub_730f4d": null, "7540560:cgc_hex_value_of": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_hex_value_of(char v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    else if (cgc_isalpha(v3))\n
    {\n
        v1 = cgc_toupper(v3) + -55;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
}\n
", "7540695:sub_730fd7": null, "7540704:cgc_r_utoa": "int cgc_r_utoa(unsigned int v2, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v1 = a0;\n
    for (*(v1) = 48; v2; v2 = (0 CONCAT v2) /m 10)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = ((0 CONCAT v2) /m 10 >> 32) + 48;\n
    }\n
    if (v1 == a0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 - 1;\n
    return v0;\n
}\n
", "7540828:sub_73105c": null, "7540832:cgc_r_otoa": "int cgc_r_otoa(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
\n
    v1 = v3;\n
    v0 = a0;\n
    return cgc_r_llotoa(v2, 0);\n
}\n
", "7540888:sub_731098": null, "7540896:cgc_r_xtoa": "int cgc_r_xtoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v0 = a1;\n
    return cgc_r_llxtoa(v3, 0, a0);\n
}\n
", "7540963:sub_7310e3": null, "7540976:cgc_r_llotoa": "int cgc_r_llotoa(unsigned int v2, unsigned int a0, char *a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v1 = a1;\n
    for (*(v1) = 48; !(!v2) || !(!a0); v2 = (v4 CONCAT v2) * 0x20000000 >> 32)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = v2 & 7 | 48;\n
        v4 = a0;\n
        a0 = v4 / 8;\n
    }\n
    if (v1 == a1)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 - 1;\n
    return v0;\n
}\n
", "7541110:sub_731176": null, "7541120:cgc_r_llxtoa": "int cgc_r_llxtoa(unsigned int v4, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    unsigned int v6;  // ecx\n
\n
    v3 = a1;\n
    for (*(v3) = 48; !(!v4) || !(!a0); v4 = (v6 CONCAT v4) * 0x10000000 >> 32)\n
    {\n
        v2 = v4 & 15;\n
        if (v2 < 10)\n
        {\n
            v2 += 48;\n
        }\n
        else\n
        {\n
            if (!a2)\n
                v1 = v2 - -87;\n
            else\n
                v1 = v2 - -55;\n
            v2 = v1;\n
        }\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = v2;\n
        v6 = a0;\n
        a0 = v6 / 16;\n
    }\n
    if (v3 == a1)\n
    {\n
        v0 = v3;\n
        return v0;\n
    }\n
    v0 = v3 - 1;\n
    return v0;\n
}\n
", "7541334:sub_731256": null, "7541344:cgc_clearBoard": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clearBoard()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v1 = 0; v1 < 7; v1 = v3)\n
    {\n
        v4 = v0;\n
        *((v4 + *((v4 + v1 * 4 + 12704)) + 12644)) = 32;\n
        v3 = v1 + 1;\n
    }\n
    return v3;\n
}\n
", "7541422:sub_7312ae": null, "7541424:cgc_reset": "typedef struct struct_0 {\n
    char padding_0[1676644];\n
    unsigned int field_199564;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_reset()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_clearBoard();\n
    for (v1 = 0; v1 < 26; v1 += 1)\n
    {\n
        v5 = v0;\n
        v5->padding_0[1676103 + v1] = v1 + 97;\n
        v5->padding_0[1676076 + v1] = 0;\n
    }\n
    v0->field_199564 = 0;\n
    v6 = v2;\n
    return v0;\n
}\n
", "7541533:sub_73131d": null, "7541536:cgc_addPart": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_addPart(unsigned int v0)\n
{\n
    (&_GLOBAL_OFFSET_TABLE_)[12644 + *(&(&_GLOBAL_OFFSET_TABLE_)[12704 + 4 * v0])] = (&_GLOBAL_OFFSET_TABLE_)[12732 + v0];\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "7541583:sub_73134f": null, "7541584:cgc_printBoard": "extern char gallows;\n
\n
int cgc_printBoard()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = \"   ---\\n
   | |\\n
     |\\n
     |\\n
     |\\n
     |\\n
 -----\\n
 |   |\\n
\";\n
    return cgc_printf(\"\\n
%s\\n
\");\n
}\n
", "7541633:sub_731381": null, "7541648:cgc_getWord": "typedef struct struct_0 {\n
    unsigned int field_-19b0;\n
    char padding_-19ac[18944];\n
    unsigned int field_3054[4];\n
    char padding_3058[264];\n
    unsigned int field_3160;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-19b0;\n
    char padding_-19ac[18944];\n
    unsigned int field_3054;\n
    char padding_3058[264];\n
    unsigned int field_3160;\n
} struct_1;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getWord()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int, char\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_1 *v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.field_-19b0;\n
    cgc_printf(\"Choose your word seed. Please send 4 bytes\\n
\");\n
    if (cgc_fread(&v3, 4, 1, *(&v1->padding_-19ac[12368])) != 1)\n
        cgc__terminate();\n
    v7 = v1;\n
    v2 = (0 CONCAT *(&v3)) /m 4093 >> 32;\n
    v3 = *((*(&v7->padding_-19ac[12636]) + v2));\n
    cgc_strcpy(&v7[87].padding_-19ac[4370], *(&v7->padding_-19ac[12736 + 4 * ((0 CONCAT v3) /m *(&v7->padding_-19ac[6572]) >> 32)]));\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(&v1[87].padding_-19ac[4370]))\n
            break;\n
        v1[87].padding_-19ac[4242 + v3] = 95;\n
        v3 += 1;\n
    }\n
    v1[87].padding_-19ac[4242 + v3] = 0;\n
    v8 = v4;\n
    return v1;\n
}\n
", "7541926:sub_7314a6": null, "7541936:cgc_getHighScore": "typedef struct struct_2 {\n
    char padding_0[12372];\n
    void* field_3054;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getHighScore()\n
{\n
    char v0;  // [bp-0x31]\n
    struct_2 *v1;  // [bp-0x30]\n
    char v2;  // [bp-0x2c]\n
    struct_1 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_printf(\"Congratulations blondie, add yourself to the high score list\\n
\");\n
    cgc_printf(&v1[294].padding_0[6661]);\n
    if (!cgc_fgets(&v2, 80, v1->field_3054))\n
        cgc__terminate();\n
    v3 = &v2;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v3->field_0)\n
            v0 = v3->field_0 != 10;\n
        if (!(v0 & 1))\n
            break;\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    cgc_printf(&v1[294].padding_0[6641]);\n
    cgc_printf(&v2);\n
    v7 = v4;\n
    return cgc_printf(&v1[294].padding_0[6242]);\n
}\n
", "7542186:sub_7315aa": null, "7542192:cgc_isValid": "extern char avail;\n
\n
int cgc_isValid(char v2)\n
{\n
    char v0[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (*(&v0) = cgc_strchr(&avail, v2); *(v0); v0 += 1)\n
    {\n
        *(v0) = *((v0 + 1));\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "7542319:sub_73162f": null, "7542320:cgc_makeGuess": "typedef struct struct_0 {\n
    char padding_0[1676644];\n
    unsigned int field_199564;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_makeGuess(char v7)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    struct_0 *v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    struct_0 *v8;  // ebx\n
    unsigned int v9;  // eax\n
    struct_0 *v10;  // ebx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v2 = v5;\n
        if (v2 >= cgc_strlen(&v3->padding_0[1676514]))\n
            break;\n
        if (*((v3 + v5 + 1676514)) == v7)\n
        {\n
            *((v3 + v5 + 1676386)) = v7;\n
            v4 = 1;\n
        }\n
        v5 += 1;\n
    }\n
    if (!v4)\n
    {\n
        if (v3->field_199564 < 7)\n
        {\n
            v8 = v3;\n
            v9 = v8->field_199564;\n
            v8->field_199564 = v9 + 1;\n
            cgc_addPart(v9);\n
            if (v3->field_199564 == 7)\n
            {\n
                cgc_printBoard();\n
                cgc_printf(&v3[2].padding_0[291746]);\n
                cgc_printf(&v3[2].padding_0[291701]);\n
                cgc_printf(&v3->padding_0[1676514]);\n
                cgc_printf(&v3[2].padding_0[291704]);\n
                v6 = 1;\n
                return v6;\n
            }\n
            cgc_printf(&v3[2].padding_0[291679]);\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(&v3->padding_0[1676514]))\n
        {\n
            cgc_printf(&v3[2].padding_0[291809]);\n
            v10 = v3;\n
            v0 = &v10->padding_0[1676514];\n
            cgc_printf(&v10[2].padding_0[291772]);\n
            cgc_getHighScore();\n
            v6 = 1;\n
            return v6;\n
        }\n
        if (*((v3 + v5 + 1676386)) == 95)\n
        {\n
            cgc_printf(&v3[2].padding_0[291865]);\n
            v6 = 0;\n
            return v6;\n
        }\n
        v5 += 1;\n
    }\n
}\n
", "7542842:sub_73183a": null, "7542848:cgc_askYN": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_askYN(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(v3);\n
    cgc_printf(v0 - 3644926);\n
    v1 = cgc_getchar();\n
    if (cgc_getchar() != 10)\n
        cgc__terminate();\n
    return cgc_tolower(v1) == 121;\n
}\n
", "7542978:sub_7318c2": null, "7542992:cgc_doTurn": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_doTurn()\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2;  // [bp-0xd]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printBoard();\n
    cgc_printf(v1 - 3644917);\n
    cgc_printf(v1 + 1676076);\n
    cgc_printf(v1 - 3644904);\n
    cgc_printf(v1 - 3644901);\n
    cgc_printf(v1 + 1676103);\n
    cgc_printf(v1 - 3644904);\n
    cgc_printf(v1 - 3644888);\n
    cgc_printf(v1 + 1676386);\n
    cgc_printf(v1 - 3644786);\n
    cgc_printf(v1 - 3644877);\n
    v2 = cgc_getchar();\n
    if (cgc_getchar() == 10)\n
    {\n
        v2 = cgc_tolower(v2);\n
        if (cgc_isValid(v2))\n
        {\n
            v0 = v2;\n
            *((v1 + cgc_strlen(v1 + 1676076) + 1676076)) = v0;\n
            v3 = cgc_makeGuess(v2);\n
            return v3;\n
        }\n
    }\n
    cgc_printf(v1 - 3644863);\n
    v3 = 1;\n
    return v3;\n
}\n
", "7543353:sub_731a39": null, "7543360:cgc_playGame": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_playGame()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ebx\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_reset();\n
    cgc_getWord();\n
    do\n
    {\n
        v5 = cgc_doTurn();\n
    } while (!v5);\n
    v6 = v1;\n
    return v5;\n
}\n
", "7543421:sub_731a7d": null, "7543424:main": "typedef struct struct_0 {\n
    char padding_0[12372];\n
    unsigned int field_3054;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12372];\n
    void* field_3054;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v5, unsigned int a0)\n
{\n
    char v0;  // [bp-0x15]\n
    struct_0 *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_1 *v7;  // ebx\n
    struct_0 *v8;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    cgc_printf(\"Password: \");\n
    v7 = v1;\n
    if (!cgc_fgets(&v7[135].padding_0[0x1700], 255, v7->field_3054))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &v1[135].padding_0[0x1700];\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) != 10;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    v8 = v1;\n
    *(v2) = 0;\n
    if (cgc_strcmp(&v8[135].padding_0[0x1700], &v8[294].padding_0[6281]))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_printf(&v1[294].padding_0[6269]);\n
    do\n
    {\n
        cgc_playGame();\n
    } while (cgc_askYN(&v1[294].padding_0[6240]));\n
    v3 = 0;\n
    return v3;\n
}\n
", "7543745:sub_731bc1": null, "7543748:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "13631488:__libc_start_main": null, "13631492:cgc__terminate": null, "13631496:cgc_transmit": null, "13631500:cgc_receive": null, "14684236:UnresolvableJumpTarget": null, "14684240:UnresolvableCallTarget": null}