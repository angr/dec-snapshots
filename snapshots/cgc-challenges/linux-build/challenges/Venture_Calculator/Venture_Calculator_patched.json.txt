{"4202496:_init": "extern struct_0 *g_40c884;\n
\n
int _init()\n
{\n
    if (g_40c884)\n
    {\n
        g_40c884();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202672:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4202720:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202736:sub_4020f0": "int sub_4020f0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202742:sub_4020f6": null, "4202752:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202795:sub_40212b": null, "4202796:sub_40212c": "int sub_40212c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202800:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202804:sub_402134": null, "4202816:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 42823;\n
    v6 = v5 + 802;\n
    v7 = v5 + 802;\n
    if (v7 == v6)\n
        return v5 + 802;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202867:sub_402173": "int sub_402173()\n
{\n
}\n
", "4202873:sub_402179": "int sub_402179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202880:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 42759;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 802;\n
    v9 = (v6 + 802 - (v6 + 802) >> 31) + (802 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202951:sub_4021c7": "int sub_4021c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202960:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40c878;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40c878)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203035:sub_40221b": "int sub_40221b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203040:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203049:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203053:sub_40222d": null, "4203056:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203146:sub_40228a": null, "4203152:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 1;\n
}\n
", "4203181:sub_4022ad": null, "4203184:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 2;\n
}\n
", "4203213:sub_4022cd": null, "4203216:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 16;\n
}\n
", "4203245:sub_4022ed": null, "4203248:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 14;\n
}\n
", "4203277:sub_40230d": null, "4203280:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 12;\n
}\n
", "4203309:sub_40232d": null, "4203312:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 4;\n
}\n
", "4203341:sub_40234d": null, "4203344:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 8;\n
}\n
", "4203373:sub_40236d": null, "4203376:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 64;\n
}\n
", "4203405:sub_40238d": null, "4203408:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 32;\n
}\n
", "4203437:sub_4023ad": null, "4203440:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[14468 + v0] & 4294967168;\n
}\n
", "4203469:sub_4023cd": null, "4203472:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14468 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[14468 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[14468 + v1] & 2) >> 1);\n
}\n
", "4203531:sub_40240b": null, "4203536:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14468 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203570:sub_402432": null, "4203584:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[14468 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14468 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203646:sub_40247e": null, "4203648:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[14468 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203682:sub_4024a2": null, "4203696:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_exit();\n
    return;\n
}\n
", "4203728:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203760:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_40262d;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_40262d:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4204099:sub_402643": null, "4204112:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204464:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204560:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_1 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_1 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_1 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_402a61;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_402a61:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4204911:sub_40296f": null, "4205163:sub_402a6b": null, "4205168:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_402ac8;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402ae0;\n
LABEL_402ac8:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402ae0;\n
    }\n
LABEL_402ae0:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205305:sub_402af9": null, "4205312:cgc__getc": "int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // eax\n
\n
    v7 = v6;\n
    v8 = *((v6 + 8));\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(*(v6), &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = *((v6 + 20));\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *((v9 + v16));\n
    }\n
    else if (v8 != *((v6 + 12)))\n
    {\n
LABEL_402bf9:\n
        *((v7 + 8)) = v8 + 1;\n
        v16 = *((v7 + v8 + 24));\n
        return v16;\n
    }\n
    else\n
    {\n
        *((v6 + 12)) = 0;\n
        *((v6 + 8)) = 0;\n
        v0 = &v4;\n
        if (cgc_receive(*(v6), v6 + 24, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            *((v6 + 12)) = v13;\n
            v10 = *((v6 + 20));\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *((v7 + v12 + 24)) = *((v10 + *((v7 + v12 + 24))));\n
                        *((v7 + v12 + 25)) = *((v10 + *((v7 + v12 + 25))));\n
                        *((v7 + v12 + 26)) = *((v10 + *((v7 + v12 + 26))));\n
                        *((v7 + v12 + 27)) = *((v10 + *((v7 + v12 + 27))));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = v12 + v7 + 24;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        *((v14 + v15)) = *((v10 + *((v14 + v15))));\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = *((v7 + 8));\n
                goto LABEL_402bf9;\n
            }\n
        }\n
    }\n
}\n
", "4205649:sub_402c51": null, "4205664:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205704:sub_402c88": null, "4205712:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_1 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402cfe:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402cfe;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206302:sub_402ede": null, "4206304:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206672:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206712:sub_403078": null, "4206720:cgc_malloc_alloc": "extern char g_409108;\n
extern char g_40913a;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v4;  // [bp-0x14]\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v43;  // eax\n
\n
    v9 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_403394:\n
        return v9;\n
    }\n
    v10 = v8;\n
    v11 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 <= 15)\n
    {\n
        v43 = tiny_alloc();\n
        return v43;\n
    }\n
    if (v11 > 131071)\n
    {\n
        v14 = v11 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v9 = 0;\n
        if (!cgc_allocate(v14, 0))\n
        {\n
            v17 = *(&v4);\n
            *(v17) = v8;\n
            *((v17 + 4)) = v14;\n
            v9 = v17 + 8;\n
            goto LABEL_403394;\n
        }\n
    }\n
    v12 = v11 + 23;\n
    v13 = v12 & -0x10;\n
    v2 = v13;\n
    if (!(v12 & -0x10))\n
    {\n
        v15 = -1;\n
        v16 = *((v10 + -0x4));\n
        if (!v16)\n
            goto LABEL_0x403304;\n
        else\n
            goto LABEL_0x403320;\n
    }\n
    else if (v13 < 513)\n
    {\n
        v15 = (v12 >> 4) + 2;\n
        v16 = 0;\n
    }\n
    else if (v13 <= 0x1200)\n
    {\n
        v15 = (v13 - 0x200 >> 7) + 34;\n
        v16 = *((v10 + v15 * 4));\n
        if (!v16)\n
            goto LABEL_0x403304;\n
        else\n
            goto LABEL_0x403320;\n
    }\n
    else\n
    {\n
        v15 = 130;\n
        if (v13 <= 0x20000)\n
        {\n
            v15 = (v13 - 0x1200 >> 11) + 66;\n
            v16 = *((v10 + v15 * 4));\n
            if (!v16)\n
                goto LABEL_0x403304;\n
            else\n
                goto LABEL_0x403320;\n
        }\n
    }\n
}\n
", "4207568:tiny_alloc": "int tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4207999:sub_40357f": null, "4208000:malloc_free": "int malloc_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v15;  // cl\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = v13;\n
    v38 = a0;\n
    if (!v38)\n
    {\n
LABEL_4038a1:\n
        return v38;\n
    }\n
    v23 = v10;\n
    v15 = *((v23 + (v38 >> 20) + 524));\n
    if (v15 != 2)\n
    {\n
        if (v15 == 1)\n
        {\n
            v24 = *((v38 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v17 = v24 / 4 - 1;\n
                goto LABEL_403706;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v17 = (v24 >> 4) + 2;\n
                goto LABEL_403706;\n
            }\n
        }\n
        if (!(!v15))\n
            goto LABEL_4038a1;\n
        if ((v38 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4038ed;\n
        }\n
        else\n
        {\n
            v20 = *((v38 - 8));\n
            if (v20 != v23)\n
            {\n
                v22 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v23;\n
            }\n
            else\n
            {\n
                v20 = *((v38 - 4));\n
                if (v20 - 0x20000 <= 2147356671 && !(v20 & 4095))\n
                {\n
                    v38 = cgc_deallocate(v38 - 8);\n
                    goto LABEL_4038a1;\n
                }\n
                v22 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v20;\n
            v38 = cgc_heap_error(v22, v38);\n
        }\n
    }\n
    else if (!(v38 & 7))\n
    {\n
        v24 = v38 - 8;\n
        v16 = *((v24 + 4));\n
        if ((v16 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_4038ed;\n
        }\n
        else if (v16 - 131073 <= -131058)\n
        {\n
            v19 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_4038ed;\n
        }\n
        else\n
        {\n
            v21 = *(v24);\n
            v12 = v24 - *(v24);\n
            if (!*(v24))\n
                v12 = v21;\n
            v23 = v16 + v24;\n
            v2 = v24;\n
            if (v12)\n
            {\n
                v4 = v23;\n
                v3 = *((v12 + 4));\n
                if (!((v3 & -2) == v21))\n
                    goto LABEL_403904;\n
                v23 = v4;\n
                v24 = v3;\n
                if (*(v23) == v16)\n
                {\n
                    if ((v24 & 1))\n
                    {\n
                        if (v21 <= 15)\n
                        {\n
                            v25 = v24 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v21 <= 0x200)\n
                            {\n
                                v25 = (v24 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v21 <= 0x1200)\n
                                {\n
                                    v25 = (v21 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v25 = 130;\n
                                    if (v21 <= 0x20000)\n
                                        v25 = (v21 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v12 + 4)) = v21;\n
                        v26 = *((v12 + 8));\n
                        if (v26)\n
                            *((v26 + 12)) = *((v12 + 12));\n
                        v27 = *((v12 + 12));\n
                        if (v27)\n
                            *((v27 + 8)) = v26;\n
                        if (*((v10 + (v25 << 2))) == v12)\n
                            *((v10 + v25 * 4)) = v27;\n
                        *((v12 + 8)) = 0;\n
                        *((v12 + 12)) = 0;\n
                        v28 = v21 + *((v2 + 4));\n
                        *((v12 + 4)) = v28;\n
                        *(v23) = v28;\n
                        v2 = v12;\n
                    }\n
LABEL_40378c:\n
                    v29 = *((v23 + 4));\n
                    v30 = v10;\n
                    v12 = v2;\n
                    if ((v29 & 1))\n
                    {\n
                        v31 = v29 & -2;\n
                        if (v31 <= 15)\n
                        {\n
                            v32 = v29 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v31 <= 0x200)\n
                            {\n
                                v32 = (v29 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v31 <= 0x1200)\n
                                {\n
                                    v32 = (v31 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v32 = 130;\n
                                    if (v31 <= 0x20000)\n
                                        v32 = (v31 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v23 + 4)) = v31;\n
                        v33 = *((v23 + 8));\n
                        if (v33)\n
                            *((v33 + 12)) = *((v23 + 12));\n
                        v34 = *((v23 + 12));\n
                        if (*((v23 + 12)))\n
                            *((v34 + 8)) = v33;\n
                        v30 = v10;\n
                        if (*((v30 + (v32 << 2))) == v23)\n
                            *((v30 + v32 * 4)) = v34;\n
                        *((v23 + 8)) = 0;\n
                        *((v23 + 12)) = 0;\n
                        v12 = v2;\n
                        v35 = v31 + *((v12 + 4));\n
                        *((v12 + 4)) = v35;\n
                        *((v12 + v35)) = v35;\n
                    }\n
                    v36 = *((v12 + 4));\n
                    if (v36 <= 15)\n
                    {\n
                        v37 = v36 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v36 <= 0x200)\n
                        {\n
                            v37 = (v36 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v36 <= 0x1200)\n
                            {\n
                                v37 = (v36 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v37 = 130;\n
                                if (v36 <= 0x20000)\n
                                    v37 = (v36 - 0x1200 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(!(v36 & 1)))\n
                        goto LABEL_4038f4;\n
                    *((v12 + 4)) = v36 | 1;\n
                    *((v12 + 8)) = 0;\n
                    *((v12 + 12)) = *((v30 + v37 * 4));\n
                    *((v30 + v37 * 4)) = v12;\n
                    v38 = *((v12 + 12));\n
                    if (v38)\n
                    {\n
                        *((v38 + 8)) = v12;\n
                        goto LABEL_4038a1;\n
                    }\n
                }\n
            }\n
            else if (*((v24 + v16)) == v16)\n
            {\n
                goto LABEL_40378c;\n
            }\n
            v0 = v38;\n
            v38 = cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v23);\n
            v17 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_403706:\n
            *(v38) = *((v23 + v17 * 4));\n
            *((v23 + v17 * 4)) = v38;\n
            goto LABEL_4038a1;\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_4038ed:\n
    v8 = v38;\n
    v7 = v19;\n
    cgc_heap_error(*(&v9));\n
LABEL_4038f4:\n
    v6 = v12;\n
    v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v38 = cgc_heap_error(*(&v9));\n
LABEL_403904:\n
    v7 = v38;\n
    v6 = v12;\n
    v5 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v10, a0);\n
    return cgc_malloc_size(v10, a0);\n
}\n
", "4208928:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208977:sub_403951": null, "4208992:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_403a35:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_403a2d:\n
        malloc_free(v1, a0);\n
        goto LABEL_403a35;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_403a10;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_403a10:\n
        v3 = v4;\n
        goto LABEL_403a35;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_403a35;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_403a2d;\n
}\n
", "4209215:sub_403a3f": null, "4209216:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4209280:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*(v2) == a0)\n
            return v2;\n
        v2 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4209335:sub_403ab7": null, "4209344:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4209407:sub_403aff": null, "4209408:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209538:sub_403b82": null, "4209552:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209846:sub_403cb6": null, "4209856:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4209966:sub_403d2e": null, "4209968:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4210081:sub_403da1": null, "4210096:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4210203:sub_403e1b": null, "4210208:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4210317:sub_403e8d": null, "4210320:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4210423:sub_403ef7": null, "4210432:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210480:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210523:sub_403f5b": null, "4210528:cgc__vsfprintf": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_1 *v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    char *v32;  // ebx\n
    struct struct_1 **v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    struct_1 *v78;  // eax\n
    struct_1 *v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210598:sub_403fa6": null, "4212112:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4212156:sub_4045bc": null, "4212160:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2;  // al, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212278:sub_404636": null, "4212288:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212377:sub_404699": null, "4212384:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v0[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4212454:sub_4046e6": null, "4212464:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212532:sub_404734": null, "4212544:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212596:sub_404774": null, "4212608:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212688:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212720:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212848:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4212929:sub_4048c1": null, "4212944:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4213033:sub_404929": null, "4213040:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_404991;\n
                goto LABEL_40498f;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_404991;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_40498f:\n
    v4 = 0;\n
LABEL_404991:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4213170:sub_4049b2": null, "4213184:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4213272:sub_404a18": null, "4213280:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    char v11;  // al\n
    unsigned int v12;  // eax, Other Possible Types: char\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // esi\n
    void* v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ecx\n
    char v25[2];  // ebp, Other Possible Types: unsigned int\n
    void* v26;  // esi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v25 = v10;\n
    if (v12)\n
    {\n
        v25 = v10;\n
        do\n
        {\n
            if (!*(v25))\n
            {\n
                v21 = 0;\n
                v23 = 1;\n
                v24 = 1;\n
                v26 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404c10;\n
            }\n
            v11 = *((v25 + 1));\n
            v25 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v25) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v25) == 43)\n
            v25 += 1;\n
        if (!v13)\n
            goto LABEL_404ae8;\n
    }\n
    else\n
    {\n
        v25 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404ae8:\n
            *(&v12) = *(v25);\n
            if (*(v25) != 48)\n
            {\n
LABEL_404b23:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404bf0;\n
LABEL_404b3b:\n
                *(&v12) = *(v25);\n
LABEL_404b3e:\n
                if (!v12)\n
                {\n
LABEL_404bf0:\n
                    v21 = 0;\n
                    v24 = 1;\n
                    v26 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404c10;\n
LABEL_404c05:\n
                    tmp_2 = v24;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v25;\n
                    *(v22) = v27;\n
                    goto LABEL_404c10;\n
                }\n
LABEL_404b46:\n
                v26 = 0;\n
                v21 = 0;\n
                v24 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v24;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v25);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                        v17 = v1;\n
                        if (!(v16 < v17))\n
                            goto LABEL_404c33;\n
                    }\n
                    else\n
                    {\n
                        v19 = *(v25);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v19 - 87;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404c33;\n
                        }\n
                        else if (!cgc_isupper(v19))\n
                        {\n
LABEL_404c33:\n
                            v22 = a0;\n
                            v23 = v0;\n
                            v24 = v2;\n
                            if (!v22)\n
                                goto LABEL_404c10;\n
                            goto LABEL_404c05;\n
                        }\n
                        else\n
                        {\n
                            v16 = *(v25) - 55;\n
                            v17 = v1;\n
                            if (!(v16 < v17))\n
                                goto LABEL_404c33;\n
                        }\n
                    }\n
                    v20 = v17 * v26;\n
                    tmp_5 = v20;\n
                    v26 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v21 = 1;\n
                    v12 = *((v25 + 1));\n
                    v25 += 1;\n
                    v24 = 0;\n
                } while (v12);\n
                goto LABEL_404c05;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v25 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v25 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404b46;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v25);\n
                    goto LABEL_404b23;\n
                }\n
                else\n
                {\n
                    v25 += 2;\n
                }\n
            }\n
LABEL_404b19:\n
            v13 = 16;\n
            goto LABEL_404b3b;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_404b3b;\n
    *(&v12) = *(v25);\n
    v13 = 16;\n
    if (!(*(v25) == 48))\n
        goto LABEL_404b3e;\n
    v25 += (cgc_tolower(*((v25 + 1))) == 120) * 2;\n
    goto LABEL_404b19;\n
LABEL_404c10:\n
    v28 = (!v21 ? 0x80000000 : -(v26));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v26);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213639:sub_404b87": null, "4213829:sub_404c45": null, "4213840:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax, Other Possible Types: char\n
    void* v16;  // edi\n
    void* v17;  // edi\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    char v32[2];  // ebp\n
    unsigned int v33;  // edi\n
    char v34[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax, Other Possible Types: unsigned int\n
    unsigned int v36;  // edx\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404d4c;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) != 45)\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (!v15)\n
            goto LABEL_404d16;\n
        goto LABEL_404cc0;\n
    }\n
    else\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
        v15 = a1;\n
        v4 = &_GLOBAL_OFFSET_TABLE_;\n
        if (v15)\n
        {\n
LABEL_404cc0:\n
            if (v15 == 16)\n
            {\n
                *(&v15) = *(v34);\n
                if (*(v34) == 48)\n
                {\n
                    v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
                    v0 = 16;\n
                    goto LABEL_404db5;\n
                }\n
                else\n
                {\n
                    v0 = 16;\n
                    if (!(!v15))\n
                        goto LABEL_404dbc;\n
                    goto LABEL_404d4a;\n
                }\n
            }\n
        }\n
        else\n
        {\n
LABEL_404d16:\n
            *(&v15) = *(v34);\n
            if (*(v34) == 48)\n
            {\n
                *(&v15) = *((v34 + 1));\n
                if ((v15 & 248) == 48)\n
                {\n
                    v1 = v36;\n
                    v34 += 1;\n
                    v0 = 8;\n
                    goto LABEL_404dc0;\n
                }\n
                v15 = cgc_tolower(v15);\n
                if (v15 != 120)\n
                {\n
                    *(&v15) = *(v34);\n
                }\n
                else\n
                {\n
                    v34 += 2;\n
                    v0 = 16;\n
                    goto LABEL_404db5;\n
                }\n
            }\n
            v1 = v36;\n
            v15 = cgc_isdigit(v15);\n
            v0 = 10;\n
            if (!v15)\n
            {\n
                v14 = 0;\n
                v37 = 1;\n
                v2 = 0;\n
                v16 = 0;\n
                v35 = a0;\n
                v36 = v1;\n
                if (!v35)\n
                    goto LABEL_404ed7;\n
LABEL_404ecc:\n
                tmp_2 = v37;\n
                v38 = v8;\n
                if (!tmp_2)\n
                    v38 = v34;\n
                *(v35) = v38;\n
            }\n
            else\n
            {\n
                v36 = v1;\n
LABEL_404db5:\n
                *(&v15) = *(v34);\n
                if (*(v34))\n
                {\n
LABEL_404dbc:\n
                    v1 = v36;\n
LABEL_404dc0:\n
                    v2 = 0;\n
                    v18 = 0;\n
                    v14 = 0;\n
                    v37 = 1;\n
                    do\n
                    {\n
                        *(&v3) = v37;\n
                        v19 = cgc_isdigit(v15);\n
                        v20 = *(v34);\n
                        if (v19)\n
                        {\n
                            v21 = v20 - 48;\n
                            v22 = v0;\n
                            if (!(v21 < v22))\n
                                goto LABEL_404e9d;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v34);\n
                            if (cgc_islower(v20))\n
                            {\n
                                v21 = v24 - 87;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e9d;\n
                            }\n
                            else if (!cgc_isupper(v24))\n
                            {\n
LABEL_404e9d:\n
                                v35 = a0;\n
                                v36 = v1;\n
                                v37 = v3;\n
                                if (!v35)\n
                                    goto LABEL_404ed7;\n
                                goto LABEL_404ecc;\n
                            }\n
                            else\n
                            {\n
                                v21 = *(v34) - 55;\n
                                v22 = v0;\n
                                if (!(v21 < v22))\n
                                    goto LABEL_404e9d;\n
                            }\n
                        }\n
                        *(&v3) = v34;\n
                        v25 = v2;\n
                        v26 = v25 * (v22 >> 31);\n
                        v27 = v14;\n
                        v28 = v22;\n
                        tmp_67 = v25 * v22;\n
                        v29 = v25 * v22 >> 32;\n
                        v30 = tmp_67;\n
                        v31 = v28 * v18 + v26 + v29;\n
                        v32 = v3;\n
                        v33 = v21 >> 31;\n
                        v2 = v30 + v21;\n
                        tmp_41 = v33;\n
                        v18 = v33 + v31 + (v30 + v21 < v30);\n
                        v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                        v15 = v32[1];\n
                        v34 = &v32[1];\n
                        v37 = 0;\n
                    } while (v15);\n
                    goto LABEL_404ed7;\n
                }\n
LABEL_404d4a:\n
                v14 = 0;\n
LABEL_404d4c:\n
                v37 = 1;\n
                v2 = 0;\n
                v17 = 0;\n
                v35 = a0;\n
                if (!v35)\n
                    goto LABEL_404ed7;\n
                goto LABEL_404ecc;\n
            }\n
        }\n
    }\n
LABEL_404ed7:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214283:sub_404e0b": null, "4214536:sub_404f08": null, "4214544:_Z10check_seedv": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int check_seed()\n
{\n
    void* v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    v2 = v0;\n
    if (v2 == *(0x4347c000))\n
    {\n
        v2 = cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v0;\n
}\n
", "4214640:main": "extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
extern void g_40c3b8;\n
\n
int main()\n
{\n
    void* v0;  // [bp-0x5d4]\n
    void* v1;  // [bp-0x5d0]\n
    unsigned int v2;  // [bp-0x5cc]\n
    unsigned int v3;  // [bp-0x5c8]\n
    void* v4;  // [bp-0x5c4]\n
    char v5;  // [bp-0x5c0]\n
    char v6;  // [bp-0x4c0]\n
    void* v7;  // [bp-0x3c0]\n
    struct struct_0 **v8;  // [bp-0x3bc]\n
    unsigned int *v9;  // [bp-0x3b8]\n
    char v10;  // [bp-0x3b4]\n
    struct struct_0 **v12;  // esi\n
    unsigned int v13[4];  // edi\n
    unsigned int *v14;  // esi\n
    unsigned int v15[4];  // edi\n
\n
    v1 = cgc_stdin;\n
    v2 = 7864400;\n
    v3 = cgc_stdin;\n
    v4 = cgc_stdout;\n
    v12 = operator new(4);\n
    v13 = operator new(16);\n
    v13[2] = 0;\n
    v13[3] = 10;\n
    v13[1] = 10;\n
    v13[0] = operator new[](160);\n
    *(v12) = &v13[0];\n
    v8 = v12;\n
    v14 = operator new(4);\n
    v15 = operator new(16);\n
    v15[2] = 0;\n
    v15[3] = 10;\n
    v15[1] = 64;\n
    v15[0] = operator new[](0x1000);\n
    *(v14) = v15;\n
    v9 = v14;\n
    memcpy(&v10, &g_40c3b8, 928);\n
    cgc_memset(&v5, 0, 0x100);\n
    cgc_memset(&v6, 0, 0x100);\n
    v7 = 0;\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v0 = 0;\n
    cgc_fread(&v0, 4, v1);\n
    if (v0 == *(0x4347c000))\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    VC::REPL();\n
    if (*(v8)->field_8)\n
    {\n
        do\n
        {\n
            Vector::RemoveLast();\n
        } while (*(v8)->field_8);\n
    }\n
    cgc_fprintf(v4, \"Bye bye\\n
\");\n
    cgc_fflush(v4);\n
    return 0;\n
}\n
", "4215142:sub_405166": null, "4215152:_ZL8ParseIntPcPi": "int ParseInt()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax, Other Possible Types: char\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // eax, Other Possible Types: char\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax, Other Possible Types: char\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v19;  // edx\n
\n
    v3 = v2;\n
    v4 = 0;\n
    *(&v4) = *(v2) == 45;\n
    v5 = v4;\n
    *(&v4) = *((v3 + v4));\n
    if (*(&v4))\n
    {\n
        v7 = v5 + v3;\n
        while (true)\n
        {\n
            v6 = cgc_isdigit(v4);\n
            if (!v6)\n
                break;\n
LABEL_4051a0:\n
            v4 = *((v7 + 1));\n
            v7 += 1;\n
            if (!v4)\n
                goto LABEL_4051d3;\n
        }\n
        if (!(!cgc_isspace(*(v7))))\n
            goto LABEL_4051a0;\n
        v8 = 0x80000000;\n
        if (!(!*(v7)))\n
            goto LABEL_4051ed;\n
    }\n
LABEL_4051d3:\n
    v8 = cgc_strtol(v3, NULL, 10);\n
LABEL_4051ed:\n
    v9 = 0;\n
    *(&v9) = *(v3) == 45;\n
    v10 = v9;\n
    *(&v9) = *((v3 + v9));\n
    if (*(&v9))\n
    {\n
        v11 = v10 + v3;\n
        while (true)\n
        {\n
            v12 = cgc_isxdigit(v9);\n
            if (!v12)\n
                break;\n
LABEL_405210:\n
            v9 = *((v11 + 1));\n
            v11 += 1;\n
            if (!v9)\n
                goto LABEL_405243;\n
        }\n
        if (!(!cgc_isspace(*(v11))))\n
            goto LABEL_405210;\n
        v13 = 0x80000000;\n
        if (!(!*(v11)))\n
            goto LABEL_40525b;\n
    }\n
LABEL_405243:\n
    v13 = cgc_strtol(v3, NULL, 16);\n
LABEL_40525b:\n
    v0 = v13;\n
    v14 = 0;\n
    *(&v14) = *(v3) == 45;\n
    *(&v13) = *((v3 + v14));\n
    if (*((v3 + v14)))\n
    {\n
        v15 = v14 + v3;\n
        while (true)\n
        {\n
            v16 = cgc_isdigit(v13);\n
            if (v16 && !(cgc_digittoint(*(v15)) & 248))\n
                goto LABEL_40528f;\n
            if (!cgc_isspace(*(v15)))\n
            {\n
                v17 = 0x80000000;\n
                if (*(v15))\n
                {\n
                    if (v8 + 2147483647 < -2)\n
                        goto LABEL_405319;\n
                    goto LABEL_4052f8;\n
                }\n
                goto LABEL_4052d5;\n
            }\n
LABEL_40528f:\n
            v13 = *((v15 + 1));\n
            v15 += 1;\n
            if (!v13)\n
                goto LABEL_4052d5;\n
        }\n
        goto LABEL_405319;\n
    }\n
LABEL_4052d5:\n
    v17 = cgc_strtol(v3, NULL, 8);\n
    if (v8 + 2147483647 < -2)\n
        goto LABEL_405319;\n
LABEL_4052f8:\n
    v8 = v0;\n
    if (v0 + 2147483647 >= -2)\n
    {\n
        v8 = v17;\n
        if (v17 + 2147483647 > -3)\n
            return -1;\n
    }\n
LABEL_405319:\n
    *(v19) = v8;\n
    return 1;\n
}\n
", "4215300:sub_405204": null, "4215410:sub_405272": null, "4215598:sub_40532e": null, "4215600:_ZN2VC4REPLEv": "extern void* cgc_stderr;\n
extern unsigned int cgc_stdout;\n
\n
int VC::REPL(unsigned int v4[132])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    unsigned int v5[132];  // esi\n
    char *v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v5 = v4;\n
    v6 = &v5[3];\n
    v3 = cgc_stdout;\n
    v1 = &v5[67];\n
    v2 = \"quit\";\n
    v0 = \"Error: Invalid input\\n
\";\n
    while (true)\n
    {\n
        VC::DrawScreen();\n
        cgc_fflush(v3);\n
        cgc_memset(v6, 0x100, 0);\n
        if (cgc_freaduntil(v6, 0x100, 10, v5[1]) <= 0)\n
            cgc_exit();\n
        if (cgc_strlen(v6) >= 257)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Input too long\\n
\");\n
            cgc__terminate(1);\n
            return VC::ManualPush();\n
        }\n
        v7 = cgc_strcmp(v6, v2);\n
        if (!v7)\n
        {\n
            return v7;\n
        }\n
        else if (VC::ProcessInput(v5) < 0)\n
        {\n
            cgc_sprintf(v1, v0);\n
            v5[131] = 1;\n
        }\n
    }\n
}\n
", "4215920:_ZN2VC10ManualPushEi": "typedef struct struct_2 {\n
    char padding_0[528];\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::ManualPush(struct_2 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    struct struct_0 **v2;  // eax\n
    struct_0 *v3;  // ebp\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int *v8;  // eax\n
    unsigned int *v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
\n
    v1 = a0;\n
    v2 = v0->field_210;\n
    v3 = *(v2);\n
    v9 = *(v2)->field_8;\n
    if (v9 != v3->field_4)\n
    {\n
        v10 = v3->field_0;\n
    }\n
    else\n
    {\n
        v4 = v3->field_c;\n
        v5 = v4 * ((0 CONCAT v9) /m v4 + 1);\n
        v6 = v5 * 4;\n
        v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v6 * 4));\n
        cgc_memcpy(v10, v3->field_0, v3->field_4 * 4);\n
        v8 = v3->field_0;\n
        if (v8)\n
            operator delete[](v8);\n
        v3->field_0 = v10;\n
        v3->field_4 = v5;\n
        v9 = v3->field_8;\n
        v1 = a0;\n
    }\n
    *((v10 + v9 * 4)) = v1;\n
    v3->field_8 = &v3->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4216085:sub_405515": null, "4216096:_ZN2VC3AddEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Add(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Sub();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() + Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4216416:_ZN2VC3SubEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Sub(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Mul();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() - Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4216736:_ZN2VC3MulEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Mul(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Div();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() * Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4217056:_ZN2VC3DivEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Div(struct_2 *v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_2 *v3;  // esi\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // ebp\n
    struct struct_0 **v12;  // eax\n
    struct_0 *v13;  // ebp\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v19;  // edx\n
    struct_0 *v20;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v21;  // eax\n
    unsigned int *v22;  // eax\n
    unsigned int *v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int v24;  // ecx\n
    unsigned int *v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // eax\n
    unsigned int v31;  // ebp\n
    unsigned int *v32;  // eax\n
\n
    v3 = v2;\n
    if (v3->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_20c = 1;\n
    }\n
    else\n
    {\n
        v4 = Vector::RemoveLast();\n
        if (!v3->field_210->field_0->field_8)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
            return VC::Fact();\n
        }\n
        v5 = Vector::RemoveLast();\n
        if (!v4)\n
        {\n
            v0 = v5;\n
            cgc_sprintf(&v3->padding_0[268], \"Error: Invalid input\\n
\");\n
            v3->field_20c = 1;\n
            v12 = v3->field_210;\n
            v13 = *(v12);\n
            v14 = *(v12)->field_8;\n
            if (v14 != v13->field_4)\n
            {\n
                v19 = v13->field_0;\n
                v20 = v13;\n
            }\n
            else\n
            {\n
                v15 = v13->field_c;\n
                v16 = v15 * ((0 CONCAT v14) /m v15 + 1);\n
                v17 = v16 * 4;\n
                v1 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v17 * 4));\n
                cgc_memcpy(v1, v13->field_0, v13->field_4 * 4);\n
                v22 = v13->field_0;\n
                if (v22)\n
                    operator delete[](v22);\n
                v19 = v1;\n
                v13->field_0 = v19;\n
                v13->field_4 = v16;\n
                v14 = v13->field_8;\n
                v20 = v3->field_210->field_0;\n
            }\n
            *((v19 + v14 * 4)) = v0;\n
            v13->field_8 = &v13->field_8->field_0 + 1;\n
            v26 = *((v20 + 8));\n
            if (v26 != *((v20 + 4)))\n
            {\n
                v31 = *(v20);\n
            }\n
            else\n
            {\n
                v27 = *((v20 + 12));\n
                v28 = v27 * ((0 CONCAT v26) /m v27 + 1);\n
                v29 = v28 * 4;\n
                v31 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v29 * 4));\n
                cgc_memcpy(v31, *(v20), *((v20 + 4)) * 4);\n
                v32 = *(v20);\n
                if (v32)\n
                    operator delete[](v32);\n
                *(v20) = v31;\n
                *((v20 + 4)) = v28;\n
                v26 = *((v20 + 8));\n
            }\n
            *((v31 + v26 * 4)) = 0;\n
            *((v20 + 8)) = *((v20 + 8)) + 1;\n
        }\n
        else\n
        {\n
            v24 = (v5 >> 31 CONCAT v5) /m v4;\n
            v6 = v3->field_210->field_0;\n
            v23 = v6->field_8;\n
            if (v23 != v6->field_4)\n
            {\n
                v11 = v6->field_0;\n
            }\n
            else\n
            {\n
                v0 = v24;\n
                v7 = v6->field_c;\n
                v8 = v7 * ((0 CONCAT v23) /m v7 + 1);\n
                v9 = v8 * 4;\n
                v11 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v9 * 4));\n
                cgc_memcpy(v11, v6->field_0, v6->field_4 * 4);\n
                v21 = v6->field_0;\n
                if (v21)\n
                    operator delete[](v21);\n
                v6->field_0 = v11;\n
                v6->field_4 = v8;\n
                v23 = v6->field_8;\n
                v24 = v0;\n
            }\n
            *((v11 + v23 * 4)) = v24;\n
            v6->field_8 = &v6->field_8->field_0 + 1;\n
            return 0;\n
        }\n
    }\n
    return 2;\n
}\n
", "4217696:_ZN2VC4FactEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int VC::Fact(struct_2 *v2)\n
{\n
    unsigned int *v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // [bp-0x14]\n
    struct_2 *v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v4;  // eax\n
    unsigned int *v5;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // eax\n
    struct_0 *v8;  // ebp\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // eax\n
    unsigned int v14;  // ecx\n
    unsigned int *v15;  // ebp, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v17;  // eax\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v19;  // edi\n
    unsigned int *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int *v27;  // eax\n
\n
    v3 = v2;\n
    if (v3->field_210->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_20c = 1;\n
        return 2;\n
    }\n
    v4 = Vector::RemoveLast();\n
    v5 = v4;\n
    if (v4 > 1000)\n
    {\n
        cgc_sprintf(&v3->padding_0[268], \"Error: Invalid input\\n
\");\n
        v3->field_20c = 1;\n
        v7 = v3->field_210;\n
        v8 = *(v7);\n
        v21 = *(v7)->field_8;\n
        if (v21 != v8->field_4)\n
        {\n
            v14 = v8->field_0;\n
        }\n
        else\n
        {\n
            v10 = v8->field_c;\n
            v11 = v10 * ((0 CONCAT v21) /m v10 + 1);\n
            v12 = v11 * 4;\n
            v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v12 * 4));\n
            cgc_memcpy(v0, v8->field_0, v8->field_4 * 4);\n
            v17 = v8->field_0;\n
            if (v17)\n
                operator delete[](v17);\n
            v14 = v0;\n
            v8->field_0 = v14;\n
            v8->field_4 = v11;\n
            v21 = v8->field_8;\n
        }\n
        *((v14 + v21 * 4)) = v5;\n
        v8->field_8 = &v8->field_8->field_0 + 1;\n
        return 2;\n
    }\n
    else\n
    {\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
        if (!v4)\n
        {\n
            v15 = 1;\n
        }\n
        else\n
        {\n
            v9 = v4 + 1;\n
            v18 = v4 & 7;\n
            if (v9 < 7)\n
            {\n
                v15 = 1;\n
                if (!v18)\n
                    goto LABEL_405d3b;\n
            }\n
            else\n
            {\n
                v0 = -(v5 & -8);\n
                v15 = 1;\n
                v16 = 0;\n
                do\n
                {\n
                    v15 = v15 * (v5 + v16) * (v9 + v16) * (v9 + v16 - 1) * (v9 + v16 - 2) * (v9 + v16 - 3) * (v9 + v16 - 4) * (v9 + v16 - 5) * (v9 + v16 - 6);\n
                    v16 -= 8;\n
                } while (v0 != v16);\n
                v5 = v5 + v16;\n
                v3 = v2;\n
                if (!v18)\n
                    goto LABEL_405d3b;\n
            }\n
            do\n
            {\n
                v15 = v5 * v15;\n
                v5 -= 1;\n
                tmp_8 = v18;\n
                v18 -= 1;\n
            } while (tmp_8 != 1);\n
        }\n
LABEL_405d3b:\n
        v19 = *(*((v3 + 528)));\n
        v20 = v19->field_8;\n
        if (v20 != v19->field_4)\n
        {\n
            v26 = v19->field_0;\n
        }\n
        else\n
        {\n
            v22 = v19->field_c;\n
            v23 = v22 * ((0 CONCAT v20) /m v22 + 1);\n
            v24 = v23 * 4;\n
            v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v24 * 4));\n
            cgc_memcpy(v0, v19->field_0, v19->field_4 * 4);\n
            v27 = v19->field_0;\n
            if (v27)\n
                operator delete[](v27);\n
            v26 = v0;\n
            v19->field_0 = v26;\n
            v19->field_4 = v23;\n
            v20 = v19->field_8;\n
        }\n
        *((v26 + v20 * 4)) = v15;\n
        v19->field_8 = &v19->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4218311:sub_405dc7": null, "4218320:_ZN2VC3NegEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Neg(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    unsigned int v3;  // ecx\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int *v10;  // eax\n
    unsigned int *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v3 = -(Vector::RemoveLast());\n
    v4 = v2->field_210->field_0;\n
    v11 = v4->field_8;\n
    if (v11 != v4->field_4)\n
    {\n
        v9 = v4->field_0;\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v5 = v4->field_c;\n
        v6 = v5 * ((0 CONCAT v11) /m v5 + 1);\n
        v7 = v6 * 4;\n
        v9 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v7 * 4));\n
        cgc_memcpy(v9, v4->field_0, v4->field_4 * 4);\n
        v10 = v4->field_0;\n
        if (v10)\n
            operator delete[](v10);\n
        v4->field_0 = v9;\n
        v4->field_4 = v6;\n
        v11 = v4->field_8;\n
        v3 = v0;\n
    }\n
    *((v9 + v11 * 4)) = v3;\n
    v4->field_8 = &v4->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4218567:sub_405ec7": null, "4218576:_ZN2VC3AbsEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Abs(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    struct_0 *v6;  // esi\n
    struct struct_0 **v7;  // eax\n
    struct_0 *v8;  // ebp\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v18;  // esi\n
    unsigned int *v19;  // eax\n
    unsigned int *v20;  // eax\n
    unsigned int *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v3 = Vector::RemoveLast();\n
    v4 = v3;\n
    if (v3 > 0)\n
    {\n
        v6 = v2->field_210->field_0;\n
        v21 = v6->field_8;\n
        if (v21 != v6->field_4)\n
        {\n
            v13 = v6->field_0;\n
        }\n
        else\n
        {\n
            v0 = v4;\n
            v9 = v6->field_c;\n
            v10 = v9 * ((0 CONCAT v21) /m v9 + 1);\n
            v11 = v10 * 4;\n
            v13 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v11 * 4));\n
            cgc_memcpy(v13, v6->field_0, v6->field_4 * 4);\n
            v19 = v6->field_0;\n
            if (v19)\n
                operator delete[](v19);\n
            v6->field_0 = v13;\n
            v6->field_4 = v10;\n
            v21 = v6->field_8;\n
            v4 = v0;\n
        }\n
        *((v13 + v21 * 4)) = v4;\n
        v6->field_8 = &v6->field_8->field_0 + 1;\n
    }\n
    else\n
    {\n
        v23 = -(v3);\n
        v7 = v2->field_210;\n
        v8 = *(v7);\n
        v22 = *(v7)->field_8;\n
        if (v22 != v8->field_4)\n
        {\n
            v18 = v8->field_0;\n
        }\n
        else\n
        {\n
            v0 = v23;\n
            v14 = v8->field_c;\n
            v15 = v14 * ((0 CONCAT v22) /m v14 + 1);\n
            v16 = v15 * 4;\n
            v18 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v16 * 4));\n
            cgc_memcpy(v18, v8->field_0, v8->field_4 * 4);\n
            v20 = v8->field_0;\n
            if (v20)\n
                operator delete[](v20);\n
            v8->field_0 = v18;\n
            v8->field_4 = v15;\n
            v22 = v8->field_8;\n
            v23 = v0;\n
        }\n
        *((v18 + v22 * 4)) = v23;\n
        v8->field_8 = &v8->field_8->field_0 + 1;\n
    }\n
    return 0;\n
}\n
", "4218971:sub_40605b": null, "4218976:_ZN2VC3ModEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Mod(struct_2 *v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_2 *v3;  // esi\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // ebp\n
    struct struct_0 **v12;  // eax\n
    struct_0 *v13;  // ebp\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v19;  // edx\n
    struct_0 *v20;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v21;  // eax\n
    unsigned int *v22;  // eax\n
    unsigned int *v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int v24;  // edx\n
    unsigned int *v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // eax\n
    unsigned int v31;  // ebp\n
    unsigned int *v32;  // eax\n
\n
    v3 = v2;\n
    if (v3->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_20c = 1;\n
    }\n
    else\n
    {\n
        v4 = Vector::RemoveLast();\n
        if (!v3->field_210->field_0->field_8)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
            return VC::And();\n
        }\n
        v5 = Vector::RemoveLast();\n
        if (!v4)\n
        {\n
            v0 = v5;\n
            cgc_sprintf(&v3->padding_0[268], \"Error: Invalid input\\n
\");\n
            v3->field_20c = 1;\n
            v12 = v3->field_210;\n
            v13 = *(v12);\n
            v14 = *(v12)->field_8;\n
            if (v14 != v13->field_4)\n
            {\n
                v19 = v13->field_0;\n
                v20 = v13;\n
            }\n
            else\n
            {\n
                v15 = v13->field_c;\n
                v16 = v15 * ((0 CONCAT v14) /m v15 + 1);\n
                v17 = v16 * 4;\n
                v1 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v17 * 4));\n
                cgc_memcpy(v1, v13->field_0, v13->field_4 * 4);\n
                v22 = v13->field_0;\n
                if (v22)\n
                    operator delete[](v22);\n
                v19 = v1;\n
                v13->field_0 = v19;\n
                v13->field_4 = v16;\n
                v14 = v13->field_8;\n
                v20 = v3->field_210->field_0;\n
            }\n
            *((v19 + v14 * 4)) = v0;\n
            v13->field_8 = &v13->field_8->field_0 + 1;\n
            v26 = *((v20 + 8));\n
            if (v26 != *((v20 + 4)))\n
            {\n
                v31 = *(v20);\n
            }\n
            else\n
            {\n
                v27 = *((v20 + 12));\n
                v28 = v27 * ((0 CONCAT v26) /m v27 + 1);\n
                v29 = v28 * 4;\n
                v31 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v29 * 4));\n
                cgc_memcpy(v31, *(v20), *((v20 + 4)) * 4);\n
                v32 = *(v20);\n
                if (v32)\n
                    operator delete[](v32);\n
                *(v20) = v31;\n
                *((v20 + 4)) = v28;\n
                v26 = *((v20 + 8));\n
            }\n
            *((v31 + v26 * 4)) = 0;\n
            *((v20 + 8)) = *((v20 + 8)) + 1;\n
        }\n
        else\n
        {\n
            v24 = (v5 >> 31 CONCAT v5) /m v4 >> 32;\n
            v6 = v3->field_210->field_0;\n
            v23 = v6->field_8;\n
            if (v23 != v6->field_4)\n
            {\n
                v11 = v6->field_0;\n
            }\n
            else\n
            {\n
                v0 = v24;\n
                v7 = v6->field_c;\n
                v8 = v7 * ((0 CONCAT v23) /m v7 + 1);\n
                v9 = v8 * 4;\n
                v11 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v9 * 4));\n
                cgc_memcpy(v11, v6->field_0, v6->field_4 * 4);\n
                v21 = v6->field_0;\n
                if (v21)\n
                    operator delete[](v21);\n
                v6->field_0 = v11;\n
                v6->field_4 = v8;\n
                v23 = v6->field_8;\n
                v24 = v0;\n
            }\n
            *((v11 + v23 * 4)) = v24;\n
            v6->field_8 = &v6->field_8->field_0 + 1;\n
            return 0;\n
        }\n
    }\n
    return 2;\n
}\n
", "4219616:_ZN2VC3AndEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::And(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Or();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() & Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4219936:_ZN2VC2OrEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Or(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Xor();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() | Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4220256:_ZN2VC3XorEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Xor(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct_0 *v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    else if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Not();\n
    }\n
    else\n
    {\n
        v13 = Vector::RemoveLast() ^ Vector::RemoveLast();\n
        v5 = v2->field_210->field_0;\n
        v12 = v5->field_8;\n
        if (v12 != v5->field_4)\n
        {\n
            v10 = v5->field_0;\n
        }\n
        else\n
        {\n
            v0 = v13;\n
            v6 = v5->field_c;\n
            v7 = v6 * ((0 CONCAT v12) /m v6 + 1);\n
            v8 = v7 * 4;\n
            v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v8 * 4));\n
            cgc_memcpy(v10, v5->field_0, v5->field_4 * 4);\n
            v11 = v5->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v5->field_0 = v10;\n
            v5->field_4 = v7;\n
            v12 = v5->field_8;\n
            v13 = v0;\n
        }\n
        *((v10 + v12 * 4)) = v13;\n
        v5->field_8 = &v5->field_8->field_0 + 1;\n
        return 0;\n
    }\n
}\n
", "4220576:_ZN2VC3NotEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Not(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    unsigned int v3;  // ecx\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int *v10;  // eax\n
    unsigned int *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v3 = ~(Vector::RemoveLast());\n
    v4 = v2->field_210->field_0;\n
    v11 = v4->field_8;\n
    if (v11 != v4->field_4)\n
    {\n
        v9 = v4->field_0;\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v5 = v4->field_c;\n
        v6 = v5 * ((0 CONCAT v11) /m v5 + 1);\n
        v7 = v6 * 4;\n
        v9 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v7 * 4));\n
        cgc_memcpy(v9, v4->field_0, v4->field_4 * 4);\n
        v10 = v4->field_0;\n
        if (v10)\n
            operator delete[](v10);\n
        v4->field_0 = v9;\n
        v4->field_4 = v6;\n
        v11 = v4->field_8;\n
        v3 = v0;\n
    }\n
    *((v9 + v11 * 4)) = v3;\n
    v4->field_8 = &v4->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4220823:sub_406797": null, "4220832:_ZN2VC3SumEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Sum(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    void* v2;  // edi, Other Possible Types: unsigned int, struct_2 *\n
    unsigned int v3;  // esi\n
    struct_0 *v4;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v5;  // eax\n
    struct_0 *v6;  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
    struct_2 *v13;  // eax\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v15;  // ebp\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int *v21;  // eax\n
    unsigned int *v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v24;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
LABEL_406852:\n
        cgc_sprintf(v2 + 268, \"Error: Too few arguments for '%s' command\\n
\");\n
        *((v2 + 524)) = 1;\n
        return 2;\n
    }\n
    v3 = Vector::RemoveLast();\n
    if (v3 >= 0)\n
    {\n
        v4 = v2->field_210->field_0;\n
        v14 = v4->field_8;\n
        if (v14 >= v3)\n
        {\n
            if (!v3)\n
            {\n
                v2 = 0;\n
                if (v14 != v4->field_4)\n
                {\n
LABEL_4069d0:\n
                    v20 = *(v4);\n
LABEL_4069d2:\n
                    *((v20 + v14 * 4)) = v2;\n
                    *((v4 + 8)) = *((v4 + 8)) + 1;\n
                    return 0;\n
                }\n
LABEL_406947:\n
                v15 = v4;\n
                v16 = *((v4 + 12));\n
                v17 = v16 * ((0 CONCAT v14) /m v16 + 1);\n
                v18 = v17 * 4;\n
                v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v18 * 4));\n
                cgc_memcpy(v0, v15->field_0, v15->field_4 * 4);\n
                v4 = v15;\n
                v24 = v15->field_0;\n
                if (v24)\n
                {\n
                    operator delete[](v24);\n
                    v4 = v15;\n
                }\n
                v20 = v0;\n
                *(v4) = v20;\n
                *((v4 + 4)) = v17;\n
                v14 = *((v4 + 8));\n
                goto LABEL_4069d2;\n
            }\n
            if (v14)\n
            {\n
                v12 = v3 + 1;\n
                v2 = 0;\n
                do\n
                {\n
                    v2 = Vector::RemoveLast() + v2;\n
                    v12 -= 1;\n
                    v13 = v1;\n
                    if (v12 < 2)\n
                    {\n
                        v4 = v13->field_210->field_0;\n
                        v14 = *((v4 + 8));\n
                        if (!(v14 == *((v4 + 4))))\n
                            goto LABEL_4069d0;\n
                        goto LABEL_406947;\n
                    }\n
                } while (v13->field_210->field_0->field_8);\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
            goto LABEL_406852;\n
        }\n
    }\n
    cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
    v2->field_20c = 1;\n
    v5 = v2->field_210;\n
    v6 = *(v5);\n
    v23 = *(v5)->field_8;\n
    if (v23 != v6->field_4)\n
    {\n
        v11 = v6->field_0;\n
    }\n
    else\n
    {\n
        v7 = v6->field_c;\n
        v8 = v7 * ((0 CONCAT v23) /m v7 + 1);\n
        v9 = v8 * 4;\n
        v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v9 * 4));\n
        cgc_memcpy(v0, v6->field_0, v6->field_4 * 4);\n
        v21 = v6->field_0;\n
        if (v21)\n
            operator delete[](v21);\n
        v11 = v0;\n
        v6->field_0 = v11;\n
        v6->field_4 = v8;\n
        v23 = v6->field_8;\n
    }\n
    *((v11 + v23 * 4)) = v3;\n
    v6->field_8 = &v6->field_8->field_0 + 1;\n
    return 2;\n
}\n
", "4221411:sub_4069e3": null, "4221424:_ZN2VC3AvgEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Avg(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    int tmp_9;  // tmp #9\n
    struct_2 *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v3;  // eax\n
    unsigned int *v4;  // esi\n
    unsigned int *v5;  // eax\n
    struct struct_0 **v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // edi\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v13;  // esi, Other Possible Types: unsigned int\n
    struct struct_0 **v14;  // eax\n
    struct_0 *v15;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v17;  // ecx\n
    struct_0 *v18;  // ebp\n
    unsigned int *v19;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // eax\n
    unsigned int v24;  // ecx\n
    unsigned int *v25;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v26;  // eax\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v31;  // esi\n
    unsigned int *v32;  // eax\n
    unsigned int *v33;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
LABEL_406aae:\n
        cgc_sprintf(v2 + 268, \"Error: Too few arguments for '%s' command\\n
\");\n
        *((v2 + 524)) = 1;\n
        return 2;\n
    }\n
    v3 = Vector::RemoveLast();\n
    if (!v3)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Invalid input\\n
\");\n
        v2->field_20c = 1;\n
        v6 = v2->field_210;\n
        v15 = *(v6);\n
        v33 = *(v6)->field_8;\n
        if (v33 != v15->field_4)\n
        {\n
            v11 = v15->field_0;\n
        }\n
        else\n
        {\n
            v7 = v15->field_c;\n
            v8 = v7 * ((0 CONCAT v33) /m v7 + 1);\n
            v9 = v8 * 4;\n
            v11 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v9 * 4));\n
            cgc_memcpy(v11, v15->field_0, v15->field_4 * 4);\n
            v26 = v15->field_0;\n
            if (v26)\n
                operator delete[](v26);\n
            v15->field_0 = v11;\n
            v15->field_4 = v8;\n
            v33 = v15->field_8;\n
        }\n
        *((v11 + v33 * 4)) = 0;\n
        goto LABEL_406cb6;\n
    }\n
    v4 = v3;\n
    if (!([D] x86g_calculate_condition(0x8<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>)))\n
    {\n
        v5 = v2->field_210->field_0->field_8;\n
        if (v5 >= v4)\n
        {\n
            v0 = v4;\n
            if (v5)\n
            {\n
                v12 = 0;\n
                v13 = v0;\n
                do\n
                {\n
                    v2 = v12;\n
                    v12 = Vector::RemoveLast() + v12;\n
                    v17 = v1->field_210;\n
                    v18 = *(v17);\n
                    v19 = *(v17)->field_8;\n
                    tmp_9 = v13;\n
                    v13 -= 1;\n
                    if (tmp_9 == 1)\n
                    {\n
                        v25 = (v12 >> 31 CONCAT v12) /m v0;\n
                        if (v19 != v18->field_4)\n
                        {\n
                            v31 = v18->field_0;\n
                        }\n
                        else\n
                        {\n
                            v0 = v25;\n
                            v27 = v18->field_c;\n
                            v28 = v27 * ((0 CONCAT v19) /m v27 + 1);\n
                            v29 = v28 * 4;\n
                            v31 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v29 * 4));\n
                            cgc_memcpy(v31, v18->field_0, v18->field_4 * 4);\n
                            v35 = v18->field_0;\n
                            if (v35)\n
                                operator delete[](v35);\n
                            v18->field_0 = v31;\n
                            v18->field_4 = v28;\n
                            v19 = v18->field_8;\n
                            v25 = v0;\n
                        }\n
                        *((v31 + v19 * 4)) = v25;\n
                        v18->field_8 = &v18->field_8->field_0 + 1;\n
                        return 0;\n
                    }\n
                } while (v19);\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
            goto LABEL_406aae;\n
        }\n
    }\n
    cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
    v2->field_20c = 1;\n
    v14 = v2->field_210;\n
    v15 = *(v14);\n
    v16 = *(v14)->field_8;\n
    if (v16 != *((v15 + 4)))\n
    {\n
        v24 = *(v15);\n
    }\n
    else\n
    {\n
        v20 = *((v15 + 12));\n
        v21 = v20 * ((0 CONCAT v16) /m v20 + 1);\n
        v22 = v21 * 4;\n
        v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v22 * 4));\n
        cgc_memcpy(v0, *(v15), *((v15 + 4)) * 4);\n
        v32 = *(v15);\n
        if (v32)\n
            operator delete[](v32);\n
        v24 = v0;\n
        *(v15) = v24;\n
        *((v15 + 4)) = v21;\n
        v16 = *((v15 + 8));\n
    }\n
    *((v24 + v16 * 4)) = v4;\n
LABEL_406cb6:\n
    *((v15 + 8)) = *((v15 + 8)) + 1;\n
    return 2;\n
}\n
", "4222165:sub_406cd5": null, "4222176:_ZN2VC3DupEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Dup(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    struct struct_0 **v3;  // eax\n
    struct_0 *v4;  // ebp\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v10;  // edi\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v2 = v1;\n
    v3 = v2->field_210;\n
    v4 = *(v3);\n
    v12 = *(v3)->field_8;\n
    if (v12 <= 0)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v10 = v4->field_0;\n
    v13 = *((v10 + v12 * 4 - 4));\n
    if (v12 == v4->field_4)\n
    {\n
        v0 = v13;\n
        v5 = v4->field_c;\n
        v6 = v5 * ((0 CONCAT v12) /m v5 + 1);\n
        v7 = v6 * 4;\n
        v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v7 * 4));\n
        cgc_memcpy(v10, v4->field_0, v4->field_4 * 4);\n
        v11 = v4->field_0;\n
        if (v11)\n
            operator delete[](v11);\n
        v4->field_0 = v10;\n
        v4->field_4 = v6;\n
        v12 = v4->field_8;\n
        v13 = v0;\n
    }\n
    *((v10 + v12 * 4)) = v13;\n
    v4->field_8 = &v4->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4222405:sub_406dc5": null, "4222416:_ZN2VC4DupNEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::DupN(struct_2 *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_2 *v2;  // esi\n
    unsigned int v3;  // edi\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int *v10;  // eax\n
    unsigned int *v11;  // eax, Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_210->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
    }\n
    else\n
    {\n
        v3 = Vector::RemoveLast();\n
        v12 = VC::DupN(v2);\n
        if (v12 != 2)\n
            return v12;\n
        v4 = v2->field_210->field_0;\n
        v11 = v4->field_8;\n
        if (v11 != v4->field_4)\n
        {\n
            v9 = v4->field_0;\n
        }\n
        else\n
        {\n
            v0 = v3;\n
            v5 = v4->field_c;\n
            v6 = v5 * ((0 CONCAT v11) /m v5 + 1);\n
            v7 = v6 * 4;\n
            v9 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v7 * 4));\n
            cgc_memcpy(v9, v4->field_0, v4->field_4 * 4);\n
            v10 = v4->field_0;\n
            if (v10)\n
                operator delete[](v10);\n
            v4->field_0 = v9;\n
            v4->field_4 = v6;\n
            v11 = v4->field_8;\n
            v3 = v0;\n
        }\n
        *((v9 + v11 * 4)) = v3;\n
        v4->field_8 = &v4->field_8->field_0 + 1;\n
    }\n
    return 2;\n
}\n
", "4222680:sub_406ed8": null, "4222688:_ZN2VC4DupNEi": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int VC::DupN(struct_2 *v5, unsigned int a0)\n
{\n
    int tmp_17;  // tmp #17\n
    unsigned int *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    struct_2 *v7;  // esi, Other Possible Types: unsigned int\n
    struct_5 *v9;  // edi\n
    struct_0 *v10;  // edx\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int *v15;  // eax\n
    unsigned int *v16;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ebp\n
    struct struct_0 **v21;  // esi\n
    struct_4 *v23;  // ebp\n
    unsigned int *v24;  // eax\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int *v30;  // edx\n
\n
    v6 = a0;\n
    v7 = v5;\n
    if (a0 > 0 && v7->field_210->field_0->field_8 >= v6)\n
    {\n
        v3 = operator new(4);\n
        v9 = operator new(16);\n
        v9->field_8 = 0;\n
        v9->field_c = 10;\n
        v9->field_4 = 10;\n
        v2 = &_GLOBAL_OFFSET_TABLE_;\n
        v16 = operator new[](160);\n
        v9->field_0 = v16;\n
        *(v3) = v9;\n
        v1 = -(v6);\n
        v17 = 0;\n
        v19 = 10;\n
        v20 = -1;\n
        while (true)\n
        {\n
            v10 = *(*((v7 + 528)));\n
            v18 = *((v10->field_0 + (v10->field_8 + v20) * 4));\n
            if (v17 == v19)\n
            {\n
                v4 = v18;\n
                v11 = v9->field_c;\n
                v12 = v11 * ((0 CONCAT v19) /m v11 + 1);\n
                v13 = v12 * 4;\n
                tmp_17 = v13;\n
                v14 = v13 * 4;\n
                if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t17, 0x4<32>, 0x0<32>))\n
                    v14 = -1;\n
                v0 = operator new[](v14);\n
                cgc_memcpy(v0, v9->field_0, v9->field_4 * 4);\n
                v15 = v9->field_0;\n
                if (v15)\n
                    operator delete[](v15);\n
                v16 = v0;\n
                v9->field_0 = v16;\n
                v9->field_4 = v12;\n
                v17 = v9->field_8;\n
                v18 = v4;\n
            }\n
            *((v16 + v17 * 4)) = v18;\n
            v17 = &v9->field_8->field_0 + 1;\n
            v9->field_8 = v17;\n
            v7 = v5;\n
            if (v1 == v20)\n
                break;\n
            v19 = v9->field_4;\n
            v20 -= 1;\n
        }\n
        if (v17)\n
        {\n
            while (true)\n
            {\n
                v21 = *((v7 + 528));\n
                v23 = *(v21);\n
                v24 = *(v21)->field_8;\n
                if (v24 == *(v21)->field_4)\n
                {\n
                    v1 = Vector::RemoveLast();\n
                    v25 = v23->field_c;\n
                    v26 = v25 * ((0 CONCAT v24) /m v25 + 1);\n
                    v27 = v26 * 4;\n
                    tmp_17 = v27;\n
                    v28 = v27 * 4;\n
                    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t17, 0x4<32>, 0x0<32>))\n
                        v28 = -1;\n
                    v0 = operator new[](v28);\n
                    cgc_memcpy(v0, v23->field_0, v23->field_4 * 4);\n
                    v29 = v23->field_0;\n
                    if (v29)\n
                        operator delete[](v29);\n
                    v30 = v0;\n
                    v23->field_0 = v30;\n
                    v23->field_4 = v26;\n
                    v7 = v5;\n
                    *((v30 + 0x4 * v23->field_8)) = v1;\n
                    v23->field_8 = &v23->field_8->field_0 + 1;\n
                    if (!v9->field_8)\n
                        break;\n
                }\n
                else\n
                {\n
                    v7 = v5;\n
                    *((v23->field_0 + 0x4 * v24)) = v1;\n
                    v23->field_8 = &v23->field_8->field_0 + 1;\n
                    if (!v9->field_8)\n
                        break;\n
                }\n
            }\n
            v16 = v9->field_0;\n
        }\n
        if (v16)\n
            operator delete[](v16);\n
        operator delete(v9);\n
        operator delete(v3);\n
        return 0;\n
    }\n
    cgc_sprintf(&v7->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
    v7->field_20c = 1;\n
    return 2;\n
}\n
", "4223082:sub_40706a": null, "4223321:sub_407159": null, "4223328:_ZN2VC4DupREv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::DupR(struct_2 *v3)\n
{\n
    unsigned int *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_2 *v4;  // edi\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // eax\n
    struct struct_0 **v8;  // eax\n
    struct_0 *v9;  // ebp\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // eax\n
    unsigned int v14;  // edx\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v16;  // eax\n
    unsigned int *v17;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v23;  // ebp\n
    unsigned int *v24;  // eax\n
\n
    v4 = v3;\n
    if (v4->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v4->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v4->field_20c = 1;\n
    }\n
    else\n
    {\n
        if (!v4->field_210->field_0->field_8)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
            return VC::DupR();\n
        }\n
        v6 = Vector::RemoveLast();\n
        v7 = VC::DupR(v4, v6);\n
        if (v7 != 2)\n
            return v7;\n
        v1 = v6;\n
        v2 = Vector::RemoveLast();\n
        v8 = v4->field_210;\n
        v9 = *(v8);\n
        v17 = *(v8)->field_8;\n
        if (v17 != v9->field_4)\n
        {\n
            v14 = v9->field_0;\n
            v15 = v9;\n
        }\n
        else\n
        {\n
            v10 = v9->field_c;\n
            v11 = v10 * ((0 CONCAT v17) /m v10 + 1);\n
            v12 = v11 * 4;\n
            v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v12 * 4));\n
            cgc_memcpy(v0, v9->field_0, v9->field_4 * 4);\n
            v16 = v9->field_0;\n
            if (v16)\n
                operator delete[](v16);\n
            v14 = v0;\n
            v9->field_0 = v14;\n
            v9->field_4 = v11;\n
            v17 = v9->field_8;\n
            v15 = v4->field_210->field_0;\n
        }\n
        *((v14 + v17 * 4)) = v1;\n
        v9->field_8 = &v9->field_8->field_0 + 1;\n
        v18 = *((v15 + 8));\n
        if (v18 != *((v15 + 4)))\n
        {\n
            v23 = *(v15);\n
        }\n
        else\n
        {\n
            v19 = *((v15 + 12));\n
            v20 = v19 * ((0 CONCAT v18) /m v19 + 1);\n
            v21 = v20 * 4;\n
            v23 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v21 * 4));\n
            cgc_memcpy(v23, *(v15), *((v15 + 4)) * 4);\n
            v24 = *(v15);\n
            if (v24)\n
                operator delete[](v24);\n
            *(v15) = v23;\n
            *((v15 + 4)) = v20;\n
            v18 = *((v15 + 8));\n
        }\n
        *((v23 + v18 * 4)) = v2;\n
        *((v15 + 8)) = *((v15 + 8)) + 1;\n
    }\n
    return 2;\n
}\n
", "4223808:_ZN2VC4DupREii": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::DupR(struct_2 *v3, unsigned short a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_18;  // tmp #18\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_2 *v4;  // edx, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    struct_0 *v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebp\n
    unsigned int *v12;  // eax\n
    unsigned int *v13;  // eax, Other Possible Types: unsigned int\n
    unsigned int v14;  // ecx\n
\n
    v4 = v3;\n
    v5 = a0;\n
    v6 = v4->field_210->field_0;\n
    v13 = v6->field_8;\n
    if (v13 >= v5)\n
    {\n
        v7 = a1;\n
        if (v13 >= v7)\n
        {\n
            v2 = v7 + v5;\n
            if (v13 >= v7 + v5)\n
            {\n
                if (!v7)\n
                    return 1;\n
                while (true)\n
                {\n
                    v11 = *(v6);\n
                    v14 = *((*(v6) + (~(v5) + v13) * 4));\n
                    if (v13 == *((v6 + 4)))\n
                    {\n
                        v1 = v14;\n
                        v8 = *((v6 + 12));\n
                        v0 = v8 * ((0 CONCAT v13) /m v8 + 1);\n
                        v9 = v0 * 4;\n
                        tmp_18 = v9;\n
                        v10 = v9 * 4;\n
                        if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t18, 0x4<32>, 0x0<32>))\n
                            v10 = -1;\n
                        v11 = operator new[](v10);\n
                        cgc_memcpy(v11, *(v6), *((v6 + 4)) * 4);\n
                        v12 = *(v6);\n
                        if (v12)\n
                            operator delete[](v12);\n
                        *(v6) = v11;\n
                        *((v6 + 4)) = v0;\n
                        v13 = *((v6 + 8));\n
                        v4 = v3;\n
                        v14 = v1;\n
                    }\n
                    *((v11 + v13 * 4)) = v14;\n
                    *((v6 + 8)) = *((v6 + 8)) + 1;\n
                    v5 += 1;\n
                    if (v2 <= v5)\n
                        break;\n
                    v6 = *(*((v4 + 528)));\n
                    v13 = *((v6 + 8));\n
                }\n
                return 1;\n
            }\n
        }\n
    }\n
    cgc_sprintf(&v4->padding_0[268], \"Error: Invalid input\\n
\");\n
    v4->field_20c = 1;\n
    return 2;\n
}\n
", "4223935:sub_4073bf": null, "4224109:sub_40746d": null, "4224112:_ZN2VC3MinEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Min(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    struct_2 *v2;  // ebp\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    struct struct_0 **v7;  // eax\n
    struct_0 *v8;  // ebp\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // eax\n
    unsigned int *v15;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v1->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v4 = Vector::RemoveLast();\n
    if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Max();\n
    }\n
    v5 = Vector::RemoveLast();\n
    v7 = v2->field_210;\n
    v8 = *(v7);\n
    v15 = *(v7)->field_8;\n
    if (v15 != v8->field_4)\n
    {\n
        v13 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_c;\n
        v10 = v9 * ((0 CONCAT v15) /m v9 + 1);\n
        v11 = v10 * 4;\n
        v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v11 * 4));\n
        cgc_memcpy(v0, v8->field_0, v8->field_4 * 4);\n
        v14 = v8->field_0;\n
        if (v14)\n
            operator delete[](v14);\n
        v13 = v0;\n
        v8->field_0 = v13;\n
        v8->field_4 = v10;\n
        v15 = v8->field_8;\n
    }\n
    *((v13 + v15 * 4)) = (v4 < v5 ? v5 : v4);\n
    v8->field_8 = &v8->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4224432:_ZN2VC3MaxEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::Max(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    struct_2 *v2;  // ebp\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    struct struct_0 **v7;  // eax\n
    struct_0 *v8;  // ebp\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // eax\n
    unsigned int *v15;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v1->field_210->field_0->field_8 <= 1)\n
    {\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        return 2;\n
    }\n
    v4 = Vector::RemoveLast();\n
    if (!v2->field_210->field_0->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(1);\n
        return VC::Depth();\n
    }\n
    v5 = Vector::RemoveLast();\n
    v7 = v2->field_210;\n
    v8 = *(v7);\n
    v15 = *(v7)->field_8;\n
    if (v15 != v8->field_4)\n
    {\n
        v13 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_c;\n
        v10 = v9 * ((0 CONCAT v15) /m v9 + 1);\n
        v11 = v10 * 4;\n
        v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v11 * 4));\n
        cgc_memcpy(v0, v8->field_0, v8->field_4 * 4);\n
        v14 = v8->field_0;\n
        if (v14)\n
            operator delete[](v14);\n
        v13 = v0;\n
        v8->field_0 = v13;\n
        v8->field_4 = v10;\n
        v15 = v8->field_8;\n
    }\n
    *((v13 + v15 * 4)) = (!(v4 <= v5) ? v5 : v4);\n
    v8->field_8 = &v8->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4224752:_ZN2VC5DepthEv": "typedef struct struct_2 {\n
    char padding_0[528];\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Depth(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    struct_0 *v2;  // esi\n
    unsigned int *v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int *v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int *v10;  // ebp, Other Possible Types: unsigned int\n
\n
    v2 = v1->field_210->field_0;\n
    v3 = v2->field_8;\n
    if (v3 != v2->field_4)\n
    {\n
        v10 = v2->field_0;\n
        v9 = v3;\n
    }\n
    else\n
    {\n
        v4 = v2->field_c;\n
        v0 = v3;\n
        v5 = v4 * ((0 CONCAT v3) /m v4 + 1);\n
        v6 = v5 * 4;\n
        v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v6 * 4));\n
        cgc_memcpy(v10, v2->field_0, v2->field_4 * 4);\n
        v8 = v2->field_0;\n
        if (v8)\n
            operator delete[](v8);\n
        v2->field_0 = v10;\n
        v2->field_4 = v5;\n
        v9 = v2->field_8;\n
        v3 = v0;\n
    }\n
    *((v10 + v9 * 4)) = v3;\n
    v2->field_8 = &v2->field_8->field_0 + 1;\n
    return 0;\n
}\n
", "4224916:sub_407794": null, "4224928:_ZN2VC4DropEv": "typedef struct struct_1 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_2 *field_210;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int VC::Drop(struct_1 *v2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    struct_1 *v4;  // esi\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (v4->field_210->field_0->field_8 <= 0)\n
    {\n
        v0 = \"drop\";\n
        cgc_sprintf(&v4->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v4->field_20c = 1;\n
        return 2;\n
    }\n
    Vector::RemoveLast();\n
    return 0;\n
}\n
", "4225034:sub_40780a": null, "4225040:_ZN2VC5DropNEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
int VC::DropN(struct_2 *v1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    struct_2 *v2;  // ebp\n
    unsigned int v3;  // esi\n
    unsigned int *v4;  // ecx\n
    struct struct_0 **v5;  // eax\n
    struct_0 *v6;  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // esi\n
    unsigned int *v13;  // eax\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v1->field_210->field_0->field_8 <= 0)\n
    {\n
LABEL_4078b8:\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        goto LABEL_407997;\n
    }\n
    else\n
    {\n
        v3 = Vector::RemoveLast();\n
        if (v3 >= 0)\n
        {\n
            v4 = v2->field_210->field_0->field_8;\n
            if (v4 >= v3)\n
            {\n
                if (!v3)\n
                    return 0;\n
                if (v4)\n
                {\n
                    v12 = v3 + 1;\n
                    do\n
                    {\n
                        Vector::RemoveLast();\n
                        v12 -= 1;\n
                        if (v12 < 2)\n
                            return 0;\n
                    } while (v2->field_210->field_0->field_8);\n
                }\n
                cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
                cgc__terminate(1);\n
                goto LABEL_4078b8;\n
            }\n
        }\n
        cgc_sprintf(&v2->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
        v2->field_20c = 1;\n
        v5 = v2->field_210;\n
        v6 = *(v5);\n
        v14 = *(v5)->field_8;\n
        if (v14 != v6->field_4)\n
        {\n
            v11 = v6->field_0;\n
        }\n
        else\n
        {\n
            v7 = v6->field_c;\n
            v8 = v7 * ((0 CONCAT v14) /m v7 + 1);\n
            v9 = v8 * 4;\n
            v0 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v9 * 4));\n
            cgc_memcpy(v0, v6->field_0, v6->field_4 * 4);\n
            v13 = v6->field_0;\n
            if (v13)\n
                operator delete[](v13);\n
            v11 = v0;\n
            v6->field_0 = v11;\n
            v6->field_4 = v8;\n
            v14 = v6->field_8;\n
        }\n
        *((v11 + v14 * 4)) = v3;\n
        v6->field_8 = &v6->field_8->field_0 + 1;\n
LABEL_407997:\n
        return 2;\n
    }\n
}\n
", "4225446:sub_4079a6": null, "4225456:_ZN2VC5DropNEi": "typedef struct struct_1 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_2 *field_210;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
int VC::DropN(struct_1 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // ebp\n
    struct_1 *v3;  // edi\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ebp\n
\n
    v2 = a0;\n
    v3 = v1;\n
    if (a0 >= 0)\n
    {\n
        v4 = v3->field_210->field_0->field_8;\n
        if (v4 >= v2)\n
        {\n
            if (!v2)\n
                return 0;\n
            if (v4)\n
            {\n
                v5 = v2 + 1;\n
                do\n
                {\n
                    Vector::RemoveLast();\n
                    v5 -= 1;\n
                    if (v5 < 2)\n
                        return 0;\n
                } while (v3->field_210->field_0->field_8);\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(1);\n
        }\n
    }\n
    v0 = \"dropn\";\n
    cgc_sprintf(&v3->padding_0[268], \"Error: Too few arguments for '%s' command\\n
\");\n
    v3->field_20c = 1;\n
    return 2;\n
}\n
", "4225647:sub_407a6f": null, "4225648:_ZN2VC4UndoEv": "typedef struct struct_1 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    unsigned int field_210;\n
    struct struct_2 *field_214;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int VC::Undo(struct_1 *v5)\n
{\n
    char v0;  // [bp-0x18]\n
    char v1;  // [bp-0x14]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v4;  // [bp-0x4]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // esi\n
    struct_1 *v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // ebx\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v8 = v5;\n
    if (v8->field_214->field_0->field_8 <= 0)\n
    {\n
        cgc_sprintf(&v8->padding_0[268], \"Error: Invalid input\\n
\");\n
        v8->field_20c = 1;\n
        v11 = v3;\n
        v12 = v4;\n
        return 2;\n
    }\n
    Vector::RemoveLast(&v1);\n
    v8->field_210 = *(&v0);\n
    v9 = *(&v2);\n
    v10 = v3;\n
    return 1;\n
}\n
", "4225767:sub_407ae7": null, "4225776:_ZN2VC6InvertEv": "typedef struct struct_2 {\n
    char padding_0[528];\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int VC::Invert(struct_2 *v0)\n
{\n
    struct_0 *v1;  // eax\n
    unsigned int v2;  // edi\n
    unsigned int *v3;  // ecx\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // edi\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // edx\n
\n
    v1 = v0->field_210->field_0;\n
    v2 = v1->field_8;\n
    if (v2 + 1 < 3)\n
        return 0;\n
    v3 = v1->field_0;\n
    v8 = 0;\n
    v7 = -1;\n
    do\n
    {\n
        v4 = v3[v8];\n
        v5 = v2 + v7;\n
        v3[v8] = v3[v5];\n
        v3[v7 + v1->field_8] = v4;\n
        v8 += 1;\n
        v2 = v1->field_8;\n
        v7 -= 1;\n
    } while (v8 < (v1->field_8 >> 31) + v1->field_8 >> 1);\n
    return 0;\n
}\n
", "4225871:sub_407b4f": null, "4225872:_ZN2VC7ShuffleEv": "typedef struct struct_2 {\n
    char padding_0[524];\n
    unsigned int field_20c;\n
    struct struct_3 *field_210;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int VC::Shuffle(struct_2 *v5)\n
{\n
    char v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_2 *v6;  // esi\n
    unsigned int v7;  // eax\n
    char v8[2];  // eax\n
    struct struct_0 **v10;  // edi\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // ecx\n
    struct_0 *v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebp\n
    char v16[2];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v17;  // ecx\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // edx\n
    unsigned int *v20;  // eax\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edi\n
\n
    v6 = v5;\n
    v7 = v6->field_210->field_0->field_8;\n
    if (v7 <= 1)\n
    {\n
        cgc_sprintf(&v6->padding_0[268], \"Error: Invalid input\\n
\");\n
        v6->field_20c = 1;\n
        return 2;\n
    }\n
    v8 = operator new[](v7);\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_memcpy(v8, 0x4347c000, v6->field_210->field_0->field_8);\n
    v10 = v6->field_210;\n
    v13 = *(v10);\n
    v11 = v13->field_8;\n
    if (v11 >= 2)\n
    {\n
        v12 = 1;\n
        do\n
        {\n
            v8[v12] = v8[v12] ^ ((v12 * 2155905153 >> 32 >> 7) + v12);\n
            v12 += 1;\n
            v13 = *(v10);\n
            v11 = *((v13 + 8));\n
        } while (v12 < v11);\n
    }\n
    *(&v0) = v8;\n
    if (v11 != 1)\n
    {\n
        v2 = *(v13);\n
        v14 = -(v11);\n
        v15 = v11;\n
        v16 = v0;\n
        v17 = v13;\n
        while (true)\n
        {\n
            v3 = v14;\n
            v18 = *((v16 + v11 - 1));\n
            v19 = (0 CONCAT v18) /m v11 >> 32;\n
            v20 = v14 + v15;\n
            v21 = v2;\n
            v4 = *((v21 + v20 * 4));\n
            v22 = ~(v19);\n
            *((v21 + v20 * 4)) = *((v21 + (v15 + v22) * 4));\n
            *((v21 + (v22 + v17->field_8) * 4)) = v4;\n
            v23 = v3;\n
            if (v23 == -2)\n
                break;\n
            v15 = v17->field_8;\n
            v14 = v23 + 1;\n
            v11 -= 1;\n
            v16 = v0;\n
        }\n
    }\n
    operator delete(v0);\n
    return 0;\n
}\n
", "4226193:sub_407c91": null, "4226208:_ZN6VectorIiE10RemoveLastEv": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
int Vector::RemoveLast(unsigned int v1[4])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // edx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    char *v10;  // ebp\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
\n
    v2 = v1;\n
    v3 = v2->field_8;\n
    if (!v3)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\");\n
        cgc__terminate(1);\n
        return Vector::RemoveLast();\n
    }\n
    v4 = v2->field_4;\n
    v12 = *(&v2->field_0[4 + 4 * v3]);\n
    v5 = v3 - 1;\n
    v2->field_8 = v5;\n
    v7 = v2->field_c;\n
    if (v4 - v5 <= v7)\n
        return v12;\n
    v0 = v12;\n
    v8 = v4 - v7;\n
    v10 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, Shl(edi<4>, 0x2<8>), 0x4<32>, 0x0<32>) ? -1 : (v8 * 4) * 4));\n
    cgc_memcpy(v10, v2->field_0, v8 * 4);\n
    v11 = v2->field_0;\n
    if (v11)\n
        operator delete[](v11);\n
    v2->field_0 = v10;\n
    v2->field_4 = v8;\n
    return v0;\n
}\n
", "4226400:_ZN6VectorIN2VC8HistElemEE10RemoveLastEv": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
int Vector::RemoveLast(unsigned int v0[2], unsigned int a0[4])\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    char *v9;  // ebp\n
    unsigned int v10;  // eax\n
    unsigned int v11[2];  // eax\n
\n
    v1 = a0;\n
    v2 = v1->field_8;\n
    if (!v1->field_8)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\");\n
        cgc__terminate(1);\n
        return VC::DrawScreen();\n
    }\n
    v11 = v0;\n
    v3 = v1->field_0;\n
    v4 = v2 - 1;\n
    v5 = *((v3 + v2 * 8 - 8));\n
    v11[1] = *((v3 + v2 * 8 - 4));\n
    v11[0] = v5;\n
    v1->field_8 = v4;\n
    v6 = v1->field_4;\n
    if (v6 - v4 <= v1->field_c)\n
        return v0;\n
    v7 = v6 - v1->field_c;\n
    v9 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, Shl(edi<4>, 0x3<8>), 0x8<32>, 0x0<32>) ? -1 : (v7 * 8) * 8));\n
    cgc_memcpy(v9, v1->field_0, v7 * 8);\n
    v10 = v1->field_0;\n
    if (v10)\n
        operator delete[](v10);\n
    v1->field_0 = v9;\n
    v1->field_4 = v7;\n
    return v0;\n
}\n
", "4226608:_ZN2VC10DrawScreenEv": "typedef struct struct_3 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[512];\n
    unsigned int field_20c;\n
    struct struct_2 *field_210;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    char padding_4[4];\n
    void* field_8;\n
    char padding_c[512];\n
    unsigned int field_20c;\n
    struct struct_2 *field_210;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern unsigned int g_4094b1;\n
\n
int VC::DrawScreen(struct_3 *v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_1 *v4;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6[3];  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // eax\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    cgc_fprintf(v4->field_8, &g_4094b1);\n
    v5 = v4->field_210->field_0->field_8;\n
    if (v5 < v5)\n
        v5 = v4->field_0;\n
    if (v5)\n
    {\n
        v10 = v5 + 1;\n
        v9 = -(v5);\n
        v1 = \"%03d:\\t\";\n
        do\n
        {\n
            v2 = v9;\n
            v0 = v10 - 2;\n
            cgc_fprintf(v4->field_8, v1);\n
            v6 = v4->field_210->field_0;\n
            v7 = v6[2];\n
            v8 = v2;\n
            if (v7 > v0)\n
            {\n
                v0 = *((v6[0] + (v7 + v8) * 4));\n
                cgc_fprintf(v4->field_8, \"%d\");\n
            }\n
            cgc_fprintf(v4->field_8, \"\\n
\");\n
            v10 -= 1;\n
            v9 = v8 + 1;\n
        } while (v10 > 1);\n
    }\n
    if (v4->field_20c)\n
    {\n
        v11 = cgc_printf(\"%s\");\n
        v4->field_20c = 0;\n
        return v11;\n
    }\n
    if (v4->field_2)\n
    {\n
        v12 = 0;\n
        do\n
        {\n
            cgc_fprintf(v4->field_8, L\"-*/!\u656eg\u6261s\u6f6dd&|^~\u7573m\u7661g\u7564p\u7564\u6e70\u6400\u7075r\u696dn\u616dx\u6564\u7470h\u7264\u706f\u6400\u6f72\u6e70\u7500\u646eo\u7669\u7472\u7300\u7568f\u7245\u6f72\u3a72\u5420\u6f6f\u6620\u7765\u6120\u6772\u6d75\u6e65\u7374\u6620\u726f\u2720\u7325\u2027\u6f63\u6d6d\u6e61\\u0a64\u4100\u7373\u7265\u6974\u6e6f\u4620\u6961\u656c\u3a64\u5020\u706f\u6970\u676e\u6f20\u6666\u6520\u706d\u7974\u7320\u6174\u6b63\\n
\u7341\u6573\u7472\u6f69\\u206e\u6146\u6c69\u6465\u203a\u6547\u7474\u6e69\\u2067\u616c\u7473\u6f20\\u2066\u6d65\u7470\u2079\u6576\u7463\u726f\\n
\u7245\u6f72\u3a72\u4920\u766e\u6c61\u6469\u6920\u706e\u7475\\n
\u7341\u6573\u7472\u6f69\\u206e\u6146\u6c69\u6465\u203a\u6e49\u7570\u2074\u6f74\\u206f\u6f6c\u676e\\n
\u7571\u7469\u2500s\u5b1b\u4a32\u5b1b\");\n
            v12 += 1;\n
        } while (v12 < v4->field_2);\n
    }\n
    v11 = cgc_fprintf(v4->field_8, \"\\n
\");\n
    return v11;\n
}\n
", "4226696:sub_407e88": null, "4226932:sub_407f74": null, "4226944:_ZN2VC12ProcessInputEPc": "typedef struct struct_0 {\n
    char *field_0;\n
    char field_4;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
int VC::ProcessInput(unsigned int v19)\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    char v1;  // [bp-0x58]\n
    char v2;  // [bp-0x54]\n
    unsigned int v3;  // [bp-0x50], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x4c]\n
    unsigned int v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x44]\n
    unsigned int v7;  // [bp-0x40]\n
    unsigned int v8;  // [bp-0x3c]\n
    unsigned int v9;  // [bp-0x38]\n
    unsigned int v10;  // [bp-0x34]\n
    unsigned int v11;  // [bp-0x30]\n
    unsigned int v12;  // [bp-0x2c]\n
    unsigned int v13;  // [bp-0x28]\n
    unsigned int v14;  // [bp-0x24]\n
    unsigned int v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    unsigned int v17;  // [bp-0x18]\n
    unsigned int v18;  // [bp-0x14]\n
    char *v20;  // [bp+0x8]\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // ebp\n
    struct_0 *v26;  // esi, Other Possible Types: unsigned int\n
    unsigned int v27;  // eax\n
    struct_0 *v28;  // esi, Other Possible Types: unsigned int\n
    unsigned int v29;  // ebp\n
    struct_0 *v30;  // esi, Other Possible Types: unsigned int\n
    unsigned int v31;  // ebp\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // eax\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    cgc_memset(&v3, 0, 64);\n
    v21 = cgc_strsep(&v20, \" \");\n
    if (!v21)\n
    {\n
LABEL_40829b:\n
        v45 = \"Assertion Failed: No tokens parsed\\n
\";\n
LABEL_4082aa:\n
        cgc_fprintf(cgc_stderr, v45);\n
        cgc__terminate(1);\n
        return VC::HandleCall();\n
    }\n
    v22 = v19;\n
    v3 = v21;\n
    v23 = cgc_strsep(&v20, \" \");\n
    if (!v23)\n
    {\n
        v26 = v22 + 536;\n
        v25 = 29;\n
        while (true)\n
        {\n
            if (!*((v26 + 4)) && !cgc_strcmp(v3, *(v26)))\n
                break;\n
            v26 += 32;\n
            v25 -= 1;\n
        }\n
        VC::HandleCall(v19);\n
        goto LABEL_408162;\n
    }\n
    else\n
    {\n
        v4 = v23;\n
        v24 = cgc_strsep(&v20, \" \");\n
        if (v24)\n
        {\n
            v5 = v24;\n
            v27 = cgc_strsep(&v20, \" \");\n
            if (v27)\n
            {\n
                v6 = v27;\n
                v32 = cgc_strsep(&v20, \" \");\n
                if (v32)\n
                {\n
                    v7 = v32;\n
                    v33 = cgc_strsep(&v20, \" \");\n
                    if (v33)\n
                    {\n
                        v8 = v33;\n
                        v34 = cgc_strsep(&v20, \" \");\n
                        if (v34)\n
                        {\n
                            v9 = v34;\n
                            v36 = cgc_strsep(&v20, \" \");\n
                            if (v36)\n
                            {\n
                                v10 = v36;\n
                                v37 = cgc_strsep(&v20, \" \");\n
                                if (v37)\n
                                {\n
                                    v11 = v37;\n
                                    v38 = cgc_strsep(&v20, \" \");\n
                                    if (v38)\n
                                    {\n
                                        v12 = v38;\n
                                        v39 = cgc_strsep(&v20, \" \");\n
                                        if (v39)\n
                                        {\n
                                            v13 = v39;\n
                                            v40 = cgc_strsep(&v20, \" \");\n
                                            if (v40)\n
                                            {\n
                                                v14 = v40;\n
                                                v41 = cgc_strsep(&v20, \" \");\n
                                                if (v41)\n
                                                {\n
                                                    v15 = v41;\n
                                                    v42 = cgc_strsep(&v20, \" \");\n
                                                    if (v42)\n
                                                    {\n
                                                        v16 = v42;\n
                                                        v43 = cgc_strsep(&v20, \" \");\n
                                                        if (v43)\n
                                                        {\n
                                                            v17 = v43;\n
                                                            v44 = cgc_strsep(&v20, \" \");\n
                                                            if (v44)\n
                                                            {\n
                                                                v18 = v44;\n
                                                                goto LABEL_40829b;\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                v45 = \"Assertion Failed: Too many tokens parsed\\n
\";\n
                goto LABEL_4082aa;\n
            }\n
            v30 = v22 + 536;\n
            v31 = 29;\n
            while (*((v30 + 4)) != 2)\n
            {\n
LABEL_408030:\n
                v30 += 32;\n
                v31 -= 1;\n
                if (!28)\n
                    goto LABEL_408169;\n
            }\n
            if (!(!cgc_strcmp(v3, *(v30))))\n
                goto LABEL_408030;\n
            if (ParseInt() >= 0)\n
            {\n
                if (ParseInt() < 0)\n
                    goto LABEL_408169;\n
                v0 = *(&v2);\n
                VC::HandleCall(v19, v30, *(&v1));\n
                goto LABEL_408162;\n
            }\n
        }\n
        else\n
        {\n
            v28 = v22 + 536;\n
            v29 = 29;\n
            while (*((v28 + 4)) != 1)\n
            {\n
LABEL_408120:\n
                v28 += 32;\n
                v29 -= 1;\n
                if (!28)\n
                    goto LABEL_408169;\n
            }\n
            if (!(!cgc_strcmp(v3, *(v28))))\n
                goto LABEL_408120;\n
            if (ParseInt() >= 0)\n
            {\n
                VC::HandleCall(v19, v20);\n
LABEL_408162:\n
                return 0;\n
            }\n
        }\n
LABEL_408169:\n
        return -1;\n
    }\n
}\n
", "4227107:sub_408023": null, "4227238:sub_4080a6": null, "4227353:sub_408119": null, "4227776:_ZN2VC10HandleCallEPKNS_12CommandEntryEi": "typedef struct struct_3 {\n
    char padding_0[528];\n
    struct struct_4 *field_210;\n
    struct struct_5 *field_214;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char padding_0[16];\n
    struct struct_6 *field_10;\n
    unsigned int field_14;\n
} struct_7;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_2 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_0 *field_0;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
int VC::HandleCall(struct_3 *v1, struct_7 *a0, unsigned int a1)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    unsigned int *v2;  // ebp\n
    unsigned int v3[4];  // esi\n
    unsigned int v4[4];  // edi\n
    unsigned int v5;  // eax\n
    char *v7;  // eax\n
    unsigned int v8;  // ecx\n
    struct_3 *v10;  // esi\n
    struct_7 *v11;  // eax\n
    struct struct_6 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // eax\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // eax\n
    unsigned int v20;  // ebp\n
    struct_7 *v21;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax\n
    unsigned int *v23;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = cgc_malloc(4);\n
    v3 = v1->field_210->field_0;\n
    v4 = operator new(16);\n
    v5 = v3[1] * 4;\n
    v7 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v5 * 4));\n
    v4[0] = v7;\n
    v8 = v3[1];\n
    v4[1] = v8;\n
    v4[2] = v3[2];\n
    v4[3] = v3[3];\n
    v10 = v1;\n
    cgc_memcpy(v7, v3[0], v8 * 4);\n
    *(v2) = v4;\n
    v23 = v2;\n
    v11 = a0;\n
    v12 = v11->field_10;\n
    v13 = &v10->padding_0[v11->field_14];\n
    if ((v12 & 1))\n
        v12 = *((-1 + v12 + *(v13)));\n
    v14 = v12(v13);\n
    if (v14)\n
        return v14;\n
    v15 = v10->field_214->field_0;\n
    v14 = v15->field_8;\n
    if (v14 != v15->field_4)\n
    {\n
        v20 = v15->field_0;\n
        v21 = a0;\n
    }\n
    else\n
    {\n
        v0 = v2;\n
        v16 = v15->field_c;\n
        v17 = v16 * ((0 CONCAT v14) /m v16 + 1);\n
        v18 = v17 * 8;\n
        v20 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x8<32>, 0x0<32>) ? -1 : v18 * 8));\n
        cgc_memcpy(v20, v15->field_0, v15->field_4 * 8);\n
        v22 = v15->field_0;\n
        if (v22)\n
            operator delete[](v22);\n
        v15->field_0 = v20;\n
        v15->field_4 = v17;\n
        v14 = v15->field_8;\n
        v21 = a0;\n
        v23 = v0;\n
    }\n
    *((v20 + v14 * 8)) = v23;\n
    *((v20 + v14 * 8 + 4)) = v21;\n
    v15->field_8 = &v15->field_8->field_0 + 1;\n
    return v14;\n
}\n
", "4228107:sub_40840b": null, "4228112:_ZN2VC10HandleCallEPKNS_12CommandEntryE": "typedef struct struct_3 {\n
    char padding_0[528];\n
    struct struct_4 *field_210;\n
    struct struct_5 *field_214;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char padding_0[8];\n
    struct struct_6 *field_8;\n
    unsigned int field_c;\n
} struct_7;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_0 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_1 *field_0;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
int VC::HandleCall(struct_3 *v1, struct_7 *a0)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    unsigned int *v2;  // ebp\n
    unsigned int v3[4];  // esi\n
    unsigned int v4[4];  // edi\n
    unsigned int v5;  // eax\n
    char *v7;  // eax\n
    unsigned int v8;  // ecx\n
    struct_3 *v10;  // esi\n
    struct_7 *v11;  // eax\n
    struct struct_6 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v15;  // esi\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // eax\n
    unsigned int v20;  // ebp\n
    struct_7 *v21;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax\n
    unsigned int *v23;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = cgc_malloc(4);\n
    v3 = v1->field_210->field_0;\n
    v4 = operator new(16);\n
    v5 = v3[1] * 4;\n
    v7 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v5 * 4));\n
    v4[0] = v7;\n
    v8 = v3[1];\n
    v4[1] = v8;\n
    v4[2] = v3[2];\n
    v4[3] = v3[3];\n
    v10 = v1;\n
    cgc_memcpy(v7, v3[0], v8 * 4);\n
    *(v2) = v4;\n
    v23 = v2;\n
    v11 = a0;\n
    v12 = v11->field_8;\n
    if ((v12 & 1))\n
        v12 = *((-1 + v12 + *(&v10->padding_0[v11->field_c])));\n
    v14 = v12();\n
    if (v14)\n
        return v14;\n
    v15 = v10->field_214->field_0;\n
    v14 = v15->field_8;\n
    if (v14 != v15->field_4)\n
    {\n
        v20 = v15->field_0;\n
        v21 = a0;\n
    }\n
    else\n
    {\n
        v0 = v2;\n
        v16 = v15->field_c;\n
        v17 = v16 * ((0 CONCAT v14) /m v16 + 1);\n
        v18 = v17 * 8;\n
        v20 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x8<32>, 0x0<32>) ? -1 : v18 * 8));\n
        cgc_memcpy(v20, v15->field_0, v15->field_4 * 8);\n
        v22 = v15->field_0;\n
        if (v22)\n
            operator delete[](v22);\n
        v15->field_0 = v20;\n
        v15->field_4 = v17;\n
        v14 = v15->field_8;\n
        v21 = a0;\n
        v23 = v0;\n
    }\n
    *((v20 + v14 * 8)) = v23;\n
    *((v20 + v14 * 8 + 4)) = v21;\n
    v15->field_8 = &v15->field_8->field_0 + 1;\n
    return v14;\n
}\n
", "4228435:sub_408553": null, "4228448:_ZN2VC10HandleCallEPKNS_12CommandEntryEii": "typedef struct struct_3 {\n
    char padding_0[528];\n
    struct struct_4 *field_210;\n
    struct struct_5 *field_214;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char padding_0[24];\n
    struct struct_6 *field_18;\n
    unsigned int field_1c;\n
} struct_7;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_2 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_0 *field_0;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
int VC::HandleCall(struct_3 *v1, struct_7 *a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int *v0;  // [bp-0x14]\n
    unsigned int *v2;  // ebp\n
    unsigned int v3[4];  // esi\n
    unsigned int v4[4];  // edi\n
    unsigned int v5;  // eax\n
    char *v7;  // eax\n
    unsigned int v8;  // ecx\n
    struct_3 *v10;  // esi\n
    struct_7 *v11;  // eax\n
    struct struct_6 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // eax\n
    unsigned int *v14;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // eax\n
    unsigned int v20;  // ebp\n
    struct_7 *v21;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v22;  // eax\n
    unsigned int *v23;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = cgc_malloc(4);\n
    v3 = v1->field_210->field_0;\n
    v4 = operator new(16);\n
    v5 = v3[1] * 4;\n
    v7 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x4<32>, 0x0<32>) ? -1 : v5 * 4));\n
    v4[0] = v7;\n
    v8 = v3[1];\n
    v4[1] = v8;\n
    v4[2] = v3[2];\n
    v4[3] = v3[3];\n
    v10 = v1;\n
    cgc_memcpy(v7, v3[0], v8 * 4);\n
    *(v2) = v4;\n
    v23 = v2;\n
    v11 = a0;\n
    v12 = v11->field_18;\n
    v13 = &v10->padding_0[v11->field_1c];\n
    if ((v12 & 1))\n
        v12 = *((-1 + v12 + *(v13)));\n
    v14 = v12(v13, a1);\n
    if (v14)\n
        return v14;\n
    v15 = v10->field_214->field_0;\n
    v14 = v15->field_8;\n
    if (v14 != v15->field_4)\n
    {\n
        v20 = v15->field_0;\n
        v21 = a0;\n
    }\n
    else\n
    {\n
        v0 = v2;\n
        v16 = v15->field_c;\n
        v17 = v16 * ((0 CONCAT v14) /m v16 + 1);\n
        v18 = v17 * 8;\n
        v20 = operator new[](([D] x86g_calculate_condition(0x1<32>, 0x24<32>, eax<4>, 0x8<32>, 0x0<32>) ? -1 : v18 * 8));\n
        cgc_memcpy(v20, v15->field_0, v15->field_4 * 8);\n
        v22 = v15->field_0;\n
        if (v22)\n
            operator delete[](v22);\n
        v15->field_0 = v20;\n
        v15->field_4 = v17;\n
        v14 = v15->field_8;\n
        v21 = a0;\n
        v23 = v0;\n
    }\n
    *((v20 + v14 * 8)) = v23;\n
    *((v20 + v14 * 8 + 4)) = v21;\n
    v15->field_8 = &v15->field_8->field_0 + 1;\n
    return v14;\n
}\n
", "4228788:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:memcpy": null, "5242888:__libc_start_main": null, "5242892:cgc_receive": null, "5242896:_Znaj": null, "5242900:cgc_allocate": null, "5242904:cgc__terminate": null, "5242908:_ZdlPv": null, "5242912:cgc_deallocate": null, "5242916:_ZdaPv": null, "5242920:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}